{"version":3,"sources":["../node_modules/@patternfly/react-tokens/dist/esm/chart_color_cyan_100.js","../node_modules/@patternfly/react-tokens/dist/esm/chart_color_cyan_300.js","../node_modules/@patternfly/react-tokens/dist/esm/chart_color_purple_100.js","../node_modules/@patternfly/react-tokens/dist/esm/chart_color_purple_300.js","components/rhelView/rhelView.js"],"names":["chart_color_cyan_100","chart_color_cyan_300","chart_color_purple_100","chart_color_purple_300","RhelView","this","props","initialGraphFilters","initialGuestsFilters","initialInventoryFilters","initialInventorySettings","initialSubscriptionsInventoryFilters","initialToolbarFilters","location","productLabel","query","graphTallyQuery","inventoryHostsQuery","inventorySubscriptionsQuery","routeDetail","t","viewId","isC3","parsedSearch","c3","apiQueries","parseRhsmQuery","initialGraphTallyQuery","initialInventoryHostsQuery","initialInventorySubscriptionsQuery","toolbarQuery","includeTour","appName","helpers","UI_DISPLAY_NAME","context","productId","pathParameter","filterOptions","key","filterGraphData","cardTitle","productShortLabel","title","filterGuestsData","filterInventoryData","settings","UI_DISABLED_TABLE_SUBSCRIPTIONS","React","Component","defaultProps","RHSM_API_QUERY_TYPES","GRANULARITY","GRANULARITY_TYPES","DAILY","SORT","RHSM_API_QUERY_SORT_TYPES","LAST_SEEN","DIRECTION","SORT_DIRECTION_TYPES","ASCENDING","LIMIT","OFFSET","RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES","UPCOMING_EVENT_DATE","id","fill","chartColorBlueLight","value","stroke","chartColorBlueDark","color","chartColorCyanLight","chartColorCyanDark","chartColorPurpleLight","chartColorPurpleDark","header","translate","cell","data","session","displayName","inventoryId","authorized","inventory","Button","isInline","component","variant","target","href","UI_DEPLOY_PATH_PREFIX","cellWidth","lastSeen","DateFormat","date","numberOfGuests","updatedDisplayName","Fragment","count","isSortable","cloudProvider","measurementType","isWrappable","upcomingEventDate","moment","utc","format","SLA","USAGE","selected","makeMapStateToProps","reduxSelectors","view","makeView","ConnectedRhelView","connect"],"mappings":"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","file":"static/js/2.3c810775.chunk.js","sourcesContent":["export const chart_color_cyan_100 = {\n  \"name\": \"--pf-chart-color-cyan-100\",\n  \"value\": \"#a2d9d9\",\n  \"var\": \"var(--pf-chart-color-cyan-100)\"\n};\nexport default chart_color_cyan_100;","export const chart_color_cyan_300 = {\n  \"name\": \"--pf-chart-color-cyan-300\",\n  \"value\": \"#009596\",\n  \"var\": \"var(--pf-chart-color-cyan-300)\"\n};\nexport default chart_color_cyan_300;","export const chart_color_purple_100 = {\n  \"name\": \"--pf-chart-color-purple-100\",\n  \"value\": \"#b2b0ea\",\n  \"var\": \"var(--pf-chart-color-purple-100)\"\n};\nexport default chart_color_purple_100;","export const chart_color_purple_300 = {\n  \"name\": \"--pf-chart-color-purple-300\",\n  \"value\": \"#5752d1\",\n  \"var\": \"var(--pf-chart-color-purple-300)\"\n};\nexport default chart_color_purple_300;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  chart_color_blue_100 as chartColorBlueLight,\n  chart_color_blue_300 as chartColorBlueDark,\n  chart_color_cyan_100 as chartColorCyanLight,\n  chart_color_cyan_300 as chartColorCyanDark,\n  chart_color_purple_100 as chartColorPurpleLight,\n  chart_color_purple_300 as chartColorPurpleDark\n} from '@patternfly/react-tokens';\nimport { Button, Label as PfLabel } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/cjs/DateFormat';\nimport moment from 'moment';\nimport { PageLayout, PageHeader, PageMessages, PageSection, PageToolbar } from '../pageLayout/pageLayout';\nimport {\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_TYPES,\n  RHSM_API_QUERY_SORT_TYPES,\n  RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES\n} from '../../types/rhsmApiTypes';\nimport { apiQueries, connect, reduxSelectors } from '../../redux';\nimport GraphCard from '../graphCard/graphCard';\nimport C3GraphCard from '../c3GraphCard/c3GraphCard';\nimport Toolbar from '../toolbar/toolbar';\nimport InventoryList from '../inventoryList/inventoryList';\nimport InventorySubscriptions from '../inventorySubscriptions/inventorySubscriptions';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A Red Hat Enterprise Linux encompassing view, and system architectures.\n *\n * @augments React.Component\n */\nclass RhelView extends React.Component {\n  componentDidMount() {}\n\n  /**\n   * Render a RHEL view.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const {\n      initialGraphFilters,\n      initialGuestsFilters,\n      initialInventoryFilters,\n      initialInventorySettings,\n      initialSubscriptionsInventoryFilters,\n      initialToolbarFilters,\n      location,\n      productLabel,\n      query,\n      graphTallyQuery,\n      inventoryHostsQuery,\n      inventorySubscriptionsQuery,\n      routeDetail,\n      t,\n      viewId\n    } = this.props;\n    const isC3 = location?.parsedSearch?.c3 === '';\n    const {\n      graphTallyQuery: initialGraphTallyQuery,\n      inventoryHostsQuery: initialInventoryHostsQuery,\n      inventorySubscriptionsQuery: initialInventorySubscriptionsQuery,\n      toolbarQuery\n    } = apiQueries.parseRhsmQuery(query, { graphTallyQuery, inventoryHostsQuery, inventorySubscriptionsQuery });\n\n    return (\n      <PageLayout>\n        <PageHeader productLabel={productLabel} includeTour>\n          {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: productLabel })}\n        </PageHeader>\n        <PageMessages>\n          <BannerMessages productId={routeDetail.pathParameter} viewId={viewId} query={query} />\n        </PageMessages>\n        <PageToolbar>\n          <Toolbar\n            filterOptions={initialToolbarFilters}\n            productId={routeDetail.pathParameter}\n            query={toolbarQuery}\n            viewId={viewId}\n          />\n        </PageToolbar>\n        <PageSection>\n          {(isC3 && (\n            <C3GraphCard\n              key={routeDetail.pathParameter}\n              filterGraphData={initialGraphFilters}\n              query={initialGraphTallyQuery}\n              productId={routeDetail.pathParameter}\n              viewId={viewId}\n              cardTitle={t('curiosity-graph.socketsHeading')}\n              productShortLabel={productLabel}\n            />\n          )) || (\n            <GraphCard\n              key={routeDetail.pathParameter}\n              filterGraphData={initialGraphFilters}\n              query={initialGraphTallyQuery}\n              productId={routeDetail.pathParameter}\n              viewId={viewId}\n              cardTitle={t('curiosity-graph.socketsHeading')}\n              productLabel={productLabel}\n            />\n          )}\n        </PageSection>\n        <PageSection>\n          <InventoryTabs productId={routeDetail.pathParameter}>\n            <InventoryTab key=\"hostsTab\" title={t('curiosity-inventory.tab', { context: 'hosts' })}>\n              <InventoryList\n                key={routeDetail.pathParameter}\n                filterGuestsData={initialGuestsFilters}\n                filterInventoryData={initialInventoryFilters}\n                productId={routeDetail.pathParameter}\n                settings={initialInventorySettings}\n                query={initialInventoryHostsQuery}\n                viewId={viewId}\n              />\n            </InventoryTab>\n            {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && (\n              <InventoryTab key=\"subscriptionsTab\" title={t('curiosity-inventory.tab', { context: 'subscriptions' })}>\n                <InventorySubscriptions\n                  key={routeDetail.pathParameter}\n                  filterInventoryData={initialSubscriptionsInventoryFilters}\n                  productId={routeDetail.pathParameter}\n                  query={initialInventorySubscriptionsQuery}\n                  viewId={viewId}\n                />\n              </InventoryTab>\n            )}\n          </InventoryTabs>\n        </PageSection>\n      </PageLayout>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{productLabel: string, inventorySubscriptionsQuery: object, query: object,\n *     initialSubscriptionsInventoryFilters: Array, initialInventorySettings: object, initialToolbarFilters: Array,\n *     viewId: string, t: Function, graphTallyQuery: object, inventoryHostsQuery: object,\n *     initialGraphFilters: Array, routeDetail: object, location: object, initialGuestsFilters: Array,\n *     initialInventoryFilters: Array}}\n */\nRhelView.propTypes = {\n  query: PropTypes.object,\n  graphTallyQuery: PropTypes.shape({\n    [RHSM_API_QUERY_TYPES.GRANULARITY]: PropTypes.oneOf([...Object.values(GRANULARITY_TYPES)])\n  }),\n  inventoryHostsQuery: PropTypes.shape({\n    [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n    [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n    [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SORT_TYPES)]),\n    [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n  }),\n  inventorySubscriptionsQuery: PropTypes.shape({\n    [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n    [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n    [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES)]),\n    [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n  }),\n  initialGraphFilters: PropTypes.array,\n  initialGuestsFilters: PropTypes.array,\n  initialInventoryFilters: PropTypes.array,\n  initialInventorySettings: PropTypes.shape({\n    hasGuests: PropTypes.func\n  }),\n  initialSubscriptionsInventoryFilters: PropTypes.array,\n  initialToolbarFilters: PropTypes.array,\n  location: PropTypes.shape({\n    parsedSearch: PropTypes.objectOf(PropTypes.string)\n  }).isRequired,\n  productLabel: PropTypes.string,\n  routeDetail: PropTypes.shape({\n    pathParameter: PropTypes.string.isRequired,\n    pathId: PropTypes.string.isRequired,\n    routeItem: PropTypes.shape({\n      title: PropTypes.string\n    })\n  }).isRequired,\n  t: PropTypes.func,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{productLabel: string, inventorySubscriptionsQuery: object, query: object,\n *     initialSubscriptionsInventoryFilters: Array, initialInventorySettings: object, initialToolbarFilters: Array,\n *     viewId: string, t: translate, graphTallyQuery: object, inventoryHostsQuery: object,\n *     initialGraphFilters: Array, initialGuestsFilters: Array, initialInventoryFilters: Array}}\n */\nRhelView.defaultProps = {\n  query: {},\n  graphTallyQuery: {\n    [RHSM_API_QUERY_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY\n  },\n  inventoryHostsQuery: {\n    [RHSM_API_QUERY_TYPES.SORT]: RHSM_API_QUERY_SORT_TYPES.LAST_SEEN,\n    [RHSM_API_QUERY_TYPES.DIRECTION]: SORT_DIRECTION_TYPES.ASCENDING,\n    [RHSM_API_QUERY_TYPES.LIMIT]: 100,\n    [RHSM_API_QUERY_TYPES.OFFSET]: 0\n  },\n  inventorySubscriptionsQuery: {\n    [RHSM_API_QUERY_TYPES.SORT]: RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES.UPCOMING_EVENT_DATE,\n    [RHSM_API_QUERY_TYPES.DIRECTION]: SORT_DIRECTION_TYPES.ASCENDING,\n    [RHSM_API_QUERY_TYPES.LIMIT]: 100,\n    [RHSM_API_QUERY_TYPES.OFFSET]: 0\n  },\n  initialGraphFilters: [\n    {\n      id: 'physicalSockets',\n      fill: chartColorBlueLight.value,\n      stroke: chartColorBlueDark.value,\n      color: chartColorBlueDark.value\n    },\n    {\n      id: 'hypervisorSockets',\n      fill: chartColorCyanLight.value,\n      stroke: chartColorCyanDark.value,\n      color: chartColorCyanDark.value\n    },\n    {\n      id: 'cloudSockets',\n      fill: chartColorPurpleLight.value,\n      stroke: chartColorPurpleDark.value,\n      color: chartColorPurpleDark.value\n    },\n    { id: 'thresholdSockets' }\n  ],\n  initialGuestsFilters: [\n    {\n      id: 'displayName',\n      header: translate('curiosity-inventory.header', { context: 'guestsDisplayName' }),\n      cell: (data, session) => {\n        const { displayName, inventoryId } = data;\n        const { inventory: authorized } = session?.authorized || {};\n\n        if (!inventoryId?.value) {\n          return displayName?.value;\n        }\n\n        if (!authorized) {\n          return displayName?.value || inventoryId?.value;\n        }\n\n        return (\n          <Button\n            isInline\n            component=\"a\"\n            variant=\"link\"\n            target=\"_blank\"\n            href={`${helpers.UI_DEPLOY_PATH_PREFIX}/insights/inventory/${inventoryId.value}/`}\n          >\n            {displayName.value || inventoryId.value}\n          </Button>\n        );\n      }\n    },\n    {\n      id: 'inventoryId',\n      cellWidth: 40\n    },\n    {\n      id: 'lastSeen',\n      cell: data => (data?.lastSeen?.value && <DateFormat date={data?.lastSeen?.value} />) || '',\n      cellWidth: 15\n    }\n  ],\n  initialInventoryFilters: [\n    {\n      id: 'displayName',\n      cell: (data, session) => {\n        const { displayName = {}, inventoryId = {}, numberOfGuests = {} } = data;\n        const { inventory: authorized } = session?.authorized || {};\n\n        if (!inventoryId.value) {\n          return displayName.value;\n        }\n\n        let updatedDisplayName = displayName.value || inventoryId.value;\n\n        if (authorized) {\n          updatedDisplayName = (\n            <Button\n              isInline\n              component=\"a\"\n              variant=\"link\"\n              target=\"_blank\"\n              href={`${helpers.UI_DEPLOY_PATH_PREFIX}/insights/inventory/${inventoryId.value}/`}\n            >\n              {displayName.value || inventoryId.value}\n            </Button>\n          );\n        }\n\n        return (\n          <React.Fragment>\n            {updatedDisplayName}{' '}\n            {(numberOfGuests.value &&\n              translate('curiosity-inventory.label', { context: 'numberOfGuests', count: numberOfGuests.value }, [\n                <PfLabel color=\"blue\" />\n              ])) ||\n              ''}\n          </React.Fragment>\n        );\n      },\n      isSortable: true\n    },\n    {\n      id: 'measurementType',\n      cell: data => {\n        const { cloudProvider = {}, measurementType = {} } = data;\n        return (\n          <React.Fragment>\n            {translate('curiosity-inventory.measurementType', { context: measurementType.value })}{' '}\n            {(cloudProvider.value && (\n              <PfLabel color=\"purple\">\n                {translate('curiosity-inventory.cloudProvider', { context: cloudProvider.value })}\n              </PfLabel>\n            )) ||\n              ''}\n          </React.Fragment>\n        );\n      },\n      isSortable: true,\n      cellWidth: 20\n    },\n    {\n      id: 'sockets',\n      isSortable: true,\n      isWrappable: true,\n      cellWidth: 15\n    },\n    {\n      id: 'lastSeen',\n      cell: data => (data?.lastSeen?.value && <DateFormat date={data?.lastSeen?.value} />) || '',\n      isSortable: true,\n      isWrappable: true,\n      cellWidth: 15\n    }\n  ],\n  initialInventorySettings: {},\n  initialSubscriptionsInventoryFilters: [\n    {\n      id: 'productName',\n      isSortable: true\n    },\n    {\n      id: 'serviceLevel',\n      isSortable: true,\n      isWrappable: true,\n      cellWidth: 15\n    },\n    {\n      id: 'upcomingEventDate',\n      cell: data =>\n        (data?.upcomingEventDate?.value && moment.utc(data?.upcomingEventDate?.value).format('YYYY-DD-MM')) || '',\n      isSortable: true,\n      isWrappable: true,\n      cellWidth: 15\n    }\n  ],\n  initialToolbarFilters: [\n    {\n      id: RHSM_API_QUERY_TYPES.SLA\n    },\n    {\n      id: RHSM_API_QUERY_TYPES.USAGE,\n      selected: true\n    }\n  ],\n  productLabel: 'RHEL',\n  t: translate,\n  viewId: 'viewRHEL'\n};\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.view.makeView(RhelView.defaultProps);\n\nconst ConnectedRhelView = connect(makeMapStateToProps)(RhelView);\n\nexport { ConnectedRhelView as default, ConnectedRhelView, RhelView };\n"],"sourceRoot":""}