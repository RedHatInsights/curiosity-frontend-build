{"version":3,"sources":["components/form/formHelpers.js","components/form/textInput.js","../node_modules/@patternfly/react-styles/css/components/FormControl/form-control.js","../../../../../src/components/TextInput/TextInput.tsx"],"names":["createMockEvent","event","persistEvent","checked","currentTarget","keyCode","persist","helpers","noop","target","id","name","value","doesNotHaveMinimumCharacters","characters","length","formHelpers","TextInput","state","updatedValue","onKeyUp","props","onClear","type","clonedEvent","setState","onMouseUp","setTimeout","onChange","this","className","isDisabled","isReadOnly","updatedName","generateId","updatedId","React","Component","defaultProps","exports","__esModule","require","default","TextInputTypes"],"mappings":"+VASMA,EAAkB,SAACC,GAAiC,IAA1BC,EAAyB,yEACoCD,GAAnFE,EAD+C,EAC/CA,QAD+C,IACtCC,qBADsC,MACtB,GADsB,EAClBC,EADkB,EAClBA,QADkB,IACTC,eADS,MACCC,IAAQC,KADT,MACeC,cADf,MACwB,GADxB,EAMvD,OAJIP,GACFI,IAGK,CACLH,UACAC,gBACAC,UACAK,GAAIN,EAAcM,IAAMN,EAAcO,KACtCA,KAAMP,EAAcO,KACpBL,UACAM,MAAOR,EAAcQ,MACrBH,WAWEI,EAA+B,SAACD,GAAD,IAAQE,EAAR,uDAAqB,EAArB,MACjB,kBAAVF,GAAsBA,EAAMG,OAASD,GAAgC,kBAAVF,GAE/DI,EAAc,CAClBhB,kBACAa,iC,8NCxBII,E,4MACJC,MAAQ,CACNC,aAAc,M,EAShBC,QAAU,SAAAnB,GAAU,IAAD,EACkB,EAAKoB,MAAhCC,EADS,EACTA,QAASF,EADA,EACAA,QAASG,EADT,EACSA,KAClBnB,EAA2BH,EAA3BG,cAAeC,EAAYJ,EAAZI,QACjBmB,EAAW,eAAQvB,GAEzBmB,EAAQpB,0BAAgBC,GAAO,IAEf,KAAZI,IACW,WAATkB,GAA6C,KAAxBnB,EAAcQ,MACrCU,EAAQtB,0BAAgBwB,IAExB,EAAKC,SAAS,CAAEN,aAAc,KAAM,WAClCG,EACEtB,0BAAgB,2BAAKwB,GAAgB,CAAEpB,cAAc,2BAAMoB,EAAYpB,eAAnB,IAAkCQ,MAAO,c,EAavGc,UAAY,SAAAzB,GAAU,IAAD,EACkB,EAAKoB,MAAlCC,EADW,EACXA,QAASI,EADE,EACFA,UAAWH,EADT,EACSA,KACpBnB,EAAkBH,EAAlBG,cACFoB,EAAW,eAAQvB,GAEzByB,EAAU1B,0BAAgBC,GAAO,IAEpB,WAATsB,GAA6C,KAAxBnB,EAAcQ,OAIvCe,YAAW,WACmB,KAAxBvB,EAAcQ,OAChBU,EAAQtB,0BAAgBwB,Q,EAW9BI,SAAW,SAAChB,EAAOX,GAAW,IACpB2B,EAAa,EAAKP,MAAlBO,SACFJ,EAAW,eAAQvB,GAEzB,EAAKwB,SAAS,CAAEN,aAAcP,IAAS,WACrCgB,EAAS5B,0BAAgBwB,Q,4CAS7B,WAAU,IAAD,EACCL,EAAiBU,KAAKX,MAAtBC,aADD,EAeHU,KAAKR,MAZPS,EAHK,EAGLA,UACApB,EAJK,EAILA,GACAqB,EALK,EAKLA,WACApB,EANK,EAMLA,KAKAqB,GAXK,EAOLJ,SAPK,EAQLN,QARK,EASLF,QATK,EAULM,UAVK,EAWLM,YACAT,EAZK,EAYLA,KACAX,EAbK,EAaLA,MACGS,EAdE,6HAgBDY,EAActB,GAAQJ,IAAQ2B,aAC9BC,EAAYzB,GAAMuB,EAExB,OACE,cAAC,IAAD,aACEvB,GAAIyB,EACJxB,KAAMsB,EACNH,UAAS,+BAA0BA,GACnCC,WAAYA,IAAc,EAC1BH,SAAUC,KAAKD,SACfR,QAASS,KAAKT,QACdM,UAAWG,KAAKH,UAChBM,WAAYA,IAAc,EAC1BT,KAAMA,EACNX,MAAK,iBAAEO,QAAF,IAAEA,IAAgBP,SAAlB,QAA2B,IAC5BS,Q,GA1GYe,IAAMC,WA4I9BpB,EAAUqB,aAAe,CACvBR,UAAW,GACXpB,GAAI,KACJqB,YAAY,EACZC,YAAY,EACZrB,KAAM,KACNiB,SAAUrB,IAAQC,KAClBc,QAASf,IAAQC,KACjBY,QAASb,IAAQC,KACjBkB,UAAWnB,IAAQC,KACnBe,KAAM,OACNX,MAAO,K,iCCrKT2B,EAAQC,YAAa,EACrBC,EAAQ,KACRF,EAAQG,QAAU,CAChB,YAAe,oBACf,UAAa,CACX,QAAW,eACX,SAAY,gBACZ,KAAQ,YACR,QAAW,eACX,OAAU,cACV,SAAY,gBACZ,MAAS,aACT,YAAe,mBACf,eAAkB,uBAClB,iBAAoB,4B,6FCTZ,E,wFAAZ,SAAY,GACV,cACEC,EAAF,YACEA,EAAF,+BACEA,EAAF,cACEA,EAAF,cACEA,EAAF,gBACEA,EAAF,oBACEA,EAAF,gBACEA,EAAF,UACEA,EAAF,YACEA,EAAF,UAXF,CAAY,MAAc,KAgE1B,IAAa,EAAb,YAAE,qBAAF,iBAeI,SAAF,EAAY,GAAqB,kCAC3B,EAAJ,YAAM,IAHR,SAAW,cAUX,eAAe,SAAC,GACV,EAAK,MAAM,UACb,EAAK,MAAM,SAAS,EAAM,cAAc,MAAO,IAqBnD,eAAe,WACb,IAAM,EAAW,EAAK,MAAM,UAAY,EAAK,SACzC,GAAY,EAAS,SACvB,YAAS,EAAS,QAAS,OAAO,EAAK,MAAM,SAIjD,cAAc,WACZ,IAAM,EAAW,EAAK,MAAM,UAAY,EAAK,SAE5C,EAAS,QAA6B,MAAQ,OAAO,EAAK,MAAM,OAEjE,EAAS,QAAQ,WAAa,EAAS,QAAQ,aAGjD,UAAU,SAAC,GAAe,MACa,EAAK,MAAlC,EADgB,EAChB,gBAAiB,EADD,EACC,QACrB,GACF,EAAK,cAEP,GAAW,EAAQ,IAGrB,SAAS,SAAC,GAAe,MACa,EAAK,MAAjC,EADe,EACf,gBAAiB,EADF,EACE,OACrB,GACF,EAAK,eAEP,GAAU,EAAO,IAzDZ,EAAM,IAAO,EAAM,eAAkB,EAAM,oBAE9C,QAAQ,MAAM,cAAe,kEAJA,EAfjC,uBAAE,IAAJ,oBAAI,MA6BF,WACM,KAAK,MAAM,kBACb,KAAK,eACD,KACF,OAAO,iBAAiB,SAAU,YAAS,KAAK,aAAc,SAjCtE,CAAI,IAAJ,uBAAI,MAsCF,WACM,KAAK,MAAM,iBACT,KACF,OAAO,oBAAoB,SAAU,YAAS,KAAK,aAAc,QAzCzE,CAAI,IAAJ,SAAI,MA6EF,WACQ,MAmBF,KAnBE,MACJ,EAgBoB,EAhBpB,SACA,EAeoB,EAfpB,UACA,EAcoB,EAdpB,KACA,EAaoB,EAbpB,MACA,EAYoB,EAZpB,UAOA,GAKoB,EAVpB,SAUoB,EATpB,QASoB,EARpB,OAQoB,EAPpB,gBAOoB,EALpB,YACA,EAIoB,EAJpB,WACA,EAGoB,EAHpB,WACA,EAEoB,EAFpB,YACA,EACoB,EADpB,cACA,EAAoB,EAApB,qBACG,EAAK,mBAlBJ,iMAqBA,EAAkB,GAQxB,OAPI,IACF,EAAgB,gBAAhB,eAA0C,EAA1C,OAEE,IACF,EAAgB,eAAiB,GAIjC,yCACM,EAAK,CACT,QAAS,KAAK,QACd,OAAQ,KAAK,OACb,UAAW,cACT,IAAO,YACP,IAAc,IAAiB,SAAW,IAAO,UAAU,QAC3D,IAAc,IAAiB,SAAW,IAAO,UAAU,SACzD,GAA+B,WAAhB,GAA6B,IAAkB,IAAO,UAAU,KACjF,GAAe,IAAO,UAAU,GAChC,GAEF,SAAU,KAAK,aACf,KAAM,EACN,MAAO,EAAK,eACE,IAAc,IAAiB,MAC7C,SAAU,EACV,SAAU,EACV,SAAU,EACV,IAAK,GAAY,KAAK,WAChB,GAAiB,IAAyB,CAAE,MAAO,SAhIjE,GAAmC,aAC1B,cAAc,gBACd,eAA+B,CAClC,aAAY,KACZ,UAAS,GACX,YAAY,EACZ,UAAW,UACT,YAAU,EACV,YAAU,EACV,KAAI,EAAe,KACnB,iBAAe,EACf,SAAQ,cA2HP,IAAM,EAAY,cAAiB,SAAC,EAAuB,GAAxB,OACxC,gBAAC,EAAa,iBAAK,EAAK,CAAE,SAAU,QAEtC,EAAU,YAAc","file":"static/js/21.d3e1bd2c.chunk.js","sourcesContent":["import { helpers } from '../../common/helpers';\n\n/**\n * Create a consistent mock event object.\n *\n * @param {object} event\n * @param {boolean} persistEvent\n * @returns {{keyCode, currentTarget, name, id: *, persist: Function, value, target}}\n */\nconst createMockEvent = (event, persistEvent = false) => {\n  const { checked, currentTarget = {}, keyCode, persist = helpers.noop, target = {} } = { ...event };\n  if (persistEvent) {\n    persist();\n  }\n\n  return {\n    checked,\n    currentTarget,\n    keyCode,\n    id: currentTarget.id || currentTarget.name,\n    name: currentTarget.name,\n    persist,\n    value: currentTarget.value,\n    target\n  };\n};\n\n/**\n * Confirm a string has minimum length.\n *\n * @param {string} value\n * @param {number} characters\n * @returns {boolean}\n */\nconst doesNotHaveMinimumCharacters = (value, characters = 1) =>\n  (typeof value === 'string' && value.length < characters) || typeof value !== 'string';\n\nconst formHelpers = {\n  createMockEvent,\n  doesNotHaveMinimumCharacters\n};\n\nexport { formHelpers as default, formHelpers, createMockEvent, doesNotHaveMinimumCharacters };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TextInput as PfTextInput } from '@patternfly/react-core';\nimport { createMockEvent } from './formHelpers';\nimport { helpers } from '../../common';\n\n/**\n * A wrapper for Patternfly TextInput. Provides restructured event data,\n * and an onClear event for the search type.\n *\n * @augments React.Component\n * @fires onKeyUp\n * @fires onMouseUp\n * @fires onChange\n */\nclass TextInput extends React.Component {\n  state = {\n    updatedValue: null\n  };\n\n  /**\n   * onKeyUp event, provide additional functionality for onClear event.\n   *\n   * @event onKeyUp\n   * @param {object} event\n   */\n  onKeyUp = event => {\n    const { onClear, onKeyUp, type } = this.props;\n    const { currentTarget, keyCode } = event;\n    const clonedEvent = { ...event };\n\n    onKeyUp(createMockEvent(event, true));\n\n    if (keyCode === 27) {\n      if (type === 'search' && currentTarget.value === '') {\n        onClear(createMockEvent(clonedEvent));\n      } else {\n        this.setState({ updatedValue: '' }, () => {\n          onClear(\n            createMockEvent({ ...clonedEvent, ...{ currentTarget: { ...clonedEvent.currentTarget, value: '' } } })\n          );\n        });\n      }\n    }\n  };\n\n  /**\n   * onMouseUp event, provide additional functionality for onClear event.\n   *\n   * @event onMouseUp\n   * @param {object} event\n   */\n  onMouseUp = event => {\n    const { onClear, onMouseUp, type } = this.props;\n    const { currentTarget } = event;\n    const clonedEvent = { ...event };\n\n    onMouseUp(createMockEvent(event, true));\n\n    if (type !== 'search' || currentTarget.value === '') {\n      return;\n    }\n\n    setTimeout(() => {\n      if (currentTarget.value === '') {\n        onClear(createMockEvent(clonedEvent));\n      }\n    });\n  };\n\n  /**\n   * onChange event, provide restructured event.\n   *\n   * @param {string} value\n   * @param {object} event\n   */\n  onChange = (value, event) => {\n    const { onChange } = this.props;\n    const clonedEvent = { ...event };\n\n    this.setState({ updatedValue: value }, () => {\n      onChange(createMockEvent(clonedEvent));\n    });\n  };\n\n  /**\n   * Render a text input.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { updatedValue } = this.state;\n    const {\n      className,\n      id,\n      isDisabled,\n      name,\n      onChange,\n      onClear,\n      onKeyUp,\n      onMouseUp,\n      isReadOnly,\n      type,\n      value,\n      ...props\n    } = this.props;\n    const updatedName = name || helpers.generateId();\n    const updatedId = id || updatedName;\n\n    return (\n      <PfTextInput\n        id={updatedId}\n        name={updatedName}\n        className={`curiosity-text-input ${className}`}\n        isDisabled={isDisabled || false}\n        onChange={this.onChange}\n        onKeyUp={this.onKeyUp}\n        onMouseUp={this.onMouseUp}\n        isReadOnly={isReadOnly || false}\n        type={type}\n        value={updatedValue ?? value ?? ''}\n        {...props}\n      />\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{onKeyUp: Function, isReadOnly: boolean, onChange: Function, onClear: Function,\n *     name: string, className: string, id: string, isDisabled: boolean, onMouseUp: Function,\n *     type: string, value: string}}\n */\nTextInput.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  isDisabled: PropTypes.bool,\n  isReadOnly: PropTypes.bool,\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  onClear: PropTypes.func,\n  onKeyUp: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  type: PropTypes.string,\n  value: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{onKeyUp: Function, isReadOnly: boolean, onChange: Function, onClear: Function,\n *     name: string, className: string, id: string, isDisabled: boolean, onMouseUp: Function,\n *     type: string, value: string}}\n */\nTextInput.defaultProps = {\n  className: '',\n  id: null,\n  isDisabled: false,\n  isReadOnly: false,\n  name: null,\n  onChange: helpers.noop,\n  onClear: helpers.noop,\n  onKeyUp: helpers.noop,\n  onMouseUp: helpers.noop,\n  type: 'text',\n  value: ''\n};\n\nexport { TextInput as default, TextInput };\n","\"use strict\";\nexports.__esModule = true;\nrequire('./form-control.css');\nexports.default = {\n  \"formControl\": \"pf-c-form-control\",\n  \"modifiers\": {\n    \"success\": \"pf-m-success\",\n    \"expanded\": \"pf-m-expanded\",\n    \"icon\": \"pf-m-icon\",\n    \"warning\": \"pf-m-warning\",\n    \"search\": \"pf-m-search\",\n    \"calendar\": \"pf-m-calendar\",\n    \"clock\": \"pf-m-clock\",\n    \"placeholder\": \"pf-m-placeholder\",\n    \"resizeVertical\": \"pf-m-resize-vertical\",\n    \"resizeHorizontal\": \"pf-m-resize-horizontal\"\n  }\n};","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport { css } from '@patternfly/react-styles';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { debounce, trimLeft, canUseDOM } from '../../helpers/util';\nexport var TextInputTypes;\n(function (TextInputTypes) {\n    TextInputTypes[\"text\"] = \"text\";\n    TextInputTypes[\"date\"] = \"date\";\n    TextInputTypes[\"datetimeLocal\"] = \"datetime-local\";\n    TextInputTypes[\"email\"] = \"email\";\n    TextInputTypes[\"month\"] = \"month\";\n    TextInputTypes[\"number\"] = \"number\";\n    TextInputTypes[\"password\"] = \"password\";\n    TextInputTypes[\"search\"] = \"search\";\n    TextInputTypes[\"tel\"] = \"tel\";\n    TextInputTypes[\"time\"] = \"time\";\n    TextInputTypes[\"url\"] = \"url\";\n})(TextInputTypes || (TextInputTypes = {}));\nexport class TextInputBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.inputRef = React.createRef();\n        this.handleChange = (event) => {\n            if (this.props.onChange) {\n                this.props.onChange(event.currentTarget.value, event);\n            }\n        };\n        this.handleResize = () => {\n            const inputRef = this.props.innerRef || this.inputRef;\n            if (inputRef && inputRef.current) {\n                trimLeft(inputRef.current, String(this.props.value));\n            }\n        };\n        this.restoreText = () => {\n            const inputRef = this.props.innerRef || this.inputRef;\n            // restore the value\n            inputRef.current.value = String(this.props.value);\n            // make sure we still see the rightmost value to preserve cursor click position\n            inputRef.current.scrollLeft = inputRef.current.scrollWidth;\n        };\n        this.onFocus = (event) => {\n            const { isLeftTruncated, onFocus } = this.props;\n            if (isLeftTruncated) {\n                this.restoreText();\n            }\n            onFocus && onFocus(event);\n        };\n        this.onBlur = (event) => {\n            const { isLeftTruncated, onBlur } = this.props;\n            if (isLeftTruncated) {\n                this.handleResize();\n            }\n            onBlur && onBlur(event);\n        };\n        if (!props.id && !props['aria-label'] && !props['aria-labelledby']) {\n            // eslint-disable-next-line no-console\n            console.error('Text input:', 'Text input requires either an id or aria-label to be specified');\n        }\n    }\n    componentDidMount() {\n        if (this.props.isLeftTruncated) {\n            this.handleResize();\n            if (canUseDOM) {\n                window.addEventListener('resize', debounce(this.handleResize, 250));\n            }\n        }\n    }\n    componentWillUnmount() {\n        if (this.props.isLeftTruncated) {\n            if (canUseDOM) {\n                window.removeEventListener('resize', debounce(this.handleResize, 250));\n            }\n        }\n    }\n    render() {\n        const _a = this.props, { innerRef, className, type, value, validated, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        onChange, onFocus, onBlur, isLeftTruncated, \n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        isReadOnly, isRequired, isDisabled, iconVariant, customIconUrl, customIconDimensions } = _a, props = __rest(_a, [\"innerRef\", \"className\", \"type\", \"value\", \"validated\", \"onChange\", \"onFocus\", \"onBlur\", \"isLeftTruncated\", \"isReadOnly\", \"isRequired\", \"isDisabled\", \"iconVariant\", \"customIconUrl\", \"customIconDimensions\"]);\n        const customIconStyle = {};\n        if (customIconUrl) {\n            customIconStyle.backgroundImage = `url('${customIconUrl}')`;\n        }\n        if (customIconDimensions) {\n            customIconStyle.backgroundSize = customIconDimensions;\n        }\n        return (React.createElement(\"input\", Object.assign({}, props, { onFocus: this.onFocus, onBlur: this.onBlur, className: css(styles.formControl, validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning, ((iconVariant && iconVariant !== 'search') || customIconUrl) && styles.modifiers.icon, iconVariant && styles.modifiers[iconVariant], className), onChange: this.handleChange, type: type, value: value, \"aria-invalid\": validated === ValidatedOptions.error, required: isRequired, disabled: isDisabled, readOnly: isReadOnly, ref: innerRef || this.inputRef }, ((customIconUrl || customIconDimensions) && { style: customIconStyle }))));\n    }\n}\nTextInputBase.displayName = 'TextInputBase';\nTextInputBase.defaultProps = {\n    'aria-label': null,\n    className: '',\n    isRequired: false,\n    validated: 'default',\n    isDisabled: false,\n    isReadOnly: false,\n    type: TextInputTypes.text,\n    isLeftTruncated: false,\n    onChange: () => undefined\n};\nexport const TextInput = React.forwardRef((props, ref) => (React.createElement(TextInputBase, Object.assign({}, props, { innerRef: ref }))));\nTextInput.displayName = 'TextInput';\n//# sourceMappingURL=TextInput.js.map"],"sourceRoot":""}