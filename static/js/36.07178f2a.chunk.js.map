{"version":3,"sources":["components/chart/chartContext.js"],"names":["DEFAULT_CONTEXT","chartContainerRef","helpers","noop","chartSettings","chartTooltipRef","dataSetsToggle","ChartContext","React","createContext","useChartContext","useContext","useToggleData","useAliasChartContext","contextDataSetsToggle","setDataSetsToggle","onHide","useCallback","id","prevState","onRevert","onToggle","updatedToggle","getIsToggled","context"],"mappings":"ocAQMA,EAAkB,CACtB,CAAEC,kBAAmBC,IAAQC,KAAMC,cAAe,GAAIC,gBAAiBH,IAAQC,KAAMG,eAAgB,IACrGJ,IAAQC,MAGJI,EAAeC,IAAMC,cAAcT,GAOnCU,EAAkB,kBAAMC,qBAAWJ,IAanCK,EAAgB,WAAuE,IAAD,yDAAP,GAAO,IAAnEF,gBAAiBG,OAAkD,MAA3BH,EAA2B,IACnCG,IADmC,IAClFP,eAAgBQ,OADkE,MAC1C,GAD0C,gBAE9CA,EAF8C,GAEnFR,EAFmF,KAEnES,EAFmE,KASpFC,EAASC,uBACb,SAAAC,GACEH,GAAkB,SAAAI,GAAS,kCAAUA,GAAV,kBAAsBD,GAAK,SAExD,CAACH,IASGK,EAAWH,uBAAY,WAC3BF,GAAkB,iBAAO,QACxB,CAACA,IAOEM,EAAWJ,uBACf,SAAAC,GACE,IAAMI,IAAgB,OAAChB,QAAD,IAACA,OAAD,EAACA,EAAiBY,IAExC,OADAH,GAAkB,SAAAI,GAAS,kCAAUA,GAAV,kBAAsBD,EAAKI,OAC/CA,IAET,CAAChB,EAAgBS,IASbQ,EAAeN,uBAAY,SAAAC,GAAE,OAAkB,OAAdZ,QAAc,IAAdA,OAAA,EAAAA,EAAiBY,MAAO,IAAO,CAACZ,IAEvE,OAAO,2BACF,CAAEA,mBADP,IAEEU,SACAI,WACAC,WACAE,kBAIEC,EAAU,CACdjB,eACAP,kBACAU,kBACAE","file":"static/js/36.07178f2a.chunk.js","sourcesContent":["import React, { useCallback, useContext } from 'react';\nimport { helpers } from '../../common';\n\n/**\n * Chart context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [\n  { chartContainerRef: helpers.noop, chartSettings: {}, chartTooltipRef: helpers.noop, dataSetsToggle: [] },\n  helpers.noop\n];\n\nconst ChartContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated chart context.\n *\n * @returns {React.Context<{}>}\n */\nconst useChartContext = () => useContext(ChartContext);\n\n/**\n * ToDo: reevaluate this alternative pattern of passing hooks as options, helps testing\n */\n/**\n * Track, show, and hide chart data layers.\n *\n * @param {object} hooks\n * @param {Function} hooks.useChartContext\n * @returns {{onRevert: Function, onToggle: Function, getIsToggled: Function, dataSetsToggle: object,\n *     onHide: Function}}\n */\nconst useToggleData = ({ useChartContext: useAliasChartContext = useChartContext } = {}) => {\n  const { dataSetsToggle: contextDataSetsToggle = [] } = useAliasChartContext();\n  const [dataSetsToggle, setDataSetsToggle] = contextDataSetsToggle;\n\n  /**\n   * Hide a graph layer.\n   *\n   * @type {(function(*): void)|*}\n   */\n  const onHide = useCallback(\n    id => {\n      setDataSetsToggle(prevState => ({ ...prevState, [id]: true }));\n    },\n    [setDataSetsToggle]\n  );\n\n  // ToDo: re-evaluate useCallback here.\n  /**\n   * Reset graph layers.\n   *\n   * @type {(function(): void)|*}\n   */\n  const onRevert = useCallback(() => {\n    setDataSetsToggle(() => ({}));\n  }, [setDataSetsToggle]);\n\n  /**\n   * Hide/show graph layers.\n   *\n   * @type {function(*): boolean}\n   */\n  const onToggle = useCallback(\n    id => {\n      const updatedToggle = !dataSetsToggle?.[id];\n      setDataSetsToggle(prevState => ({ ...prevState, [id]: updatedToggle }));\n      return updatedToggle;\n    },\n    [dataSetsToggle, setDataSetsToggle]\n  );\n\n  // ToDo: review return undefined if doesn't exist\n  /**\n   * Graph layer status.\n   *\n   * @type {function(*): boolean}\n   */\n  const getIsToggled = useCallback(id => dataSetsToggle?.[id] || false, [dataSetsToggle]);\n\n  return {\n    ...{ dataSetsToggle },\n    onHide,\n    onRevert,\n    onToggle,\n    getIsToggled\n  };\n};\n\nconst context = {\n  ChartContext,\n  DEFAULT_CONTEXT,\n  useChartContext,\n  useToggleData\n};\n\nexport { context as default, context, ChartContext, DEFAULT_CONTEXT, useChartContext, useToggleData };\n"],"sourceRoot":""}