{"version":3,"sources":["components/rhelView/rhelView.js"],"names":["RhelView","this","props","initialGraphFilters","initialGuestsFilters","initialInventoryFilters","initialInventorySettings","initialSubscriptionsInventoryFilters","initialToolbarFilters","productLabel","query","graphTallyQuery","inventoryHostsQuery","inventorySubscriptionsQuery","routeDetail","t","viewId","apiQueries","parseRhsmQuery","initialGraphTallyQuery","initialInventoryHostsQuery","initialInventorySubscriptionsQuery","toolbarQuery","includeTour","appName","helpers","UI_DISPLAY_NAME","context","productId","pathParameter","filterOptions","key","filterGraphData","cardTitle","title","filterGuestsData","filterInventoryData","settings","UI_DISABLED_TABLE_SUBSCRIPTIONS","React","Component","defaultProps","RHSM_API_QUERY_TYPES","GRANULARITY","GRANULARITY_TYPES","DAILY","SORT","RHSM_API_QUERY_SORT_TYPES","LAST_SEEN","DIRECTION","SORT_DIRECTION_TYPES","ASCENDING","LIMIT","OFFSET","RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES","UPCOMING_EVENT_DATE","id","fill","chartColorBlueLight","value","stroke","chartColorBlueDark","color","chartColorCyanLight","chartColorCyanDark","chartColorPurpleLight","chartColorPurpleDark","header","translate","cell","data","session","displayName","inventoryId","authorized","inventory","isInline","component","variant","target","href","UI_DEPLOY_PATH_PREFIX","cellWidth","lastSeen","date","numberOfGuests","updatedDisplayName","Fragment","count","isSortable","cloudProvider","measurementType","isWrappable","upcomingEventDate","moment","utc","format","SLA","USAGE","selected","makeMapStateToProps","reduxSelectors","view","makeView","ConnectedRhelView","connect"],"mappings":"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","file":"static/js/8.ca5550ba.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  chart_color_blue_100 as chartColorBlueLight,\n  chart_color_blue_300 as chartColorBlueDark,\n  chart_color_cyan_100 as chartColorCyanLight,\n  chart_color_cyan_300 as chartColorCyanDark,\n  chart_color_purple_100 as chartColorPurpleLight,\n  chart_color_purple_300 as chartColorPurpleDark\n} from '@patternfly/react-tokens';\nimport { Button, Label as PfLabel } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/cjs/DateFormat';\nimport moment from 'moment';\nimport { PageLayout, PageHeader, PageMessages, PageSection, PageToolbar } from '../pageLayout/pageLayout';\nimport {\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_TYPES,\n  RHSM_API_QUERY_SORT_TYPES,\n  RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES\n} from '../../types/rhsmApiTypes';\nimport { apiQueries, connect, reduxSelectors } from '../../redux';\nimport GraphCard from '../graphCard/graphCard';\nimport Toolbar from '../toolbar/toolbar';\nimport InventoryList from '../inventoryList/inventoryList';\nimport InventorySubscriptions from '../inventorySubscriptions/inventorySubscriptions';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A Red Hat Enterprise Linux encompassing view, and system architectures.\n *\n * @augments React.Component\n */\nclass RhelView extends React.Component {\n  componentDidMount() {}\n\n  /**\n   * Render a RHEL view.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const {\n      initialGraphFilters,\n      initialGuestsFilters,\n      initialInventoryFilters,\n      initialInventorySettings,\n      initialSubscriptionsInventoryFilters,\n      initialToolbarFilters,\n      productLabel,\n      query,\n      graphTallyQuery,\n      inventoryHostsQuery,\n      inventorySubscriptionsQuery,\n      routeDetail,\n      t,\n      viewId\n    } = this.props;\n    const {\n      graphTallyQuery: initialGraphTallyQuery,\n      inventoryHostsQuery: initialInventoryHostsQuery,\n      inventorySubscriptionsQuery: initialInventorySubscriptionsQuery,\n      toolbarQuery\n    } = apiQueries.parseRhsmQuery(query, { graphTallyQuery, inventoryHostsQuery, inventorySubscriptionsQuery });\n\n    return (\n      <PageLayout>\n        <PageHeader productLabel={productLabel} includeTour>\n          {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: productLabel })}\n        </PageHeader>\n        <PageMessages>\n          <BannerMessages productId={routeDetail.pathParameter} viewId={viewId} query={query} />\n        </PageMessages>\n        <PageToolbar>\n          <Toolbar\n            filterOptions={initialToolbarFilters}\n            productId={routeDetail.pathParameter}\n            query={toolbarQuery}\n            viewId={viewId}\n          />\n        </PageToolbar>\n        <PageSection>\n          <GraphCard\n            key={routeDetail.pathParameter}\n            filterGraphData={initialGraphFilters}\n            query={initialGraphTallyQuery}\n            productId={routeDetail.pathParameter}\n            viewId={viewId}\n            cardTitle={t('curiosity-graph.socketsHeading')}\n            productLabel={productLabel}\n          />\n        </PageSection>\n        <PageSection>\n          <InventoryTabs productId={routeDetail.pathParameter}>\n            <InventoryTab key=\"hostsTab\" title={t('curiosity-inventory.tab', { context: 'hosts' })}>\n              <InventoryList\n                key={routeDetail.pathParameter}\n                filterGuestsData={initialGuestsFilters}\n                filterInventoryData={initialInventoryFilters}\n                productId={routeDetail.pathParameter}\n                settings={initialInventorySettings}\n                query={initialInventoryHostsQuery}\n                viewId={viewId}\n              />\n            </InventoryTab>\n            {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && (\n              <InventoryTab key=\"subscriptionsTab\" title={t('curiosity-inventory.tab', { context: 'subscriptions' })}>\n                <InventorySubscriptions\n                  key={routeDetail.pathParameter}\n                  filterInventoryData={initialSubscriptionsInventoryFilters}\n                  productId={routeDetail.pathParameter}\n                  query={initialInventorySubscriptionsQuery}\n                  viewId={viewId}\n                />\n              </InventoryTab>\n            )}\n          </InventoryTabs>\n        </PageSection>\n      </PageLayout>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{productLabel: string, inventorySubscriptionsQuery: object, query: object,\n *     initialSubscriptionsInventoryFilters: Array, initialInventorySettings: object, initialToolbarFilters: Array,\n *     viewId: string, t: Function, graphTallyQuery: object, inventoryHostsQuery: object,\n *     initialGraphFilters: Array, routeDetail: object, initialGuestsFilters: Array,\n *     initialInventoryFilters: Array}}\n */\nRhelView.propTypes = {\n  query: PropTypes.object,\n  graphTallyQuery: PropTypes.shape({\n    [RHSM_API_QUERY_TYPES.GRANULARITY]: PropTypes.oneOf([...Object.values(GRANULARITY_TYPES)])\n  }),\n  inventoryHostsQuery: PropTypes.shape({\n    [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n    [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n    [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SORT_TYPES)]),\n    [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n  }),\n  inventorySubscriptionsQuery: PropTypes.shape({\n    [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n    [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n    [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES)]),\n    [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n  }),\n  initialGraphFilters: PropTypes.array,\n  initialGuestsFilters: PropTypes.array,\n  initialInventoryFilters: PropTypes.array,\n  initialInventorySettings: PropTypes.shape({\n    hasGuests: PropTypes.func\n  }),\n  initialSubscriptionsInventoryFilters: PropTypes.array,\n  initialToolbarFilters: PropTypes.array,\n  productLabel: PropTypes.string,\n  routeDetail: PropTypes.shape({\n    pathParameter: PropTypes.string.isRequired,\n    pathId: PropTypes.string.isRequired,\n    routeItem: PropTypes.shape({\n      title: PropTypes.string\n    })\n  }).isRequired,\n  t: PropTypes.func,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{productLabel: string, inventorySubscriptionsQuery: object, query: object,\n *     initialSubscriptionsInventoryFilters: Array, initialInventorySettings: object, initialToolbarFilters: Array,\n *     viewId: string, t: translate, graphTallyQuery: object, inventoryHostsQuery: object,\n *     initialGraphFilters: Array, initialGuestsFilters: Array, initialInventoryFilters: Array}}\n */\nRhelView.defaultProps = {\n  query: {},\n  graphTallyQuery: {\n    [RHSM_API_QUERY_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY\n  },\n  inventoryHostsQuery: {\n    [RHSM_API_QUERY_TYPES.SORT]: RHSM_API_QUERY_SORT_TYPES.LAST_SEEN,\n    [RHSM_API_QUERY_TYPES.DIRECTION]: SORT_DIRECTION_TYPES.ASCENDING,\n    [RHSM_API_QUERY_TYPES.LIMIT]: 100,\n    [RHSM_API_QUERY_TYPES.OFFSET]: 0\n  },\n  inventorySubscriptionsQuery: {\n    [RHSM_API_QUERY_TYPES.SORT]: RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES.UPCOMING_EVENT_DATE,\n    [RHSM_API_QUERY_TYPES.DIRECTION]: SORT_DIRECTION_TYPES.ASCENDING,\n    [RHSM_API_QUERY_TYPES.LIMIT]: 100,\n    [RHSM_API_QUERY_TYPES.OFFSET]: 0\n  },\n  initialGraphFilters: [\n    {\n      id: 'physicalSockets',\n      fill: chartColorBlueLight.value,\n      stroke: chartColorBlueDark.value,\n      color: chartColorBlueDark.value\n    },\n    {\n      id: 'hypervisorSockets',\n      fill: chartColorCyanLight.value,\n      stroke: chartColorCyanDark.value,\n      color: chartColorCyanDark.value\n    },\n    {\n      id: 'cloudSockets',\n      fill: chartColorPurpleLight.value,\n      stroke: chartColorPurpleDark.value,\n      color: chartColorPurpleDark.value\n    },\n    { id: 'thresholdSockets' }\n  ],\n  initialGuestsFilters: [\n    {\n      id: 'displayName',\n      header: translate('curiosity-inventory.header', { context: 'guestsDisplayName' }),\n      cell: (data, session) => {\n        const { displayName, inventoryId } = data;\n        const { inventory: authorized } = session?.authorized || {};\n\n        if (!inventoryId?.value) {\n          return displayName?.value;\n        }\n\n        if (!authorized) {\n          return displayName?.value || inventoryId?.value;\n        }\n\n        return (\n          <Button\n            isInline\n            component=\"a\"\n            variant=\"link\"\n            target=\"_blank\"\n            href={`${helpers.UI_DEPLOY_PATH_PREFIX}/insights/inventory/${inventoryId.value}/`}\n          >\n            {displayName.value || inventoryId.value}\n          </Button>\n        );\n      }\n    },\n    {\n      id: 'inventoryId',\n      cellWidth: 40\n    },\n    {\n      id: 'lastSeen',\n      cell: data => (data?.lastSeen?.value && <DateFormat date={data?.lastSeen?.value} />) || '',\n      cellWidth: 15\n    }\n  ],\n  initialInventoryFilters: [\n    {\n      id: 'displayName',\n      cell: (data, session) => {\n        const { displayName = {}, inventoryId = {}, numberOfGuests = {} } = data;\n        const { inventory: authorized } = session?.authorized || {};\n\n        if (!inventoryId.value) {\n          return displayName.value;\n        }\n\n        let updatedDisplayName = displayName.value || inventoryId.value;\n\n        if (authorized) {\n          updatedDisplayName = (\n            <Button\n              isInline\n              component=\"a\"\n              variant=\"link\"\n              target=\"_blank\"\n              href={`${helpers.UI_DEPLOY_PATH_PREFIX}/insights/inventory/${inventoryId.value}/`}\n            >\n              {displayName.value || inventoryId.value}\n            </Button>\n          );\n        }\n\n        return (\n          <React.Fragment>\n            {updatedDisplayName}{' '}\n            {(numberOfGuests.value &&\n              translate('curiosity-inventory.label', { context: 'numberOfGuests', count: numberOfGuests.value }, [\n                <PfLabel color=\"blue\" />\n              ])) ||\n              ''}\n          </React.Fragment>\n        );\n      },\n      isSortable: true\n    },\n    {\n      id: 'measurementType',\n      cell: data => {\n        const { cloudProvider = {}, measurementType = {} } = data;\n        return (\n          <React.Fragment>\n            {translate('curiosity-inventory.measurementType', { context: measurementType.value })}{' '}\n            {(cloudProvider.value && (\n              <PfLabel color=\"purple\">\n                {translate('curiosity-inventory.cloudProvider', { context: cloudProvider.value })}\n              </PfLabel>\n            )) ||\n              ''}\n          </React.Fragment>\n        );\n      },\n      isSortable: true,\n      cellWidth: 20\n    },\n    {\n      id: 'sockets',\n      isSortable: true,\n      isWrappable: true,\n      cellWidth: 15\n    },\n    {\n      id: 'lastSeen',\n      cell: data => (data?.lastSeen?.value && <DateFormat date={data?.lastSeen?.value} />) || '',\n      isSortable: true,\n      isWrappable: true,\n      cellWidth: 15\n    }\n  ],\n  initialInventorySettings: {},\n  initialSubscriptionsInventoryFilters: [\n    {\n      id: 'productName',\n      isSortable: true\n    },\n    {\n      id: 'serviceLevel',\n      isSortable: true,\n      isWrappable: true,\n      cellWidth: 15\n    },\n    {\n      id: 'upcomingEventDate',\n      cell: data =>\n        (data?.upcomingEventDate?.value && moment.utc(data?.upcomingEventDate?.value).format('YYYY-DD-MM')) || '',\n      isSortable: true,\n      isWrappable: true,\n      cellWidth: 15\n    }\n  ],\n  initialToolbarFilters: [\n    {\n      id: RHSM_API_QUERY_TYPES.SLA\n    },\n    {\n      id: RHSM_API_QUERY_TYPES.USAGE,\n      selected: true\n    }\n  ],\n  productLabel: 'RHEL',\n  t: translate,\n  viewId: 'viewRHEL'\n};\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.view.makeView(RhelView.defaultProps);\n\nconst ConnectedRhelView = connect(makeMapStateToProps)(RhelView);\n\nexport { ConnectedRhelView as default, ConnectedRhelView, RhelView };\n"],"sourceRoot":""}