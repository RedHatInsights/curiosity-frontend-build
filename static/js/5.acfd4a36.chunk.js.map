{"version":3,"sources":["components/toolbar/toolbarFieldRangedMonthly.js","components/productView/productViewOpenShiftDedicated.js","components/productView/productView.js"],"names":["toolbarFieldOptions","dateHelpers","getRangedMonthDateTime","listDateTimeRanges","map","dateTime","selected","ToolbarFieldRangedMonthly","options","t","value","viewId","updatedValue","useSelector","view","graphTallyQuery","RHSM_API_QUERY_TYPES","START_DATE","updatedOptions","option","title","startDate","toISOString","aria-label","context","onSelect","event","endDate","store","dispatch","type","reduxTypes","query","SET_QUERY_RHSM_TYPES","GRANULARITY","FIELD_TYPES","DAILY","END_DATE","placeholder","maxHeight","defaultProps","translate","ProductViewOpenShiftDedicated","productConfig","routeDetail","viewParameter","toolbarProduct","toolbarGraph","GRANULARITY_TYPES","inventoryHostsQuery","SORT","RHSM_API_QUERY_SORT_TYPES","LAST_SEEN","DIRECTION","SORT_DIRECTION_TYPES","ASCENDING","LIMIT","OFFSET","initialGraphFilters","id","fill","chartColorBlueLight","stroke","chartColorBlueDark","color","initialInventoryFilters","cell","data","displayName","inventoryId","numberOfGuests","updatedDisplayName","Fragment","count","isSortable","coreHours","Number","parseFloat","toFixed","isWrappable","cellWidth","header","lastSeen","DateFormat","date","initialToolbarFilters","undefined","ProductView","inventorySubscriptionsQuery","initialGuestsFilters","initialInventorySettings","initialSubscriptionsInventoryFilters","apiQueries","parseRhsmQuery","initialQuery","initialGraphTallyQuery","initialInventoryHostsQuery","initialInventorySubscriptionsQuery","initialToolbarQuery","toolbarQuery","productId","pathParameter","productLabel","productParameter","includeTour","appName","helpers","UI_DISPLAY_NAME","React","isValidElement","filterOptions","filterGraphData","cardTitle","filterGuestsData","filterInventoryData","settings","UI_DISABLED_TABLE_SUBSCRIPTIONS","makeMapStateToProps","reduxSelectors","makeView","ConnectedProductView","connect"],"mappings":"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","file":"static/js/5.acfd4a36.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, store, useSelector } from '../../redux';\nimport { Select } from '../form/select';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = dateHelpers.getRangedMonthDateTime().listDateTimeRanges.map(dateTime => ({\n  ...dateTime,\n  selected: false\n}));\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Array} props.options\n * @param {Function} props.t\n * @param {string} props.value\n * @param {string} props.viewId\n * @returns {Node}\n */\nconst ToolbarFieldRangedMonthly = ({ options, t, value, viewId }) => {\n  const updatedValue = useSelector(\n    ({ view }) => view.graphTallyQuery?.[viewId]?.[RHSM_API_QUERY_TYPES.START_DATE],\n    value\n  );\n\n  const updatedOptions = options.map(option => ({\n    ...option,\n    selected: option.title === updatedValue || option.value.startDate.toISOString() === updatedValue\n  }));\n\n  /**\n   * On select, dispatch type.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @returns {void}\n   */\n  const onSelect = event => {\n    const { startDate, endDate } = event.value;\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: FIELD_TYPES.DAILY\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      }\n    ]);\n  };\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      placeholder={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      maxHeight={250}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{viewId: string, t: Function, options: Array, value: string}}\n */\nToolbarFieldRangedMonthly.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  t: PropTypes.func,\n  value: PropTypes.string,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{viewId: string, t: translate, options: Array, value: string}}\n */\nToolbarFieldRangedMonthly.defaultProps = {\n  options: toolbarFieldOptions,\n  t: translate,\n  value: translate('curiosity-toolbar.granularityRange', { context: 'current' }),\n  viewId: 'toolbarFieldRangeGranularity'\n};\n\nexport { ToolbarFieldRangedMonthly as default, ToolbarFieldRangedMonthly, toolbarFieldOptions };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  chart_color_blue_100 as chartColorBlueLight,\n  chart_color_blue_300 as chartColorBlueDark\n} from '@patternfly/react-tokens';\nimport { Label as PfLabel } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/DateFormat';\nimport {\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_TYPES,\n  RHSM_API_QUERY_SORT_TYPES\n} from '../../types/rhsmApiTypes';\nimport { ConnectedProductView, ProductView } from './productView';\nimport { translate } from '../i18n/i18n';\nimport { dateHelpers } from '../../common';\nimport { ToolbarFieldRangedMonthly } from '../toolbar/toolbarFieldRangedMonthly';\n\n/**\n * A Red Hat Enterprise Linux configured view, and related system architectures.\n *\n * @param {object} props\n * @param {object} props.productConfig\n * @param {object} props.routeDetail\n * @returns {Node}\n */\nconst ProductViewOpenShiftDedicated = ({ productConfig, routeDetail }) => {\n  const { viewParameter: viewId } = routeDetail;\n  const { [RHSM_API_QUERY_TYPES.START_DATE]: startDate } = productConfig.graphTallyQuery;\n\n  return (\n    <ConnectedProductView\n      routeDetail={routeDetail}\n      productConfig={productConfig}\n      toolbarProduct={false}\n      toolbarGraph={<ToolbarFieldRangedMonthly value={startDate} viewId={viewId} />}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{routeDetail: object, productConfig:object}}\n */\nProductViewOpenShiftDedicated.propTypes = {\n  productConfig: ProductView.propTypes.productConfig,\n  routeDetail: PropTypes.shape({\n    pathParameter: PropTypes.string,\n    productParameter: PropTypes.string,\n    viewParameter: PropTypes.string\n  }).isRequired\n};\n\n/**\n * Default props.\n *\n * @type {{ productConfig: object }}\n */\nProductViewOpenShiftDedicated.defaultProps = {\n  productConfig: {\n    query: {},\n    graphTallyQuery: {\n      [RHSM_API_QUERY_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY,\n      [RHSM_API_QUERY_TYPES.START_DATE]: dateHelpers.getRangedMonthDateTime('current').value.startDate.toISOString(),\n      [RHSM_API_QUERY_TYPES.END_DATE]: dateHelpers.getRangedMonthDateTime('current').value.endDate.toISOString()\n    },\n    inventoryHostsQuery: {\n      [RHSM_API_QUERY_TYPES.SORT]: RHSM_API_QUERY_SORT_TYPES.LAST_SEEN,\n      [RHSM_API_QUERY_TYPES.DIRECTION]: SORT_DIRECTION_TYPES.ASCENDING,\n      [RHSM_API_QUERY_TYPES.LIMIT]: 100,\n      [RHSM_API_QUERY_TYPES.OFFSET]: 0\n    },\n    initialGraphFilters: [\n      {\n        id: 'coreHours',\n        fill: chartColorBlueLight.value,\n        stroke: chartColorBlueDark.value,\n        color: chartColorBlueDark.value\n      }\n    ],\n    initialInventoryFilters: [\n      {\n        id: 'displayName',\n        cell: data => {\n          const { displayName = {}, inventoryId = {}, numberOfGuests = {} } = data;\n\n          if (!inventoryId.value) {\n            return displayName.value;\n          }\n\n          const updatedDisplayName = displayName.value || inventoryId.value;\n\n          return (\n            <React.Fragment>\n              {updatedDisplayName}{' '}\n              {(numberOfGuests.value &&\n                translate('curiosity-inventory.label', { context: 'numberOfGuests', count: numberOfGuests.value }, [\n                  <PfLabel color=\"blue\" />\n                ])) ||\n                ''}\n            </React.Fragment>\n          );\n        },\n        isSortable: true\n      },\n      {\n        id: 'coreHours',\n        cell: data =>\n          (typeof data?.coreHours?.value === 'number' && Number.parseFloat(data?.coreHours?.value).toFixed(2)) ||\n          `0.00`,\n        isSortable: true,\n        isWrappable: true,\n        cellWidth: 15\n      },\n      {\n        id: 'lastSeen',\n        header: translate('curiosity-inventory.header', { context: 'lastSeen_OpenShift-dedicated-metrics' }),\n        cell: data => (data?.lastSeen?.value && <DateFormat date={data?.lastSeen?.value} />) || '',\n        isSortable: true,\n        isWrappable: true,\n        cellWidth: 15\n      }\n    ],\n    initialToolbarFilters: undefined\n  }\n};\n\nexport { ProductViewOpenShiftDedicated as default, ProductViewOpenShiftDedicated };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { PageLayout, PageHeader, PageSection, PageToolbar, PageMessages } from '../pageLayout/pageLayout';\nimport { apiQueries, connect, reduxSelectors } from '../../redux';\nimport { ConnectedGraphCard, GraphCard } from '../graphCard/graphCard';\nimport { ConnectedToolbar, Toolbar } from '../toolbar/toolbar';\nimport { ConnectedInventoryList, InventoryList } from '../inventoryList/inventoryList';\nimport { helpers } from '../../common';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport { ToolbarFieldGranularity } from '../toolbar/toolbarFieldGranularity';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport {\n  ConnectedInventorySubscriptions,\n  InventorySubscriptions\n} from '../inventorySubscriptions/inventorySubscriptions';\nimport {\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_SORT_TYPES,\n  RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES,\n  RHSM_API_QUERY_TYPES\n} from '../../types/rhsmApiTypes';\nimport { GuestsList } from '../guestsList/guestsList';\nimport { translate } from '../i18n/i18n';\n\n/**\n * ToDo: base for default product layouts, add additional props for various toolbars\n * Next steps include...\n * Consider being able to pass customized toolbars for GraphCard and the\n * various Inventory displays. Have to evaluate how to handle the global toolbar, one\n * consideration is creating optional widgets with self-contained state update ability\n * based off of context/props/etc.\n *\n * Moving existing products to this layout, or maintaining them \"as is\", then renaming and\n * relocating them to this directory if they've been customized beyond a basic layout.\n */\n/**\n * Display a product.\n *\n * @param {object} props\n * @param {object} props.productConfig\n * @param {object} props.routeDetail\n * @param {Function} props.t\n * @param {Node|boolean} props.toolbarGraph\n * @param {Node|boolean} props.toolbarProduct\n * @returns {Node}\n */\nconst ProductView = ({ productConfig, routeDetail, t, toolbarGraph, toolbarProduct }) => {\n  const {\n    graphTallyQuery,\n    inventoryHostsQuery,\n    inventorySubscriptionsQuery,\n    query,\n    initialToolbarFilters,\n    initialGraphFilters,\n    initialGuestsFilters,\n    initialInventoryFilters,\n    initialInventorySettings,\n    initialSubscriptionsInventoryFilters\n  } = productConfig;\n\n  const {\n    query: initialQuery,\n    graphTallyQuery: initialGraphTallyQuery,\n    inventoryHostsQuery: initialInventoryHostsQuery,\n    inventorySubscriptionsQuery: initialInventorySubscriptionsQuery,\n    toolbarQuery: initialToolbarQuery\n  } = apiQueries.parseRhsmQuery(query, { graphTallyQuery, inventoryHostsQuery, inventorySubscriptionsQuery });\n\n  const { pathParameter: productId, productParameter: productLabel, viewParameter: viewId } = routeDetail;\n\n  if (!productId || !viewId) {\n    return null;\n  }\n\n  return (\n    <PageLayout>\n      <PageHeader productLabel={productLabel} includeTour>\n        {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: productLabel })}\n      </PageHeader>\n      <PageMessages>\n        <BannerMessages productId={productId} viewId={viewId} query={initialQuery} />\n      </PageMessages>\n      <PageToolbar>\n        {(React.isValidElement(toolbarProduct) && toolbarProduct) ||\n          (toolbarProduct !== false && (\n            <ConnectedToolbar\n              filterOptions={initialToolbarFilters}\n              productId={productId}\n              query={initialToolbarQuery}\n              viewId={viewId}\n            />\n          ))}\n      </PageToolbar>\n      <PageSection>\n        <ConnectedGraphCard\n          key={`graph_${productId}`}\n          filterGraphData={initialGraphFilters}\n          query={initialGraphTallyQuery}\n          productId={productId}\n          viewId={viewId}\n          cardTitle={t('curiosity-graph.cardHeading', { context: productLabel })}\n          productLabel={productLabel}\n        >\n          {(React.isValidElement(toolbarGraph) && toolbarGraph) ||\n            (toolbarGraph !== false && (\n              <ToolbarFieldGranularity\n                viewId={viewId}\n                value={initialGraphTallyQuery[RHSM_API_QUERY_TYPES.GRANULARITY]}\n              />\n            ))}\n        </ConnectedGraphCard>\n      </PageSection>\n      <PageSection>\n        <InventoryTabs key={`inventory_${productId}`} productId={productId}>\n          <InventoryTab key={`inventory_hosts_${productId}`} title={t('curiosity-inventory.tab', { context: 'hosts' })}>\n            <ConnectedInventoryList\n              key={productId}\n              filterGuestsData={initialGuestsFilters}\n              filterInventoryData={initialInventoryFilters}\n              productId={productId}\n              settings={initialInventorySettings}\n              query={initialInventoryHostsQuery}\n              viewId={viewId}\n            />\n          </InventoryTab>\n          {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && (\n            <InventoryTab\n              key={`inventory_subs_${productId}`}\n              title={t('curiosity-inventory.tab', { context: 'subscriptions' })}\n            >\n              <ConnectedInventorySubscriptions\n                key={productId}\n                filterInventoryData={initialSubscriptionsInventoryFilters}\n                productId={productId}\n                query={initialInventorySubscriptionsQuery}\n                viewId={viewId}\n              />\n            </InventoryTab>\n          )}\n        </InventoryTabs>\n      </PageSection>\n    </PageLayout>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), routeDetail: object, productConfig: object,\n *     toolbarProduct: (Node|boolean)}}\n */\nProductView.propTypes = {\n  productConfig: PropTypes.shape({\n    graphTallyQuery: PropTypes.shape({\n      [RHSM_API_QUERY_TYPES.GRANULARITY]: PropTypes.oneOf([...Object.values(GRANULARITY_TYPES)]),\n      [RHSM_API_QUERY_TYPES.START_DATE]: PropTypes.string,\n      [RHSM_API_QUERY_TYPES.END_DATE]: PropTypes.string\n    }),\n    inventoryHostsQuery: PropTypes.shape({\n      [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SORT_TYPES)]),\n      [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n    }),\n    inventorySubscriptionsQuery: PropTypes.shape({\n      [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES)]),\n      [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n    }),\n    query: PropTypes.object,\n    initialToolbarFilters: Toolbar.propTypes.filterOptions,\n    initialGraphFilters: GraphCard.propTypes.filterGraphData,\n    initialGuestsFilters: GuestsList.propTypes.filterGuestsData,\n    initialInventoryFilters: InventoryList.propTypes.filterInventoryData,\n    initialInventorySettings: InventoryList.propTypes.settings,\n    initialSubscriptionsInventoryFilters: InventorySubscriptions.propTypes.filterInventoryData\n  }).isRequired,\n  routeDetail: PropTypes.shape({\n    pathParameter: PropTypes.string,\n    productParameter: PropTypes.string,\n    viewParameter: PropTypes.string\n  }).isRequired,\n  t: PropTypes.func,\n  toolbarGraph: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n  toolbarProduct: PropTypes.oneOfType([PropTypes.node, PropTypes.bool])\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), toolbarProduct: (Node|boolean)}}\n */\nProductView.defaultProps = {\n  t: translate,\n  toolbarGraph: null,\n  toolbarProduct: null\n};\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.view.makeView(ProductView.defaultProps);\n\nconst ConnectedProductView = connect(makeMapStateToProps)(ProductView);\n\nexport { ConnectedProductView as default, ConnectedProductView, ProductView };\n"],"sourceRoot":""}