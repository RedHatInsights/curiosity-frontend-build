{"version":3,"sources":["components/inventoryTabs/inventoryTab.js","components/tabs/tabs.js","components/inventoryTabs/inventoryTabs.js"],"names":["InventoryTab","active","children","title","Fragment","defaultProps","Tabs","state","updatedActiveTab","updatedTabs","onTab","index","props","setState","this","setTabData","prevProps","tabs","_isEqualWith","valueA","valueB","toString","activeTab","defaultActiveTab","map","content","eventKey","className","hasOverflowScroll","activeKey","onSelect","event","mountOnEnter","unmountOnExit","inset","default","md","span","renderTabs","React","Component","helpers","noop","InventoryTabs","productId","store","dispatch","type","reduxTypes","inventory","SET_INVENTORY_TAB","isDisabled","t","updatedChildren","Children","toArray","child","count","headingLevel","length","UI_DISABLED_TABLE","translate","ConnectedInventoryTabs","connect"],"mappings":"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","file":"static/js/28.1956caf4.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * A tab pass-through component for passing props to InventoryTabs.\n *\n * @param {object} props\n * @param {boolean} props.active\n * @param {Node} props.children\n * @param {string} props.title\n * @returns {Node}\n */\n// eslint-disable-next-line no-unused-vars\nconst InventoryTab = ({ active, children, title }) => <React.Fragment>{children}</React.Fragment>;\n\n/**\n * Prop types.\n *\n * @type {{children: Node, className: string}}\n */\nInventoryTab.propTypes = {\n  children: PropTypes.node.isRequired,\n  active: PropTypes.bool,\n  title: PropTypes.node.isRequired\n};\n\n/**\n * Default props.\n *\n * @type {{className: string}}\n */\nInventoryTab.defaultProps = {\n  active: false\n};\n\nexport { InventoryTab as default, InventoryTab };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tabs as PfTabs, Tab, TabTitleText, Grid, GridItem } from '@patternfly/react-core';\nimport _isEqualWith from 'lodash/isEqualWith';\nimport { helpers } from '../../common';\n\n/**\n * FixMe: PF tabs misinterprets \"isElementInView\" when tab title nodes are loaded dynamically\n * It appears the use of isElementInView within PF tabs is trying to be predicative in using\n * \"getBoundingClientRect\" but produces questionable results in scenarios where content is\n * async created. isElementInView assumes some form of the content will always be there\n * instead of scenarios where someone tries to dynamically apply components. It may be good to\n * review using a window.setTimeout(() => handleScrollButtons()) in componentDidMount.\n *\n * Our temporary solution is to simply hide the buttons with a manual set flag affecting the\n * CSS class. This will most likely cause long-term issues.\n */\n/**\n * ToDo: Insights frontend components uses a custom tabs layout, investigate related CSS classes\n * Originally we applied the CSS classes, but they appeared to provide nothing. Since Insights\n * rolled its own tabs we're hesitant to apply said classes without understanding what they provide.\n */\n/**\n * A set of tabs.\n *\n * @augments React.Component\n * @fires onTab\n */\nclass Tabs extends React.Component {\n  state = {\n    updatedActiveTab: null,\n    updatedTabs: null\n  };\n\n  componentDidMount() {\n    const { updatedTabs } = this.state;\n\n    if (updatedTabs === null) {\n      this.setTabData();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { tabs } = this.props;\n    const customizer = (valueA, valueB) => {\n      if (typeof valueA === 'function' && typeof valueB === 'function') {\n        return valueA.toString() === valueB.toString();\n      }\n\n      return undefined;\n    };\n\n    if (!_isEqualWith(prevProps.tabs, tabs, customizer)) {\n      this.setTabData();\n    }\n  }\n\n  /**\n   * On tab selected\n   *\n   * @event onTab\n   * @param {object} params\n   * @param {number} params.index\n   */\n  onTab = ({ index }) => {\n    const { onTab } = this.props;\n\n    this.setState(\n      {\n        updatedActiveTab: index\n      },\n      () => onTab({ index })\n    );\n  };\n\n  /**\n   * Convert tab objects into the required PF Tab format.\n   */\n  setTabData() {\n    const { activeTab, defaultActiveTab, tabs } = this.props;\n    let updatedActiveTab = defaultActiveTab;\n\n    const updatedTabs = tabs.map(({ active, content, title }, index) => {\n      updatedActiveTab = active ? index : updatedActiveTab;\n\n      return (\n        <Tab key={title} eventKey={index} title={<TabTitleText>{title}</TabTitleText>}>\n          {content}\n        </Tab>\n      );\n    });\n\n    if (typeof activeTab === 'number') {\n      updatedActiveTab = activeTab;\n    }\n\n    this.setState({\n      updatedActiveTab,\n      updatedTabs\n    });\n  }\n\n  /**\n   * Apply props to tabs.\n   *\n   * @returns {Node}\n   */\n  renderTabs() {\n    const { updatedActiveTab, updatedTabs } = this.state;\n    const { className, hasOverflowScroll } = this.props;\n\n    return (\n      <PfTabs\n        className={`curiosity-tabs${(!hasOverflowScroll && '__no-scroll') || ''} ${className || ''}`}\n        activeKey={updatedActiveTab}\n        onSelect={(event, index) => this.onTab({ event, index })}\n        mountOnEnter\n        unmountOnExit\n        inset={{\n          default: 'insetNone',\n          md: 'insetLg'\n        }}\n      >\n        {updatedTabs}\n      </PfTabs>\n    );\n  }\n\n  /**\n   * Render tabs.\n   *\n   * @returns {Node}\n   */\n  render() {\n    return (\n      <Grid className=\"curiosity-tabs-container\">\n        <GridItem span={12}>{this.renderTabs()}</GridItem>\n      </Grid>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{tabs: Array, hasOverflowScroll: boolean, onTab: Function, className: string,\n *     defaultActiveTab: number, activeTab: number}}\n */\nTabs.propTypes = {\n  activeTab: PropTypes.number,\n  className: PropTypes.string,\n  defaultActiveTab: PropTypes.number,\n  hasOverflowScroll: PropTypes.bool,\n  onTab: PropTypes.func,\n  tabs: PropTypes.arrayOf(\n    PropTypes.shape({\n      active: PropTypes.bool,\n      content: PropTypes.node.isRequired,\n      title: PropTypes.node.isRequired\n    })\n  )\n};\n\n/**\n * Default props.\n *\n * @type {{tabs: Array, hasOverflowScroll: boolean, onTab: Function, className: string,\n *     defaultActiveTab: number, activeTab: number}}\n */\nTabs.defaultProps = {\n  activeTab: null,\n  className: '',\n  defaultActiveTab: 0,\n  hasOverflowScroll: false,\n  onTab: helpers.noop,\n  tabs: []\n};\n\nexport { Tabs as default, Tabs };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Title } from '@patternfly/react-core';\nimport { connect, reduxTypes, store } from '../../redux';\nimport { Tabs } from '../tabs/tabs';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { InventoryTab } from './inventoryTab';\n\n/**\n * A system inventory tabs component.\n *\n * @augments React.Component\n * @fires onTab\n */\nclass InventoryTabs extends React.Component {\n  /**\n   * On tab update state.\n   *\n   * @event onTab\n   * @param {object} params\n   * @param {string} params.index tab index\n   */\n  onTab = ({ index }) => {\n    const { productId } = this.props;\n\n    store.dispatch({\n      type: reduxTypes.inventory.SET_INVENTORY_TAB,\n      tabs: {\n        [productId]: index\n      }\n    });\n  };\n\n  /**\n   * Render inventory tabs using Inventory tab passed props only. A parallel outcome can be\n   * achieved by passing an array of objects through a prop.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { activeTab, children, defaultActiveTab, isDisabled, t } = this.props;\n\n    if (isDisabled) {\n      return null;\n    }\n\n    const updatedChildren = React.Children.toArray(children).map((child, index) => {\n      const { props = {} } = child;\n\n      return {\n        active: props.active || false,\n        content: props.children || child,\n        title: props.title || t('curiosity-inventory.tabSubHeading', { count: index })\n      };\n    });\n\n    return (\n      <React.Fragment>\n        <Title headingLevel=\"h2\" className=\"sr-only\">\n          {t('curiosity-inventory.tabHeading', { count: updatedChildren.length })}\n        </Title>\n        <Tabs activeTab={activeTab} defaultActiveTab={defaultActiveTab} onTab={this.onTab} tabs={updatedChildren} />\n      </React.Fragment>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{productId: string, t: Function, children: Node, defaultActiveTab: number, isDisabled: boolean,\n *     activeTab: number}}\n */\nInventoryTabs.propTypes = {\n  activeTab: PropTypes.number,\n  children: PropTypes.node.isRequired,\n  defaultActiveTab: PropTypes.number,\n  isDisabled: PropTypes.bool,\n  productId: PropTypes.string.isRequired,\n  t: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, defaultActiveTab: number, isDisabled: boolean, activeTab: number}}\n */\nInventoryTabs.defaultProps = {\n  activeTab: 0,\n  defaultActiveTab: 0,\n  isDisabled: helpers.UI_DISABLED_TABLE,\n  t: translate\n};\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst mapStateToProps = ({ inventory }, { productId }) => ({ activeTab: inventory.tabs?.[productId] });\n\nconst ConnectedInventoryTabs = connect(mapStateToProps)(InventoryTabs);\n\nexport { ConnectedInventoryTabs as default, ConnectedInventoryTabs, InventoryTabs, InventoryTab };\n"],"sourceRoot":""}