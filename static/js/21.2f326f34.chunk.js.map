{"version":3,"sources":["components/form/formHelpers.js","components/form/checkbox.js","../../../../../src/components/Checkbox/index.ts","../../../../../src/components/Checkbox/Checkbox.tsx"],"names":["createMockEvent","event","persistEvent","checked","currentTarget","keyCode","persist","helpers","noop","target","id","name","value","doesNotHaveMinimumCharacters","characters","length","formHelpers","Checkbox","ariaLabel","children","isChecked","isDisabled","isReadOnly","label","onChange","props","React","useState","check","setCheck","updatedChecked","updatedName","generateId","updatedId","aria-label","mockEvent","readOnly","defaultProps","undefined"],"mappings":"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","file":"static/js/21.2f326f34.chunk.js","sourcesContent":["import { helpers } from '../../common/helpers';\n\n/**\n * Create a consistent mock event object.\n *\n * @param {object} event\n * @param {boolean} persistEvent\n * @returns {{keyCode, currentTarget, name, id: *, persist: Function, value, target}}\n */\nconst createMockEvent = (event, persistEvent = false) => {\n  const { checked, currentTarget = {}, keyCode, persist = helpers.noop, target = {} } = { ...event };\n  if (persistEvent) {\n    persist();\n  }\n\n  return {\n    checked,\n    currentTarget,\n    keyCode,\n    id: currentTarget.id || currentTarget.name,\n    name: currentTarget.name,\n    persist,\n    value: currentTarget.value,\n    target\n  };\n};\n\n/**\n * Confirm a string has minimum length.\n *\n * @param {string} value\n * @param {number} characters\n * @returns {boolean}\n */\nconst doesNotHaveMinimumCharacters = (value, characters = 1) =>\n  (typeof value === 'string' && value.length < characters) || typeof value !== 'string';\n\nconst formHelpers = {\n  createMockEvent,\n  doesNotHaveMinimumCharacters\n};\n\nexport { formHelpers as default, formHelpers, createMockEvent, doesNotHaveMinimumCharacters };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox as PfCheckbox } from '@patternfly/react-core/dist/js/components/Checkbox';\nimport { createMockEvent } from './formHelpers';\nimport { helpers } from '../../common';\n\n/**\n * Render a checkbox form element. Provides restructured event data.\n *\n * @fires onCheckboxChange\n * @param {object} props\n * @param {string} props.ariaLabel\n * @param {Node} props.children\n * @param {string} props.id\n * @param {*} props.isChecked\n * @param {boolean} props.isDisabled\n * @param {boolean} props.isReadOnly\n * @param {Node} props.label\n * @param {string} props.name\n * @param {Function} props.onChange\n * @param {*} props.value\n * @returns {Node}\n */\nconst Checkbox = ({\n  ariaLabel,\n  children,\n  id,\n  isChecked,\n  isDisabled,\n  isReadOnly,\n  label,\n  name,\n  onChange,\n  value,\n  ...props\n}) => {\n  const [check, setCheck] = React.useState();\n  const updatedChecked = check ?? isChecked ?? false;\n  const updatedName = name || helpers.generateId();\n  const updatedId = id || updatedName;\n\n  /**\n   * onChange event, provide restructured event.\n   *\n   * @event onCheckboxChange\n   * @param {boolean} checked\n   * @param {object} event\n   */\n  const onCheckboxChange = (checked, event) => {\n    const mockEvent = {\n      ...createMockEvent(event),\n      id: updatedId,\n      name: updatedName,\n      value,\n      checked\n    };\n\n    setCheck(checked);\n    onChange(mockEvent);\n  };\n\n  return (\n    <PfCheckbox\n      aria-label={ariaLabel || children || label}\n      checked={updatedChecked}\n      id={updatedId}\n      isChecked={updatedChecked}\n      isDisabled={isDisabled || false}\n      label={children || label}\n      name={updatedName}\n      onChange={onCheckboxChange}\n      value={value}\n      readOnly={isReadOnly || false}\n      {...props}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{isReadOnly: boolean, onChange: Function, children: Node, name: string, id: string,\n *     isDisabled: boolean, label: string, isChecked: boolean, value: *, ariaLabel: string}}\n */\nCheckbox.propTypes = {\n  ariaLabel: PropTypes.string,\n  children: PropTypes.node,\n  id: PropTypes.string,\n  isChecked: PropTypes.any,\n  isDisabled: PropTypes.bool,\n  isReadOnly: PropTypes.bool,\n  label: PropTypes.node,\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  value: PropTypes.any\n};\n\n/**\n * Default props.\n *\n * @type {{isReadOnly: boolean, onChange: Function, children: Node, name: string, id: string,\n *     isDisabled: boolean, label: string, isChecked: boolean, value: *, ariaLabel: string}}\n */\nCheckbox.defaultProps = {\n  ariaLabel: null,\n  children: null,\n  id: null,\n  isChecked: false,\n  isDisabled: false,\n  isReadOnly: false,\n  label: '',\n  name: null,\n  onChange: helpers.noop,\n  value: undefined\n};\n\nexport { Checkbox as default, Checkbox };\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./Checkbox\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Checkbox = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst check_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/Check/check\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\n// tslint:disable-next-line:no-empty\nconst defaultOnChange = () => { };\nclass Checkbox extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = (event) => {\n            this.props.onChange(event.currentTarget.checked, event);\n        };\n    }\n    render() {\n        const _a = this.props, { 'aria-label': ariaLabel, className, onChange, isValid, isDisabled, isChecked, label, checked, defaultChecked, description, body } = _a, props = tslib_1.__rest(_a, ['aria-label', \"className\", \"onChange\", \"isValid\", \"isDisabled\", \"isChecked\", \"label\", \"checked\", \"defaultChecked\", \"description\", \"body\"]);\n        if (!props.id) {\n            // eslint-disable-next-line no-console\n            console.error('Checkbox:', 'id is required to make input accessible');\n        }\n        const checkedProps = {};\n        if ([true, false].includes(checked) || isChecked === true) {\n            checkedProps.checked = checked || isChecked;\n        }\n        if (onChange !== defaultOnChange) {\n            checkedProps.checked = isChecked;\n        }\n        if ([false, true].includes(defaultChecked)) {\n            checkedProps.defaultChecked = defaultChecked;\n        }\n        checkedProps.checked = checkedProps.checked === null ? false : checkedProps.checked;\n        return (React.createElement(\"div\", { className: react_styles_1.css(check_1.default.check, !label && check_1.default.modifiers.standalone, className) },\n            React.createElement(\"input\", Object.assign({}, props, { className: react_styles_1.css(check_1.default.checkInput), type: \"checkbox\", onChange: this.handleChange, \"aria-invalid\": !isValid, \"aria-label\": ariaLabel, disabled: isDisabled, ref: elem => elem && (elem.indeterminate = isChecked === null) }, checkedProps)),\n            label && (React.createElement(\"label\", { className: react_styles_1.css(check_1.default.checkLabel, isDisabled && check_1.default.modifiers.disabled), htmlFor: props.id }, label)),\n            description && React.createElement(\"span\", { className: react_styles_1.css(check_1.default.checkDescription) }, description),\n            body && React.createElement(\"span\", { className: react_styles_1.css(check_1.default.checkBody) }, body)));\n    }\n}\nexports.Checkbox = Checkbox;\nCheckbox.displayName = 'Checkbox';\nCheckbox.defaultProps = {\n    className: '',\n    isValid: true,\n    isDisabled: false,\n    isChecked: false,\n    onChange: defaultOnChange\n};\n//# sourceMappingURL=Checkbox.js.map"],"sourceRoot":""}