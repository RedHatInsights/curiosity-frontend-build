{"version":3,"sources":["components/productView/productViewSatellite.js","components/bannerMessages/bannerMessages.js","components/productView/productView.js"],"names":["ProductViewSatellite","productConfig","routeDetail","defaultProps","query","RHSM_API_QUERY_TYPES","START_DATE","dateHelpers","getRangedDateTime","GRANULARITY_TYPES","DAILY","startDate","toISOString","END_DATE","endDate","graphTallyQuery","GRANULARITY","inventoryHostsQuery","SORT","RHSM_API_QUERY_SORT_TYPES","LAST_SEEN","DIRECTION","SORT_DIRECTION_TYPES","DESCENDING","LIMIT","OFFSET","inventorySubscriptionsQuery","RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES","UPCOMING_EVENT_DATE","initialGraphFilters","id","fill","chartColorBlueLight","value","stroke","chartColorBlueDark","color","chartColorCyanLight","chartColorCyanDark","chartColorPurpleLight","chartColorPurpleDark","initialGuestsFilters","header","translate","context","cell","data","session","displayName","inventoryId","authorized","inventory","isInline","component","variant","href","helpers","UI_DEPLOY_PATH_PREFIX","cellWidth","lastSeen","date","initialInventoryFilters","numberOfGuests","updatedDisplayName","Fragment","count","isSortable","cloudProvider","measurementType","isWrappable","initialInventorySettings","initialSubscriptionsInventoryFilters","upcomingEventDate","moment","utc","format","initialToolbarFilters","SLA","USAGE","selected","BannerMessages","state","onUpdateData","props","getMessageReports","productId","apiQueries","parseRhsmQuery","this","prevProps","_isEqual","appMessages","messages","updatedMessages","length","Object","entries","forEach","key","message","find","push","map","title","AlertVariant","info","actionClose","AlertActionCloseButton","onClose","setState","Alert","alerts","renderAlerts","className","React","Component","noop","UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS","appName","UI_DISPLAY_NAME","Button","icon","iconPosition","target","makeMapStateToProps","reduxSelectors","makeAppMessages","ConnectedBannerMessages","connect","dispatch","reduxActions","rhsm","ProductView","t","toolbarGraph","toolbarGraphDescription","toolbarProduct","initialGraphSettings","initialQuery","initialGraphTallyQuery","initialInventoryHostsQuery","initialInventorySubscriptionsQuery","initialToolbarQuery","toolbarQuery","pathParameter","productLabel","productParameter","viewId","viewParameter","graphCardTooltip","Tooltip","content","position","TooltipPosition","top","enableFlip","distance","entryDelay","exitDelay","graphCardTitle","includeTour","isValidElement","filterOptions","filterGraphData","settings","cardTitle","filterGuestsData","filterInventoryData","UI_DISABLED_TABLE_SUBSCRIPTIONS"],"mappings":"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","file":"static/js/10.682c4ff6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  chart_color_blue_100 as chartColorBlueLight,\n  chart_color_blue_300 as chartColorBlueDark,\n  chart_color_cyan_100 as chartColorCyanLight,\n  chart_color_cyan_300 as chartColorCyanDark,\n  chart_color_purple_100 as chartColorPurpleLight,\n  chart_color_purple_300 as chartColorPurpleDark\n} from '@patternfly/react-tokens';\nimport { Button, Label as PfLabel } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport moment from 'moment';\nimport {\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_TYPES,\n  RHSM_API_QUERY_SORT_TYPES,\n  RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES\n} from '../../types/rhsmApiTypes';\nimport { ProductView } from './productView';\nimport { translate } from '../i18n/i18n';\nimport { dateHelpers, helpers } from '../../common';\n\n/**\n * A Red Hat Satellite configured view, and related system architectures.\n *\n * @param {object} props\n * @param {object} props.productConfig\n * @param {object} props.routeDetail\n * @returns {Node}\n */\nconst ProductViewSatellite = ({ productConfig, routeDetail }) => (\n  <ProductView routeDetail={routeDetail} productConfig={productConfig} />\n);\n\n/**\n * Prop types.\n *\n * @type {{routeDetail: object, productConfig:object}}\n */\nProductViewSatellite.propTypes = {\n  productConfig: ProductView.propTypes.productConfig,\n  routeDetail: PropTypes.shape({\n    pathParameter: PropTypes.string,\n    productParameter: PropTypes.string,\n    viewParameter: PropTypes.string\n  }).isRequired\n};\n\n/**\n * Default props.\n *\n * @type {{ productConfig: object }}\n */\nProductViewSatellite.defaultProps = {\n  productConfig: {\n    query: {\n      [RHSM_API_QUERY_TYPES.START_DATE]: dateHelpers.getRangedDateTime(GRANULARITY_TYPES.DAILY).startDate.toISOString(),\n      [RHSM_API_QUERY_TYPES.END_DATE]: dateHelpers.getRangedDateTime(GRANULARITY_TYPES.DAILY).endDate.toISOString()\n    },\n    graphTallyQuery: {\n      [RHSM_API_QUERY_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY\n    },\n    inventoryHostsQuery: {\n      [RHSM_API_QUERY_TYPES.SORT]: RHSM_API_QUERY_SORT_TYPES.LAST_SEEN,\n      [RHSM_API_QUERY_TYPES.DIRECTION]: SORT_DIRECTION_TYPES.DESCENDING,\n      [RHSM_API_QUERY_TYPES.LIMIT]: 100,\n      [RHSM_API_QUERY_TYPES.OFFSET]: 0\n    },\n    inventorySubscriptionsQuery: {\n      [RHSM_API_QUERY_TYPES.SORT]: RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES.UPCOMING_EVENT_DATE,\n      [RHSM_API_QUERY_TYPES.DIRECTION]: SORT_DIRECTION_TYPES.DESCENDING,\n      [RHSM_API_QUERY_TYPES.LIMIT]: 100,\n      [RHSM_API_QUERY_TYPES.OFFSET]: 0\n    },\n    initialGraphFilters: [\n      {\n        id: 'physicalSockets',\n        fill: chartColorBlueLight.value,\n        stroke: chartColorBlueDark.value,\n        color: chartColorBlueDark.value\n      },\n      {\n        id: 'hypervisorSockets',\n        fill: chartColorCyanLight.value,\n        stroke: chartColorCyanDark.value,\n        color: chartColorCyanDark.value\n      },\n      {\n        id: 'cloudSockets',\n        fill: chartColorPurpleLight.value,\n        stroke: chartColorPurpleDark.value,\n        color: chartColorPurpleDark.value\n      },\n      { id: 'thresholdSockets' }\n    ],\n    initialGuestsFilters: [\n      {\n        id: 'displayName',\n        header: translate('curiosity-inventory.header', { context: 'guestsDisplayName' }),\n        cell: (data, session) => {\n          const { displayName, inventoryId } = data;\n          const { inventory: authorized } = session?.authorized || {};\n\n          if (!inventoryId?.value) {\n            return displayName?.value;\n          }\n\n          if (!authorized) {\n            return displayName?.value || inventoryId?.value;\n          }\n\n          return (\n            <Button\n              isInline\n              component=\"a\"\n              variant=\"link\"\n              href={`${helpers.UI_DEPLOY_PATH_PREFIX}/insights/inventory/${inventoryId.value}/`}\n            >\n              {displayName.value || inventoryId.value}\n            </Button>\n          );\n        }\n      },\n      {\n        id: 'inventoryId',\n        cellWidth: 40\n      },\n      {\n        id: 'lastSeen',\n        cell: data => (data?.lastSeen?.value && <DateFormat date={data?.lastSeen?.value} />) || '',\n        cellWidth: 15\n      }\n    ],\n    initialInventoryFilters: [\n      {\n        id: 'displayName',\n        cell: (data, session) => {\n          const { displayName = {}, inventoryId = {}, numberOfGuests = {} } = data;\n          const { inventory: authorized } = session?.authorized || {};\n\n          if (!inventoryId.value) {\n            return displayName.value;\n          }\n\n          let updatedDisplayName = displayName.value || inventoryId.value;\n\n          if (authorized) {\n            updatedDisplayName = (\n              <Button\n                isInline\n                component=\"a\"\n                variant=\"link\"\n                href={`${helpers.UI_DEPLOY_PATH_PREFIX}/insights/inventory/${inventoryId.value}/`}\n              >\n                {displayName.value || inventoryId.value}\n              </Button>\n            );\n          }\n\n          return (\n            <React.Fragment>\n              {updatedDisplayName}{' '}\n              {(numberOfGuests.value &&\n                translate('curiosity-inventory.label', { context: 'numberOfGuests', count: numberOfGuests.value }, [\n                  <PfLabel color=\"blue\" />\n                ])) ||\n                ''}\n            </React.Fragment>\n          );\n        },\n        isSortable: true\n      },\n      {\n        id: 'measurementType',\n        cell: data => {\n          const { cloudProvider = {}, measurementType = {} } = data;\n          return (\n            <React.Fragment>\n              {translate('curiosity-inventory.measurementType', { context: measurementType.value })}{' '}\n              {(cloudProvider.value && (\n                <PfLabel color=\"purple\">\n                  {translate('curiosity-inventory.cloudProvider', { context: cloudProvider.value })}\n                </PfLabel>\n              )) ||\n                ''}\n            </React.Fragment>\n          );\n        },\n        isSortable: true,\n        cellWidth: 20\n      },\n      {\n        id: 'sockets',\n        isSortable: true,\n        isWrappable: true,\n        cellWidth: 15\n      },\n      {\n        id: 'lastSeen',\n        cell: data => (data?.lastSeen?.value && <DateFormat date={data?.lastSeen?.value} />) || '',\n        isSortable: true,\n        isWrappable: true,\n        cellWidth: 15\n      }\n    ],\n    initialInventorySettings: {},\n    initialSubscriptionsInventoryFilters: [\n      {\n        id: 'productName',\n        isSortable: true\n      },\n      {\n        id: 'serviceLevel',\n        isSortable: true,\n        isWrappable: true,\n        cellWidth: 15\n      },\n      {\n        id: 'upcomingEventDate',\n        cell: data =>\n          (data?.upcomingEventDate?.value && moment.utc(data?.upcomingEventDate?.value).format('YYYY-DD-MM')) || '',\n        isSortable: true,\n        isWrappable: true,\n        cellWidth: 15\n      }\n    ],\n    initialToolbarFilters: [\n      {\n        id: RHSM_API_QUERY_TYPES.SLA\n      },\n      {\n        id: RHSM_API_QUERY_TYPES.USAGE,\n        selected: true\n      }\n    ]\n  }\n};\n\nexport { ProductViewSatellite as default, ProductViewSatellite };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, AlertActionCloseButton, AlertVariant, Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport _isEqual from 'lodash/isEqual';\nimport { apiQueries, connect, reduxActions, reduxSelectors } from '../../redux';\nimport { translate } from '../i18n/i18n';\nimport { dateHelpers, helpers } from '../../common';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\n\n/**\n * Render banner messages.\n *\n * @augments React.Component\n */\nclass BannerMessages extends React.Component {\n  state = {};\n\n  componentDidMount() {\n    this.onUpdateData();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { query, productId } = this.props;\n\n    if (productId !== prevProps.productId || !_isEqual(query, prevProps.query)) {\n      this.onUpdateData();\n    }\n  }\n\n  /**\n   * Call the RHSM APIs, apply filters.\n   *\n   * @event onUpdateGraphData\n   */\n  onUpdateData = () => {\n    const { getMessageReports, productId, query } = this.props;\n    const { graphTallyQuery } = apiQueries.parseRhsmQuery(query);\n\n    if (productId) {\n      const { startDate, endDate } = dateHelpers.getRangedDateTime('CURRENT');\n      const updatedGraphQuery = {\n        ...graphTallyQuery,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString(),\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      };\n\n      getMessageReports(productId, updatedGraphQuery);\n    }\n  };\n\n  /**\n   * Apply messages' configuration to alerts.\n   *\n   * @returns {Node}\n   */\n  renderAlerts() {\n    const { state } = this;\n    const { appMessages, messages } = this.props;\n    const updatedMessages = [];\n\n    if (messages.length) {\n      Object.entries(appMessages).forEach(([key, value]) => {\n        if (state[key] !== true && value === true) {\n          const message = messages.find(({ id }) => id === key);\n\n          if (message) {\n            updatedMessages.push({\n              key,\n              ...message\n            });\n          }\n        }\n      });\n    }\n\n    return updatedMessages.map(({ key, message, title, variant = AlertVariant.info }) => {\n      const actionClose = <AlertActionCloseButton onClose={() => this.setState({ [key]: true })} />;\n\n      return (\n        <Alert actionClose={actionClose} key={key} title={title} variant={variant}>\n          {message}\n        </Alert>\n      );\n    });\n  }\n\n  /**\n   * Render a banner messages container.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const alerts = this.renderAlerts();\n\n    if (alerts.length) {\n      return <div className=\"curiosity-banner-messages\">{alerts}</div>;\n    }\n\n    return null;\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{appMessages: object, productId: string, getMessageReports: Function, query: object, messages: Array}}\n */\nBannerMessages.propTypes = {\n  appMessages: PropTypes.object.isRequired,\n  getMessageReports: PropTypes.func,\n  query: PropTypes.object,\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.node.isRequired,\n      message: PropTypes.node.isRequired,\n      variant: PropTypes.oneOf([...Object.values(AlertVariant)])\n    })\n  ),\n  productId: PropTypes.string.isRequired\n};\n\n/**\n * Default props.\n *\n * @type {{getMessageReports: Function, query: object, messages: Array}}\n */\nBannerMessages.defaultProps = {\n  getMessageReports: helpers.noop,\n  query: {},\n  messages: [\n    {\n      id: 'cloudigradeMismatch',\n      title: translate('curiosity-banner.dataMismatchTitle'),\n      message: translate(\n        'curiosity-banner.dataMismatchMessage',\n        {\n          context: helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS !== '' && 'cloudigradeMismatch',\n          appName: helpers.UI_DISPLAY_NAME\n        },\n        [\n          <Button\n            isInline\n            component=\"a\"\n            variant=\"link\"\n            icon={<ExternalLinkAltIcon />}\n            iconPosition=\"right\"\n            target=\"_blank\"\n            href={helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS}\n          />\n        ]\n      )\n    }\n  ]\n};\n\n/**\n * Apply actions to props.\n *\n * @param {Function} dispatch\n * @returns {object}\n */\nconst mapDispatchToProps = dispatch => ({\n  getMessageReports: (id, query) => dispatch(reduxActions.rhsm.getMessageReports(id, query))\n});\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.appMessages.makeAppMessages();\n\nconst ConnectedBannerMessages = connect(makeMapStateToProps, mapDispatchToProps)(BannerMessages);\n\nexport { ConnectedBannerMessages as default, ConnectedBannerMessages, BannerMessages };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport { PageLayout, PageHeader, PageSection, PageToolbar, PageMessages } from '../pageLayout/pageLayout';\nimport { apiQueries } from '../../redux';\nimport { ConnectedGraphCard, GraphCard } from '../graphCard/graphCard';\nimport { ConnectedToolbar, Toolbar } from '../toolbar/toolbar';\nimport { ConnectedInventoryList, InventoryList } from '../inventoryList/inventoryList';\nimport { helpers } from '../../common';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport { ToolbarFieldGranularity } from '../toolbar/toolbarFieldGranularity';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport {\n  ConnectedInventorySubscriptions,\n  InventorySubscriptions\n} from '../inventorySubscriptions/inventorySubscriptions';\nimport {\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_SORT_TYPES,\n  RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES,\n  RHSM_API_QUERY_TYPES\n} from '../../types/rhsmApiTypes';\nimport { GuestsList } from '../guestsList/guestsList';\nimport { translate } from '../i18n/i18n';\n\n/**\n * ToDo: base for default product layouts, add additional props for various toolbars\n * Next steps include...\n * Consider being able to pass customized toolbars for GraphCard and the\n * various Inventory displays. Have to evaluate how to handle the global toolbar, one\n * consideration is creating optional widgets with self-contained state update ability\n * based off of context/props/etc.\n *\n * Moving existing products to this layout, or maintaining them \"as is\", then renaming and\n * relocating them to this directory if they've been customized beyond a basic layout.\n */\n/**\n * Display a product.\n *\n * @param {object} props\n * @param {object} props.productConfig\n * @param {object} props.routeDetail\n * @param {Function} props.t\n * @param {Node|boolean} props.toolbarGraph\n * @param {boolean} props.toolbarGraphDescription\n * @param {Node|boolean} props.toolbarProduct\n * @returns {Node}\n */\nconst ProductView = ({ productConfig, routeDetail, t, toolbarGraph, toolbarGraphDescription, toolbarProduct }) => {\n  const {\n    graphTallyQuery,\n    inventoryHostsQuery,\n    inventorySubscriptionsQuery,\n    query,\n    initialToolbarFilters,\n    initialGraphFilters,\n    initialGraphSettings,\n    initialGuestsFilters,\n    initialInventoryFilters,\n    initialInventorySettings,\n    initialSubscriptionsInventoryFilters\n  } = productConfig;\n\n  const {\n    query: initialQuery,\n    graphTallyQuery: initialGraphTallyQuery,\n    inventoryHostsQuery: initialInventoryHostsQuery,\n    inventorySubscriptionsQuery: initialInventorySubscriptionsQuery,\n    toolbarQuery: initialToolbarQuery\n  } = apiQueries.parseRhsmQuery(query, { graphTallyQuery, inventoryHostsQuery, inventorySubscriptionsQuery });\n\n  const { pathParameter: productId, productParameter: productLabel, viewParameter: viewId } = routeDetail;\n\n  if (!productId || !viewId) {\n    return null;\n  }\n\n  let graphCardTooltip = null;\n\n  if (toolbarGraphDescription) {\n    graphCardTooltip = (\n      <Tooltip\n        content={<p>{t('curiosity-graph.cardHeadingDescription', { context: productId })}</p>}\n        position={TooltipPosition.top}\n        enableFlip={false}\n        distance={5}\n        entryDelay={100}\n        exitDelay={0}\n      >\n        <sup className=\"curiosity-icon__info\">\n          <InfoCircleIcon />\n        </sup>\n      </Tooltip>\n    );\n  }\n\n  const graphCardTitle = (\n    <React.Fragment>\n      {t('curiosity-graph.cardHeading', { context: productId })}\n      {graphCardTooltip}\n    </React.Fragment>\n  );\n\n  return (\n    <PageLayout>\n      <PageHeader productLabel={productLabel} includeTour>\n        {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: productLabel })}\n      </PageHeader>\n      <PageMessages>\n        <BannerMessages productId={productId} viewId={viewId} query={initialQuery} />\n      </PageMessages>\n      <PageToolbar>\n        {(React.isValidElement(toolbarProduct) && toolbarProduct) ||\n          (toolbarProduct !== false && (\n            <ConnectedToolbar\n              filterOptions={initialToolbarFilters}\n              productId={productId}\n              query={initialToolbarQuery}\n              viewId={viewId}\n            />\n          ))}\n      </PageToolbar>\n      <PageSection>\n        <ConnectedGraphCard\n          key={`graph_${productId}`}\n          filterGraphData={initialGraphFilters}\n          settings={initialGraphSettings}\n          query={initialGraphTallyQuery}\n          productId={productId}\n          viewId={viewId}\n          cardTitle={graphCardTitle}\n          productLabel={productLabel}\n        >\n          {(React.isValidElement(toolbarGraph) && toolbarGraph) ||\n            (toolbarGraph !== false && (\n              <ToolbarFieldGranularity\n                viewId={viewId}\n                value={initialGraphTallyQuery[RHSM_API_QUERY_TYPES.GRANULARITY]}\n              />\n            ))}\n        </ConnectedGraphCard>\n      </PageSection>\n      <PageSection>\n        <InventoryTabs key={`inventory_${productId}`} productId={productId}>\n          <InventoryTab key={`inventory_hosts_${productId}`} title={t('curiosity-inventory.tab', { context: 'hosts' })}>\n            <ConnectedInventoryList\n              key={`inv_${productId}`}\n              filterGuestsData={initialGuestsFilters}\n              filterInventoryData={initialInventoryFilters}\n              productId={productId}\n              settings={initialInventorySettings}\n              query={initialInventoryHostsQuery}\n              viewId={viewId}\n            />\n          </InventoryTab>\n          {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && (\n            <InventoryTab\n              key={`inventory_subs_${productId}`}\n              title={t('curiosity-inventory.tab', { context: 'subscriptions' })}\n            >\n              <ConnectedInventorySubscriptions\n                key={`subs_${productId}`}\n                filterInventoryData={initialSubscriptionsInventoryFilters}\n                productId={productId}\n                query={initialInventorySubscriptionsQuery}\n                viewId={viewId}\n              />\n            </InventoryTab>\n          )}\n        </InventoryTabs>\n      </PageSection>\n    </PageLayout>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), toolbarGraphDescription: boolean, routeDetail: object,\n *    productConfig: object, toolbarProduct: (Node|boolean)}}\n */\nProductView.propTypes = {\n  productConfig: PropTypes.shape({\n    graphTallyQuery: PropTypes.shape({\n      [RHSM_API_QUERY_TYPES.GRANULARITY]: PropTypes.oneOf([...Object.values(GRANULARITY_TYPES)])\n    }),\n    inventoryHostsQuery: PropTypes.shape({\n      [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SORT_TYPES)]),\n      [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n    }),\n    inventorySubscriptionsQuery: PropTypes.shape({\n      [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES)]),\n      [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n    }),\n    query: PropTypes.shape({\n      [RHSM_API_QUERY_TYPES.START_DATE]: PropTypes.string,\n      [RHSM_API_QUERY_TYPES.END_DATE]: PropTypes.string\n    }),\n    initialToolbarFilters: Toolbar.propTypes.filterOptions,\n    initialGraphFilters: GraphCard.propTypes.filterGraphData,\n    initialGraphSettings: GraphCard.propTypes.settings,\n    initialGuestsFilters: GuestsList.propTypes.filterGuestsData,\n    initialInventoryFilters: InventoryList.propTypes.filterInventoryData,\n    initialInventorySettings: InventoryList.propTypes.settings,\n    initialSubscriptionsInventoryFilters: InventorySubscriptions.propTypes.filterInventoryData\n  }).isRequired,\n  routeDetail: PropTypes.shape({\n    pathParameter: PropTypes.string,\n    productParameter: PropTypes.string,\n    viewParameter: PropTypes.string\n  }).isRequired,\n  t: PropTypes.func,\n  toolbarGraph: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n  toolbarGraphDescription: PropTypes.bool,\n  toolbarProduct: PropTypes.oneOfType([PropTypes.node, PropTypes.bool])\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), toolbarGraphDescription: boolean, toolbarProduct: (Node|boolean)}}\n */\nProductView.defaultProps = {\n  t: translate,\n  toolbarGraph: null,\n  toolbarGraphDescription: false,\n  toolbarProduct: null\n};\n\nexport { ProductView as default, ProductView };\n"],"sourceRoot":""}