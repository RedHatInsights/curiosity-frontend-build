{"version":3,"sources":["components/openshiftView/openshiftView.js"],"names":["OpenshiftView","state","option","graphFilters","inventoryFilters","onSelect","event","props","initialGraphFilters","initialInventoryFilters","viewId","value","filter","id","isOptional","RegExp","test","setState","store","dispatch","type","reduxTypes","query","SET_QUERY_CLEAR_INVENTORY_LIST","SET_QUERY_RHSM_TYPES","RHSM_API_QUERY_TYPES","UOM","initialOption","this","t","options","title","context","RHSM_API_QUERY_UOM_TYPES","CORES","SOCKETS","selectedOptions","initialGuestsFilters","initialToolbarFilters","location","productLabel","routeDetail","isC3","parsedSearch","c3","apiQueries","parseRhsmQuery","initialGraphQuery","graphQuery","initialInventoryQuery","inventoryQuery","toolbarQuery","includeTour","appName","helpers","UI_DISPLAY_NAME","productId","pathParameter","filterOptions","key","filterGraphData","cardTitle","productShortLabel","renderSelect","filterGuestsData","filterInventoryData","React","Component","defaultProps","DIRECTION","SORT_DIRECTION_TYPES","DESCENDING","GRANULARITY","GRANULARITY_TYPES","DAILY","LIMIT","OFFSET","SORT","SORT_TYPES","DATE","fill","chartColorBlueLight","stroke","chartColorBlueDark","color","header","translate","cell","data","session","displayName","inventoryId","authorized","inventory","isInline","component","variant","target","href","UI_DEPLOY_PATH_PREFIX","cellWidth","lastSeen","date","numberOfGuests","updatedDisplayName","Fragment","count","isSortable","cloudProvider","measurementType","isWrappable","SLA","makeMapStateToProps","reduxSelectors","view","makeView","ConnectedOpenshiftView","connect"],"mappings":"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","file":"static/js/7.1fd48453.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  chart_color_blue_100 as chartColorBlueLight,\n  chart_color_blue_300 as chartColorBlueDark\n} from '@patternfly/react-tokens';\nimport { Button, Label as PfLabel } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/cjs/DateFormat';\nimport { PageLayout, PageHeader, PageMessages, PageSection, PageToolbar } from '../pageLayout/pageLayout';\nimport {\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_SORT_TYPES as SORT_TYPES,\n  RHSM_API_QUERY_TYPES,\n  RHSM_API_QUERY_UOM_TYPES\n} from '../../types/rhsmApiTypes';\nimport { apiQueries, connect, reduxSelectors, reduxTypes, store } from '../../redux';\nimport GraphCard from '../graphCard/graphCard';\nimport C3GraphCard from '../c3GraphCard/c3GraphCard';\nimport { Select } from '../form/select';\nimport Toolbar from '../toolbar/toolbar';\nimport InventoryList from '../inventoryList/inventoryList';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * An OpenShift encompassing view.\n *\n * @augments React.Component\n * @fires onSelect\n */\nclass OpenshiftView extends React.Component {\n  state = {\n    option: null,\n    graphFilters: [],\n    inventoryFilters: []\n  };\n\n  componentDidMount() {\n    const { initialOption } = this.props;\n    this.onSelect({ value: initialOption });\n  }\n\n  /**\n   * Apply a selected filtered value.\n   *\n   * @event onSelect\n   * @param {object} event\n   */\n  onSelect = (event = {}) => {\n    const { option } = this.state;\n    const { initialGraphFilters, initialInventoryFilters, viewId } = this.props;\n    const { value } = event;\n\n    if (value !== option) {\n      const filter = ({ id, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(value, 'i').test(id);\n      };\n\n      const graphFilters = initialGraphFilters.filter(filter);\n      const inventoryFilters = initialInventoryFilters.filter(filter);\n\n      this.setState(\n        {\n          option,\n          graphFilters,\n          inventoryFilters\n        },\n        () => {\n          store.dispatch([\n            {\n              type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST\n            },\n            {\n              type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.UOM],\n              viewId,\n              [RHSM_API_QUERY_TYPES.UOM]: value\n            }\n          ]);\n        }\n      );\n    }\n  };\n\n  /**\n   * Render a select/dropdown list.\n   *\n   * @returns {Node}\n   */\n  renderSelect() {\n    const { option } = this.state;\n    const { initialOption, t } = this.props;\n    const options = [\n      {\n        title: t('curiosity-toolbar.uom', { context: RHSM_API_QUERY_UOM_TYPES.CORES }),\n        value: RHSM_API_QUERY_UOM_TYPES.CORES\n      },\n      {\n        title: t('curiosity-toolbar.uom', { context: RHSM_API_QUERY_UOM_TYPES.SOCKETS }),\n        value: RHSM_API_QUERY_UOM_TYPES.SOCKETS\n      }\n    ];\n\n    return <Select onSelect={this.onSelect} options={options} selectedOptions={option || initialOption} />;\n  }\n\n  /**\n   * Render an OpenShift view.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { graphFilters, inventoryFilters } = this.state;\n    const {\n      initialGuestsFilters,\n      initialToolbarFilters,\n      location,\n      productLabel,\n      query,\n      routeDetail,\n      t,\n      viewId\n    } = this.props;\n    const isC3 = location?.parsedSearch?.c3 === '';\n    const {\n      graphQuery: initialGraphQuery,\n      inventoryQuery: initialInventoryQuery,\n      toolbarQuery\n    } = apiQueries.parseRhsmQuery(query);\n\n    return (\n      <PageLayout>\n        <PageHeader productLabel={productLabel} includeTour>\n          {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: productLabel })}\n        </PageHeader>\n        <PageMessages>\n          <BannerMessages productId={routeDetail.pathParameter} viewId={viewId} />\n        </PageMessages>\n        <PageToolbar>\n          <Toolbar\n            filterOptions={initialToolbarFilters}\n            productId={routeDetail.pathParameter}\n            query={toolbarQuery}\n            viewId={viewId}\n          />\n        </PageToolbar>\n        <PageSection>\n          {(isC3 && (\n            <C3GraphCard\n              key={routeDetail.pathParameter}\n              filterGraphData={graphFilters}\n              query={initialGraphQuery}\n              productId={routeDetail.pathParameter}\n              viewId={viewId}\n              cardTitle={t('curiosity-graph.cardHeading')}\n              productShortLabel={productLabel}\n            >\n              {this.renderSelect()}\n            </C3GraphCard>\n          )) || (\n            <GraphCard\n              key={routeDetail.pathParameter}\n              filterGraphData={graphFilters}\n              query={initialGraphQuery}\n              productId={routeDetail.pathParameter}\n              viewId={viewId}\n              cardTitle={t('curiosity-graph.cardHeading')}\n              productLabel={productLabel}\n            >\n              {this.renderSelect()}\n            </GraphCard>\n          )}\n        </PageSection>\n        <PageSection>\n          <InventoryList\n            key={routeDetail.pathParameter}\n            filterGuestsData={initialGuestsFilters}\n            filterInventoryData={inventoryFilters}\n            query={initialInventoryQuery}\n            productId={routeDetail.pathParameter}\n            viewId={viewId}\n            cardTitle={t('curiosity-inventory.cardHeading')}\n          />\n        </PageSection>\n      </PageLayout>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{productLabel: string, initialOption: string, initialToolbarFilters: Array, viewId: string,\n *     t: Function, query: object, initialGraphFilters: Array, routeDetail: object, location: object,\n *     initialGuestsFilters: Array, initialInventoryFilters: Array}}\n */\nOpenshiftView.propTypes = {\n  query: PropTypes.shape({\n    [RHSM_API_QUERY_TYPES.GRANULARITY]: PropTypes.oneOf([...Object.values(GRANULARITY_TYPES)])\n  }),\n  initialOption: PropTypes.oneOf(Object.values(RHSM_API_QUERY_UOM_TYPES)),\n  initialGraphFilters: PropTypes.array,\n  initialGuestsFilters: PropTypes.array,\n  initialInventoryFilters: PropTypes.array,\n  initialToolbarFilters: PropTypes.array,\n  location: PropTypes.shape({\n    parsedSearch: PropTypes.objectOf(PropTypes.string)\n  }).isRequired,\n  productLabel: PropTypes.string,\n  routeDetail: PropTypes.shape({\n    pathParameter: PropTypes.string.isRequired,\n    pathId: PropTypes.string.isRequired,\n    routeItem: PropTypes.shape({\n      title: PropTypes.string\n    })\n  }).isRequired,\n  t: PropTypes.func,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{productLabel: string, initialOption: string, initialToolbarFilters: Array, viewId: string,\n *     t: translate, query: object, initialGraphFilters: Array, initialGuestsFilters: Array,\n *     initialInventoryFilters: Array}}\n */\nOpenshiftView.defaultProps = {\n  query: {\n    [RHSM_API_QUERY_TYPES.DIRECTION]: SORT_DIRECTION_TYPES.DESCENDING,\n    [RHSM_API_QUERY_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY,\n    [RHSM_API_QUERY_TYPES.LIMIT]: 100,\n    [RHSM_API_QUERY_TYPES.OFFSET]: 0,\n    [RHSM_API_QUERY_TYPES.UOM]: RHSM_API_QUERY_UOM_TYPES.CORES,\n    [RHSM_API_QUERY_TYPES.SORT]: SORT_TYPES.DATE\n  },\n  initialOption: RHSM_API_QUERY_UOM_TYPES.CORES,\n  initialGraphFilters: [\n    {\n      id: 'cores',\n      isOptional: true,\n      fill: chartColorBlueLight.value,\n      stroke: chartColorBlueDark.value,\n      color: chartColorBlueDark.value\n    },\n    {\n      id: 'sockets',\n      isOptional: true,\n      fill: chartColorBlueLight.value,\n      stroke: chartColorBlueDark.value,\n      color: chartColorBlueDark.value\n    },\n    { id: 'thresholdSockets', isOptional: true },\n    { id: 'thresholdCores', isOptional: true }\n  ],\n  initialGuestsFilters: [\n    {\n      id: 'displayName',\n      header: translate('curiosity-inventory.header', { context: 'guestsDisplayName' }),\n      cell: (data, session) => {\n        const { displayName, inventoryId } = data;\n        const { inventory: authorized } = session?.authorized || {};\n\n        if (!inventoryId?.value) {\n          return displayName?.value;\n        }\n\n        if (!authorized) {\n          return displayName?.value || inventoryId?.value;\n        }\n\n        return (\n          <Button\n            isInline\n            component=\"a\"\n            variant=\"link\"\n            target=\"_blank\"\n            href={`${helpers.UI_DEPLOY_PATH_PREFIX}/insights/inventory/${inventoryId.value}/`}\n          >\n            {displayName.value || inventoryId.value}\n          </Button>\n        );\n      }\n    },\n    {\n      id: 'inventoryId',\n      cellWidth: 40\n    },\n    {\n      id: 'lastSeen',\n      cell: data => (data?.lastSeen?.value && <DateFormat date={data?.lastSeen?.value} />) || '',\n      cellWidth: 15\n    }\n  ],\n  initialInventoryFilters: [\n    {\n      id: 'displayName',\n      cell: (data, session) => {\n        const { displayName = {}, inventoryId = {}, numberOfGuests = {} } = data;\n        const { inventory: authorized } = session?.authorized || {};\n\n        if (!inventoryId.value) {\n          return displayName.value;\n        }\n\n        let updatedDisplayName = displayName.value || inventoryId.value;\n\n        if (authorized) {\n          updatedDisplayName = (\n            <Button\n              isInline\n              component=\"a\"\n              variant=\"link\"\n              target=\"_blank\"\n              href={`${helpers.UI_DEPLOY_PATH_PREFIX}/insights/inventory/${inventoryId.value}/`}\n            >\n              {displayName.value || inventoryId.value}\n            </Button>\n          );\n        }\n\n        return (\n          <React.Fragment>\n            {updatedDisplayName}{' '}\n            {(numberOfGuests.value &&\n              translate('curiosity-inventory.label', { context: 'numberOfGuests', count: numberOfGuests.value }, [\n                <PfLabel color=\"blue\" />\n              ])) ||\n              ''}\n          </React.Fragment>\n        );\n      },\n      isSortable: true\n    },\n    {\n      id: 'measurementType',\n      cell: data => {\n        const { cloudProvider = {}, measurementType = {} } = data;\n        return (\n          <React.Fragment>\n            {translate('curiosity-inventory.measurementType', { context: measurementType.value })}{' '}\n            {(cloudProvider.value && (\n              <PfLabel color=\"purple\">\n                {translate('curiosity-inventory.cloudProvider', { context: cloudProvider.value })}\n              </PfLabel>\n            )) ||\n              ''}\n          </React.Fragment>\n        );\n      },\n      isSortable: true,\n      cellWidth: 20\n    },\n    {\n      id: 'sockets',\n      isOptional: true,\n      isSortable: true,\n      isWrappable: true,\n      cellWidth: 15\n    },\n    {\n      id: 'cores',\n      isOptional: true,\n      isSortable: true,\n      isWrappable: true,\n      cellWidth: 15\n    },\n    {\n      id: 'lastSeen',\n      cell: data => (data?.lastSeen?.value && <DateFormat date={data?.lastSeen?.value} />) || '',\n      isSortable: true,\n      isWrappable: true,\n      cellWidth: 15\n    }\n  ],\n  initialToolbarFilters: [\n    {\n      id: RHSM_API_QUERY_TYPES.SLA\n    }\n  ],\n  productLabel: 'OpenShift',\n  t: translate,\n  viewId: 'viewOpenShift'\n};\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.view.makeView(OpenshiftView.defaultProps);\n\nconst ConnectedOpenshiftView = connect(makeMapStateToProps)(OpenshiftView);\n\nexport { ConnectedOpenshiftView as default, ConnectedOpenshiftView, OpenshiftView };\n"],"sourceRoot":""}