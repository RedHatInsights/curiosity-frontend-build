{"version":3,"sources":["components/productView/productView.js","components/productView/productViewRhel.js"],"names":["ProductView","productConfig","routeDetail","t","toolbarGraph","toolbarProduct","graphTallyQuery","inventoryHostsQuery","inventorySubscriptionsQuery","query","initialToolbarFilters","initialGraphFilters","initialGuestsFilters","initialInventoryFilters","initialInventorySettings","initialSubscriptionsInventoryFilters","apiQueries","parseRhsmQuery","initialQuery","initialGraphTallyQuery","initialInventoryHostsQuery","initialInventorySubscriptionsQuery","initialToolbarQuery","toolbarQuery","productId","pathParameter","productLabel","productParameter","viewId","viewParameter","includeTour","appName","helpers","UI_DISPLAY_NAME","context","React","isValidElement","filterOptions","filterGraphData","cardTitle","value","RHSM_API_QUERY_TYPES","GRANULARITY","title","filterGuestsData","filterInventoryData","settings","UI_DISABLED_TABLE_SUBSCRIPTIONS","defaultProps","translate","makeMapStateToProps","reduxSelectors","view","makeView","ConnectedProductView","connect","ProductViewRhel","GRANULARITY_TYPES","DAILY","START_DATE","dateHelpers","getRangedDateTime","startDate","toISOString","END_DATE","endDate","SORT","RHSM_API_QUERY_SORT_TYPES","LAST_SEEN","DIRECTION","SORT_DIRECTION_TYPES","ASCENDING","LIMIT","OFFSET","RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES","UPCOMING_EVENT_DATE","id","fill","chartColorBlueLight","stroke","chartColorBlueDark","color","chartColorCyanLight","chartColorCyanDark","chartColorPurpleLight","chartColorPurpleDark","header","cell","data","session","displayName","inventoryId","authorized","inventory","isInline","component","variant","target","href","UI_DEPLOY_PATH_PREFIX","cellWidth","lastSeen","date","numberOfGuests","updatedDisplayName","Fragment","count","isSortable","cloudProvider","measurementType","isWrappable","upcomingEventDate","moment","utc","format","SLA","USAGE","selected"],"mappings":"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","file":"static/js/6.2cb7e96a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { PageLayout, PageHeader, PageSection, PageToolbar, PageMessages } from '../pageLayout/pageLayout';\nimport { apiQueries, connect, reduxSelectors } from '../../redux';\nimport { ConnectedGraphCard, GraphCard } from '../graphCard/graphCard';\nimport { ConnectedToolbar, Toolbar } from '../toolbar/toolbar';\nimport { ConnectedInventoryList, InventoryList } from '../inventoryList/inventoryList';\nimport { helpers } from '../../common';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport { ToolbarFieldGranularity } from '../toolbar/toolbarFieldGranularity';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport {\n  ConnectedInventorySubscriptions,\n  InventorySubscriptions\n} from '../inventorySubscriptions/inventorySubscriptions';\nimport {\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_SORT_TYPES,\n  RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES,\n  RHSM_API_QUERY_TYPES\n} from '../../types/rhsmApiTypes';\nimport { GuestsList } from '../guestsList/guestsList';\nimport { translate } from '../i18n/i18n';\n\n/**\n * ToDo: base for default product layouts, add additional props for various toolbars\n * Next steps include...\n * Consider being able to pass customized toolbars for GraphCard and the\n * various Inventory displays. Have to evaluate how to handle the global toolbar, one\n * consideration is creating optional widgets with self-contained state update ability\n * based off of context/props/etc.\n *\n * Moving existing products to this layout, or maintaining them \"as is\", then renaming and\n * relocating them to this directory if they've been customized beyond a basic layout.\n */\n/**\n * Display a product.\n *\n * @param {object} props\n * @param {object} props.productConfig\n * @param {object} props.routeDetail\n * @param {Function} props.t\n * @param {Node|boolean} props.toolbarGraph\n * @param {Node|boolean} props.toolbarProduct\n * @returns {Node}\n */\nconst ProductView = ({ productConfig, routeDetail, t, toolbarGraph, toolbarProduct }) => {\n  const {\n    graphTallyQuery,\n    inventoryHostsQuery,\n    inventorySubscriptionsQuery,\n    query,\n    initialToolbarFilters,\n    initialGraphFilters,\n    initialGuestsFilters,\n    initialInventoryFilters,\n    initialInventorySettings,\n    initialSubscriptionsInventoryFilters\n  } = productConfig;\n\n  const {\n    query: initialQuery,\n    graphTallyQuery: initialGraphTallyQuery,\n    inventoryHostsQuery: initialInventoryHostsQuery,\n    inventorySubscriptionsQuery: initialInventorySubscriptionsQuery,\n    toolbarQuery: initialToolbarQuery\n  } = apiQueries.parseRhsmQuery(query, { graphTallyQuery, inventoryHostsQuery, inventorySubscriptionsQuery });\n\n  const { pathParameter: productId, productParameter: productLabel, viewParameter: viewId } = routeDetail;\n\n  if (!productId || !viewId) {\n    return null;\n  }\n\n  return (\n    <PageLayout>\n      <PageHeader productLabel={productLabel} includeTour>\n        {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: productLabel })}\n      </PageHeader>\n      <PageMessages>\n        <BannerMessages productId={productId} viewId={viewId} query={initialQuery} />\n      </PageMessages>\n      <PageToolbar>\n        {(React.isValidElement(toolbarProduct) && toolbarProduct) ||\n          (toolbarProduct !== false && (\n            <ConnectedToolbar\n              filterOptions={initialToolbarFilters}\n              productId={productId}\n              query={initialToolbarQuery}\n              viewId={viewId}\n            />\n          ))}\n      </PageToolbar>\n      <PageSection>\n        <ConnectedGraphCard\n          key={`graph_${productId}`}\n          filterGraphData={initialGraphFilters}\n          query={initialGraphTallyQuery}\n          productId={productId}\n          viewId={viewId}\n          cardTitle={t('curiosity-graph.cardHeading', { context: productLabel })}\n          productLabel={productLabel}\n        >\n          {(React.isValidElement(toolbarGraph) && toolbarGraph) ||\n            (toolbarGraph !== false && (\n              <ToolbarFieldGranularity\n                viewId={viewId}\n                value={initialGraphTallyQuery[RHSM_API_QUERY_TYPES.GRANULARITY]}\n              />\n            ))}\n        </ConnectedGraphCard>\n      </PageSection>\n      <PageSection>\n        <InventoryTabs key={`inventory_${productId}`} productId={productId}>\n          <InventoryTab key={`inventory_hosts_${productId}`} title={t('curiosity-inventory.tab', { context: 'hosts' })}>\n            <ConnectedInventoryList\n              key={productId}\n              filterGuestsData={initialGuestsFilters}\n              filterInventoryData={initialInventoryFilters}\n              productId={productId}\n              settings={initialInventorySettings}\n              query={initialInventoryHostsQuery}\n              viewId={viewId}\n            />\n          </InventoryTab>\n          {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && (\n            <InventoryTab\n              key={`inventory_subs_${productId}`}\n              title={t('curiosity-inventory.tab', { context: 'subscriptions' })}\n            >\n              <ConnectedInventorySubscriptions\n                key={productId}\n                filterInventoryData={initialSubscriptionsInventoryFilters}\n                productId={productId}\n                query={initialInventorySubscriptionsQuery}\n                viewId={viewId}\n              />\n            </InventoryTab>\n          )}\n        </InventoryTabs>\n      </PageSection>\n    </PageLayout>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), routeDetail: object, productConfig: object,\n *     toolbarProduct: (Node|boolean)}}\n */\nProductView.propTypes = {\n  productConfig: PropTypes.shape({\n    graphTallyQuery: PropTypes.shape({\n      [RHSM_API_QUERY_TYPES.GRANULARITY]: PropTypes.oneOf([...Object.values(GRANULARITY_TYPES)]),\n      [RHSM_API_QUERY_TYPES.START_DATE]: PropTypes.string,\n      [RHSM_API_QUERY_TYPES.END_DATE]: PropTypes.string\n    }),\n    inventoryHostsQuery: PropTypes.shape({\n      [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SORT_TYPES)]),\n      [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n    }),\n    inventorySubscriptionsQuery: PropTypes.shape({\n      [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES)]),\n      [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n    }),\n    query: PropTypes.object,\n    initialToolbarFilters: Toolbar.propTypes.filterOptions,\n    initialGraphFilters: GraphCard.propTypes.filterGraphData,\n    initialGuestsFilters: GuestsList.propTypes.filterGuestsData,\n    initialInventoryFilters: InventoryList.propTypes.filterInventoryData,\n    initialInventorySettings: InventoryList.propTypes.settings,\n    initialSubscriptionsInventoryFilters: InventorySubscriptions.propTypes.filterInventoryData\n  }).isRequired,\n  routeDetail: PropTypes.shape({\n    pathParameter: PropTypes.string,\n    productParameter: PropTypes.string,\n    viewParameter: PropTypes.string\n  }).isRequired,\n  t: PropTypes.func,\n  toolbarGraph: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n  toolbarProduct: PropTypes.oneOfType([PropTypes.node, PropTypes.bool])\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), toolbarProduct: (Node|boolean)}}\n */\nProductView.defaultProps = {\n  t: translate,\n  toolbarGraph: null,\n  toolbarProduct: null\n};\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.view.makeView(ProductView.defaultProps);\n\nconst ConnectedProductView = connect(makeMapStateToProps)(ProductView);\n\nexport { ConnectedProductView as default, ConnectedProductView, ProductView };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  chart_color_blue_100 as chartColorBlueLight,\n  chart_color_blue_300 as chartColorBlueDark,\n  chart_color_cyan_100 as chartColorCyanLight,\n  chart_color_cyan_300 as chartColorCyanDark,\n  chart_color_purple_100 as chartColorPurpleLight,\n  chart_color_purple_300 as chartColorPurpleDark\n} from '@patternfly/react-tokens';\nimport { Button, Label as PfLabel } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/DateFormat';\nimport moment from 'moment';\nimport {\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_TYPES,\n  RHSM_API_QUERY_SORT_TYPES,\n  RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES\n} from '../../types/rhsmApiTypes';\nimport { ConnectedProductView, ProductView } from './productView';\nimport { translate } from '../i18n/i18n';\nimport { dateHelpers, helpers } from '../../common';\n\n/**\n * A Red Hat Enterprise Linux configured view, and related system architectures.\n *\n * @param {object} props\n * @param {object} props.productConfig\n * @param {object} props.routeDetail\n * @returns {Node}\n */\nconst ProductViewRhel = ({ productConfig, routeDetail }) => (\n  <ConnectedProductView routeDetail={routeDetail} productConfig={productConfig} />\n);\n\n/**\n * Prop types.\n *\n * @type {{routeDetail: object, productConfig:object}}\n */\nProductViewRhel.propTypes = {\n  productConfig: ProductView.propTypes.productConfig,\n  routeDetail: PropTypes.shape({\n    pathParameter: PropTypes.string,\n    productParameter: PropTypes.string,\n    viewParameter: PropTypes.string\n  }).isRequired\n};\n\n/**\n * Default props.\n *\n * @type {{ productConfig: object }}\n */\nProductViewRhel.defaultProps = {\n  productConfig: {\n    query: {},\n    graphTallyQuery: {\n      [RHSM_API_QUERY_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY,\n      [RHSM_API_QUERY_TYPES.START_DATE]: dateHelpers.getRangedDateTime(GRANULARITY_TYPES.DAILY).startDate.toISOString(),\n      [RHSM_API_QUERY_TYPES.END_DATE]: dateHelpers.getRangedDateTime(GRANULARITY_TYPES.DAILY).endDate.toISOString()\n    },\n    inventoryHostsQuery: {\n      [RHSM_API_QUERY_TYPES.SORT]: RHSM_API_QUERY_SORT_TYPES.LAST_SEEN,\n      [RHSM_API_QUERY_TYPES.DIRECTION]: SORT_DIRECTION_TYPES.ASCENDING,\n      [RHSM_API_QUERY_TYPES.LIMIT]: 100,\n      [RHSM_API_QUERY_TYPES.OFFSET]: 0\n    },\n    inventorySubscriptionsQuery: {\n      [RHSM_API_QUERY_TYPES.SORT]: RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES.UPCOMING_EVENT_DATE,\n      [RHSM_API_QUERY_TYPES.DIRECTION]: SORT_DIRECTION_TYPES.ASCENDING,\n      [RHSM_API_QUERY_TYPES.LIMIT]: 100,\n      [RHSM_API_QUERY_TYPES.OFFSET]: 0\n    },\n    initialGraphFilters: [\n      {\n        id: 'physicalSockets',\n        fill: chartColorBlueLight.value,\n        stroke: chartColorBlueDark.value,\n        color: chartColorBlueDark.value\n      },\n      {\n        id: 'hypervisorSockets',\n        fill: chartColorCyanLight.value,\n        stroke: chartColorCyanDark.value,\n        color: chartColorCyanDark.value\n      },\n      {\n        id: 'cloudSockets',\n        fill: chartColorPurpleLight.value,\n        stroke: chartColorPurpleDark.value,\n        color: chartColorPurpleDark.value\n      },\n      { id: 'thresholdSockets' }\n    ],\n    initialGuestsFilters: [\n      {\n        id: 'displayName',\n        header: translate('curiosity-inventory.header', { context: 'guestsDisplayName' }),\n        cell: (data, session) => {\n          const { displayName, inventoryId } = data;\n          const { inventory: authorized } = session?.authorized || {};\n\n          if (!inventoryId?.value) {\n            return displayName?.value;\n          }\n\n          if (!authorized) {\n            return displayName?.value || inventoryId?.value;\n          }\n\n          return (\n            <Button\n              isInline\n              component=\"a\"\n              variant=\"link\"\n              target=\"_blank\"\n              href={`${helpers.UI_DEPLOY_PATH_PREFIX}/insights/inventory/${inventoryId.value}/`}\n            >\n              {displayName.value || inventoryId.value}\n            </Button>\n          );\n        }\n      },\n      {\n        id: 'inventoryId',\n        cellWidth: 40\n      },\n      {\n        id: 'lastSeen',\n        cell: data => (data?.lastSeen?.value && <DateFormat date={data?.lastSeen?.value} />) || '',\n        cellWidth: 15\n      }\n    ],\n    initialInventoryFilters: [\n      {\n        id: 'displayName',\n        cell: (data, session) => {\n          const { displayName = {}, inventoryId = {}, numberOfGuests = {} } = data;\n          const { inventory: authorized } = session?.authorized || {};\n\n          if (!inventoryId.value) {\n            return displayName.value;\n          }\n\n          let updatedDisplayName = displayName.value || inventoryId.value;\n\n          if (authorized) {\n            updatedDisplayName = (\n              <Button\n                isInline\n                component=\"a\"\n                variant=\"link\"\n                target=\"_blank\"\n                href={`${helpers.UI_DEPLOY_PATH_PREFIX}/insights/inventory/${inventoryId.value}/`}\n              >\n                {displayName.value || inventoryId.value}\n              </Button>\n            );\n          }\n\n          return (\n            <React.Fragment>\n              {updatedDisplayName}{' '}\n              {(numberOfGuests.value &&\n                translate('curiosity-inventory.label', { context: 'numberOfGuests', count: numberOfGuests.value }, [\n                  <PfLabel color=\"blue\" />\n                ])) ||\n                ''}\n            </React.Fragment>\n          );\n        },\n        isSortable: true\n      },\n      {\n        id: 'measurementType',\n        cell: data => {\n          const { cloudProvider = {}, measurementType = {} } = data;\n          return (\n            <React.Fragment>\n              {translate('curiosity-inventory.measurementType', { context: measurementType.value })}{' '}\n              {(cloudProvider.value && (\n                <PfLabel color=\"purple\">\n                  {translate('curiosity-inventory.cloudProvider', { context: cloudProvider.value })}\n                </PfLabel>\n              )) ||\n                ''}\n            </React.Fragment>\n          );\n        },\n        isSortable: true,\n        cellWidth: 20\n      },\n      {\n        id: 'sockets',\n        isSortable: true,\n        isWrappable: true,\n        cellWidth: 15\n      },\n      {\n        id: 'lastSeen',\n        cell: data => (data?.lastSeen?.value && <DateFormat date={data?.lastSeen?.value} />) || '',\n        isSortable: true,\n        isWrappable: true,\n        cellWidth: 15\n      }\n    ],\n    initialInventorySettings: {},\n    initialSubscriptionsInventoryFilters: [\n      {\n        id: 'productName',\n        isSortable: true\n      },\n      {\n        id: 'serviceLevel',\n        isSortable: true,\n        isWrappable: true,\n        cellWidth: 15\n      },\n      {\n        id: 'upcomingEventDate',\n        cell: data =>\n          (data?.upcomingEventDate?.value && moment.utc(data?.upcomingEventDate?.value).format('YYYY-DD-MM')) || '',\n        isSortable: true,\n        isWrappable: true,\n        cellWidth: 15\n      }\n    ],\n    initialToolbarFilters: [\n      {\n        id: RHSM_API_QUERY_TYPES.SLA\n      },\n      {\n        id: RHSM_API_QUERY_TYPES.USAGE,\n        selected: true\n      }\n    ]\n  }\n};\n\nexport { ProductViewRhel as default, ProductViewRhel };\n"],"sourceRoot":""}