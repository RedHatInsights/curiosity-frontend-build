{"version":3,"sources":["components/chart/chartContext.js","components/chart/chartTooltip.js","components/chart/chartElements.js"],"names":["DEFAULT_CONTEXT","chartContainerRef","helpers","noop","chartSettings","chartTooltipRef","dataSetsToggle","ChartContext","React","createContext","useChartContext","useContext","useToggleData","useAliasChartContext","contextDataSetsToggle","setDataSetsToggle","onHide","useCallback","id","prevState","onRevert","onToggle","updatedToggle","getIsToggled","context","chartTooltip","minChartWidth","getXCoordinate","x","width","tooltipWidth","padding","minWidth","getYCoordinate","y","height","tooltipHeight","tailPosition","datum","tooltipDataSetLookUp","containerRef","tooltipRef","content","tooltip","containerPaddingBottom","bottom","containerBounds","current","querySelector","getBoundingClientRect","tooltipBounds","updatedClassName","className","ref","style","display","xmlns","ChartElements","chartElements","stackedChartElements","chartTypeDefaults","chartDomain","chartElementsProps","chartWidth","hasData","themeColor","xAxisProps","yAxisProps","containerComponent","yAxis","VictoryVoronoiCursorContainer","createContainer","TooltipLabelComponent","cursorDimension","voronoiDimension","labels","obj","labelComponent","dx","dy","centerOffset","flyoutStyle","fill","stroke","voronoiPadding","mouseFollowTooltips","Array","isArray","map","axisProps","animate","orientation","setChartElement","chartType","props","area","Component","component","defaultProps","elements","stackedElements","duration","ChartArea","onLoad","interpolation","line","ChartLine","threshold","ChartThreshold"],"mappings":"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","file":"static/js/25.4f2db3a2.chunk.js","sourcesContent":["import React, { useCallback, useContext } from 'react';\nimport { helpers } from '../../common';\n\n/**\n * Chart context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [\n  { chartContainerRef: helpers.noop, chartSettings: {}, chartTooltipRef: helpers.noop, dataSetsToggle: [] },\n  helpers.noop\n];\n\nconst ChartContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated chart context.\n *\n * @returns {React.Context<{}>}\n */\nconst useChartContext = () => useContext(ChartContext);\n\n/**\n * ToDo: reevaluate this alternative pattern of passing hooks as options, helps testing\n */\n/**\n * Track, show, and hide chart data layers.\n *\n * @param {object} hooks\n * @param {Function} hooks.useChartContext\n * @returns {{onRevert: Function, onToggle: Function, getIsToggled: Function, dataSetsToggle: object,\n *     onHide: Function}}\n */\nconst useToggleData = ({ useChartContext: useAliasChartContext = useChartContext } = {}) => {\n  const { dataSetsToggle: contextDataSetsToggle = [] } = useAliasChartContext();\n  const [dataSetsToggle, setDataSetsToggle] = contextDataSetsToggle;\n\n  /**\n   * Hide a graph layer.\n   *\n   * @type {(function(*): void)|*}\n   */\n  const onHide = useCallback(\n    id => {\n      setDataSetsToggle(prevState => ({ ...prevState, [id]: true }));\n    },\n    [setDataSetsToggle]\n  );\n\n  // ToDo: re-evaluate useCallback here.\n  /**\n   * Reset graph layers.\n   *\n   * @type {(function(): void)|*}\n   */\n  const onRevert = useCallback(() => {\n    setDataSetsToggle(() => ({}));\n  }, [setDataSetsToggle]);\n\n  /**\n   * Hide/show graph layers.\n   *\n   * @type {function(*): boolean}\n   */\n  const onToggle = useCallback(\n    id => {\n      const updatedToggle = !dataSetsToggle?.[id];\n      setDataSetsToggle(prevState => ({ ...prevState, [id]: updatedToggle }));\n      return updatedToggle;\n    },\n    [dataSetsToggle, setDataSetsToggle]\n  );\n\n  // ToDo: review return undefined if doesn't exist\n  /**\n   * Graph layer status.\n   *\n   * @type {function(*): boolean}\n   */\n  const getIsToggled = useCallback(id => dataSetsToggle?.[id] || false, [dataSetsToggle]);\n\n  return {\n    ...{ dataSetsToggle },\n    onHide,\n    onRevert,\n    onToggle,\n    getIsToggled\n  };\n};\n\nconst context = {\n  ChartContext,\n  DEFAULT_CONTEXT,\n  useChartContext,\n  useToggleData\n};\n\nexport { context as default, context, ChartContext, DEFAULT_CONTEXT, useChartContext, useToggleData };\n","import React from 'react';\nimport { helpers } from '../../common';\n\n/**\n * Note: Victory Charts components require a form of extended \"something\" applied by the consuming component.\n * This leads to odd implementations, like returning a function component.\n */\n/**\n * Return a compatible Victory tooltip component.\n *\n * @param {object} params\n * @param {object} params.chartSettings\n * @param {Function} params.chartContainerRef\n * @param {Function} params.chartTooltipRef\n * @param {number} params.minChartWidth\n * @returns {Function}\n */\nconst chartTooltip = ({\n  chartSettings = {},\n  chartContainerRef = helpers.noop,\n  chartTooltipRef = helpers.noop,\n  minChartWidth = 500\n} = {}) => {\n  // ToDo: evaluate using \"width\" in place of \"minWidth\" for scenarios where the graph size is smaller\n  /**\n   * Return a tooltip x coordinate.\n   *\n   * @param {object} params\n   * @param {number} params.x\n   * @param {number} params.width\n   * @param {number} params.tooltipWidth\n   * @param {number} params.padding\n   * @param {number} params.minWidth\n   * @returns {number}\n   */\n  const getXCoordinate = ({ x, width, tooltipWidth, padding = 0, minWidth = minChartWidth } = {}) => {\n    if (width <= minWidth && x > tooltipWidth / 2 + padding && x < minWidth - tooltipWidth + padding) {\n      return x + padding - tooltipWidth / 2;\n    }\n\n    return x > width / 2 ? x - tooltipWidth + padding : x + padding;\n  };\n\n  /**\n   * Return a tooltip y coordinate.\n   *\n   * @param {object} params\n   * @param {number} params.y\n   * @param {number} params.height\n   * @param {number} params.tooltipHeight\n   * @param {number} params.width\n   * @param {number} params.padding\n   * @param {number} params.minWidth\n   * @returns {number}\n   */\n  const getYCoordinate = ({ y, height, tooltipHeight, width, padding = 15, minWidth = minChartWidth } = {}) => {\n    if (width <= minWidth) {\n      return y > height / 2 ? y - tooltipHeight - padding : y + padding;\n    }\n\n    return height * 0.25;\n  };\n\n  // ToDo: evaluate using \"width\" in place of \"minWidth\" for scenarios where the graph size is smaller\n  /**\n   * Return a tooltip tail position CSS class.\n   *\n   * @param {object} params\n   * @param {number} params.x\n   * @param {number} params.width\n   * @param {number} params.tooltipWidth\n   * @param {number} params.padding\n   * @param {number} params.minWidth\n   * @returns {number}\n   */\n  const tailPosition = ({ x, width, tooltipWidth, padding = 0, minWidth = minChartWidth } = {}) => {\n    if (width <= minWidth && x > tooltipWidth / 2 + padding && x < minWidth - tooltipWidth + padding) {\n      return 'middle';\n    }\n\n    return x > width / 2 ? 'right' : 'left';\n  };\n\n  return ({ x, y, datum = {} }) => { // eslint-disable-line\n    const { padding = {}, tooltipDataSetLookUp = {} } = chartSettings;\n\n    const containerRef = chartContainerRef();\n    const tooltipRef = chartTooltipRef();\n    const content = tooltipDataSetLookUp?.[datum.x]?.tooltip || '';\n    const containerPaddingBottom = padding.bottom ?? 0;\n    const containerBounds = containerRef?.current?.querySelector('svg')?.getBoundingClientRect() || {\n      width: 0,\n      height: 0\n    };\n    const tooltipBounds = tooltipRef?.current?.getBoundingClientRect() || { width: 0, height: 0 };\n\n    if (content) {\n      const updatedClassName = `${(tooltipBounds.height <= 0 && 'fadein') || ''}`;\n\n      return (\n        <g>\n          <foreignObject\n            x={getXCoordinate({ x, width: containerBounds.width, tooltipWidth: tooltipBounds.width })}\n            y={getYCoordinate({\n              y,\n              height: containerBounds.height,\n              tooltipHeight: tooltipBounds.height,\n              width: containerBounds.width\n            })}\n            width=\"100%\"\n            height=\"100%\"\n          >\n            <div\n              className={`curiosity-chartarea__tooltip-container ${updatedClassName}`}\n              ref={tooltipRef}\n              style={{ display: (y > containerBounds.height - containerPaddingBottom && 'none') || 'inline-block' }}\n              xmlns=\"http://www.w3.org/1999/xhtml\"\n            >\n              <div\n                className={`curiosity-chartarea__tooltip curiosity-chartarea__tooltip-${tailPosition({\n                  x,\n                  y,\n                  width: containerBounds.width,\n                  tooltipWidth: tooltipBounds.width\n                })}`}\n              >\n                {content}\n              </div>\n            </div>\n          </foreignObject>\n        </g>\n      );\n    }\n\n    return <g />;\n  };\n};\n\nexport { chartTooltip as default, chartTooltip };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { VictoryStack as ChartStack, VictoryTooltip as ChartCursorTooltip } from 'victory';\nimport { createContainer } from 'victory-create-container';\nimport { Chart, ChartArea, ChartAxis, ChartContainer, ChartLine, ChartThreshold } from '@patternfly/react-charts';\nimport { useChartContext } from './chartContext';\nimport { chartTooltip } from './chartTooltip';\n\n/**\n * Generate a compatible Victory chart element/facet component.\n *\n * @param {object} props\n * @param {object} props.chartTypeDefaults\n * @returns {Node}\n */\nconst ChartElements = ({ chartTypeDefaults }) => {\n  const { chartSettings = {}, chartContainerRef, chartTooltipRef } = useChartContext();\n  const {\n    chartDomain,\n    chartElementsProps,\n    chartWidth,\n    hasData,\n    padding,\n    themeColor,\n    xAxisProps,\n    yAxisProps\n  } = chartSettings;\n\n  let containerComponent = <ChartContainer />;\n  let yAxis = null;\n  let chartElements = [];\n  let stackedChartElements = [];\n\n  if (hasData) {\n    /**\n     * Note: both cursor and voronoiDimension attrs required if the need is to have...\n     * the tooltip populate consistently without being \"near\" a chart element y axis point\n     */\n    const VictoryVoronoiCursorContainer = createContainer('voronoi', 'cursor');\n    const TooltipLabelComponent = chartTooltip({ chartSettings, chartContainerRef, chartTooltipRef });\n\n    containerComponent = (\n      <VictoryVoronoiCursorContainer\n        cursorDimension=\"x\"\n        voronoiDimension=\"x\"\n        labels={obj => obj}\n        labelComponent={\n          <ChartCursorTooltip\n            dx={0}\n            dy={0}\n            centerOffset={{ x: 0, y: 0 }}\n            flyoutStyle={{ fill: 'transparent', stroke: 'transparent' }}\n            labelComponent={<TooltipLabelComponent />}\n          />\n        }\n        voronoiPadding={50}\n        mouseFollowTooltips\n      />\n    );\n  }\n\n  if (Array.isArray(yAxisProps)) {\n    yAxis = yAxisProps.map(axisProps => (\n      <ChartAxis key={`yaxis-${axisProps.orientation}`} {...axisProps} animate={false} />\n    ));\n  }\n\n  const setChartElement = ({ chartType, props }) => {\n    const { component: Component, ...defaultProps } = chartTypeDefaults[chartType] || chartTypeDefaults.area;\n    return <Component {...{ ...defaultProps, ...props }} />;\n  };\n\n  chartElements = chartElementsProps?.elements.map(setChartElement);\n  stackedChartElements = chartElementsProps?.stackedElements.map(setChartElement);\n\n  return (\n    <Chart\n      animate={{ duration: 0 }}\n      width={chartWidth}\n      themeColor={themeColor}\n      {...{ padding, containerComponent, ...chartDomain }}\n    >\n      <ChartAxis {...xAxisProps} animate={false} />\n      {yAxis}\n      {chartElements}\n      <ChartStack>{stackedChartElements}</ChartStack>\n    </Chart>\n  );\n};\n\nChartElements.propTypes = {\n  chartTypeDefaults: PropTypes.objectOf(\n    PropTypes.shape({\n      component: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n      animate: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n      interpolation: PropTypes.oneOf(['monotoneX', 'step'])\n    })\n  )\n};\n\nChartElements.defaultProps = {\n  chartTypeDefaults: {\n    area: {\n      component: ChartArea,\n      animate: {\n        duration: 250,\n        onLoad: { duration: 250 }\n      },\n      interpolation: 'monotoneX'\n    },\n    line: {\n      component: ChartLine,\n      animate: {\n        duration: 250,\n        onLoad: { duration: 250 }\n      },\n      interpolation: 'monotoneX'\n    },\n    threshold: {\n      component: ChartThreshold,\n      animate: {\n        duration: 100,\n        onLoad: { duration: 100 }\n      },\n      interpolation: 'step'\n    }\n  }\n};\n\nexport { ChartElements as default, ChartElements };\n"],"sourceRoot":""}