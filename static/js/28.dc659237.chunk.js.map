{"version":3,"sources":["../../../../../../src/components/Table/utils/decorators/wrappable.tsx","components/inventoryList/inventoryListHelpers.js","components/guestsList/guestsList.js"],"names":["applySortFilters","filter","onSort","query","id","updatedFilter","hasSort","sortActive","RHSM_API_QUERY_TYPES","SORT","_camelCase","sortDirection","DIRECTION","SORT_DIRECTION_TYPES","DESCENDING","SortByDirection","desc","asc","isSortDefault","sortDefaultInitialDirection","applyWrappableFilters","Array","isArray","transforms","push","wrappable","parseInventoryFilters","filters","map","isSortable","Object","assign","isWrappable","parseRowCellsListData","cellData","session","updatedColumnHeaders","updatedCells","allCells","entries","forEach","key","value","title","translate","context","length","headerUpdated","cellUpdated","cell","cellWidth","header","React","isValidElement","concat","PfCellWidth","obj","columnHeaders","cells","data","inventoryListHelpers","GuestsList","state","currentPage","limit","previousData","onUpdateGuestsData","props","getHostsInventoryGuests","updatedQuery","LIMIT","OFFSET","apiQueries","parseRhsmQuery","inventoryGuestsQuery","onScroll","event","target","numberOfGuests","pending","listData","bottom","scrollHeight","scrollTop","clientHeight","newPage","updatedData","setState","this","prevProps","prevState","filterGuestsData","scrollLoader","variant","tableProps","borders","colCount","keys","colWidth","rowCount","TableVariant","compact","className","updatedRows","updatedHeight","style","height","renderLoader","rows","error","perPageDefault","renderTable","Component","defaultProps","helpers","noop","makeMapStateToProps","reduxSelectors","guestsList","makeGuestsList","ConnectedGuestsList","connect","dispatch","reduxActions","rhsm"],"mappings":"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","file":"static/js/28.dc659237.chunk.js","sourcesContent":["import styles from '@patternfly/react-styles/css/components/Table/table';\nexport const breakWord = () => ({\n    className: styles.modifiers.breakWord\n});\nexport const fitContent = () => ({\n    className: styles.modifiers.fitContent\n});\nexport const nowrap = () => ({\n    className: styles.modifiers.nowrap\n});\nexport const truncate = () => ({\n    className: styles.modifiers.truncate\n});\nexport const wrappable = () => ({\n    className: styles.modifiers.wrap\n});\n//# sourceMappingURL=wrappable.js.map","import React from 'react';\nimport { cellWidth as PfCellWidth, SortByDirection, wrappable } from '@patternfly/react-table';\nimport _camelCase from 'lodash/camelCase';\nimport { translate } from '../i18n/i18n';\nimport {\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_TYPES\n} from '../../types/rhsmApiTypes';\n\n/**\n * Apply sort filter to filters.\n *\n * @param {object} params\n * @param {{ onSort: Function, sortActive: boolean, sortDirection: string, isSortDefault: boolean,\n *     sortDefaultInitialDirection: string }} params.filter\n * @param {Function} params.onSort\n * @param {object} params.query\n * @returns {object}\n */\nconst applySortFilters = ({ filter = {}, onSort, query = {} }) => {\n  const { id } = filter;\n  const updatedFilter = { ...filter };\n  const hasSort = updatedFilter.onSort || onSort;\n\n  if (!updatedFilter.onSort && onSort) {\n    updatedFilter.onSort = onSort;\n  }\n\n  // set fallback for the active sorted column based on query\n  if (\n    hasSort &&\n    typeof updatedFilter.sortActive !== 'boolean' &&\n    query?.[RHSM_API_QUERY_TYPES.SORT] &&\n    _camelCase(query?.[RHSM_API_QUERY_TYPES.SORT]) === id\n  ) {\n    updatedFilter.sortActive = true;\n  }\n\n  // set sort direction\n  if (hasSort && !updatedFilter.sortDirection && query?.[RHSM_API_QUERY_TYPES.DIRECTION]) {\n    switch (query?.[RHSM_API_QUERY_TYPES.DIRECTION]) {\n      case SORT_DIRECTION_TYPES.DESCENDING:\n        updatedFilter.sortDirection = SortByDirection.desc;\n        break;\n      default:\n        updatedFilter.sortDirection = SortByDirection.asc;\n        break;\n    }\n  }\n\n  if (\n    hasSort &&\n    !updatedFilter.sortActive &&\n    !query?.[RHSM_API_QUERY_TYPES.SORT] &&\n    updatedFilter.isSortDefault === true\n  ) {\n    updatedFilter.sortActive = true;\n\n    if (updatedFilter.sortDefaultInitialDirection) {\n      updatedFilter.sortDirection = updatedFilter.sortDefaultInitialDirection;\n    }\n  }\n\n  return updatedFilter;\n};\n\nconst applyWrappableFilters = ({ filter = {} }) => {\n  const updatedFilter = { ...filter };\n\n  if (Array.isArray(updatedFilter.transforms)) {\n    updatedFilter.transforms.push(wrappable);\n  } else {\n    updatedFilter.transforms = [wrappable];\n  }\n\n  return updatedFilter;\n};\n\n/**\n * Apply additional properties to filters.\n *\n * @param {object} params\n * @param {Array} params.filters\n * @param {Function} params.onSort\n * @param {object} params.query\n * @returns {Array}\n */\nconst parseInventoryFilters = ({ filters = [], onSort, query = {} }) =>\n  [...filters].map(filter => {\n    const updatedFilter = { ...filter };\n\n    if (updatedFilter.isSortable) {\n      Object.assign(updatedFilter, applySortFilters({ filter: updatedFilter, onSort, query }));\n    }\n\n    if (updatedFilter.isWrappable) {\n      Object.assign(updatedFilter, applyWrappableFilters({ filter: updatedFilter }));\n    }\n\n    return updatedFilter;\n  });\n\n/**\n * Parse and return formatted/filtered table cells, and apply table filters.\n *\n * @param {object} params\n * @param {Array} params.filters\n * @param {object} params.cellData\n * @param {object} params.session\n * @returns {{columnHeaders: Array, cells: Array, data: object}}\n */\nconst parseRowCellsListData = ({ filters = [], cellData = {}, session = {} }) => {\n  const updatedColumnHeaders = [];\n  const updatedCells = [];\n  const allCells = {};\n\n  // Apply basic translation and value\n  Object.entries(cellData).forEach(([key, value]) => {\n    allCells[key] = {\n      title: translate('curiosity-inventory.header', { context: key }),\n      value\n    };\n\n    updatedColumnHeaders.push(allCells[key].title);\n    updatedCells.push(value);\n  });\n\n  // Apply filters to header and cell values\n  if (filters?.length) {\n    updatedColumnHeaders.length = 0;\n    updatedCells.length = 0;\n\n    filters.forEach(({ id, cell, cellWidth, header, onSort, sortActive, sortDirection, transforms }) => {\n      let headerUpdated;\n      let cellUpdated;\n\n      if (allCells[id]) {\n        headerUpdated = allCells[id]?.title ?? id;\n        cellUpdated = allCells[id]?.value ?? '';\n      } else if (id) {\n        headerUpdated = translate('curiosity-inventory.header', { context: id });\n        cellUpdated = '';\n      }\n\n      // set table header cell filter params\n      if (header) {\n        headerUpdated = (typeof header === 'function' && header({ ...allCells })) || header;\n      }\n\n      if (\n        typeof headerUpdated === 'string' ||\n        typeof headerUpdated === 'number' ||\n        React.isValidElement(headerUpdated)\n      ) {\n        headerUpdated = {\n          title: headerUpdated\n        };\n      }\n\n      if (headerUpdated) {\n        headerUpdated.transforms = [];\n\n        if (Array.isArray(transforms)) {\n          headerUpdated.transforms = headerUpdated.transforms.concat([...transforms]);\n        }\n\n        if (typeof cellWidth === 'number') {\n          headerUpdated.transforms.push(PfCellWidth(cellWidth));\n        }\n      }\n\n      if (typeof onSort === 'function') {\n        headerUpdated = {\n          ...headerUpdated,\n          onSort: obj => onSort({ ...allCells }, { ...obj, id }),\n          sortActive,\n          sortDirection\n        };\n      }\n\n      // set table row cell filter params\n      if (cell) {\n        cellUpdated = (typeof cell === 'function' && cell({ ...allCells }, { ...session })) || cell;\n      }\n\n      if (typeof cellUpdated === 'string' || typeof cellUpdated === 'number' || React.isValidElement(cellUpdated)) {\n        cellUpdated = {\n          title: cellUpdated\n        };\n      }\n\n      updatedColumnHeaders.push(headerUpdated);\n      updatedCells.push(cellUpdated);\n    });\n  }\n\n  return {\n    columnHeaders: updatedColumnHeaders,\n    cells: updatedCells,\n    data: { ...allCells }\n  };\n};\n\nconst inventoryListHelpers = {\n  applySortFilters,\n  applyWrappableFilters,\n  parseInventoryFilters,\n  parseRowCellsListData\n};\n\nexport {\n  inventoryListHelpers as default,\n  inventoryListHelpers,\n  applySortFilters,\n  applyWrappableFilters,\n  parseInventoryFilters,\n  parseRowCellsListData\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TableVariant } from '@patternfly/react-table';\nimport { helpers } from '../../common';\nimport { apiQueries, connect, reduxActions, reduxSelectors } from '../../redux';\nimport { Loader } from '../loader/loader';\nimport { inventoryListHelpers } from '../inventoryList/inventoryListHelpers';\nimport { RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { Table } from '../table/table';\n\n/**\n * ToDo: Consider removing the query prop entirely.\n * The current API doesn't allow setting more than \"offset\" and \"limit\"\n */\n/**\n * ToDo: Review moving the \"onScroll\" layout into a standalone component.\n */\n/**\n * A system inventory guests component.\n *\n * @augments React.Component\n * @fires onUpdateGuestsData\n * @fires onScroll\n */\nclass GuestsList extends React.Component {\n  state = { currentPage: 0, limit: 100, previousData: [] };\n\n  componentDidMount() {\n    this.onUpdateGuestsData();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { currentPage } = this.state;\n\n    if (currentPage !== prevState.currentPage) {\n      this.onUpdateGuestsData();\n    }\n  }\n\n  /**\n   * Call the RHSM APIs, apply filters.\n   *\n   * @event onUpdateGuestsData\n   */\n  onUpdateGuestsData = () => {\n    const { currentPage, limit } = this.state;\n    const { getHostsInventoryGuests, query, id } = this.props;\n\n    if (id) {\n      const updatedQuery = {\n        ...query,\n        [RHSM_API_QUERY_TYPES.LIMIT]: limit,\n        [RHSM_API_QUERY_TYPES.OFFSET]: currentPage * limit || 0\n      };\n\n      const { inventoryGuestsQuery } = apiQueries.parseRhsmQuery(updatedQuery);\n      getHostsInventoryGuests(id, inventoryGuestsQuery);\n    }\n  };\n\n  /**\n   * Update page state.\n   *\n   * @event onScroll\n   * @param {object} event\n   */\n  onScroll = event => {\n    const { target } = event;\n    const { currentPage, limit, previousData } = this.state;\n    const { numberOfGuests, pending, listData } = this.props;\n\n    const bottom = target.scrollHeight - target.scrollTop === target.clientHeight;\n\n    if (numberOfGuests > (currentPage + 1) * limit && bottom && !pending) {\n      const newPage = currentPage + 1;\n      const updatedData = [...previousData, ...(listData || [])];\n\n      this.setState({\n        previousData: updatedData,\n        currentPage: newPage\n      });\n    }\n  };\n\n  renderLoader() {\n    const { currentPage } = this.state;\n    const { filterGuestsData, listData, pending } = this.props;\n\n    if (currentPage > 0 && pending) {\n      const scrollLoader = (\n        <Loader\n          variant=\"table\"\n          tableProps={{\n            borders: false,\n            colCount: filterGuestsData?.length || (listData?.[0] && Object.keys(listData[0]).length) || 1,\n            colWidth: (filterGuestsData?.length && filterGuestsData.map(({ cellWidth }) => cellWidth)) || [],\n            rowCount: 0,\n            variant: TableVariant.compact\n          }}\n        />\n      );\n\n      return <div className=\"curiosity-table-scroll-loader__custom\">{scrollLoader}</div>;\n    }\n\n    return null;\n  }\n\n  /**\n   * ToDo: Consider moving the \"meaning of life\" into the default props on iteration.\n   * For everyone else... move the 42 into default props, possibly the 275.\n   */\n  /**\n   * Render a guests table.\n   *\n   * @returns {Node}\n   */\n  renderTable() {\n    const { previousData } = this.state;\n    const { filterGuestsData, listData, numberOfGuests, session } = this.props;\n    let updatedColumnHeaders = [];\n\n    const updatedRows = [...previousData, ...(listData || [])].map(({ ...cellData }) => {\n      const { columnHeaders, cells } = inventoryListHelpers.parseRowCellsListData({\n        filters: filterGuestsData,\n        cellData,\n        session\n      });\n\n      updatedColumnHeaders = columnHeaders;\n\n      return {\n        cells\n      };\n    });\n\n    // Include the table header\n    let updatedHeight = (numberOfGuests + 1) * 42;\n    updatedHeight = (updatedHeight < 275 && updatedHeight) || 275;\n\n    return (\n      <div className=\"curiosity-table-scroll\" style={{ height: `${updatedHeight}px` }}>\n        <div\n          className={`curiosity-table-scroll-list${(updatedHeight < 275 && '__no-scroll') || ''}`}\n          onScroll={this.onScroll}\n        >\n          {this.renderLoader()}\n          {(updatedRows.length && (\n            <Table\n              borders={false}\n              variant={TableVariant.compact}\n              className=\"curiosity-guests-list\"\n              columnHeaders={updatedColumnHeaders}\n              rows={updatedRows}\n            />\n          )) ||\n            null}\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * Render a guest list table.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { currentPage } = this.state;\n    const { error, filterGuestsData, listData, numberOfGuests, pending, perPageDefault } = this.props;\n\n    return (\n      <div className={`fadein ${(error && 'blur') || ''}`}>\n        {pending && currentPage === 0 && (\n          <Loader\n            variant=\"table\"\n            tableProps={{\n              borders: false,\n              colCount: filterGuestsData?.length || (listData?.[0] && Object.keys(listData[0]).length) || 1,\n              colWidth: (filterGuestsData?.length && filterGuestsData.map(({ cellWidth }) => cellWidth)) || [],\n              rowCount: numberOfGuests < perPageDefault ? numberOfGuests : perPageDefault,\n              variant: TableVariant.compact\n            }}\n          />\n        )}\n        {((!pending && currentPage === 0) || currentPage > 0) && this.renderTable()}\n      </div>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{listData: Array, getHostsInventoryGuests: Function, session: object, filterGuestsData: object,\n *     pending: boolean, query: object, numberOfGuests: number, perPageDefault: number, id: string,\n *     error: boolean}}\n */\nGuestsList.propTypes = {\n  error: PropTypes.bool,\n  filterGuestsData: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      header: PropTypes.oneOfType([\n        PropTypes.shape({\n          title: PropTypes.node.isRequired\n        }),\n        PropTypes.func,\n        PropTypes.node\n      ]),\n      cell: PropTypes.oneOfType([\n        PropTypes.shape({\n          title: PropTypes.node.isRequired\n        }),\n        PropTypes.func,\n        PropTypes.node\n      ])\n    }).isRequired\n  ),\n  getHostsInventoryGuests: PropTypes.func,\n  listData: PropTypes.array,\n  id: PropTypes.string.isRequired,\n  numberOfGuests: PropTypes.number.isRequired,\n  pending: PropTypes.bool,\n  perPageDefault: PropTypes.number,\n  query: PropTypes.object,\n  session: PropTypes.object\n};\n\n/**\n * Default props.\n *\n * @type {{listData: Array, getHostsInventoryGuests: Function, session: object, filterGuestsData: Array,\n *     pending: boolean, query: object, perPageDefault: number, error: boolean}}\n */\nGuestsList.defaultProps = {\n  error: false,\n  filterGuestsData: [],\n  getHostsInventoryGuests: helpers.noop,\n  listData: [],\n  pending: false,\n  perPageDefault: 5,\n  query: {},\n  session: {}\n};\n\n/**\n * Apply actions to props.\n *\n * @param {Function} dispatch\n * @returns {object}\n */\nconst mapDispatchToProps = dispatch => ({\n  getHostsInventoryGuests: (id, query) => dispatch(reduxActions.rhsm.getHostsInventoryGuests(id, query))\n});\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.guestsList.makeGuestsList();\n\nconst ConnectedGuestsList = connect(makeMapStateToProps, mapDispatchToProps)(GuestsList);\n\nexport { ConnectedGuestsList as default, ConnectedGuestsList, GuestsList };\n"],"sourceRoot":""}