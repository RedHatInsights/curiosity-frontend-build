{"version":3,"sources":["components/productView/productViewSatellite.js","components/productView/productView.js"],"names":["ProductViewSatellite","productConfig","routeDetail","defaultProps","query","graphTallyQuery","RHSM_API_QUERY_TYPES","GRANULARITY","GRANULARITY_TYPES","DAILY","START_DATE","dateHelpers","getRangedDateTime","startDate","toISOString","END_DATE","endDate","inventoryHostsQuery","SORT","RHSM_API_QUERY_SORT_TYPES","LAST_SEEN","DIRECTION","SORT_DIRECTION_TYPES","ASCENDING","LIMIT","OFFSET","inventorySubscriptionsQuery","RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES","UPCOMING_EVENT_DATE","initialGraphFilters","id","fill","chartColorBlueLight","value","stroke","chartColorBlueDark","color","chartColorCyanLight","chartColorCyanDark","chartColorPurpleLight","chartColorPurpleDark","initialGuestsFilters","header","translate","context","cell","data","session","displayName","inventoryId","authorized","inventory","isInline","component","variant","target","href","helpers","UI_DEPLOY_PATH_PREFIX","cellWidth","lastSeen","date","initialInventoryFilters","numberOfGuests","updatedDisplayName","Fragment","count","isSortable","cloudProvider","measurementType","isWrappable","initialInventorySettings","initialSubscriptionsInventoryFilters","upcomingEventDate","moment","utc","format","initialToolbarFilters","SLA","USAGE","selected","ProductView","t","toolbarGraph","toolbarProduct","apiQueries","parseRhsmQuery","initialQuery","initialGraphTallyQuery","initialInventoryHostsQuery","initialInventorySubscriptionsQuery","initialToolbarQuery","toolbarQuery","productId","pathParameter","productLabel","productParameter","viewId","viewParameter","includeTour","appName","UI_DISPLAY_NAME","React","isValidElement","filterOptions","filterGraphData","cardTitle","title","filterGuestsData","filterInventoryData","settings","UI_DISABLED_TABLE_SUBSCRIPTIONS","makeMapStateToProps","reduxSelectors","view","makeView","ConnectedProductView","connect"],"mappings":"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","file":"static/js/7.584779d2.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  chart_color_blue_100 as chartColorBlueLight,\n  chart_color_blue_300 as chartColorBlueDark,\n  chart_color_cyan_100 as chartColorCyanLight,\n  chart_color_cyan_300 as chartColorCyanDark,\n  chart_color_purple_100 as chartColorPurpleLight,\n  chart_color_purple_300 as chartColorPurpleDark\n} from '@patternfly/react-tokens';\nimport { Button, Label as PfLabel } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/DateFormat';\nimport moment from 'moment';\nimport {\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_TYPES,\n  RHSM_API_QUERY_SORT_TYPES,\n  RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES\n} from '../../types/rhsmApiTypes';\nimport { ConnectedProductView, ProductView } from './productView';\nimport { translate } from '../i18n/i18n';\nimport { dateHelpers, helpers } from '../../common';\n\n/**\n * A Red Hat Satellite configured view, and related system architectures.\n *\n * @param {object} props\n * @param {object} props.productConfig\n * @param {object} props.routeDetail\n * @returns {Node}\n */\nconst ProductViewSatellite = ({ productConfig, routeDetail }) => (\n  <ConnectedProductView routeDetail={routeDetail} productConfig={productConfig} />\n);\n\n/**\n * Prop types.\n *\n * @type {{routeDetail: object, productConfig:object}}\n */\nProductViewSatellite.propTypes = {\n  productConfig: ProductView.propTypes.productConfig,\n  routeDetail: PropTypes.shape({\n    pathParameter: PropTypes.string,\n    productParameter: PropTypes.string,\n    viewParameter: PropTypes.string\n  }).isRequired\n};\n\n/**\n * Default props.\n *\n * @type {{ productConfig: object }}\n */\nProductViewSatellite.defaultProps = {\n  productConfig: {\n    query: {},\n    graphTallyQuery: {\n      [RHSM_API_QUERY_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY,\n      [RHSM_API_QUERY_TYPES.START_DATE]: dateHelpers.getRangedDateTime(GRANULARITY_TYPES.DAILY).startDate.toISOString(),\n      [RHSM_API_QUERY_TYPES.END_DATE]: dateHelpers.getRangedDateTime(GRANULARITY_TYPES.DAILY).endDate.toISOString()\n    },\n    inventoryHostsQuery: {\n      [RHSM_API_QUERY_TYPES.SORT]: RHSM_API_QUERY_SORT_TYPES.LAST_SEEN,\n      [RHSM_API_QUERY_TYPES.DIRECTION]: SORT_DIRECTION_TYPES.ASCENDING,\n      [RHSM_API_QUERY_TYPES.LIMIT]: 100,\n      [RHSM_API_QUERY_TYPES.OFFSET]: 0\n    },\n    inventorySubscriptionsQuery: {\n      [RHSM_API_QUERY_TYPES.SORT]: RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES.UPCOMING_EVENT_DATE,\n      [RHSM_API_QUERY_TYPES.DIRECTION]: SORT_DIRECTION_TYPES.ASCENDING,\n      [RHSM_API_QUERY_TYPES.LIMIT]: 100,\n      [RHSM_API_QUERY_TYPES.OFFSET]: 0\n    },\n    initialGraphFilters: [\n      {\n        id: 'physicalSockets',\n        fill: chartColorBlueLight.value,\n        stroke: chartColorBlueDark.value,\n        color: chartColorBlueDark.value\n      },\n      {\n        id: 'hypervisorSockets',\n        fill: chartColorCyanLight.value,\n        stroke: chartColorCyanDark.value,\n        color: chartColorCyanDark.value\n      },\n      {\n        id: 'cloudSockets',\n        fill: chartColorPurpleLight.value,\n        stroke: chartColorPurpleDark.value,\n        color: chartColorPurpleDark.value\n      },\n      { id: 'thresholdSockets' }\n    ],\n    initialGuestsFilters: [\n      {\n        id: 'displayName',\n        header: translate('curiosity-inventory.header', { context: 'guestsDisplayName' }),\n        cell: (data, session) => {\n          const { displayName, inventoryId } = data;\n          const { inventory: authorized } = session?.authorized || {};\n\n          if (!inventoryId?.value) {\n            return displayName?.value;\n          }\n\n          if (!authorized) {\n            return displayName?.value || inventoryId?.value;\n          }\n\n          return (\n            <Button\n              isInline\n              component=\"a\"\n              variant=\"link\"\n              target=\"_blank\"\n              href={`${helpers.UI_DEPLOY_PATH_PREFIX}/insights/inventory/${inventoryId.value}/`}\n            >\n              {displayName.value || inventoryId.value}\n            </Button>\n          );\n        }\n      },\n      {\n        id: 'inventoryId',\n        cellWidth: 40\n      },\n      {\n        id: 'lastSeen',\n        cell: data => (data?.lastSeen?.value && <DateFormat date={data?.lastSeen?.value} />) || '',\n        cellWidth: 15\n      }\n    ],\n    initialInventoryFilters: [\n      {\n        id: 'displayName',\n        cell: (data, session) => {\n          const { displayName = {}, inventoryId = {}, numberOfGuests = {} } = data;\n          const { inventory: authorized } = session?.authorized || {};\n\n          if (!inventoryId.value) {\n            return displayName.value;\n          }\n\n          let updatedDisplayName = displayName.value || inventoryId.value;\n\n          if (authorized) {\n            updatedDisplayName = (\n              <Button\n                isInline\n                component=\"a\"\n                variant=\"link\"\n                target=\"_blank\"\n                href={`${helpers.UI_DEPLOY_PATH_PREFIX}/insights/inventory/${inventoryId.value}/`}\n              >\n                {displayName.value || inventoryId.value}\n              </Button>\n            );\n          }\n\n          return (\n            <React.Fragment>\n              {updatedDisplayName}{' '}\n              {(numberOfGuests.value &&\n                translate('curiosity-inventory.label', { context: 'numberOfGuests', count: numberOfGuests.value }, [\n                  <PfLabel color=\"blue\" />\n                ])) ||\n                ''}\n            </React.Fragment>\n          );\n        },\n        isSortable: true\n      },\n      {\n        id: 'measurementType',\n        cell: data => {\n          const { cloudProvider = {}, measurementType = {} } = data;\n          return (\n            <React.Fragment>\n              {translate('curiosity-inventory.measurementType', { context: measurementType.value })}{' '}\n              {(cloudProvider.value && (\n                <PfLabel color=\"purple\">\n                  {translate('curiosity-inventory.cloudProvider', { context: cloudProvider.value })}\n                </PfLabel>\n              )) ||\n                ''}\n            </React.Fragment>\n          );\n        },\n        isSortable: true,\n        cellWidth: 20\n      },\n      {\n        id: 'sockets',\n        isSortable: true,\n        isWrappable: true,\n        cellWidth: 15\n      },\n      {\n        id: 'lastSeen',\n        cell: data => (data?.lastSeen?.value && <DateFormat date={data?.lastSeen?.value} />) || '',\n        isSortable: true,\n        isWrappable: true,\n        cellWidth: 15\n      }\n    ],\n    initialInventorySettings: {},\n    initialSubscriptionsInventoryFilters: [\n      {\n        id: 'productName',\n        isSortable: true\n      },\n      {\n        id: 'serviceLevel',\n        isSortable: true,\n        isWrappable: true,\n        cellWidth: 15\n      },\n      {\n        id: 'upcomingEventDate',\n        cell: data =>\n          (data?.upcomingEventDate?.value && moment.utc(data?.upcomingEventDate?.value).format('YYYY-DD-MM')) || '',\n        isSortable: true,\n        isWrappable: true,\n        cellWidth: 15\n      }\n    ],\n    initialToolbarFilters: [\n      {\n        id: RHSM_API_QUERY_TYPES.SLA\n      },\n      {\n        id: RHSM_API_QUERY_TYPES.USAGE,\n        selected: true\n      }\n    ]\n  }\n};\n\nexport { ProductViewSatellite as default, ProductViewSatellite };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { PageLayout, PageHeader, PageSection, PageToolbar, PageMessages } from '../pageLayout/pageLayout';\nimport { apiQueries, connect, reduxSelectors } from '../../redux';\nimport { ConnectedGraphCard, GraphCard } from '../graphCard/graphCard';\nimport { ConnectedToolbar, Toolbar } from '../toolbar/toolbar';\nimport { ConnectedInventoryList, InventoryList } from '../inventoryList/inventoryList';\nimport { helpers } from '../../common';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport { ToolbarFieldGranularity } from '../toolbar/toolbarFieldGranularity';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport {\n  ConnectedInventorySubscriptions,\n  InventorySubscriptions\n} from '../inventorySubscriptions/inventorySubscriptions';\nimport {\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_SORT_TYPES,\n  RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES,\n  RHSM_API_QUERY_TYPES\n} from '../../types/rhsmApiTypes';\nimport { GuestsList } from '../guestsList/guestsList';\nimport { translate } from '../i18n/i18n';\n\n/**\n * ToDo: base for default product layouts, add additional props for various toolbars\n * Next steps include...\n * Consider being able to pass customized toolbars for GraphCard and the\n * various Inventory displays. Have to evaluate how to handle the global toolbar, one\n * consideration is creating optional widgets with self-contained state update ability\n * based off of context/props/etc.\n *\n * Moving existing products to this layout, or maintaining them \"as is\", then renaming and\n * relocating them to this directory if they've been customized beyond a basic layout.\n */\n/**\n * Display a product.\n *\n * @param {object} props\n * @param {object} props.productConfig\n * @param {object} props.routeDetail\n * @param {Function} props.t\n * @param {Node|boolean} props.toolbarGraph\n * @param {Node|boolean} props.toolbarProduct\n * @returns {Node}\n */\nconst ProductView = ({ productConfig, routeDetail, t, toolbarGraph, toolbarProduct }) => {\n  const {\n    graphTallyQuery,\n    inventoryHostsQuery,\n    inventorySubscriptionsQuery,\n    query,\n    initialToolbarFilters,\n    initialGraphFilters,\n    initialGuestsFilters,\n    initialInventoryFilters,\n    initialInventorySettings,\n    initialSubscriptionsInventoryFilters\n  } = productConfig;\n\n  const {\n    query: initialQuery,\n    graphTallyQuery: initialGraphTallyQuery,\n    inventoryHostsQuery: initialInventoryHostsQuery,\n    inventorySubscriptionsQuery: initialInventorySubscriptionsQuery,\n    toolbarQuery: initialToolbarQuery\n  } = apiQueries.parseRhsmQuery(query, { graphTallyQuery, inventoryHostsQuery, inventorySubscriptionsQuery });\n\n  const { pathParameter: productId, productParameter: productLabel, viewParameter: viewId } = routeDetail;\n\n  if (!productId || !viewId) {\n    return null;\n  }\n\n  return (\n    <PageLayout>\n      <PageHeader productLabel={productLabel} includeTour>\n        {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: productLabel })}\n      </PageHeader>\n      <PageMessages>\n        <BannerMessages productId={productId} viewId={viewId} query={initialQuery} />\n      </PageMessages>\n      <PageToolbar>\n        {(React.isValidElement(toolbarProduct) && toolbarProduct) ||\n          (toolbarProduct !== false && (\n            <ConnectedToolbar\n              filterOptions={initialToolbarFilters}\n              productId={productId}\n              query={initialToolbarQuery}\n              viewId={viewId}\n            />\n          ))}\n      </PageToolbar>\n      <PageSection>\n        <ConnectedGraphCard\n          key={`graph_${productId}`}\n          filterGraphData={initialGraphFilters}\n          query={initialGraphTallyQuery}\n          productId={productId}\n          viewId={viewId}\n          cardTitle={t('curiosity-graph.cardHeading', { context: productLabel })}\n          productLabel={productLabel}\n        >\n          {(React.isValidElement(toolbarGraph) && toolbarGraph) ||\n            (toolbarGraph !== false && (\n              <ToolbarFieldGranularity\n                viewId={viewId}\n                value={initialGraphTallyQuery[RHSM_API_QUERY_TYPES.GRANULARITY]}\n              />\n            ))}\n        </ConnectedGraphCard>\n      </PageSection>\n      <PageSection>\n        <InventoryTabs key={`inventory_${productId}`} productId={productId}>\n          <InventoryTab key={`inventory_hosts_${productId}`} title={t('curiosity-inventory.tab', { context: 'hosts' })}>\n            <ConnectedInventoryList\n              key={productId}\n              filterGuestsData={initialGuestsFilters}\n              filterInventoryData={initialInventoryFilters}\n              productId={productId}\n              settings={initialInventorySettings}\n              query={initialInventoryHostsQuery}\n              viewId={viewId}\n            />\n          </InventoryTab>\n          {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && (\n            <InventoryTab\n              key={`inventory_subs_${productId}`}\n              title={t('curiosity-inventory.tab', { context: 'subscriptions' })}\n            >\n              <ConnectedInventorySubscriptions\n                key={productId}\n                filterInventoryData={initialSubscriptionsInventoryFilters}\n                productId={productId}\n                query={initialInventorySubscriptionsQuery}\n                viewId={viewId}\n              />\n            </InventoryTab>\n          )}\n        </InventoryTabs>\n      </PageSection>\n    </PageLayout>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), routeDetail: object, productConfig: object,\n *     toolbarProduct: (Node|boolean)}}\n */\nProductView.propTypes = {\n  productConfig: PropTypes.shape({\n    graphTallyQuery: PropTypes.shape({\n      [RHSM_API_QUERY_TYPES.GRANULARITY]: PropTypes.oneOf([...Object.values(GRANULARITY_TYPES)]),\n      [RHSM_API_QUERY_TYPES.START_DATE]: PropTypes.string,\n      [RHSM_API_QUERY_TYPES.END_DATE]: PropTypes.string\n    }),\n    inventoryHostsQuery: PropTypes.shape({\n      [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SORT_TYPES)]),\n      [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n    }),\n    inventorySubscriptionsQuery: PropTypes.shape({\n      [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES)]),\n      [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n    }),\n    query: PropTypes.object,\n    initialToolbarFilters: Toolbar.propTypes.filterOptions,\n    initialGraphFilters: GraphCard.propTypes.filterGraphData,\n    initialGuestsFilters: GuestsList.propTypes.filterGuestsData,\n    initialInventoryFilters: InventoryList.propTypes.filterInventoryData,\n    initialInventorySettings: InventoryList.propTypes.settings,\n    initialSubscriptionsInventoryFilters: InventorySubscriptions.propTypes.filterInventoryData\n  }).isRequired,\n  routeDetail: PropTypes.shape({\n    pathParameter: PropTypes.string,\n    productParameter: PropTypes.string,\n    viewParameter: PropTypes.string\n  }).isRequired,\n  t: PropTypes.func,\n  toolbarGraph: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n  toolbarProduct: PropTypes.oneOfType([PropTypes.node, PropTypes.bool])\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), toolbarProduct: (Node|boolean)}}\n */\nProductView.defaultProps = {\n  t: translate,\n  toolbarGraph: null,\n  toolbarProduct: null\n};\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.view.makeView(ProductView.defaultProps);\n\nconst ConnectedProductView = connect(makeMapStateToProps)(ProductView);\n\nexport { ConnectedProductView as default, ConnectedProductView, ProductView };\n"],"sourceRoot":""}