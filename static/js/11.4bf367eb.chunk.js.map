{"version":3,"sources":["components/toolbar/toolbarFieldUom.js","components/productView/productViewOpenShiftContainer.js","components/toolbar/toolbarFieldRangedMonthly.js"],"names":["toolbarFieldOptions","Object","values","FIELD_TYPES","map","type","title","translate","context","value","selected","ToolbarFieldUom","options","t","viewId","updatedValue","useSelector","view","query","RHSM_API_QUERY_TYPES","UOM","updatedOptions","option","aria-label","onSelect","event","store","dispatch","reduxTypes","SET_QUERY_RESET_INVENTORY_LIST","SET_QUERY_RHSM_TYPES","selectedOptions","placeholder","defaultProps","CORES","ProductViewOpenShiftContainer","productConfig","routeDetail","uomValue","viewProductLabel","productParameter","productLabel","includeTour","appName","helpers","UI_DISPLAY_NAME","config","updatedUomValue","productContextFilterUom","graphTallyQuery","inventoryHostsQuery","inventorySubscriptionsQuery","initialGraphFilters","initialGraphSettings","initialGuestsFilters","initialInventoryFilters","initialInventorySettings","initialSubscriptionsInventoryFilters","initialToolbarFilters","productId","uomFilter","apiQueries","parseRhsmQuery","initialGraphTallyQuery","initialInventoryHostsQuery","initialInventorySubscriptionsQuery","toolbarQuery","graphFilters","inventoryFilters","subscriptionsInventoryFilters","filter","id","isOptional","RegExp","test","graphCardTitle","Fragment","Tooltip","content","position","TooltipPosition","top","enableFlip","distance","entryDelay","exitDelay","className","filterOptions","filterGraphData","settings","cardTitle","RHSM_API_PATH_ID_TYPES","OPENSHIFT","GRANULARITY","OPENSHIFT_METRICS","filterGuestsData","filterInventoryData","UI_DISABLED_TABLE_SUBSCRIPTIONS","renderProduct","RHSM_API_QUERY_UOM_TYPES","START_DATE","dateHelpers","getRangedDateTime","GRANULARITY_TYPES","DAILY","startDate","toISOString","END_DATE","endDate","SORT","RHSM_API_QUERY_SORT_TYPES","LAST_SEEN","DIRECTION","SORT_DIRECTION_TYPES","DESCENDING","LIMIT","OFFSET","RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES","UPCOMING_EVENT_DATE","initialOption","fill","chartColorBlueLight","stroke","chartColorBlueDark","color","header","cell","data","session","displayName","inventoryId","authorized","inventory","Button","isInline","component","variant","href","UI_DEPLOY_PATH_PREFIX","cellWidth","lastSeen","DateFormat","date","numberOfGuests","updatedDisplayName","count","isSortable","isWrappable","upcomingEventDate","moment","utc","format","SLA","getRangedMonthDateTime","actionDisplay","displayContent","coreHours","total","forEach","y","numbro","average","mantissa","trimMantissa","lowPrecision","toUpperCase","Number","parseFloat","toFixed","undefined","listDateTimeRanges","dateTime","ToolbarFieldRangedMonthly","SET_QUERY_CLEAR_INVENTORY_LIST","SelectPosition","right","maxHeight"],"mappings":"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","file":"static/js/11.4bf367eb.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, store, useSelector } from '../../redux';\nimport { Select } from '../form/select';\nimport { RHSM_API_QUERY_UOM_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.uom', { context: type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * Display a unit of measure (uom) field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Array} props.options\n * @param {Function} props.t\n * @param {string} props.value\n * @param {string} props.viewId\n * @returns {Node}\n */\nconst ToolbarFieldUom = ({ options, t, value, viewId }) => {\n  const updatedValue = useSelector(({ view }) => view.query?.[viewId]?.[RHSM_API_QUERY_TYPES.UOM], value);\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  /**\n   * On select, dispatch type.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @returns {void}\n   */\n  const onSelect = event =>\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.UOM],\n        viewId,\n        [RHSM_API_QUERY_TYPES.UOM]: event.value\n      }\n    ]);\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: 'uom' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder', { context: 'uom' })}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{viewId: string, t: Function, options: Array, value: string}}\n */\nToolbarFieldUom.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  t: PropTypes.func,\n  value: PropTypes.oneOf([...Object.values(FIELD_TYPES)]),\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{viewId: string, t: translate, options: Array, value: string}}\n */\nToolbarFieldUom.defaultProps = {\n  options: toolbarFieldOptions,\n  t: translate,\n  value: FIELD_TYPES.CORES,\n  viewId: 'toolbarFieldUom'\n};\n\nexport { ToolbarFieldUom as default, ToolbarFieldUom, toolbarFieldOptions };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  chart_color_blue_100 as chartColorBlueLight,\n  chart_color_blue_300 as chartColorBlueDark\n} from '@patternfly/react-tokens';\nimport { Button, Label as PfLabel, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport moment from 'moment';\nimport numbro from 'numbro';\nimport { PageLayout, PageColumns, PageHeader, PageSection, PageToolbar } from '../pageLayout/pageLayout';\nimport {\n  RHSM_API_PATH_ID_TYPES,\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_TYPES,\n  RHSM_API_QUERY_UOM_TYPES,\n  RHSM_API_QUERY_SORT_TYPES,\n  RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES\n} from '../../types/rhsmApiTypes';\nimport { apiQueries, useSelector } from '../../redux';\nimport GraphCard from '../graphCard/graphCard';\nimport { ToolbarFieldUom } from '../toolbar/toolbarFieldUom';\nimport { ToolbarFieldGranularity } from '../toolbar/toolbarFieldGranularity';\nimport { ToolbarFieldRangedMonthly } from '../toolbar/toolbarFieldRangedMonthly';\nimport Toolbar from '../toolbar/toolbar';\nimport InventoryList from '../inventoryList/inventoryList';\nimport InventorySubscriptions from '../inventorySubscriptions/inventorySubscriptions';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport { helpers, dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * An OpenShift Container Platform encompassing view.\n *\n * @param {object} props\n * @param {Array} props.productConfig\n * @param {object} props.routeDetail\n * @param {Function} props.t\n * @returns {Node}\n */\nconst ProductViewOpenShiftContainer = ({ productConfig, routeDetail, t }) => {\n  const uomValue = useSelector(({ view }) => view.query?.[productConfig[0].viewId]?.[RHSM_API_QUERY_TYPES.UOM], null);\n  const { productParameter: viewProductLabel } = routeDetail;\n\n  const renderProduct = (config, updatedUomValue) => {\n    const {\n      productContextFilterUom,\n      query = {},\n      graphTallyQuery = {},\n      inventoryHostsQuery = {},\n      inventorySubscriptionsQuery = {},\n      initialGraphFilters = [],\n      initialGraphSettings = {},\n      initialGuestsFilters = [],\n      initialInventoryFilters = [],\n      initialInventorySettings = {},\n      initialSubscriptionsInventoryFilters,\n      initialToolbarFilters,\n      productLabel,\n      productId,\n      viewId\n    } = config;\n\n    if (!productId || !viewId) {\n      return null;\n    }\n\n    const {\n      graphTallyQuery: initialGraphTallyQuery,\n      inventoryHostsQuery: initialInventoryHostsQuery,\n      inventorySubscriptionsQuery: initialInventorySubscriptionsQuery,\n      toolbarQuery\n    } = apiQueries.parseRhsmQuery(query, { graphTallyQuery, inventoryHostsQuery, inventorySubscriptionsQuery });\n\n    let graphFilters = initialGraphFilters;\n    let inventoryFilters = initialInventoryFilters;\n    let subscriptionsInventoryFilters = initialSubscriptionsInventoryFilters;\n    let uomFilter;\n\n    if (productContextFilterUom) {\n      uomFilter = updatedUomValue || query[RHSM_API_QUERY_TYPES.UOM];\n\n      const filter = ({ id, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(uomFilter, 'i').test(id);\n      };\n\n      graphFilters = initialGraphFilters.filter(filter);\n      inventoryFilters = initialInventoryFilters.filter(filter);\n      subscriptionsInventoryFilters = initialSubscriptionsInventoryFilters.filter(filter);\n    }\n\n    const graphCardTitle = (\n      <React.Fragment>\n        {t('curiosity-graph.cardHeading', { context: productId })}\n        <Tooltip\n          content={<p>{t('curiosity-graph.cardHeadingDescription', { context: productId })}</p>}\n          position={TooltipPosition.top}\n          enableFlip={false}\n          distance={5}\n          entryDelay={100}\n          exitDelay={0}\n        >\n          <sup className=\"curiosity-icon__info\">\n            <InfoCircleIcon />\n          </sup>\n        </Tooltip>\n      </React.Fragment>\n    );\n\n    return (\n      <React.Fragment key={`product_${productId}_${uomFilter}`}>\n        {initialToolbarFilters && (\n          <PageToolbar>\n            <Toolbar filterOptions={initialToolbarFilters} productId={productId} query={toolbarQuery} viewId={viewId} />\n          </PageToolbar>\n        )}\n        <PageSection>\n          <GraphCard\n            key={`graph_${productId}`}\n            filterGraphData={graphFilters}\n            settings={initialGraphSettings}\n            query={initialGraphTallyQuery}\n            productId={productId}\n            viewId={viewId}\n            cardTitle={graphCardTitle}\n            productLabel={productLabel}\n          >\n            {productId === RHSM_API_PATH_ID_TYPES.OPENSHIFT && uomFilter && (\n              <ToolbarFieldUom value={uomFilter} viewId={viewId} />\n            )}\n            {productId === RHSM_API_PATH_ID_TYPES.OPENSHIFT && (\n              <ToolbarFieldGranularity value={graphTallyQuery[RHSM_API_QUERY_TYPES.GRANULARITY]} viewId={viewId} />\n            )}\n            {productId === RHSM_API_PATH_ID_TYPES.OPENSHIFT_METRICS && <ToolbarFieldRangedMonthly viewId={viewId} />}\n          </GraphCard>\n        </PageSection>\n        <PageSection>\n          <InventoryTabs key={`inventory_${productId}`} productId={productId}>\n            <InventoryTab\n              key={`inventory_hosts_${productId}`}\n              title={t('curiosity-inventory.tab', { context: 'hosts' })}\n            >\n              <InventoryList\n                key={`inv_${productId}`}\n                filterGuestsData={initialGuestsFilters}\n                filterInventoryData={inventoryFilters}\n                productId={productId}\n                settings={initialInventorySettings}\n                query={initialInventoryHostsQuery}\n                viewId={viewId}\n              />\n            </InventoryTab>\n            {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && initialSubscriptionsInventoryFilters && (\n              <InventoryTab\n                key={`inventory_subs_${productId}`}\n                title={t('curiosity-inventory.tab', { context: 'subscriptions' })}\n              >\n                <InventorySubscriptions\n                  key={`subs_${productId}`}\n                  filterInventoryData={subscriptionsInventoryFilters}\n                  productId={productId}\n                  query={initialInventorySubscriptionsQuery}\n                  viewId={viewId}\n                />\n              </InventoryTab>\n            )}\n          </InventoryTabs>\n        </PageSection>\n      </React.Fragment>\n    );\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader productLabel={viewProductLabel} includeTour>\n        {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: viewProductLabel })}\n      </PageHeader>\n      <PageColumns>{productConfig.map(config => renderProduct(config, uomValue))}</PageColumns>\n    </PageLayout>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: Function, routeDetail: object, productConfig: Array}}\n */\nProductViewOpenShiftContainer.propTypes = {\n  productConfig: PropTypes.arrayOf(\n    PropTypes.shape({\n      productContextFilterUom: PropTypes.bool,\n      query: PropTypes.shape({\n        [RHSM_API_QUERY_TYPES.START_DATE]: PropTypes.string,\n        [RHSM_API_QUERY_TYPES.END_DATE]: PropTypes.string\n      }),\n      graphTallyQuery: PropTypes.shape({\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: PropTypes.oneOf([...Object.values(GRANULARITY_TYPES)])\n      }),\n      inventoryHostsQuery: PropTypes.shape({\n        [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n        [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n        [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SORT_TYPES)]),\n        [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n      }),\n      inventorySubscriptionsQuery: PropTypes.shape({\n        [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n        [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n        [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES)]),\n        [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n      }),\n      initialOption: PropTypes.oneOf(Object.values(RHSM_API_QUERY_UOM_TYPES)),\n      initialGraphFilters: PropTypes.array,\n      initialGuestsFilters: PropTypes.array,\n      initialInventoryFilters: PropTypes.array,\n      initialInventorySettings: PropTypes.shape({\n        hasGuests: PropTypes.func\n      }),\n      initialSubscriptionsInventoryFilters: PropTypes.array,\n      initialToolbarFilters: PropTypes.array,\n      productLabel: PropTypes.string,\n      productId: PropTypes.string,\n      viewId: PropTypes.string\n    })\n  ),\n  routeDetail: PropTypes.shape({\n    pathParameter: PropTypes.string,\n    productParameter: PropTypes.string,\n    viewParameter: PropTypes.string\n  }).isRequired,\n  t: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: Function, productConfig: Array}}\n */\nProductViewOpenShiftContainer.defaultProps = {\n  productConfig: [\n    {\n      productContextFilterUom: true,\n      query: {\n        [RHSM_API_QUERY_TYPES.UOM]: RHSM_API_QUERY_UOM_TYPES.CORES,\n        [RHSM_API_QUERY_TYPES.START_DATE]: dateHelpers\n          .getRangedDateTime(GRANULARITY_TYPES.DAILY)\n          .startDate.toISOString(),\n        [RHSM_API_QUERY_TYPES.END_DATE]: dateHelpers.getRangedDateTime(GRANULARITY_TYPES.DAILY).endDate.toISOString()\n      },\n      graphTallyQuery: {\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY\n      },\n      inventoryHostsQuery: {\n        [RHSM_API_QUERY_TYPES.SORT]: RHSM_API_QUERY_SORT_TYPES.LAST_SEEN,\n        [RHSM_API_QUERY_TYPES.DIRECTION]: SORT_DIRECTION_TYPES.DESCENDING,\n        [RHSM_API_QUERY_TYPES.LIMIT]: 100,\n        [RHSM_API_QUERY_TYPES.OFFSET]: 0\n      },\n      inventorySubscriptionsQuery: {\n        [RHSM_API_QUERY_TYPES.SORT]: RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES.UPCOMING_EVENT_DATE,\n        [RHSM_API_QUERY_TYPES.DIRECTION]: SORT_DIRECTION_TYPES.DESCENDING,\n        [RHSM_API_QUERY_TYPES.LIMIT]: 100,\n        [RHSM_API_QUERY_TYPES.OFFSET]: 0\n      },\n      initialOption: RHSM_API_QUERY_UOM_TYPES.CORES,\n      initialGraphFilters: [\n        {\n          id: 'cores',\n          isOptional: true,\n          fill: chartColorBlueLight.value,\n          stroke: chartColorBlueDark.value,\n          color: chartColorBlueDark.value\n        },\n        {\n          id: 'sockets',\n          isOptional: true,\n          fill: chartColorBlueLight.value,\n          stroke: chartColorBlueDark.value,\n          color: chartColorBlueDark.value\n        },\n        { id: 'thresholdSockets', isOptional: true },\n        { id: 'thresholdCores', isOptional: true }\n      ],\n      initialGraphSettings: {},\n      initialGuestsFilters: [\n        {\n          id: 'displayName',\n          header: translate('curiosity-inventory.header', { context: 'guestsDisplayName' }),\n          cell: (data, session) => {\n            const { displayName, inventoryId } = data;\n            const { inventory: authorized } = session?.authorized || {};\n\n            if (!inventoryId?.value) {\n              return displayName?.value;\n            }\n\n            if (!authorized) {\n              return displayName?.value || inventoryId?.value;\n            }\n\n            return (\n              <Button\n                isInline\n                component=\"a\"\n                variant=\"link\"\n                href={`${helpers.UI_DEPLOY_PATH_PREFIX}/insights/inventory/${inventoryId.value}/`}\n              >\n                {displayName.value || inventoryId.value}\n              </Button>\n            );\n          }\n        },\n        {\n          id: 'inventoryId',\n          cellWidth: 40\n        },\n        {\n          id: 'lastSeen',\n          cell: data => (data?.lastSeen?.value && <DateFormat date={data?.lastSeen?.value} />) || '',\n          cellWidth: 15\n        }\n      ],\n      initialInventoryFilters: [\n        {\n          id: 'displayName',\n          cell: (data, session) => {\n            const { displayName = {}, inventoryId = {}, numberOfGuests = {} } = data;\n            const { inventory: authorized } = session?.authorized || {};\n\n            if (!inventoryId.value) {\n              return displayName.value;\n            }\n\n            let updatedDisplayName = displayName.value || inventoryId.value;\n\n            if (authorized) {\n              updatedDisplayName = (\n                <Button\n                  isInline\n                  component=\"a\"\n                  variant=\"link\"\n                  href={`${helpers.UI_DEPLOY_PATH_PREFIX}/insights/inventory/${inventoryId.value}/`}\n                >\n                  {displayName.value || inventoryId.value}\n                </Button>\n              );\n            }\n\n            return (\n              <React.Fragment>\n                {updatedDisplayName}{' '}\n                {(numberOfGuests.value &&\n                  translate('curiosity-inventory.label', { context: 'numberOfGuests', count: numberOfGuests.value }, [\n                    <PfLabel color=\"blue\" />\n                  ])) ||\n                  ''}\n              </React.Fragment>\n            );\n          },\n          isSortable: true\n        },\n        {\n          id: 'sockets',\n          header: translate('curiosity-inventory.header', { context: 'sockets_OpenShift Container Platform' }),\n          isOptional: true,\n          isSortable: true,\n          isWrappable: true,\n          cellWidth: 15\n        },\n        {\n          id: 'cores',\n          header: translate('curiosity-inventory.header', { context: 'cores_OpenShift Container Platform' }),\n          isOptional: true,\n          isSortable: true,\n          isWrappable: true,\n          cellWidth: 15\n        },\n        {\n          id: 'lastSeen',\n          cell: data => (data?.lastSeen?.value && <DateFormat date={data?.lastSeen?.value} />) || '',\n          isSortable: true,\n          isWrappable: true,\n          cellWidth: 25\n        }\n      ],\n      initialInventorySettings: {},\n      initialSubscriptionsInventoryFilters: [\n        {\n          id: 'productName',\n          isSortable: true\n        },\n        {\n          id: 'serviceLevel',\n          isSortable: true,\n          isWrappable: true,\n          cellWidth: 15\n        },\n        {\n          id: 'upcomingEventDate',\n          cell: data =>\n            (data?.upcomingEventDate?.value && moment.utc(data?.upcomingEventDate?.value).format('YYYY-DD-MM')) || '',\n          isSortable: true,\n          isWrappable: true,\n          cellWidth: 15\n        }\n      ],\n      initialToolbarFilters: [\n        {\n          id: RHSM_API_QUERY_TYPES.SLA\n        }\n      ],\n      productLabel: 'OpenShift',\n      productId: RHSM_API_PATH_ID_TYPES.OPENSHIFT,\n      viewId: 'viewOpenShift'\n    },\n    {\n      query: {\n        [RHSM_API_QUERY_TYPES.START_DATE]: dateHelpers.getRangedMonthDateTime('current').value.startDate.toISOString(),\n        [RHSM_API_QUERY_TYPES.END_DATE]: dateHelpers.getRangedMonthDateTime('current').value.endDate.toISOString()\n      },\n      graphTallyQuery: {\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY\n      },\n      inventoryHostsQuery: {\n        [RHSM_API_QUERY_TYPES.SORT]: RHSM_API_QUERY_SORT_TYPES.LAST_SEEN,\n        [RHSM_API_QUERY_TYPES.DIRECTION]: SORT_DIRECTION_TYPES.DESCENDING,\n        [RHSM_API_QUERY_TYPES.LIMIT]: 100,\n        [RHSM_API_QUERY_TYPES.OFFSET]: 0\n      },\n      initialGraphFilters: [\n        {\n          id: 'coreHours',\n          fill: chartColorBlueLight.value,\n          stroke: chartColorBlueDark.value,\n          color: chartColorBlueDark.value\n        }\n      ],\n      initialGraphSettings: {\n        actionDisplay: data => {\n          const { coreHours } = data;\n          let displayContent;\n\n          if (coreHours) {\n            let total = 0;\n\n            coreHours.forEach(({ y }) => {\n              total += y ?? 0;\n            });\n\n            displayContent = translate('curiosity-graph.card-action-total', {\n              context: 'coreHours',\n              total: numbro(total)\n                .format({ average: true, mantissa: 2, trimMantissa: true, lowPrecision: false })\n                .toUpperCase()\n            });\n          }\n\n          return <div className=\"curiosity-usage-graph__total\">{displayContent || null}</div>;\n        }\n      },\n      initialInventoryFilters: [\n        {\n          id: 'displayName',\n          cell: data => {\n            const { displayName = {}, inventoryId = {}, numberOfGuests = {} } = data;\n\n            if (!inventoryId.value) {\n              return displayName.value;\n            }\n\n            const updatedDisplayName = displayName.value || inventoryId.value;\n\n            return (\n              <React.Fragment>\n                {updatedDisplayName}{' '}\n                {(numberOfGuests.value &&\n                  translate('curiosity-inventory.label', { context: 'numberOfGuests', count: numberOfGuests.value }, [\n                    <PfLabel color=\"blue\" />\n                  ])) ||\n                  ''}\n              </React.Fragment>\n            );\n          },\n          isSortable: true\n        },\n        {\n          id: 'coreHours',\n          cell: data =>\n            (typeof data?.coreHours?.value === 'number' && Number.parseFloat(data?.coreHours?.value).toFixed(2)) ||\n            `0.00`,\n          isSortable: true,\n          isWrappable: true,\n          cellWidth: 20\n        },\n        {\n          id: 'lastSeen',\n          cell: data => (data?.lastSeen?.value && <DateFormat date={data?.lastSeen?.value} />) || '',\n          isSortable: true,\n          isWrappable: true,\n          cellWidth: 25\n        }\n      ],\n      initialToolbarFilters: undefined,\n      productLabel: 'OpenShift Metric',\n      productId: RHSM_API_PATH_ID_TYPES.OPENSHIFT_METRICS,\n      viewId: 'viewOpenShiftMetric'\n    }\n  ],\n  t: translate\n};\n\nexport { ProductViewOpenShiftContainer as default, ProductViewOpenShiftContainer };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, store, useSelector } from '../../redux';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = dateHelpers.getRangedMonthDateTime().listDateTimeRanges.map(dateTime => ({\n  ...dateTime,\n  selected: false\n}));\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Array} props.options\n * @param {Function} props.t\n * @param {string} props.value\n * @param {string} props.viewId\n * @returns {Node}\n */\nconst ToolbarFieldRangedMonthly = ({ options, t, value, viewId }) => {\n  const updatedValue = useSelector(({ view }) => view.query?.[viewId]?.[RHSM_API_QUERY_TYPES.START_DATE], value);\n\n  const updatedOptions = options.map(option => ({\n    ...option,\n    selected: option.title === updatedValue || option.value.startDate.toISOString() === updatedValue\n  }));\n\n  /**\n   * On select, dispatch type.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @returns {void}\n   */\n  const onSelect = event => {\n    const { startDate, endDate } = event.value;\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: FIELD_TYPES.DAILY\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      }\n    ]);\n  };\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      placeholder={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      position={SelectPosition.right}\n      maxHeight={250}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{viewId: string, t: Function, options: Array, value: string}}\n */\nToolbarFieldRangedMonthly.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  t: PropTypes.func,\n  value: PropTypes.string,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{viewId: string, t: translate, options: Array, value: string}}\n */\nToolbarFieldRangedMonthly.defaultProps = {\n  options: toolbarFieldOptions,\n  t: translate,\n  value: translate('curiosity-toolbar.granularityRange', { context: 'current' }),\n  viewId: 'toolbarFieldRangeGranularity'\n};\n\nexport { ToolbarFieldRangedMonthly as default, ToolbarFieldRangedMonthly, toolbarFieldOptions };\n"],"sourceRoot":""}