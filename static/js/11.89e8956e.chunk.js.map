{"version":3,"sources":["components/productView/productViewMissing.js"],"names":["ProductViewMissing","basePath","products","t","history","useHistory","onClick","path","push","className","productLabel","includeTour","appName","helpers","UI_DISPLAY_NAME","isFilled","hasGutter","basePathDirs","split","updatedProducts","forEach","dir","id","productParameter","isSearchable","navItem","RegExp","test","filteredProducts","Object","values","length","routerConfig","navigation","filter","filterAvailableProducts","map","product","isHoverable","headingLevel","size","context","pathParameter","variant","isInline","icon","iconPosition","defaultProps","routerHelpers","translate"],"mappings":"+XAoBMA,EAAqB,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,SAAUC,EAAQ,EAARA,EAC1CC,EAAUC,cA0CVC,EAAU,SAAAC,GAAI,OAAIH,EAAQI,KAAKD,IAErC,OACE,eAAC,IAAD,CAAYE,UAAU,yBAAtB,UACE,cAAC,IAAD,CAAYC,aAAa,UAAUC,aAAW,EAA9C,SACGR,EAAE,uBAAwB,CAAES,QAASC,IAAQC,oBAEhD,cAAC,IAAD,CAAaC,UAAQ,EAArB,SACE,cAAC,IAAD,CAASC,WAAS,EAAlB,SA3C0B,WAC9B,IAAMC,EAAehB,EAASiB,MAAM,KAC9BC,EAAkB,GAExBF,EAAaG,SAAQ,SAAAC,GACfA,GACFnB,EAASkB,SAAQ,YAAyD,IAAtDE,EAAqD,EAArDA,GAAIC,EAAiD,EAAjDA,iBAAkBC,EAA+B,EAA/BA,aAAiBC,EAAc,wDACnED,GAAgB,IAAIE,OAAOL,EAAK,KAAKM,KAAKJ,KAC5CJ,EAAgBG,GAAhB,aACEA,KACAC,mBACAC,gBACGC,UAOb,IAAMG,EAAmBC,OAAOC,OAAOX,GACvC,OACGS,EAAiBG,QAAUH,GAC5BI,IAAaC,WAAWC,QACtB,gBAAGV,EAAH,EAAGA,aAAcD,EAAjB,EAAiBA,iBAAjB,OAAyCC,GAAgBD,IAAqB,KAqB3EY,GAA0BC,KAAI,SAAAC,GAAO,OACpC,eAAC,IAAD,CAAuBC,aAAW,EAAChC,QAAS,kBAAMA,EAAQ+B,EAAQ9B,OAAlE,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOgC,aAAa,KAAKC,KAAK,KAA9B,SACGrC,EAAE,uBAAwB,CAAES,QAASC,IAAQC,gBAAiB2B,QAASJ,EAAQK,oBAGpF,cAAC,IAAD,CAAUjC,UAAU,2CAApB,SACGN,EAAE,6BAA8B,CAC/BS,QAASC,IAAQC,gBACjB2B,QAASJ,EAAQd,qBAGrB,cAAC,IAAD,UACE,cAAC,IAAD,CACEoB,QAAQ,OACRC,UAAQ,EACRtC,QAAS,kBAAMA,EAAQ+B,EAAQ9B,OAC/BsC,KAAM,cAAC,IAAD,IACNC,aAAa,QALf,sBAbOT,EAAQf,eAuD/BtB,EAAmB+C,aAAe,CAChC9C,SAAU+C,IAAc/C,SACxBC,SAAU8B,IAAaC,WACvB9B,EAAG8C","file":"static/js/11.89e8956e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Card, CardBody, CardFooter, CardTitle, Gallery, Title, PageSection } from '@patternfly/react-core';\nimport { ArrowRightIcon } from '@patternfly/react-icons';\nimport { useHistory } from 'react-router-dom';\nimport { PageLayout, PageHeader } from '../pageLayout/pageLayout';\nimport { routerConfig, routerHelpers } from '../router/router';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Render a missing product view.\n *\n * @fires onClick\n * @param {object} props\n * @param {string} props.basePath\n * @param {Array} props.products\n * @param {Function} props.t\n * @returns {Node}\n */\nconst ProductViewMissing = ({ basePath, products, t }) => {\n  const history = useHistory();\n\n  /**\n   * Return a list of available products.\n   *\n   * @returns {Array}\n   */\n  const filterAvailableProducts = () => {\n    const basePathDirs = basePath.split('/');\n    const updatedProducts = {};\n\n    basePathDirs.forEach(dir => {\n      if (dir) {\n        products.forEach(({ id, productParameter, isSearchable, ...navItem }) => {\n          if (isSearchable && new RegExp(dir, 'i').test(productParameter)) {\n            updatedProducts[id] = {\n              id,\n              productParameter,\n              isSearchable,\n              ...navItem\n            };\n          }\n        });\n      }\n    });\n\n    const filteredProducts = Object.values(updatedProducts);\n    return (\n      (filteredProducts.length && filteredProducts) ||\n      routerConfig.navigation.filter(\n        ({ isSearchable, productParameter }) => (isSearchable && productParameter) || false\n      )\n    );\n  };\n\n  /**\n   * On click, update history.\n   *\n   * @event onUpdateHistory\n   * @param {string} path\n   * @returns {void}\n   */\n  const onClick = path => history.push(path);\n\n  return (\n    <PageLayout className=\"curiosity-missing-view\">\n      <PageHeader productLabel=\"missing\" includeTour>\n        {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME })}\n      </PageHeader>\n      <PageSection isFilled>\n        <Gallery hasGutter>\n          {filterAvailableProducts().map(product => (\n            <Card key={product.id} isHoverable onClick={() => onClick(product.path)}>\n              <CardTitle>\n                <Title headingLevel=\"h2\" size=\"lg\">\n                  {t('curiosity-view.title', { appName: helpers.UI_DISPLAY_NAME, context: product.pathParameter })}\n                </Title>\n              </CardTitle>\n              <CardBody className=\"curiosity-missing-view__card-description\">\n                {t('curiosity-view.description', {\n                  appName: helpers.UI_DISPLAY_NAME,\n                  context: product.productParameter\n                })}\n              </CardBody>\n              <CardFooter>\n                <Button\n                  variant=\"link\"\n                  isInline\n                  onClick={() => onClick(product.path)}\n                  icon={<ArrowRightIcon />}\n                  iconPosition=\"right\"\n                >\n                  Open\n                </Button>\n              </CardFooter>\n            </Card>\n          ))}\n        </Gallery>\n      </PageSection>\n    </PageLayout>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: Function}}\n */\nProductViewMissing.propTypes = {\n  basePath: PropTypes.string,\n  products: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      isSearchable: PropTypes.bool.isRequired,\n      path: PropTypes.string.isRequired,\n      pathParameter: PropTypes.string,\n      productParameter: PropTypes.string.isRequired\n    })\n  ),\n  t: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate}}\n */\nProductViewMissing.defaultProps = {\n  basePath: routerHelpers.basePath,\n  products: routerConfig.navigation,\n  t: translate\n};\n\nexport { ProductViewMissing as default, ProductViewMissing };\n"],"sourceRoot":""}