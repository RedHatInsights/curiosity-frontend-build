{"version":3,"sources":["components/form/select.js","components/toolbar/toolbarHelpers.js","../../../../../src/components/Toolbar/ToolbarFilter.tsx","../../../../../src/components/Toolbar/ToolbarExpandableContent.tsx","../../../../../src/components/Toolbar/ToolbarContent.tsx","../../../../../src/components/Toolbar/ToolbarToggleGroup.tsx","../node_modules/@patternfly/react-icons/dist/esm/icons/filter-icon.js","components/toolbar/toolbar.js"],"names":["SelectDirection","DropdownDirection","SelectPosition","DropdownPosition","Select","state","isExpanded","options","selected","onSelect","event","titleSelection","props","id","name","variant","updatedOptions","optionsIndex","findIndex","option","title","SelectVariant","single","forEach","index","updateSelected","filter","opt","map","setState","mockUpdatedOptions","_cloneDeep","mockTarget","value","selectedIndex","type","checkbox","checked","mockEvent","target","currentTarget","persist","helpers","noop","onToggle","expanded","this","formatOptions","prevProps","selectedOptions","_isEqual","_isPlainObject","Object","keys","key","activateOptions","convertedOption","text","textContent","label","isSelected","_findIndex","find","activeOption","values","includes","ariaLabel","className","direction","isDisabled","isToggleText","maxHeight","placeholder","position","toggleIcon","pfSelectOptions","length","right","aria-label","selections","isOpen","placeholderText","window","btoa","data-value","JSON","stringify","data-title","React","Component","defaultProps","down","generateId","left","getOptionsType","optionsType","RHSM_API_QUERY_TYPES","SLA","translate","SLA_TYPES","PREMIUM","STANDARD","SELF","NONE","USAGE","USAGE_TYPES","DEVELOPMENT","DISASTER","PRODUCTION","UNSPECIFIED","context","toolbarHelpers","getOptions","ToolbarFilter","FilterIcon","createIcon","height","width","svgPath","yOffset","xOffset","Toolbar","onClear","hardFilterReset","dispatchActions","reduxTypes","toolbar","SET_ACTIVE_FILTERS","data","activeFilters","Set","query","SET_QUERY_CLEAR","clearFilters","push","SET_FILTER_TYPE","currentFilter","setDispatch","onClearFilter","categoryTitle","categoryValue","updatedActiveFilters","delete","updatedCurrentFilter","size","onCategorySelect","field","add","SET_QUERY_RHSM_TYPES","actions","resetPage","viewId","updatedActions","Array","isArray","SET_QUERY_RESET_INVENTORY_LIST","store","dispatch","getCurrentFilter","optionsSelected","filterOptions","t","setSelectFilter","chips","deleteChip","categoryName","showToolbarItem","categoryOptions","categoryOptionsSelected","collapseListedFiltersBreakpoint","clearAllFilters","clearFiltersButtonText","breakpoint","ToolbarGroup","ToolbarItem","renderSelectFilter","filterType","UI_DISABLED_TOOLBAR","ConnectedToolbar","connect","view","initialQuery","filters"],"mappings":"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","file":"static/js/22.7221371e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  DropdownDirection,\n  DropdownPosition,\n  Select as PfSelect,\n  SelectOption as PfSelectOption,\n  SelectVariant\n} from '@patternfly/react-core';\nimport _cloneDeep from 'lodash/cloneDeep';\nimport _isEqual from 'lodash/isEqual';\nimport _findIndex from 'lodash/findIndex';\nimport _isPlainObject from 'lodash/isPlainObject';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Pass direction as select component variant option.\n *\n * @type {DropdownDirection}\n */\nconst SelectDirection = DropdownDirection;\n\n/**\n * Pass position as select component variant option.\n *\n * @type {DropdownPosition}\n */\nconst SelectPosition = DropdownPosition;\n\n/**\n * A wrapper for Patternfly Select. Provides restructured event data for onSelect callback.\n *\n * @augments React.Component\n * @fires onSelect\n * @fires onToggle\n */\nclass Select extends React.Component {\n  state = { isExpanded: false, options: null, selected: null };\n\n  componentDidMount() {\n    const { options } = this.state;\n\n    if (options === null) {\n      this.formatOptions();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { options, selectedOptions } = this.props;\n\n    if (!_isEqual(prevProps.options, options) || !_isEqual(prevProps.selectedOptions, selectedOptions)) {\n      this.formatOptions();\n    }\n  }\n\n  /**\n   * Emulate select event object, apply to provided onSelect prop.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @param {string} titleSelection\n   */\n  onSelect = (event, titleSelection) => {\n    const { options } = this.state;\n    const { id, name, onSelect, variant } = this.props;\n\n    const updatedOptions = options;\n    const optionsIndex = updatedOptions.findIndex(option => option.title === titleSelection);\n    updatedOptions[optionsIndex].selected =\n      variant === SelectVariant.single ? true : !updatedOptions[optionsIndex].selected;\n\n    if (variant === SelectVariant.single) {\n      updatedOptions.forEach((option, index) => {\n        if (optionsIndex !== index) {\n          updatedOptions[index].selected = false;\n        }\n      });\n    }\n\n    const updateSelected =\n      variant === SelectVariant.single\n        ? titleSelection\n        : updatedOptions.filter(opt => opt.selected === true).map(opt => opt.title);\n\n    this.setState(\n      {\n        options: updatedOptions,\n        selected: updateSelected\n      },\n      () => {\n        const mockUpdatedOptions = _cloneDeep(updatedOptions);\n\n        const mockTarget = {\n          id,\n          name: name || id,\n          value: mockUpdatedOptions[optionsIndex].value,\n          selected:\n            (variant === SelectVariant.single && mockUpdatedOptions[optionsIndex]) || _cloneDeep(updateSelected),\n          selectedIndex: optionsIndex,\n          type: `select-${(variant === SelectVariant.single && 'one') || 'multiple'}`,\n          options: mockUpdatedOptions\n        };\n\n        if (variant === SelectVariant.checkbox) {\n          mockTarget.checked = mockUpdatedOptions[optionsIndex].selected;\n        }\n\n        const mockEvent = {\n          ...mockTarget,\n          target: { ...mockTarget },\n          currentTarget: { ...mockTarget },\n          persist: helpers.noop\n        };\n\n        onSelect({ ...mockEvent }, optionsIndex, mockUpdatedOptions);\n\n        if (variant === SelectVariant.single) {\n          this.setState({\n            isExpanded: false\n          });\n        }\n      }\n    );\n  };\n\n  /**\n   * Patternfly Select's open/closed state.\n   *\n   * @event onToggle\n   * @param {boolean} expanded\n   */\n  onToggle = expanded => {\n    this.setState({\n      isExpanded: expanded\n    });\n  };\n\n  /**\n   * Format options into a consumable array of objects format.\n   */\n  formatOptions() {\n    const { options, selectedOptions, variant } = this.props;\n    const updatedOptions = _isPlainObject(options)\n      ? Object.keys(options).map(key => ({ ...options[key], title: key, value: options[key] }))\n      : _cloneDeep(options);\n\n    const activateOptions =\n      (selectedOptions && typeof selectedOptions === 'string') || typeof selectedOptions === 'number'\n        ? [selectedOptions]\n        : selectedOptions;\n\n    updatedOptions.forEach((option, index) => {\n      let convertedOption = option;\n\n      if (typeof convertedOption === 'string') {\n        convertedOption = {\n          title: option,\n          value: option\n        };\n\n        updatedOptions[index] = convertedOption;\n      }\n\n      convertedOption.text = convertedOption.text || convertedOption.title;\n      convertedOption.textContent = convertedOption.textContent || convertedOption.title;\n      convertedOption.label = convertedOption.label || convertedOption.title;\n\n      if (activateOptions) {\n        let isSelected;\n\n        if (_isPlainObject(convertedOption.value)) {\n          isSelected = _findIndex(activateOptions, convertedOption.value) > -1;\n\n          if (!isSelected) {\n            const tempSearch = activateOptions.find(activeOption =>\n              Object.values(convertedOption.value).includes(activeOption)\n            );\n            isSelected = !!tempSearch;\n          }\n        } else {\n          isSelected = activateOptions.includes(convertedOption.value);\n        }\n\n        if (!isSelected) {\n          isSelected = activateOptions.includes(convertedOption.title);\n        }\n\n        updatedOptions[index].selected = isSelected;\n      }\n    });\n\n    let updateSelected;\n\n    if (variant === SelectVariant.single) {\n      updateSelected = (updatedOptions.find(opt => opt.selected === true) || {}).title;\n    } else {\n      updateSelected = updatedOptions.filter(opt => opt.selected === true).map(opt => opt.title);\n    }\n\n    this.setState({\n      options: updatedOptions,\n      selected: updateSelected\n    });\n  }\n\n  /**\n   * Render a select/dropdown list.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { options, selected, isExpanded } = this.state;\n    const {\n      ariaLabel,\n      className,\n      direction,\n      isDisabled,\n      isToggleText,\n      maxHeight,\n      placeholder,\n      position,\n      toggleIcon,\n      variant\n    } = this.props;\n\n    const pfSelectOptions = {\n      direction,\n      maxHeight\n    };\n\n    // FixMe: investigate \"isDisabled\", PFReact quirks?\n    if (!options || !options.length || isDisabled) {\n      pfSelectOptions.isDisabled = true;\n    }\n\n    /**\n     * FixMe: PFReact quirks around PfSelect, requires children\n     * \"Null\" is a typical fallback we use across the board on a multitude of React apps.\n     * In this case \"null\" is a fallback for scenarios where an \"undefined\" list is passed\n     * during initial mount. Converted to an empty list/array \"[]\" to compensate.\n     */\n    /**\n     * Note: PFReact missing select border on compile\n     * Related https://github.com/patternfly/patternfly-react/issues/5650 and\n     * https://github.com/cssnano/cssnano/issues/1051\n     */\n    return (\n      <PfSelect\n        className={`curiosity-select${(!isToggleText && '__no-toggle-text') || ''} ${\n          (position === DropdownPosition.right && 'curiosity-select__position-right') || ''\n        } ${className}`}\n        variant={variant}\n        aria-label={ariaLabel}\n        onToggle={this.onToggle}\n        onSelect={this.onSelect}\n        selections={selected}\n        isOpen={isExpanded}\n        toggleIcon={toggleIcon}\n        placeholderText={placeholder}\n        {...pfSelectOptions}\n      >\n        {(options &&\n          options.map(option => (\n            <PfSelectOption\n              key={window.btoa(`${option.title}-${option.value}`)}\n              id={window.btoa(`${option.title}-${option.value}`)}\n              value={option.title}\n              data-value={(_isPlainObject(option.value) && JSON.stringify([option.value])) || option.value}\n              data-title={option.title}\n            />\n          ))) ||\n          []}\n      </PfSelect>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{toggleIcon: (Node|Function), className: string, ariaLabel: string, onSelect: Function,\n *     isToggleText: boolean, maxHeight: number, name: string, options: (Array|object),\n *     selectedOptions: (number|string|Array), variant: string, id: string, isDisabled: boolean,\n *     placeholder: string, position: string, direction: string}}\n */\nSelect.propTypes = {\n  ariaLabel: PropTypes.string,\n  className: PropTypes.string,\n  direction: PropTypes.oneOf(Object.values(SelectDirection)),\n  id: PropTypes.string,\n  isDisabled: PropTypes.bool,\n  isToggleText: PropTypes.bool,\n  maxHeight: PropTypes.number,\n  name: PropTypes.string,\n  onSelect: PropTypes.func,\n  options: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.string),\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.any,\n        value: PropTypes.any.isRequired,\n        selected: PropTypes.bool\n      })\n    ),\n    PropTypes.shape({\n      title: PropTypes.any,\n      value: PropTypes.any.isRequired,\n      selected: PropTypes.bool\n    }),\n    PropTypes.object\n  ]),\n  placeholder: PropTypes.string,\n  position: PropTypes.oneOf(Object.values(SelectPosition)),\n  selectedOptions: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]))\n  ]),\n  toggleIcon: PropTypes.element,\n  variant: PropTypes.oneOf([...Object.values(SelectVariant)])\n};\n\n/**\n * Default props.\n *\n * @type {{toggleIcon: (Node|Function), className: string, ariaLabel: string, onSelect: Function, isToggleText: boolean,\n *     maxHeight: number, name: string, options: (Array|object), selectedOptions: (number|string|Array),\n *     variant: SelectVariant.single, id: string, isDisabled: boolean, placeholder: string,\n *     position: DropdownPosition.left, direction: DropdownDirection.down}}\n */\nSelect.defaultProps = {\n  ariaLabel: 'Select option',\n  className: '',\n  direction: SelectDirection.down,\n  id: helpers.generateId(),\n  isDisabled: false,\n  isToggleText: true,\n  maxHeight: null,\n  name: null,\n  onSelect: helpers.noop,\n  options: [],\n  placeholder: 'Select option',\n  position: SelectPosition.left,\n  selectedOptions: null,\n  toggleIcon: null,\n  variant: SelectVariant.single\n};\n\nexport { Select as default, Select, SelectDirection, SelectPosition };\n","import { translate } from '../i18n/i18n';\nimport {\n  RHSM_API_QUERY_TYPES,\n  RHSM_API_QUERY_SLA_TYPES as SLA_TYPES,\n  RHSM_API_QUERY_USAGE_TYPES as USAGE_TYPES\n} from '../../types/rhsmApiTypes';\n\n/**\n * Get filter options to display by type.\n *\n * @param {string} optionsType\n * @returns {object}\n */\nconst getOptionsType = optionsType => {\n  switch (optionsType) {\n    case RHSM_API_QUERY_TYPES.SLA:\n      return {\n        selected: null,\n        options: [\n          {\n            title: translate('curiosity-toolbar.slaPremium'),\n            value: SLA_TYPES.PREMIUM\n          },\n          {\n            title: translate('curiosity-toolbar.slaStandard'),\n            value: SLA_TYPES.STANDARD\n          },\n          {\n            title: translate('curiosity-toolbar.slaSelfSupport'),\n            value: SLA_TYPES.SELF\n          },\n          {\n            title: translate('curiosity-toolbar.slaNone'),\n            value: SLA_TYPES.NONE\n          }\n        ]\n      };\n    case RHSM_API_QUERY_TYPES.USAGE:\n      return {\n        selected: null,\n        options: [\n          {\n            title: translate('curiosity-toolbar.usageDevelopment'),\n            value: USAGE_TYPES.DEVELOPMENT\n          },\n          {\n            title: translate('curiosity-toolbar.usageDisaster'),\n            value: USAGE_TYPES.DISASTER\n          },\n          {\n            title: translate('curiosity-toolbar.usageProduction'),\n            value: USAGE_TYPES.PRODUCTION\n          },\n          {\n            title: translate('curiosity-toolbar.usageUnspecified'),\n            value: USAGE_TYPES.UNSPECIFIED\n          }\n        ]\n      };\n    default:\n      return {\n        selected: null,\n        options: [\n          {\n            title: translate('curiosity-toolbar.category', { context: RHSM_API_QUERY_TYPES.SLA }),\n            value: RHSM_API_QUERY_TYPES.SLA\n          },\n          {\n            title: translate('curiosity-toolbar.category', { context: RHSM_API_QUERY_TYPES.USAGE }),\n            value: RHSM_API_QUERY_TYPES.USAGE\n          }\n        ]\n      };\n  }\n};\n\nconst toolbarHelpers = {\n  getOptions: getOptionsType\n};\n\nexport { toolbarHelpers as default, toolbarHelpers, getOptionsType };\n","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { ToolbarItem } from './ToolbarItem';\nimport { ChipGroup, Chip } from '../ChipGroup';\nimport { ToolbarContentContext, ToolbarContext } from './ToolbarUtils';\nexport class ToolbarFilter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isMounted: false\n        };\n    }\n    componentDidMount() {\n        const { categoryName, chips } = this.props;\n        this.context.updateNumberFilters(typeof categoryName === 'string' ? categoryName : categoryName.name, chips.length);\n        this.setState({ isMounted: true });\n    }\n    componentDidUpdate() {\n        const { categoryName, chips } = this.props;\n        this.context.updateNumberFilters(typeof categoryName === 'string' ? categoryName : categoryName.name, chips.length);\n    }\n    render() {\n        const _a = this.props, { children, chips, deleteChipGroup, deleteChip, categoryName, showToolbarItem } = _a, props = __rest(_a, [\"children\", \"chips\", \"deleteChipGroup\", \"deleteChip\", \"categoryName\", \"showToolbarItem\"]);\n        const { isExpanded, chipGroupContentRef } = this.context;\n        const categoryKey = typeof categoryName !== 'string' && categoryName.hasOwnProperty('key')\n            ? categoryName.key\n            : categoryName.toString();\n        const chipGroup = chips.length ? (React.createElement(ToolbarItem, { variant: \"chip-group\" },\n            React.createElement(ChipGroup, { key: categoryKey, categoryName: typeof categoryName === 'string' ? categoryName : categoryName.name, isClosable: deleteChipGroup !== undefined, onClick: () => deleteChipGroup(categoryName) }, chips.map(chip => typeof chip === 'string' ? (React.createElement(Chip, { key: chip, onClick: () => deleteChip(categoryKey, chip) }, chip)) : (React.createElement(Chip, { key: chip.key, onClick: () => deleteChip(categoryKey, chip) }, chip.node)))))) : null;\n        if (!isExpanded && this.state.isMounted) {\n            return (React.createElement(React.Fragment, null,\n                showToolbarItem && React.createElement(ToolbarItem, Object.assign({}, props), children),\n                ReactDOM.createPortal(chipGroup, chipGroupContentRef.current.firstElementChild)));\n        }\n        return (React.createElement(ToolbarContentContext.Consumer, null, ({ chipContainerRef }) => (React.createElement(React.Fragment, null,\n            showToolbarItem && React.createElement(ToolbarItem, Object.assign({}, props), children),\n            chipContainerRef.current && ReactDOM.createPortal(chipGroup, chipContainerRef.current)))));\n    }\n}\nToolbarFilter.displayName = 'ToolbarFilter';\nToolbarFilter.contextType = ToolbarContext;\nToolbarFilter.defaultProps = {\n    chips: [],\n    showToolbarItem: true\n};\n//# sourceMappingURL=ToolbarFilter.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarGroup } from './ToolbarGroup';\nimport { ToolbarItem } from './ToolbarItem';\nimport { Button } from '../Button';\nimport { ToolbarContext } from './ToolbarUtils';\nexport class ToolbarExpandableContent extends React.Component {\n    render() {\n        const _a = this.props, { className, expandableContentRef, chipContainerRef, \n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        isExpanded, clearAllFilters, clearFiltersButtonText, showClearFiltersButton } = _a, props = __rest(_a, [\"className\", \"expandableContentRef\", \"chipContainerRef\", \"isExpanded\", \"clearAllFilters\", \"clearFiltersButtonText\", \"showClearFiltersButton\"]);\n        const { numberOfFilters } = this.context;\n        const clearChipGroups = () => {\n            clearAllFilters();\n        };\n        return (React.createElement(\"div\", Object.assign({ className: css(styles.toolbarExpandableContent, className), ref: expandableContentRef }, props),\n            React.createElement(ToolbarGroup, null),\n            numberOfFilters > 0 && (React.createElement(ToolbarGroup, { className: styles.modifiers.chipContainer },\n                React.createElement(ToolbarGroup, { ref: chipContainerRef }),\n                showClearFiltersButton && (React.createElement(ToolbarItem, null,\n                    React.createElement(Button, { variant: \"link\", onClick: clearChipGroups, isInline: true }, clearFiltersButtonText)))))));\n    }\n}\nToolbarExpandableContent.displayName = 'ToolbarExpandableContent';\nToolbarExpandableContent.contextType = ToolbarContext;\nToolbarExpandableContent.defaultProps = {\n    isExpanded: false,\n    clearFiltersButtonText: 'Clear all filters'\n};\n//# sourceMappingURL=ToolbarExpandableContent.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContentContext, ToolbarContext } from './ToolbarUtils';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { ToolbarExpandableContent } from './ToolbarExpandableContent';\nexport class ToolbarContent extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.expandableContentRef = React.createRef();\n        this.chipContainerRef = React.createRef();\n    }\n    render() {\n        const _a = this.props, { className, children, isExpanded, toolbarId, visibility, visiblity, alignment, clearAllFilters, showClearFiltersButton, clearFiltersButtonText } = _a, props = __rest(_a, [\"className\", \"children\", \"isExpanded\", \"toolbarId\", \"visibility\", \"visiblity\", \"alignment\", \"clearAllFilters\", \"showClearFiltersButton\", \"clearFiltersButtonText\"]);\n        if (visiblity !== undefined) {\n            // eslint-disable-next-line no-console\n            console.warn('The ToolbarContent visiblity prop has been deprecated. ' +\n                'Please use the correctly spelled visibility prop instead.');\n        }\n        return (React.createElement(\"div\", Object.assign({ className: css(styles.toolbarContent, formatBreakpointMods(visibility || visiblity, styles), formatBreakpointMods(alignment, styles), className) }, props),\n            React.createElement(ToolbarContext.Consumer, null, ({ clearAllFilters: clearAllFiltersContext, clearFiltersButtonText: clearFiltersButtonContext, showClearFiltersButton: showClearFiltersButtonContext, toolbarId: toolbarIdContext }) => {\n                const expandableContentId = `${toolbarId ||\n                    toolbarIdContext}-expandable-content-${ToolbarContent.currentId++}`;\n                return (React.createElement(ToolbarContentContext.Provider, { value: {\n                        expandableContentRef: this.expandableContentRef,\n                        expandableContentId,\n                        chipContainerRef: this.chipContainerRef\n                    } },\n                    React.createElement(\"div\", { className: css(styles.toolbarContentSection) }, children),\n                    React.createElement(ToolbarExpandableContent, { id: expandableContentId, isExpanded: isExpanded, expandableContentRef: this.expandableContentRef, chipContainerRef: this.chipContainerRef, clearAllFilters: clearAllFilters || clearAllFiltersContext, showClearFiltersButton: showClearFiltersButton || showClearFiltersButtonContext, clearFiltersButtonText: clearFiltersButtonText || clearFiltersButtonContext })));\n            })));\n    }\n}\nToolbarContent.displayName = 'ToolbarContent';\nToolbarContent.currentId = 0;\nToolbarContent.defaultProps = {\n    isExpanded: false,\n    showClearFiltersButton: false\n};\n//# sourceMappingURL=ToolbarContent.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContext, ToolbarContentContext } from './ToolbarUtils';\nimport { Button } from '../Button';\nimport globalBreakpointLg from \"@patternfly/react-tokens/dist/esm/global_breakpoint_lg\";\nimport { formatBreakpointMods, toCamel, capitalize, canUseDOM } from '../../helpers/util';\nexport class ToolbarToggleGroup extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.isContentPopup = () => {\n            const viewportSize = canUseDOM ? window.innerWidth : 1200;\n            const lgBreakpointValue = parseInt(globalBreakpointLg.value);\n            return viewportSize < lgBreakpointValue;\n        };\n    }\n    render() {\n        const _a = this.props, { toggleIcon, variant, visibility, visiblity, breakpoint, alignment, spacer, spaceItems, className, children } = _a, props = __rest(_a, [\"toggleIcon\", \"variant\", \"visibility\", \"visiblity\", \"breakpoint\", \"alignment\", \"spacer\", \"spaceItems\", \"className\", \"children\"]);\n        if (!breakpoint && !toggleIcon) {\n            // eslint-disable-next-line no-console\n            console.error('ToolbarToggleGroup will not be visible without a breakpoint or toggleIcon.');\n        }\n        if (visiblity !== undefined) {\n            // eslint-disable-next-line no-console\n            console.warn('The ToolbarToggleGroup visiblity prop has been deprecated. ' +\n                'Please use the correctly spelled visibility prop instead.');\n        }\n        return (React.createElement(ToolbarContext.Consumer, null, ({ isExpanded, toggleIsExpanded }) => (React.createElement(ToolbarContentContext.Consumer, null, ({ expandableContentRef, expandableContentId }) => {\n            if (expandableContentRef.current && expandableContentRef.current.classList) {\n                if (isExpanded) {\n                    expandableContentRef.current.classList.add(styles.modifiers.expanded);\n                }\n                else {\n                    expandableContentRef.current.classList.remove(styles.modifiers.expanded);\n                }\n            }\n            return (React.createElement(\"div\", Object.assign({ className: css(styles.toolbarGroup, styles.modifiers.toggleGroup, variant && styles.modifiers[toCamel(variant)], breakpoint &&\n                    styles.modifiers[`showOn${capitalize(breakpoint.replace('2xl', '_2xl'))}`], formatBreakpointMods(visibility || visiblity, styles), formatBreakpointMods(alignment, styles), formatBreakpointMods(spacer, styles), formatBreakpointMods(spaceItems, styles), className) }, props),\n                React.createElement(\"div\", { className: css(styles.toolbarToggle) },\n                    React.createElement(Button, Object.assign({ variant: \"plain\", onClick: toggleIsExpanded, \"aria-label\": \"Show Filters\" }, (isExpanded && { 'aria-expanded': true }), { \"aria-haspopup\": isExpanded && this.isContentPopup(), \"aria-controls\": expandableContentId }), toggleIcon)),\n                isExpanded\n                    ? ReactDOM.createPortal(children, expandableContentRef.current.firstElementChild)\n                    : children));\n        }))));\n    }\n}\nToolbarToggleGroup.displayName = 'ToolbarToggleGroup';\n//# sourceMappingURL=ToolbarToggleGroup.js.map","import { createIcon } from '../createIcon';\n\nexport const FilterIconConfig = {\n  name: 'FilterIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M487.976 0H24.028C2.71 0-8.047 25.866 7.058 40.971L192 225.941V432c0 7.831 3.821 15.17 10.237 19.662l80 55.98C298.02 518.69 320 507.493 320 487.98V225.941l184.947-184.97C520.021 25.896 509.338 0 487.976 0z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const FilterIcon = createIcon(FilterIconConfig);\n\nexport default FilterIcon;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Toolbar as PfToolbar,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup\n} from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport { Select } from '../form/select';\nimport { connect, reduxTypes, store } from '../../redux';\nimport { RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { toolbarHelpers } from './toolbarHelpers';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Application filter toolbar.\n *\n * @augments React.Component\n * @fires onClear\n * @fires onClearFilter\n * @fires onCategorySelect\n * @fires onSelect\n */\nclass Toolbar extends React.Component {\n  /**\n   * Clear all filters' state.\n   *\n   * @event onClear\n   */\n  onClear = () => {\n    const { hardFilterReset } = this.props;\n    const dispatchActions = [\n      { type: reduxTypes.toolbar.SET_ACTIVE_FILTERS, data: { activeFilters: new Set() } },\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR,\n        data: {\n          clearFilters: {\n            [RHSM_API_QUERY_TYPES.SLA]: null,\n            [RHSM_API_QUERY_TYPES.USAGE]: null\n          }\n        }\n      }\n    ];\n\n    if (hardFilterReset) {\n      dispatchActions.push({ type: reduxTypes.toolbar.SET_FILTER_TYPE, data: { currentFilter: null } });\n    }\n\n    this.setDispatch(dispatchActions, true);\n  };\n\n  /**\n   * Clear individual filter state.\n   *\n   * @event onClearFilter\n   * @param {string} categoryTitle\n   */\n  onClearFilter = categoryTitle => {\n    const { activeFilters, currentFilter, hardFilterReset } = this.props;\n\n    const categoryOptions = toolbarHelpers.getOptions();\n    const { value: categoryValue } = categoryOptions.options.find(({ title }) => title === categoryTitle) || {};\n\n    if (!categoryValue) {\n      return;\n    }\n\n    const updatedActiveFilters = new Set(activeFilters);\n    updatedActiveFilters.delete(categoryValue);\n\n    const dispatchActions = [\n      { type: reduxTypes.toolbar.SET_ACTIVE_FILTERS, data: { activeFilters: updatedActiveFilters } },\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR,\n        data: {\n          clearFilters: {\n            [categoryValue]: null\n          }\n        }\n      }\n    ];\n\n    if (hardFilterReset) {\n      const updatedCurrentFilter = (updatedActiveFilters.size > 0 && currentFilter) || null;\n      dispatchActions.push({ type: reduxTypes.toolbar.SET_FILTER_TYPE, data: { currentFilter: updatedCurrentFilter } });\n    }\n\n    this.setDispatch(dispatchActions, true);\n  };\n\n  /**\n   * Set Category selection.\n   *\n   * @event onCategorySelect\n   * @param {object} event\n   */\n  onCategorySelect = event => {\n    const { value } = event;\n    this.setDispatch({ type: reduxTypes.toolbar.SET_FILTER_TYPE, data: { currentFilter: value } });\n  };\n\n  /**\n   * Set select filter selection for dispatch.\n   *\n   * @param {object} params\n   * @param {object} params.event\n   * @param {string} params.field\n   */\n  onSelect = ({ event, field }) => {\n    const { activeFilters } = this.props;\n    const { value } = event;\n    const updatedActiveFilters = new Set(activeFilters).add(field);\n\n    this.setDispatch(\n      [\n        {\n          type: reduxTypes.toolbar.SET_ACTIVE_FILTERS,\n          data: { activeFilters: updatedActiveFilters }\n        },\n        {\n          type: reduxTypes.query.SET_QUERY_RHSM_TYPES[field],\n          data: { [field]: value }\n        }\n      ],\n      true\n    );\n  };\n\n  /**\n   * Dispatch a Redux store type.\n   *\n   * @param {Array|object} actions\n   * @param {boolean} resetPage\n   */\n  setDispatch(actions, resetPage = false) {\n    const { viewId } = this.props;\n    const updatedActions = ((Array.isArray(actions) && actions) || [actions]).map(({ type, data }) => ({\n      type,\n      viewId,\n      ...data\n    }));\n\n    if (resetPage) {\n      updatedActions.push({\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      });\n    }\n\n    store.dispatch(updatedActions);\n  }\n\n  /**\n   * Available, and selected select filter options.\n   *\n   * @param {string} field\n   * @returns {{optionsSelected: Array, options: Array }}\n   */\n  setSelectFilter(field) {\n    const { query } = this.props;\n    const options = toolbarHelpers.getOptions(field);\n    const currentFilter = this.getCurrentFilter();\n    let filter;\n\n    if (field) {\n      filter = typeof query?.[field] === 'string' && options.options.find(({ value }) => value === query?.[field]);\n    } else {\n      filter = options.options.find(({ value }) => value === currentFilter);\n    }\n\n    const optionsSelected = (filter?.title && [filter.title]) || (options?.selected && [options.selected]) || [];\n\n    return { options, optionsSelected };\n  }\n\n  /**\n   * Return the currentFilter, fallback to selected\n   *\n   * @returns {string|undefined}\n   */\n  getCurrentFilter() {\n    const { currentFilter, filterOptions } = this.props;\n\n    return (\n      currentFilter ||\n      filterOptions.find(({ selected }) => selected === true)?.id ||\n      (filterOptions.length === 1 && filterOptions[0]?.id)\n    );\n  }\n\n  /**\n   * A select filter node.\n   *\n   * @param {object} params\n   * @param {string} params.id\n   * @returns {object}\n   */\n  renderSelectFilter({ id: field }) {\n    const { t } = this.props;\n    const { options, optionsSelected } = this.setSelectFilter(field);\n    const currentFilter = this.getCurrentFilter();\n\n    return (\n      <ToolbarFilter\n        key={field}\n        chips={optionsSelected}\n        deleteChip={this.onClearFilter}\n        categoryName={t('curiosity-toolbar.category', { context: field })}\n        showToolbarItem={currentFilter === field}\n      >\n        <Select\n          aria-label={t('curiosity-toolbar.category', { context: field })}\n          onSelect={event => this.onSelect({ event, field })}\n          selectedOptions={optionsSelected}\n          placeholder={t('curiosity-toolbar.placeholder', { context: field })}\n          options={options.options}\n        />\n      </ToolbarFilter>\n    );\n  }\n\n  /**\n   * Render a filter toolbar.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { filterOptions, isDisabled, t } = this.props;\n\n    if (isDisabled) {\n      return null;\n    }\n\n    const { options: categoryOptions, optionsSelected: categoryOptionsSelected } = this.setSelectFilter();\n\n    return (\n      <PfToolbar\n        id=\"curiosity-toolbar\"\n        className=\"curiosity-toolbar pf-m-toggle-group-container ins-c-primary-toolbar\"\n        collapseListedFiltersBreakpoint=\"sm\"\n        clearAllFilters={this.onClear}\n        clearFiltersButtonText={t('curiosity-toolbar.clearFilters')}\n      >\n        <ToolbarContent>\n          <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"md\">\n            <ToolbarGroup variant=\"filter-group\">\n              {filterOptions.length !== 1 && (\n                <ToolbarItem>\n                  <Select\n                    aria-label={t('curiosity-toolbar.category')}\n                    onSelect={this.onCategorySelect}\n                    selectedOptions={categoryOptionsSelected}\n                    placeholder={t('curiosity-toolbar.placeholder')}\n                    options={categoryOptions.options}\n                    toggleIcon={<FilterIcon />}\n                  />\n                </ToolbarItem>\n              )}\n              {filterOptions.map(({ id, selected }) => this.renderSelectFilter({ id, selected }))}\n            </ToolbarGroup>\n          </ToolbarToggleGroup>\n        </ToolbarContent>\n      </PfToolbar>\n    );\n  }\n}\n\n/**\n * Prop types\n *\n * @type {{viewId: string, t: Function, activeFilters: Set, hardFilterReset: boolean, query: object,\n *     currentFilter: string, isDisabled: boolean, filterOptions: Array}}\n */\nToolbar.propTypes = {\n  query: PropTypes.shape({\n    [RHSM_API_QUERY_TYPES.SLA]: PropTypes.string,\n    [RHSM_API_QUERY_TYPES.USAGE]: PropTypes.string\n  }),\n  activeFilters: PropTypes.instanceOf(Set),\n  currentFilter: PropTypes.oneOf([RHSM_API_QUERY_TYPES.SLA, RHSM_API_QUERY_TYPES.USAGE]),\n  filterOptions: PropTypes.arrayOf(\n    PropTypes.shape({\n      filterType: PropTypes.oneOf(['select']),\n      id: PropTypes.oneOf([RHSM_API_QUERY_TYPES.SLA, RHSM_API_QUERY_TYPES.USAGE]),\n      selected: PropTypes.bool\n    })\n  ),\n  hardFilterReset: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  t: PropTypes.func,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{viewId: string, t: translate, activeFilters: Set, hardFilterReset: boolean, query: object,\n *     currentFilter: string, isDisabled: boolean, filterOptions: Array}}\n */\nToolbar.defaultProps = {\n  query: {},\n  activeFilters: new Set(),\n  currentFilter: null,\n  filterOptions: [\n    {\n      id: RHSM_API_QUERY_TYPES.SLA,\n      filterType: 'select'\n    },\n    {\n      id: RHSM_API_QUERY_TYPES.USAGE,\n      filterType: 'select',\n      selected: true\n    }\n  ],\n  hardFilterReset: false,\n  isDisabled: helpers.UI_DISABLED_TOOLBAR,\n  t: translate,\n  viewId: 'toolbar'\n};\n\n/**\n * Apply state to props.\n *\n * @param {object} state\n * @param {object} state.toolbar\n * @param {object} state.view\n * @param {object} props\n * @param {string} props.query\n * @param {string} props.viewId\n * @returns {object}\n */\nconst mapStateToProps = ({ toolbar, view }, { query: initialQuery, viewId }) => ({\n  ...toolbar.filters?.[viewId],\n  query: view.query?.[viewId] || initialQuery\n});\n\nconst ConnectedToolbar = connect(mapStateToProps)(Toolbar);\n\nexport { ConnectedToolbar as default, ConnectedToolbar, Toolbar };\n"],"sourceRoot":""}