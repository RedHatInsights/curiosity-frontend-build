{"version":3,"sources":["components/toolbar/toolbarFieldUom.js","components/openshiftView/openshiftView.js"],"names":["toolbarFieldOptions","Object","values","FIELD_TYPES","map","type","title","translate","context","value","selected","ToolbarFieldUom","options","t","viewId","updatedValue","useSelector","view","query","RHSM_API_QUERY_TYPES","UOM","updatedOptions","option","aria-label","onSelect","event","store","dispatch","reduxTypes","SET_QUERY_RESET_INVENTORY_LIST","SET_QUERY_RHSM_TYPES","selectedOptions","placeholder","defaultProps","CORES","OpenshiftView","this","props","initialGuestsFilters","initialToolbarFilters","initialInventorySettings","initialGraphFilters","initialInventoryFilters","initialSubscriptionsInventoryFilters","initialOption","productLabel","graphTallyQuery","inventoryHostsQuery","inventorySubscriptionsQuery","routeDetail","apiQueries","parseRhsmQuery","initialGraphTallyQuery","initialInventoryHostsQuery","initialInventorySubscriptionsQuery","toolbarQuery","filter","id","isOptional","RegExp","test","graphFilters","inventoryFilters","subscriptionsInventoryFilters","includeTour","appName","helpers","UI_DISPLAY_NAME","productId","pathParameter","filterOptions","key","filterGraphData","cardTitle","filterGuestsData","filterInventoryData","settings","UI_DISABLED_TABLE_SUBSCRIPTIONS","React","Component","RHSM_API_QUERY_UOM_TYPES","GRANULARITY","GRANULARITY_TYPES","DAILY","SORT","RHSM_API_QUERY_SORT_TYPES","LAST_SEEN","DIRECTION","SORT_DIRECTION_TYPES","ASCENDING","LIMIT","OFFSET","RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES","UPCOMING_EVENT_DATE","fill","chartColorBlueLight","stroke","chartColorBlueDark","color","header","cell","data","session","displayName","inventoryId","authorized","inventory","Button","isInline","component","variant","target","href","UI_DEPLOY_PATH_PREFIX","cellWidth","lastSeen","DateFormat","date","numberOfGuests","updatedDisplayName","Fragment","count","isSortable","cloudProvider","measurementType","isWrappable","upcomingEventDate","moment","utc","format","SLA","makeMapStateToProps","reduxSelectors","makeView","ConnectedOpenshiftView","connect"],"mappings":"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","file":"static/js/6.9ef96207.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, store, useSelector } from '../../redux';\nimport { Select } from '../form/select';\nimport { RHSM_API_QUERY_UOM_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.uom', { context: type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * Display a unit of measure (uom) field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Array} props.options\n * @param {Function} props.t\n * @param {string} props.value\n * @param {string} props.viewId\n * @returns {Node}\n */\nconst ToolbarFieldUom = ({ options, t, value, viewId }) => {\n  const updatedValue = useSelector(({ view }) => view.query?.[RHSM_API_QUERY_TYPES.UOM]?.[viewId], value);\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  /**\n   * On select, dispatch type.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @returns {void}\n   */\n  const onSelect = event =>\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.UOM],\n        viewId,\n        [RHSM_API_QUERY_TYPES.UOM]: event.value\n      }\n    ]);\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: 'uom' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder', { context: 'uom' })}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{viewId: string, t: Function, options: Array, value: string}}\n */\nToolbarFieldUom.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  t: PropTypes.func,\n  value: PropTypes.oneOf([...Object.values(FIELD_TYPES)]),\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{viewId: string, t: translate, options: Array, value: string}}\n */\nToolbarFieldUom.defaultProps = {\n  options: toolbarFieldOptions,\n  t: translate,\n  value: FIELD_TYPES.CORES,\n  viewId: 'toolbarFieldUom'\n};\n\nexport { ToolbarFieldUom as default, ToolbarFieldUom, toolbarFieldOptions };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  chart_color_blue_100 as chartColorBlueLight,\n  chart_color_blue_300 as chartColorBlueDark\n} from '@patternfly/react-tokens';\nimport { Button, Label as PfLabel } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/cjs/DateFormat';\nimport moment from 'moment';\nimport { PageLayout, PageHeader, PageMessages, PageSection, PageToolbar } from '../pageLayout/pageLayout';\nimport {\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_TYPES,\n  RHSM_API_QUERY_UOM_TYPES,\n  RHSM_API_QUERY_SORT_TYPES,\n  RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES\n} from '../../types/rhsmApiTypes';\nimport { apiQueries, connect, reduxSelectors } from '../../redux';\nimport GraphCard from '../graphCard/graphCard';\nimport { ToolbarFieldUom } from '../toolbar/toolbarFieldUom';\nimport Toolbar from '../toolbar/toolbar';\nimport InventoryList from '../inventoryList/inventoryList';\nimport InventorySubscriptions from '../inventorySubscriptions/inventorySubscriptions';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * An OpenShift encompassing view.\n *\n * @augments React.Component\n * @fires onSelect\n */\nclass OpenshiftView extends React.Component {\n  componentDidMount() {}\n\n  /**\n   * Render an OpenShift view.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const {\n      initialGuestsFilters,\n      initialToolbarFilters,\n      initialInventorySettings,\n      initialGraphFilters,\n      initialInventoryFilters,\n      initialSubscriptionsInventoryFilters,\n      initialOption,\n      productLabel,\n      query,\n      graphTallyQuery,\n      inventoryHostsQuery,\n      inventorySubscriptionsQuery,\n      routeDetail,\n      t,\n      viewId\n    } = this.props;\n    const {\n      graphTallyQuery: initialGraphTallyQuery,\n      inventoryHostsQuery: initialInventoryHostsQuery,\n      inventorySubscriptionsQuery: initialInventorySubscriptionsQuery,\n      toolbarQuery\n    } = apiQueries.parseRhsmQuery(query, { graphTallyQuery, inventoryHostsQuery, inventorySubscriptionsQuery });\n\n    const filter = ({ id, isOptional }) => {\n      if (!isOptional) {\n        return true;\n      }\n      return new RegExp(query[RHSM_API_QUERY_TYPES.UOM] || initialOption, 'i').test(id);\n    };\n\n    const graphFilters = initialGraphFilters.filter(filter);\n    const inventoryFilters = initialInventoryFilters.filter(filter);\n    const subscriptionsInventoryFilters = initialSubscriptionsInventoryFilters.filter(filter);\n\n    return (\n      <PageLayout>\n        <PageHeader productLabel={productLabel} includeTour>\n          {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: productLabel })}\n        </PageHeader>\n        <PageMessages>\n          <BannerMessages productId={routeDetail.pathParameter} viewId={viewId} query={query} />\n        </PageMessages>\n        <PageToolbar>\n          <Toolbar\n            filterOptions={initialToolbarFilters}\n            productId={routeDetail.pathParameter}\n            query={toolbarQuery}\n            viewId={viewId}\n          />\n        </PageToolbar>\n        <PageSection>\n          <GraphCard\n            key={routeDetail.pathParameter}\n            filterGraphData={graphFilters}\n            query={initialGraphTallyQuery}\n            productId={routeDetail.pathParameter}\n            viewId={viewId}\n            cardTitle={t('curiosity-graph.cardHeading')}\n            productLabel={productLabel}\n          >\n            <ToolbarFieldUom value={initialOption} viewId={viewId} />\n          </GraphCard>\n        </PageSection>\n        <PageSection>\n          <InventoryTabs productId={routeDetail.pathParameter}>\n            <InventoryTab key=\"hostsTab\" title={t('curiosity-inventory.tab', { context: 'hosts' })}>\n              <InventoryList\n                key={routeDetail.pathParameter}\n                filterGuestsData={initialGuestsFilters}\n                filterInventoryData={inventoryFilters}\n                productId={routeDetail.pathParameter}\n                settings={initialInventorySettings}\n                query={initialInventoryHostsQuery}\n                viewId={viewId}\n              />\n            </InventoryTab>\n            {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && (\n              <InventoryTab key=\"subscriptionsTab\" title={t('curiosity-inventory.tab', { context: 'subscriptions' })}>\n                <InventorySubscriptions\n                  key={routeDetail.pathParameter}\n                  filterInventoryData={subscriptionsInventoryFilters}\n                  productId={routeDetail.pathParameter}\n                  query={initialInventorySubscriptionsQuery}\n                  viewId={viewId}\n                />\n              </InventoryTab>\n            )}\n          </InventoryTabs>\n        </PageSection>\n      </PageLayout>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{productLabel: string, initialOption: string, inventorySubscriptionsQuery: object, query: object,\n *     initialSubscriptionsInventoryFilters: Array, initialInventorySettings: object, initialToolbarFilters: Array,\n *     viewId: string, t: Function, graphTallyQuery: object, inventoryHostsQuery: object, initialGraphFilters: Array,\n *     routeDetail: object, initialGuestsFilters: Array, initialInventoryFilters: Array}}\n */\nOpenshiftView.propTypes = {\n  query: PropTypes.object,\n  graphTallyQuery: PropTypes.shape({\n    [RHSM_API_QUERY_TYPES.GRANULARITY]: PropTypes.oneOf([...Object.values(GRANULARITY_TYPES)])\n  }),\n  inventoryHostsQuery: PropTypes.shape({\n    [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n    [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n    [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SORT_TYPES)]),\n    [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n  }),\n  inventorySubscriptionsQuery: PropTypes.shape({\n    [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n    [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n    [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES)]),\n    [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n  }),\n  initialOption: PropTypes.oneOf(Object.values(RHSM_API_QUERY_UOM_TYPES)),\n  initialGraphFilters: PropTypes.array,\n  initialGuestsFilters: PropTypes.array,\n  initialInventoryFilters: PropTypes.array,\n  initialInventorySettings: PropTypes.shape({\n    hasGuests: PropTypes.func\n  }),\n  initialSubscriptionsInventoryFilters: PropTypes.array,\n  initialToolbarFilters: PropTypes.array,\n  productLabel: PropTypes.string,\n  routeDetail: PropTypes.shape({\n    pathParameter: PropTypes.string.isRequired,\n    pathId: PropTypes.string.isRequired,\n    routeItem: PropTypes.shape({\n      title: PropTypes.string\n    })\n  }).isRequired,\n  t: PropTypes.func,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{productLabel: string, initialOption: string, inventorySubscriptionsQuery: object, query: object,\n *     initialSubscriptionsInventoryFilters: Array, initialInventorySettings: object, initialToolbarFilters: Array,\n *     viewId: string, t: translate, graphTallyQuery: object, inventoryHostsQuery: object,\n *     initialGraphFilters: Array, initialGuestsFilters: Array, initialInventoryFilters: Array}}\n */\nOpenshiftView.defaultProps = {\n  query: {\n    [RHSM_API_QUERY_TYPES.UOM]: RHSM_API_QUERY_UOM_TYPES.CORES\n  },\n  graphTallyQuery: {\n    [RHSM_API_QUERY_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY\n  },\n  inventoryHostsQuery: {\n    [RHSM_API_QUERY_TYPES.SORT]: RHSM_API_QUERY_SORT_TYPES.LAST_SEEN,\n    [RHSM_API_QUERY_TYPES.DIRECTION]: SORT_DIRECTION_TYPES.ASCENDING,\n    [RHSM_API_QUERY_TYPES.LIMIT]: 100,\n    [RHSM_API_QUERY_TYPES.OFFSET]: 0\n  },\n  inventorySubscriptionsQuery: {\n    [RHSM_API_QUERY_TYPES.SORT]: RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES.UPCOMING_EVENT_DATE,\n    [RHSM_API_QUERY_TYPES.DIRECTION]: SORT_DIRECTION_TYPES.ASCENDING,\n    [RHSM_API_QUERY_TYPES.LIMIT]: 100,\n    [RHSM_API_QUERY_TYPES.OFFSET]: 0\n  },\n  initialOption: RHSM_API_QUERY_UOM_TYPES.CORES,\n  initialGraphFilters: [\n    {\n      id: 'cores',\n      isOptional: true,\n      fill: chartColorBlueLight.value,\n      stroke: chartColorBlueDark.value,\n      color: chartColorBlueDark.value\n    },\n    {\n      id: 'sockets',\n      isOptional: true,\n      fill: chartColorBlueLight.value,\n      stroke: chartColorBlueDark.value,\n      color: chartColorBlueDark.value\n    },\n    { id: 'thresholdSockets', isOptional: true },\n    { id: 'thresholdCores', isOptional: true }\n  ],\n  initialGuestsFilters: [\n    {\n      id: 'displayName',\n      header: translate('curiosity-inventory.header', { context: 'guestsDisplayName' }),\n      cell: (data, session) => {\n        const { displayName, inventoryId } = data;\n        const { inventory: authorized } = session?.authorized || {};\n\n        if (!inventoryId?.value) {\n          return displayName?.value;\n        }\n\n        if (!authorized) {\n          return displayName?.value || inventoryId?.value;\n        }\n\n        return (\n          <Button\n            isInline\n            component=\"a\"\n            variant=\"link\"\n            target=\"_blank\"\n            href={`${helpers.UI_DEPLOY_PATH_PREFIX}/insights/inventory/${inventoryId.value}/`}\n          >\n            {displayName.value || inventoryId.value}\n          </Button>\n        );\n      }\n    },\n    {\n      id: 'inventoryId',\n      cellWidth: 40\n    },\n    {\n      id: 'lastSeen',\n      cell: data => (data?.lastSeen?.value && <DateFormat date={data?.lastSeen?.value} />) || '',\n      cellWidth: 15\n    }\n  ],\n  initialInventoryFilters: [\n    {\n      id: 'displayName',\n      cell: (data, session) => {\n        const { displayName = {}, inventoryId = {}, numberOfGuests = {} } = data;\n        const { inventory: authorized } = session?.authorized || {};\n\n        if (!inventoryId.value) {\n          return displayName.value;\n        }\n\n        let updatedDisplayName = displayName.value || inventoryId.value;\n\n        if (authorized) {\n          updatedDisplayName = (\n            <Button\n              isInline\n              component=\"a\"\n              variant=\"link\"\n              target=\"_blank\"\n              href={`${helpers.UI_DEPLOY_PATH_PREFIX}/insights/inventory/${inventoryId.value}/`}\n            >\n              {displayName.value || inventoryId.value}\n            </Button>\n          );\n        }\n\n        return (\n          <React.Fragment>\n            {updatedDisplayName}{' '}\n            {(numberOfGuests.value &&\n              translate('curiosity-inventory.label', { context: 'numberOfGuests', count: numberOfGuests.value }, [\n                <PfLabel color=\"blue\" />\n              ])) ||\n              ''}\n          </React.Fragment>\n        );\n      },\n      isSortable: true\n    },\n    {\n      id: 'measurementType',\n      cell: data => {\n        const { cloudProvider = {}, measurementType = {} } = data;\n        return (\n          <React.Fragment>\n            {translate('curiosity-inventory.measurementType', { context: measurementType.value })}{' '}\n            {(cloudProvider.value && (\n              <PfLabel color=\"purple\">\n                {translate('curiosity-inventory.cloudProvider', { context: cloudProvider.value })}\n              </PfLabel>\n            )) ||\n              ''}\n          </React.Fragment>\n        );\n      },\n      isSortable: true,\n      cellWidth: 20\n    },\n    {\n      id: 'sockets',\n      isOptional: true,\n      isSortable: true,\n      isWrappable: true,\n      cellWidth: 15\n    },\n    {\n      id: 'cores',\n      isOptional: true,\n      isSortable: true,\n      isWrappable: true,\n      cellWidth: 15\n    },\n    {\n      id: 'lastSeen',\n      cell: data => (data?.lastSeen?.value && <DateFormat date={data?.lastSeen?.value} />) || '',\n      isSortable: true,\n      isWrappable: true,\n      cellWidth: 15\n    }\n  ],\n  initialInventorySettings: {},\n  initialSubscriptionsInventoryFilters: [\n    {\n      id: 'productName',\n      isSortable: true\n    },\n    {\n      id: 'serviceLevel',\n      isSortable: true,\n      isWrappable: true,\n      cellWidth: 15\n    },\n    {\n      id: 'upcomingEventDate',\n      cell: data =>\n        (data?.upcomingEventDate?.value && moment.utc(data?.upcomingEventDate?.value).format('YYYY-DD-MM')) || '',\n      isSortable: true,\n      isWrappable: true,\n      cellWidth: 15\n    }\n  ],\n  initialToolbarFilters: [\n    {\n      id: RHSM_API_QUERY_TYPES.SLA\n    }\n  ],\n  productLabel: 'OpenShift',\n  t: translate,\n  viewId: 'viewOpenShift'\n};\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.view.makeView(OpenshiftView.defaultProps);\n\nconst ConnectedOpenshiftView = connect(makeMapStateToProps)(OpenshiftView);\n\nexport { ConnectedOpenshiftView as default, ConnectedOpenshiftView, OpenshiftView };\n"],"sourceRoot":""}