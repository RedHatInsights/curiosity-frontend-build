{"version":3,"sources":["components/productView/productView.js","components/productView/productViewRhel.js"],"names":["ProductView","productConfig","routeDetail","t","graphTallyQuery","inventoryHostsQuery","inventorySubscriptionsQuery","query","initialToolbarFilters","initialGraphFilters","initialGuestsFilters","initialInventoryFilters","initialInventorySettings","initialSubscriptionsInventoryFilters","apiQueries","parseRhsmQuery","initialQuery","initialGraphTallyQuery","initialInventoryHostsQuery","initialInventorySubscriptionsQuery","initialToolbarQuery","toolbarQuery","productId","pathParameter","productLabel","productParameter","viewId","viewParameter","includeTour","appName","helpers","UI_DISPLAY_NAME","context","filterOptions","filterGraphData","cardTitle","title","filterGuestsData","filterInventoryData","settings","UI_DISABLED_TABLE_SUBSCRIPTIONS","defaultProps","translate","makeMapStateToProps","reduxSelectors","view","makeView","ConnectedProductView","connect","ProductViewRhel","RHSM_API_QUERY_TYPES","GRANULARITY","GRANULARITY_TYPES","DAILY","SORT","RHSM_API_QUERY_SORT_TYPES","LAST_SEEN","DIRECTION","SORT_DIRECTION_TYPES","ASCENDING","LIMIT","OFFSET","RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES","UPCOMING_EVENT_DATE","id","fill","chartColorBlueLight","value","stroke","chartColorBlueDark","color","chartColorCyanLight","chartColorCyanDark","chartColorPurpleLight","chartColorPurpleDark","header","cell","data","session","displayName","inventoryId","authorized","inventory","isInline","component","variant","target","href","UI_DEPLOY_PATH_PREFIX","cellWidth","lastSeen","date","numberOfGuests","updatedDisplayName","Fragment","count","isSortable","cloudProvider","measurementType","isWrappable","upcomingEventDate","moment","utc","format","SLA","USAGE","selected"],"mappings":"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","file":"static/js/5.6b32c867.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { PageLayout, PageHeader, PageSection, PageToolbar, PageMessages } from '../pageLayout/pageLayout';\nimport { apiQueries, connect, reduxSelectors } from '../../redux';\nimport { ConnectedGraphCard, GraphCard } from '../graphCard/graphCard';\nimport { ConnectedToolbar, Toolbar } from '../toolbar/toolbar';\nimport { ConnectedInventoryList, InventoryList } from '../inventoryList/inventoryList';\nimport { helpers } from '../../common';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport {\n  ConnectedInventorySubscriptions,\n  InventorySubscriptions\n} from '../inventorySubscriptions/inventorySubscriptions';\nimport {\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_SORT_TYPES,\n  RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES,\n  RHSM_API_QUERY_TYPES\n} from '../../types/rhsmApiTypes';\nimport { GuestsList } from '../guestsList/guestsList';\nimport { translate } from '../i18n/i18n';\n\n/**\n * ToDo: base for default product layouts, add additional props for various toolbars\n * Next steps include...\n * Consider being able to pass customized toolbars for GraphCard and the\n * various Inventory displays. Have to evaluate how to handle the global toolbar, one\n * consideration is creating optional widgets with self-contained state update ability\n * based off of context/props/etc.\n *\n * Moving existing products to this layout, or maintaining them \"as is\", then renaming and\n * relocating them to this directory if they've been customized beyond a basic layout.\n */\n/**\n * Display a product.\n *\n * @param {object} props\n * @param {object} props.productConfig\n * @param {object} props.routeDetail\n * @param {Function} props.t\n * @returns {Node}\n */\nconst ProductView = ({ productConfig, routeDetail, t }) => {\n  const {\n    graphTallyQuery,\n    inventoryHostsQuery,\n    inventorySubscriptionsQuery,\n    query,\n    initialToolbarFilters,\n    initialGraphFilters,\n    initialGuestsFilters,\n    initialInventoryFilters,\n    initialInventorySettings,\n    initialSubscriptionsInventoryFilters\n  } = productConfig;\n\n  const {\n    query: initialQuery,\n    graphTallyQuery: initialGraphTallyQuery,\n    inventoryHostsQuery: initialInventoryHostsQuery,\n    inventorySubscriptionsQuery: initialInventorySubscriptionsQuery,\n    toolbarQuery: initialToolbarQuery\n  } = apiQueries.parseRhsmQuery(query, { graphTallyQuery, inventoryHostsQuery, inventorySubscriptionsQuery });\n\n  const { pathParameter: productId, productParameter: productLabel, viewParameter: viewId } = routeDetail;\n\n  if (!productId || !viewId) {\n    return null;\n  }\n\n  return (\n    <PageLayout>\n      <PageHeader productLabel={productLabel} includeTour>\n        {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: productLabel })}\n      </PageHeader>\n      <PageMessages>\n        <BannerMessages productId={productId} viewId={viewId} query={initialQuery} />\n      </PageMessages>\n      <PageToolbar>\n        <ConnectedToolbar\n          filterOptions={initialToolbarFilters}\n          productId={productId}\n          query={initialToolbarQuery}\n          viewId={viewId}\n        />\n      </PageToolbar>\n      <PageSection>\n        <ConnectedGraphCard\n          key={productId}\n          filterGraphData={initialGraphFilters}\n          query={initialGraphTallyQuery}\n          productId={productId}\n          viewId={viewId}\n          cardTitle={t('curiosity-graph.socketsHeading')}\n          productLabel={productLabel}\n        />\n      </PageSection>\n      <PageSection>\n        <InventoryTabs productId={productId}>\n          <InventoryTab key=\"hostsTab\" title={t('curiosity-inventory.tab', { context: 'hosts' })}>\n            <ConnectedInventoryList\n              key={productId}\n              filterGuestsData={initialGuestsFilters}\n              filterInventoryData={initialInventoryFilters}\n              productId={productId}\n              settings={initialInventorySettings}\n              query={initialInventoryHostsQuery}\n              viewId={viewId}\n            />\n          </InventoryTab>\n          {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && (\n            <InventoryTab key=\"subscriptionsTab\" title={t('curiosity-inventory.tab', { context: 'subscriptions' })}>\n              <ConnectedInventorySubscriptions\n                key={productId}\n                filterInventoryData={initialSubscriptionsInventoryFilters}\n                productId={productId}\n                query={initialInventorySubscriptionsQuery}\n                viewId={viewId}\n              />\n            </InventoryTab>\n          )}\n        </InventoryTabs>\n      </PageSection>\n    </PageLayout>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: Function, routeDetail: object, productConfig: object}}\n */\nProductView.propTypes = {\n  productConfig: PropTypes.shape({\n    graphTallyQuery: PropTypes.shape({\n      [RHSM_API_QUERY_TYPES.GRANULARITY]: PropTypes.oneOf([...Object.values(GRANULARITY_TYPES)])\n    }),\n    inventoryHostsQuery: PropTypes.shape({\n      [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SORT_TYPES)]),\n      [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n    }),\n    inventorySubscriptionsQuery: PropTypes.shape({\n      [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES)]),\n      [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n    }),\n    query: PropTypes.object,\n    initialToolbarFilters: Toolbar.propTypes.filterOptions,\n    initialGraphFilters: GraphCard.propTypes.filterGraphData,\n    initialGuestsFilters: GuestsList.propTypes.filterGuestsData,\n    initialInventoryFilters: InventoryList.propTypes.filterInventoryData,\n    initialInventorySettings: InventoryList.propTypes.settings,\n    initialSubscriptionsInventoryFilters: InventorySubscriptions.propTypes.filterInventoryData\n  }).isRequired,\n  routeDetail: PropTypes.shape({\n    pathParameter: PropTypes.string,\n    productParameter: PropTypes.string,\n    viewParameter: PropTypes.string\n  }).isRequired,\n  t: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate}}\n */\nProductView.defaultProps = {\n  t: translate\n};\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.view.makeView(ProductView.defaultProps);\n\nconst ConnectedProductView = connect(makeMapStateToProps)(ProductView);\n\nexport { ConnectedProductView as default, ConnectedProductView, ProductView };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  chart_color_blue_100 as chartColorBlueLight,\n  chart_color_blue_300 as chartColorBlueDark,\n  chart_color_cyan_100 as chartColorCyanLight,\n  chart_color_cyan_300 as chartColorCyanDark,\n  chart_color_purple_100 as chartColorPurpleLight,\n  chart_color_purple_300 as chartColorPurpleDark\n} from '@patternfly/react-tokens';\nimport { Button, Label as PfLabel } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/DateFormat';\nimport moment from 'moment';\nimport {\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_TYPES,\n  RHSM_API_QUERY_SORT_TYPES,\n  RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES\n} from '../../types/rhsmApiTypes';\nimport { ConnectedProductView, ProductView } from './productView';\nimport { translate } from '../i18n/i18n';\nimport { helpers } from '../../common';\n\n/**\n * A Red Hat Enterprise Linux configured view, and related system architectures.\n *\n * @param {object} props\n * @param {object} props.productConfig\n * @param {object} props.routeDetail\n * @returns {Node}\n */\nconst ProductViewRhel = ({ productConfig, routeDetail }) => (\n  <ConnectedProductView routeDetail={routeDetail} productConfig={productConfig} />\n);\n\n/**\n * Prop types.\n *\n * @type {{routeDetail: object, productConfig:object}}\n */\nProductViewRhel.propTypes = {\n  productConfig: ProductView.propTypes.productConfig,\n  routeDetail: PropTypes.shape({\n    pathParameter: PropTypes.string,\n    productParameter: PropTypes.string,\n    viewParameter: PropTypes.string\n  }).isRequired\n};\n\n/**\n * Default props.\n *\n * @type {{ productConfig: object }}\n */\nProductViewRhel.defaultProps = {\n  productConfig: {\n    query: {},\n    graphTallyQuery: {\n      [RHSM_API_QUERY_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY\n    },\n    inventoryHostsQuery: {\n      [RHSM_API_QUERY_TYPES.SORT]: RHSM_API_QUERY_SORT_TYPES.LAST_SEEN,\n      [RHSM_API_QUERY_TYPES.DIRECTION]: SORT_DIRECTION_TYPES.ASCENDING,\n      [RHSM_API_QUERY_TYPES.LIMIT]: 100,\n      [RHSM_API_QUERY_TYPES.OFFSET]: 0\n    },\n    inventorySubscriptionsQuery: {\n      [RHSM_API_QUERY_TYPES.SORT]: RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES.UPCOMING_EVENT_DATE,\n      [RHSM_API_QUERY_TYPES.DIRECTION]: SORT_DIRECTION_TYPES.ASCENDING,\n      [RHSM_API_QUERY_TYPES.LIMIT]: 100,\n      [RHSM_API_QUERY_TYPES.OFFSET]: 0\n    },\n    initialGraphFilters: [\n      {\n        id: 'physicalSockets',\n        fill: chartColorBlueLight.value,\n        stroke: chartColorBlueDark.value,\n        color: chartColorBlueDark.value\n      },\n      {\n        id: 'hypervisorSockets',\n        fill: chartColorCyanLight.value,\n        stroke: chartColorCyanDark.value,\n        color: chartColorCyanDark.value\n      },\n      {\n        id: 'cloudSockets',\n        fill: chartColorPurpleLight.value,\n        stroke: chartColorPurpleDark.value,\n        color: chartColorPurpleDark.value\n      },\n      { id: 'thresholdSockets' }\n    ],\n    initialGuestsFilters: [\n      {\n        id: 'displayName',\n        header: translate('curiosity-inventory.header', { context: 'guestsDisplayName' }),\n        cell: (data, session) => {\n          const { displayName, inventoryId } = data;\n          const { inventory: authorized } = session?.authorized || {};\n\n          if (!inventoryId?.value) {\n            return displayName?.value;\n          }\n\n          if (!authorized) {\n            return displayName?.value || inventoryId?.value;\n          }\n\n          return (\n            <Button\n              isInline\n              component=\"a\"\n              variant=\"link\"\n              target=\"_blank\"\n              href={`${helpers.UI_DEPLOY_PATH_PREFIX}/insights/inventory/${inventoryId.value}/`}\n            >\n              {displayName.value || inventoryId.value}\n            </Button>\n          );\n        }\n      },\n      {\n        id: 'inventoryId',\n        cellWidth: 40\n      },\n      {\n        id: 'lastSeen',\n        cell: data => (data?.lastSeen?.value && <DateFormat date={data?.lastSeen?.value} />) || '',\n        cellWidth: 15\n      }\n    ],\n    initialInventoryFilters: [\n      {\n        id: 'displayName',\n        cell: (data, session) => {\n          const { displayName = {}, inventoryId = {}, numberOfGuests = {} } = data;\n          const { inventory: authorized } = session?.authorized || {};\n\n          if (!inventoryId.value) {\n            return displayName.value;\n          }\n\n          let updatedDisplayName = displayName.value || inventoryId.value;\n\n          if (authorized) {\n            updatedDisplayName = (\n              <Button\n                isInline\n                component=\"a\"\n                variant=\"link\"\n                target=\"_blank\"\n                href={`${helpers.UI_DEPLOY_PATH_PREFIX}/insights/inventory/${inventoryId.value}/`}\n              >\n                {displayName.value || inventoryId.value}\n              </Button>\n            );\n          }\n\n          return (\n            <React.Fragment>\n              {updatedDisplayName}{' '}\n              {(numberOfGuests.value &&\n                translate('curiosity-inventory.label', { context: 'numberOfGuests', count: numberOfGuests.value }, [\n                  <PfLabel color=\"blue\" />\n                ])) ||\n                ''}\n            </React.Fragment>\n          );\n        },\n        isSortable: true\n      },\n      {\n        id: 'measurementType',\n        cell: data => {\n          const { cloudProvider = {}, measurementType = {} } = data;\n          return (\n            <React.Fragment>\n              {translate('curiosity-inventory.measurementType', { context: measurementType.value })}{' '}\n              {(cloudProvider.value && (\n                <PfLabel color=\"purple\">\n                  {translate('curiosity-inventory.cloudProvider', { context: cloudProvider.value })}\n                </PfLabel>\n              )) ||\n                ''}\n            </React.Fragment>\n          );\n        },\n        isSortable: true,\n        cellWidth: 20\n      },\n      {\n        id: 'sockets',\n        isSortable: true,\n        isWrappable: true,\n        cellWidth: 15\n      },\n      {\n        id: 'lastSeen',\n        cell: data => (data?.lastSeen?.value && <DateFormat date={data?.lastSeen?.value} />) || '',\n        isSortable: true,\n        isWrappable: true,\n        cellWidth: 15\n      }\n    ],\n    initialInventorySettings: {},\n    initialSubscriptionsInventoryFilters: [\n      {\n        id: 'productName',\n        isSortable: true\n      },\n      {\n        id: 'serviceLevel',\n        isSortable: true,\n        isWrappable: true,\n        cellWidth: 15\n      },\n      {\n        id: 'upcomingEventDate',\n        cell: data =>\n          (data?.upcomingEventDate?.value && moment.utc(data?.upcomingEventDate?.value).format('YYYY-DD-MM')) || '',\n        isSortable: true,\n        isWrappable: true,\n        cellWidth: 15\n      }\n    ],\n    initialToolbarFilters: [\n      {\n        id: RHSM_API_QUERY_TYPES.SLA\n      },\n      {\n        id: RHSM_API_QUERY_TYPES.USAGE,\n        selected: true\n      }\n    ]\n  }\n};\n\nexport { ProductViewRhel as default, ProductViewRhel };\n"],"sourceRoot":""}