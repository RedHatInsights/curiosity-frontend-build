{"version":3,"sources":["components/bannerMessages/bannerMessages.js","components/productView/productView.js","components/toolbar/toolbarFieldRangedMonthly.js","components/productView/productViewOpenShiftDedicated.js"],"names":["BannerMessages","state","onUpdateData","props","getMessageReports","productId","query","graphTallyQuery","apiQueries","parseRhsmQuery","dateHelpers","getRangedDateTime","startDate","endDate","RHSM_API_QUERY_TYPES","GRANULARITY","GRANULARITY_TYPES","DAILY","START_DATE","toISOString","END_DATE","this","prevProps","_isEqual","appMessages","messages","updatedMessages","length","Object","entries","forEach","key","value","message","find","id","push","map","title","variant","AlertVariant","info","actionClose","AlertActionCloseButton","onClose","setState","Alert","alerts","renderAlerts","className","React","Component","defaultProps","helpers","noop","translate","context","UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS","appName","UI_DISPLAY_NAME","Button","isInline","component","icon","iconPosition","target","href","makeMapStateToProps","reduxSelectors","makeAppMessages","ConnectedBannerMessages","connect","dispatch","reduxActions","rhsm","ProductView","productConfig","routeDetail","t","toolbarGraph","toolbarGraphDescription","toolbarProduct","inventoryHostsQuery","inventorySubscriptionsQuery","initialToolbarFilters","initialGraphFilters","initialGuestsFilters","initialInventoryFilters","initialInventorySettings","initialSubscriptionsInventoryFilters","initialQuery","initialGraphTallyQuery","initialInventoryHostsQuery","initialInventorySubscriptionsQuery","initialToolbarQuery","toolbarQuery","pathParameter","productLabel","productParameter","viewId","viewParameter","graphCardTooltip","Tooltip","content","position","TooltipPosition","top","enableFlip","distance","entryDelay","exitDelay","graphCardTitle","Fragment","includeTour","isValidElement","filterOptions","filterGraphData","cardTitle","filterGuestsData","filterInventoryData","settings","UI_DISABLED_TABLE_SUBSCRIPTIONS","toolbarFieldOptions","getRangedMonthDateTime","listDateTimeRanges","dateTime","selected","ToolbarFieldRangedMonthly","options","updatedValue","useSelector","view","updatedOptions","option","aria-label","onSelect","event","store","type","reduxTypes","SET_QUERY_CLEAR_INVENTORY_LIST","SET_QUERY_RHSM_TYPES","FIELD_TYPES","placeholder","maxHeight","ProductViewOpenShiftDedicated","SORT","RHSM_API_QUERY_SORT_TYPES","LAST_SEEN","DIRECTION","SORT_DIRECTION_TYPES","DESCENDING","LIMIT","OFFSET","fill","chartColorBlueLight","stroke","chartColorBlueDark","color","cell","data","displayName","inventoryId","numberOfGuests","updatedDisplayName","count","isSortable","coreHours","Number","parseFloat","toFixed","isWrappable","cellWidth","header","lastSeen","date","undefined"],"mappings":"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","file":"static/js/7.4924a2b6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, AlertActionCloseButton, AlertVariant, Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport _isEqual from 'lodash/isEqual';\nimport { apiQueries, connect, reduxActions, reduxSelectors } from '../../redux';\nimport { translate } from '../i18n/i18n';\nimport { dateHelpers, helpers } from '../../common';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\n\n/**\n * Render banner messages.\n *\n * @augments React.Component\n */\nclass BannerMessages extends React.Component {\n  state = {};\n\n  componentDidMount() {\n    this.onUpdateData();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { query, productId } = this.props;\n\n    if (productId !== prevProps.productId || !_isEqual(query, prevProps.query)) {\n      this.onUpdateData();\n    }\n  }\n\n  /**\n   * Call the RHSM APIs, apply filters.\n   *\n   * @event onUpdateGraphData\n   */\n  onUpdateData = () => {\n    const { getMessageReports, productId, query } = this.props;\n    const { graphTallyQuery } = apiQueries.parseRhsmQuery(query);\n\n    if (productId) {\n      const { startDate, endDate } = dateHelpers.getRangedDateTime('CURRENT');\n      const updatedGraphQuery = {\n        ...graphTallyQuery,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString(),\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      };\n\n      getMessageReports(productId, updatedGraphQuery);\n    }\n  };\n\n  /**\n   * Apply messages' configuration to alerts.\n   *\n   * @returns {Node}\n   */\n  renderAlerts() {\n    const { state } = this;\n    const { appMessages, messages } = this.props;\n    const updatedMessages = [];\n\n    if (messages.length) {\n      Object.entries(appMessages).forEach(([key, value]) => {\n        if (state[key] !== true && value === true) {\n          const message = messages.find(({ id }) => id === key);\n\n          if (message) {\n            updatedMessages.push({\n              key,\n              ...message\n            });\n          }\n        }\n      });\n    }\n\n    return updatedMessages.map(({ key, message, title, variant = AlertVariant.info }) => {\n      const actionClose = <AlertActionCloseButton onClose={() => this.setState({ [key]: true })} />;\n\n      return (\n        <Alert actionClose={actionClose} key={key} title={title} variant={variant}>\n          {message}\n        </Alert>\n      );\n    });\n  }\n\n  /**\n   * Render a banner messages container.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const alerts = this.renderAlerts();\n\n    if (alerts.length) {\n      return <div className=\"curiosity-banner-messages\">{alerts}</div>;\n    }\n\n    return null;\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{appMessages: object, productId: string, getMessageReports: Function, query: object, messages: Array}}\n */\nBannerMessages.propTypes = {\n  appMessages: PropTypes.object.isRequired,\n  getMessageReports: PropTypes.func,\n  query: PropTypes.object,\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.node.isRequired,\n      message: PropTypes.node.isRequired,\n      variant: PropTypes.oneOf([...Object.values(AlertVariant)])\n    })\n  ),\n  productId: PropTypes.string.isRequired\n};\n\n/**\n * Default props.\n *\n * @type {{getMessageReports: Function, query: object, messages: Array}}\n */\nBannerMessages.defaultProps = {\n  getMessageReports: helpers.noop,\n  query: {},\n  messages: [\n    {\n      id: 'cloudigradeMismatch',\n      title: translate('curiosity-banner.dataMismatchTitle'),\n      message: translate(\n        'curiosity-banner.dataMismatchMessage',\n        {\n          context: helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS !== '' && 'cloudigradeMismatch',\n          appName: helpers.UI_DISPLAY_NAME\n        },\n        [\n          <Button\n            isInline\n            component=\"a\"\n            variant=\"link\"\n            icon={<ExternalLinkAltIcon />}\n            iconPosition=\"right\"\n            target=\"_blank\"\n            href={helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS}\n          />\n        ]\n      )\n    }\n  ]\n};\n\n/**\n * Apply actions to props.\n *\n * @param {Function} dispatch\n * @returns {object}\n */\nconst mapDispatchToProps = dispatch => ({\n  getMessageReports: (id, query) => dispatch(reduxActions.rhsm.getMessageReports(id, query))\n});\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.appMessages.makeAppMessages();\n\nconst ConnectedBannerMessages = connect(makeMapStateToProps, mapDispatchToProps)(BannerMessages);\n\nexport { ConnectedBannerMessages as default, ConnectedBannerMessages, BannerMessages };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport { PageLayout, PageHeader, PageSection, PageToolbar, PageMessages } from '../pageLayout/pageLayout';\nimport { apiQueries } from '../../redux';\nimport { ConnectedGraphCard, GraphCard } from '../graphCard/graphCard';\nimport { ConnectedToolbar, Toolbar } from '../toolbar/toolbar';\nimport { ConnectedInventoryList, InventoryList } from '../inventoryList/inventoryList';\nimport { helpers } from '../../common';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport { ToolbarFieldGranularity } from '../toolbar/toolbarFieldGranularity';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport {\n  ConnectedInventorySubscriptions,\n  InventorySubscriptions\n} from '../inventorySubscriptions/inventorySubscriptions';\nimport {\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_SORT_TYPES,\n  RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES,\n  RHSM_API_QUERY_TYPES\n} from '../../types/rhsmApiTypes';\nimport { GuestsList } from '../guestsList/guestsList';\nimport { translate } from '../i18n/i18n';\n\n/**\n * ToDo: base for default product layouts, add additional props for various toolbars\n * Next steps include...\n * Consider being able to pass customized toolbars for GraphCard and the\n * various Inventory displays. Have to evaluate how to handle the global toolbar, one\n * consideration is creating optional widgets with self-contained state update ability\n * based off of context/props/etc.\n *\n * Moving existing products to this layout, or maintaining them \"as is\", then renaming and\n * relocating them to this directory if they've been customized beyond a basic layout.\n */\n/**\n * Display a product.\n *\n * @param {object} props\n * @param {object} props.productConfig\n * @param {object} props.routeDetail\n * @param {Function} props.t\n * @param {Node|boolean} props.toolbarGraph\n * @param {boolean} props.toolbarGraphDescription\n * @param {Node|boolean} props.toolbarProduct\n * @returns {Node}\n */\nconst ProductView = ({ productConfig, routeDetail, t, toolbarGraph, toolbarGraphDescription, toolbarProduct }) => {\n  const {\n    graphTallyQuery,\n    inventoryHostsQuery,\n    inventorySubscriptionsQuery,\n    query,\n    initialToolbarFilters,\n    initialGraphFilters,\n    initialGuestsFilters,\n    initialInventoryFilters,\n    initialInventorySettings,\n    initialSubscriptionsInventoryFilters\n  } = productConfig;\n\n  const {\n    query: initialQuery,\n    graphTallyQuery: initialGraphTallyQuery,\n    inventoryHostsQuery: initialInventoryHostsQuery,\n    inventorySubscriptionsQuery: initialInventorySubscriptionsQuery,\n    toolbarQuery: initialToolbarQuery\n  } = apiQueries.parseRhsmQuery(query, { graphTallyQuery, inventoryHostsQuery, inventorySubscriptionsQuery });\n\n  const { pathParameter: productId, productParameter: productLabel, viewParameter: viewId } = routeDetail;\n\n  if (!productId || !viewId) {\n    return null;\n  }\n\n  let graphCardTooltip = null;\n\n  if (toolbarGraphDescription) {\n    graphCardTooltip = (\n      <Tooltip\n        content={<p>{t('curiosity-graph.cardHeadingDescription', { context: productId })}</p>}\n        position={TooltipPosition.top}\n        enableFlip={false}\n        distance={5}\n        entryDelay={100}\n        exitDelay={0}\n      >\n        <sup className=\"curiosity-icon__info\">\n          <InfoCircleIcon />\n        </sup>\n      </Tooltip>\n    );\n  }\n\n  const graphCardTitle = (\n    <React.Fragment>\n      {t('curiosity-graph.cardHeading', { context: productId })}\n      {graphCardTooltip}\n    </React.Fragment>\n  );\n\n  return (\n    <PageLayout>\n      <PageHeader productLabel={productLabel} includeTour>\n        {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: productLabel })}\n      </PageHeader>\n      <PageMessages>\n        <BannerMessages productId={productId} viewId={viewId} query={initialQuery} />\n      </PageMessages>\n      <PageToolbar>\n        {(React.isValidElement(toolbarProduct) && toolbarProduct) ||\n          (toolbarProduct !== false && (\n            <ConnectedToolbar\n              filterOptions={initialToolbarFilters}\n              productId={productId}\n              query={initialToolbarQuery}\n              viewId={viewId}\n            />\n          ))}\n      </PageToolbar>\n      <PageSection>\n        <ConnectedGraphCard\n          key={`graph_${productId}`}\n          filterGraphData={initialGraphFilters}\n          query={initialGraphTallyQuery}\n          productId={productId}\n          viewId={viewId}\n          cardTitle={graphCardTitle}\n          productLabel={productLabel}\n        >\n          {(React.isValidElement(toolbarGraph) && toolbarGraph) ||\n            (toolbarGraph !== false && (\n              <ToolbarFieldGranularity\n                viewId={viewId}\n                value={initialGraphTallyQuery[RHSM_API_QUERY_TYPES.GRANULARITY]}\n              />\n            ))}\n        </ConnectedGraphCard>\n      </PageSection>\n      <PageSection>\n        <InventoryTabs key={`inventory_${productId}`} productId={productId}>\n          <InventoryTab key={`inventory_hosts_${productId}`} title={t('curiosity-inventory.tab', { context: 'hosts' })}>\n            <ConnectedInventoryList\n              key={`inv_${productId}`}\n              filterGuestsData={initialGuestsFilters}\n              filterInventoryData={initialInventoryFilters}\n              productId={productId}\n              settings={initialInventorySettings}\n              query={initialInventoryHostsQuery}\n              viewId={viewId}\n            />\n          </InventoryTab>\n          {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && (\n            <InventoryTab\n              key={`inventory_subs_${productId}`}\n              title={t('curiosity-inventory.tab', { context: 'subscriptions' })}\n            >\n              <ConnectedInventorySubscriptions\n                key={`subs_${productId}`}\n                filterInventoryData={initialSubscriptionsInventoryFilters}\n                productId={productId}\n                query={initialInventorySubscriptionsQuery}\n                viewId={viewId}\n              />\n            </InventoryTab>\n          )}\n        </InventoryTabs>\n      </PageSection>\n    </PageLayout>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), toolbarGraphDescription: boolean, routeDetail: object,\n *    productConfig: object, toolbarProduct: (Node|boolean)}}\n */\nProductView.propTypes = {\n  productConfig: PropTypes.shape({\n    graphTallyQuery: PropTypes.shape({\n      [RHSM_API_QUERY_TYPES.GRANULARITY]: PropTypes.oneOf([...Object.values(GRANULARITY_TYPES)])\n    }),\n    inventoryHostsQuery: PropTypes.shape({\n      [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SORT_TYPES)]),\n      [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n    }),\n    inventorySubscriptionsQuery: PropTypes.shape({\n      [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES)]),\n      [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n    }),\n    query: PropTypes.shape({\n      [RHSM_API_QUERY_TYPES.START_DATE]: PropTypes.string,\n      [RHSM_API_QUERY_TYPES.END_DATE]: PropTypes.string\n    }),\n    initialToolbarFilters: Toolbar.propTypes.filterOptions,\n    initialGraphFilters: GraphCard.propTypes.filterGraphData,\n    initialGuestsFilters: GuestsList.propTypes.filterGuestsData,\n    initialInventoryFilters: InventoryList.propTypes.filterInventoryData,\n    initialInventorySettings: InventoryList.propTypes.settings,\n    initialSubscriptionsInventoryFilters: InventorySubscriptions.propTypes.filterInventoryData\n  }).isRequired,\n  routeDetail: PropTypes.shape({\n    pathParameter: PropTypes.string,\n    productParameter: PropTypes.string,\n    viewParameter: PropTypes.string\n  }).isRequired,\n  t: PropTypes.func,\n  toolbarGraph: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n  toolbarGraphDescription: PropTypes.bool,\n  toolbarProduct: PropTypes.oneOfType([PropTypes.node, PropTypes.bool])\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), toolbarGraphDescription: boolean, toolbarProduct: (Node|boolean)}}\n */\nProductView.defaultProps = {\n  t: translate,\n  toolbarGraph: null,\n  toolbarGraphDescription: false,\n  toolbarProduct: null\n};\n\nexport { ProductView as default, ProductView };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, store, useSelector } from '../../redux';\nimport { Select } from '../form/select';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = dateHelpers.getRangedMonthDateTime().listDateTimeRanges.map(dateTime => ({\n  ...dateTime,\n  selected: false\n}));\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Array} props.options\n * @param {Function} props.t\n * @param {string} props.value\n * @param {string} props.viewId\n * @returns {Node}\n */\nconst ToolbarFieldRangedMonthly = ({ options, t, value, viewId }) => {\n  const updatedValue = useSelector(({ view }) => view.query?.[viewId]?.[RHSM_API_QUERY_TYPES.START_DATE], value);\n\n  const updatedOptions = options.map(option => ({\n    ...option,\n    selected: option.title === updatedValue || option.value.startDate.toISOString() === updatedValue\n  }));\n\n  /**\n   * On select, dispatch type.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @returns {void}\n   */\n  const onSelect = event => {\n    const { startDate, endDate } = event.value;\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: FIELD_TYPES.DAILY\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      }\n    ]);\n  };\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      placeholder={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      maxHeight={250}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{viewId: string, t: Function, options: Array, value: string}}\n */\nToolbarFieldRangedMonthly.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  t: PropTypes.func,\n  value: PropTypes.string,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{viewId: string, t: translate, options: Array, value: string}}\n */\nToolbarFieldRangedMonthly.defaultProps = {\n  options: toolbarFieldOptions,\n  t: translate,\n  value: translate('curiosity-toolbar.granularityRange', { context: 'current' }),\n  viewId: 'toolbarFieldRangeGranularity'\n};\n\nexport { ToolbarFieldRangedMonthly as default, ToolbarFieldRangedMonthly, toolbarFieldOptions };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  chart_color_blue_100 as chartColorBlueLight,\n  chart_color_blue_300 as chartColorBlueDark\n} from '@patternfly/react-tokens';\nimport { Label as PfLabel } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/DateFormat';\nimport {\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_TYPES,\n  RHSM_API_QUERY_SORT_TYPES\n} from '../../types/rhsmApiTypes';\nimport { ProductView } from './productView';\nimport { translate } from '../i18n/i18n';\nimport { dateHelpers } from '../../common';\nimport { ToolbarFieldRangedMonthly } from '../toolbar/toolbarFieldRangedMonthly';\n\n/**\n * An OpenShift Dedicated configured view.\n *\n * @param {object} props\n * @param {object} props.productConfig\n * @param {object} props.routeDetail\n * @returns {Node}\n */\nconst ProductViewOpenShiftDedicated = ({ productConfig, routeDetail }) => {\n  const { viewParameter: viewId } = routeDetail;\n  const { [RHSM_API_QUERY_TYPES.START_DATE]: startDate } = productConfig.graphTallyQuery;\n\n  return (\n    <ProductView\n      routeDetail={routeDetail}\n      productConfig={productConfig}\n      toolbarProduct={false}\n      toolbarGraph={<ToolbarFieldRangedMonthly value={startDate} viewId={viewId} />}\n      toolbarGraphDescription\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{routeDetail: object, productConfig:object}}\n */\nProductViewOpenShiftDedicated.propTypes = {\n  productConfig: ProductView.propTypes.productConfig,\n  routeDetail: PropTypes.shape({\n    pathParameter: PropTypes.string,\n    productParameter: PropTypes.string,\n    viewParameter: PropTypes.string\n  }).isRequired\n};\n\n/**\n * Default props.\n *\n * @type {{ productConfig: object }}\n */\nProductViewOpenShiftDedicated.defaultProps = {\n  productConfig: {\n    query: {\n      [RHSM_API_QUERY_TYPES.START_DATE]: dateHelpers.getRangedMonthDateTime('current').value.startDate.toISOString(),\n      [RHSM_API_QUERY_TYPES.END_DATE]: dateHelpers.getRangedMonthDateTime('current').value.endDate.toISOString()\n    },\n    graphTallyQuery: {\n      [RHSM_API_QUERY_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY\n    },\n    inventoryHostsQuery: {\n      [RHSM_API_QUERY_TYPES.SORT]: RHSM_API_QUERY_SORT_TYPES.LAST_SEEN,\n      [RHSM_API_QUERY_TYPES.DIRECTION]: SORT_DIRECTION_TYPES.DESCENDING,\n      [RHSM_API_QUERY_TYPES.LIMIT]: 100,\n      [RHSM_API_QUERY_TYPES.OFFSET]: 0\n    },\n    initialGraphFilters: [\n      {\n        id: 'coreHours',\n        fill: chartColorBlueLight.value,\n        stroke: chartColorBlueDark.value,\n        color: chartColorBlueDark.value\n      }\n    ],\n    initialInventoryFilters: [\n      {\n        id: 'displayName',\n        cell: data => {\n          const { displayName = {}, inventoryId = {}, numberOfGuests = {} } = data;\n\n          if (!inventoryId.value) {\n            return displayName.value;\n          }\n\n          const updatedDisplayName = displayName.value || inventoryId.value;\n\n          return (\n            <React.Fragment>\n              {updatedDisplayName}{' '}\n              {(numberOfGuests.value &&\n                translate('curiosity-inventory.label', { context: 'numberOfGuests', count: numberOfGuests.value }, [\n                  <PfLabel color=\"blue\" />\n                ])) ||\n                ''}\n            </React.Fragment>\n          );\n        },\n        isSortable: true\n      },\n      {\n        id: 'coreHours',\n        cell: data =>\n          (typeof data?.coreHours?.value === 'number' && Number.parseFloat(data?.coreHours?.value).toFixed(2)) ||\n          `0.00`,\n        isSortable: true,\n        isWrappable: true,\n        cellWidth: 15\n      },\n      {\n        id: 'lastSeen',\n        header: translate('curiosity-inventory.header', { context: 'lastSeen_OpenShift-dedicated-metrics' }),\n        cell: data => (data?.lastSeen?.value && <DateFormat date={data?.lastSeen?.value} />) || '',\n        isSortable: true,\n        isWrappable: true,\n        cellWidth: 15\n      }\n    ],\n    initialToolbarFilters: undefined\n  }\n};\n\nexport { ProductViewOpenShiftDedicated as default, ProductViewOpenShiftDedicated };\n"],"sourceRoot":""}