{"version":3,"sources":["components/openshiftView/openshiftView.js"],"names":["OpenshiftView","state","option","graphFilters","inventoryFilters","onSelect","event","props","initialGraphFilters","initialInventoryFilters","routeDetail","viewId","value","filter","id","optional","RegExp","test","setState","paginationHelpers","resetPage","productId","pathParameter","store","dispatch","type","reduxTypes","query","SET_QUERY_RHSM_TYPES","RHSM_API_QUERY_TYPES","UOM","initialOption","this","t","options","title","context","RHSM_API_QUERY_UOM_TYPES","CORES","SOCKETS","selectedOptions","initialGuestsFilters","initialToolbarFilters","location","isC3","parsedSearch","c3","apiQueries","parseRhsmQuery","graphQuery","inventoryQuery","toolbarQuery","appName","helpers","UI_DISPLAY_NAME","filterOptions","key","filterGraphData","cardTitle","productShortLabel","renderSelect","filterGuestsData","filterInventoryData","React","Component","defaultProps","GRANULARITY","GRANULARITY_TYPES","DAILY","LIMIT","OFFSET","fill","chartColorBlueLight","stroke","chartColorBlueDark","color","cell","obj","displayName","inventoryId","isInline","component","variant","target","href","hardwareType","numberOfGuests","Fragment","translate","isRead","SLA","makeMapStateToProps","reduxSelectors","view","makeView","ConnectedOpenshiftView","connect"],"mappings":"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","file":"static/js/8.2460bf00.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  chart_color_blue_100 as chartColorBlueLight,\n  chart_color_blue_300 as chartColorBlueDark\n} from '@patternfly/react-tokens';\nimport { Badge, Button } from '@patternfly/react-core';\nimport { PageLayout, PageHeader, PageSection, PageToolbar } from '../pageLayout/pageLayout';\nimport {\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_TYPES,\n  RHSM_API_QUERY_UOM_TYPES\n} from '../../types/rhsmApiTypes';\nimport { apiQueries, connect, reduxSelectors, reduxTypes, store } from '../../redux';\nimport GraphCard from '../graphCard/graphCard';\nimport C3GraphCard from '../c3GraphCard/c3GraphCard';\nimport { Select } from '../form/select';\nimport Toolbar from '../toolbar/toolbar';\nimport InventoryList from '../inventoryList/inventoryList';\nimport { paginationHelpers } from '../pagination/paginationHelpers';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * An OpenShift encompassing view.\n *\n * @augments React.Component\n * @fires onSelect\n */\nclass OpenshiftView extends React.Component {\n  state = {\n    option: null,\n    graphFilters: [],\n    inventoryFilters: []\n  };\n\n  componentDidMount() {\n    const { initialOption } = this.props;\n    this.onSelect({ value: initialOption });\n  }\n\n  /**\n   * Apply a selected filtered value.\n   *\n   * @event onSelect\n   * @param {object} event\n   */\n  onSelect = (event = {}) => {\n    const { option } = this.state;\n    const { initialGraphFilters, initialInventoryFilters, routeDetail, viewId } = this.props;\n    const { value } = event;\n\n    if (value !== option) {\n      const filter = ({ id, optional }) => {\n        if (!optional) {\n          return true;\n        }\n        return new RegExp(value, 'i').test(id);\n      };\n\n      const graphFilters = initialGraphFilters.filter(filter);\n      const inventoryFilters = initialInventoryFilters.filter(filter);\n\n      this.setState(\n        {\n          option,\n          graphFilters,\n          inventoryFilters\n        },\n        () => {\n          paginationHelpers.resetPage({ productId: routeDetail.pathParameter, viewId });\n\n          store.dispatch({\n            type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.UOM],\n            viewId,\n            [RHSM_API_QUERY_TYPES.UOM]: value\n          });\n        }\n      );\n    }\n  };\n\n  /**\n   * Render a select/dropdown list.\n   *\n   * @returns {Node}\n   */\n  renderSelect() {\n    const { option } = this.state;\n    const { initialOption, t } = this.props;\n    const options = [\n      {\n        title: t('curiosity-toolbar.uom', { context: RHSM_API_QUERY_UOM_TYPES.CORES }),\n        value: RHSM_API_QUERY_UOM_TYPES.CORES\n      },\n      {\n        title: t('curiosity-toolbar.uom', { context: RHSM_API_QUERY_UOM_TYPES.SOCKETS }),\n        value: RHSM_API_QUERY_UOM_TYPES.SOCKETS\n      }\n    ];\n\n    return <Select onSelect={this.onSelect} options={options} selectedOptions={option || initialOption} />;\n  }\n\n  /**\n   * Render an OpenShift view.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { graphFilters, inventoryFilters } = this.state;\n    const { initialGuestsFilters, initialToolbarFilters, location, query, routeDetail, t, viewId } = this.props;\n    const isC3 = location?.parsedSearch?.c3 === '';\n    const { graphQuery, inventoryQuery, toolbarQuery } = apiQueries.parseRhsmQuery(query);\n\n    return (\n      <PageLayout>\n        <PageHeader viewId={viewId}>\n          {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: viewId })}\n        </PageHeader>\n        <PageToolbar>\n          <Toolbar\n            filterOptions={initialToolbarFilters}\n            productId={routeDetail.pathParameter}\n            query={toolbarQuery}\n            viewId={viewId}\n          />\n        </PageToolbar>\n        <PageSection>\n          {(isC3 && (\n            <C3GraphCard\n              key={routeDetail.pathParameter}\n              filterGraphData={graphFilters}\n              query={graphQuery}\n              productId={routeDetail.pathParameter}\n              viewId={viewId}\n              cardTitle={t('curiosity-graph.cardHeading')}\n              productShortLabel={viewId}\n            >\n              {this.renderSelect()}\n            </C3GraphCard>\n          )) || (\n            <GraphCard\n              key={routeDetail.pathParameter}\n              filterGraphData={graphFilters}\n              query={graphQuery}\n              productId={routeDetail.pathParameter}\n              viewId={viewId}\n              cardTitle={t('curiosity-graph.cardHeading')}\n              productShortLabel={viewId}\n            >\n              {this.renderSelect()}\n            </GraphCard>\n          )}\n        </PageSection>\n        <PageSection>\n          <InventoryList\n            key={routeDetail.pathParameter}\n            filterGuestsData={initialGuestsFilters}\n            filterInventoryData={inventoryFilters}\n            query={inventoryQuery}\n            productId={routeDetail.pathParameter}\n            viewId={viewId}\n            cardTitle={t('curiosity-inventory.cardHeading')}\n          />\n        </PageSection>\n      </PageLayout>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{initialOption: string, initialToolbarFilters: Array, viewId: string, t: Function, query: object,\n *     initialGraphFilters: Array, routeDetail: object, location: object, initialGuestsFilters: Array,\n *     initialInventoryFilters: Array}}\n */\nOpenshiftView.propTypes = {\n  query: PropTypes.shape({\n    [RHSM_API_QUERY_TYPES.GRANULARITY]: PropTypes.oneOf([...Object.values(GRANULARITY_TYPES)])\n  }),\n  initialOption: PropTypes.oneOf(Object.values(RHSM_API_QUERY_UOM_TYPES)),\n  initialGraphFilters: PropTypes.array,\n  initialGuestsFilters: PropTypes.array,\n  initialInventoryFilters: PropTypes.array,\n  initialToolbarFilters: PropTypes.array,\n  location: PropTypes.shape({\n    parsedSearch: PropTypes.objectOf(PropTypes.string)\n  }).isRequired,\n  routeDetail: PropTypes.shape({\n    pathParameter: PropTypes.string.isRequired,\n    pathId: PropTypes.string.isRequired,\n    routeItem: PropTypes.shape({\n      title: PropTypes.string\n    })\n  }).isRequired,\n  t: PropTypes.func,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{initialOption: string, initialToolbarFilters: Array, viewId: string, t: translate, query: object,\n *     initialGraphFilters: Array, initialGuestsFilters: Array, initialInventoryFilters: Array}}\n */\nOpenshiftView.defaultProps = {\n  query: {\n    [RHSM_API_QUERY_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY,\n    [RHSM_API_QUERY_TYPES.LIMIT]: 10,\n    [RHSM_API_QUERY_TYPES.OFFSET]: 0,\n    [RHSM_API_QUERY_TYPES.UOM]: RHSM_API_QUERY_UOM_TYPES.CORES\n  },\n  initialOption: RHSM_API_QUERY_UOM_TYPES.CORES,\n  initialGraphFilters: [\n    {\n      id: 'cores',\n      optional: true,\n      fill: chartColorBlueLight.value,\n      stroke: chartColorBlueDark.value,\n      color: chartColorBlueDark.value\n    },\n    {\n      id: 'sockets',\n      optional: true,\n      fill: chartColorBlueLight.value,\n      stroke: chartColorBlueDark.value,\n      color: chartColorBlueDark.value\n    },\n    { id: 'thresholdSockets', optional: true },\n    { id: 'thresholdCores', optional: true }\n  ],\n  initialGuestsFilters: [\n    {\n      id: 'displayName',\n      cell: obj => {\n        const { displayName, inventoryId } = obj;\n\n        if (!inventoryId?.value) {\n          return displayName?.value;\n        }\n\n        return (\n          <Button\n            isInline\n            component=\"a\"\n            variant=\"link\"\n            target=\"_blank\"\n            href={`/insights/inventory/${inventoryId.value}/`}\n          >\n            {displayName.value || inventoryId.value}\n          </Button>\n        );\n      }\n    },\n    {\n      id: 'inventoryId'\n    },\n    {\n      id: 'lastSeen'\n    }\n  ],\n  initialInventoryFilters: [\n    {\n      id: 'displayName',\n      cell: obj => {\n        const { displayName, inventoryId } = obj;\n\n        if (!inventoryId?.value) {\n          return displayName?.value;\n        }\n\n        return (\n          <Button\n            isInline\n            component=\"a\"\n            variant=\"link\"\n            target=\"_blank\"\n            href={`/insights/inventory/${inventoryId.value}/`}\n          >\n            {displayName.value || inventoryId.value}\n          </Button>\n        );\n      }\n    },\n    {\n      id: 'hardwareType',\n      cell: obj => {\n        const { hardwareType, numberOfGuests } = obj;\n        return (\n          <React.Fragment>\n            {translate('curiosity-inventory.hardwareType', { context: hardwareType.value })}{' '}\n            {(numberOfGuests.value && <Badge isRead>{numberOfGuests.value}</Badge>) || ''}\n          </React.Fragment>\n        );\n      }\n    },\n    {\n      id: 'sockets',\n      optional: true\n    },\n    {\n      id: 'cores',\n      optional: true\n    },\n    {\n      id: 'lastSeen'\n    }\n  ],\n  initialToolbarFilters: [\n    {\n      id: RHSM_API_QUERY_TYPES.SLA\n    }\n  ],\n  t: translate,\n  viewId: 'OpenShift'\n};\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.view.makeView(OpenshiftView.defaultProps);\n\nconst ConnectedOpenshiftView = connect(makeMapStateToProps)(OpenshiftView);\n\nexport { ConnectedOpenshiftView as default, ConnectedOpenshiftView, OpenshiftView };\n"],"sourceRoot":""}