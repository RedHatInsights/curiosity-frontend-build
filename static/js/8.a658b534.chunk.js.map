{"version":3,"sources":["components/toolbar/toolbarFieldRangedMonthly.js","components/toolbar/toolbarFieldUom.js","components/productView/productViewOpenShiftContainer.js"],"names":["toolbarFieldOptions","dateHelpers","getRangedMonthDateTime","listDateTimeRanges","map","dateTime","selected","ToolbarFieldRangedMonthly","options","t","value","viewId","updatedValue","useSelector","view","query","RHSM_API_QUERY_TYPES","START_DATE","updatedOptions","option","title","startDate","toISOString","aria-label","context","onSelect","event","endDate","store","dispatch","type","reduxTypes","SET_QUERY_CLEAR_INVENTORY_LIST","SET_QUERY_RHSM_TYPES","GRANULARITY","FIELD_TYPES","DAILY","END_DATE","placeholder","maxHeight","defaultProps","translate","Object","values","ToolbarFieldUom","UOM","SET_QUERY_RESET_INVENTORY_LIST","selectedOptions","CORES","ProductViewOpenShiftContainer","productConfig","routeDetail","uomValue","viewProductLabel","productParameter","productLabel","includeTour","appName","helpers","UI_DISPLAY_NAME","config","updatedUomValue","productContextFilterUom","graphTallyQuery","inventoryHostsQuery","inventorySubscriptionsQuery","initialGraphFilters","initialGuestsFilters","initialInventoryFilters","initialInventorySettings","initialSubscriptionsInventoryFilters","initialToolbarFilters","productId","uomFilter","apiQueries","parseRhsmQuery","initialGraphTallyQuery","initialInventoryHostsQuery","initialInventorySubscriptionsQuery","toolbarQuery","graphFilters","inventoryFilters","subscriptionsInventoryFilters","filter","id","isOptional","RegExp","test","graphCardTitle","Fragment","Tooltip","content","position","TooltipPosition","top","enableFlip","distance","entryDelay","exitDelay","className","filterOptions","filterGraphData","cardTitle","RHSM_API_PATH_ID_TYPES","OPENSHIFT","OPENSHIFT_METRICS","filterGuestsData","filterInventoryData","settings","UI_DISABLED_TABLE_SUBSCRIPTIONS","renderProduct","RHSM_API_QUERY_UOM_TYPES","getRangedDateTime","GRANULARITY_TYPES","SORT","RHSM_API_QUERY_SORT_TYPES","LAST_SEEN","DIRECTION","SORT_DIRECTION_TYPES","DESCENDING","LIMIT","OFFSET","RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES","UPCOMING_EVENT_DATE","initialOption","fill","chartColorBlueLight","stroke","chartColorBlueDark","color","header","cell","data","session","displayName","inventoryId","authorized","inventory","Button","isInline","component","variant","href","UI_DEPLOY_PATH_PREFIX","cellWidth","lastSeen","DateFormat","date","numberOfGuests","updatedDisplayName","count","isSortable","isWrappable","upcomingEventDate","moment","utc","format","SLA","coreHours","Number","parseFloat","toFixed","undefined"],"mappings":"8OAaMA,EAAsBC,IAAYC,yBAAyBC,mBAAmBC,KAAI,SAAAC,GAAQ,kCAC3FA,GAD2F,IAE9FC,UAAU,OAcNC,EAA4B,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,EAAGC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAChDC,EAAeC,aAAY,uCAAGC,KAAgBC,aAAnB,iBAAc,EAAaJ,UAA3B,aAAc,EAAuBK,IAAqBC,cAAaP,GAElGQ,EAAiBV,EAAQJ,KAAI,SAAAe,GAAM,kCACpCA,GADoC,IAEvCb,SAAUa,EAAOC,QAAUR,GAAgBO,EAAOT,MAAMW,UAAUC,gBAAkBV,OAmCtF,OACE,cAAC,IAAD,CACEW,aAAYd,EAAE,gCAAiC,CAAEe,QAAS,gBAC1DC,SA5Ba,SAAAC,GAAU,IAAD,EACOA,EAAMhB,MAA7BW,EADgB,EAChBA,UAAWM,EADK,EACLA,QACnBC,IAAMC,SAAS,CACb,CACEC,KAAMC,IAAWhB,MAAMiB,+BACvBrB,UAHW,aAMXmB,KAAMC,IAAWhB,MAAMkB,qBAAqBjB,IAAqBkB,aACjEvB,UACCK,IAAqBkB,YAAcC,IAAYC,OARrC,aAWXN,KAAMC,IAAWhB,MAAMkB,qBAAqBjB,IAAqBC,YACjEN,UACCK,IAAqBC,WAAaI,EAAUC,eAblC,aAgBXQ,KAAMC,IAAWhB,MAAMkB,qBAAqBjB,IAAqBqB,UACjE1B,UACCK,IAAqBqB,SAAWV,EAAQL,kBAS3Cd,QAASU,EACToB,YAAa7B,EAAE,gCAAiC,CAAEe,QAAS,gBAC3De,UAAW,OA4BjBhC,EAA0BiC,aAAe,CACvChC,QAASR,EACTS,EAAGgC,IACH/B,MAAO+B,YAAU,qCAAsC,CAAEjB,QAAS,YAClEb,OAAQ,iC,yUC/FJX,EAAsB0C,OAAOC,OAAOR,KAAa/B,KAAI,SAAA0B,GAAI,MAAK,CAClEV,MAAOqB,YAAU,wBAAyB,CAAEjB,QAASM,IACrDpB,MAAOoB,EACPxB,UAAU,MAcNsC,EAAkB,SAAC,GAAmC,IAAjCpC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,EAAGC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OACtCC,EAAeC,aAAY,uCAAGC,KAAgBC,aAAnB,iBAAc,EAAaJ,UAA3B,aAAc,EAAuBK,IAAqB6B,OAAMnC,GAE3FQ,EAAiBV,EAAQJ,KAAI,SAAAe,GAAM,kCAAUA,GAAV,IAAkBb,SAAUa,EAAOT,QAAUE,OAsBtF,OACE,cAAC,IAAD,CACEW,aAAYd,EAAE,gCAAiC,CAAEe,QAAS,QAC1DC,SAhBa,SAAAC,GAAK,OACpBE,IAAMC,SAAS,CACb,CACEC,KAAMC,IAAWhB,MAAM+B,+BACvBnC,UAHW,aAMXmB,KAAMC,IAAWhB,MAAMkB,qBAAqBjB,IAAqB6B,KACjElC,UACCK,IAAqB6B,IAAMnB,EAAMhB,UAQpCF,QAASU,EACT6B,gBAAiBnC,EACjB0B,YAAa7B,EAAE,gCAAiC,CAAEe,QAAS,WA4BjEoB,EAAgBJ,aAAe,CAC7BhC,QAASR,EACTS,EAAGgC,IACH/B,MAAOyB,IAAYa,MACnBrC,OAAQ,mB,kFCnDJsC,EAAgC,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,cAAeC,EAAqB,EAArBA,YAAa1C,EAAQ,EAARA,EAC7D2C,EAAWvC,aAAY,uCAAGC,KAAgBC,aAAnB,iBAAc,EAAamC,EAAc,GAAGvC,eAA5C,aAAc,EAAwCK,IAAqB6B,OAAM,MACpFQ,EAAqBF,EAAvCG,iBAmIR,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAYC,aAAcF,EAAkBG,aAAW,EAAvD,SACG/C,EAAE,uBAAwB,CAAEgD,QAASC,IAAQC,gBAAiBnC,QAAS6B,MAE1E,cAAC,IAAD,UAAcH,EAAc9C,KAAI,SAAAwD,GAAM,OAtIpB,SAACA,EAAQC,GAAqB,IAEhDC,EAcEF,EAdFE,wBAF+C,EAgB7CF,EAbF7C,aAH+C,MAGvC,GAHuC,IAgB7C6C,EAZFG,uBAJ+C,MAI7B,GAJ6B,IAgB7CH,EAXFI,2BAL+C,MAKzB,GALyB,IAgB7CJ,EAVFK,mCAN+C,MAMjB,GANiB,IAgB7CL,EATFM,2BAP+C,MAOzB,GAPyB,IAgB7CN,EARFO,4BAR+C,MAQxB,GARwB,IAgB7CP,EAPFQ,+BAT+C,MASrB,GATqB,IAgB7CR,EANFS,gCAV+C,MAUpB,GAVoB,EAW/CC,EAKEV,EALFU,qCACAC,EAIEX,EAJFW,sBACAhB,EAGEK,EAHFL,aACAiB,EAEEZ,EAFFY,UACA7D,EACEiD,EADFjD,OAGF,IAAK6D,IAAc7D,EACjB,OAAO,KAnBwC,IAgC7C8D,EAhC6C,EA2B7CC,IAAWC,eAAe5D,EAAO,CAAEgD,kBAAiBC,sBAAqBC,gCAJ1DW,EAvB8B,EAuB/Cb,gBACqBc,EAxB0B,EAwB/Cb,oBAC6Bc,EAzBkB,EAyB/Cb,4BACAc,EA1B+C,EA0B/CA,aAGEC,EAAed,EACfe,EAAmBb,EACnBc,EAAgCZ,EAGpC,GAAIR,EAAyB,CAC3BW,EAAYZ,GAAmB9C,EAAMC,IAAqB6B,KAE1D,IAAMsC,EAAS,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,GAChB,OADqC,EAAjBC,YAIb,IAAIC,OAAOb,EAAW,KAAKc,KAAKH,IAGzCJ,EAAed,EAAoBiB,OAAOA,GAC1CF,EAAmBb,EAAwBe,OAAOA,GAClDD,EAAgCZ,EAAqCa,OAAOA,GAG9E,IAAMK,EACJ,eAAC,IAAMC,SAAP,WACGhF,EAAE,8BAA+B,CAAEe,QAASgD,IAC7C,cAACkB,EAAA,EAAD,CACEC,QAAS,4BAAIlF,EAAE,yCAA0C,CAAEe,QAASgD,MACpEoB,SAAUC,IAAgBC,IAC1BC,YAAY,EACZC,SAAU,EACVC,WAAY,IACZC,UAAW,EANb,SAQE,qBAAKC,UAAU,uBAAf,SACE,cAAC,IAAD,WAMR,OACE,eAAC,IAAMV,SAAP,WACGlB,GACC,cAAC,IAAD,UACE,cAAC,IAAD,CAAS6B,cAAe7B,EAAuBC,UAAWA,EAAWzD,MAAOgE,EAAcpE,OAAQA,MAGtG,cAAC,IAAD,UACE,eAAC,IAAD,CAEE0F,gBAAiBrB,EACjBjE,MAAO6D,EACPJ,UAAWA,EACX7D,OAAQA,EACR2F,UAAWd,EACXjC,aAAcA,EAPhB,UASGiB,IAAc+B,IAAuBC,WAAa/B,GACjD,cAAC,EAAD,CAAiB/D,MAAO+D,EAAW9D,OAAQA,IAE5C6D,IAAc+B,IAAuBC,WACpC,cAAC,IAAD,CAAyB9F,MAAOqD,EAAgB/C,IAAqBkB,aAAcvB,OAAQA,IAE5F6D,IAAc+B,IAAuBE,mBAAqB,cAAC,IAAD,CAA2B9F,OAAQA,MAfhG,gBACgB6D,MAiBlB,cAAC,IAAD,UACE,eAAC,IAAD,CAA8CA,UAAWA,EAAzD,UACE,cAAC,IAAD,CAEEpD,MAAOX,EAAE,0BAA2B,CAAEe,QAAS,UAFjD,SAIE,cAAC,IAAD,CAEEkF,iBAAkBvC,EAClBwC,oBAAqB1B,EACrBT,UAAWA,EACXoC,SAAUvC,EACVtD,MAAO8D,EACPlE,OAAQA,GAPV,cACc6D,KALhB,0BAC0BA,KAaxBd,IAAQmD,iCAAmCvC,GAC3C,cAAC,IAAD,CAEElD,MAAOX,EAAE,0BAA2B,CAAEe,QAAS,kBAFjD,SAIE,cAAC,IAAD,CAEEmF,oBAAqBzB,EACrBV,UAAWA,EACXzD,MAAO+D,EACPnE,OAAQA,GALV,eACe6D,KALjB,yBACyBA,MAjB7B,oBAAiCA,QA1BrC,kBAAgCA,EAAhC,YAA6CC,IAkEHqC,CAAclD,EAAQR,YA4DtEH,EAA8BT,aAAe,CAC3CU,cAAe,CACb,CACEY,yBAAyB,EACzB/C,OAAK,mBACFC,IAAqB6B,IAAMkE,IAAyB/D,OADlD,cAEFhC,IAAqBC,WAAahB,IAChC+G,kBAAkBC,IAAkB7E,OACpCf,UAAUC,eAJV,cAKFN,IAAqBqB,SAAWpC,IAAY+G,kBAAkBC,IAAkB7E,OAAOT,QAAQL,eAL7F,GAOLyC,gBAAgB,eACb/C,IAAqBkB,YAAc+E,IAAkB7E,OAExD4B,qBAAmB,mBAChBhD,IAAqBkG,KAAOC,IAA0BC,WADtC,cAEhBpG,IAAqBqG,UAAYC,IAAqBC,YAFtC,cAGhBvG,IAAqBwG,MAAQ,KAHb,cAIhBxG,IAAqByG,OAAS,GAJd,GAMnBxD,6BAA2B,mBACxBjD,IAAqBkG,KAAOQ,IAAwCC,qBAD5C,cAExB3G,IAAqBqG,UAAYC,IAAqBC,YAF9B,cAGxBvG,IAAqBwG,MAAQ,KAHL,cAIxBxG,IAAqByG,OAAS,GAJN,GAM3BG,cAAeb,IAAyB/D,MACxCkB,oBAAqB,CACnB,CACEkB,GAAI,QACJC,YAAY,EACZwC,KAAMC,IAAoBpH,MAC1BqH,OAAQC,IAAmBtH,MAC3BuH,MAAOD,IAAmBtH,OAE5B,CACE0E,GAAI,UACJC,YAAY,EACZwC,KAAMC,IAAoBpH,MAC1BqH,OAAQC,IAAmBtH,MAC3BuH,MAAOD,IAAmBtH,OAE5B,CAAE0E,GAAI,mBAAoBC,YAAY,GACtC,CAAED,GAAI,iBAAkBC,YAAY,IAEtClB,qBAAsB,CACpB,CACEiB,GAAI,cACJ8C,OAAQzF,YAAU,6BAA8B,CAAEjB,QAAS,sBAC3D2G,KAAM,SAACC,EAAMC,GAAa,IAChBC,EAA6BF,EAA7BE,YAAaC,EAAgBH,EAAhBG,YACFC,IAAsB,OAAPH,QAAO,IAAPA,OAAA,EAAAA,EAASG,aAAc,IAAjDC,UAER,OAAI,OAACF,QAAD,IAACA,OAAD,EAACA,EAAa7H,OAIb8H,EAKH,cAACE,EAAA,EAAD,CACEC,UAAQ,EACRC,UAAU,IACVC,QAAQ,OACRC,KAAI,UAAKpF,IAAQqF,sBAAb,+BAAyDR,EAAY7H,MAArE,KAJN,SAMG4H,EAAY5H,OAAS6H,EAAY7H,SAVlB,OAAX4H,QAAW,IAAXA,OAAA,EAAAA,EAAa5H,SAAb,OAAsB6H,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAa7H,OAJ1C,OAAO4H,QAAP,IAAOA,OAAP,EAAOA,EAAa5H,QAmB1B,CACE0E,GAAI,cACJ4D,UAAW,IAEb,CACE5D,GAAI,WACJ+C,KAAM,SAAAC,GAAI,eAAS,OAAJA,QAAI,IAAJA,GAAA,UAAAA,EAAMa,gBAAN,eAAgBvI,QAAS,cAACwI,EAAA,WAAD,CAAYC,KAAI,OAAEf,QAAF,IAAEA,GAAF,UAAEA,EAAMa,gBAAR,aAAE,EAAgBvI,SAAc,IACxFsI,UAAW,KAGf5E,wBAAyB,CACvB,CACEgB,GAAI,cACJ+C,KAAM,SAACC,EAAMC,GAAa,IAAD,EAC6CD,EAA5DE,mBADe,MACD,GADC,IAC6CF,EAA1CG,mBADH,MACiB,GADjB,IAC6CH,EAAxBgB,sBADrB,MACsC,GADtC,EAEJZ,IAAsB,OAAPH,QAAO,IAAPA,OAAA,EAAAA,EAASG,aAAc,IAAjDC,UAER,IAAKF,EAAY7H,MACf,OAAO4H,EAAY5H,MAGrB,IAAI2I,EAAqBf,EAAY5H,OAAS6H,EAAY7H,MAe1D,OAbI8H,IACFa,EACE,cAACX,EAAA,EAAD,CACEC,UAAQ,EACRC,UAAU,IACVC,QAAQ,OACRC,KAAI,UAAKpF,IAAQqF,sBAAb,+BAAyDR,EAAY7H,MAArE,KAJN,SAMG4H,EAAY5H,OAAS6H,EAAY7H,SAMtC,eAAC,IAAM+E,SAAP,WACG4D,EAAoB,IACnBD,EAAe1I,OACf+B,YAAU,4BAA6B,CAAEjB,QAAS,iBAAkB8H,MAAOF,EAAe1I,OAAS,CACjG,cAAC,IAAD,CAASuH,MAAM,YAEjB,OAIRsB,YAAY,GAEd,CACEnE,GAAI,UACJ8C,OAAQzF,YAAU,6BAA8B,CAAEjB,QAAS,yCAC3D6D,YAAY,EACZkE,YAAY,EACZC,aAAa,EACbR,UAAW,IAEb,CACE5D,GAAI,QACJ8C,OAAQzF,YAAU,6BAA8B,CAAEjB,QAAS,uCAC3D6D,YAAY,EACZkE,YAAY,EACZC,aAAa,EACbR,UAAW,IAEb,CACE5D,GAAI,WACJ+C,KAAM,SAAAC,GAAI,eAAS,OAAJA,QAAI,IAAJA,GAAA,UAAAA,EAAMa,gBAAN,eAAgBvI,QAAS,cAACwI,EAAA,WAAD,CAAYC,KAAI,OAAEf,QAAF,IAAEA,GAAF,UAAEA,EAAMa,gBAAR,aAAE,EAAgBvI,SAAc,IACxF6I,YAAY,EACZC,aAAa,EACbR,UAAW,KAGf3E,yBAA0B,GAC1BC,qCAAsC,CACpC,CACEc,GAAI,cACJmE,YAAY,GAEd,CACEnE,GAAI,eACJmE,YAAY,EACZC,aAAa,EACbR,UAAW,IAEb,CACE5D,GAAI,oBACJ+C,KAAM,SAAAC,GAAI,eACH,OAAJA,QAAI,IAAJA,GAAA,UAAAA,EAAMqB,yBAAN,eAAyB/I,QAASgJ,IAAOC,IAAP,OAAWvB,QAAX,IAAWA,GAAX,UAAWA,EAAMqB,yBAAjB,aAAW,EAAyB/I,OAAOkJ,OAAO,eAAkB,IACzGL,YAAY,EACZC,aAAa,EACbR,UAAW,KAGfzE,sBAAuB,CACrB,CACEa,GAAIpE,IAAqB6I,MAG7BtG,aAAc,YACdiB,UAAW+B,IAAuBC,UAClC7F,OAAQ,iBAEV,CACEI,OAAK,mBACFC,IAAqBC,WAAahB,IAAYC,uBAAuB,WAAWQ,MAAMW,UAAUC,eAD9F,cAEFN,IAAqBqB,SAAWpC,IAAYC,uBAAuB,WAAWQ,MAAMiB,QAAQL,eAF1F,GAILyC,gBAAgB,eACb/C,IAAqBkB,YAAc+E,IAAkB7E,OAExD4B,qBAAmB,mBAChBhD,IAAqBkG,KAAOC,IAA0BC,WADtC,cAEhBpG,IAAqBqG,UAAYC,IAAqBC,YAFtC,cAGhBvG,IAAqBwG,MAAQ,KAHb,cAIhBxG,IAAqByG,OAAS,GAJd,GAMnBvD,oBAAqB,CACnB,CACEkB,GAAI,YACJyC,KAAMC,IAAoBpH,MAC1BqH,OAAQC,IAAmBtH,MAC3BuH,MAAOD,IAAmBtH,QAG9B0D,wBAAyB,CACvB,CACEgB,GAAI,cACJ+C,KAAM,SAAAC,GAAS,IAAD,EACwDA,EAA5DE,mBADI,MACU,GADV,IACwDF,EAA1CG,mBADd,MAC4B,GAD5B,IACwDH,EAAxBgB,sBADhC,MACiD,GADjD,EAGZ,IAAKb,EAAY7H,MACf,OAAO4H,EAAY5H,MAGrB,IAAM2I,EAAqBf,EAAY5H,OAAS6H,EAAY7H,MAE5D,OACE,eAAC,IAAM+E,SAAP,WACG4D,EAAoB,IACnBD,EAAe1I,OACf+B,YAAU,4BAA6B,CAAEjB,QAAS,iBAAkB8H,MAAOF,EAAe1I,OAAS,CACjG,cAAC,IAAD,CAASuH,MAAM,YAEjB,OAIRsB,YAAY,GAEd,CACEnE,GAAI,YACJ+C,KAAM,SAAAC,GAAI,cAC2B,kBAAlC,OAAOA,QAAP,IAAOA,GAAP,UAAOA,EAAM0B,iBAAb,aAAO,EAAiBpJ,QAAsBqJ,OAAOC,WAAP,OAAkB5B,QAAlB,IAAkBA,GAAlB,UAAkBA,EAAM0B,iBAAxB,aAAkB,EAAiBpJ,OAAOuJ,QAAQ,IAAjG,QAEFV,YAAY,EACZC,aAAa,EACbR,UAAW,IAEb,CACE5D,GAAI,WACJ+C,KAAM,SAAAC,GAAI,eAAS,OAAJA,QAAI,IAAJA,GAAA,UAAAA,EAAMa,gBAAN,eAAgBvI,QAAS,cAACwI,EAAA,WAAD,CAAYC,KAAI,OAAEf,QAAF,IAAEA,GAAF,UAAEA,EAAMa,gBAAR,aAAE,EAAgBvI,SAAc,IACxF6I,YAAY,EACZC,aAAa,EACbR,UAAW,KAGfzE,2BAAuB2F,EACvB3G,aAAc,mBACdiB,UAAW+B,IAAuBE,kBAClC9F,OAAQ,wBAGZF,EAAGgC","file":"static/js/8.a658b534.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, store, useSelector } from '../../redux';\nimport { Select } from '../form/select';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = dateHelpers.getRangedMonthDateTime().listDateTimeRanges.map(dateTime => ({\n  ...dateTime,\n  selected: false\n}));\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Array} props.options\n * @param {Function} props.t\n * @param {string} props.value\n * @param {string} props.viewId\n * @returns {Node}\n */\nconst ToolbarFieldRangedMonthly = ({ options, t, value, viewId }) => {\n  const updatedValue = useSelector(({ view }) => view.query?.[viewId]?.[RHSM_API_QUERY_TYPES.START_DATE], value);\n\n  const updatedOptions = options.map(option => ({\n    ...option,\n    selected: option.title === updatedValue || option.value.startDate.toISOString() === updatedValue\n  }));\n\n  /**\n   * On select, dispatch type.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @returns {void}\n   */\n  const onSelect = event => {\n    const { startDate, endDate } = event.value;\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: FIELD_TYPES.DAILY\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      }\n    ]);\n  };\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      placeholder={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      maxHeight={250}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{viewId: string, t: Function, options: Array, value: string}}\n */\nToolbarFieldRangedMonthly.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  t: PropTypes.func,\n  value: PropTypes.string,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{viewId: string, t: translate, options: Array, value: string}}\n */\nToolbarFieldRangedMonthly.defaultProps = {\n  options: toolbarFieldOptions,\n  t: translate,\n  value: translate('curiosity-toolbar.granularityRange', { context: 'current' }),\n  viewId: 'toolbarFieldRangeGranularity'\n};\n\nexport { ToolbarFieldRangedMonthly as default, ToolbarFieldRangedMonthly, toolbarFieldOptions };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, store, useSelector } from '../../redux';\nimport { Select } from '../form/select';\nimport { RHSM_API_QUERY_UOM_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.uom', { context: type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * Display a unit of measure (uom) field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Array} props.options\n * @param {Function} props.t\n * @param {string} props.value\n * @param {string} props.viewId\n * @returns {Node}\n */\nconst ToolbarFieldUom = ({ options, t, value, viewId }) => {\n  const updatedValue = useSelector(({ view }) => view.query?.[viewId]?.[RHSM_API_QUERY_TYPES.UOM], value);\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  /**\n   * On select, dispatch type.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @returns {void}\n   */\n  const onSelect = event =>\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.UOM],\n        viewId,\n        [RHSM_API_QUERY_TYPES.UOM]: event.value\n      }\n    ]);\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: 'uom' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder', { context: 'uom' })}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{viewId: string, t: Function, options: Array, value: string}}\n */\nToolbarFieldUom.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  t: PropTypes.func,\n  value: PropTypes.oneOf([...Object.values(FIELD_TYPES)]),\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{viewId: string, t: translate, options: Array, value: string}}\n */\nToolbarFieldUom.defaultProps = {\n  options: toolbarFieldOptions,\n  t: translate,\n  value: FIELD_TYPES.CORES,\n  viewId: 'toolbarFieldUom'\n};\n\nexport { ToolbarFieldUom as default, ToolbarFieldUom, toolbarFieldOptions };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  chart_color_blue_100 as chartColorBlueLight,\n  chart_color_blue_300 as chartColorBlueDark\n} from '@patternfly/react-tokens';\nimport { Button, Label as PfLabel, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/DateFormat';\nimport moment from 'moment';\nimport { PageLayout, PageColumns, PageHeader, PageSection, PageToolbar } from '../pageLayout/pageLayout';\nimport {\n  RHSM_API_PATH_ID_TYPES,\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_TYPES,\n  RHSM_API_QUERY_UOM_TYPES,\n  RHSM_API_QUERY_SORT_TYPES,\n  RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES\n} from '../../types/rhsmApiTypes';\nimport { apiQueries, useSelector } from '../../redux';\nimport GraphCard from '../graphCard/graphCard';\nimport { ToolbarFieldUom } from '../toolbar/toolbarFieldUom';\nimport { ToolbarFieldGranularity } from '../toolbar/toolbarFieldGranularity';\nimport { ToolbarFieldRangedMonthly } from '../toolbar/toolbarFieldRangedMonthly';\nimport Toolbar from '../toolbar/toolbar';\nimport InventoryList from '../inventoryList/inventoryList';\nimport InventorySubscriptions from '../inventorySubscriptions/inventorySubscriptions';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport { helpers, dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * An OpenShift Container Platform encompassing view.\n *\n * @param {object} props\n * @param {Array} props.productConfig\n * @param {object} props.routeDetail\n * @param {Function} props.t\n * @returns {Node}\n */\nconst ProductViewOpenShiftContainer = ({ productConfig, routeDetail, t }) => {\n  const uomValue = useSelector(({ view }) => view.query?.[productConfig[0].viewId]?.[RHSM_API_QUERY_TYPES.UOM], null);\n  const { productParameter: viewProductLabel } = routeDetail;\n\n  const renderProduct = (config, updatedUomValue) => {\n    const {\n      productContextFilterUom,\n      query = {},\n      graphTallyQuery = {},\n      inventoryHostsQuery = {},\n      inventorySubscriptionsQuery = {},\n      initialGraphFilters = [],\n      initialGuestsFilters = [],\n      initialInventoryFilters = [],\n      initialInventorySettings = {},\n      initialSubscriptionsInventoryFilters,\n      initialToolbarFilters,\n      productLabel,\n      productId,\n      viewId\n    } = config;\n\n    if (!productId || !viewId) {\n      return null;\n    }\n\n    const {\n      graphTallyQuery: initialGraphTallyQuery,\n      inventoryHostsQuery: initialInventoryHostsQuery,\n      inventorySubscriptionsQuery: initialInventorySubscriptionsQuery,\n      toolbarQuery\n    } = apiQueries.parseRhsmQuery(query, { graphTallyQuery, inventoryHostsQuery, inventorySubscriptionsQuery });\n\n    let graphFilters = initialGraphFilters;\n    let inventoryFilters = initialInventoryFilters;\n    let subscriptionsInventoryFilters = initialSubscriptionsInventoryFilters;\n    let uomFilter;\n\n    if (productContextFilterUom) {\n      uomFilter = updatedUomValue || query[RHSM_API_QUERY_TYPES.UOM];\n\n      const filter = ({ id, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(uomFilter, 'i').test(id);\n      };\n\n      graphFilters = initialGraphFilters.filter(filter);\n      inventoryFilters = initialInventoryFilters.filter(filter);\n      subscriptionsInventoryFilters = initialSubscriptionsInventoryFilters.filter(filter);\n    }\n\n    const graphCardTitle = (\n      <React.Fragment>\n        {t('curiosity-graph.cardHeading', { context: productId })}\n        <Tooltip\n          content={<p>{t('curiosity-graph.cardHeadingDescription', { context: productId })}</p>}\n          position={TooltipPosition.top}\n          enableFlip={false}\n          distance={5}\n          entryDelay={100}\n          exitDelay={0}\n        >\n          <sup className=\"curiosity-icon__info\">\n            <InfoCircleIcon />\n          </sup>\n        </Tooltip>\n      </React.Fragment>\n    );\n\n    return (\n      <React.Fragment key={`product_${productId}_${uomFilter}`}>\n        {initialToolbarFilters && (\n          <PageToolbar>\n            <Toolbar filterOptions={initialToolbarFilters} productId={productId} query={toolbarQuery} viewId={viewId} />\n          </PageToolbar>\n        )}\n        <PageSection>\n          <GraphCard\n            key={`graph_${productId}`}\n            filterGraphData={graphFilters}\n            query={initialGraphTallyQuery}\n            productId={productId}\n            viewId={viewId}\n            cardTitle={graphCardTitle}\n            productLabel={productLabel}\n          >\n            {productId === RHSM_API_PATH_ID_TYPES.OPENSHIFT && uomFilter && (\n              <ToolbarFieldUom value={uomFilter} viewId={viewId} />\n            )}\n            {productId === RHSM_API_PATH_ID_TYPES.OPENSHIFT && (\n              <ToolbarFieldGranularity value={graphTallyQuery[RHSM_API_QUERY_TYPES.GRANULARITY]} viewId={viewId} />\n            )}\n            {productId === RHSM_API_PATH_ID_TYPES.OPENSHIFT_METRICS && <ToolbarFieldRangedMonthly viewId={viewId} />}\n          </GraphCard>\n        </PageSection>\n        <PageSection>\n          <InventoryTabs key={`inventory_${productId}`} productId={productId}>\n            <InventoryTab\n              key={`inventory_hosts_${productId}`}\n              title={t('curiosity-inventory.tab', { context: 'hosts' })}\n            >\n              <InventoryList\n                key={`inv_${productId}`}\n                filterGuestsData={initialGuestsFilters}\n                filterInventoryData={inventoryFilters}\n                productId={productId}\n                settings={initialInventorySettings}\n                query={initialInventoryHostsQuery}\n                viewId={viewId}\n              />\n            </InventoryTab>\n            {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && initialSubscriptionsInventoryFilters && (\n              <InventoryTab\n                key={`inventory_subs_${productId}`}\n                title={t('curiosity-inventory.tab', { context: 'subscriptions' })}\n              >\n                <InventorySubscriptions\n                  key={`subs_${productId}`}\n                  filterInventoryData={subscriptionsInventoryFilters}\n                  productId={productId}\n                  query={initialInventorySubscriptionsQuery}\n                  viewId={viewId}\n                />\n              </InventoryTab>\n            )}\n          </InventoryTabs>\n        </PageSection>\n      </React.Fragment>\n    );\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader productLabel={viewProductLabel} includeTour>\n        {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: viewProductLabel })}\n      </PageHeader>\n      <PageColumns>{productConfig.map(config => renderProduct(config, uomValue))}</PageColumns>\n    </PageLayout>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: Function, routeDetail: object, productConfig: Array}}\n */\nProductViewOpenShiftContainer.propTypes = {\n  productConfig: PropTypes.arrayOf(\n    PropTypes.shape({\n      productContextFilterUom: PropTypes.bool,\n      query: PropTypes.shape({\n        [RHSM_API_QUERY_TYPES.START_DATE]: PropTypes.string,\n        [RHSM_API_QUERY_TYPES.END_DATE]: PropTypes.string\n      }),\n      graphTallyQuery: PropTypes.shape({\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: PropTypes.oneOf([...Object.values(GRANULARITY_TYPES)])\n      }),\n      inventoryHostsQuery: PropTypes.shape({\n        [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n        [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n        [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SORT_TYPES)]),\n        [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n      }),\n      inventorySubscriptionsQuery: PropTypes.shape({\n        [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n        [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n        [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES)]),\n        [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n      }),\n      initialOption: PropTypes.oneOf(Object.values(RHSM_API_QUERY_UOM_TYPES)),\n      initialGraphFilters: PropTypes.array,\n      initialGuestsFilters: PropTypes.array,\n      initialInventoryFilters: PropTypes.array,\n      initialInventorySettings: PropTypes.shape({\n        hasGuests: PropTypes.func\n      }),\n      initialSubscriptionsInventoryFilters: PropTypes.array,\n      initialToolbarFilters: PropTypes.array,\n      productLabel: PropTypes.string,\n      productId: PropTypes.string,\n      viewId: PropTypes.string\n    })\n  ),\n  routeDetail: PropTypes.shape({\n    pathParameter: PropTypes.string,\n    productParameter: PropTypes.string,\n    viewParameter: PropTypes.string\n  }).isRequired,\n  t: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: Function, productConfig: Array}}\n */\nProductViewOpenShiftContainer.defaultProps = {\n  productConfig: [\n    {\n      productContextFilterUom: true,\n      query: {\n        [RHSM_API_QUERY_TYPES.UOM]: RHSM_API_QUERY_UOM_TYPES.CORES,\n        [RHSM_API_QUERY_TYPES.START_DATE]: dateHelpers\n          .getRangedDateTime(GRANULARITY_TYPES.DAILY)\n          .startDate.toISOString(),\n        [RHSM_API_QUERY_TYPES.END_DATE]: dateHelpers.getRangedDateTime(GRANULARITY_TYPES.DAILY).endDate.toISOString()\n      },\n      graphTallyQuery: {\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY\n      },\n      inventoryHostsQuery: {\n        [RHSM_API_QUERY_TYPES.SORT]: RHSM_API_QUERY_SORT_TYPES.LAST_SEEN,\n        [RHSM_API_QUERY_TYPES.DIRECTION]: SORT_DIRECTION_TYPES.DESCENDING,\n        [RHSM_API_QUERY_TYPES.LIMIT]: 100,\n        [RHSM_API_QUERY_TYPES.OFFSET]: 0\n      },\n      inventorySubscriptionsQuery: {\n        [RHSM_API_QUERY_TYPES.SORT]: RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES.UPCOMING_EVENT_DATE,\n        [RHSM_API_QUERY_TYPES.DIRECTION]: SORT_DIRECTION_TYPES.DESCENDING,\n        [RHSM_API_QUERY_TYPES.LIMIT]: 100,\n        [RHSM_API_QUERY_TYPES.OFFSET]: 0\n      },\n      initialOption: RHSM_API_QUERY_UOM_TYPES.CORES,\n      initialGraphFilters: [\n        {\n          id: 'cores',\n          isOptional: true,\n          fill: chartColorBlueLight.value,\n          stroke: chartColorBlueDark.value,\n          color: chartColorBlueDark.value\n        },\n        {\n          id: 'sockets',\n          isOptional: true,\n          fill: chartColorBlueLight.value,\n          stroke: chartColorBlueDark.value,\n          color: chartColorBlueDark.value\n        },\n        { id: 'thresholdSockets', isOptional: true },\n        { id: 'thresholdCores', isOptional: true }\n      ],\n      initialGuestsFilters: [\n        {\n          id: 'displayName',\n          header: translate('curiosity-inventory.header', { context: 'guestsDisplayName' }),\n          cell: (data, session) => {\n            const { displayName, inventoryId } = data;\n            const { inventory: authorized } = session?.authorized || {};\n\n            if (!inventoryId?.value) {\n              return displayName?.value;\n            }\n\n            if (!authorized) {\n              return displayName?.value || inventoryId?.value;\n            }\n\n            return (\n              <Button\n                isInline\n                component=\"a\"\n                variant=\"link\"\n                href={`${helpers.UI_DEPLOY_PATH_PREFIX}/insights/inventory/${inventoryId.value}/`}\n              >\n                {displayName.value || inventoryId.value}\n              </Button>\n            );\n          }\n        },\n        {\n          id: 'inventoryId',\n          cellWidth: 40\n        },\n        {\n          id: 'lastSeen',\n          cell: data => (data?.lastSeen?.value && <DateFormat date={data?.lastSeen?.value} />) || '',\n          cellWidth: 15\n        }\n      ],\n      initialInventoryFilters: [\n        {\n          id: 'displayName',\n          cell: (data, session) => {\n            const { displayName = {}, inventoryId = {}, numberOfGuests = {} } = data;\n            const { inventory: authorized } = session?.authorized || {};\n\n            if (!inventoryId.value) {\n              return displayName.value;\n            }\n\n            let updatedDisplayName = displayName.value || inventoryId.value;\n\n            if (authorized) {\n              updatedDisplayName = (\n                <Button\n                  isInline\n                  component=\"a\"\n                  variant=\"link\"\n                  href={`${helpers.UI_DEPLOY_PATH_PREFIX}/insights/inventory/${inventoryId.value}/`}\n                >\n                  {displayName.value || inventoryId.value}\n                </Button>\n              );\n            }\n\n            return (\n              <React.Fragment>\n                {updatedDisplayName}{' '}\n                {(numberOfGuests.value &&\n                  translate('curiosity-inventory.label', { context: 'numberOfGuests', count: numberOfGuests.value }, [\n                    <PfLabel color=\"blue\" />\n                  ])) ||\n                  ''}\n              </React.Fragment>\n            );\n          },\n          isSortable: true\n        },\n        {\n          id: 'sockets',\n          header: translate('curiosity-inventory.header', { context: 'sockets_OpenShift Container Platform' }),\n          isOptional: true,\n          isSortable: true,\n          isWrappable: true,\n          cellWidth: 15\n        },\n        {\n          id: 'cores',\n          header: translate('curiosity-inventory.header', { context: 'cores_OpenShift Container Platform' }),\n          isOptional: true,\n          isSortable: true,\n          isWrappable: true,\n          cellWidth: 15\n        },\n        {\n          id: 'lastSeen',\n          cell: data => (data?.lastSeen?.value && <DateFormat date={data?.lastSeen?.value} />) || '',\n          isSortable: true,\n          isWrappable: true,\n          cellWidth: 25\n        }\n      ],\n      initialInventorySettings: {},\n      initialSubscriptionsInventoryFilters: [\n        {\n          id: 'productName',\n          isSortable: true\n        },\n        {\n          id: 'serviceLevel',\n          isSortable: true,\n          isWrappable: true,\n          cellWidth: 15\n        },\n        {\n          id: 'upcomingEventDate',\n          cell: data =>\n            (data?.upcomingEventDate?.value && moment.utc(data?.upcomingEventDate?.value).format('YYYY-DD-MM')) || '',\n          isSortable: true,\n          isWrappable: true,\n          cellWidth: 15\n        }\n      ],\n      initialToolbarFilters: [\n        {\n          id: RHSM_API_QUERY_TYPES.SLA\n        }\n      ],\n      productLabel: 'OpenShift',\n      productId: RHSM_API_PATH_ID_TYPES.OPENSHIFT,\n      viewId: 'viewOpenShift'\n    },\n    {\n      query: {\n        [RHSM_API_QUERY_TYPES.START_DATE]: dateHelpers.getRangedMonthDateTime('current').value.startDate.toISOString(),\n        [RHSM_API_QUERY_TYPES.END_DATE]: dateHelpers.getRangedMonthDateTime('current').value.endDate.toISOString()\n      },\n      graphTallyQuery: {\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY\n      },\n      inventoryHostsQuery: {\n        [RHSM_API_QUERY_TYPES.SORT]: RHSM_API_QUERY_SORT_TYPES.LAST_SEEN,\n        [RHSM_API_QUERY_TYPES.DIRECTION]: SORT_DIRECTION_TYPES.DESCENDING,\n        [RHSM_API_QUERY_TYPES.LIMIT]: 100,\n        [RHSM_API_QUERY_TYPES.OFFSET]: 0\n      },\n      initialGraphFilters: [\n        {\n          id: 'coreHours',\n          fill: chartColorBlueLight.value,\n          stroke: chartColorBlueDark.value,\n          color: chartColorBlueDark.value\n        }\n      ],\n      initialInventoryFilters: [\n        {\n          id: 'displayName',\n          cell: data => {\n            const { displayName = {}, inventoryId = {}, numberOfGuests = {} } = data;\n\n            if (!inventoryId.value) {\n              return displayName.value;\n            }\n\n            const updatedDisplayName = displayName.value || inventoryId.value;\n\n            return (\n              <React.Fragment>\n                {updatedDisplayName}{' '}\n                {(numberOfGuests.value &&\n                  translate('curiosity-inventory.label', { context: 'numberOfGuests', count: numberOfGuests.value }, [\n                    <PfLabel color=\"blue\" />\n                  ])) ||\n                  ''}\n              </React.Fragment>\n            );\n          },\n          isSortable: true\n        },\n        {\n          id: 'coreHours',\n          cell: data =>\n            (typeof data?.coreHours?.value === 'number' && Number.parseFloat(data?.coreHours?.value).toFixed(2)) ||\n            `0.00`,\n          isSortable: true,\n          isWrappable: true,\n          cellWidth: 20\n        },\n        {\n          id: 'lastSeen',\n          cell: data => (data?.lastSeen?.value && <DateFormat date={data?.lastSeen?.value} />) || '',\n          isSortable: true,\n          isWrappable: true,\n          cellWidth: 25\n        }\n      ],\n      initialToolbarFilters: undefined,\n      productLabel: 'OpenShift Metric',\n      productId: RHSM_API_PATH_ID_TYPES.OPENSHIFT_METRICS,\n      viewId: 'viewOpenShiftMetric'\n    }\n  ],\n  t: translate\n};\n\nexport { ProductViewOpenShiftContainer as default, ProductViewOpenShiftContainer };\n"],"sourceRoot":""}