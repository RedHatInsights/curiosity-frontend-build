{"version":3,"sources":["../node_modules/@patternfly/react-icons/dist/esm/icons/eye-icon.js","../node_modules/@patternfly/react-icons/dist/esm/icons/eye-slash-icon.js","../node_modules/@patternfly/react-icons/dist/esm/icons/infinity-icon.js","../node_modules/@patternfly/react-icons/dist/esm/icons/square-icon.js","components/chart/chartIcon.js","components/graphCard/graphCardChartLegend.js"],"names":["EyeIcon","createIcon","name","height","width","svgPath","yOffset","xOffset","EyeSlashIcon","InfinityIcon","SquareIcon","ChartIcon","fill","symbol","size","title","svgProps","iconProps","emSvgSize","getSize","color","className","style","Number","parseFloat","viewBox","role","y","x","x1","y1","x2","y2","stroke","strokeWidth","strokeDasharray","setIcon","defaultProps","GraphCardChartLegend","onClick","id","props","chart","viewId","updatedToggle","toggle","store","dispatch","type","reduxTypes","graph","SET_GRAPH_LEGEND","legend","this","datum","dataSets","forEach","isToggled","hide","chartId","isDisabled","isThreshold","labelContent","tooltipContent","checkIsToggled","button","onKeyPress","tabIndex","variant","component","icon","visibility","content","position","TooltipPosition","top","enableFlip","distance","productLabel","t","Fragment","map","data","find","hasData","product","context","renderLegendItem","React","Component","helpers","noop","translate","ConnectedGraphCardChartLegend","connect"],"mappings":"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","file":"static/js/29.3be34adb.chunk.js","sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const EyeIconConfig = {\n  name: 'EyeIcon',\n  height: 512,\n  width: 576,\n  svgPath: 'M572.52 241.4C518.29 135.59 410.93 64 288 64S57.68 135.64 3.48 241.41a32.35 32.35 0 0 0 0 29.19C57.71 376.41 165.07 448 288 448s230.32-71.64 284.52-177.41a32.35 32.35 0 0 0 0-29.19zM288 400a144 144 0 1 1 144-144 143.93 143.93 0 0 1-144 144zm0-240a95.31 95.31 0 0 0-25.31 3.79 47.85 47.85 0 0 1-66.9 66.9A95.78 95.78 0 1 0 288 160z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const EyeIcon = createIcon(EyeIconConfig);\n\nexport default EyeIcon;","import { createIcon } from '../createIcon';\n\nexport const EyeSlashIconConfig = {\n  name: 'EyeSlashIcon',\n  height: 512,\n  width: 640,\n  svgPath: 'M320 400c-75.85 0-137.25-58.71-142.9-133.11L72.2 185.82c-13.79 17.3-26.48 35.59-36.72 55.59a32.35 32.35 0 0 0 0 29.19C89.71 376.41 197.07 448 320 448c26.91 0 52.87-4 77.89-10.46L346 397.39a144.13 144.13 0 0 1-26 2.61zm313.82 58.1l-110.55-85.44a331.25 331.25 0 0 0 81.25-102.07 32.35 32.35 0 0 0 0-29.19C550.29 135.59 442.93 64 320 64a308.15 308.15 0 0 0-147.32 37.7L45.46 3.37A16 16 0 0 0 23 6.18L3.37 31.45A16 16 0 0 0 6.18 53.9l588.36 454.73a16 16 0 0 0 22.46-2.81l19.64-25.27a16 16 0 0 0-2.82-22.45zm-183.72-142l-39.3-30.38A94.75 94.75 0 0 0 416 256a94.76 94.76 0 0 0-121.31-92.21A47.65 47.65 0 0 1 304 192a46.64 46.64 0 0 1-1.54 10l-73.61-56.89A142.31 142.31 0 0 1 320 112a143.92 143.92 0 0 1 144 144c0 21.63-5.29 41.79-13.9 60.11z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const EyeSlashIcon = createIcon(EyeSlashIconConfig);\n\nexport default EyeSlashIcon;","import { createIcon } from '../createIcon';\n\nexport const InfinityIconConfig = {\n  name: 'InfinityIcon',\n  height: 512,\n  width: 640,\n  svgPath: 'M471.1 96C405 96 353.3 137.3 320 174.6 286.7 137.3 235 96 168.9 96 75.8 96 0 167.8 0 256s75.8 160 168.9 160c66.1 0 117.8-41.3 151.1-78.6 33.3 37.3 85 78.6 151.1 78.6 93.1 0 168.9-71.8 168.9-160S564.2 96 471.1 96zM168.9 320c-40.2 0-72.9-28.7-72.9-64s32.7-64 72.9-64c38.2 0 73.4 36.1 94 64-20.4 27.6-55.9 64-94 64zm302.2 0c-38.2 0-73.4-36.1-94-64 20.4-27.6 55.9-64 94-64 40.2 0 72.9 28.7 72.9 64s-32.7 64-72.9 64z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const InfinityIcon = createIcon(InfinityIconConfig);\n\nexport default InfinityIcon;","import { createIcon } from '../createIcon';\n\nexport const SquareIconConfig = {\n  name: 'SquareIcon',\n  height: 512,\n  width: 448,\n  svgPath: 'M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const SquareIcon = createIcon(SquareIconConfig);\n\nexport default SquareIcon;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { EyeIcon, EyeSlashIcon, InfinityIcon, SquareIcon, IconSize } from '@patternfly/react-icons';\n\n/**\n * Emulate pf icon sizing for custom SVGs\n *\n * @param {string} size\n * @returns {string} em measurement\n */\nconst getSize = size => {\n  switch (size) {\n    case 'md':\n      return '1.5em';\n    case 'lg':\n      return '2em';\n    case 'xl':\n      return '3em';\n    case 'sm':\n    default:\n      return '1em';\n  }\n};\n\n/**\n * Render an icon for use outside of Victory charts.\n *\n * @param {object} props\n * @param {string} props.fill\n * @param {string} props.symbol\n * @param {string} props.size\n * @param {string} props.title\n * @returns {Node}\n */\nconst ChartIcon = ({ fill, symbol, size, title }) => {\n  const svgProps = {};\n  const iconProps = { size, title };\n  const emSvgSize = getSize(size);\n\n  if (title) {\n    svgProps['aria-labelledby'] = title;\n  } else {\n    svgProps['aria-hidden'] = true;\n  }\n\n  if (fill) {\n    iconProps.color = fill;\n  }\n\n  const setIcon = () => {\n    switch (symbol) {\n      case 'dash':\n        return (\n          <span\n            style={{\n              width: emSvgSize,\n              height: `${Number.parseFloat(emSvgSize) / 2}em`\n            }}\n          >\n            <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 38 10\" role=\"img\" {...svgProps}>\n              <rect y=\"5\" width=\"10\" height=\"10\" fill={fill} />\n              <rect x=\"14\" y=\"5\" width=\"10\" height=\"10\" fill={fill} />\n              <rect x=\"28\" y=\"5\" width=\"10\" height=\"10\" fill={fill} />\n            </svg>\n          </span>\n        );\n      case 'threshold':\n        return (\n          <span style={{ width: `${Number.parseFloat(emSvgSize) * 2}em`, height: emSvgSize }}>\n            <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 18 10\" role=\"img\" {...svgProps}>\n              <line\n                x1={0}\n                y1={(Number.parseFloat(emSvgSize) * 16) / 2}\n                x2={Number.parseFloat(emSvgSize) * 16 * 3}\n                y2={(Number.parseFloat(emSvgSize) * 16) / 2}\n                stroke={fill}\n                strokeWidth={3}\n                strokeDasharray=\"4,3\"\n              />\n            </svg>\n          </span>\n        );\n      case 'eye':\n        return <EyeIcon {...iconProps} />;\n      case 'eyeSlash':\n        return <EyeSlashIcon {...iconProps} />;\n      case 'infinity':\n        return <InfinityIcon {...iconProps} />;\n      case 'square':\n      default:\n        return <SquareIcon {...iconProps} />;\n    }\n  };\n\n  return <span className={`curiosity-chartarea__icon curiosity-chartarea__icon-${symbol}`}>{setIcon()}</span>;\n};\n\nChartIcon.propTypes = {\n  fill: PropTypes.string,\n  size: PropTypes.oneOf([...Object.keys(IconSize)]),\n  symbol: PropTypes.oneOf(['dash', 'eye', 'eyeSlash', 'infinity', 'square', 'threshold']),\n  title: PropTypes.string\n};\n\nChartIcon.defaultProps = {\n  fill: null,\n  size: 'sm',\n  symbol: 'square',\n  title: null\n};\n\nexport { ChartIcon as default, ChartIcon };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { connect, store, reduxTypes } from '../../redux';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { ChartIcon } from '../chart/chartIcon';\n\n/**\n * A custom chart legend.\n *\n * @augments React.Component\n * @fires onClick\n */\nclass GraphCardChartLegend extends React.Component {\n  componentDidMount() {\n    const { chart, datum, legend, viewId } = this.props;\n    datum.dataSets.forEach(({ id }) => {\n      const checkIsToggled = legend[`${viewId}-${id}`] || chart.isToggled(id);\n\n      if (checkIsToggled) {\n        chart.hide(id);\n      }\n    });\n  }\n\n  /**\n   * Toggle legend item and chart.\n   *\n   * @event onClick\n   * @param {string} id\n   */\n  onClick = id => {\n    const { chart, viewId } = this.props;\n    const updatedToggle = chart.toggle(id);\n\n    store.dispatch({\n      type: reduxTypes.graph.SET_GRAPH_LEGEND,\n      legend: {\n        [`${viewId}-${id}`]: updatedToggle\n      }\n    });\n  };\n\n  /**\n   * Return a legend item.\n   *\n   * @param {object} options\n   * @param {string} options.chartId\n   * @param {string} options.color\n   * @param {boolean} options.isDisabled\n   * @param {boolean} options.isThreshold\n   * @param {string} options.labelContent\n   * @param {string} options.tooltipContent\n   * @returns {Node}\n   */\n  renderLegendItem({ chartId, color, isDisabled, isThreshold, labelContent, tooltipContent }) {\n    const { chart, legend, viewId } = this.props;\n    const checkIsToggled = legend[`${viewId}-${chartId}`] || chart.isToggled(chartId);\n\n    const button = (\n      <Button\n        onClick={() => this.onClick(chartId)}\n        onKeyPress={() => this.onClick(chartId)}\n        className=\"curiosity-usage-graph__legend-item\"\n        tabIndex={0}\n        key={`curiosity-button-${chartId}`}\n        variant=\"link\"\n        component=\"a\"\n        isDisabled={isDisabled}\n        icon={\n          ((isDisabled || checkIsToggled) && <ChartIcon symbol=\"eyeSlash\" />) || (\n            <ChartIcon\n              symbol={(isThreshold && 'dash') || 'square'}\n              style={{ visibility: (isDisabled && 'hidden') || (checkIsToggled && 'hidden') || 'visible' }}\n              fill={color}\n            />\n          )\n        }\n      >\n        {labelContent}\n      </Button>\n    );\n\n    if (tooltipContent) {\n      return (\n        <Tooltip\n          key={`curiosity-tooltip-${chartId}`}\n          content={<p>{tooltipContent}</p>}\n          position={TooltipPosition.top}\n          enableFlip={false}\n          distance={5}\n        >\n          {button}\n        </Tooltip>\n      );\n    }\n\n    return button;\n  }\n\n  /**\n   * Render a graph legend.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { datum, productLabel, t } = this.props;\n\n    return (\n      <React.Fragment>\n        {datum.dataSets.map(({ id, isThreshold, stroke, data = [] }) => {\n          const isDisabled =\n            !data.find(({ y, hasData }) => (y >= 0 && hasData === true) || (y >= 0 && isThreshold === true)) || false;\n\n          const labelContent =\n            (isThreshold &&\n              t([`curiosity-graph.${id}Label`, `curiosity-graph.thresholdLabel`], {\n                product: productLabel,\n                context: productLabel\n              })) ||\n            t([`curiosity-graph.${id}Label`, `curiosity-graph.noLabel`], {\n              product: productLabel,\n              context: productLabel\n            });\n\n          const tooltipContent =\n            (isThreshold &&\n              t([`curiosity-graph.${id}LegendTooltip`, `curiosity-graph.thresholdLegendTooltip`], {\n                product: productLabel,\n                context: productLabel\n              })) ||\n            t(`curiosity-graph.${id}LegendTooltip`, { product: productLabel, context: productLabel });\n\n          return this.renderLegendItem({\n            chartId: id,\n            color: stroke,\n            labelContent,\n            isDisabled,\n            isThreshold,\n            tooltipContent\n          });\n        })}\n      </React.Fragment>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{datum, productLabel: string, t: Function, legend: object, chart: object}}\n */\nGraphCardChartLegend.propTypes = {\n  chart: PropTypes.shape({\n    hide: PropTypes.func,\n    toggle: PropTypes.func,\n    isToggled: PropTypes.func\n  }),\n  datum: PropTypes.shape({\n    dataSets: PropTypes.arrayOf(\n      PropTypes.shape({\n        stroke: PropTypes.string.isRequired,\n        id: PropTypes.string.isRequired,\n        isThreshold: PropTypes.bool\n      })\n    )\n  }),\n  legend: PropTypes.objectOf(PropTypes.bool),\n  productLabel: PropTypes.string,\n  t: PropTypes.func,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{datum: {dataSets: Array}, productLabel: string, viewId: string, t: translate, legend: object,\n *     chart: {hide: Function, toggle: Function, isToggled: Function}}}\n */\nGraphCardChartLegend.defaultProps = {\n  chart: {\n    hide: helpers.noop,\n    toggle: helpers.noop,\n    isToggled: helpers.noop\n  },\n  datum: {\n    dataSets: []\n  },\n  legend: {},\n  productLabel: '',\n  t: translate,\n  viewId: 'graphCardLegend'\n};\n\nconst mapStateToProps = ({ graph }) => ({ legend: graph.legend });\n\nconst ConnectedGraphCardChartLegend = connect(mapStateToProps)(GraphCardChartLegend);\n\nexport { ConnectedGraphCardChartLegend as default, ConnectedGraphCardChartLegend, GraphCardChartLegend };\n"],"sourceRoot":""}