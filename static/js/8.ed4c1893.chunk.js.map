{"version":3,"sources":["components/openshiftView/openshiftView.js"],"names":["OpenshiftView","state","option","graphFilters","inventoryFilters","onSelect","event","props","initialGraphFilters","initialInventoryFilters","value","filter","id","optional","RegExp","test","setState","initialOption","this","options","title","selectedOptions","query","initialToolbarFilters","location","routeDetail","t","viewId","isC3","parsedSearch","c3","appName","helpers","UI_DISPLAY_NAME","context","filterOptions","key","pathParameter","filterGraphData","productId","cardTitle","productShortLabel","renderSelect","filterInventoryData","React","Component","defaultProps","rhsmApiTypes","RHSM_API_QUERY_GRANULARITY","GRANULARITY_TYPES","DAILY","RHSM_API_QUERY_LIMIT","RHSM_API_QUERY_OFFSET","fill","chartColorBlueLight","stroke","chartColorBlueDark","color","cell","obj","displayName","inventoryId","isInline","component","variant","target","href","hardwareType","numberOfGuests","Fragment","translate","isRead","RHSM_API_QUERY_SLA","makeMapStateToProps","reduxSelectors","view","makeView","ConnectedOpenshiftView","connect"],"mappings":"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","file":"static/js/8.ed4c1893.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  chart_color_blue_100 as chartColorBlueLight,\n  chart_color_blue_300 as chartColorBlueDark\n} from '@patternfly/react-tokens';\nimport { Badge, Button } from '@patternfly/react-core';\nimport { PageLayout, PageHeader, PageSection, PageToolbar } from '../pageLayout/pageLayout';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES, rhsmApiTypes } from '../../types/rhsmApiTypes';\nimport { connect, reduxSelectors } from '../../redux';\nimport GraphCard from '../graphCard/graphCard';\nimport C3GraphCard from '../c3GraphCard/c3GraphCard';\nimport { Select } from '../form/select';\nimport Toolbar from '../toolbar/toolbar';\nimport InventoryList from '../inventoryList/inventoryList';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * An OpenShift encompassing view.\n *\n * @augments React.Component\n * @fires onSelect\n */\nclass OpenshiftView extends React.Component {\n  state = {\n    option: null,\n    graphFilters: [],\n    inventoryFilters: []\n  };\n\n  componentDidMount() {\n    const { initialOption } = this.props;\n    this.onSelect({ value: initialOption });\n  }\n\n  /**\n   * Apply a selected filtered value.\n   *\n   * @event onSelect\n   * @param {object} event\n   */\n  onSelect = (event = {}) => {\n    const { option } = this.state;\n    const { initialGraphFilters, initialInventoryFilters } = this.props;\n    const { value } = event;\n\n    if (value !== option) {\n      const filter = ({ id, optional }) => {\n        if (!optional) {\n          return true;\n        }\n        return new RegExp(value, 'i').test(id);\n      };\n\n      const graphFilters = initialGraphFilters.filter(filter);\n      const inventoryFilters = initialInventoryFilters.filter(filter);\n\n      this.setState({\n        option,\n        graphFilters,\n        inventoryFilters\n      });\n    }\n  };\n\n  /**\n   * Render a select/dropdown list.\n   *\n   * @returns {Node}\n   */\n  renderSelect() {\n    const { option } = this.state;\n    const { initialOption } = this.props;\n    const options = [\n      { title: 'Cores', value: 'cores' },\n      { title: 'Sockets', value: 'sockets' }\n    ];\n\n    return <Select onSelect={this.onSelect} options={options} selectedOptions={option || initialOption} />;\n  }\n\n  /**\n   * Render an OpenShift view.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { graphFilters, inventoryFilters } = this.state;\n    const { query, initialToolbarFilters, location, routeDetail, t, viewId } = this.props;\n    const isC3 = location?.parsedSearch?.c3 === '';\n\n    return (\n      <PageLayout>\n        <PageHeader viewId={viewId}>\n          {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: viewId })}\n        </PageHeader>\n        <PageToolbar>\n          <Toolbar filterOptions={initialToolbarFilters} query={query} viewId={viewId} />\n        </PageToolbar>\n        <PageSection>\n          {(isC3 && (\n            <C3GraphCard\n              key={routeDetail.pathParameter}\n              filterGraphData={graphFilters}\n              query={query}\n              productId={routeDetail.pathParameter}\n              viewId={viewId}\n              cardTitle={t('curiosity-graph.cardHeading')}\n              productShortLabel={viewId}\n            >\n              {this.renderSelect()}\n            </C3GraphCard>\n          )) || (\n            <GraphCard\n              key={routeDetail.pathParameter}\n              filterGraphData={graphFilters}\n              query={query}\n              productId={routeDetail.pathParameter}\n              viewId={viewId}\n              cardTitle={t('curiosity-graph.cardHeading')}\n              productShortLabel={viewId}\n            >\n              {this.renderSelect()}\n            </GraphCard>\n          )}\n        </PageSection>\n        <PageSection>\n          <InventoryList\n            key={routeDetail.pathParameter}\n            filterInventoryData={inventoryFilters}\n            query={query}\n            productId={routeDetail.pathParameter}\n            viewId={viewId}\n            cardTitle={t('curiosity-inventory.cardHeading')}\n          />\n        </PageSection>\n      </PageLayout>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{initialOption: string, initialToolbarFilters: Array, viewId: string, t: Function, query: object,\n *     initialGraphFilters: Array, routeDetail: object, location: object, initialInventoryFilters: Array}}\n */\nOpenshiftView.propTypes = {\n  query: PropTypes.shape({\n    [rhsmApiTypes.RHSM_API_QUERY_GRANULARITY]: PropTypes.oneOf([...Object.values(GRANULARITY_TYPES)])\n  }),\n  initialOption: PropTypes.oneOf(['cores', 'sockets']),\n  initialGraphFilters: PropTypes.array,\n  initialInventoryFilters: PropTypes.array,\n  initialToolbarFilters: PropTypes.array,\n  location: PropTypes.shape({\n    parsedSearch: PropTypes.objectOf(PropTypes.string)\n  }).isRequired,\n  routeDetail: PropTypes.shape({\n    pathParameter: PropTypes.string.isRequired,\n    pathId: PropTypes.string.isRequired,\n    routeItem: PropTypes.shape({\n      title: PropTypes.string\n    })\n  }).isRequired,\n  t: PropTypes.func,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{initialOption: string, initialToolbarFilters: Array, viewId: string, t: translate, query: object,\n *     initialGraphFilters: Array, initialInventoryFilters: Array}}\n */\nOpenshiftView.defaultProps = {\n  query: {\n    [rhsmApiTypes.RHSM_API_QUERY_GRANULARITY]: GRANULARITY_TYPES.DAILY,\n    [rhsmApiTypes.RHSM_API_QUERY_LIMIT]: 10,\n    [rhsmApiTypes.RHSM_API_QUERY_OFFSET]: 0\n  },\n  initialOption: 'cores',\n  initialGraphFilters: [\n    {\n      id: 'cores',\n      optional: true,\n      fill: chartColorBlueLight.value,\n      stroke: chartColorBlueDark.value,\n      color: chartColorBlueDark.value\n    },\n    {\n      id: 'sockets',\n      optional: true,\n      fill: chartColorBlueLight.value,\n      stroke: chartColorBlueDark.value,\n      color: chartColorBlueDark.value\n    },\n    { id: 'thresholdSockets', optional: true },\n    { id: 'thresholdCores', optional: true }\n  ],\n  initialInventoryFilters: [\n    {\n      id: 'displayName',\n      cell: obj => {\n        const { displayName, inventoryId } = obj;\n\n        if (!inventoryId.value) {\n          return displayName.value;\n        }\n\n        return (\n          <Button\n            isInline\n            component=\"a\"\n            variant=\"link\"\n            target=\"_blank\"\n            href={`/insights/inventory/${inventoryId.value}/`}\n          >\n            {displayName.value || inventoryId.value}\n          </Button>\n        );\n      }\n    },\n    {\n      id: 'hardwareType',\n      cell: obj => {\n        const { hardwareType, numberOfGuests } = obj;\n        return (\n          <React.Fragment>\n            {translate('curiosity-inventory.hardwareType', { context: hardwareType.value })}{' '}\n            {(numberOfGuests.value && <Badge isRead>{numberOfGuests.value}</Badge>) || ''}\n          </React.Fragment>\n        );\n      }\n    },\n    {\n      id: 'sockets',\n      optional: true\n    },\n    {\n      id: 'cores',\n      optional: true\n    },\n    {\n      id: 'lastSeen'\n    }\n  ],\n  initialToolbarFilters: [\n    {\n      id: rhsmApiTypes.RHSM_API_QUERY_SLA\n    }\n  ],\n  t: translate,\n  viewId: 'OpenShift'\n};\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.view.makeView(OpenshiftView.defaultProps);\n\nconst ConnectedOpenshiftView = connect(makeMapStateToProps)(OpenshiftView);\n\nexport { ConnectedOpenshiftView as default, ConnectedOpenshiftView, OpenshiftView };\n"],"sourceRoot":""}