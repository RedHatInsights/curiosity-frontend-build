{"version":3,"sources":["../../../../../../src/components/Table/utils/decorators/wrappable.tsx","components/inventoryList/inventoryListHelpers.js"],"names":["applySortFilters","filter","onSort","query","id","updatedFilter","hasSort","sortActive","RHSM_API_QUERY_TYPES","SORT","_camelCase","sortDirection","DIRECTION","SORT_DIRECTION_TYPES","DESCENDING","SortByDirection","desc","asc","isSortDefault","sortDefaultInitialDirection","applyWrappableFilters","Array","isArray","transforms","push","wrappable","parseInventoryFilters","filters","map","isSortable","Object","assign","isWrappable","parseRowCellsListData","cellData","session","updatedColumnHeaders","updatedCells","allCells","entries","forEach","key","value","title","translate","context","length","headerUpdated","cellUpdated","cell","cellWidth","header","React","isValidElement","concat","PfCellWidth","obj","columnHeaders","cells","data","inventoryListHelpers"],"mappings":"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","file":"static/js/36.d769474d.chunk.js","sourcesContent":["import styles from '@patternfly/react-styles/css/components/Table/table';\nexport const breakWord = () => ({\n    className: styles.modifiers.breakWord\n});\nexport const fitContent = () => ({\n    className: styles.modifiers.fitContent\n});\nexport const nowrap = () => ({\n    className: styles.modifiers.nowrap\n});\nexport const truncate = () => ({\n    className: styles.modifiers.truncate\n});\nexport const wrappable = () => ({\n    className: styles.modifiers.wrap\n});\n//# sourceMappingURL=wrappable.js.map","import React from 'react';\nimport { cellWidth as PfCellWidth, SortByDirection, wrappable } from '@patternfly/react-table';\nimport _camelCase from 'lodash/camelCase';\nimport { translate } from '../i18n/i18n';\nimport {\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_TYPES\n} from '../../types/rhsmApiTypes';\n\n/**\n * Apply sort filter to filters.\n *\n * @param {object} params\n * @param {{ onSort: Function, sortActive: boolean, sortDirection: string, isSortDefault: boolean,\n *     sortDefaultInitialDirection: string }} params.filter\n * @param {Function} params.onSort\n * @param {object} params.query\n * @returns {object}\n */\nconst applySortFilters = ({ filter = {}, onSort, query = {} }) => {\n  const { id } = filter;\n  const updatedFilter = { ...filter };\n  const hasSort = updatedFilter.onSort || onSort;\n\n  if (!updatedFilter.onSort && onSort) {\n    updatedFilter.onSort = onSort;\n  }\n\n  // set fallback for the active sorted column based on query\n  if (\n    hasSort &&\n    typeof updatedFilter.sortActive !== 'boolean' &&\n    query?.[RHSM_API_QUERY_TYPES.SORT] &&\n    _camelCase(query?.[RHSM_API_QUERY_TYPES.SORT]) === id\n  ) {\n    updatedFilter.sortActive = true;\n  }\n\n  // set sort direction\n  if (hasSort && !updatedFilter.sortDirection && query?.[RHSM_API_QUERY_TYPES.DIRECTION]) {\n    switch (query?.[RHSM_API_QUERY_TYPES.DIRECTION]) {\n      case SORT_DIRECTION_TYPES.DESCENDING:\n        updatedFilter.sortDirection = SortByDirection.desc;\n        break;\n      default:\n        updatedFilter.sortDirection = SortByDirection.asc;\n        break;\n    }\n  }\n\n  if (\n    hasSort &&\n    !updatedFilter.sortActive &&\n    !query?.[RHSM_API_QUERY_TYPES.SORT] &&\n    updatedFilter.isSortDefault === true\n  ) {\n    updatedFilter.sortActive = true;\n\n    if (updatedFilter.sortDefaultInitialDirection) {\n      updatedFilter.sortDirection = updatedFilter.sortDefaultInitialDirection;\n    }\n  }\n\n  return updatedFilter;\n};\n\nconst applyWrappableFilters = ({ filter = {} }) => {\n  const updatedFilter = { ...filter };\n\n  if (Array.isArray(updatedFilter.transforms)) {\n    updatedFilter.transforms.push(wrappable);\n  } else {\n    updatedFilter.transforms = [wrappable];\n  }\n\n  return updatedFilter;\n};\n\n/**\n * Apply additional properties to filters.\n *\n * @param {object} params\n * @param {Array} params.filters\n * @param {Function} params.onSort\n * @param {object} params.query\n * @returns {Array}\n */\nconst parseInventoryFilters = ({ filters = [], onSort, query = {} }) =>\n  [...filters].map(filter => {\n    const updatedFilter = { ...filter };\n\n    if (updatedFilter.isSortable) {\n      Object.assign(updatedFilter, applySortFilters({ filter: updatedFilter, onSort, query }));\n    }\n\n    if (updatedFilter.isWrappable) {\n      Object.assign(updatedFilter, applyWrappableFilters({ filter: updatedFilter }));\n    }\n\n    return updatedFilter;\n  });\n\n/**\n * Parse and return formatted/filtered table cells, and apply table filters.\n *\n * @param {object} params\n * @param {Array} params.filters\n * @param {object} params.cellData\n * @param {object} params.session\n * @returns {{columnHeaders: Array, cells: Array, data: object}}\n */\nconst parseRowCellsListData = ({ filters = [], cellData = {}, session = {} }) => {\n  const updatedColumnHeaders = [];\n  const updatedCells = [];\n  const allCells = {};\n\n  // Apply basic translation and value\n  Object.entries(cellData).forEach(([key, value]) => {\n    allCells[key] = {\n      title: translate('curiosity-inventory.header', { context: key }),\n      value\n    };\n\n    updatedColumnHeaders.push(allCells[key].title);\n    updatedCells.push(value);\n  });\n\n  // Apply filters to header and cell values\n  if (filters?.length) {\n    updatedColumnHeaders.length = 0;\n    updatedCells.length = 0;\n\n    filters.forEach(({ id, cell, cellWidth, header, onSort, sortActive, sortDirection, transforms }) => {\n      let headerUpdated;\n      let cellUpdated;\n\n      if (allCells[id]) {\n        headerUpdated = allCells[id]?.title ?? id;\n        cellUpdated = allCells[id]?.value ?? '';\n      } else if (id) {\n        headerUpdated = translate('curiosity-inventory.header', { context: id });\n        cellUpdated = '';\n      }\n\n      // set table header cell filter params\n      if (header) {\n        headerUpdated = (typeof header === 'function' && header({ ...allCells })) || header;\n      }\n\n      if (\n        typeof headerUpdated === 'string' ||\n        typeof headerUpdated === 'number' ||\n        React.isValidElement(headerUpdated)\n      ) {\n        headerUpdated = {\n          title: headerUpdated\n        };\n      }\n\n      if (headerUpdated) {\n        headerUpdated.transforms = [];\n\n        if (Array.isArray(transforms)) {\n          headerUpdated.transforms = headerUpdated.transforms.concat([...transforms]);\n        }\n\n        if (typeof cellWidth === 'number') {\n          headerUpdated.transforms.push(PfCellWidth(cellWidth));\n        }\n      }\n\n      if (typeof onSort === 'function') {\n        headerUpdated = {\n          ...headerUpdated,\n          onSort: obj => onSort({ ...allCells }, { ...obj, id }),\n          sortActive,\n          sortDirection\n        };\n      }\n\n      // set table row cell filter params\n      if (cell) {\n        cellUpdated = (typeof cell === 'function' && cell({ ...allCells }, { ...session })) || cell;\n      }\n\n      if (typeof cellUpdated === 'string' || typeof cellUpdated === 'number' || React.isValidElement(cellUpdated)) {\n        cellUpdated = {\n          title: cellUpdated\n        };\n      }\n\n      updatedColumnHeaders.push(headerUpdated);\n      updatedCells.push(cellUpdated);\n    });\n  }\n\n  return {\n    columnHeaders: updatedColumnHeaders,\n    cells: updatedCells,\n    data: { ...allCells }\n  };\n};\n\nconst inventoryListHelpers = {\n  applySortFilters,\n  applyWrappableFilters,\n  parseInventoryFilters,\n  parseRowCellsListData\n};\n\nexport {\n  inventoryListHelpers as default,\n  inventoryListHelpers,\n  applySortFilters,\n  applyWrappableFilters,\n  parseInventoryFilters,\n  parseRowCellsListData\n};\n"],"sourceRoot":""}