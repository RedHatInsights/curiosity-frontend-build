{"version":3,"sources":["../node_modules/@patternfly/react-tokens/dist/esm/chart_color_cyan_100.js","../node_modules/@patternfly/react-tokens/dist/esm/chart_color_cyan_300.js","../node_modules/@patternfly/react-tokens/dist/esm/chart_color_purple_100.js","../node_modules/@patternfly/react-tokens/dist/esm/chart_color_purple_300.js","components/productView/productView.js","components/productView/productViewSatellite.js"],"names":["chart_color_cyan_100","chart_color_cyan_300","chart_color_purple_100","chart_color_purple_300","ProductView","productConfig","routeDetail","t","graphTallyQuery","inventoryHostsQuery","inventorySubscriptionsQuery","query","initialToolbarFilters","initialGraphFilters","initialGuestsFilters","initialInventoryFilters","initialInventorySettings","initialSubscriptionsInventoryFilters","apiQueries","parseRhsmQuery","initialGraphTallyQuery","initialInventoryHostsQuery","initialInventorySubscriptionsQuery","toolbarQuery","productId","pathParameter","productLabel","productParameter","viewId","viewParameter","includeTour","appName","helpers","UI_DISPLAY_NAME","context","filterOptions","key","filterGraphData","cardTitle","title","filterGuestsData","filterInventoryData","settings","UI_DISABLED_TABLE_SUBSCRIPTIONS","defaultProps","translate","makeMapStateToProps","reduxSelectors","view","makeView","ConnectedProductView","connect","ProductViewSatellite","RHSM_API_QUERY_TYPES","GRANULARITY","GRANULARITY_TYPES","DAILY","SORT","RHSM_API_QUERY_SORT_TYPES","LAST_SEEN","DIRECTION","SORT_DIRECTION_TYPES","ASCENDING","LIMIT","OFFSET","RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES","UPCOMING_EVENT_DATE","id","fill","chartColorBlueLight","value","stroke","chartColorBlueDark","color","chartColorCyanLight","chartColorCyanDark","chartColorPurpleLight","chartColorPurpleDark","header","cell","data","session","displayName","inventoryId","authorized","inventory","Button","isInline","component","variant","target","href","UI_DEPLOY_PATH_PREFIX","cellWidth","lastSeen","DateFormat","date","numberOfGuests","updatedDisplayName","Fragment","count","isSortable","cloudProvider","measurementType","isWrappable","upcomingEventDate","moment","utc","format","SLA","USAGE","selected"],"mappings":"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","file":"static/js/6.e2e13080.chunk.js","sourcesContent":["export const chart_color_cyan_100 = {\n  \"name\": \"--pf-chart-color-cyan-100\",\n  \"value\": \"#a2d9d9\",\n  \"var\": \"var(--pf-chart-color-cyan-100)\"\n};\nexport default chart_color_cyan_100;","export const chart_color_cyan_300 = {\n  \"name\": \"--pf-chart-color-cyan-300\",\n  \"value\": \"#009596\",\n  \"var\": \"var(--pf-chart-color-cyan-300)\"\n};\nexport default chart_color_cyan_300;","export const chart_color_purple_100 = {\n  \"name\": \"--pf-chart-color-purple-100\",\n  \"value\": \"#b2b0ea\",\n  \"var\": \"var(--pf-chart-color-purple-100)\"\n};\nexport default chart_color_purple_100;","export const chart_color_purple_300 = {\n  \"name\": \"--pf-chart-color-purple-300\",\n  \"value\": \"#5752d1\",\n  \"var\": \"var(--pf-chart-color-purple-300)\"\n};\nexport default chart_color_purple_300;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { PageLayout, PageHeader, PageSection, PageToolbar, PageMessages } from '../pageLayout/pageLayout';\nimport { apiQueries, connect, reduxSelectors } from '../../redux';\nimport { ConnectedGraphCard, GraphCard } from '../graphCard/graphCard';\nimport { ConnectedToolbar, Toolbar } from '../toolbar/toolbar';\nimport { ConnectedInventoryList, InventoryList } from '../inventoryList/inventoryList';\nimport { helpers } from '../../common';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport {\n  ConnectedInventorySubscriptions,\n  InventorySubscriptions\n} from '../inventorySubscriptions/inventorySubscriptions';\nimport {\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_SORT_TYPES,\n  RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES,\n  RHSM_API_QUERY_TYPES\n} from '../../types/rhsmApiTypes';\nimport { GuestsList } from '../guestsList/guestsList';\nimport { translate } from '../i18n/i18n';\n\n/**\n * ToDo: base for default product layouts, add additional props for various toolbars\n * Next steps include...\n * Consider being able to pass customized toolbars for GraphCard and the\n * various Inventory displays. Have to evaluate how to handle the global toolbar, one\n * consideration is creating optional widgets with self-contained state update ability\n * based off of context/props/etc.\n *\n * Moving existing products to this layout, or maintaining them \"as is\", then renaming and\n * relocating them to this directory if they've been customized beyond a basic layout.\n */\n/**\n * Display a product.\n *\n * @param {object} props\n * @param {object} props.productConfig\n * @param {object} props.routeDetail\n * @param {Function} props.t\n * @returns {Node}\n */\nconst ProductView = ({ productConfig, routeDetail, t }) => {\n  const {\n    graphTallyQuery,\n    inventoryHostsQuery,\n    inventorySubscriptionsQuery,\n    query,\n    initialToolbarFilters,\n    initialGraphFilters,\n    initialGuestsFilters,\n    initialInventoryFilters,\n    initialInventorySettings,\n    initialSubscriptionsInventoryFilters\n  } = productConfig;\n\n  const {\n    graphTallyQuery: initialGraphTallyQuery,\n    inventoryHostsQuery: initialInventoryHostsQuery,\n    inventorySubscriptionsQuery: initialInventorySubscriptionsQuery,\n    toolbarQuery\n  } = apiQueries.parseRhsmQuery(query, { graphTallyQuery, inventoryHostsQuery, inventorySubscriptionsQuery });\n\n  const { pathParameter: productId, productParameter: productLabel, viewParameter: viewId } = routeDetail;\n\n  if (!productId || !viewId) {\n    return null;\n  }\n\n  return (\n    <PageLayout>\n      <PageHeader productLabel={productLabel} includeTour>\n        {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: productLabel })}\n      </PageHeader>\n      <PageMessages>\n        <BannerMessages productId={productId} viewId={viewId} query={query} />\n      </PageMessages>\n      <PageToolbar>\n        <ConnectedToolbar\n          filterOptions={initialToolbarFilters}\n          productId={productId}\n          query={toolbarQuery}\n          viewId={viewId}\n        />\n      </PageToolbar>\n      <PageSection>\n        <ConnectedGraphCard\n          key={productId}\n          filterGraphData={initialGraphFilters}\n          query={initialGraphTallyQuery}\n          productId={productId}\n          viewId={viewId}\n          cardTitle={t('curiosity-graph.socketsHeading')}\n          productLabel={productLabel}\n        />\n      </PageSection>\n      <PageSection>\n        <InventoryTabs productId={productId}>\n          <InventoryTab key=\"hostsTab\" title={t('curiosity-inventory.tab', { context: 'hosts' })}>\n            <ConnectedInventoryList\n              key={productId}\n              filterGuestsData={initialGuestsFilters}\n              filterInventoryData={initialInventoryFilters}\n              productId={productId}\n              settings={initialInventorySettings}\n              query={initialInventoryHostsQuery}\n              viewId={viewId}\n            />\n          </InventoryTab>\n          {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && (\n            <InventoryTab key=\"subscriptionsTab\" title={t('curiosity-inventory.tab', { context: 'subscriptions' })}>\n              <ConnectedInventorySubscriptions\n                key={productId}\n                filterInventoryData={initialSubscriptionsInventoryFilters}\n                productId={productId}\n                query={initialInventorySubscriptionsQuery}\n                viewId={viewId}\n              />\n            </InventoryTab>\n          )}\n        </InventoryTabs>\n      </PageSection>\n    </PageLayout>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: Function, routeDetail: object, productConfig: object}}\n */\nProductView.propTypes = {\n  productConfig: PropTypes.shape({\n    graphTallyQuery: PropTypes.shape({\n      [RHSM_API_QUERY_TYPES.GRANULARITY]: PropTypes.oneOf([...Object.values(GRANULARITY_TYPES)])\n    }),\n    inventoryHostsQuery: PropTypes.shape({\n      [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SORT_TYPES)]),\n      [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n    }),\n    inventorySubscriptionsQuery: PropTypes.shape({\n      [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES)]),\n      [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n    }),\n    query: PropTypes.object,\n    initialToolbarFilters: Toolbar.propTypes.filterOptions,\n    initialGraphFilters: GraphCard.propTypes.filterGraphData,\n    initialGuestsFilters: GuestsList.propTypes.filterGuestsData,\n    initialInventoryFilters: InventoryList.propTypes.filterInventoryData,\n    initialInventorySettings: InventoryList.propTypes.settings,\n    initialSubscriptionsInventoryFilters: InventorySubscriptions.propTypes.filterInventoryData\n  }).isRequired,\n  routeDetail: PropTypes.shape({\n    pathParameter: PropTypes.string,\n    productParameter: PropTypes.string,\n    viewParameter: PropTypes.string\n  }).isRequired,\n  t: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate}}\n */\nProductView.defaultProps = {\n  t: translate\n};\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.view.makeView(ProductView.defaultProps);\n\nconst ConnectedProductView = connect(makeMapStateToProps)(ProductView);\n\nexport { ConnectedProductView as default, ConnectedProductView, ProductView };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  chart_color_blue_100 as chartColorBlueLight,\n  chart_color_blue_300 as chartColorBlueDark,\n  chart_color_cyan_100 as chartColorCyanLight,\n  chart_color_cyan_300 as chartColorCyanDark,\n  chart_color_purple_100 as chartColorPurpleLight,\n  chart_color_purple_300 as chartColorPurpleDark\n} from '@patternfly/react-tokens';\nimport { Button, Label as PfLabel } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/cjs/DateFormat';\nimport moment from 'moment';\nimport {\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_TYPES,\n  RHSM_API_QUERY_SORT_TYPES,\n  RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES\n} from '../../types/rhsmApiTypes';\nimport { ConnectedProductView, ProductView } from './productView';\nimport { translate } from '../i18n/i18n';\nimport { helpers } from '../../common';\n\n/**\n * A Red Hat Satellite configured view, and related system architectures.\n *\n * @param {object} props\n * @param {object} props.productConfig\n * @param {object} props.routeDetail\n * @returns {Node}\n */\nconst ProductViewSatellite = ({ productConfig, routeDetail }) => (\n  <ConnectedProductView routeDetail={routeDetail} productConfig={productConfig} />\n);\n\n/**\n * Prop types.\n *\n * @type {{routeDetail: object, productConfig:object}}\n */\nProductViewSatellite.propTypes = {\n  productConfig: ProductView.propTypes.productConfig,\n  routeDetail: PropTypes.shape({\n    pathParameter: PropTypes.string,\n    productParameter: PropTypes.string,\n    viewParameter: PropTypes.string\n  }).isRequired\n};\n\n/**\n * Default props.\n *\n * @type {{ productConfig: object }}\n */\nProductViewSatellite.defaultProps = {\n  productConfig: {\n    query: {},\n    graphTallyQuery: {\n      [RHSM_API_QUERY_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY\n    },\n    inventoryHostsQuery: {\n      [RHSM_API_QUERY_TYPES.SORT]: RHSM_API_QUERY_SORT_TYPES.LAST_SEEN,\n      [RHSM_API_QUERY_TYPES.DIRECTION]: SORT_DIRECTION_TYPES.ASCENDING,\n      [RHSM_API_QUERY_TYPES.LIMIT]: 100,\n      [RHSM_API_QUERY_TYPES.OFFSET]: 0\n    },\n    inventorySubscriptionsQuery: {\n      [RHSM_API_QUERY_TYPES.SORT]: RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES.UPCOMING_EVENT_DATE,\n      [RHSM_API_QUERY_TYPES.DIRECTION]: SORT_DIRECTION_TYPES.ASCENDING,\n      [RHSM_API_QUERY_TYPES.LIMIT]: 100,\n      [RHSM_API_QUERY_TYPES.OFFSET]: 0\n    },\n    initialGraphFilters: [\n      {\n        id: 'physicalSockets',\n        fill: chartColorBlueLight.value,\n        stroke: chartColorBlueDark.value,\n        color: chartColorBlueDark.value\n      },\n      {\n        id: 'hypervisorSockets',\n        fill: chartColorCyanLight.value,\n        stroke: chartColorCyanDark.value,\n        color: chartColorCyanDark.value\n      },\n      {\n        id: 'cloudSockets',\n        fill: chartColorPurpleLight.value,\n        stroke: chartColorPurpleDark.value,\n        color: chartColorPurpleDark.value\n      },\n      { id: 'thresholdSockets' }\n    ],\n    initialGuestsFilters: [\n      {\n        id: 'displayName',\n        header: translate('curiosity-inventory.header', { context: 'guestsDisplayName' }),\n        cell: (data, session) => {\n          const { displayName, inventoryId } = data;\n          const { inventory: authorized } = session?.authorized || {};\n\n          if (!inventoryId?.value) {\n            return displayName?.value;\n          }\n\n          if (!authorized) {\n            return displayName?.value || inventoryId?.value;\n          }\n\n          return (\n            <Button\n              isInline\n              component=\"a\"\n              variant=\"link\"\n              target=\"_blank\"\n              href={`${helpers.UI_DEPLOY_PATH_PREFIX}/insights/inventory/${inventoryId.value}/`}\n            >\n              {displayName.value || inventoryId.value}\n            </Button>\n          );\n        }\n      },\n      {\n        id: 'inventoryId',\n        cellWidth: 40\n      },\n      {\n        id: 'lastSeen',\n        cell: data => (data?.lastSeen?.value && <DateFormat date={data?.lastSeen?.value} />) || '',\n        cellWidth: 15\n      }\n    ],\n    initialInventoryFilters: [\n      {\n        id: 'displayName',\n        cell: (data, session) => {\n          const { displayName = {}, inventoryId = {}, numberOfGuests = {} } = data;\n          const { inventory: authorized } = session?.authorized || {};\n\n          if (!inventoryId.value) {\n            return displayName.value;\n          }\n\n          let updatedDisplayName = displayName.value || inventoryId.value;\n\n          if (authorized) {\n            updatedDisplayName = (\n              <Button\n                isInline\n                component=\"a\"\n                variant=\"link\"\n                target=\"_blank\"\n                href={`${helpers.UI_DEPLOY_PATH_PREFIX}/insights/inventory/${inventoryId.value}/`}\n              >\n                {displayName.value || inventoryId.value}\n              </Button>\n            );\n          }\n\n          return (\n            <React.Fragment>\n              {updatedDisplayName}{' '}\n              {(numberOfGuests.value &&\n                translate('curiosity-inventory.label', { context: 'numberOfGuests', count: numberOfGuests.value }, [\n                  <PfLabel color=\"blue\" />\n                ])) ||\n                ''}\n            </React.Fragment>\n          );\n        },\n        isSortable: true\n      },\n      {\n        id: 'measurementType',\n        cell: data => {\n          const { cloudProvider = {}, measurementType = {} } = data;\n          return (\n            <React.Fragment>\n              {translate('curiosity-inventory.measurementType', { context: measurementType.value })}{' '}\n              {(cloudProvider.value && (\n                <PfLabel color=\"purple\">\n                  {translate('curiosity-inventory.cloudProvider', { context: cloudProvider.value })}\n                </PfLabel>\n              )) ||\n                ''}\n            </React.Fragment>\n          );\n        },\n        isSortable: true,\n        cellWidth: 20\n      },\n      {\n        id: 'sockets',\n        isSortable: true,\n        isWrappable: true,\n        cellWidth: 15\n      },\n      {\n        id: 'lastSeen',\n        cell: data => (data?.lastSeen?.value && <DateFormat date={data?.lastSeen?.value} />) || '',\n        isSortable: true,\n        isWrappable: true,\n        cellWidth: 15\n      }\n    ],\n    initialInventorySettings: {},\n    initialSubscriptionsInventoryFilters: [\n      {\n        id: 'productName',\n        isSortable: true\n      },\n      {\n        id: 'serviceLevel',\n        isSortable: true,\n        isWrappable: true,\n        cellWidth: 15\n      },\n      {\n        id: 'upcomingEventDate',\n        cell: data =>\n          (data?.upcomingEventDate?.value && moment.utc(data?.upcomingEventDate?.value).format('YYYY-DD-MM')) || '',\n        isSortable: true,\n        isWrappable: true,\n        cellWidth: 15\n      }\n    ],\n    initialToolbarFilters: [\n      {\n        id: RHSM_API_QUERY_TYPES.SLA\n      },\n      {\n        id: RHSM_API_QUERY_TYPES.USAGE,\n        selected: true\n      }\n    ]\n  }\n};\n\nexport { ProductViewSatellite as default, ProductViewSatellite };\n"],"sourceRoot":""}