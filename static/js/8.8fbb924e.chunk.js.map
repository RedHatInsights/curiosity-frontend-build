{"version":3,"sources":["components/toolbar/toolbarFieldRangedMonthly.js","components/productView/productViewOpenShiftDedicated.js","components/bannerMessages/bannerMessages.js","components/productView/productView.js"],"names":["toolbarFieldOptions","dateHelpers","getRangedMonthDateTime","listDateTimeRanges","map","dateTime","selected","ToolbarFieldRangedMonthly","options","t","value","viewId","updatedValue","useSelector","view","query","RHSM_API_QUERY_TYPES","START_DATE","updatedOptions","option","title","startDate","toISOString","aria-label","context","onSelect","event","endDate","store","dispatch","type","reduxTypes","SET_QUERY_CLEAR_INVENTORY_LIST","SET_QUERY_RHSM_TYPES","GRANULARITY","FIELD_TYPES","DAILY","END_DATE","placeholder","position","SelectPosition","right","maxHeight","defaultProps","translate","ProductViewOpenShiftDedicated","productConfig","routeDetail","viewParameter","graphTallyQuery","toolbarProduct","toolbarGraph","toolbarGraphDescription","GRANULARITY_TYPES","inventoryHostsQuery","SORT","RHSM_API_QUERY_SORT_TYPES","LAST_SEEN","DIRECTION","SORT_DIRECTION_TYPES","DESCENDING","LIMIT","OFFSET","initialGraphFilters","id","fill","chartColorBlueLight","stroke","chartColorBlueDark","color","initialGraphSettings","actionDisplay","data","displayContent","coreHours","total","forEach","y","numbro","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","className","initialInventoryFilters","cell","displayName","inventoryId","numberOfGuests","updatedDisplayName","Fragment","count","isSortable","Number","parseFloat","toFixed","isWrappable","cellWidth","header","lastSeen","date","initialToolbarFilters","undefined","BannerMessages","state","onUpdateData","props","getMessageReports","productId","apiQueries","parseRhsmQuery","getRangedDateTime","this","prevProps","_isEqual","appMessages","messages","updatedMessages","length","Object","entries","key","message","find","push","variant","AlertVariant","info","actionClose","AlertActionCloseButton","onClose","setState","Alert","alerts","renderAlerts","React","Component","helpers","noop","UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS","appName","UI_DISPLAY_NAME","Button","isInline","component","icon","iconPosition","target","href","makeMapStateToProps","reduxSelectors","makeAppMessages","ConnectedBannerMessages","connect","reduxActions","rhsm","ProductView","inventorySubscriptionsQuery","initialGuestsFilters","initialInventorySettings","initialSubscriptionsInventoryFilters","initialQuery","initialGraphTallyQuery","initialInventoryHostsQuery","initialInventorySubscriptionsQuery","initialToolbarQuery","toolbarQuery","pathParameter","productLabel","productParameter","graphCardTooltip","Tooltip","content","TooltipPosition","top","enableFlip","distance","entryDelay","exitDelay","graphCardTitle","includeTour","isValidElement","filterOptions","filterGraphData","settings","cardTitle","filterGuestsData","filterInventoryData","UI_DISABLED_TABLE_SUBSCRIPTIONS"],"mappings":"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","file":"static/js/8.8fbb924e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, store, useSelector } from '../../redux';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = dateHelpers.getRangedMonthDateTime().listDateTimeRanges.map(dateTime => ({\n  ...dateTime,\n  selected: false\n}));\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Array} props.options\n * @param {Function} props.t\n * @param {string} props.value\n * @param {string} props.viewId\n * @returns {Node}\n */\nconst ToolbarFieldRangedMonthly = ({ options, t, value, viewId }) => {\n  const updatedValue = useSelector(({ view }) => view.query?.[viewId]?.[RHSM_API_QUERY_TYPES.START_DATE], value);\n\n  const updatedOptions = options.map(option => ({\n    ...option,\n    selected: option.title === updatedValue || option.value.startDate.toISOString() === updatedValue\n  }));\n\n  /**\n   * On select, dispatch type.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @returns {void}\n   */\n  const onSelect = event => {\n    const { startDate, endDate } = event.value;\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: FIELD_TYPES.DAILY\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      }\n    ]);\n  };\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      placeholder={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      position={SelectPosition.right}\n      maxHeight={250}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{viewId: string, t: Function, options: Array, value: string}}\n */\nToolbarFieldRangedMonthly.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  t: PropTypes.func,\n  value: PropTypes.string,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{viewId: string, t: translate, options: Array, value: string}}\n */\nToolbarFieldRangedMonthly.defaultProps = {\n  options: toolbarFieldOptions,\n  t: translate,\n  value: translate('curiosity-toolbar.granularityRange', { context: 'current' }),\n  viewId: 'toolbarFieldRangeGranularity'\n};\n\nexport { ToolbarFieldRangedMonthly as default, ToolbarFieldRangedMonthly, toolbarFieldOptions };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  chart_color_blue_100 as chartColorBlueLight,\n  chart_color_blue_300 as chartColorBlueDark\n} from '@patternfly/react-tokens';\nimport { Label as PfLabel } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport numbro from 'numbro';\nimport {\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_TYPES,\n  RHSM_API_QUERY_SORT_TYPES\n} from '../../types/rhsmApiTypes';\nimport { ProductView } from './productView';\nimport { translate } from '../i18n/i18n';\nimport { dateHelpers } from '../../common';\nimport { ToolbarFieldRangedMonthly } from '../toolbar/toolbarFieldRangedMonthly';\n\n/**\n * An OpenShift Dedicated configured view.\n *\n * @param {object} props\n * @param {object} props.productConfig\n * @param {object} props.routeDetail\n * @returns {Node}\n */\nconst ProductViewOpenShiftDedicated = ({ productConfig, routeDetail }) => {\n  const { viewParameter: viewId } = routeDetail;\n  const { [RHSM_API_QUERY_TYPES.START_DATE]: startDate } = productConfig.graphTallyQuery;\n\n  return (\n    <ProductView\n      routeDetail={routeDetail}\n      productConfig={productConfig}\n      toolbarProduct={false}\n      toolbarGraph={<ToolbarFieldRangedMonthly value={startDate} viewId={viewId} />}\n      toolbarGraphDescription\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{routeDetail: object, productConfig:object}}\n */\nProductViewOpenShiftDedicated.propTypes = {\n  productConfig: ProductView.propTypes.productConfig,\n  routeDetail: PropTypes.shape({\n    pathParameter: PropTypes.string,\n    productParameter: PropTypes.string,\n    viewParameter: PropTypes.string\n  }).isRequired\n};\n\n/**\n * Default props.\n *\n * @type {{ productConfig: object }}\n */\nProductViewOpenShiftDedicated.defaultProps = {\n  productConfig: {\n    query: {\n      [RHSM_API_QUERY_TYPES.START_DATE]: dateHelpers.getRangedMonthDateTime('current').value.startDate.toISOString(),\n      [RHSM_API_QUERY_TYPES.END_DATE]: dateHelpers.getRangedMonthDateTime('current').value.endDate.toISOString()\n    },\n    graphTallyQuery: {\n      [RHSM_API_QUERY_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY\n    },\n    inventoryHostsQuery: {\n      [RHSM_API_QUERY_TYPES.SORT]: RHSM_API_QUERY_SORT_TYPES.LAST_SEEN,\n      [RHSM_API_QUERY_TYPES.DIRECTION]: SORT_DIRECTION_TYPES.DESCENDING,\n      [RHSM_API_QUERY_TYPES.LIMIT]: 100,\n      [RHSM_API_QUERY_TYPES.OFFSET]: 0\n    },\n    initialGraphFilters: [\n      {\n        id: 'coreHours',\n        fill: chartColorBlueLight.value,\n        stroke: chartColorBlueDark.value,\n        color: chartColorBlueDark.value\n      }\n    ],\n    initialGraphSettings: {\n      actionDisplay: data => {\n        const { coreHours } = data;\n        let displayContent;\n\n        if (coreHours) {\n          let total = 0;\n\n          coreHours.forEach(({ y }) => {\n            total += y ?? 0;\n          });\n\n          displayContent = translate('curiosity-graph.card-action-total', {\n            context: 'coreHours',\n            total: numbro(total)\n              .format({ average: true, mantissa: 2, trimMantissa: true, lowPrecision: false })\n              .toUpperCase()\n          });\n        }\n\n        return <div className=\"curiosity-usage-graph__total\">{displayContent || null}</div>;\n      }\n    },\n    initialInventoryFilters: [\n      {\n        id: 'displayName',\n        cell: data => {\n          const { displayName = {}, inventoryId = {}, numberOfGuests = {} } = data;\n\n          if (!inventoryId.value) {\n            return displayName.value;\n          }\n\n          const updatedDisplayName = displayName.value || inventoryId.value;\n\n          return (\n            <React.Fragment>\n              {updatedDisplayName}{' '}\n              {(numberOfGuests.value &&\n                translate('curiosity-inventory.label', { context: 'numberOfGuests', count: numberOfGuests.value }, [\n                  <PfLabel color=\"blue\" />\n                ])) ||\n                ''}\n            </React.Fragment>\n          );\n        },\n        isSortable: true\n      },\n      {\n        id: 'coreHours',\n        cell: data =>\n          (typeof data?.coreHours?.value === 'number' && Number.parseFloat(data?.coreHours?.value).toFixed(2)) ||\n          `0.00`,\n        isSortable: true,\n        isWrappable: true,\n        cellWidth: 15\n      },\n      {\n        id: 'lastSeen',\n        header: translate('curiosity-inventory.header', { context: 'lastSeen_OpenShift-dedicated-metrics' }),\n        cell: data => (data?.lastSeen?.value && <DateFormat date={data?.lastSeen?.value} />) || '',\n        isSortable: true,\n        isWrappable: true,\n        cellWidth: 15\n      }\n    ],\n    initialToolbarFilters: undefined\n  }\n};\n\nexport { ProductViewOpenShiftDedicated as default, ProductViewOpenShiftDedicated };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, AlertActionCloseButton, AlertVariant, Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport _isEqual from 'lodash/isEqual';\nimport { apiQueries, connect, reduxActions, reduxSelectors } from '../../redux';\nimport { translate } from '../i18n/i18n';\nimport { dateHelpers, helpers } from '../../common';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\n\n/**\n * Render banner messages.\n *\n * @augments React.Component\n */\nclass BannerMessages extends React.Component {\n  state = {};\n\n  componentDidMount() {\n    this.onUpdateData();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { query, productId } = this.props;\n\n    if (productId !== prevProps.productId || !_isEqual(query, prevProps.query)) {\n      this.onUpdateData();\n    }\n  }\n\n  /**\n   * Call the RHSM APIs, apply filters.\n   *\n   * @event onUpdateGraphData\n   */\n  onUpdateData = () => {\n    const { getMessageReports, productId, query } = this.props;\n    const { graphTallyQuery } = apiQueries.parseRhsmQuery(query);\n\n    if (productId) {\n      const { startDate, endDate } = dateHelpers.getRangedDateTime('CURRENT');\n      const updatedGraphQuery = {\n        ...graphTallyQuery,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString(),\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      };\n\n      getMessageReports(productId, updatedGraphQuery);\n    }\n  };\n\n  /**\n   * Apply messages' configuration to alerts.\n   *\n   * @returns {Node}\n   */\n  renderAlerts() {\n    const { state } = this;\n    const { appMessages, messages } = this.props;\n    const updatedMessages = [];\n\n    if (messages.length) {\n      Object.entries(appMessages).forEach(([key, value]) => {\n        if (state[key] !== true && value === true) {\n          const message = messages.find(({ id }) => id === key);\n\n          if (message) {\n            updatedMessages.push({\n              key,\n              ...message\n            });\n          }\n        }\n      });\n    }\n\n    return updatedMessages.map(({ key, message, title, variant = AlertVariant.info }) => {\n      const actionClose = <AlertActionCloseButton onClose={() => this.setState({ [key]: true })} />;\n\n      return (\n        <Alert actionClose={actionClose} key={key} title={title} variant={variant}>\n          {message}\n        </Alert>\n      );\n    });\n  }\n\n  /**\n   * Render a banner messages container.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const alerts = this.renderAlerts();\n\n    if (alerts.length) {\n      return <div className=\"curiosity-banner-messages\">{alerts}</div>;\n    }\n\n    return null;\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{appMessages: object, productId: string, getMessageReports: Function, query: object, messages: Array}}\n */\nBannerMessages.propTypes = {\n  appMessages: PropTypes.object.isRequired,\n  getMessageReports: PropTypes.func,\n  query: PropTypes.object,\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.node.isRequired,\n      message: PropTypes.node.isRequired,\n      variant: PropTypes.oneOf([...Object.values(AlertVariant)])\n    })\n  ),\n  productId: PropTypes.string.isRequired\n};\n\n/**\n * Default props.\n *\n * @type {{getMessageReports: Function, query: object, messages: Array}}\n */\nBannerMessages.defaultProps = {\n  getMessageReports: helpers.noop,\n  query: {},\n  messages: [\n    {\n      id: 'cloudigradeMismatch',\n      title: translate('curiosity-banner.dataMismatchTitle'),\n      message: translate(\n        'curiosity-banner.dataMismatchMessage',\n        {\n          context: helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS !== '' && 'cloudigradeMismatch',\n          appName: helpers.UI_DISPLAY_NAME\n        },\n        [\n          <Button\n            isInline\n            component=\"a\"\n            variant=\"link\"\n            icon={<ExternalLinkAltIcon />}\n            iconPosition=\"right\"\n            target=\"_blank\"\n            href={helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS}\n          />\n        ]\n      )\n    }\n  ]\n};\n\n/**\n * Apply actions to props.\n *\n * @param {Function} dispatch\n * @returns {object}\n */\nconst mapDispatchToProps = dispatch => ({\n  getMessageReports: (id, query) => dispatch(reduxActions.rhsm.getMessageReports(id, query))\n});\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.appMessages.makeAppMessages();\n\nconst ConnectedBannerMessages = connect(makeMapStateToProps, mapDispatchToProps)(BannerMessages);\n\nexport { ConnectedBannerMessages as default, ConnectedBannerMessages, BannerMessages };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport { PageLayout, PageHeader, PageSection, PageToolbar, PageMessages } from '../pageLayout/pageLayout';\nimport { apiQueries } from '../../redux';\nimport { ConnectedGraphCard, GraphCard } from '../graphCard/graphCard';\nimport { ConnectedToolbar, Toolbar } from '../toolbar/toolbar';\nimport { ConnectedInventoryList, InventoryList } from '../inventoryList/inventoryList';\nimport { helpers } from '../../common';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport { ToolbarFieldGranularity } from '../toolbar/toolbarFieldGranularity';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport {\n  ConnectedInventorySubscriptions,\n  InventorySubscriptions\n} from '../inventorySubscriptions/inventorySubscriptions';\nimport {\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_SORT_TYPES,\n  RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES,\n  RHSM_API_QUERY_TYPES\n} from '../../types/rhsmApiTypes';\nimport { GuestsList } from '../guestsList/guestsList';\nimport { translate } from '../i18n/i18n';\n\n/**\n * ToDo: base for default product layouts, add additional props for various toolbars\n * Next steps include...\n * Consider being able to pass customized toolbars for GraphCard and the\n * various Inventory displays. Have to evaluate how to handle the global toolbar, one\n * consideration is creating optional widgets with self-contained state update ability\n * based off of context/props/etc.\n *\n * Moving existing products to this layout, or maintaining them \"as is\", then renaming and\n * relocating them to this directory if they've been customized beyond a basic layout.\n */\n/**\n * Display a product.\n *\n * @param {object} props\n * @param {object} props.productConfig\n * @param {object} props.routeDetail\n * @param {Function} props.t\n * @param {Node|boolean} props.toolbarGraph\n * @param {boolean} props.toolbarGraphDescription\n * @param {Node|boolean} props.toolbarProduct\n * @returns {Node}\n */\nconst ProductView = ({ productConfig, routeDetail, t, toolbarGraph, toolbarGraphDescription, toolbarProduct }) => {\n  const {\n    graphTallyQuery,\n    inventoryHostsQuery,\n    inventorySubscriptionsQuery,\n    query,\n    initialToolbarFilters,\n    initialGraphFilters,\n    initialGraphSettings,\n    initialGuestsFilters,\n    initialInventoryFilters,\n    initialInventorySettings,\n    initialSubscriptionsInventoryFilters\n  } = productConfig;\n\n  const {\n    query: initialQuery,\n    graphTallyQuery: initialGraphTallyQuery,\n    inventoryHostsQuery: initialInventoryHostsQuery,\n    inventorySubscriptionsQuery: initialInventorySubscriptionsQuery,\n    toolbarQuery: initialToolbarQuery\n  } = apiQueries.parseRhsmQuery(query, { graphTallyQuery, inventoryHostsQuery, inventorySubscriptionsQuery });\n\n  const { pathParameter: productId, productParameter: productLabel, viewParameter: viewId } = routeDetail;\n\n  if (!productId || !viewId) {\n    return null;\n  }\n\n  let graphCardTooltip = null;\n\n  if (toolbarGraphDescription) {\n    graphCardTooltip = (\n      <Tooltip\n        content={<p>{t('curiosity-graph.cardHeadingDescription', { context: productId })}</p>}\n        position={TooltipPosition.top}\n        enableFlip={false}\n        distance={5}\n        entryDelay={100}\n        exitDelay={0}\n      >\n        <sup className=\"curiosity-icon__info\">\n          <InfoCircleIcon />\n        </sup>\n      </Tooltip>\n    );\n  }\n\n  const graphCardTitle = (\n    <React.Fragment>\n      {t('curiosity-graph.cardHeading', { context: productId })}\n      {graphCardTooltip}\n    </React.Fragment>\n  );\n\n  return (\n    <PageLayout>\n      <PageHeader productLabel={productLabel} includeTour>\n        {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: productLabel })}\n      </PageHeader>\n      <PageMessages>\n        <BannerMessages productId={productId} viewId={viewId} query={initialQuery} />\n      </PageMessages>\n      <PageToolbar>\n        {(React.isValidElement(toolbarProduct) && toolbarProduct) ||\n          (toolbarProduct !== false && (\n            <ConnectedToolbar\n              filterOptions={initialToolbarFilters}\n              productId={productId}\n              query={initialToolbarQuery}\n              viewId={viewId}\n            />\n          ))}\n      </PageToolbar>\n      <PageSection>\n        <ConnectedGraphCard\n          key={`graph_${productId}`}\n          filterGraphData={initialGraphFilters}\n          settings={initialGraphSettings}\n          query={initialGraphTallyQuery}\n          productId={productId}\n          viewId={viewId}\n          cardTitle={graphCardTitle}\n          productLabel={productLabel}\n        >\n          {(React.isValidElement(toolbarGraph) && toolbarGraph) ||\n            (toolbarGraph !== false && (\n              <ToolbarFieldGranularity\n                viewId={viewId}\n                value={initialGraphTallyQuery[RHSM_API_QUERY_TYPES.GRANULARITY]}\n              />\n            ))}\n        </ConnectedGraphCard>\n      </PageSection>\n      <PageSection>\n        <InventoryTabs key={`inventory_${productId}`} productId={productId}>\n          <InventoryTab key={`inventory_hosts_${productId}`} title={t('curiosity-inventory.tab', { context: 'hosts' })}>\n            <ConnectedInventoryList\n              key={`inv_${productId}`}\n              filterGuestsData={initialGuestsFilters}\n              filterInventoryData={initialInventoryFilters}\n              productId={productId}\n              settings={initialInventorySettings}\n              query={initialInventoryHostsQuery}\n              viewId={viewId}\n            />\n          </InventoryTab>\n          {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && (\n            <InventoryTab\n              key={`inventory_subs_${productId}`}\n              title={t('curiosity-inventory.tab', { context: 'subscriptions' })}\n            >\n              <ConnectedInventorySubscriptions\n                key={`subs_${productId}`}\n                filterInventoryData={initialSubscriptionsInventoryFilters}\n                productId={productId}\n                query={initialInventorySubscriptionsQuery}\n                viewId={viewId}\n              />\n            </InventoryTab>\n          )}\n        </InventoryTabs>\n      </PageSection>\n    </PageLayout>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), toolbarGraphDescription: boolean, routeDetail: object,\n *    productConfig: object, toolbarProduct: (Node|boolean)}}\n */\nProductView.propTypes = {\n  productConfig: PropTypes.shape({\n    graphTallyQuery: PropTypes.shape({\n      [RHSM_API_QUERY_TYPES.GRANULARITY]: PropTypes.oneOf([...Object.values(GRANULARITY_TYPES)])\n    }),\n    inventoryHostsQuery: PropTypes.shape({\n      [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SORT_TYPES)]),\n      [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n    }),\n    inventorySubscriptionsQuery: PropTypes.shape({\n      [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n      [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES)]),\n      [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n    }),\n    query: PropTypes.shape({\n      [RHSM_API_QUERY_TYPES.START_DATE]: PropTypes.string,\n      [RHSM_API_QUERY_TYPES.END_DATE]: PropTypes.string\n    }),\n    initialToolbarFilters: Toolbar.propTypes.filterOptions,\n    initialGraphFilters: GraphCard.propTypes.filterGraphData,\n    initialGraphSettings: GraphCard.propTypes.settings,\n    initialGuestsFilters: GuestsList.propTypes.filterGuestsData,\n    initialInventoryFilters: InventoryList.propTypes.filterInventoryData,\n    initialInventorySettings: InventoryList.propTypes.settings,\n    initialSubscriptionsInventoryFilters: InventorySubscriptions.propTypes.filterInventoryData\n  }).isRequired,\n  routeDetail: PropTypes.shape({\n    pathParameter: PropTypes.string,\n    productParameter: PropTypes.string,\n    viewParameter: PropTypes.string\n  }).isRequired,\n  t: PropTypes.func,\n  toolbarGraph: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n  toolbarGraphDescription: PropTypes.bool,\n  toolbarProduct: PropTypes.oneOfType([PropTypes.node, PropTypes.bool])\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), toolbarGraphDescription: boolean, toolbarProduct: (Node|boolean)}}\n */\nProductView.defaultProps = {\n  t: translate,\n  toolbarGraph: null,\n  toolbarGraphDescription: false,\n  toolbarProduct: null\n};\n\nexport { ProductView as default, ProductView };\n"],"sourceRoot":""}