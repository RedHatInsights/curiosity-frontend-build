{"version":3,"sources":["components/form/select.js","components/toolbar/toolbarFieldGranularity.js"],"names":["SelectDirection","DropdownDirection","SelectPosition","DropdownPosition","Select","state","isExpanded","options","selected","selectField","React","createRef","onSelect","event","titleSelection","props","id","name","variant","updatedOptions","optionsIndex","findIndex","option","title","SelectVariant","single","forEach","index","updateSelected","filter","opt","map","setState","mockUpdatedOptions","_cloneDeep","mockTarget","value","selectedIndex","type","checkbox","checked","mockEvent","target","currentTarget","persist","helpers","noop","onToggle","expanded","this","formatOptions","prevProps","selectedOptions","_isEqual","current","domElement","dataAttributes","Object","entries","key","test","_isPlainObject","activateOptions","convertedOption","text","textContent","label","isSelected","_findIndex","find","activeOption","values","includes","parentRef","setAttribute","ariaLabel","className","direction","isDisabled","isToggleText","maxHeight","placeholder","position","toggleIcon","pfSelectOptions","length","right","aria-label","selections","isOpen","placeholderText","ref","window","btoa","data-value","JSON","stringify","data-title","Component","defaultProps","down","generateId","left","toolbarFieldOptions","FIELD_TYPES","translate","context","ToolbarFieldGranularity","t","viewId","updatedValue","useSelector","view","graphTallyQuery","RHSM_API_QUERY_TYPES","GRANULARITY","dateHelpers","getRangedDateTime","startDate","endDate","store","dispatch","reduxTypes","query","SET_QUERY_CLEAR_INVENTORY_LIST","SET_QUERY_RHSM_TYPES","START_DATE","toISOString","END_DATE","data-test","DAILY"],"mappings":"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","file":"static/js/24.6c56711b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  DropdownDirection,\n  DropdownPosition,\n  Select as PfSelect,\n  SelectOption as PfSelectOption,\n  SelectVariant\n} from '@patternfly/react-core';\nimport _cloneDeep from 'lodash/cloneDeep';\nimport _isEqual from 'lodash/isEqual';\nimport _findIndex from 'lodash/findIndex';\nimport _isPlainObject from 'lodash/isPlainObject';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Pass direction as select component variant option.\n *\n * @type {DropdownDirection}\n */\nconst SelectDirection = DropdownDirection;\n\n/**\n * Pass position as select component variant option.\n *\n * @type {DropdownPosition}\n */\nconst SelectPosition = DropdownPosition;\n\n/**\n * A wrapper for Patternfly Select. Provides restructured event data for onSelect callback.\n *\n * @augments React.Component\n * @fires onSelect\n * @fires onToggle\n */\nclass Select extends React.Component {\n  state = { isExpanded: false, options: null, selected: null };\n\n  selectField = React.createRef();\n\n  componentDidMount() {\n    const { options } = this.state;\n\n    if (options === null) {\n      this.formatOptions();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { options, selectedOptions } = this.props;\n\n    if (!_isEqual(prevProps.options, options) || !_isEqual(prevProps.selectedOptions, selectedOptions)) {\n      this.formatOptions();\n    }\n  }\n\n  /**\n   * Emulate select event object, apply to provided onSelect prop.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @param {string} titleSelection\n   */\n  onSelect = (event, titleSelection) => {\n    const { options } = this.state;\n    const { id, name, onSelect, variant } = this.props;\n\n    const updatedOptions = options;\n    const optionsIndex = updatedOptions.findIndex(option => option.title === titleSelection);\n    updatedOptions[optionsIndex].selected =\n      variant === SelectVariant.single ? true : !updatedOptions[optionsIndex].selected;\n\n    if (variant === SelectVariant.single) {\n      updatedOptions.forEach((option, index) => {\n        if (optionsIndex !== index) {\n          updatedOptions[index].selected = false;\n        }\n      });\n    }\n\n    const updateSelected =\n      variant === SelectVariant.single\n        ? titleSelection\n        : updatedOptions.filter(opt => opt.selected === true).map(opt => opt.title);\n\n    this.setState(\n      {\n        options: updatedOptions,\n        selected: updateSelected\n      },\n      () => {\n        const mockUpdatedOptions = _cloneDeep(updatedOptions);\n\n        const mockTarget = {\n          id,\n          name: name || id,\n          value: mockUpdatedOptions[optionsIndex].value,\n          selected:\n            (variant === SelectVariant.single && mockUpdatedOptions[optionsIndex]) || _cloneDeep(updateSelected),\n          selectedIndex: optionsIndex,\n          type: `select-${(variant === SelectVariant.single && 'one') || 'multiple'}`,\n          options: mockUpdatedOptions\n        };\n\n        if (variant === SelectVariant.checkbox) {\n          mockTarget.checked = mockUpdatedOptions[optionsIndex].selected;\n        }\n\n        const mockEvent = {\n          ...mockTarget,\n          target: { ...mockTarget },\n          currentTarget: { ...mockTarget },\n          persist: helpers.noop\n        };\n\n        onSelect({ ...mockEvent }, optionsIndex, mockUpdatedOptions);\n\n        if (variant === SelectVariant.single) {\n          this.setState({\n            isExpanded: false\n          });\n        }\n      }\n    );\n  };\n\n  /**\n   * Patternfly Select's open/closed state.\n   *\n   * @event onToggle\n   * @param {boolean} expanded\n   */\n  onToggle = expanded => {\n    this.setState({\n      isExpanded: expanded\n    });\n  };\n\n  // FixMe: attributes filtered on PF select component. allow data- attributes\n  /**\n   * Format options into a consumable array of objects format.\n   */\n  formatOptions() {\n    const { current: domElement = {} } = this.selectField;\n    const { options, selectedOptions, variant } = this.props;\n    const dataAttributes = Object.entries(this.props).filter(([key]) => /^data-/i.test(key));\n    const updatedOptions = _isPlainObject(options)\n      ? Object.entries(options).map(([key, value]) => ({ ...value, title: key, value }))\n      : _cloneDeep(options);\n\n    const activateOptions =\n      (selectedOptions && typeof selectedOptions === 'string') || typeof selectedOptions === 'number'\n        ? [selectedOptions]\n        : selectedOptions;\n\n    updatedOptions.forEach((option, index) => {\n      let convertedOption = option;\n\n      if (typeof convertedOption === 'string') {\n        convertedOption = {\n          title: option,\n          value: option\n        };\n\n        updatedOptions[index] = convertedOption;\n      }\n\n      convertedOption.text = convertedOption.text || convertedOption.title;\n      convertedOption.textContent = convertedOption.textContent || convertedOption.title;\n      convertedOption.label = convertedOption.label || convertedOption.title;\n\n      if (activateOptions) {\n        let isSelected;\n\n        if (_isPlainObject(convertedOption.value)) {\n          isSelected = _findIndex(activateOptions, convertedOption.value) > -1;\n\n          if (!isSelected) {\n            const tempSearch = activateOptions.find(activeOption =>\n              Object.values(convertedOption.value).includes(activeOption)\n            );\n            isSelected = !!tempSearch;\n          }\n        } else {\n          isSelected = activateOptions.includes(convertedOption.value);\n        }\n\n        if (!isSelected) {\n          isSelected = activateOptions.includes(convertedOption.title);\n        }\n\n        updatedOptions[index].selected = isSelected;\n      }\n    });\n\n    let updateSelected;\n\n    if (variant === SelectVariant.single) {\n      updateSelected = (updatedOptions.find(opt => opt.selected === true) || {}).title;\n    } else {\n      updateSelected = updatedOptions.filter(opt => opt.selected === true).map(opt => opt.title);\n    }\n\n    if (domElement?.parentRef?.current) {\n      dataAttributes.forEach(([key, value]) => domElement?.parentRef?.current.setAttribute(key, value));\n    }\n\n    this.setState({\n      options: updatedOptions,\n      selected: updateSelected\n    });\n  }\n\n  /**\n   * Render a select/dropdown list.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { options, selected, isExpanded } = this.state;\n    const {\n      ariaLabel,\n      className,\n      direction,\n      isDisabled,\n      isToggleText,\n      maxHeight,\n      placeholder,\n      position,\n      toggleIcon,\n      variant\n    } = this.props;\n\n    const pfSelectOptions = {\n      direction,\n      maxHeight\n    };\n\n    // FixMe: investigate \"isDisabled\", PFReact quirks?\n    if (!options || !options.length || isDisabled) {\n      pfSelectOptions.isDisabled = true;\n    }\n\n    /**\n     * FixMe: PFReact quirks around PfSelect, requires children\n     * \"Null\" is a typical fallback we use across the board on a multitude of React apps.\n     * In this case \"null\" is a fallback for scenarios where an \"undefined\" list is passed\n     * during initial mount. Converted to an empty list/array \"[]\" to compensate.\n     */\n    /**\n     * Note: PFReact missing select border on compile\n     * Related https://github.com/patternfly/patternfly-react/issues/5650 and\n     * https://github.com/cssnano/cssnano/issues/1051\n     */\n    return (\n      <PfSelect\n        className={`curiosity-select${(!isToggleText && '__no-toggle-text') || ''} ${\n          (position === DropdownPosition.right && 'curiosity-select__position-right') || ''\n        } ${className}`}\n        variant={variant}\n        aria-label={ariaLabel}\n        onToggle={this.onToggle}\n        onSelect={this.onSelect}\n        selections={selected}\n        isOpen={isExpanded}\n        toggleIcon={toggleIcon}\n        placeholderText={placeholder}\n        ref={this.selectField}\n        {...pfSelectOptions}\n      >\n        {(options &&\n          options.map(option => (\n            <PfSelectOption\n              key={window.btoa(`${option.title}-${option.value}`)}\n              id={window.btoa(`${option.title}-${option.value}`)}\n              value={option.title}\n              data-value={(_isPlainObject(option.value) && JSON.stringify([option.value])) || option.value}\n              data-title={option.title}\n            />\n          ))) ||\n          []}\n      </PfSelect>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{toggleIcon: (Node|Function), className: string, ariaLabel: string, onSelect: Function,\n *     isToggleText: boolean, maxHeight: number, name: string, options: (Array|object),\n *     selectedOptions: (number|string|Array), variant: string, id: string, isDisabled: boolean,\n *     placeholder: string, position: string, direction: string}}\n */\nSelect.propTypes = {\n  ariaLabel: PropTypes.string,\n  className: PropTypes.string,\n  direction: PropTypes.oneOf(Object.values(SelectDirection)),\n  id: PropTypes.string,\n  isDisabled: PropTypes.bool,\n  isToggleText: PropTypes.bool,\n  maxHeight: PropTypes.number,\n  name: PropTypes.string,\n  onSelect: PropTypes.func,\n  options: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.string),\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.any,\n        value: PropTypes.any.isRequired,\n        selected: PropTypes.bool\n      })\n    ),\n    PropTypes.shape({\n      title: PropTypes.any,\n      value: PropTypes.any.isRequired,\n      selected: PropTypes.bool\n    }),\n    PropTypes.object\n  ]),\n  placeholder: PropTypes.string,\n  position: PropTypes.oneOf(Object.values(SelectPosition)),\n  selectedOptions: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]))\n  ]),\n  toggleIcon: PropTypes.element,\n  variant: PropTypes.oneOf([...Object.values(SelectVariant)])\n};\n\n/**\n * Default props.\n *\n * @type {{toggleIcon: (Node|Function), className: string, ariaLabel: string, onSelect: Function, isToggleText: boolean,\n *     maxHeight: number, name: string, options: (Array|object), selectedOptions: (number|string|Array),\n *     variant: SelectVariant.single, id: string, isDisabled: boolean, placeholder: string,\n *     position: DropdownPosition.left, direction: DropdownDirection.down}}\n */\nSelect.defaultProps = {\n  ariaLabel: 'Select option',\n  className: '',\n  direction: SelectDirection.down,\n  id: helpers.generateId(),\n  isDisabled: false,\n  isToggleText: true,\n  maxHeight: null,\n  name: null,\n  onSelect: helpers.noop,\n  options: [],\n  placeholder: 'Select option',\n  position: SelectPosition.left,\n  selectedOptions: null,\n  toggleIcon: null,\n  variant: SelectVariant.single\n};\n\nexport { Select as default, Select, SelectDirection, SelectPosition };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, store, useSelector } from '../../redux';\nimport { Select } from '../form/select';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.granularity', { context: type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Array} props.options\n * @param {Function} props.t\n * @param {string} props.value\n * @param {string} props.viewId\n * @returns {Node}\n */\nconst ToolbarFieldGranularity = ({ options, t, value, viewId }) => {\n  const updatedValue = useSelector(\n    ({ view }) => view.graphTallyQuery?.[viewId]?.[RHSM_API_QUERY_TYPES.GRANULARITY],\n    value\n  );\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  /**\n   * On select, dispatch type.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @returns {void}\n   */\n  const onSelect = event => {\n    const { startDate, endDate } = dateHelpers.getRangedDateTime(event.value);\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: event.value\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      }\n    ]);\n  };\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      data-test={ToolbarFieldGranularity.defaultProps.viewId}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{viewId: string, t: Function, options: Array, value: string}}\n */\nToolbarFieldGranularity.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  t: PropTypes.func,\n  value: PropTypes.oneOf([...Object.values(FIELD_TYPES)]),\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{viewId: string, t: translate, options: Array, value: string}}\n */\nToolbarFieldGranularity.defaultProps = {\n  options: toolbarFieldOptions,\n  t: translate,\n  value: FIELD_TYPES.DAILY,\n  viewId: 'toolbarFieldGranularity'\n};\n\nexport { ToolbarFieldGranularity as default, ToolbarFieldGranularity, toolbarFieldOptions };\n"],"sourceRoot":""}