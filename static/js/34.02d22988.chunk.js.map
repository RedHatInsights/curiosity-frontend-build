{"version":3,"sources":["../node_modules/@patternfly/react-icons/dist/esm/icons/eye-slash-icon.js","components/graphCard/graphCardChartLegend.js"],"names":["EyeSlashIcon","createIcon","name","height","width","svgPath","yOffset","xOffset","GraphCardChartLegend","onClick","id","props","chart","viewId","updatedToggle","toggle","store","dispatch","type","reduxTypes","graph","SET_GRAPH_LEGEND","legend","this","datum","dataSets","forEach","isToggled","hide","chartId","color","isDisabled","isThreshold","labelContent","tooltipContent","checkIsToggled","button","Button","onKeyPress","className","tabIndex","variant","component","icon","aria-hidden","style","visibility","borderTopColor","backgroundColor","Tooltip","content","position","TooltipPosition","top","enableFlip","distance","entryDelay","exitDelay","productLabel","t","Fragment","map","stroke","data","find","y","hasData","product","context","renderLegendItem","React","Component","defaultProps","helpers","noop","translate","ConnectedGraphCardChartLegend","connect"],"mappings":"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","file":"static/js/34.02d22988.chunk.js","sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const EyeSlashIconConfig = {\n  name: 'EyeSlashIcon',\n  height: 512,\n  width: 640,\n  svgPath: 'M320 400c-75.85 0-137.25-58.71-142.9-133.11L72.2 185.82c-13.79 17.3-26.48 35.59-36.72 55.59a32.35 32.35 0 0 0 0 29.19C89.71 376.41 197.07 448 320 448c26.91 0 52.87-4 77.89-10.46L346 397.39a144.13 144.13 0 0 1-26 2.61zm313.82 58.1l-110.55-85.44a331.25 331.25 0 0 0 81.25-102.07 32.35 32.35 0 0 0 0-29.19C550.29 135.59 442.93 64 320 64a308.15 308.15 0 0 0-147.32 37.7L45.46 3.37A16 16 0 0 0 23 6.18L3.37 31.45A16 16 0 0 0 6.18 53.9l588.36 454.73a16 16 0 0 0 22.46-2.81l19.64-25.27a16 16 0 0 0-2.82-22.45zm-183.72-142l-39.3-30.38A94.75 94.75 0 0 0 416 256a94.76 94.76 0 0 0-121.31-92.21A47.65 47.65 0 0 1 304 192a46.64 46.64 0 0 1-1.54 10l-73.61-56.89A142.31 142.31 0 0 1 320 112a143.92 143.92 0 0 1 144 144c0 21.63-5.29 41.79-13.9 60.11z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const EyeSlashIcon = createIcon(EyeSlashIconConfig);\n\nexport default EyeSlashIcon;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { EyeSlashIcon } from '@patternfly/react-icons';\nimport { connect, store, reduxTypes } from '../../redux';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A custom chart legend.\n *\n * @augments React.Component\n * @fires onClick\n */\nclass GraphCardChartLegend extends React.Component {\n  componentDidMount() {\n    const { chart, datum, legend, viewId } = this.props;\n    datum.dataSets.forEach(({ id }) => {\n      const checkIsToggled = legend[`${viewId}-${id}`] || chart.isToggled(id);\n\n      if (checkIsToggled) {\n        chart.hide(id);\n      }\n    });\n  }\n\n  /**\n   * Toggle legend item and chart.\n   *\n   * @event onClick\n   * @param {string} id\n   */\n  onClick = id => {\n    const { chart, viewId } = this.props;\n    const updatedToggle = chart.toggle(id);\n\n    store.dispatch({\n      type: reduxTypes.graph.SET_GRAPH_LEGEND,\n      legend: {\n        [`${viewId}-${id}`]: updatedToggle\n      }\n    });\n  };\n\n  /**\n   * Return a legend item.\n   *\n   * @param {object} options\n   * @param {string} options.chartId\n   * @param {string} options.color\n   * @param {boolean} options.isDisabled\n   * @param {boolean} options.isThreshold\n   * @param {string} options.labelContent\n   * @param {string} options.tooltipContent\n   * @returns {Node}\n   */\n  renderLegendItem({ chartId, color, isDisabled, isThreshold, labelContent, tooltipContent }) {\n    const { chart, legend, viewId } = this.props;\n    const checkIsToggled = legend[`${viewId}-${chartId}`] || chart.isToggled(chartId);\n\n    const button = (\n      <Button\n        onClick={() => this.onClick(chartId)}\n        onKeyPress={() => this.onClick(chartId)}\n        className=\"victory-legend-item\"\n        tabIndex={0}\n        key={`curiosity-button-${chartId}`}\n        variant=\"link\"\n        component=\"a\"\n        isDisabled={isDisabled}\n        icon={\n          ((isDisabled || checkIsToggled) && <EyeSlashIcon />) ||\n          (isThreshold && (\n            <hr\n              aria-hidden\n              className=\"threshold-legend-icon\"\n              style={{\n                visibility: (isDisabled && 'hidden') || (checkIsToggled && 'hidden') || 'visible',\n                borderTopColor: color\n              }}\n            />\n          )) || (\n            <div\n              aria-hidden\n              className=\"legend-icon\"\n              style={{\n                visibility: (isDisabled && 'hidden') || (checkIsToggled && 'hidden') || 'visible',\n                backgroundColor: color\n              }}\n            />\n          )\n        }\n      >\n        {labelContent}\n      </Button>\n    );\n\n    /**\n     * FixMe: PF Tooltip has breaking changes not called out in changelog.md for PF React-core?\n     * Unclear which changelog this is called out in. Had to open the PF React-core component\n     * and the associated PR to determine when breaking changes were activated. v4.30.0\n     *  - https://github.com/patternfly/patternfly-react/pull/4491/files\n     *\n     * Breaking changes:\n     * 1. enableFlip prop is more sensitive, and/or not overridden by declaring \"position\"\n     *    - enableFlip possibly causes unintended behavior on smaller screen sizes when \"distance\" prop\n     *      is set to \"0\"\n     * 2. unit test snapshots updated, causing CI to fail\n     * 3. removing props, deprecating them, having them \"[not do anything]\"\n     */\n    if (tooltipContent) {\n      return (\n        <Tooltip\n          key={`curiosity-tooltip-${chartId}`}\n          content={<p>{tooltipContent}</p>}\n          position={TooltipPosition.top}\n          enableFlip={false}\n          distance={5}\n          entryDelay={100}\n          exitDelay={0}\n        >\n          {button}\n        </Tooltip>\n      );\n    }\n\n    return button;\n  }\n\n  /**\n   * Render a graph legend.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { datum, productLabel, t } = this.props;\n\n    return (\n      <React.Fragment>\n        {datum.dataSets.map(({ id, isThreshold, stroke, data = [] }) => {\n          const isDisabled =\n            !data.find(({ y, hasData }) => (y >= 0 && hasData === true) || (y >= 0 && isThreshold === true)) || false;\n\n          const labelContent =\n            (isThreshold &&\n              t([`curiosity-graph.${id}Label`, `curiosity-graph.thresholdLabel`], {\n                product: productLabel,\n                context: productLabel\n              })) ||\n            t([`curiosity-graph.${id}Label`, `curiosity-graph.noLabel`], {\n              product: productLabel,\n              context: productLabel\n            });\n\n          const tooltipContent =\n            (isThreshold &&\n              t([`curiosity-graph.${id}LegendTooltip`, `curiosity-graph.thresholdLegendTooltip`], {\n                product: productLabel,\n                context: productLabel\n              })) ||\n            t(`curiosity-graph.${id}LegendTooltip`, { product: productLabel, context: productLabel });\n\n          return this.renderLegendItem({\n            chartId: id,\n            color: stroke,\n            labelContent,\n            isDisabled,\n            isThreshold,\n            tooltipContent\n          });\n        })}\n      </React.Fragment>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{datum, productLabel: string, t: Function, legend: object, chart: object}}\n */\nGraphCardChartLegend.propTypes = {\n  chart: PropTypes.shape({\n    hide: PropTypes.func,\n    toggle: PropTypes.func,\n    isToggled: PropTypes.func\n  }),\n  datum: PropTypes.shape({\n    dataSets: PropTypes.arrayOf(\n      PropTypes.shape({\n        stroke: PropTypes.string.isRequired,\n        id: PropTypes.string.isRequired,\n        isThreshold: PropTypes.bool\n      })\n    )\n  }),\n  legend: PropTypes.objectOf(PropTypes.bool),\n  productLabel: PropTypes.string,\n  t: PropTypes.func,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{datum: {dataSets: Array}, productLabel: string, viewId: string, t: translate, legend: object,\n *     chart: {hide: Function, toggle: Function, isToggled: Function}}}\n */\nGraphCardChartLegend.defaultProps = {\n  chart: {\n    hide: helpers.noop,\n    toggle: helpers.noop,\n    isToggled: helpers.noop\n  },\n  datum: {\n    dataSets: []\n  },\n  legend: {},\n  productLabel: '',\n  t: translate,\n  viewId: 'graphCardLegend'\n};\n\nconst mapStateToProps = ({ graph }) => ({ legend: graph.legend });\n\nconst ConnectedGraphCardChartLegend = connect(mapStateToProps)(GraphCardChartLegend);\n\nexport { ConnectedGraphCardChartLegend as default, ConnectedGraphCardChartLegend, GraphCardChartLegend };\n"],"sourceRoot":""}