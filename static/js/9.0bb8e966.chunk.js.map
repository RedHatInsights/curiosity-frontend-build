{"version":3,"sources":["components/c3GraphCard/c3GraphCardHelpers.js","components/c3GraphCard/c3GraphCardLegendItem.js","components/c3Chart/c3Chart.js","components/c3GraphCard/c3GraphCard.js","components/openshiftView/openshiftView.js"],"names":["getTooltipDate","date","granularity","momentDate","moment","utc","GRANULARITY_TYPES","QUARTERLY","format","dateHelpers","timestampQuarterFormats","yearShort","add","MONTHLY","timestampMonthFormats","yearLong","WEEKLY","timestampDayFormats","DAILY","xAxisTickFormat","tick","previousDate","formattedDate","isNewYear","Number","parseInt","year","replace","yAxisTickFormat","locale","Intl","NumberFormat","maximumFractionDigits","notation","compactDisplay","c3GraphCardHelpers","data","productShortLabel","hiddenDataFacets","converted","x","colors","columns","groups","names","types","convertTimeSeriesDate","value","helpers","TEST_MODE","local","forEach","test","id","color","chartColorGreenDark","translate","push","product","totalData","filteredValue","length","y","pop","configuration","tooltip","order","a","b","indexOf","title","ratio","index","updatedValue","dataItem","find","dataValue","hasInfinite","hasData","unloadBeforeLoad","padding","left","right","top","bottom","legend","show","spline","interpolation","type","point","grid","axis","xAxisTicks","slice","dateIndex","default","min","outer","C3GraphCardLegendItem","state","updatedIsToggled","onFocus","props","chart","chartId","getToggle","isToggled","focus","onRevert","revert","onToggle","toggle","setState","getColor","this","children","isDisabled","isThreshold","tooltipContent","checkIsToggled","hide","button","Button","tabIndex","key","variant","onClick","onMouseOver","onBlur","onMouseOut","onKeyPress","component","icon","aria-hidden","className","style","visibility","borderTopColor","backgroundColor","Tooltip","content","position","TooltipPosition","enableFlip","distance","entryDelay","exitDelay","React","Component","defaultProps","noop","C3Chart","node","createRef","generateChart","prevProps","config","_isEqual","destroy","onComplete","updatedChart","c3","generate","bindto","current","load","unload","done","ref","C3GraphCard","onUpdateGraphData","getGraphReportsCapacity","productId","query","graphGranularity","getQueryGranularity","getRangedDateTime","startDate","endDate","RHSM_API_QUERY_TYPES","START_DATE","toISOString","END_DATE","onGranularitySelect","event","viewId","store","dispatch","reduxTypes","SET_QUERY_RHSM_TYPES","GRANULARITY","filteredData","t","map","isDataHidden","includes","filterGraphData","graphData","selectOptionsType","selected","graphCardTypes","getGranularityOptions","updatedGranularity","Object","values","filtered","keys","renderLegend","cardTitle","error","pending","options","Card","CardHeader","CardTitle","Title","headingLevel","size","CardActions","aria-label","onSelect","selectedOptions","placeholder","CardBody","renderChart","UI_DISABLED_GRAPH","makeMapStateToProps","reduxSelectors","graphCard","makeGraphCard","ConnectedGraphCard","connect","reduxActions","rhsm","OpenshiftView","option","graphFilters","inventoryFilters","subscriptionsInventoryFilters","initialGraphFilters","initialInventoryFilters","initialSubscriptionsInventoryFilters","filter","isOptional","RegExp","SET_QUERY_CLEAR_INVENTORY_LIST","UOM","initialOption","context","RHSM_API_QUERY_UOM_TYPES","CORES","SOCKETS","initialGuestsFilters","initialToolbarFilters","initialInventorySettings","location","productLabel","graphTallyQuery","inventoryHostsQuery","inventorySubscriptionsQuery","routeDetail","isC3","parsedSearch","apiQueries","parseRhsmQuery","initialGraphTallyQuery","initialInventoryHostsQuery","initialInventorySubscriptionsQuery","toolbarQuery","includeTour","appName","UI_DISPLAY_NAME","pathParameter","filterOptions","renderSelect","filterGuestsData","filterInventoryData","settings","UI_DISABLED_TABLE_SUBSCRIPTIONS","SORT","RHSM_API_QUERY_SORT_TYPES","LAST_SEEN","DIRECTION","SORT_DIRECTION_TYPES","ASCENDING","LIMIT","OFFSET","RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES","UPCOMING_EVENT_DATE","fill","chartColorBlueLight","stroke","chartColorBlueDark","header","cell","session","displayName","inventoryId","authorized","inventory","isInline","target","href","UI_DEPLOY_PATH_PREFIX","cellWidth","lastSeen","numberOfGuests","updatedDisplayName","Fragment","count","isSortable","cloudProvider","measurementType","isWrappable","upcomingEventDate","SLA","view","makeView","ConnectedOpenshiftView"],"mappings":"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","file":"static/js/9.0bb8e966.chunk.js","sourcesContent":["import moment from 'moment';\nimport { chart_color_green_300 as chartColorGreenDark } from '@patternfly/react-tokens';\nimport { translate } from '../i18n/i18n';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers, helpers } from '../../common';\n\n/**\n * Return a formatted date string.\n *\n * @param {object} params\n * @param {Date} params.date\n * @param {string} params.granularity See enum of RHSM_API_QUERY_GRANULARITY_TYPES\n * @returns {string}\n */\nconst getTooltipDate = ({ date, granularity }) => {\n  const momentDate = moment.utc(date);\n\n  switch (granularity) {\n    case GRANULARITY_TYPES.QUARTERLY:\n      return `${momentDate.format(dateHelpers.timestampQuarterFormats.yearShort)} - ${momentDate\n        .add(1, 'quarter')\n        .format(dateHelpers.timestampQuarterFormats.yearShort)}`;\n\n    case GRANULARITY_TYPES.MONTHLY:\n      return momentDate.format(dateHelpers.timestampMonthFormats.yearLong);\n\n    case GRANULARITY_TYPES.WEEKLY:\n      return `${momentDate.format(dateHelpers.timestampDayFormats.short)} - ${momentDate\n        .add(1, 'week')\n        .format(dateHelpers.timestampDayFormats.yearShort)}`;\n\n    case GRANULARITY_TYPES.DAILY:\n    default:\n      return momentDate.format(dateHelpers.timestampDayFormats.long);\n  }\n};\n\n/**\n * Format x axis ticks.\n *\n * @param {object} params\n * @param {Date} params.date\n * @param {string} params.granularity See enum of RHSM_API_QUERY_GRANULARITY_TYPES\n * @param {number|string} params.tick\n * @param {Date} params.previousDate\n * @returns {string|undefined}\n */\nconst xAxisTickFormat = ({ date, granularity, tick, previousDate }) => {\n  if (!date || !granularity) {\n    return undefined;\n  }\n\n  const momentDate = moment.utc(date);\n  const isNewYear =\n    tick !== 0 && Number.parseInt(momentDate.year(), 10) !== Number.parseInt(moment.utc(previousDate).year(), 10);\n  let formattedDate;\n\n  switch (granularity) {\n    case GRANULARITY_TYPES.QUARTERLY:\n      formattedDate = isNewYear\n        ? momentDate.format(dateHelpers.timestampQuarterFormats.yearShort)\n        : momentDate.format(dateHelpers.timestampQuarterFormats.short);\n\n      formattedDate = formattedDate.replace(/\\s/, '\\n');\n      break;\n    case GRANULARITY_TYPES.MONTHLY:\n      formattedDate = isNewYear\n        ? momentDate.format(dateHelpers.timestampMonthFormats.yearShort)\n        : momentDate.format(dateHelpers.timestampMonthFormats.short);\n\n      formattedDate = formattedDate.replace(/\\s/, '\\n');\n      break;\n    case GRANULARITY_TYPES.WEEKLY:\n    case GRANULARITY_TYPES.DAILY:\n    default:\n      formattedDate = isNewYear\n        ? momentDate.format(dateHelpers.timestampDayFormats.yearShort)\n        : momentDate.format(dateHelpers.timestampDayFormats.short);\n\n      formattedDate = formattedDate.replace(/\\s(\\d{4})$/, '\\n$1');\n      break;\n  }\n\n  return formattedDate;\n};\n\n/**\n * Format y axis ticks.\n *\n * @param {object} params\n * @param {number|string} params.tick\n * @param {string} params.locale\n * @returns {string}\n */\nconst yAxisTickFormat = ({ tick, locale }) =>\n  new Intl.NumberFormat(locale, { maximumFractionDigits: 1, notation: 'compact', compactDisplay: 'short' }).format(\n    tick\n  );\n\n/**\n * Convert data into a C3 configuration object.\n *\n * @param {object} options\n * @param {Array} options.data\n * @param {string} options.granularity\n * @param {string} options.productShortLabel\n * @returns {{configuration: {padding: {top: number, left: number, bottom: number, right: number},\n *     data: {types: {}, names: {}, columns: Array, x: string, groups: Array, colors: {}},\n *     legend: {show: boolean}, grid: {y: {show: boolean}}, tooltip: {format: {title: Function,\n *     value: Function}, order: Function}, unloadBeforeLoad: boolean,\n *     spline: {interpolation: {type: string}}, axis: {x: {padding: number, tick: {format: Function},\n *     type: string}, y: {padding: {bottom: number}, default: number, min: number,\n *     tick: {show: boolean, outer: boolean, format: Function}}}, point: {show: boolean}},\n *     hiddenDataFacets: Array}}\n */\nconst c3Config = ({ data = [], granularity, productShortLabel }) => {\n  const hiddenDataFacets = [];\n  const converted = {\n    x: 'x',\n    colors: {},\n    columns: [],\n    groups: [[]],\n    names: {},\n    types: {}\n  };\n\n  const convertTimeSeriesDate = value => {\n    const dateStr = (helpers.TEST_MODE && moment.utc(value)) || moment.utc(value).local();\n    return dateStr.format('YYYY-MM-DD');\n  };\n\n  data.forEach(value => {\n    if (/^threshold/.test(value.id)) {\n      converted.colors[value.id] = value.color || chartColorGreenDark.value;\n      converted.types[value.id] = 'step';\n      converted.names[value.id] = translate(`curiosity-graph.thresholdLabel`);\n    } else {\n      converted.colors[value.id] = value.color;\n      converted.types[value.id] = 'area-spline';\n      converted.groups[0].push(value.id);\n      converted.names[value.id] = translate(`curiosity-graph.${value.id}Label`, { product: productShortLabel });\n    }\n\n    converted.columns[0] = ['x'];\n    converted.columns.push([value.id]);\n\n    let totalData = 0;\n\n    value.data.forEach(filteredValue => {\n      converted.columns[0].push(convertTimeSeriesDate(filteredValue.date));\n      converted.columns[converted.columns.length - 1].push(filteredValue.y);\n      totalData += filteredValue.y || 0;\n    });\n\n    // ToDo: need to check for infinite threshold, possibly has data\n    if (totalData <= 0) {\n      converted.columns.pop();\n      hiddenDataFacets.push(value.id);\n    }\n  });\n\n  return {\n    hiddenDataFacets,\n    configuration: {\n      tooltip: {\n        order: (a, b) => converted.columns.indexOf(a.id) - converted.columns.indexOf(b.id),\n        format: {\n          title: date =>\n            getTooltipDate({\n              date,\n              granularity\n            }),\n          value: (value, ratio, id, index) => {\n            const dataItem = data.find(dataValue => id === dataValue.id)?.data[index];\n            let updatedValue;\n\n            if (/^threshold/.test(id)) {\n              updatedValue =\n                (dataItem?.hasInfinite && translate('curiosity-graph.infiniteThresholdLabel')) ||\n                (dataItem?.y ?? translate('curiosity-graph.noDataLabel'));\n            } else {\n              updatedValue =\n                (dataItem?.hasData === false && translate('curiosity-graph.noDataLabel')) || dataItem?.y || 0;\n            }\n\n            return updatedValue;\n          }\n        }\n      },\n      unloadBeforeLoad: true,\n      padding: { left: 40, right: 40, top: 10, bottom: 10 },\n      legend: { show: false },\n      spline: {\n        interpolation: {\n          type: 'monotone'\n        }\n      },\n      data: {\n        ...converted\n      },\n      point: {\n        show: false\n      },\n      grid: {\n        y: {\n          show: true\n        }\n      },\n      axis: {\n        x: {\n          type: 'timeseries',\n          tick: {\n            format: tick => {\n              const xAxisTicks = converted.columns[0].slice(1);\n              const formattedDate = convertTimeSeriesDate(tick);\n              const dateIndex = xAxisTicks.indexOf(formattedDate);\n              const previousDate = dateIndex > -1 && xAxisTicks[dateIndex - 1];\n\n              return xAxisTickFormat({\n                tick: dateIndex,\n                date: formattedDate,\n                previousDate,\n                granularity\n              });\n            }\n          },\n          padding: 0\n        },\n        y: {\n          default: [0, 50],\n          padding: { bottom: 0 },\n          min: 0,\n          tick: {\n            show: false,\n            outer: false,\n            format: tick => (tick === 0 ? '' : yAxisTickFormat({ tick }))\n          }\n        }\n      }\n    }\n  };\n};\n\nconst c3GraphCardHelpers = {\n  c3Config,\n  getTooltipDate,\n  xAxisTickFormat,\n  yAxisTickFormat\n};\n\nexport {\n  c3GraphCardHelpers as default,\n  c3GraphCardHelpers,\n  c3Config,\n  getTooltipDate,\n  xAxisTickFormat,\n  yAxisTickFormat\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { EyeSlashIcon } from '@patternfly/react-icons';\nimport { helpers } from '../../common';\n\n/**\n * A chart/graph legend button.\n *\n * @augments React.Component\n * @fires onFocus\n * @fires onRevert\n * @fires onToggle\n */\nclass C3GraphCardLegendItem extends React.Component {\n  state = { updatedIsToggled: null };\n\n  /**\n   * C3 chart display focus.\n   *\n   * @event onFocus\n   */\n  onFocus = () => {\n    const { updatedIsToggled } = this.state;\n    const { chart, chartId, getToggle, isToggled } = this.props;\n\n    if ((typeof getToggle === 'function' && !isToggled) || !updatedIsToggled) {\n      chart.focus(chartId);\n    }\n  };\n\n  /**\n   * C3 chart display revert.\n   *\n   * @event onRevert\n   */\n  onRevert = () => {\n    const { updatedIsToggled } = this.state;\n    const { chart, getToggle, isToggled } = this.props;\n\n    if ((typeof getToggle === 'function' && !isToggled) || !updatedIsToggled) {\n      chart.revert();\n    }\n  };\n\n  /**\n   * C3 chart display toggle.\n   *\n   * @event onToggle\n   */\n  onToggle = () => {\n    const { updatedIsToggled } = this.state;\n    const { chart, chartId, getToggle, isToggled } = this.props;\n\n    chart.toggle(chartId);\n\n    if (typeof getToggle === 'function') {\n      getToggle({ isToggled: !isToggled });\n    } else {\n      this.setState({\n        updatedIsToggled: !updatedIsToggled\n      });\n    }\n\n    this.onRevert();\n  };\n\n  /**\n   * C3 chart display config color.\n   *\n   * @returns {string}\n   */\n  getColor = () => {\n    const { chart, chartId } = this.props;\n    return chart.color(chartId);\n  };\n\n  /**\n   * ToDO: evaluate using nullish coalescing operator for checkIsToggled\n   */\n  /**\n   * Render a chart legend item.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { updatedIsToggled } = this.state;\n    const { children, chart, chartId, isDisabled, isThreshold, isToggled, tooltipContent } = this.props;\n    const checkIsToggled =\n      (updatedIsToggled === null && typeof isToggled === 'boolean' && isToggled) || updatedIsToggled || false;\n\n    if (checkIsToggled) {\n      chart.hide(chartId);\n    }\n\n    const button = (\n      <Button\n        tabIndex={0}\n        key={`curiosity-button-${chartId}`}\n        variant=\"link\"\n        onClick={this.onToggle}\n        onFocus={this.onFocus}\n        onMouseOver={this.onFocus}\n        onBlur={this.onRevert}\n        onMouseOut={this.onRevert}\n        onKeyPress={this.onToggle}\n        component=\"a\"\n        isDisabled={isDisabled}\n        icon={\n          ((isDisabled || checkIsToggled) && <EyeSlashIcon />) ||\n          (isThreshold && (\n            <hr\n              aria-hidden\n              className=\"threshold-legend-icon\"\n              style={{\n                visibility: (isDisabled && 'hidden') || (checkIsToggled && 'hidden') || 'visible',\n                borderTopColor: this.getColor()\n              }}\n            />\n          )) || (\n            <div\n              aria-hidden\n              className=\"legend-icon\"\n              style={{\n                visibility: (isDisabled && 'hidden') || (checkIsToggled && 'hidden') || 'visible',\n                backgroundColor: this.getColor()\n              }}\n            />\n          )\n        }\n      >\n        {children}\n      </Button>\n    );\n\n    /**\n     * FixMe: PF Tooltip has breaking changes not called out in changelog.md for PF React-core?\n     * Unclear which changelog this is called out in. Had to open the PF React-core component\n     * and the associated PR to determine when breaking changes were activated. v4.30.0\n     *   - https://github.com/patternfly/patternfly-react/pull/4491/files\n     *\n     * Breaking changes:\n     * 1. enableFlip prop is more sensitive, and/or not overridden by declaring \"position\"\n     *    - enableFlip possibly causes unintended behavior on smaller screen sizes when \"distance\" prop\n     *      is set to \"0\"\n     * 2. unit test snapshots updated, causing CI to fail\n     * 3. removing props, deprecating them, having them \"[not do anything]\"\n     */\n    if (tooltipContent) {\n      return (\n        <Tooltip\n          key={`curiosity-tooltip-${chartId}`}\n          content={tooltipContent}\n          position={TooltipPosition.top}\n          enableFlip={false}\n          distance={5}\n          entryDelay={100}\n          exitDelay={0}\n        >\n          {button}\n        </Tooltip>\n      );\n    }\n\n    return button;\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{chartId: string, children: Node, isDisabled: boolean, tooltipContent: Node, chart: object,\n *    isThreshold: boolean, isToggled: boolean, getToggle: Function}}\n */\nC3GraphCardLegendItem.propTypes = {\n  chart: PropTypes.shape({\n    color: PropTypes.func,\n    focus: PropTypes.func,\n    hide: PropTypes.func,\n    revert: PropTypes.func,\n    toggle: PropTypes.func\n  }),\n  chartId: PropTypes.string.isRequired,\n  children: PropTypes.node,\n  isDisabled: PropTypes.bool,\n  isThreshold: PropTypes.bool,\n  isToggled: PropTypes.bool,\n  tooltipContent: PropTypes.node,\n  getToggle: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{children: null, isDisabled: boolean, tooltipContent: null, chart: {hide: Function,\n *    color: Function, focus: Function, revert: Function, toggle: Function}, isThreshold: boolean,\n *    isToggled: boolean, getToggle: Function}}\n */\nC3GraphCardLegendItem.defaultProps = {\n  chart: {\n    color: helpers.noop,\n    focus: helpers.noop,\n    hide: helpers.noop,\n    revert: helpers.noop,\n    toggle: helpers.noop\n  },\n  children: null,\n  isDisabled: false,\n  isThreshold: false,\n  isToggled: false,\n  tooltipContent: null,\n  getToggle: null\n};\n\nexport { C3GraphCardLegendItem as default, C3GraphCardLegendItem };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport c3 from 'c3';\nimport _isEqual from 'lodash/isEqual';\nimport 'c3/c3.min.css';\nimport { helpers } from '../../common';\n\n/**\n * C3 wrapper.\n * Uses aspects from https://github.com/bcbcarl/react-c3js and https://github.com/wuct/react-c3-component\n *\n * @augments React.Component\n */\nclass C3Chart extends React.Component {\n  state = { chart: null };\n\n  node = React.createRef();\n\n  componentDidMount() {\n    this.generateChart();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { config } = this.props;\n\n    if (!_isEqual(prevProps.config.data, config.data)) {\n      this.generateChart();\n    }\n  }\n\n  componentWillUnmount() {\n    const { chart } = this.state;\n    if (chart) {\n      chart.destroy();\n    }\n    this.setState({ chart: null });\n  }\n\n  generateChart() {\n    const { chart } = this.state;\n    const { config, onComplete } = this.props;\n\n    let updatedChart = chart;\n    if (!updatedChart) {\n      updatedChart = c3.generate({ bindto: this.node.current, ...config });\n    }\n\n    updatedChart.load({\n      ...config.data,\n      unload: config.unloadBeforeLoad || false,\n      done: () => {\n        this.setState({ chart: updatedChart }, () => {\n          if (config.done) {\n            config.done({ chart: updatedChart, config });\n          } else {\n            onComplete({ chart: updatedChart, config });\n          }\n        });\n      }\n    });\n  }\n\n  render() {\n    const { chart } = this.state;\n    const { className, children, config, style } = this.props;\n\n    return (\n      <div className={`curiosity-c3chart ${className}`} style={style}>\n        <div ref={this.node} className=\"curiosity-c3chart-container\" />\n        {chart && (\n          <div className=\"curiosity-c3chart-description\">\n            {(typeof children === 'function' && children({ chart, config })) || children}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{children: Node|Function, onComplete: Function, className: string, style: object, config}}\n */\nC3Chart.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  className: PropTypes.string,\n  config: PropTypes.shape({\n    unloadBeforeLoad: PropTypes.bool,\n    data: PropTypes.object,\n    done: PropTypes.func\n  }),\n  onComplete: PropTypes.func,\n  style: PropTypes.object\n};\n\n/**\n * Default props.\n *\n * @type {{children: null, onComplete: Function, className: null, style: {}, config: {}}}\n */\nC3Chart.defaultProps = {\n  children: null,\n  className: null,\n  config: {},\n  onComplete: helpers.noop,\n  style: {}\n};\n\nexport { C3Chart as default, C3Chart };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardTitle, CardHeader, CardActions, CardBody, Title } from '@patternfly/react-core';\nimport _isEqual from 'lodash/isEqual';\nimport { Select } from '../form/select';\nimport { connect, reduxActions, reduxSelectors, reduxTypes, store } from '../../redux';\nimport { helpers, dateHelpers } from '../../common';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { c3GraphCardHelpers } from './c3GraphCardHelpers';\nimport { C3GraphCardLegendItem } from './c3GraphCardLegendItem';\nimport { graphCardTypes } from '../graphCard/graphCardTypes';\nimport { C3Chart } from '../c3Chart/c3Chart';\nimport { Loader } from '../loader/loader';\nimport { translate } from '../i18n/i18n';\n\n/**\n * ToDo: Convert \"productShortLabel\" prop to \"productLabel\" for consistency\n * This is dependent on ALL c3 components being removed as part of future updates.\n */\n/**\n * A chart/graph card.\n *\n * @augments React.Component\n * @fires onUpdateGraphData\n * @fires onGranularitySelect\n */\nclass C3GraphCard extends React.Component {\n  state = {};\n\n  componentDidMount() {\n    this.onUpdateGraphData();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { query, productId } = this.props;\n\n    if (productId !== prevProps.productId || !_isEqual(query, prevProps.query)) {\n      this.onUpdateGraphData();\n    }\n  }\n\n  /**\n   * Call the RHSM APIs, apply filters.\n   *\n   * @event onUpdateGraphData\n   */\n  onUpdateGraphData = () => {\n    const { getGraphReportsCapacity, isDisabled, productId, query } = this.props;\n    const graphGranularity = this.getQueryGranularity();\n\n    if (!isDisabled && graphGranularity && productId) {\n      const { startDate, endDate } = dateHelpers.getRangedDateTime(graphGranularity);\n      const graphQuery = {\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString(),\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString(),\n        ...query\n      };\n\n      getGraphReportsCapacity(productId, graphQuery);\n    }\n  };\n\n  /**\n   * On granularity select, dispatch granularity type.\n   *\n   * @event onGranularitySelect\n   * @param {object} event\n   */\n  onGranularitySelect = (event = {}) => {\n    const { value } = event;\n    const { viewId } = this.props;\n\n    store.dispatch({\n      type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.GRANULARITY],\n      viewId,\n      [RHSM_API_QUERY_TYPES.GRANULARITY]: value\n    });\n  };\n\n  getQueryGranularity() {\n    const { query } = this.props;\n    return query?.[RHSM_API_QUERY_TYPES.GRANULARITY];\n  }\n\n  /**\n   * Apply a custom legend.\n   *\n   * @param {object} options\n   * @param {Function} options.chart\n   * @param {Array} options.filteredData\n   * @param {string} options.granularity\n   * @param {Array} options.hiddenDataFacets\n   * @returns {Array}\n   */\n  renderLegend({ chart, filteredData = [], granularity, hiddenDataFacets = [] }) {\n    const { state } = this;\n    const { productId, productShortLabel, t } = this.props;\n\n    return filteredData.map(({ id }) => {\n      const isThreshold = /^threshold/.test(id);\n      const isDataHidden = hiddenDataFacets.includes(id);\n      const tooltipContent = (\n        <p>{(isThreshold && t(`curiosity-graph.thresholdLegendTooltip`)) || t(`curiosity-graph.${id}LegendTooltip`)}</p>\n      );\n\n      const getToggle = ({ isToggled }) => this.setState({ [`${productId}-${granularity}-${id}`]: isToggled });\n      const isToggled = state[`${productId}-${granularity}-${id}`] || false;\n\n      return (\n        <C3GraphCardLegendItem\n          key={`legend-${productId}-${granularity}-${id}`}\n          chart={chart}\n          chartId={id}\n          tooltipContent={tooltipContent}\n          isDisabled={isDataHidden}\n          isThreshold={isThreshold}\n          isToggled={isToggled}\n          getToggle={getToggle}\n        >\n          {(isThreshold && t(`curiosity-graph.thresholdLabel`)) ||\n            t(`curiosity-graph.${id}Label`, { product: productShortLabel })}\n        </C3GraphCardLegendItem>\n      );\n    });\n  }\n\n  /**\n   * Apply props to chart/graph.\n   *\n   * @returns {Node}\n   */\n  renderChart() {\n    const { filterGraphData, graphData, productId, productShortLabel, selectOptionsType } = this.props;\n    const graphGranularity = this.getQueryGranularity();\n    const { selected } = graphCardTypes.getGranularityOptions(selectOptionsType);\n    const updatedGranularity = graphGranularity || selected;\n\n    if (!graphData || !Object.values(graphData).length) {\n      return null;\n    }\n\n    const filtered = [];\n\n    if (filterGraphData.length) {\n      filterGraphData.forEach(filteredValue => {\n        if (graphData[filteredValue.id]) {\n          filtered.push({ ...filteredValue, data: [...graphData[filteredValue.id]] });\n        }\n      });\n    } else {\n      Object.keys(graphData).forEach(id => {\n        filtered.push({ id, data: [...graphData[id]] });\n      });\n    }\n\n    const { configuration = {}, hiddenDataFacets = [] } = c3GraphCardHelpers.c3Config({\n      data: filtered,\n      granularity: updatedGranularity,\n      productShortLabel\n    });\n\n    return (\n      <C3Chart key={`chart-${productId}-${updatedGranularity}`} config={configuration}>\n        {({ chart }) =>\n          this.renderLegend({\n            chart,\n            filteredData: filtered,\n            granularity: updatedGranularity,\n            hiddenDataFacets\n          })\n        }\n      </C3Chart>\n    );\n  }\n\n  /**\n   * Render a chart/graph card with chart/graph.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { cardTitle, children, error, isDisabled, pending, selectOptionsType, t } = this.props;\n\n    if (isDisabled) {\n      return null;\n    }\n\n    const { options } = graphCardTypes.getGranularityOptions(selectOptionsType);\n    const graphGranularity = this.getQueryGranularity();\n\n    return (\n      <Card className=\"curiosity-usage-graph\">\n        <CardHeader>\n          <CardTitle>\n            <Title headingLevel=\"h2\" size=\"lg\">\n              {cardTitle}\n            </Title>\n          </CardTitle>\n          <CardActions className={(error && 'blur') || ''}>\n            {children}\n            <Select\n              aria-label={t('curiosity-graph.dropdownPlaceholder')}\n              onSelect={this.onGranularitySelect}\n              options={options}\n              selectedOptions={graphGranularity}\n              placeholder={t('curiosity-graph.dropdownPlaceholder')}\n            />\n          </CardActions>\n        </CardHeader>\n        <CardBody>\n          <div className={(error && 'blur') || 'fadein'}>\n            {pending && <Loader variant=\"graph\" />}\n            {!pending && this.renderChart()}\n          </div>\n        </CardBody>\n      </Card>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{productId: string, pending: boolean, error: boolean, query: object, cardTitle: string,\n *     filterGraphData: Array, getGraphReportsCapacity: Function, productShortLabel: string, selectOptionsType: string,\n *     viewId: string, t: Function, children: Node, graphData: object, isDisabled: boolean}}\n */\nC3GraphCard.propTypes = {\n  cardTitle: PropTypes.string,\n  children: PropTypes.node,\n  error: PropTypes.bool,\n  filterGraphData: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      color: PropTypes.string\n    })\n  ),\n  getGraphReportsCapacity: PropTypes.func,\n  graphData: PropTypes.object,\n  query: PropTypes.shape({\n    [RHSM_API_QUERY_TYPES.GRANULARITY]: PropTypes.oneOf([...Object.values(GRANULARITY_TYPES)]).isRequired\n  }).isRequired,\n  isDisabled: PropTypes.bool,\n  pending: PropTypes.bool,\n  productId: PropTypes.string.isRequired,\n  selectOptionsType: PropTypes.oneOf(['default']),\n  t: PropTypes.func,\n  productShortLabel: PropTypes.string,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{getGraphReportsCapacity: Function, productShortLabel: string, selectOptionsType: string,\n *     viewId: string, t: translate, children: null, pending: boolean, graphData: object,\n *     isDisabled: boolean, error: boolean, cardTitle: null, filterGraphData: Array}}\n */\nC3GraphCard.defaultProps = {\n  cardTitle: null,\n  children: null,\n  error: false,\n  filterGraphData: [],\n  getGraphReportsCapacity: helpers.noop,\n  graphData: {},\n  isDisabled: helpers.UI_DISABLED_GRAPH,\n  pending: false,\n  selectOptionsType: 'default',\n  t: translate,\n  productShortLabel: '',\n  viewId: 'graphCard'\n};\n\n/**\n * Apply actions to props.\n *\n * @param {Function} dispatch\n * @returns {object}\n */\nconst mapDispatchToProps = dispatch => ({\n  getGraphReportsCapacity: (id, query) => dispatch(reduxActions.rhsm.getGraphReportsCapacity(id, query))\n});\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.graphCard.makeGraphCard();\n\nconst ConnectedGraphCard = connect(makeMapStateToProps, mapDispatchToProps)(C3GraphCard);\n\nexport { ConnectedGraphCard as default, ConnectedGraphCard, C3GraphCard };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  chart_color_blue_100 as chartColorBlueLight,\n  chart_color_blue_300 as chartColorBlueDark\n} from '@patternfly/react-tokens';\nimport { Button, Label as PfLabel } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/cjs/DateFormat';\nimport moment from 'moment';\nimport { PageLayout, PageHeader, PageMessages, PageSection, PageToolbar } from '../pageLayout/pageLayout';\nimport {\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_TYPES,\n  RHSM_API_QUERY_UOM_TYPES,\n  RHSM_API_QUERY_SORT_TYPES,\n  RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES\n} from '../../types/rhsmApiTypes';\nimport { apiQueries, connect, reduxSelectors, reduxTypes, store } from '../../redux';\nimport GraphCard from '../graphCard/graphCard';\nimport C3GraphCard from '../c3GraphCard/c3GraphCard';\nimport { Select } from '../form/select';\nimport Toolbar from '../toolbar/toolbar';\nimport InventoryList from '../inventoryList/inventoryList';\nimport InventorySubscriptions from '../inventorySubscriptions/inventorySubscriptions';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * An OpenShift encompassing view.\n *\n * @augments React.Component\n * @fires onSelect\n */\nclass OpenshiftView extends React.Component {\n  state = {\n    option: null,\n    graphFilters: [],\n    inventoryFilters: [],\n    subscriptionsInventoryFilters: []\n  };\n\n  componentDidMount() {\n    const { initialOption } = this.props;\n    this.onSelect({ value: initialOption });\n  }\n\n  /**\n   * Apply a selected filtered value.\n   *\n   * @event onSelect\n   * @param {object} event\n   */\n  onSelect = (event = {}) => {\n    const { option } = this.state;\n    const { initialGraphFilters, initialInventoryFilters, initialSubscriptionsInventoryFilters, viewId } = this.props;\n    const { value } = event;\n\n    if (value !== option) {\n      const filter = ({ id, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(value, 'i').test(id);\n      };\n\n      const graphFilters = initialGraphFilters.filter(filter);\n      const inventoryFilters = initialInventoryFilters.filter(filter);\n      const subscriptionsInventoryFilters = initialSubscriptionsInventoryFilters.filter(filter);\n\n      this.setState(\n        {\n          option,\n          graphFilters,\n          inventoryFilters,\n          subscriptionsInventoryFilters\n        },\n        () => {\n          store.dispatch([\n            {\n              type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST\n            },\n            {\n              type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.UOM],\n              viewId,\n              [RHSM_API_QUERY_TYPES.UOM]: value\n            }\n          ]);\n        }\n      );\n    }\n  };\n\n  /**\n   * Render a select/dropdown list.\n   *\n   * @returns {Node}\n   */\n  renderSelect() {\n    const { option } = this.state;\n    const { initialOption, t } = this.props;\n    const options = [\n      {\n        title: t('curiosity-toolbar.uom', { context: RHSM_API_QUERY_UOM_TYPES.CORES }),\n        value: RHSM_API_QUERY_UOM_TYPES.CORES\n      },\n      {\n        title: t('curiosity-toolbar.uom', { context: RHSM_API_QUERY_UOM_TYPES.SOCKETS }),\n        value: RHSM_API_QUERY_UOM_TYPES.SOCKETS\n      }\n    ];\n\n    return <Select onSelect={this.onSelect} options={options} selectedOptions={option || initialOption} />;\n  }\n\n  /**\n   * Render an OpenShift view.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { graphFilters, inventoryFilters, subscriptionsInventoryFilters } = this.state;\n    const {\n      initialGuestsFilters,\n      initialToolbarFilters,\n      initialInventorySettings,\n      location,\n      productLabel,\n      query,\n      graphTallyQuery,\n      inventoryHostsQuery,\n      inventorySubscriptionsQuery,\n      routeDetail,\n      t,\n      viewId\n    } = this.props;\n    const isC3 = location?.parsedSearch?.c3 === '';\n    const {\n      graphTallyQuery: initialGraphTallyQuery,\n      inventoryHostsQuery: initialInventoryHostsQuery,\n      inventorySubscriptionsQuery: initialInventorySubscriptionsQuery,\n      toolbarQuery\n    } = apiQueries.parseRhsmQuery(query, { graphTallyQuery, inventoryHostsQuery, inventorySubscriptionsQuery });\n\n    return (\n      <PageLayout>\n        <PageHeader productLabel={productLabel} includeTour>\n          {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: productLabel })}\n        </PageHeader>\n        <PageMessages>\n          <BannerMessages productId={routeDetail.pathParameter} viewId={viewId} query={query} />\n        </PageMessages>\n        <PageToolbar>\n          <Toolbar\n            filterOptions={initialToolbarFilters}\n            productId={routeDetail.pathParameter}\n            query={toolbarQuery}\n            viewId={viewId}\n          />\n        </PageToolbar>\n        <PageSection>\n          {(isC3 && (\n            <C3GraphCard\n              key={routeDetail.pathParameter}\n              filterGraphData={graphFilters}\n              query={initialGraphTallyQuery}\n              productId={routeDetail.pathParameter}\n              viewId={viewId}\n              cardTitle={t('curiosity-graph.cardHeading')}\n              productShortLabel={productLabel}\n            >\n              {this.renderSelect()}\n            </C3GraphCard>\n          )) || (\n            <GraphCard\n              key={routeDetail.pathParameter}\n              filterGraphData={graphFilters}\n              query={initialGraphTallyQuery}\n              productId={routeDetail.pathParameter}\n              viewId={viewId}\n              cardTitle={t('curiosity-graph.cardHeading')}\n              productLabel={productLabel}\n            >\n              {this.renderSelect()}\n            </GraphCard>\n          )}\n        </PageSection>\n        <PageSection>\n          <InventoryTabs productId={routeDetail.pathParameter}>\n            <InventoryTab key=\"hostsTab\" title={t('curiosity-inventory.tab', { context: 'hosts' })}>\n              <InventoryList\n                key={routeDetail.pathParameter}\n                filterGuestsData={initialGuestsFilters}\n                filterInventoryData={inventoryFilters}\n                productId={routeDetail.pathParameter}\n                settings={initialInventorySettings}\n                query={initialInventoryHostsQuery}\n                viewId={viewId}\n              />\n            </InventoryTab>\n            {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && (\n              <InventoryTab key=\"subscriptionsTab\" title={t('curiosity-inventory.tab', { context: 'subscriptions' })}>\n                <InventorySubscriptions\n                  key={routeDetail.pathParameter}\n                  filterInventoryData={subscriptionsInventoryFilters}\n                  productId={routeDetail.pathParameter}\n                  query={initialInventorySubscriptionsQuery}\n                  viewId={viewId}\n                />\n              </InventoryTab>\n            )}\n          </InventoryTabs>\n        </PageSection>\n      </PageLayout>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{productLabel: string, initialOption: string, inventorySubscriptionsQuery: object, query: object,\n *     initialSubscriptionsInventoryFilters: Array, initialInventorySettings: object, initialToolbarFilters: Array,\n *     viewId: string, t: Function, graphTallyQuery: object, inventoryHostsQuery: object, initialGraphFilters: Array,\n *     routeDetail: object, location: object, initialGuestsFilters: Array, initialInventoryFilters: Array}}\n */\nOpenshiftView.propTypes = {\n  query: PropTypes.object,\n  graphTallyQuery: PropTypes.shape({\n    [RHSM_API_QUERY_TYPES.GRANULARITY]: PropTypes.oneOf([...Object.values(GRANULARITY_TYPES)])\n  }),\n  inventoryHostsQuery: PropTypes.shape({\n    [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n    [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n    [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SORT_TYPES)]),\n    [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n  }),\n  inventorySubscriptionsQuery: PropTypes.shape({\n    [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n    [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n    [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES)]),\n    [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n  }),\n  initialOption: PropTypes.oneOf(Object.values(RHSM_API_QUERY_UOM_TYPES)),\n  initialGraphFilters: PropTypes.array,\n  initialGuestsFilters: PropTypes.array,\n  initialInventoryFilters: PropTypes.array,\n  initialInventorySettings: PropTypes.shape({\n    hasGuests: PropTypes.func\n  }),\n  initialSubscriptionsInventoryFilters: PropTypes.array,\n  initialToolbarFilters: PropTypes.array,\n  location: PropTypes.shape({\n    parsedSearch: PropTypes.objectOf(PropTypes.string)\n  }).isRequired,\n  productLabel: PropTypes.string,\n  routeDetail: PropTypes.shape({\n    pathParameter: PropTypes.string.isRequired,\n    pathId: PropTypes.string.isRequired,\n    routeItem: PropTypes.shape({\n      title: PropTypes.string\n    })\n  }).isRequired,\n  t: PropTypes.func,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{productLabel: string, initialOption: string, inventorySubscriptionsQuery: object, query: object,\n *     initialSubscriptionsInventoryFilters: Array, initialInventorySettings: object, initialToolbarFilters: Array,\n *     viewId: string, t: translate, graphTallyQuery: object, inventoryHostsQuery: object,\n *     initialGraphFilters: Array, initialGuestsFilters: Array, initialInventoryFilters: Array}}\n */\nOpenshiftView.defaultProps = {\n  query: {\n    [RHSM_API_QUERY_TYPES.UOM]: RHSM_API_QUERY_UOM_TYPES.CORES\n  },\n  graphTallyQuery: {\n    [RHSM_API_QUERY_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY\n  },\n  inventoryHostsQuery: {\n    [RHSM_API_QUERY_TYPES.SORT]: RHSM_API_QUERY_SORT_TYPES.LAST_SEEN,\n    [RHSM_API_QUERY_TYPES.DIRECTION]: SORT_DIRECTION_TYPES.ASCENDING,\n    [RHSM_API_QUERY_TYPES.LIMIT]: 100,\n    [RHSM_API_QUERY_TYPES.OFFSET]: 0\n  },\n  inventorySubscriptionsQuery: {\n    [RHSM_API_QUERY_TYPES.SORT]: RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES.UPCOMING_EVENT_DATE,\n    [RHSM_API_QUERY_TYPES.DIRECTION]: SORT_DIRECTION_TYPES.ASCENDING,\n    [RHSM_API_QUERY_TYPES.LIMIT]: 100,\n    [RHSM_API_QUERY_TYPES.OFFSET]: 0\n  },\n  initialOption: RHSM_API_QUERY_UOM_TYPES.CORES,\n  initialGraphFilters: [\n    {\n      id: 'cores',\n      isOptional: true,\n      fill: chartColorBlueLight.value,\n      stroke: chartColorBlueDark.value,\n      color: chartColorBlueDark.value\n    },\n    {\n      id: 'sockets',\n      isOptional: true,\n      fill: chartColorBlueLight.value,\n      stroke: chartColorBlueDark.value,\n      color: chartColorBlueDark.value\n    },\n    { id: 'thresholdSockets', isOptional: true },\n    { id: 'thresholdCores', isOptional: true }\n  ],\n  initialGuestsFilters: [\n    {\n      id: 'displayName',\n      header: translate('curiosity-inventory.header', { context: 'guestsDisplayName' }),\n      cell: (data, session) => {\n        const { displayName, inventoryId } = data;\n        const { inventory: authorized } = session?.authorized || {};\n\n        if (!inventoryId?.value) {\n          return displayName?.value;\n        }\n\n        if (!authorized) {\n          return displayName?.value || inventoryId?.value;\n        }\n\n        return (\n          <Button\n            isInline\n            component=\"a\"\n            variant=\"link\"\n            target=\"_blank\"\n            href={`${helpers.UI_DEPLOY_PATH_PREFIX}/insights/inventory/${inventoryId.value}/`}\n          >\n            {displayName.value || inventoryId.value}\n          </Button>\n        );\n      }\n    },\n    {\n      id: 'inventoryId',\n      cellWidth: 40\n    },\n    {\n      id: 'lastSeen',\n      cell: data => (data?.lastSeen?.value && <DateFormat date={data?.lastSeen?.value} />) || '',\n      cellWidth: 15\n    }\n  ],\n  initialInventoryFilters: [\n    {\n      id: 'displayName',\n      cell: (data, session) => {\n        const { displayName = {}, inventoryId = {}, numberOfGuests = {} } = data;\n        const { inventory: authorized } = session?.authorized || {};\n\n        if (!inventoryId.value) {\n          return displayName.value;\n        }\n\n        let updatedDisplayName = displayName.value || inventoryId.value;\n\n        if (authorized) {\n          updatedDisplayName = (\n            <Button\n              isInline\n              component=\"a\"\n              variant=\"link\"\n              target=\"_blank\"\n              href={`${helpers.UI_DEPLOY_PATH_PREFIX}/insights/inventory/${inventoryId.value}/`}\n            >\n              {displayName.value || inventoryId.value}\n            </Button>\n          );\n        }\n\n        return (\n          <React.Fragment>\n            {updatedDisplayName}{' '}\n            {(numberOfGuests.value &&\n              translate('curiosity-inventory.label', { context: 'numberOfGuests', count: numberOfGuests.value }, [\n                <PfLabel color=\"blue\" />\n              ])) ||\n              ''}\n          </React.Fragment>\n        );\n      },\n      isSortable: true\n    },\n    {\n      id: 'measurementType',\n      cell: data => {\n        const { cloudProvider = {}, measurementType = {} } = data;\n        return (\n          <React.Fragment>\n            {translate('curiosity-inventory.measurementType', { context: measurementType.value })}{' '}\n            {(cloudProvider.value && (\n              <PfLabel color=\"purple\">\n                {translate('curiosity-inventory.cloudProvider', { context: cloudProvider.value })}\n              </PfLabel>\n            )) ||\n              ''}\n          </React.Fragment>\n        );\n      },\n      isSortable: true,\n      cellWidth: 20\n    },\n    {\n      id: 'sockets',\n      isOptional: true,\n      isSortable: true,\n      isWrappable: true,\n      cellWidth: 15\n    },\n    {\n      id: 'cores',\n      isOptional: true,\n      isSortable: true,\n      isWrappable: true,\n      cellWidth: 15\n    },\n    {\n      id: 'lastSeen',\n      cell: data => (data?.lastSeen?.value && <DateFormat date={data?.lastSeen?.value} />) || '',\n      isSortable: true,\n      isWrappable: true,\n      cellWidth: 15\n    }\n  ],\n  initialInventorySettings: {},\n  initialSubscriptionsInventoryFilters: [\n    {\n      id: 'productName',\n      isSortable: true\n    },\n    {\n      id: 'serviceLevel',\n      isSortable: true,\n      isWrappable: true,\n      cellWidth: 15\n    },\n    {\n      id: 'upcomingEventDate',\n      cell: data =>\n        (data?.upcomingEventDate?.value && moment.utc(data?.upcomingEventDate?.value).format('YYYY-DD-MM')) || '',\n      isSortable: true,\n      isWrappable: true,\n      cellWidth: 15\n    }\n  ],\n  initialToolbarFilters: [\n    {\n      id: RHSM_API_QUERY_TYPES.SLA\n    }\n  ],\n  productLabel: 'OpenShift',\n  t: translate,\n  viewId: 'viewOpenShift'\n};\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.view.makeView(OpenshiftView.defaultProps);\n\nconst ConnectedOpenshiftView = connect(makeMapStateToProps)(OpenshiftView);\n\nexport { ConnectedOpenshiftView as default, ConnectedOpenshiftView, OpenshiftView };\n"],"sourceRoot":""}