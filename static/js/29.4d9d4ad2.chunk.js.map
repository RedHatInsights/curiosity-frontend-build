{"version":3,"sources":["components/pagination/paginationHelpers.js","components/pagination/pagination.js"],"names":["calculateOffsetFromPage","page","perPage","calculatePageFromOffset","offset","isLastPage","itemCount","Math","ceil","paginationHelpers","Pagination","dropDirection","isDisabled","isCompact","onPage","onPerPage","variant","onSetPage","event","limit","onPerPageSelect","defaultProps","helpers","noop"],"mappings":"oIAAA,4PAOA,IAAMA,EAA0B,SAACC,EAAMC,GAAP,OAAmBA,GAAWD,EAAO,IAAM,GASrEE,EAA0B,SAACC,EAAQF,GAAT,OAAqBE,EAASF,EAAU,GAAK,GAUvEG,EAAa,SAACD,EAAQF,EAASI,GAAlB,OACjBH,EAAwBC,EAAQF,KAAaK,KAAKC,KAAKF,EAAYJ,IAE/DO,EAAoB,CACxBT,0BACAG,0BACAE,e,iCChCF,oIA+BMK,EAAa,SAAbA,EAAc,GAAD,IACjBC,EADiB,EACjBA,cACAC,EAFiB,EAEjBA,WACAC,EAHiB,EAGjBA,UACAP,EAJiB,EAIjBA,UACAF,EALiB,EAKjBA,OACAU,EANiB,EAMjBA,OACAC,EAPiB,EAOjBA,UACAb,EARiB,EAQjBA,QACAc,EATiB,EASjBA,QATiB,OAWjB,cAAC,IAAD,CACEL,cAAeA,EACfE,UAAWA,EACXD,WAAYA,IAAeN,EAC3BA,UAAWA,EACXW,UAAW,SAACC,EAAOjB,EAAMkB,GAAd,OACTL,EAAO,CAAEI,QAAOhB,QAASiB,EAAOf,OAAQK,oBAAkBT,wBAAwBC,EAAMkB,MAE1FC,gBAAiB,SAACF,EAAOC,GAAR,OAAkBJ,EAAU,CAAEG,QAAOhB,QAASiB,EAAOf,OAAQM,EAAWW,aAAajB,UACtGH,KAAMQ,oBAAkBN,wBAAwBC,GAAUM,EAAWW,aAAajB,OAAQF,GAC1FA,QAASA,EACTc,QAASA,KA8BbN,EAAWW,aAAe,CACxBV,cAAe,OACfE,WAAW,EACXD,YAAY,EACZN,UAAW,EACXF,OAAQ,EACRU,OAAQQ,IAAQC,KAChBR,UAAWO,IAAQC,KACnBrB,QAAS,GACTc,QAAS","file":"static/js/29.4d9d4ad2.chunk.js","sourcesContent":["/**\n * Calculate offset from page and perPage/limit.\n *\n * @param {number} page\n * @param {number} perPage\n * @returns {number}\n */\nconst calculateOffsetFromPage = (page, perPage) => perPage * (page - 1) || 0;\n\n/**\n * Calculate page from offset and perPage/limit\n *\n * @param {number} offset\n * @param {number} perPage\n * @returns {number}\n */\nconst calculatePageFromOffset = (offset, perPage) => offset / perPage + 1 || 1;\n\n/**\n * Determine if paging is on the last page.\n *\n * @param {number} offset\n * @param {number} perPage\n * @param {number} itemCount\n * @returns {boolean}\n */\nconst isLastPage = (offset, perPage, itemCount) =>\n  calculatePageFromOffset(offset, perPage) === Math.ceil(itemCount / perPage);\n\nconst paginationHelpers = {\n  calculateOffsetFromPage,\n  calculatePageFromOffset,\n  isLastPage\n};\n\nexport {\n  paginationHelpers as default,\n  paginationHelpers,\n  calculateOffsetFromPage,\n  calculatePageFromOffset,\n  isLastPage\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Pagination as PfPagination } from '@patternfly/react-core';\nimport { helpers } from '../../common';\nimport { paginationHelpers } from './paginationHelpers';\n\n/**\n * ToDo: Apply locale/translation to the PF Pagination \"titles\" prop.\n */\n/**\n * FixMe: PF Pagination component offset property is either broken, confusing to implement, ...\n * or requires an equivalent effort to using page. There appears to be confusing behavior in how\n * the next offset range is calculated. It fails to update when passing in the next expected\n * sequence using the returned starting index. We'll continue emulating the use of \"offset\"\n * by performing our own calculation and applying it to the page property instead.\n */\n/**\n * Pagination component.\n *\n * @param {object} props\n * @param {string} props.dropDirection\n * @param {boolean} props.isDisabled\n * @param {boolean} props.isCompact\n * @param {number} props.itemCount\n * @param {number} props.offset\n * @param {Function} props.onPage\n * @param {Function} props.onPerPage\n * @param {number} props.perPage\n * @param {string} props.variant\n * @returns {Node}\n */\nconst Pagination = ({\n  dropDirection,\n  isDisabled,\n  isCompact,\n  itemCount,\n  offset,\n  onPage,\n  onPerPage,\n  perPage,\n  variant\n}) => (\n  <PfPagination\n    dropDirection={dropDirection}\n    isCompact={isCompact}\n    isDisabled={isDisabled || !itemCount}\n    itemCount={itemCount}\n    onSetPage={(event, page, limit) =>\n      onPage({ event, perPage: limit, offset: paginationHelpers.calculateOffsetFromPage(page, limit) })\n    }\n    onPerPageSelect={(event, limit) => onPerPage({ event, perPage: limit, offset: Pagination.defaultProps.offset })}\n    page={paginationHelpers.calculatePageFromOffset(offset || Pagination.defaultProps.offset, perPage)}\n    perPage={perPage}\n    variant={variant}\n  />\n);\n\n/**\n * Prop types\n *\n * @type {{isCompact: boolean, onPage: Function, perPage: number, offset: number,\n *     dropDirection: string, onPerPage: Function, variant: null, isDisabled: boolean,\n *     itemCount: number}}\n */\nPagination.propTypes = {\n  dropDirection: PropTypes.oneOf(['up', 'down']),\n  isCompact: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  itemCount: PropTypes.number,\n  offset: PropTypes.number,\n  onPage: PropTypes.func,\n  onPerPage: PropTypes.func,\n  perPage: PropTypes.number,\n  variant: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{isCompact: boolean, onPage: Function, perPage: number, offset: number,\n *     dropDirection: string, onPerPage: Function, variant: null, isDisabled: boolean,\n *     itemCount: number}}\n */\nPagination.defaultProps = {\n  dropDirection: 'down',\n  isCompact: false,\n  isDisabled: false,\n  itemCount: 0,\n  offset: 0,\n  onPage: helpers.noop,\n  onPerPage: helpers.noop,\n  perPage: 10,\n  variant: null\n};\n\nexport { Pagination as default, Pagination };\n"],"sourceRoot":""}