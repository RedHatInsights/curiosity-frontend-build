{"version":3,"sources":["components/openshiftView/openshiftView.js"],"names":["OpenshiftView","state","option","filters","onSelect","event","initialFilters","props","value","filter","val","RegExp","test","id","setState","initialOption","this","options","title","selectedOptions","query","location","routeDetail","t","viewId","isC3","parsedSearch","c3","helpers","UI_DISPLAY_CONFIG_NAME","key","pathParameter","filterGraphData","productId","cardTitle","productShortLabel","renderSelect","React","Component","defaultProps","rhsmApiTypes","RHSM_API_QUERY_GRANULARITY","GRANULARITY_TYPES","DAILY","fill","chartColorBlueLight","stroke","chartColorBlueDark","color","translate","makeMapStateToProps","reduxSelectors","view","makeView","ConnectedOpenshiftView","connect"],"mappings":"gbAsBMA,E,4MACJC,MAAQ,CACNC,OAAQ,KACRC,QAAS,I,EAcXC,SAAW,WAAiB,IAAhBC,EAAe,uDAAP,GACVH,EAAW,EAAKD,MAAhBC,OACAI,EAAmB,EAAKC,MAAxBD,eACAE,EAAUH,EAAVG,MAER,GAAIA,IAAUN,EAAQ,CACpB,IAAMC,EAAUG,EAAeG,QAAO,SAAAC,GAAG,OAAI,IAAIC,OAAOH,EAAO,KAAKI,KAAKF,EAAIG,OAC7E,EAAKC,SAAS,CACZZ,SACAC,c,kEApBe,IACXY,EAAkBC,KAAKT,MAAvBQ,cACRC,KAAKZ,SAAS,CAAEI,MAAOO,M,qCA4BT,IACNb,EAAWc,KAAKf,MAAhBC,OACAa,EAAkBC,KAAKT,MAAvBQ,cAMR,OAAO,kBAAC,IAAD,CAAQX,SAAUY,KAAKZ,SAAUa,QALxB,CACd,CAAEC,MAAO,QAASV,MAAO,SACzB,CAAEU,MAAO,UAAWV,MAAO,YAG6BW,gBAAiBjB,GAAUa,M,+BAQ7E,IAAD,EACCZ,EAAYa,KAAKf,MAAjBE,QADD,EAE6Ca,KAAKT,MAAjDa,EAFD,EAECA,MAAOC,EAFR,EAEQA,SAAUC,EAFlB,EAEkBA,YAAaC,EAF/B,EAE+BA,EAAGC,EAFlC,EAEkCA,OACnCC,EAAsC,MAAvB,OAARJ,QAAQ,IAARA,GAAA,UAAAA,EAAUK,oBAAV,eAAwBC,IAErC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYH,OAAQA,GAASD,EAAE,kBAAD,OAAmBC,EAAnB,SAAkCI,IAAQC,yBACxE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAST,MAAOA,EAAOI,OAAQA,KAEjC,kBAAC,IAAD,KACIC,GACA,kBAAC,IAAD,CACEK,IAAKR,EAAYS,cACjBC,gBAAiB7B,EACjBiB,MAAOA,EACPa,UAAWX,EAAYS,cACvBP,OAAQA,EACRU,UAAWX,EAAE,+BACbY,kBAAmBX,GAElBR,KAAKoB,iBAGR,kBAAC,IAAD,CACEN,IAAKR,EAAYS,cACjBC,gBAAiB7B,EACjBiB,MAAOA,EACPa,UAAWX,EAAYS,cACvBP,OAAQA,EACRU,UAAWX,EAAE,+BACbY,kBAAmBX,GAElBR,KAAKoB,sB,GAtFQC,IAAMC,WA8HlCtC,EAAcuC,aAAe,CAC3BnB,MAAM,eACHoB,IAAaC,2BAA6BC,IAAkBC,OAE/D5B,cAAe,QACfT,eAAgB,CACd,CAAEO,GAAI,QAAS+B,KAAMC,IAAoBrC,MAAOsC,OAAQC,IAAmBvC,MAAOwC,MAAOD,IAAmBvC,OAC5G,CACEK,GAAI,UACJ+B,KAAMC,IAAoBrC,MAC1BsC,OAAQC,IAAmBvC,MAC3BwC,MAAOD,IAAmBvC,OAE5B,CAAEK,GAAI,oBACN,CAAEA,GAAI,mBAERU,EAAG0B,IACHzB,OAAQ,aAQV,IAAM0B,EAAsBC,IAAeC,KAAKC,SAASrD,EAAcuC,cAEjEe,EAAyBC,YAAQL,EAARK,CAA6BvD","file":"static/js/8.19bc8181.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  chart_color_blue_100 as chartColorBlueLight,\n  chart_color_blue_300 as chartColorBlueDark\n} from '@patternfly/react-tokens';\nimport { PageLayout, PageHeader, PageSection, PageToolbar } from '../pageLayout/pageLayout';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES, rhsmApiTypes } from '../../types/rhsmApiTypes';\nimport { connect, reduxSelectors } from '../../redux';\nimport GraphCard from '../graphCard/graphCard';\nimport C3GraphCard from '../c3GraphCard/c3GraphCard';\nimport { Select } from '../form/select';\nimport Toolbar from '../toolbar/toolbar';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * An OpenShift encompassing view.\n *\n * @augments React.Component\n * @fires onSelect\n */\nclass OpenshiftView extends React.Component {\n  state = {\n    option: null,\n    filters: []\n  };\n\n  componentDidMount() {\n    const { initialOption } = this.props;\n    this.onSelect({ value: initialOption });\n  }\n\n  /**\n   * Apply a selected filtered value.\n   *\n   * @event onSelect\n   * @param {object} event\n   */\n  onSelect = (event = {}) => {\n    const { option } = this.state;\n    const { initialFilters } = this.props;\n    const { value } = event;\n\n    if (value !== option) {\n      const filters = initialFilters.filter(val => new RegExp(value, 'i').test(val.id));\n      this.setState({\n        option,\n        filters\n      });\n    }\n  };\n\n  /**\n   * Render a select/dropdown list.\n   *\n   * @returns {Node}\n   */\n  renderSelect() {\n    const { option } = this.state;\n    const { initialOption } = this.props;\n    const options = [\n      { title: 'Cores', value: 'cores' },\n      { title: 'Sockets', value: 'sockets' }\n    ];\n\n    return <Select onSelect={this.onSelect} options={options} selectedOptions={option || initialOption} />;\n  }\n\n  /**\n   * Render an OpenShift view.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { filters } = this.state;\n    const { query, location, routeDetail, t, viewId } = this.props;\n    const isC3 = location?.parsedSearch?.c3 === '';\n\n    return (\n      <PageLayout>\n        <PageHeader viewId={viewId}>{t(`curiosity-view.${viewId}Title`, helpers.UI_DISPLAY_CONFIG_NAME)}</PageHeader>\n        <PageToolbar>\n          <Toolbar query={query} viewId={viewId} />\n        </PageToolbar>\n        <PageSection>\n          {(isC3 && (\n            <C3GraphCard\n              key={routeDetail.pathParameter}\n              filterGraphData={filters}\n              query={query}\n              productId={routeDetail.pathParameter}\n              viewId={viewId}\n              cardTitle={t('curiosity-graph.cardHeading')}\n              productShortLabel={viewId}\n            >\n              {this.renderSelect()}\n            </C3GraphCard>\n          )) || (\n            <GraphCard\n              key={routeDetail.pathParameter}\n              filterGraphData={filters}\n              query={query}\n              productId={routeDetail.pathParameter}\n              viewId={viewId}\n              cardTitle={t('curiosity-graph.cardHeading')}\n              productShortLabel={viewId}\n            >\n              {this.renderSelect()}\n            </GraphCard>\n          )}\n        </PageSection>\n      </PageLayout>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{initialFilters: Array, initialOption: string, viewId: string, t: Function, query: object,\n *     routeDetail: object, location: object}}\n */\nOpenshiftView.propTypes = {\n  query: PropTypes.shape({\n    [rhsmApiTypes.RHSM_API_QUERY_GRANULARITY]: PropTypes.oneOf([...Object.values(GRANULARITY_TYPES)])\n  }),\n  initialOption: PropTypes.oneOf(['cores', 'sockets']),\n  initialFilters: PropTypes.array,\n  location: PropTypes.shape({\n    parsedSearch: PropTypes.objectOf(PropTypes.string)\n  }).isRequired,\n  routeDetail: PropTypes.shape({\n    pathParameter: PropTypes.string.isRequired,\n    pathId: PropTypes.string.isRequired,\n    routeItem: PropTypes.shape({\n      title: PropTypes.string\n    })\n  }).isRequired,\n  t: PropTypes.func,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{initialFilters: Array, initialOption: string, viewId: string, t: translate, query: object}}\n */\nOpenshiftView.defaultProps = {\n  query: {\n    [rhsmApiTypes.RHSM_API_QUERY_GRANULARITY]: GRANULARITY_TYPES.DAILY\n  },\n  initialOption: 'cores',\n  initialFilters: [\n    { id: 'cores', fill: chartColorBlueLight.value, stroke: chartColorBlueDark.value, color: chartColorBlueDark.value },\n    {\n      id: 'sockets',\n      fill: chartColorBlueLight.value,\n      stroke: chartColorBlueDark.value,\n      color: chartColorBlueDark.value\n    },\n    { id: 'thresholdSockets' },\n    { id: 'thresholdCores' }\n  ],\n  t: translate,\n  viewId: 'OpenShift'\n};\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.view.makeView(OpenshiftView.defaultProps);\n\nconst ConnectedOpenshiftView = connect(makeMapStateToProps)(OpenshiftView);\n\nexport { ConnectedOpenshiftView as default, ConnectedOpenshiftView, OpenshiftView };\n"],"sourceRoot":""}