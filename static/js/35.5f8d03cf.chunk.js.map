{"version":3,"sources":["components/bannerMessages/bannerMessages.js"],"names":["BannerMessages","state","onUpdateData","props","getMessageReports","productId","query","graphTallyQuery","apiQueries","parseRhsmQuery","dateHelpers","getRangedDateTime","startDate","endDate","RHSM_API_QUERY_TYPES","GRANULARITY","GRANULARITY_TYPES","DAILY","START_DATE","toISOString","END_DATE","this","prevProps","_isEqual","appMessages","messages","updatedMessages","length","Object","entries","forEach","key","value","message","find","id","push","map","title","variant","AlertVariant","info","actionClose","onClose","setState","alerts","renderAlerts","className","React","Component","defaultProps","helpers","noop","translate","context","UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS","appName","UI_DISPLAY_NAME","isInline","component","icon","iconPosition","target","href","makeMapStateToProps","reduxSelectors","makeAppMessages","ConnectedBannerMessages","connect","dispatch","reduxActions","rhsm"],"mappings":"0bAeMA,E,4MACJC,MAAQ,G,EAmBRC,aAAe,WAAO,IAAD,EAC6B,EAAKC,MAA7CC,EADW,EACXA,kBAAmBC,EADR,EACQA,UAAWC,EADnB,EACmBA,MAC9BC,EAAoBC,IAAWC,eAAeH,GAA9CC,gBAER,GAAIF,EAAW,CAAC,IAAD,IACkBK,IAAYC,kBAAkB,WAArDC,EADK,EACLA,UAAWC,EADN,EACMA,QAQnBT,EAAkBC,EAPK,2BAClBE,GADkB,uBAEpBO,IAAqBC,YAAcC,IAAkBC,OAFjC,cAGpBH,IAAqBI,WAAaN,EAAUO,eAHxB,cAIpBL,IAAqBM,SAAWP,EAAQM,eAJpB,O,uDAvB3B,WACEE,KAAKnB,iB,gCAGP,SAAmBoB,GAAY,IAAD,EACCD,KAAKlB,MAA1BG,EADoB,EACpBA,MADoB,EACbD,YAEGiB,EAAUjB,WAAckB,IAASjB,EAAOgB,EAAUhB,QAClEe,KAAKnB,iB,0BA+BT,WAAgB,IAAD,OACLD,EAAUoB,KAAVpB,MADK,EAEqBoB,KAAKlB,MAA/BqB,EAFK,EAELA,YAAaC,EAFR,EAEQA,SACfC,EAAkB,GAiBxB,OAfID,EAASE,QACXC,OAAOC,QAAQL,GAAaM,SAAQ,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXC,EAAW,KACpD,IAAmB,IAAf/B,EAAM8B,KAA2B,IAAVC,EAAgB,CACzC,IAAMC,EAAUR,EAASS,MAAK,qBAAGC,KAAgBJ,KAE7CE,GACFP,EAAgBU,KAAhB,aACEL,OACGE,QAONP,EAAgBW,KAAI,YAA2D,IAAxDN,EAAuD,EAAvDA,IAAKE,EAAkD,EAAlDA,QAASK,EAAyC,EAAzCA,MAAyC,IAAlCC,eAAkC,MAAxBC,IAAaC,KAAW,EAC7EC,EAAc,cAAC,IAAD,CAAwBC,QAAS,kBAAM,EAAKC,SAAL,eAAiBb,GAAM,OAElF,OACE,cAAC,IAAD,CAAOW,YAAaA,EAAuBJ,MAAOA,EAAOC,QAASA,EAAlE,SACGN,GADmCF,Q,oBAY5C,WACE,IAAMc,EAASxB,KAAKyB,eAEpB,OAAID,EAAOlB,OACF,qBAAKoB,UAAU,4BAAf,SAA4CF,IAG9C,S,GArFkBG,IAAMC,WAkHnCjD,EAAekD,aAAe,CAC5B9C,kBAAmB+C,IAAQC,KAC3B9C,MAAO,GACPmB,SAAU,CACR,CACEU,GAAI,sBACJG,MAAOe,oBAAU,sCACjBpB,QAASoB,oBACP,uCACA,CACEC,QAA6D,KAApDH,IAAQI,yCAAkD,sBACnEC,QAASL,IAAQM,iBAEnB,CACE,cAAC,IAAD,CACEC,UAAQ,EACRC,UAAU,IACVpB,QAAQ,OACRqB,KAAM,cAAC,IAAD,IACNC,aAAa,QACbC,OAAO,SACPC,KAAMZ,IAAQI,+CAc1B,IASMS,EAAsBC,IAAezC,YAAY0C,kBAEjDC,EAA0BC,YAAQJ,GAXb,SAAAK,GAAQ,MAAK,CACtCjE,kBAAmB,SAAC+B,EAAI7B,GAAL,OAAe+D,EAASC,IAAaC,KAAKnE,kBAAkB+B,EAAI7B,QAUrD8D,CAAiDpE","file":"static/js/35.5f8d03cf.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, AlertActionCloseButton, AlertVariant, Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport _isEqual from 'lodash/isEqual';\nimport { apiQueries, connect, reduxActions, reduxSelectors } from '../../redux';\nimport { translate } from '../i18n/i18n';\nimport { dateHelpers, helpers } from '../../common';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\n\n/**\n * Render banner messages.\n *\n * @augments React.Component\n */\nclass BannerMessages extends React.Component {\n  state = {};\n\n  componentDidMount() {\n    this.onUpdateData();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { query, productId } = this.props;\n\n    if (productId !== prevProps.productId || !_isEqual(query, prevProps.query)) {\n      this.onUpdateData();\n    }\n  }\n\n  /**\n   * Call the RHSM APIs, apply filters.\n   *\n   * @event onUpdateGraphData\n   */\n  onUpdateData = () => {\n    const { getMessageReports, productId, query } = this.props;\n    const { graphTallyQuery } = apiQueries.parseRhsmQuery(query);\n\n    if (productId) {\n      const { startDate, endDate } = dateHelpers.getRangedDateTime('CURRENT');\n      const updatedGraphQuery = {\n        ...graphTallyQuery,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString(),\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      };\n\n      getMessageReports(productId, updatedGraphQuery);\n    }\n  };\n\n  /**\n   * Apply messages' configuration to alerts.\n   *\n   * @returns {Node}\n   */\n  renderAlerts() {\n    const { state } = this;\n    const { appMessages, messages } = this.props;\n    const updatedMessages = [];\n\n    if (messages.length) {\n      Object.entries(appMessages).forEach(([key, value]) => {\n        if (state[key] !== true && value === true) {\n          const message = messages.find(({ id }) => id === key);\n\n          if (message) {\n            updatedMessages.push({\n              key,\n              ...message\n            });\n          }\n        }\n      });\n    }\n\n    return updatedMessages.map(({ key, message, title, variant = AlertVariant.info }) => {\n      const actionClose = <AlertActionCloseButton onClose={() => this.setState({ [key]: true })} />;\n\n      return (\n        <Alert actionClose={actionClose} key={key} title={title} variant={variant}>\n          {message}\n        </Alert>\n      );\n    });\n  }\n\n  /**\n   * Render a banner messages container.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const alerts = this.renderAlerts();\n\n    if (alerts.length) {\n      return <div className=\"curiosity-banner-messages\">{alerts}</div>;\n    }\n\n    return null;\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{appMessages: object, productId: string, getMessageReports: Function, query: object, messages: Array}}\n */\nBannerMessages.propTypes = {\n  appMessages: PropTypes.object.isRequired,\n  getMessageReports: PropTypes.func,\n  query: PropTypes.object,\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.node.isRequired,\n      message: PropTypes.node.isRequired,\n      variant: PropTypes.oneOf([...Object.values(AlertVariant)])\n    })\n  ),\n  productId: PropTypes.string.isRequired\n};\n\n/**\n * Default props.\n *\n * @type {{getMessageReports: Function, query: object, messages: Array}}\n */\nBannerMessages.defaultProps = {\n  getMessageReports: helpers.noop,\n  query: {},\n  messages: [\n    {\n      id: 'cloudigradeMismatch',\n      title: translate('curiosity-banner.dataMismatchTitle'),\n      message: translate(\n        'curiosity-banner.dataMismatchMessage',\n        {\n          context: helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS !== '' && 'cloudigradeMismatch',\n          appName: helpers.UI_DISPLAY_NAME\n        },\n        [\n          <Button\n            isInline\n            component=\"a\"\n            variant=\"link\"\n            icon={<ExternalLinkAltIcon />}\n            iconPosition=\"right\"\n            target=\"_blank\"\n            href={helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS}\n          />\n        ]\n      )\n    }\n  ]\n};\n\n/**\n * Apply actions to props.\n *\n * @param {Function} dispatch\n * @returns {object}\n */\nconst mapDispatchToProps = dispatch => ({\n  getMessageReports: (id, query) => dispatch(reduxActions.rhsm.getMessageReports(id, query))\n});\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.appMessages.makeAppMessages();\n\nconst ConnectedBannerMessages = connect(makeMapStateToProps, mapDispatchToProps)(BannerMessages);\n\nexport { ConnectedBannerMessages as default, ConnectedBannerMessages, BannerMessages };\n"],"sourceRoot":""}