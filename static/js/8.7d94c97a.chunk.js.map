{"version":3,"sources":["components/openshiftView/openshiftView.js"],"names":["OpenshiftView","state","option","graphFilters","inventoryFilters","subscriptionsInventoryFilters","onSelect","event","props","initialGraphFilters","initialInventoryFilters","initialSubscriptionsInventoryFilters","viewId","value","filter","id","isOptional","RegExp","test","setState","store","dispatch","type","reduxTypes","query","SET_QUERY_CLEAR_INVENTORY_LIST","SET_QUERY_RHSM_TYPES","RHSM_API_QUERY_TYPES","UOM","initialOption","this","t","options","title","context","RHSM_API_QUERY_UOM_TYPES","CORES","SOCKETS","selectedOptions","initialGuestsFilters","initialToolbarFilters","initialInventorySettings","productLabel","graphTallyQuery","inventoryHostsQuery","inventorySubscriptionsQuery","routeDetail","apiQueries","parseRhsmQuery","initialGraphTallyQuery","initialInventoryHostsQuery","initialInventorySubscriptionsQuery","toolbarQuery","includeTour","appName","helpers","UI_DISPLAY_NAME","productId","pathParameter","filterOptions","key","filterGraphData","cardTitle","renderSelect","filterGuestsData","filterInventoryData","settings","UI_DISABLED_TABLE_SUBSCRIPTIONS","React","Component","defaultProps","GRANULARITY","GRANULARITY_TYPES","DAILY","SORT","RHSM_API_QUERY_SORT_TYPES","LAST_SEEN","DIRECTION","SORT_DIRECTION_TYPES","ASCENDING","LIMIT","OFFSET","RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES","UPCOMING_EVENT_DATE","fill","chartColorBlueLight","stroke","chartColorBlueDark","color","header","translate","cell","data","session","displayName","inventoryId","authorized","inventory","isInline","component","variant","target","href","UI_DEPLOY_PATH_PREFIX","cellWidth","lastSeen","date","numberOfGuests","updatedDisplayName","Fragment","count","isSortable","cloudProvider","measurementType","isWrappable","upcomingEventDate","moment","utc","format","SLA","makeMapStateToProps","reduxSelectors","view","makeView","ConnectedOpenshiftView","connect"],"mappings":"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","file":"static/js/8.7d94c97a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  chart_color_blue_100 as chartColorBlueLight,\n  chart_color_blue_300 as chartColorBlueDark\n} from '@patternfly/react-tokens';\nimport { Button, Label as PfLabel } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/components/cjs/DateFormat';\nimport moment from 'moment';\nimport { PageLayout, PageHeader, PageMessages, PageSection, PageToolbar } from '../pageLayout/pageLayout';\nimport {\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_TYPES,\n  RHSM_API_QUERY_UOM_TYPES,\n  RHSM_API_QUERY_SORT_TYPES,\n  RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES\n} from '../../types/rhsmApiTypes';\nimport { apiQueries, connect, reduxSelectors, reduxTypes, store } from '../../redux';\nimport GraphCard from '../graphCard/graphCard';\nimport { Select } from '../form/select';\nimport Toolbar from '../toolbar/toolbar';\nimport InventoryList from '../inventoryList/inventoryList';\nimport InventorySubscriptions from '../inventorySubscriptions/inventorySubscriptions';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * An OpenShift encompassing view.\n *\n * @augments React.Component\n * @fires onSelect\n */\nclass OpenshiftView extends React.Component {\n  state = {\n    option: null,\n    graphFilters: [],\n    inventoryFilters: [],\n    subscriptionsInventoryFilters: []\n  };\n\n  componentDidMount() {\n    const { initialOption } = this.props;\n    this.onSelect({ value: initialOption });\n  }\n\n  /**\n   * Apply a selected filtered value.\n   *\n   * @event onSelect\n   * @param {object} event\n   */\n  onSelect = (event = {}) => {\n    const { option } = this.state;\n    const { initialGraphFilters, initialInventoryFilters, initialSubscriptionsInventoryFilters, viewId } = this.props;\n    const { value } = event;\n\n    if (value !== option) {\n      const filter = ({ id, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(value, 'i').test(id);\n      };\n\n      const graphFilters = initialGraphFilters.filter(filter);\n      const inventoryFilters = initialInventoryFilters.filter(filter);\n      const subscriptionsInventoryFilters = initialSubscriptionsInventoryFilters.filter(filter);\n\n      this.setState(\n        {\n          option,\n          graphFilters,\n          inventoryFilters,\n          subscriptionsInventoryFilters\n        },\n        () => {\n          store.dispatch([\n            {\n              type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST\n            },\n            {\n              type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.UOM],\n              viewId,\n              [RHSM_API_QUERY_TYPES.UOM]: value\n            }\n          ]);\n        }\n      );\n    }\n  };\n\n  /**\n   * Render a select/dropdown list.\n   *\n   * @returns {Node}\n   */\n  renderSelect() {\n    const { option } = this.state;\n    const { initialOption, t } = this.props;\n    const options = [\n      {\n        title: t('curiosity-toolbar.uom', { context: RHSM_API_QUERY_UOM_TYPES.CORES }),\n        value: RHSM_API_QUERY_UOM_TYPES.CORES\n      },\n      {\n        title: t('curiosity-toolbar.uom', { context: RHSM_API_QUERY_UOM_TYPES.SOCKETS }),\n        value: RHSM_API_QUERY_UOM_TYPES.SOCKETS\n      }\n    ];\n\n    return <Select onSelect={this.onSelect} options={options} selectedOptions={option || initialOption} />;\n  }\n\n  /**\n   * Render an OpenShift view.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { graphFilters, inventoryFilters, subscriptionsInventoryFilters } = this.state;\n    const {\n      initialGuestsFilters,\n      initialToolbarFilters,\n      initialInventorySettings,\n      productLabel,\n      query,\n      graphTallyQuery,\n      inventoryHostsQuery,\n      inventorySubscriptionsQuery,\n      routeDetail,\n      t,\n      viewId\n    } = this.props;\n    const {\n      graphTallyQuery: initialGraphTallyQuery,\n      inventoryHostsQuery: initialInventoryHostsQuery,\n      inventorySubscriptionsQuery: initialInventorySubscriptionsQuery,\n      toolbarQuery\n    } = apiQueries.parseRhsmQuery(query, { graphTallyQuery, inventoryHostsQuery, inventorySubscriptionsQuery });\n\n    return (\n      <PageLayout>\n        <PageHeader productLabel={productLabel} includeTour>\n          {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: productLabel })}\n        </PageHeader>\n        <PageMessages>\n          <BannerMessages productId={routeDetail.pathParameter} viewId={viewId} query={query} />\n        </PageMessages>\n        <PageToolbar>\n          <Toolbar\n            filterOptions={initialToolbarFilters}\n            productId={routeDetail.pathParameter}\n            query={toolbarQuery}\n            viewId={viewId}\n          />\n        </PageToolbar>\n        <PageSection>\n          <GraphCard\n            key={routeDetail.pathParameter}\n            filterGraphData={graphFilters}\n            query={initialGraphTallyQuery}\n            productId={routeDetail.pathParameter}\n            viewId={viewId}\n            cardTitle={t('curiosity-graph.cardHeading')}\n            productLabel={productLabel}\n          >\n            {this.renderSelect()}\n          </GraphCard>\n        </PageSection>\n        <PageSection>\n          <InventoryTabs productId={routeDetail.pathParameter}>\n            <InventoryTab key=\"hostsTab\" title={t('curiosity-inventory.tab', { context: 'hosts' })}>\n              <InventoryList\n                key={routeDetail.pathParameter}\n                filterGuestsData={initialGuestsFilters}\n                filterInventoryData={inventoryFilters}\n                productId={routeDetail.pathParameter}\n                settings={initialInventorySettings}\n                query={initialInventoryHostsQuery}\n                viewId={viewId}\n              />\n            </InventoryTab>\n            {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && (\n              <InventoryTab key=\"subscriptionsTab\" title={t('curiosity-inventory.tab', { context: 'subscriptions' })}>\n                <InventorySubscriptions\n                  key={routeDetail.pathParameter}\n                  filterInventoryData={subscriptionsInventoryFilters}\n                  productId={routeDetail.pathParameter}\n                  query={initialInventorySubscriptionsQuery}\n                  viewId={viewId}\n                />\n              </InventoryTab>\n            )}\n          </InventoryTabs>\n        </PageSection>\n      </PageLayout>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{productLabel: string, initialOption: string, inventorySubscriptionsQuery: object, query: object,\n *     initialSubscriptionsInventoryFilters: Array, initialInventorySettings: object, initialToolbarFilters: Array,\n *     viewId: string, t: Function, graphTallyQuery: object, inventoryHostsQuery: object, initialGraphFilters: Array,\n *     routeDetail: object, initialGuestsFilters: Array, initialInventoryFilters: Array}}\n */\nOpenshiftView.propTypes = {\n  query: PropTypes.object,\n  graphTallyQuery: PropTypes.shape({\n    [RHSM_API_QUERY_TYPES.GRANULARITY]: PropTypes.oneOf([...Object.values(GRANULARITY_TYPES)])\n  }),\n  inventoryHostsQuery: PropTypes.shape({\n    [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n    [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n    [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SORT_TYPES)]),\n    [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n  }),\n  inventorySubscriptionsQuery: PropTypes.shape({\n    [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n    [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n    [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES)]),\n    [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n  }),\n  initialOption: PropTypes.oneOf(Object.values(RHSM_API_QUERY_UOM_TYPES)),\n  initialGraphFilters: PropTypes.array,\n  initialGuestsFilters: PropTypes.array,\n  initialInventoryFilters: PropTypes.array,\n  initialInventorySettings: PropTypes.shape({\n    hasGuests: PropTypes.func\n  }),\n  initialSubscriptionsInventoryFilters: PropTypes.array,\n  initialToolbarFilters: PropTypes.array,\n  productLabel: PropTypes.string,\n  routeDetail: PropTypes.shape({\n    pathParameter: PropTypes.string.isRequired,\n    pathId: PropTypes.string.isRequired,\n    routeItem: PropTypes.shape({\n      title: PropTypes.string\n    })\n  }).isRequired,\n  t: PropTypes.func,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{productLabel: string, initialOption: string, inventorySubscriptionsQuery: object, query: object,\n *     initialSubscriptionsInventoryFilters: Array, initialInventorySettings: object, initialToolbarFilters: Array,\n *     viewId: string, t: translate, graphTallyQuery: object, inventoryHostsQuery: object,\n *     initialGraphFilters: Array, initialGuestsFilters: Array, initialInventoryFilters: Array}}\n */\nOpenshiftView.defaultProps = {\n  query: {\n    [RHSM_API_QUERY_TYPES.UOM]: RHSM_API_QUERY_UOM_TYPES.CORES\n  },\n  graphTallyQuery: {\n    [RHSM_API_QUERY_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY\n  },\n  inventoryHostsQuery: {\n    [RHSM_API_QUERY_TYPES.SORT]: RHSM_API_QUERY_SORT_TYPES.LAST_SEEN,\n    [RHSM_API_QUERY_TYPES.DIRECTION]: SORT_DIRECTION_TYPES.ASCENDING,\n    [RHSM_API_QUERY_TYPES.LIMIT]: 100,\n    [RHSM_API_QUERY_TYPES.OFFSET]: 0\n  },\n  inventorySubscriptionsQuery: {\n    [RHSM_API_QUERY_TYPES.SORT]: RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES.UPCOMING_EVENT_DATE,\n    [RHSM_API_QUERY_TYPES.DIRECTION]: SORT_DIRECTION_TYPES.ASCENDING,\n    [RHSM_API_QUERY_TYPES.LIMIT]: 100,\n    [RHSM_API_QUERY_TYPES.OFFSET]: 0\n  },\n  initialOption: RHSM_API_QUERY_UOM_TYPES.CORES,\n  initialGraphFilters: [\n    {\n      id: 'cores',\n      isOptional: true,\n      fill: chartColorBlueLight.value,\n      stroke: chartColorBlueDark.value,\n      color: chartColorBlueDark.value\n    },\n    {\n      id: 'sockets',\n      isOptional: true,\n      fill: chartColorBlueLight.value,\n      stroke: chartColorBlueDark.value,\n      color: chartColorBlueDark.value\n    },\n    { id: 'thresholdSockets', isOptional: true },\n    { id: 'thresholdCores', isOptional: true }\n  ],\n  initialGuestsFilters: [\n    {\n      id: 'displayName',\n      header: translate('curiosity-inventory.header', { context: 'guestsDisplayName' }),\n      cell: (data, session) => {\n        const { displayName, inventoryId } = data;\n        const { inventory: authorized } = session?.authorized || {};\n\n        if (!inventoryId?.value) {\n          return displayName?.value;\n        }\n\n        if (!authorized) {\n          return displayName?.value || inventoryId?.value;\n        }\n\n        return (\n          <Button\n            isInline\n            component=\"a\"\n            variant=\"link\"\n            target=\"_blank\"\n            href={`${helpers.UI_DEPLOY_PATH_PREFIX}/insights/inventory/${inventoryId.value}/`}\n          >\n            {displayName.value || inventoryId.value}\n          </Button>\n        );\n      }\n    },\n    {\n      id: 'inventoryId',\n      cellWidth: 40\n    },\n    {\n      id: 'lastSeen',\n      cell: data => (data?.lastSeen?.value && <DateFormat date={data?.lastSeen?.value} />) || '',\n      cellWidth: 15\n    }\n  ],\n  initialInventoryFilters: [\n    {\n      id: 'displayName',\n      cell: (data, session) => {\n        const { displayName = {}, inventoryId = {}, numberOfGuests = {} } = data;\n        const { inventory: authorized } = session?.authorized || {};\n\n        if (!inventoryId.value) {\n          return displayName.value;\n        }\n\n        let updatedDisplayName = displayName.value || inventoryId.value;\n\n        if (authorized) {\n          updatedDisplayName = (\n            <Button\n              isInline\n              component=\"a\"\n              variant=\"link\"\n              target=\"_blank\"\n              href={`${helpers.UI_DEPLOY_PATH_PREFIX}/insights/inventory/${inventoryId.value}/`}\n            >\n              {displayName.value || inventoryId.value}\n            </Button>\n          );\n        }\n\n        return (\n          <React.Fragment>\n            {updatedDisplayName}{' '}\n            {(numberOfGuests.value &&\n              translate('curiosity-inventory.label', { context: 'numberOfGuests', count: numberOfGuests.value }, [\n                <PfLabel color=\"blue\" />\n              ])) ||\n              ''}\n          </React.Fragment>\n        );\n      },\n      isSortable: true\n    },\n    {\n      id: 'measurementType',\n      cell: data => {\n        const { cloudProvider = {}, measurementType = {} } = data;\n        return (\n          <React.Fragment>\n            {translate('curiosity-inventory.measurementType', { context: measurementType.value })}{' '}\n            {(cloudProvider.value && (\n              <PfLabel color=\"purple\">\n                {translate('curiosity-inventory.cloudProvider', { context: cloudProvider.value })}\n              </PfLabel>\n            )) ||\n              ''}\n          </React.Fragment>\n        );\n      },\n      isSortable: true,\n      cellWidth: 20\n    },\n    {\n      id: 'sockets',\n      isOptional: true,\n      isSortable: true,\n      isWrappable: true,\n      cellWidth: 15\n    },\n    {\n      id: 'cores',\n      isOptional: true,\n      isSortable: true,\n      isWrappable: true,\n      cellWidth: 15\n    },\n    {\n      id: 'lastSeen',\n      cell: data => (data?.lastSeen?.value && <DateFormat date={data?.lastSeen?.value} />) || '',\n      isSortable: true,\n      isWrappable: true,\n      cellWidth: 15\n    }\n  ],\n  initialInventorySettings: {},\n  initialSubscriptionsInventoryFilters: [\n    {\n      id: 'productName',\n      isSortable: true\n    },\n    {\n      id: 'serviceLevel',\n      isSortable: true,\n      isWrappable: true,\n      cellWidth: 15\n    },\n    {\n      id: 'upcomingEventDate',\n      cell: data =>\n        (data?.upcomingEventDate?.value && moment.utc(data?.upcomingEventDate?.value).format('YYYY-DD-MM')) || '',\n      isSortable: true,\n      isWrappable: true,\n      cellWidth: 15\n    }\n  ],\n  initialToolbarFilters: [\n    {\n      id: RHSM_API_QUERY_TYPES.SLA\n    }\n  ],\n  productLabel: 'OpenShift',\n  t: translate,\n  viewId: 'viewOpenShift'\n};\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.view.makeView(OpenshiftView.defaultProps);\n\nconst ConnectedOpenshiftView = connect(makeMapStateToProps)(OpenshiftView);\n\nexport { ConnectedOpenshiftView as default, ConnectedOpenshiftView, OpenshiftView };\n"],"sourceRoot":""}