{"version":3,"file":"js/8139.1663081731230.5bbc9877e7a33c00ec04.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardHelpers.js"],"sourcesContent":["import moment from 'moment';\nimport { chart_color_green_300 as chartColorGreenDark } from '@patternfly/react-tokens';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers, helpers } from '../../common';\n\n/**\n * Update chart/graph filters with base settings with styling.\n *\n * @param {Array} filters\n * @returns {{standaloneFilters: Array, groupedFilters: Array}}\n */\nconst generateChartSettings = (filters = []) => {\n  const standaloneFilters = [];\n  const groupedFilters = [];\n\n  filters.forEach(({ id, isStandalone = false, isThreshold = false, ...settings }) => {\n    if (!id) {\n      return;\n    }\n\n    const baseFilterSettings = {\n      id,\n      isStacked: !isThreshold,\n      isStandalone,\n      isThreshold,\n      strokeWidth: 2\n    };\n\n    if (isThreshold) {\n      baseFilterSettings.stroke = chartColorGreenDark.value;\n      baseFilterSettings.strokeDasharray = '4,3';\n      baseFilterSettings.strokeWidth = 3;\n    }\n\n    if (isStandalone) {\n      standaloneFilters.push({\n        ...baseFilterSettings,\n        ...settings\n      });\n    } else {\n      groupedFilters.push({\n        ...baseFilterSettings,\n        ...settings\n      });\n    }\n  });\n\n  return {\n    standaloneFilters,\n    groupedFilters\n  };\n};\n\n/**\n * Returns x axis ticks/intervals array for the xAxisTickInterval\n *\n * @param {string} granularity See enum of RHSM_API_QUERY_GRANULARITY_TYPES\n * @returns {number}\n */\nconst getChartXAxisLabelIncrement = granularity => {\n  switch (granularity) {\n    case GRANULARITY_TYPES.DAILY:\n      return 5;\n    case GRANULARITY_TYPES.WEEKLY:\n    case GRANULARITY_TYPES.MONTHLY:\n      return 2;\n    case GRANULARITY_TYPES.QUARTERLY:\n    default:\n      return 1;\n  }\n};\n\n/**\n * Return a formatted date string.\n *\n * @param {object} params\n * @param {Date} params.date\n * @param {string} params.granularity See enum of RHSM_API_QUERY_GRANULARITY_TYPES\n * @returns {string}\n */\nconst getTooltipDate = ({ date, granularity } = {}) => {\n  const momentDate = moment.utc(date);\n\n  switch (granularity) {\n    case GRANULARITY_TYPES.QUARTERLY:\n      return `${momentDate.format(dateHelpers.timestampQuarterFormats.yearShort)} - ${momentDate\n        .add(1, 'quarter')\n        .format(dateHelpers.timestampQuarterFormats.yearShort)}`;\n\n    case GRANULARITY_TYPES.MONTHLY:\n      return momentDate.format(dateHelpers.timestampMonthFormats.yearLong);\n\n    case GRANULARITY_TYPES.WEEKLY:\n      return `${momentDate.format(dateHelpers.timestampDayFormats.short)} - ${momentDate\n        .add(1, 'week')\n        .format(dateHelpers.timestampDayFormats.yearShort)}`;\n\n    case GRANULARITY_TYPES.DAILY:\n    default:\n      return momentDate.format(dateHelpers.timestampDayFormats.long);\n  }\n};\n\n/**\n * Format x axis ticks.\n *\n * @param {object} params\n * @param {Function} params.callback\n * @param {Date} params.date\n * @param {string} params.granularity See enum of RHSM_API_QUERY_GRANULARITY_TYPES\n * @param {number|string} params.tick\n * @param {Date} params.previousDate\n * @returns {string|undefined}\n */\nconst xAxisTickFormat = ({ callback, date, granularity, tick, previousDate } = {}) => {\n  if (!date || !granularity) {\n    return undefined;\n  }\n\n  if (callback) {\n    return callback({ callback, date, granularity, tick, previousDate });\n  }\n\n  const momentDate = moment.utc(date);\n  const isNewYear =\n    tick !== 0 && Number.parseInt(momentDate.year(), 10) !== Number.parseInt(moment.utc(previousDate).year(), 10);\n  let formattedDate;\n\n  switch (granularity) {\n    case GRANULARITY_TYPES.QUARTERLY:\n      formattedDate = isNewYear\n        ? momentDate.format(dateHelpers.timestampQuarterFormats.yearShort)\n        : momentDate.format(dateHelpers.timestampQuarterFormats.short);\n\n      formattedDate = formattedDate.replace(/\\s/, '\\n');\n      break;\n    case GRANULARITY_TYPES.MONTHLY:\n      formattedDate = isNewYear\n        ? momentDate.format(dateHelpers.timestampMonthFormats.yearShort)\n        : momentDate.format(dateHelpers.timestampMonthFormats.short);\n\n      formattedDate = formattedDate.replace(/\\s/, '\\n');\n      break;\n    case GRANULARITY_TYPES.WEEKLY:\n    case GRANULARITY_TYPES.DAILY:\n    default:\n      formattedDate = isNewYear\n        ? momentDate.format(dateHelpers.timestampDayFormats.yearShort)\n        : momentDate.format(dateHelpers.timestampDayFormats.short);\n\n      formattedDate = formattedDate.replace(/\\s(\\d{4})$/, '\\n$1');\n      break;\n  }\n\n  return formattedDate;\n};\n\n/**\n * Format y axis ticks.\n *\n * @param {object} params\n * @param {Function} params.callback\n * @param {number|string} params.tick\n * @returns {string}\n */\nconst yAxisTickFormat = ({ callback, tick } = {}) => {\n  if (callback) {\n    return callback({ tick });\n  }\n\n  return helpers\n    .numberDisplay(tick)\n    ?.format({\n      average: true,\n      mantissa: 1,\n      trimMantissa: true,\n      lowPrecision: false\n    })\n    ?.toUpperCase();\n};\n\n/**\n * Generate base chart component props.\n *\n * @param {object} params\n * @param {object} params.settings\n * @param {string} params.granularity\n * @returns {object}\n */\nconst generateExtendedChartSettings = ({ settings, granularity } = {}) => ({\n  ...settings,\n  xAxisLabelIncrement: getChartXAxisLabelIncrement(granularity),\n  xAxisTickFormat: ({ item, previousItem, tick }) =>\n    xAxisTickFormat({\n      callback: settings?.xAxisTickFormat,\n      tick,\n      date: item.date,\n      previousDate: previousItem.date,\n      granularity\n    }),\n  yAxisTickFormat: ({ tick }) =>\n    yAxisTickFormat({\n      callback: settings?.yAxisTickFormat,\n      tick\n    })\n});\n\nconst graphCardHelpers = {\n  generateChartSettings,\n  generateExtendedChartSettings,\n  getChartXAxisLabelIncrement,\n  getTooltipDate,\n  xAxisTickFormat,\n  yAxisTickFormat\n};\n\nexport {\n  graphCardHelpers as default,\n  graphCardHelpers,\n  generateChartSettings,\n  generateExtendedChartSettings,\n  getChartXAxisLabelIncrement,\n  getTooltipDate,\n  xAxisTickFormat,\n  yAxisTickFormat\n};\n"],"names":["generateChartSettings","filters","standaloneFilters","groupedFilters","forEach","id","isStandalone","isThreshold","settings","baseFilterSettings","isStacked","strokeWidth","stroke","chartColorGreenDark","strokeDasharray","push","getChartXAxisLabelIncrement","granularity","GRANULARITY_TYPES","getTooltipDate","date","momentDate","moment","format","dateHelpers","add","xAxisTickFormat","callback","tick","previousDate","formattedDate","isNewYear","Number","parseInt","year","replace","yAxisTickFormat","helpers","average","mantissa","trimMantissa","lowPrecision","toUpperCase","generateExtendedChartSettings","xAxisLabelIncrement","item","previousItem","graphCardHelpers"],"sourceRoot":""}