{"version":3,"file":"js/9110.1648238113655.8d9e1dae6dd3a82e93f3.js","mappings":"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","sources":["webpack:///./src/components/toolbar/toolbar.js","webpack:///./src/components/toolbar/toolbarContext.js","webpack:///./node_modules/fast-shallow-equal/index.js","webpack:///./node_modules/react-use/esm/useShallowCompareEffect.js","webpack:///./node_modules/react-use/esm/useCustomCompareEffect.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Toolbar as PfToolbar,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup\n} from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport { useToolbarFieldClear, useToolbarFieldClearAll, useToolbarFieldQueries } from './toolbarContext';\nimport { ToolbarFieldSelectCategory, useSelectCategoryOptions } from './toolbarFieldSelectCategory';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Application filter toolbar.\n *\n * @fires onClearFilter\n * @fires onClearAll\n * @param {object} props\n * @param {boolean} props.hardFilterReset On clearing all fields allow the category to reset as well.\n * @param {boolean} props.isDisabled\n * @param {Function} props.t\n * @param {Function} props.useSelectCategoryOptions\n * @param {Function} props.useToolbarFieldClear\n * @param {Function} props.useToolbarFieldClearAll\n * @param {Function} props.useToolbarFieldQueries\n * @returns {Node}\n */\nconst Toolbar = ({\n  hardFilterReset,\n  isDisabled,\n  t,\n  useSelectCategoryOptions: useAliasSelectCategoryOptions,\n  useToolbarFieldClear: useAliasToolbarFieldClear,\n  useToolbarFieldClearAll: useAliasToolbarFieldClearAll,\n  useToolbarFieldQueries: useAliasToolbarFieldQueries\n}) => {\n  const { currentCategory, options } = useAliasSelectCategoryOptions();\n  const toolbarFieldQueries = useAliasToolbarFieldQueries();\n  const clearField = useAliasToolbarFieldClear();\n  const clearAllFields = useAliasToolbarFieldClearAll();\n\n  if (isDisabled || !options?.length) {\n    return null;\n  }\n\n  /**\n   * Clear a specific value\n   *\n   * @event onClearFilter\n   * @param {object} params\n   * @param {*} params.value\n   * @returns {void}\n   */\n  const onClearFilter = ({ value }) => clearField(value);\n\n  /**\n   * Clear all active filters.\n   *\n   * @event onClearAll\n   * @returns {void}\n   */\n  const onClearAll = () => clearAllFields(hardFilterReset);\n\n  /**\n   * Set selected options for chip display.\n   *\n   * @param {object} params\n   * @param {Array} params.options\n   * @param {*} params.value\n   * @returns {Array}\n   */\n  const setSelectedOptions = ({ options: filterOptions, value }) => {\n    const query = filterOptions.find(({ value: optionValue }) => optionValue === toolbarFieldQueries?.[value]);\n    return (query?.title && [query?.title]) || [];\n  };\n\n  return (\n    <PfToolbar\n      id=\"curiosity-toolbar\"\n      className=\"curiosity-toolbar pf-m-toggle-group-container ins-c-primary-toolbar\"\n      collapseListedFiltersBreakpoint=\"sm\"\n      clearAllFilters={onClearAll}\n      clearFiltersButtonText={t('curiosity-toolbar.clearFilters')}\n    >\n      <ToolbarContent>\n        <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"md\">\n          <ToolbarGroup variant=\"filter-group\">\n            {options.length > 1 && (\n              <ToolbarItem>\n                <ToolbarFieldSelectCategory />\n              </ToolbarItem>\n            )}\n            {options.map(({ title, value, component, isClearable, options: filterOptions }) => {\n              const chipProps = { categoryName: title };\n\n              if (isClearable !== false) {\n                chipProps.chips = setSelectedOptions({ options: filterOptions, value });\n                chipProps.deleteChip = () => onClearFilter({ options: filterOptions, value });\n              }\n\n              return (\n                <ToolbarFilter\n                  key={value}\n                  showToolbarItem={currentCategory === value || options.length === 1}\n                  {...chipProps}\n                >\n                  {component}\n                </ToolbarFilter>\n              );\n            })}\n          </ToolbarGroup>\n        </ToolbarToggleGroup>\n      </ToolbarContent>\n    </PfToolbar>\n  );\n};\n\n/**\n * Prop types\n *\n * @type {{useToolbarFieldClear: Function, t: Function, useSelectCategoryOptions: Function, hardFilterReset: boolean,\n *     isDisabled: boolean, useToolbarFieldClearAll: Function, useToolbarFieldQueries: Function}}\n */\nToolbar.propTypes = {\n  hardFilterReset: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  t: PropTypes.func,\n  useSelectCategoryOptions: PropTypes.func,\n  useToolbarFieldClear: PropTypes.func,\n  useToolbarFieldClearAll: PropTypes.func,\n  useToolbarFieldQueries: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useToolbarFieldClear: Function, t: Function, useSelectCategoryOptions: Function, hardFilterReset: boolean,\n *     isDisabled: boolean, useToolbarFieldClearAll: Function, useToolbarFieldQueries: Function}}\n */\nToolbar.defaultProps = {\n  hardFilterReset: false,\n  isDisabled: helpers.UI_DISABLED_TOOLBAR,\n  t: translate,\n  useSelectCategoryOptions,\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFieldQueries\n};\n\nexport { Toolbar as default, Toolbar };\n","import { useProductQuery, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { useOnSelect as useSelectCategoryOnSelect } from './toolbarFieldSelectCategory';\nimport { useOnSelect as useSlaOnSelect } from './toolbarFieldSla';\nimport { useOnSelect as useUsageOnSelect } from './toolbarFieldUsage';\n\n/**\n * Return current values for categories/queries.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductGraphTallyQuery\n * @returns {object}\n */\nconst useToolbarFieldQueries = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery\n} = {}) => {\n  const {\n    [RHSM_API_QUERY_TYPES.SLA]: sla,\n    [RHSM_API_QUERY_TYPES.UOM]: uom,\n    [RHSM_API_QUERY_TYPES.USAGE]: usage\n  } = useAliasProductQuery();\n  const { [RHSM_API_QUERY_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n\n  return {\n    [RHSM_API_QUERY_TYPES.GRANULARITY]: granularity,\n    [RHSM_API_QUERY_TYPES.SLA]: sla,\n    [RHSM_API_QUERY_TYPES.UOM]: uom,\n    [RHSM_API_QUERY_TYPES.USAGE]: usage\n  };\n};\n\n/**\n * Clear a specific toolbar category.\n *\n * @param {object} options\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClear = ({\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect\n} = {}) => {\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n\n  return field => {\n    switch (field) {\n      case RHSM_API_QUERY_TYPES.SLA:\n        slaOnSelect();\n        break;\n      case RHSM_API_QUERY_TYPES.USAGE:\n        usageOnSelect();\n        break;\n      default:\n        break;\n    }\n  };\n};\n\n/**\n * Clear all available toolbar categories.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useSelectCategoryOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClearAll = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useSelectCategoryOnSelect: useAliasSelectCategoryOnSelect = useSelectCategoryOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect\n} = {}) => {\n  const { [RHSM_API_QUERY_TYPES.SLA]: sla, [RHSM_API_QUERY_TYPES.USAGE]: usage } = useAliasProductQuery();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n  const selectCategoryOnSelect = useAliasSelectCategoryOnSelect();\n\n  return hardFilterReset => {\n    if (typeof sla === 'string') {\n      slaOnSelect();\n    }\n\n    if (typeof usage === 'string') {\n      usageOnSelect();\n    }\n\n    if (hardFilterReset) {\n      selectCategoryOnSelect();\n    }\n  };\n};\n\nconst context = {\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFieldQueries\n};\n\nexport { context as default, context, useToolbarFieldClear, useToolbarFieldClearAll, useToolbarFieldQueries };\n","var keyList = Object.keys;\n\nexports.equal = function equal (a, b) {\n  if (a === b) return true;\n  if (!(a instanceof Object) || !(b instanceof Object)) return false;\n\n  var keys = keyList(a);\n  var length = keys.length;\n\n  for (var i = 0; i < length; i++)\n    if (!(keys[i] in b)) return false;\n\n  for (var i = 0; i < length; i++)\n    if (a[keys[i]] !== b[keys[i]]) return false;\n\n  return length === keyList(b).length;\n};\n","import { equal as isShallowEqual } from 'fast-shallow-equal';\nimport useCustomCompareEffect from './useCustomCompareEffect';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar shallowEqualDepsList = function (prevDeps, nextDeps) {\n    return prevDeps.every(function (dep, index) { return isShallowEqual(dep, nextDeps[index]); });\n};\nvar useShallowCompareEffect = function (effect, deps) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useShallowCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useShallowCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n    }\n    useCustomCompareEffect(effect, deps, shallowEqualDepsList);\n};\nexport default useShallowCompareEffect;\n","import { useEffect, useRef } from 'react';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar useCustomCompareEffect = function (effect, deps, depsEqual) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useCustomCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useCustomCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n        if (typeof depsEqual !== 'function') {\n            console.warn('`useCustomCompareEffect` should be used with depsEqual callback for comparing deps list');\n        }\n    }\n    var ref = useRef(undefined);\n    if (!ref.current || !depsEqual(deps, ref.current)) {\n        ref.current = deps;\n    }\n    useEffect(effect, ref.current);\n};\nexport default useCustomCompareEffect;\n"],"names":["Toolbar","hardFilterReset","isDisabled","t","useAliasSelectCategoryOptions","useSelectCategoryOptions","useAliasToolbarFieldClear","useToolbarFieldClear","useAliasToolbarFieldClearAll","useToolbarFieldClearAll","useAliasToolbarFieldQueries","useToolbarFieldQueries","currentCategory","options","toolbarFieldQueries","clearField","clearAllFields","length","id","className","collapseListedFiltersBreakpoint","clearAllFilters","clearFiltersButtonText","ToolbarContent","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarGroup","variant","ToolbarItem","ToolbarFieldSelectCategory","map","title","value","component","isClearable","filterOptions","chipProps","categoryName","chips","query","find","setSelectedOptions","deleteChip","ToolbarFilter","key","showToolbarItem","defaultProps","helpers","translate","useProductQuery","useAliasProductQuery","useProductGraphTallyQuery","useAliasProductGraphTallyQuery","sla","RHSM_API_QUERY_TYPES","uom","usage","granularity","useSlaOnSelect","useAliasSlaOnSelect","useUsageOnSelect","useAliasUsageOnSelect","slaOnSelect","usageOnSelect","field","useSelectCategoryOnSelect","useAliasSelectCategoryOnSelect","selectCategoryOnSelect","context","keyList","Object","keys","exports","a","b","i","shallowEqualDepsList","prevDeps","nextDeps","every","dep","index","effect","deps","depsEqual","ref","useRef","undefined","current","useEffect"],"sourceRoot":""}