{"version":3,"file":"js/5394.1679402734031.730e6abb3c81d24ac4f4.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardContext.js"],"sourcesContent":["import React, { useContext, useMemo } from 'react';\nimport { useShallowCompareEffect } from 'react-use';\nimport { ToolbarItem } from '@patternfly/react-core';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphConfig, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldSelectCategory';\nimport { helpers } from '../../common/helpers';\nimport { graphCardHelpers } from './graphCardHelpers';\n\n/**\n * @memberof GraphCard\n * @module GraphCardContext\n */\n\n/**\n * Chart context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{ settings: { isStandalone: false, metrics: [], metric: undefined } }, helpers.noop];\n\nconst GraphCardContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated graph card context.\n *\n * @returns {React.Context<{}>}\n */\nconst useGraphCardContext = () => useContext(GraphCardContext);\n\n/**\n * Parse filters settings for context.\n *\n * @param {object} options\n * @param {Function} options.useProduct\n * @param {Function} options.useProductGraphConfig\n * @returns {{standaloneFiltersSettings: Array<{ settings: object }>, groupedFiltersSettings: { settings: object }}}\n */\nconst useParseFiltersSettings = ({\n  useProduct: useAliasProduct = useProduct,\n  useProductGraphConfig: useAliasProductGraphConfig = useProductGraphConfig\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const { filters = [], settings = {} } = useAliasProductGraphConfig();\n  const { groupedFiltersSettings, standaloneFiltersSettings = [] } = useMemo(\n    () =>\n      graphCardHelpers.generateChartSettings({\n        filters,\n        settings,\n        productId\n      }),\n    [filters, settings, productId]\n  );\n\n  return {\n    groupedFiltersSettings,\n    standaloneFiltersSettings\n  };\n};\n\n/**\n * Transform multiple metrics from store for chart/graph consumption.\n *\n * @param {object} options\n * @param {Function} options.useGraphCardContext\n * @param {Function} options.useSelectorsResponse\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: Array, errorId: {},\n *     id: {}, list: Array}, cancelled: boolean, dataSets: Array, message: null, error: boolean}}\n */\nconst useMetricsSelector = ({\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  const {\n    error,\n    fulfilled,\n    pending,\n    data = [],\n    ...response\n  } = useAliasSelectorsResponse(\n    metrics.map(\n      ({ id: metricId, isCapacity }) =>\n        ({ graph }) =>\n          isCapacity ? graph.capacity?.[metricId] : graph.tally?.[metricId]\n    )\n  );\n\n  /**\n   * Apply graph config settings to metric data.\n   */\n  const dataById = {};\n  const dataByList = data?.map((metricData, index) => {\n    const updatedMetricData = {\n      ...metrics[index],\n      ...metricData\n    };\n    dataById[metrics[index].id] = updatedMetricData;\n    return updatedMetricData;\n  });\n\n  return {\n    ...response,\n    data: dataById,\n    dataSets: dataByList,\n    error,\n    fulfilled,\n    pending\n  };\n};\n\n/**\n * Get graph metrics from Tally or Capacity.\n *\n * @param {object} params\n * @param {Function} params.getGraphMetrics\n * @param {Function} params.useDispatch\n * @param {Function} params.useGraphCardContext\n * @param {Function} params.useMetricsSelector\n * @param {Function} params.useProduct\n * @param {Function} params.useProductGraphTallyQuery\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: Array, errorId: {},\n *     id: {}, list: Array}, cancelled: boolean, dataSets: Array, message: null, error: boolean}}\n */\nconst useGetMetrics = ({\n  getGraphMetrics = reduxActions.rhsm.getGraphMetrics,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector = useMetricsSelector,\n  useProduct: useAliasProduct = useProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductGraphTallyQuery();\n  const dispatch = useAliasDispatch();\n  const response = useAliasMetricsSelector();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  useShallowCompareEffect(() => {\n    const updatedMetrics = metrics.map(({ metric: metricId, isCapacity, query: metricQuery }) => ({\n      id: productId,\n      metric: metricId,\n      isCapacity,\n      query: metricQuery\n    }));\n    getGraphMetrics(updatedMetrics, query)(dispatch);\n  }, [metrics, productId, query]);\n\n  return response;\n};\n\n/**\n * Return a component list for a configurable graphCard action toolbar.\n * Allow the \"content\" prop to receive graph data for display via callback.\n *\n * @param {object} params\n * @param {Array} params.categoryOptions\n * @param {Function} params.useMetricsSelector\n * @param {Function} params.useGraphCardContext\n * @returns {Array}\n */\nconst useGraphCardActions = ({\n  categoryOptions = toolbarFieldOptions,\n  useMetricsSelector: useAliasMetricsSelector = useMetricsSelector,\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext\n} = {}) => {\n  const { pending, dataSets } = useAliasMetricsSelector();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { actions } = settings;\n\n  return useMemo(\n    () =>\n      actions?.map(({ id, content, ...actionProps }) => {\n        const option = categoryOptions.find(({ value: categoryOptionValue }) => id === categoryOptionValue);\n        const { component: OptionComponent } = option || {};\n\n        return (\n          (OptionComponent && (\n            <ToolbarItem key={`option-${id}`}>\n              <OptionComponent isFilter={false} {...actionProps} />\n            </ToolbarItem>\n          )) ||\n          (content && !pending && dataSets.length && (\n            <ToolbarItem key={id || helpers.generateId()}>\n              {typeof content === 'function' ? content({ data: dataSets }) : content}\n            </ToolbarItem>\n          )) ||\n          null\n        );\n      }),\n    [actions, categoryOptions, dataSets, pending]\n  );\n};\n\nconst context = {\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardActions,\n  useGraphCardContext,\n  useMetricsSelector,\n  useParseFiltersSettings\n};\n\nexport {\n  context as default,\n  context,\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardActions,\n  useGraphCardContext,\n  useMetricsSelector,\n  useParseFiltersSettings\n};\n"],"names":["DEFAULT_CONTEXT","settings","isStandalone","metrics","metric","undefined","helpers","GraphCardContext","React","useGraphCardContext","useContext","useParseFiltersSettings","_ref","arguments","length","_ref$useProduct","useProduct","useAliasProduct","_ref$useProductGraphC","useProductGraphConfig","useAliasProductGraphConfig","_useAliasProduct","productId","_useAliasProductGraph","_useAliasProductGraph2","filters","_useAliasProductGraph3","_useMemo","useMemo","graphCardHelpers","groupedFiltersSettings","_useMemo$standaloneFi","standaloneFiltersSettings","useMetricsSelector","_ref2","_ref2$useGraphCardCon","useAliasGraphCardContext","_ref2$useSelectorsRes","useSelectorsResponse","useAliasSelectorsResponse","storeHooks","_useAliasGraphCardCon","_useAliasGraphCardCon2","_settings$metrics","_useAliasSelectorsRes","map","_ref3","metricId","id","isCapacity","_ref4","_graph$capacity","_graph$tally","graph","capacity","tally","error","fulfilled","pending","_useAliasSelectorsRes2","data","response","_objectWithoutProperties","_excluded","dataById","dataByList","metricData","index","updatedMetricData","_objectSpread","dataSets","useGetMetrics","_ref5","_ref5$getGraphMetrics","getGraphMetrics","reduxActions","_ref5$useDispatch","useDispatch","useAliasDispatch","_ref5$useGraphCardCon","_ref5$useMetricsSelec","useAliasMetricsSelector","_ref5$useProduct","_ref5$useProductGraph","useProductGraphTallyQuery","useAliasProductGraphTallyQuery","_useAliasProduct2","query","dispatch","_useAliasGraphCardCon3","_useAliasGraphCardCon4","_settings$metrics2","useShallowCompareEffect","updatedMetrics","_ref6","metricQuery","useGraphCardActions","_ref7","_ref7$categoryOptions","categoryOptions","toolbarFieldOptions","_ref7$useMetricsSelec","_ref7$useGraphCardCon","_useAliasMetricsSelec","_useAliasGraphCardCon5","_useAliasGraphCardCon6","actions","_ref8","content","actionProps","_excluded2","OptionComponent","find","_ref9","categoryOptionValue","value","component","ToolbarItem","key","concat","Object","assign","isFilter","context"],"sourceRoot":""}