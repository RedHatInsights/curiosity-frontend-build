{"version":3,"file":"js/4339.006d0875127eb129f460.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardChartLegend.js","webpack:///./node_modules/@babel/runtime/helpers/esm/toArray.js","webpack:///./src/components/graphCard/graphCardContext.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { useMount } from 'react-use';\nimport { useProduct } from '../productView/productViewContext';\nimport { useGraphCardContext } from './graphCardContext';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { ChartIcon } from '../chart/chartIcon';\n\n/**\n * @memberof GraphCard\n * @module GraphCardChartLegend\n */\n\n/**\n * FixMe: PF button disabled borks events on immediate parent nodes, such as tooltip wrappers\n * PF is using \"pointer-events: none\" styling when disabled is activated. This\n * currently affects events on immediate parent nodes.\n */\n/**\n * A custom chart legend.\n *\n * @fires onClick\n * @param {object} props\n * @param {object} props.chart\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useDispatch\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useProduct\n * @param {Function} props.useSelectors\n * @returns {React.ReactNode}\n */\nconst GraphCardChartLegend = ({\n  chart,\n  datum,\n  t,\n  useDispatch: useAliasDispatch,\n  useGraphCardContext: useAliasGraphCardContext,\n  useSelectors: useAliasSelectors,\n  useProduct: useAliasProduct\n}) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const { productLabel, viewId } = useAliasProduct();\n  const { isDisabledLegendClick } = settings;\n\n  const dispatch = useAliasDispatch();\n  const [invertedLegendItem, ...legendItems] = useAliasSelectors([\n    ({ graph }) => graph.legend?.[`${viewId}-inverted`],\n    ...datum.dataSets.map(\n      ({ id }) =>\n        ({ graph }) =>\n          graph.legend?.[`${viewId}-${id}`]\n    )\n  ]);\n\n  useMount(() => {\n    datum.dataSets.forEach(({ id, isToolbarFilter }, index) => {\n      if (invertedLegendItem && isToolbarFilter) {\n        if (!new RegExp(invertedLegendItem).test(id)) {\n          chart.hide(id);\n        }\n      } else {\n        const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n\n        if (checkIsToggled) {\n          chart.hide(id);\n        }\n      }\n    });\n  });\n\n  /**\n   * Toggle legend item and chart.\n   *\n   * @event onClick\n   * @param {string} id\n   */\n  const onClick = id => {\n    const updatedToggle = chart.toggle(id);\n\n    dispatch({\n      type: reduxTypes.graph.SET_GRAPH_LEGEND,\n      id: `${viewId}-${id}`,\n      value: updatedToggle\n    });\n  };\n\n  return (\n    <React.Fragment>\n      {datum.dataSets.map(({ id, isThreshold, stroke: color, data = [] }, index) => {\n        const isDisabled =\n          !data.find(({ y, hasData }) => (y >= 0 && hasData === true) || (y >= 0 && isThreshold === true)) || false;\n\n        const labelContent = t([`curiosity-graph.label`, 'curiosity-graph.label_no'], {\n          product: productLabel,\n          context: id\n        });\n\n        const tooltipContent = t(\n          `curiosity-graph.legendTooltip`,\n          {\n            product: productLabel,\n            context: id\n          },\n          [<span style={{ whiteSpace: 'nowrap' }} />]\n        );\n\n        const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n        const buttonActionProps = {};\n\n        if (!isDisabledLegendClick) {\n          buttonActionProps.onClick = () => onClick(id);\n          buttonActionProps.onKeyPress = () => onClick(id);\n        }\n\n        const button = (\n          <Button\n            {...buttonActionProps}\n            className=\"curiosity-usage-graph__legend-item\"\n            tabIndex={0}\n            key={`curiosity-button-${id}`}\n            variant=\"link\"\n            component=\"a\"\n            isDisabled={isDisabledLegendClick ?? isDisabled}\n            icon={\n              ((isDisabled || checkIsToggled) && <ChartIcon symbol=\"eyeSlash\" />) || (\n                <ChartIcon\n                  symbol={(isThreshold && 'dash') || 'square'}\n                  style={{ visibility: (isDisabled && 'hidden') || (checkIsToggled && 'hidden') || 'visible' }}\n                  fill={color}\n                />\n              )\n            }\n          >\n            {labelContent}\n          </Button>\n        );\n\n        if (tooltipContent) {\n          return (\n            <Tooltip\n              key={`curiosity-tooltip-${id}`}\n              content={<p>{tooltipContent}</p>}\n              position={TooltipPosition.top}\n              enableFlip\n              distance={5}\n            >\n              <span className=\"pf-c-button pf-m-link curiosity-usage-graph__legend-item-wrapper\">{button}</span>\n            </Tooltip>\n          );\n        }\n\n        return button;\n      })}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, t: Function, useGraphCardContext: Function, useDispatch: Function,\n *     useSelectors: Function, chart: object}}\n */\nGraphCardChartLegend.propTypes = {\n  chart: PropTypes.shape({\n    hide: PropTypes.func,\n    toggle: PropTypes.func,\n    isToggled: PropTypes.func\n  }),\n  datum: PropTypes.shape({\n    dataSets: PropTypes.arrayOf(\n      PropTypes.shape({\n        data: PropTypes.array,\n        id: PropTypes.string.isRequired,\n        isThreshold: PropTypes.bool,\n        stroke: PropTypes.string.isRequired\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useDispatch: PropTypes.func,\n  useGraphCardContext: PropTypes.func,\n  useProduct: PropTypes.func,\n  useSelectors: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: {dataSets: Array}, useProduct: Function, t: Function, useGraphCardContext: Function, useDispatch: Function,\n *     useSelectors: Function, chart: {hide: Function, toggle: Function, isToggled: Function}}}\n */\nGraphCardChartLegend.defaultProps = {\n  chart: {\n    hide: helpers.noop,\n    toggle: helpers.noop,\n    isToggled: helpers.noop\n  },\n  datum: {\n    dataSets: []\n  },\n  t: translate,\n  useDispatch: storeHooks.reactRedux.useDispatch,\n  useGraphCardContext,\n  useProduct,\n  useSelectors: storeHooks.reactRedux.useSelectors\n};\n\nexport { GraphCardChartLegend as default, GraphCardChartLegend };\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","import React, { useContext, useMemo } from 'react';\nimport { useShallowCompareEffect } from 'react-use';\nimport { ToolbarItem } from '@patternfly/react-core';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphConfig, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldSelectCategory';\nimport { helpers } from '../../common/helpers';\nimport { graphCardHelpers } from './graphCardHelpers';\n\n/**\n * @memberof GraphCard\n * @module GraphCardContext\n */\n\n/**\n * Chart context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{ settings: { metrics: [] } }, helpers.noop];\n\nconst GraphCardContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated graph card context.\n *\n * @returns {React.Context<{}>}\n */\nconst useGraphCardContext = () => useContext(GraphCardContext);\n\n/**\n * Parse filters settings for context.\n *\n * @param {object} options\n * @param {Function} options.useProduct\n * @param {Function} options.useProductGraphConfig\n * @returns {{standaloneFiltersSettings: Array<{ settings: object }>, groupedFiltersSettings: { settings: object }}}\n */\nconst useParseFiltersSettings = ({\n  useProduct: useAliasProduct = useProduct,\n  useProductGraphConfig: useAliasProductGraphConfig = useProductGraphConfig\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const { filters = [], settings = {} } = useAliasProductGraphConfig();\n\n  return useMemo(\n    () =>\n      graphCardHelpers.generateChartSettings({\n        filters,\n        settings,\n        productId\n      }),\n    [filters, settings, productId]\n  );\n};\n\n/**\n * Transform multiple metrics from store for chart/graph consumption.\n *\n * @param {object} options\n * @param {Function} options.useGraphCardContext\n * @param {Function} options.useSelectorsResponse\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: Array, errorId: {},\n *     id: {}, list: Array}, cancelled: boolean, dataSets: Array, message: null, error: boolean}}\n */\nconst useMetricsSelector = ({\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  const {\n    error,\n    fulfilled,\n    pending,\n    data = [],\n    ...response\n  } = useAliasSelectorsResponse(\n    metrics.map(\n      ({ id: metricId, isCapacity }) =>\n        ({ graph }) =>\n          isCapacity ? graph.capacity?.[metricId] : graph.tally?.[metricId]\n    )\n  );\n\n  /**\n   * Apply graph config settings to metric data.\n   */\n  const dataById = {};\n  const dataByList = data?.map((metricData, index) => {\n    const updatedMetricData = {\n      ...metrics[index],\n      ...metricData\n    };\n    dataById[metrics[index].id] = updatedMetricData;\n    return updatedMetricData;\n  });\n\n  return {\n    ...response,\n    data: dataById,\n    dataSets: dataByList,\n    error,\n    fulfilled,\n    pending\n  };\n};\n\n/**\n * Get graph metrics from Tally or Capacity.\n *\n * @param {object} params\n * @param {Function} params.getGraphMetrics\n * @param {Function} params.useDispatch\n * @param {Function} params.useGraphCardContext\n * @param {Function} params.useMetricsSelector\n * @param {Function} params.useProduct\n * @param {Function} params.useProductGraphTallyQuery\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: Array, errorId: {},\n *     id: {}, list: Array}, cancelled: boolean, dataSets: Array, message: null, error: boolean}}\n */\nconst useGetMetrics = ({\n  getGraphMetrics = reduxActions.rhsm.getGraphMetrics,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector = useMetricsSelector,\n  useProduct: useAliasProduct = useProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductGraphTallyQuery();\n  const dispatch = useAliasDispatch();\n  const response = useAliasMetricsSelector();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  useShallowCompareEffect(() => {\n    const updatedMetrics = metrics.map(({ metric: metricId, isCapacity, query: metricQuery }) => ({\n      id: productId,\n      metric: metricId,\n      isCapacity,\n      query: metricQuery\n    }));\n    getGraphMetrics(updatedMetrics, query)(dispatch);\n  }, [metrics, productId, query]);\n\n  return response;\n};\n\n/**\n * FixMe: the pending condition for \"content\" will block subsequent responses from this hook, this is expected.\n * This current limitation means if we decide to apply the same action to multiple cards the \"content\" will\n * not display for all of them.\n */\n/**\n * Return a component list for a configurable graphCard action toolbar.\n * Allow the \"content\" prop to receive graph data for display via callback.\n *\n * @param {object} params\n * @param {Array} params.categoryOptions\n * @param {Function} params.useMetricsSelector\n * @param {Function} params.useGraphCardContext\n * @returns {Array}\n */\nconst useGraphCardActions = ({\n  categoryOptions = toolbarFieldOptions,\n  useMetricsSelector: useAliasMetricsSelector = useMetricsSelector,\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext\n} = {}) => {\n  const { pending, dataSets } = useAliasMetricsSelector();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { actions } = settings;\n\n  return useMemo(\n    () =>\n      actions?.map(({ id, content, ...actionProps }) => {\n        const option = categoryOptions.find(({ value: categoryOptionValue }) => id === categoryOptionValue);\n        const { component: OptionComponent } = option || {};\n\n        return (\n          (OptionComponent && (\n            <ToolbarItem key={`option-${id}`}>\n              <OptionComponent isFilter={false} {...actionProps} />\n            </ToolbarItem>\n          )) ||\n          (content && !pending && dataSets.length && (\n            <ToolbarItem key={id || helpers.generateId()}>\n              {typeof content === 'function' ? content({ data: dataSets }) : content}\n            </ToolbarItem>\n          )) ||\n          null\n        );\n      }),\n    [actions, categoryOptions, dataSets, pending]\n  );\n};\n\nconst context = {\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardActions,\n  useGraphCardContext,\n  useMetricsSelector,\n  useParseFiltersSettings\n};\n\nexport {\n  context as default,\n  context,\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardActions,\n  useGraphCardContext,\n  useMetricsSelector,\n  useParseFiltersSettings\n};\n"],"names":["GraphCardChartLegend","_ref","arr","chart","datum","t","useAliasDispatch","useDispatch","useAliasGraphCardContext","useGraphCardContext","useAliasSelectors","useSelectors","useAliasProduct","useProduct","_useAliasGraphCardCon2","settings","_useAliasProduct","productLabel","viewId","isDisabledLegendClick","dispatch","_useAliasSelectors2","_ref2","_graph$legend","graph","legend","concat","_toConsumableArray","dataSets","map","_ref3","id","_ref4","_graph$legend2","arrayWithHoles","iterableToArray","unsupportedIterableToArray","nonIterableRest","invertedLegendItem","legendItems","slice","useMount","forEach","_ref5","index","isToolbarFilter","RegExp","test","hide","isToggled","onClick","updatedToggle","toggle","type","reduxTypes","value","React","_ref6","isThreshold","color","stroke","_ref6$data","data","isDisabled","find","_ref7","y","hasData","labelContent","product","context","tooltipContent","style","whiteSpace","checkIsToggled","buttonActionProps","onKeyPress","button","Button","Object","assign","className","tabIndex","key","variant","component","icon","ChartIcon","symbol","visibility","fill","Tooltip","content","position","TooltipPosition","enableFlip","distance","defaultProps","helpers","translate","storeHooks","DEFAULT_CONTEXT","metrics","GraphCardContext","useContext","useParseFiltersSettings","arguments","length","undefined","_ref$useProduct","_ref$useProductGraphC","useProductGraphConfig","useAliasProductGraphConfig","productId","_useAliasProductGraph","_useAliasProductGraph2","filters","_useAliasProductGraph3","useMemo","graphCardHelpers","useMetricsSelector","_ref2$useGraphCardCon","_ref2$useSelectorsRes","useSelectorsResponse","useAliasSelectorsResponse","_useAliasGraphCardCon","_settings$metrics","_useAliasSelectorsRes","metricId","isCapacity","_graph$capacity","_graph$tally","capacity","tally","error","fulfilled","pending","_useAliasSelectorsRes2","response","_objectWithoutProperties","_excluded","dataById","dataByList","metricData","updatedMetricData","_objectSpread","useGetMetrics","_ref5$getGraphMetrics","getGraphMetrics","reduxActions","_ref5$useDispatch","_ref5$useGraphCardCon","_ref5$useMetricsSelec","useAliasMetricsSelector","_ref5$useProduct","_ref5$useProductGraph","useProductGraphTallyQuery","useAliasProductGraphTallyQuery","_useAliasProduct2","query","_useAliasGraphCardCon3","_useAliasGraphCardCon4","_settings$metrics2","useShallowCompareEffect","updatedMetrics","metric","metricQuery","useGraphCardActions","_ref7$categoryOptions","categoryOptions","toolbarFieldOptions","_ref7$useMetricsSelec","_ref7$useGraphCardCon","_useAliasMetricsSelec","_useAliasGraphCardCon5","_useAliasGraphCardCon6","actions","_ref8","actionProps","_excluded2","OptionComponent","_ref9","categoryOptionValue","ToolbarItem","isFilter"],"sourceRoot":""}