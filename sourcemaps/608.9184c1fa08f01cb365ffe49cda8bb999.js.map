{"version":3,"file":"js/608.1663083294513.6b74af927906a31eeb03.js","mappings":"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","sources":["webpack:///./src/components/form/select.js","webpack:///./src/components/graphCard/graphCard.js","webpack:///./src/components/graphCard/graphCardMetric.js","webpack:///./src/components/graphCard/graphCardMetricTotals.js","webpack:///./src/components/graphCard/graphCardMetrics.js","webpack:///./src/components/minHeight/minHeight.js","webpack:///./src/components/toolbar/toolbarFieldRangedMonthly.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  DropdownDirection,\n  DropdownPosition,\n  Select as PfSelect,\n  SelectOption as PfSelectOption,\n  SelectVariant\n} from '@patternfly/react-core';\nimport _cloneDeep from 'lodash/cloneDeep';\nimport _isEqual from 'lodash/isEqual';\nimport _findIndex from 'lodash/findIndex';\nimport _isPlainObject from 'lodash/isPlainObject';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Pass direction as select component variant option.\n *\n * @type {DropdownDirection}\n */\nconst SelectDirection = DropdownDirection;\n\n/**\n * Pass position as select component variant option.\n *\n * @type {DropdownPosition}\n */\nconst SelectPosition = DropdownPosition;\n\n/**\n * A wrapper for Patternfly Select. Provides restructured event data for onSelect callback.\n *\n * @augments React.Component\n * @fires onSelect\n * @fires onToggle\n */\nclass Select extends React.Component {\n  state = { isExpanded: false, options: null, selected: null };\n\n  selectField = React.createRef();\n\n  componentDidMount() {\n    const { options } = this.state;\n\n    if (options === null) {\n      this.formatOptions();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { options, selectedOptions } = this.props;\n\n    if (!_isEqual(prevProps.options, options) || !_isEqual(prevProps.selectedOptions, selectedOptions)) {\n      this.formatOptions();\n    }\n  }\n\n  /**\n   * Emulate select event object, apply to provided onSelect prop.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @param {string} titleSelection\n   */\n  onSelect = (event, titleSelection) => {\n    const { options } = this.state;\n    const { id, name, onSelect, variant } = this.props;\n\n    const updatedOptions = options;\n    const optionsIndex = updatedOptions.findIndex(option => option.title === titleSelection);\n    updatedOptions[optionsIndex].selected =\n      variant === SelectVariant.single ? true : !updatedOptions[optionsIndex].selected;\n\n    if (variant === SelectVariant.single) {\n      updatedOptions.forEach((option, index) => {\n        if (optionsIndex !== index) {\n          updatedOptions[index].selected = false;\n        }\n      });\n    }\n\n    const updateSelected =\n      variant === SelectVariant.single\n        ? titleSelection\n        : updatedOptions.filter(opt => opt.selected === true).map(opt => opt.title);\n\n    this.setState(\n      {\n        options: updatedOptions,\n        selected: updateSelected\n      },\n      () => {\n        const mockUpdatedOptions = _cloneDeep(updatedOptions);\n\n        const mockTarget = {\n          id,\n          name: name || id,\n          value: mockUpdatedOptions[optionsIndex].value,\n          selected:\n            (variant === SelectVariant.single && mockUpdatedOptions[optionsIndex]) || _cloneDeep(updateSelected),\n          selectedIndex: optionsIndex,\n          type: `select-${(variant === SelectVariant.single && 'one') || 'multiple'}`,\n          options: mockUpdatedOptions\n        };\n\n        if (variant === SelectVariant.checkbox) {\n          mockTarget.checked = mockUpdatedOptions[optionsIndex].selected;\n        }\n\n        const mockEvent = {\n          ...mockTarget,\n          target: { ...mockTarget },\n          currentTarget: { ...mockTarget },\n          persist: helpers.noop\n        };\n\n        onSelect({ ...mockEvent }, optionsIndex, mockUpdatedOptions);\n\n        if (variant === SelectVariant.single) {\n          this.setState({\n            isExpanded: false\n          });\n        }\n      }\n    );\n  };\n\n  /**\n   * Patternfly Select's open/closed state.\n   *\n   * @event onToggle\n   * @param {boolean} expanded\n   */\n  onToggle = expanded => {\n    this.setState({\n      isExpanded: expanded\n    });\n  };\n\n  // FixMe: attributes filtered on PF select component. allow data- attributes\n  /**\n   * Format options into a consumable array of objects format.\n   * Note: It is understood that for line 151'ish around \"updatedOptions\" we dump all values regardless\n   * of whether they are plain objects, or not, into updatedOptions. This has been done for speed only,\n   * one less check to perform.\n   */\n  formatOptions() {\n    const { current: domElement = {} } = this.selectField;\n    const { options, selectedOptions, variant } = this.props;\n    const dataAttributes = Object.entries(this.props).filter(([key]) => /^data-/i.test(key));\n    const updatedOptions = _isPlainObject(options)\n      ? Object.entries(options).map(([key, value]) => ({ ...value, title: key, value }))\n      : _cloneDeep(options);\n\n    const activateOptions =\n      (selectedOptions && typeof selectedOptions === 'string') || typeof selectedOptions === 'number'\n        ? [selectedOptions]\n        : selectedOptions;\n\n    updatedOptions.forEach((option, index) => {\n      let convertedOption = option;\n\n      if (typeof convertedOption === 'string') {\n        convertedOption = {\n          title: option,\n          value: option\n        };\n\n        updatedOptions[index] = convertedOption;\n      }\n\n      convertedOption.text = convertedOption.text || convertedOption.title;\n      convertedOption.textContent = convertedOption.textContent || convertedOption.title;\n      convertedOption.label = convertedOption.label || convertedOption.title;\n\n      if (activateOptions) {\n        let isSelected;\n\n        if (_isPlainObject(convertedOption.value)) {\n          isSelected = _findIndex(activateOptions, convertedOption.value) > -1;\n\n          if (!isSelected) {\n            const tempSearch = activateOptions.find(activeOption =>\n              Object.values(convertedOption.value).includes(activeOption)\n            );\n            isSelected = !!tempSearch;\n          }\n        } else {\n          isSelected = activateOptions.includes(convertedOption.value);\n        }\n\n        if (!isSelected) {\n          isSelected = activateOptions.includes(convertedOption.title);\n        }\n\n        updatedOptions[index].selected = isSelected;\n      }\n    });\n\n    let updateSelected;\n\n    if (variant === SelectVariant.single) {\n      updateSelected = (updatedOptions.find(opt => opt.selected === true) || {}).title;\n    } else {\n      updateSelected = updatedOptions.filter(opt => opt.selected === true).map(opt => opt.title);\n    }\n\n    if (domElement?.parentRef?.current) {\n      dataAttributes.forEach(([key, value]) => domElement?.parentRef?.current.setAttribute(key, value));\n    }\n\n    this.setState({\n      options: updatedOptions,\n      selected: updateSelected\n    });\n  }\n\n  /**\n   * Render a select/dropdown list.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { options, selected, isExpanded } = this.state;\n    const {\n      ariaLabel,\n      className,\n      direction,\n      isDisabled,\n      isToggleText,\n      maxHeight,\n      placeholder,\n      position,\n      toggleIcon,\n      variant\n    } = this.props;\n\n    const pfSelectOptions = {\n      direction,\n      maxHeight\n    };\n\n    // FixMe: investigate \"isDisabled\", PFReact quirks?\n    if (!options || !options.length || isDisabled) {\n      pfSelectOptions.isDisabled = true;\n    }\n\n    /**\n     * FixMe: PFReact quirks around PfSelect, requires children\n     * \"Null\" is a typical fallback we use across the board on a multitude of React apps.\n     * In this case \"null\" is a fallback for scenarios where an \"undefined\" list is passed\n     * during initial mount. Converted to an empty list/array \"[]\" to compensate.\n     */\n    /**\n     * Note: PFReact missing select border on compile\n     * Related https://github.com/patternfly/patternfly-react/issues/5650 and\n     * https://github.com/cssnano/cssnano/issues/1051\n     */\n    return (\n      <div className=\"curiosity-select\">\n        <PfSelect\n          menuAppendTo=\"parent\"\n          className={`curiosity-select-pf${(!isToggleText && '__no-toggle-text') || ''} ${\n            (position === DropdownPosition.right && 'curiosity-select-pf__position-right') || ''\n          } ${className}`}\n          variant={variant}\n          aria-label={ariaLabel}\n          onToggle={this.onToggle}\n          onSelect={this.onSelect}\n          selections={selected}\n          isOpen={isExpanded}\n          toggleIcon={toggleIcon}\n          placeholderText={placeholder}\n          ref={this.selectField}\n          {...pfSelectOptions}\n        >\n          {(options &&\n            options.map(option => (\n              <PfSelectOption\n                key={window.btoa(`${option.title}-${option.value}`)}\n                id={window.btoa(`${option.title}-${option.value}`)}\n                value={option.title}\n                data-value={(_isPlainObject(option.value) && JSON.stringify([option.value])) || option.value}\n                data-title={option.title}\n              />\n            ))) ||\n            []}\n        </PfSelect>\n      </div>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{toggleIcon: (Node|Function), className: string, ariaLabel: string, onSelect: Function,\n *     isToggleText: boolean, maxHeight: number, name: string, options: (Array|object),\n *     selectedOptions: (number|string|Array), variant: string, id: string, isDisabled: boolean,\n *     placeholder: string, position: string, direction: string}}\n */\nSelect.propTypes = {\n  ariaLabel: PropTypes.string,\n  className: PropTypes.string,\n  direction: PropTypes.oneOf(Object.values(SelectDirection)),\n  id: PropTypes.string,\n  isDisabled: PropTypes.bool,\n  isToggleText: PropTypes.bool,\n  maxHeight: PropTypes.number,\n  name: PropTypes.string,\n  onSelect: PropTypes.func,\n  options: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.string),\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.any,\n        value: PropTypes.any.isRequired,\n        selected: PropTypes.bool\n      })\n    ),\n    PropTypes.shape({\n      title: PropTypes.any,\n      value: PropTypes.any.isRequired,\n      selected: PropTypes.bool\n    }),\n    PropTypes.object\n  ]),\n  placeholder: PropTypes.string,\n  position: PropTypes.oneOf(Object.values(SelectPosition)),\n  selectedOptions: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]))\n  ]),\n  toggleIcon: PropTypes.element,\n  variant: PropTypes.oneOf([...Object.values(SelectVariant)])\n};\n\n/**\n * Default props.\n *\n * @type {{toggleIcon: (Node|Function), className: string, ariaLabel: string, onSelect: Function, isToggleText: boolean,\n *     maxHeight: number, name: string, options: (Array|object), selectedOptions: (number|string|Array),\n *     variant: SelectVariant.single, id: string, isDisabled: boolean, placeholder: string,\n *     position: DropdownPosition.left, direction: DropdownDirection.down}}\n */\nSelect.defaultProps = {\n  ariaLabel: 'Select option',\n  className: '',\n  direction: SelectDirection.down,\n  id: helpers.generateId(),\n  isDisabled: false,\n  isToggleText: true,\n  maxHeight: null,\n  name: null,\n  onSelect: helpers.noop,\n  options: [],\n  placeholder: 'Select option',\n  position: SelectPosition.left,\n  selectedOptions: null,\n  toggleIcon: null,\n  variant: SelectVariant.single\n};\n\nexport { Select as default, Select, SelectDirection, SelectPosition };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProductGraphConfig } from '../productView/productViewContext';\nimport { helpers } from '../../common';\nimport { GraphCardMetrics } from './graphCardMetrics';\nimport { GraphCardMetric } from './graphCardMetric';\nimport { graphCardHelpers } from './graphCardHelpers';\n\n/**\n * Set up graph cards. Expand filters with base graph settings.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useProductGraphConfig\n * @returns {Node}\n */\nconst GraphCard = ({ isDisabled, useProductGraphConfig: useAliasProductGraphConfig }) => {\n  const { filters } = useAliasProductGraphConfig();\n  const { groupedFilters, standaloneFilters } = graphCardHelpers.generateChartSettings(filters);\n\n  if (isDisabled) {\n    return null;\n  }\n\n  return (\n    <React.Fragment>\n      {(groupedFilters?.length && <GraphCardMetrics metricFilters={groupedFilters} />) || null}\n      {standaloneFilters.map(metricFilter => (\n        <GraphCardMetric key={`graphCard_${metricFilter.id}`} metricFilter={metricFilter} />\n      ))}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphConfig: Function, isDisabled: boolean}}\n */\nGraphCard.propTypes = {\n  isDisabled: PropTypes.bool,\n  useProductGraphConfig: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphConfig: Function, isDisabled: boolean}}\n */\nGraphCard.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_GRAPH,\n  useProductGraphConfig\n};\n\nexport { GraphCard as default, GraphCard };\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { GraphCardChart } from './graphCardChart';\nimport { useProductGraphConfig } from '../productView/productViewContext';\nimport { GraphCardContext } from './graphCardContext';\nimport { rhsmConstants } from '../../services/rhsm/rhsmConstants';\nimport { GraphCardMetricTotals } from './graphCardMetricTotals';\n\n/**\n * Display a single graph metric.\n *\n * @param {object} props\n * @param {object} props.metricFilter\n * @param {Function} props.useProductGraphConfig\n * @returns {Node}\n */\nconst GraphCardMetric = ({ metricFilter, useProductGraphConfig: useAliasProductGraphConfig }) => {\n  const [context, setContext] = useState({});\n  const { settings } = useAliasProductGraphConfig();\n\n  useEffect(() => {\n    setContext({\n      settings: {\n        padding: {\n          bottom: 75,\n          left: 75,\n          right: 45,\n          top: 45\n        },\n        ...settings,\n        isStandalone: true,\n        metric: metricFilter,\n        metrics: [metricFilter]\n      }\n    });\n  }, [metricFilter, settings, setContext]);\n\n  return (\n    <GraphCardContext.Provider value={context}>\n      <GraphCardMetricTotals>\n        <GraphCardChart />\n      </GraphCardMetricTotals>\n    </GraphCardContext.Provider>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphConfig: Function, metricFilter: object}}\n */\nGraphCardMetric.propTypes = {\n  metricFilter: PropTypes.shape({\n    id: PropTypes.oneOf([...Object.values(rhsmConstants.RHSM_API_PATH_METRIC_TYPES)])\n  }),\n  useProductGraphConfig: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphConfig: Function, metricFilter: object}}\n */\nGraphCardMetric.defaultProps = {\n  metricFilter: {},\n  useProductGraphConfig\n};\n\nexport { GraphCardMetric as default, GraphCardMetric };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter, CardTitle, Flex, FlexItem } from '@patternfly/react-core';\nimport moment from 'moment';\nimport _camelCase from 'lodash/camelCase';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useMetricsSelector } from './graphCardContext';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { Loader, SkeletonSize } from '../loader/loader';\nimport { dateHelpers, helpers } from '../../common';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldRangedMonthly';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Display totals for a single metric.\n *\n * @param {object} props\n * @param {Node} props.children\n * @param {Function} props.t\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardMetricTotals = ({\n  children,\n  t,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate } = useAliasProductGraphTallyQuery();\n  const { pending, error, fulfilled, dataSets = [] } = useAliasMetricsSelector();\n  const { data = [], id: metricId, meta = {} } = dataSets[0] || {};\n  const { date: lastDate, hasData: lastHasData, y: lastValue } = data[data.length - 1] || {};\n  const {\n    date: currentDate,\n    hasData: currentHasData,\n    y: currentValue\n  } = data.find(({ isCurrentDate }) => isCurrentDate === true) || {};\n\n  const { totalMonthlyDate: monthlyDate, totalMonthlyHasData: monthlyHasData, totalMonthlyValue: monthlyValue } = meta;\n\n  const { title: selectedMonth, isCurrent } =\n    toolbarFieldOptions.find(\n      option => option.title === startDate || option.value.startDate.toISOString() === startDate\n    ) || {};\n\n  const dailyDate = isCurrent ? currentDate : lastDate;\n  const dailyHasData = isCurrent ? currentHasData : lastHasData;\n  const dailyValue = isCurrent ? currentValue : lastValue;\n\n  return (\n    <Flex data-test={`graphMetricTotals-${_camelCase(metricId)}`} className=\"curiosity-usage-graph__totals\">\n      <Flex flex={{ default: 'flex_1' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-column\">\n          <Card\n            data-test=\"graphDailyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric_dailyTotal', {\n                context: metricId,\n                month: selectedMonth\n              })}\n            </CardTitle>\n            <MinHeight key=\"currentBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric_total',\n                      {\n                        context: (dailyHasData && metricId) || '',\n                        total: helpers\n                          .numberDisplay(dailyValue)\n                          ?.format({\n                            average: true,\n                            mantissa: 5,\n                            trimMantissa: true,\n                            lowPrecision: false\n                          })\n                          ?.toUpperCase()\n                      },\n                      [<strong title={dailyValue} aria-label={dailyValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"currentFooter\">\n              <CardFooter>\n                <div className={(!dailyHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    dailyDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(dailyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n          <Card\n            data-test=\"graphMonthlyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric_monthlyTotal', {\n                context: metricId,\n                month: selectedMonth\n              })}\n            </CardTitle>\n            <MinHeight key=\"totalMonthlyBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric_total',\n                      {\n                        context: (monthlyHasData && metricId) || '',\n                        total: helpers\n                          .numberDisplay(monthlyValue)\n                          ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: false })\n                          ?.toUpperCase()\n                      },\n                      [<strong title={monthlyValue} aria-label={monthlyValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"totalMonthlyFooter\">\n              <CardFooter>\n                <div className={(!monthlyHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    monthlyDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(monthlyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n        </FlexItem>\n      </Flex>\n      <Flex flex={{ default: 'flex_3' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-graph-column\">{children}</FlexItem>\n      </Flex>\n    </Flex>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.propTypes = {\n  children: PropTypes.node,\n  t: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.defaultProps = {\n  children: null,\n  t: translate,\n  useMetricsSelector,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardMetricTotals as default, GraphCardMetricTotals };\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { GraphCardChart } from './graphCardChart';\nimport { useProductGraphConfig } from '../productView/productViewContext';\nimport { GraphCardContext } from './graphCardContext';\nimport { rhsmConstants } from '../../services/rhsm/rhsmConstants';\n\n/**\n * Display a single graph metric.\n *\n * @param {object} props\n * @param {Array} props.metricFilters\n * @param {Function} props.useProductGraphConfig\n * @returns {Node}\n */\nconst GraphCardMetrics = ({ metricFilters, useProductGraphConfig: useAliasProductGraphConfig }) => {\n  const [context, setContext] = useState({});\n  const { settings } = useAliasProductGraphConfig();\n\n  useEffect(() => {\n    setContext({\n      settings: {\n        ...settings,\n        isStandalone: false,\n        metric: undefined,\n        metrics: metricFilters\n      }\n    });\n  }, [metricFilters, settings, setContext]);\n\n  return (\n    <GraphCardContext.Provider value={context}>\n      <GraphCardChart />\n    </GraphCardContext.Provider>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphConfig: Function, metricFilters: Array}}\n */\nGraphCardMetrics.propTypes = {\n  metricFilters: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.oneOf([...Object.values(rhsmConstants.RHSM_API_PATH_METRIC_TYPES)])\n    })\n  ),\n  useProductGraphConfig: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphConfig: Function, metricFilters: Array}}\n */\nGraphCardMetrics.defaultProps = {\n  metricFilters: [],\n  useProductGraphConfig\n};\n\nexport { GraphCardMetrics as default, GraphCardMetrics };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { helpers } from '../../common';\n\n/**\n * Set a min-height to prevent page jump component.\n *\n * @augments React.Component\n * @fires onResizeContainer\n */\nclass MinHeight extends React.Component {\n  containerRef = React.createRef();\n\n  innerContainerRef = React.createRef();\n\n  updatedContainerWidth = 0;\n\n  resizeObserver = helpers.noop;\n\n  componentDidMount() {\n    const { updateOnResize } = this.props;\n    window.setTimeout(() => {\n      this.setMinHeight();\n    });\n\n    if (updateOnResize) {\n      this.setResizeObserver();\n    }\n  }\n\n  componentDidUpdate() {\n    const { updateOnContent } = this.props;\n\n    if (updateOnContent) {\n      window.setTimeout(() => {\n        this.setMinHeight();\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.resizeObserver();\n  }\n\n  /**\n   * On resize adjust graph display.\n   *\n   * @event onResizeContainer\n   */\n  onResizeContainer = () => {\n    const { updatedContainerWidth } = this;\n    const { updateOnResize } = this.props;\n    const clientWidth = this.containerRef?.current?.clientWidth || 0;\n\n    if (updateOnResize && clientWidth !== updatedContainerWidth) {\n      this.updatedContainerWidth = clientWidth;\n      this.setMinHeight(true);\n    }\n  };\n\n  /**\n   * Set minHeight on mount or update.\n   *\n   * @param {boolean} reset\n   */\n  setMinHeight(reset = false) {\n    const { minHeight: overrideMinHeight } = this.props;\n    const { current: domElement = {} } = this.containerRef;\n    const { current: innerDomElement = {} } = this.innerContainerRef;\n\n    if (domElement?.style) {\n      let clientHeight;\n\n      if (reset) {\n        clientHeight = innerDomElement?.clientHeight || 0;\n      } else {\n        clientHeight = domElement?.clientHeight || 0;\n      }\n\n      if (overrideMinHeight > clientHeight) {\n        clientHeight = overrideMinHeight;\n      }\n\n      domElement.style.minHeight = `${clientHeight}px`;\n    }\n  }\n\n  /**\n   * Set ResizeObserver for scenarios when min-height needs to be updated.\n   */\n  setResizeObserver() {\n    window.addEventListener('resize', this.onResizeContainer);\n    this.resizeObserver = () => window.removeEventListener('resize', this.onResizeContainer);\n  }\n\n  /**\n   * Render a min-height div with children.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { children } = this.props;\n\n    return (\n      <div className=\"curiosity-minheight\" ref={this.containerRef}>\n        <div ref={this.innerContainerRef}>{children}</div>\n      </div>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{minHeight: number, children: Node, updateOnContent: boolean, updateOnResize: boolean}}\n */\nMinHeight.propTypes = {\n  updateOnContent: PropTypes.bool,\n  updateOnResize: PropTypes.bool,\n  children: PropTypes.node.isRequired,\n  minHeight: PropTypes.number\n};\n\n/**\n * Default props.\n *\n * @type {{minHeight: number, updateOnContent: boolean, updateOnResize: boolean}}\n */\nMinHeight.defaultProps = {\n  updateOnContent: false,\n  updateOnResize: true,\n  minHeight: 0\n};\n\nexport { MinHeight as default, MinHeight };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = dateHelpers.getRangedMonthDateTime().listDateTimeRanges.map(dateTime => ({\n  ...dateTime,\n  selected: false\n}));\n\n/**\n * On select update granularity.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value } = {}) => {\n    const { startDate, endDate } = value;\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: FIELD_TYPES.DAILY\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate?.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate?.toISOString()\n      }\n    ]);\n  };\n};\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {Array} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst ToolbarFieldRangedMonthly = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_TYPES.START_DATE]: updatedValue } = useAliasProductGraphTallyQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({\n    ...option,\n    selected: option.title === updatedValue || option.value.startDate.toISOString() === updatedValue\n  }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'rangedMonthly' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'rangedMonthly' })}\n      position={position}\n      maxHeight={250}\n      data-test=\"toolbarFieldRangeGranularity\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldRangedMonthly.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldRangedMonthly.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductGraphTallyQuery\n};\n\nexport { ToolbarFieldRangedMonthly as default, ToolbarFieldRangedMonthly, toolbarFieldOptions, useOnSelect };\n"],"names":["SelectDirection","DropdownDirection","SelectPosition","DropdownPosition","Select","state","isExpanded","options","selected","selectField","React","onSelect","event","titleSelection","props","id","name","variant","updatedOptions","optionsIndex","findIndex","option","title","SelectVariant","forEach","index","updateSelected","filter","opt","map","setState","mockUpdatedOptions","_cloneDeep","mockTarget","value","selectedIndex","type","checked","mockEvent","target","currentTarget","persist","helpers","onToggle","expanded","this","formatOptions","prevProps","selectedOptions","_isEqual","current","domElement","dataAttributes","Object","entries","key","test","_isPlainObject","activateOptions","isSelected","convertedOption","text","textContent","label","_findIndex","find","activeOption","values","includes","parentRef","setAttribute","ariaLabel","className","direction","isDisabled","isToggleText","maxHeight","placeholder","position","toggleIcon","pfSelectOptions","length","menuAppendTo","selections","isOpen","placeholderText","ref","window","btoa","JSON","stringify","defaultProps","down","left","GraphCard","filters","useAliasProductGraphConfig","useProductGraphConfig","graphCardHelpers","groupedFilters","standaloneFilters","GraphCardMetrics","metricFilters","metricFilter","GraphCardMetric","useState","context","setContext","settings","useEffect","padding","bottom","right","top","isStandalone","metric","metrics","GraphCardContext","GraphCardMetricTotals","GraphCardChart","children","t","useAliasMetricsSelector","useMetricsSelector","startDate","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","RHSM_API_QUERY_SET_TYPES","pending","error","fulfilled","dataSets","data","metricId","meta","lastDate","date","lastHasData","hasData","lastValue","y","isCurrentDate","currentDate","currentHasData","currentValue","monthlyDate","totalMonthlyDate","monthlyHasData","totalMonthlyHasData","monthlyValue","totalMonthlyValue","toolbarFieldOptions","toISOString","selectedMonth","isCurrent","dailyDate","dailyHasData","dailyValue","Flex","_camelCase","flex","default","alignSelf","FlexItem","Card","CardTitle","month","MinHeight","CardBody","Loader","skeletonProps","size","SkeletonSize","total","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","CardFooter","moment","dateHelpers","translate","undefined","containerRef","innerContainerRef","updatedContainerWidth","resizeObserver","onResizeContainer","updateOnResize","clientWidth","setMinHeight","setTimeout","setResizeObserver","updateOnContent","clientHeight","reset","overrideMinHeight","minHeight","innerDomElement","style","addEventListener","removeEventListener","listDateTimeRanges","dateTime","useOnSelect","useDispatch","useAliasDispatch","storeHooks","useProduct","useAliasProduct","viewId","dispatch","endDate","reduxTypes","RHSM_API_QUERY_TYPES","FIELD_TYPES","ToolbarFieldRangedMonthly","isFilter","useAliasOnSelect","updatedValue"],"sourceRoot":""}