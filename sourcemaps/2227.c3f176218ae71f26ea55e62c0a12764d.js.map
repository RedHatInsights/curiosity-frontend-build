{"version":3,"file":"js/2227.3444cdde2693a5d1a625.js","mappings":"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","sources":["webpack:///./src/components/toolbar/toolbar.js","webpack:///./src/components/toolbar/toolbarContext.js","webpack:///./src/components/toolbar/toolbarFieldGroupVariant.js","webpack:///./src/components/toolbar/toolbarFilter.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Toolbar as PfToolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup\n} from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport { useProductToolbarQuery } from '../productView/productViewContext';\nimport { useToolbarFieldClear, useToolbarFieldClearAll, useToolbarFields } from './toolbarContext';\nimport { ToolbarFilter } from './toolbarFilter';\nimport { ToolbarFieldGroupVariant } from './toolbarFieldGroupVariant';\nimport { ToolbarFieldSelectCategory, useSelectCategoryOptions } from './toolbarFieldSelectCategory';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Primary view toolbar.\n *\n * @memberof Components\n * @module Toolbar\n * @property {module} ToolbarContext\n * @property {module} ToolbarFieldBillingProvider\n * @property {module} ToolbarFieldCategory\n * @property {module} ToolbarFieldDisplayName\n * @property {module} ToolbarFieldGranularity\n * @property {module} ToolbarFieldRangedMonthly\n * @property {module} ToolbarFieldSelectCategory\n * @property {module} ToolbarFieldSla\n * @property {module} ToolbarFieldUom\n * @property {module} ToolbarFieldUsage\n * @property {module} ToolbarFieldVariant\n */\n\n/**\n * Application filter toolbar.\n *\n * @fires onClearFilter\n * @fires onClearAll\n * @param {object} props\n * @param {boolean} props.hardFilterReset On clearing all fields allow the category to reset as well.\n * @param {boolean} props.isDisabled\n * @param {boolean} props.isGroupVariantDisabled\n * @param {Function} props.t\n * @param {Function} props.useProductToolbarQuery\n * @param {Function} props.useSelectCategoryOptions\n * @param {Function} props.useToolbarFieldClear\n * @param {Function} props.useToolbarFieldClearAll\n * @param {Function} props.useToolbarFields\n * @returns {React.ReactNode}\n */\nconst Toolbar = ({\n  hardFilterReset,\n  isDisabled,\n  isGroupVariantDisabled,\n  t,\n  useProductToolbarQuery: useAliasProductToolbarQuery,\n  useSelectCategoryOptions: useAliasSelectCategoryOptions,\n  useToolbarFieldClear: useAliasToolbarFieldClear,\n  useToolbarFieldClearAll: useAliasToolbarFieldClearAll,\n  useToolbarFields: useAliasToolbarFields\n}) => {\n  const toolbarFieldQueries = useAliasProductToolbarQuery();\n  const { currentCategory, options } = useAliasSelectCategoryOptions();\n  const clearField = useAliasToolbarFieldClear();\n  const clearAllFields = useAliasToolbarFieldClearAll();\n  const { itemFields, secondaryFields } = useAliasToolbarFields();\n\n  if (isDisabled || (isGroupVariantDisabled && !options?.length && !secondaryFields?.length)) {\n    return null;\n  }\n\n  if (!isGroupVariantDisabled && !options?.length && !secondaryFields?.length) {\n    return <ToolbarFieldGroupVariant isStandalone />;\n  }\n\n  /**\n   * Clear a specific value\n   *\n   * @event onClearFilter\n   * @param {object} params\n   * @param {*} params.value\n   * @returns {void}\n   */\n  const onClearFilter = ({ value }) => clearField(value);\n\n  /**\n   * Clear all active filters.\n   *\n   * @event onClearAll\n   * @returns {void}\n   */\n  const onClearAll = () => clearAllFields(hardFilterReset);\n\n  /**\n   * Set selected options for chip display.\n   *\n   * @param {object} params\n   * @param {*} params.value\n   * @returns {Array}\n   */\n  const setSelectedOptions = ({ value: filterName } = {}) => {\n    const filterValue = toolbarFieldQueries?.[filterName];\n    return (\n      (typeof filterValue === 'string' && [\n        t('curiosity-toolbar.label', { context: [filterName, (filterValue === '' && 'none') || filterValue] })\n      ]) ||\n      []\n    );\n  };\n\n  return (\n    <PfToolbar\n      id=\"curiosity-toolbar\"\n      className=\"curiosity-toolbar pf-m-toggle-group-container ins-c-primary-toolbar\"\n      collapseListedFiltersBreakpoint=\"sm\"\n      clearAllFilters={onClearAll}\n      clearFiltersButtonText={t('curiosity-toolbar.clearFilters')}\n    >\n      {!isGroupVariantDisabled && <ToolbarFieldGroupVariant />}\n      <ToolbarContent>\n        <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"md\">\n          <ToolbarGroup variant=\"filter-group\">\n            {options.length > 1 && (\n              <ToolbarItem>\n                <ToolbarFieldSelectCategory />\n              </ToolbarItem>\n            )}\n            {options.map(({ title, value: filterName, component: OptionComponent, isClearable }) => {\n              const chipProps = { categoryName: title };\n\n              if (isClearable !== false) {\n                chipProps.chips = setSelectedOptions({ value: filterName });\n                chipProps.deleteChip = () => onClearFilter({ value: filterName });\n              }\n\n              return (\n                <ToolbarFilter\n                  key={filterName}\n                  showToolbarItem={currentCategory === filterName || options.length === 1}\n                  {...chipProps}\n                >\n                  <OptionComponent isFilter />\n                </ToolbarFilter>\n              );\n            })}\n          </ToolbarGroup>\n        </ToolbarToggleGroup>\n        <ToolbarGroup key=\"itemFields\">{itemFields}</ToolbarGroup>\n        <ToolbarGroup key=\"secondaryFields\" alignment={{ default: 'alignRight' }}>\n          {secondaryFields}\n        </ToolbarGroup>\n      </ToolbarContent>\n    </PfToolbar>\n  );\n};\n\n/**\n * Prop types\n *\n * @type {{useToolbarFieldClear: Function, t: Function, useSelectCategoryOptions: Function, hardFilterReset: boolean,\n *     useToolbarFields: Function, isGroupVariantDisabled: boolean, useProductToolbarQuery: Function, isDisabled: boolean,\n *     useToolbarFieldClearAll: Function}}\n */\nToolbar.propTypes = {\n  hardFilterReset: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  isGroupVariantDisabled: PropTypes.bool,\n  t: PropTypes.func,\n  useProductToolbarQuery: PropTypes.func,\n  useSelectCategoryOptions: PropTypes.func,\n  useToolbarFieldClear: PropTypes.func,\n  useToolbarFieldClearAll: PropTypes.func,\n  useToolbarFields: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useToolbarFieldClear: Function, t: translate, useSelectCategoryOptions: Function, hardFilterReset: boolean,\n *     useToolbarFields: Function, isGroupVariantDisabled: boolean, useProductToolbarQuery: Function, isDisabled: boolean,\n *     useToolbarFieldClearAll: Function}}\n */\nToolbar.defaultProps = {\n  hardFilterReset: false,\n  isDisabled: helpers.UI_DISABLED_TOOLBAR,\n  isGroupVariantDisabled: helpers.UI_DISABLED_TOOLBAR_GROUP_VARIANT,\n  t: translate,\n  useProductToolbarQuery,\n  useSelectCategoryOptions,\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFields\n};\n\nexport { Toolbar as default, Toolbar };\n","import React, { useMemo } from 'react';\nimport { ToolbarItem } from '@patternfly/react-core';\nimport { useProductQuery, useProductToolbarConfig } from '../productView/productViewContext';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { useOnSelect as useSelectCategoryOnSelect, toolbarFieldOptions } from './toolbarFieldSelectCategory';\nimport { useOnSelect as useBillingProviderOnSelect } from './toolbarFieldBillingProvider';\nimport { useOnSelect as useCategoryOnSelect } from './toolbarFieldCategory';\nimport { useOnSelect as useSlaOnSelect } from './toolbarFieldSla';\nimport { useOnSelect as useUsageOnSelect } from './toolbarFieldUsage';\nimport { useOnSelect as useVariantOnSelect } from './toolbarFieldVariant';\nimport { helpers } from '../../common/helpers';\n\n/**\n * @memberof Toolbar\n * @module ToolbarContext\n */\n\n/**\n * Clear a specific toolbar category using a select component's OnSelect hook.\n *\n * @param {object} options\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useCategoryOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @param {Function} options.useVariantOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClear = ({\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useCategoryOnSelect: useAliasCategoryOnSelect = useCategoryOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect,\n  useVariantOnSelect: useAliasVariantOnSelect = useVariantOnSelect\n} = {}) => {\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const categoryOnSelect = useAliasCategoryOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n  const variantOnSelect = useAliasVariantOnSelect();\n\n  return field => {\n    switch (field) {\n      case RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER:\n        billingOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.CATEGORY:\n        categoryOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.SLA:\n        slaOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.USAGE:\n        usageOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.VARIANT:\n        variantOnSelect();\n        break;\n      default:\n        break;\n    }\n  };\n};\n\n/**\n * Clear all available toolbar categories.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useSelectCategoryOnSelect\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useCategoryOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @param {Function} options.useVariantOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClearAll = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useSelectCategoryOnSelect: useAliasSelectCategoryOnSelect = useSelectCategoryOnSelect,\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useCategoryOnSelect: useAliasCategoryOnSelect = useCategoryOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect,\n  useVariantOnSelect: useAliasVariantOnSelect = useVariantOnSelect\n} = {}) => {\n  const {\n    [RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER]: billingProvider,\n    [RHSM_API_QUERY_SET_TYPES.CATEGORY]: category,\n    [RHSM_API_QUERY_SET_TYPES.SLA]: sla,\n    [RHSM_API_QUERY_SET_TYPES.USAGE]: usage,\n    [RHSM_API_QUERY_SET_TYPES.VARIANT]: variant\n  } = useAliasProductQuery();\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const categoryOnSelect = useAliasCategoryOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n  const selectCategoryOnSelect = useAliasSelectCategoryOnSelect();\n  const variantOnSelect = useAliasVariantOnSelect();\n\n  return hardFilterReset => {\n    if (typeof billingProvider === 'string') {\n      billingOnSelect();\n    }\n\n    if (typeof category === 'string') {\n      categoryOnSelect();\n    }\n\n    if (typeof sla === 'string') {\n      slaOnSelect();\n    }\n\n    if (typeof usage === 'string') {\n      usageOnSelect();\n    }\n\n    if (typeof variant === 'string') {\n      variantOnSelect();\n    }\n\n    if (hardFilterReset) {\n      selectCategoryOnSelect();\n    }\n  };\n};\n\n/**\n * Return lists of item and secondary toolbar fields for display.\n *\n * @param {object} options\n * @param {Array} options.categoryOptions\n * @param {Function} options.useProductToolbarConfig\n * @returns {Array}\n */\nconst useToolbarFields = ({\n  categoryOptions = toolbarFieldOptions,\n  useProductToolbarConfig: useAliasProductToolbarConfig = useProductToolbarConfig\n} = {}) => {\n  const { filters = [] } = useAliasProductToolbarConfig();\n\n  return useMemo(() => {\n    const setFilter = ({ id, content, ...filterProps }) => {\n      const option = categoryOptions.find(({ value: categoryOptionValue }) => id === categoryOptionValue);\n      const { component: OptionComponent } = option || {};\n\n      return (\n        (OptionComponent && (\n          <ToolbarItem key={`option-${id}`}>\n            <OptionComponent isFilter={false} {...filterProps} />\n          </ToolbarItem>\n        )) || (\n          <ToolbarItem key={id || helpers.generateId()}>\n            {typeof content === 'function' ? content() : content}\n          </ToolbarItem>\n        ) ||\n        null\n      );\n    };\n\n    return {\n      itemFields: filters.filter(({ isItem }) => isItem === true).map(setFilter),\n      secondaryFields: filters.filter(({ isSecondary }) => isSecondary === true).map(setFilter)\n    };\n  }, [categoryOptions, filters]);\n};\n\nconst context = {\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFields\n};\n\nexport { context as default, context, useToolbarFieldClear, useToolbarFieldClearAll, useToolbarFields };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Toolbar as PfToolbar, ToolbarContent, ToolbarItem, ToolbarItemVariant } from '@patternfly/react-core';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport { translate } from '../i18n/i18n';\nimport { routerContext } from '../router';\n\n/**\n * A toolbar product configuration select filter requiring a toolbar component parent.\n *\n * @memberof Toolbar\n * @module ToolbarFieldGroupVariant\n */\n\n/**\n * Generate select field options from config. Sorted by title string.\n *\n * @param {object} options\n * @param {Function} options.t\n * @param {Function} options.useRouteDetail\n * @returns {Function}\n */\nconst useToolbarFieldOptions = ({\n  t = translate,\n  useRouteDetail: useAliasRouteDetail = routerContext.useRouteDetail\n} = {}) => {\n  const { availableVariants, firstMatch } = useAliasRouteDetail();\n  const options = [];\n\n  availableVariants?.forEach(variant => {\n    options.push({\n      title: t('curiosity-toolbar.label', { context: ['groupVariant', variant] }),\n      value: variant,\n      selected: variant === firstMatch?.productId\n    });\n  });\n\n  return options.sort(({ title: titleA }, { title: titleB }) => titleA.localeCompare(titleB));\n};\n\n/**\n * On select update.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productGroup } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.app.SET_PRODUCT_VARIANT_QUERY_RESET_ALL,\n        productGroup\n      },\n      {\n        type: reduxTypes.app.SET_PRODUCT_VARIANT,\n        variant: value,\n        productGroup\n      }\n    ]);\n  };\n};\n\n/**\n * Display a product configuration field with generated options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {boolean} props.isStandalone\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProduct\n * @param {Function} props.useSelector\n * @param {Function} props.useToolbarFieldOptions\n * @returns {React.ReactNode}\n */\nconst ToolbarFieldGroupVariant = ({\n  isFilter,\n  isStandalone,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProduct: useAliasProduct,\n  useSelector: useAliasSelector,\n  useToolbarFieldOptions: useAliasToolbarFieldOptions\n}) => {\n  const { productGroup } = useAliasProduct();\n  const updatedValue = useAliasSelector(({ view }) => view?.product?.variant?.[productGroup], null);\n  const onSelect = useAliasOnSelect();\n  const options = useAliasToolbarFieldOptions();\n  const updatedOptions = options.map(option => ({\n    ...option,\n    selected: (updatedValue && option.value === updatedValue) || option?.selected\n  }));\n\n  if (options?.length <= 1) {\n    return null;\n  }\n\n  const element = (\n    <ToolbarContent>\n      <ToolbarItem variant={ToolbarItemVariant.label}>\n        {t('curiosity-toolbar.label', { context: ['groupVariant'] })}{' '}\n      </ToolbarItem>\n      <Select\n        aria-label={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'groupVariant'] })}\n        onSelect={onSelect}\n        options={updatedOptions}\n        selectedOptions={updatedValue}\n        placeholder={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'groupVariant'] })}\n        position={position}\n        data-test=\"toolbarFieldGroupVariant\"\n      />\n    </ToolbarContent>\n  );\n\n  return (\n    (isStandalone && (\n      <PfToolbar\n        id=\"curiosity-toolbar\"\n        className=\"curiosity-toolbar pf-m-toggle-group-container ins-c-primary-toolbar\"\n        collapseListedFiltersBreakpoint=\"sm\"\n      >\n        {element}\n      </PfToolbar>\n    )) ||\n    element\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, useProduct: Function, t: Function, useSelector: Function, isFilter: boolean,\n *     isStandalone: boolean, position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldGroupVariant.propTypes = {\n  isFilter: PropTypes.bool,\n  isStandalone: PropTypes.bool,\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProduct: PropTypes.func,\n  useSelector: PropTypes.func,\n  useToolbarFieldOptions: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, useProduct: Function, t: translate, useSelector: Function, isFilter: boolean,\n *     isStandalone: boolean, position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldGroupVariant.defaultProps = {\n  isFilter: false,\n  isStandalone: false,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProduct,\n  useSelector: storeHooks.reactRedux.useSelector,\n  useToolbarFieldOptions\n};\n\nexport { ToolbarFieldGroupVariant as default, ToolbarFieldGroupVariant, useOnSelect, useToolbarFieldOptions };\n","import React, { useContext, useEffect, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { useMount } from 'react-use';\nimport { ToolbarItem, Chip, ChipGroup, ToolbarContentContext, ToolbarContext } from '@patternfly/react-core';\nimport { helpers } from '../../common/helpers';\n\n/**\n * ToolbarFilter, wrapper component for Patternfly ToolbarFilter.\n *\n * @memberof Toolbar\n * @module ToolbarFilter\n */\n\n/**\n * Hook for ToolbarContentContext\n *\n * @returns {{ chipContainerRef: any }}\n */\nconst useToolbarContentContext = () => useContext(ToolbarContentContext);\n\n/**\n * Hook for ToolbarContext\n *\n * @returns {{ isExpanded: boolean, chipGroupContentRef: any, updateNumberFilters: Function }}\n */\nconst useToolbarContext = () => useContext(ToolbarContext);\n\n/**\n * FixMe: PF-React-Core v4 & v5 ToolbarFilter should conditional check \"firstElementChild\".\n * This line inside of ToolbarFilter, https://github.com/patternfly/patternfly-react/blob/v4/packages/react-core/src/components/Toolbar/ToolbarFilter.tsx#L130\n * creates an application error, adding optional chaining and a conditional check for \"firstElementChild\"\n * removes the application error. It is beyond our current scope to determine if there are additional\n * PF Toolbar issues.\n */\n/**\n * Converted PF ToolbarFilter replacement with conditional \"firstElementChild\".\n *\n * @param {object} props\n * @param {string|object} props.categoryName\n * @param {string} props.chipGroupCollapsedText\n * @param {string} props.chipGroupExpandedText\n * @param {Array} props.chips\n * @param {React.ReactNode} props.children\n * @param {Function} props.deleteChip\n * @param {Function} props.deleteChipGroup\n * @param {boolean} props.showToolbarItem\n * @param {Function} props.useToolbarContentContext\n * @param {Function} props.useToolbarContext\n * @returns {React.ReactNode}\n */\nconst ToolbarFilter = ({\n  categoryName,\n  chipGroupCollapsedText,\n  chipGroupExpandedText,\n  chips,\n  children,\n  deleteChip,\n  deleteChipGroup,\n  showToolbarItem,\n  useToolbarContentContext: useAliasToolbarContentContext,\n  useToolbarContext: useAliasToolbarContext,\n  ...props\n}) => {\n  const [isMounted, setIsMounted] = useState(false);\n  const { isExpanded, chipGroupContentRef, updateNumberFilters = helpers.noop } = useAliasToolbarContext();\n  const { chipContainerRef } = useAliasToolbarContentContext();\n  const { key: normalizedCategoryKey, name: normalizedCategoryName } =\n    (typeof categoryName === 'string' && { key: categoryName, name: categoryName }) || categoryName;\n\n  useMount(() => {\n    setIsMounted(true);\n  });\n\n  useEffect(() => {\n    updateNumberFilters(normalizedCategoryKey, chips.length);\n  }, [normalizedCategoryKey, chips, updateNumberFilters]);\n\n  let chipGroup;\n\n  if (chips.length) {\n    const chipGroupProps = { isClosable: false };\n\n    if (deleteChipGroup) {\n      chipGroupProps.onClick = () => deleteChipGroup(categoryName);\n      chipGroupProps.isClosable = true;\n    }\n\n    if (chipGroupCollapsedText) {\n      chipGroupProps.collapsedText = chipGroupCollapsedText;\n    }\n\n    if (chipGroupExpandedText) {\n      chipGroupProps.expandedText = chipGroupExpandedText;\n    }\n\n    chipGroup = (\n      <ToolbarItem variant=\"chip-group\">\n        <ChipGroup key={normalizedCategoryKey} categoryName={normalizedCategoryName} {...chipGroupProps}>\n          {chips.map(chip => {\n            const normalizedChip = (typeof chip === 'string' && { key: chip, node: chip }) || chip;\n            return (\n              <Chip key={normalizedChip.key} onClick={() => deleteChip(normalizedCategoryKey, normalizedChip)}>\n                {normalizedChip.node}\n              </Chip>\n            );\n          })}\n        </ChipGroup>\n      </ToolbarItem>\n    );\n  }\n\n  const portalRef =\n    (!isExpanded && isMounted && chipGroupContentRef?.current?.firstElementChild) || chipContainerRef?.current;\n\n  return (\n    <React.Fragment>\n      {showToolbarItem && <ToolbarItem {...props}>{children}</ToolbarItem>}\n      {portalRef && createPortal(chipGroup, portalRef)}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{deleteChip: Function, chips: Array, deleteChipGroup: Function, children: React.ReactNode,\n *     chipGroupCollapsedText: string, useToolbarContext: Function, categoryName: string|object,\n *     chipGroupExpandedText: string, showToolbarItem: boolean, useToolbarContentContext: Function}}\n */\nToolbarFilter.propTypes = {\n  categoryName: PropTypes.string.isRequired,\n  children: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,\n  chipGroupCollapsedText: PropTypes.string,\n  chipGroupExpandedText: PropTypes.string,\n  chips: PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.string, PropTypes.shape({ key: PropTypes.string, node: PropTypes.string })])\n  ),\n  deleteChip: PropTypes.func,\n  deleteChipGroup: PropTypes.func,\n  showToolbarItem: PropTypes.bool,\n  useToolbarContentContext: PropTypes.func,\n  useToolbarContext: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{deleteChip: Function, chips: Array, deleteChipGroup: Function, chipGroupCollapsedText: null,\n *     useToolbarContext: Function, chipGroupExpandedText: null, showToolbarItem: boolean,\n *     useToolbarContentContext: Function}}\n */\nToolbarFilter.defaultProps = {\n  chipGroupCollapsedText: null,\n  chipGroupExpandedText: null,\n  chips: [],\n  deleteChip: helpers.noop,\n  deleteChipGroup: null,\n  showToolbarItem: true,\n  useToolbarContentContext,\n  useToolbarContext\n};\n\nexport { ToolbarFilter as default, ToolbarFilter, useToolbarContentContext, useToolbarContext };\n"],"names":["Toolbar","_ref","hardFilterReset","isDisabled","isGroupVariantDisabled","t","useProductToolbarQuery","useAliasProductToolbarQuery","useSelectCategoryOptions","useAliasSelectCategoryOptions","useToolbarFieldClear","useAliasToolbarFieldClear","useToolbarFieldClearAll","useAliasToolbarFieldClearAll","useToolbarFields","useAliasToolbarFields","toolbarFieldQueries","currentCategory","options","clearField","clearAllFields","itemFields","secondaryFields","length","React","PfToolbar","id","className","collapseListedFiltersBreakpoint","clearAllFilters","onClearAll","clearFiltersButtonText","ToolbarFieldGroupVariant","ToolbarContent","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarGroup","variant","ToolbarItem","ToolbarFieldSelectCategory","map","_ref3","title","value","filterName","component","OptionComponent","isClearable","chipProps","categoryName","chips","arguments","undefined","filterValue","context","setSelectedOptions","deleteChip","_ref2","onClearFilter","ToolbarFilter","_extends","key","showToolbarItem","isFilter","alignment","default","isStandalone","propTypes","PropTypes","defaultProps","helpers","translate","useBillingProviderOnSelect","useAliasBillingProviderOnSelect","useCategoryOnSelect","useAliasCategoryOnSelect","useSlaOnSelect","useAliasSlaOnSelect","useUsageOnSelect","useAliasUsageOnSelect","useVariantOnSelect","useAliasVariantOnSelect","billingOnSelect","categoryOnSelect","slaOnSelect","usageOnSelect","variantOnSelect","field","RHSM_API_QUERY_SET_TYPES","useProductQuery","useAliasProductQuery","useSelectCategoryOnSelect","useAliasSelectCategoryOnSelect","billingProvider","category","sla","usage","selectCategoryOnSelect","categoryOptions","toolbarFieldOptions","useProductToolbarConfig","useAliasProductToolbarConfig","filters","useMemo","setFilter","content","filterProps","option","find","categoryOptionValue","concat","filter","isItem","_ref4","isSecondary","useToolbarFieldOptions","useRouteDetail","useAliasRouteDetail","routerContext","availableVariants","firstMatch","forEach","push","selected","productId","sort","titleA","titleB","localeCompare","useOnSelect","useDispatch","useAliasDispatch","storeHooks","useProduct","useAliasProduct","productGroup","dispatch","type","reduxTypes","position","useAliasOnSelect","useSelector","useAliasSelector","useAliasToolbarFieldOptions","updatedValue","_view$product","_view$product$variant","view","product","onSelect","updatedOptions","element","ToolbarItemVariant","Select","selectedOptions","placeholder","SelectPosition","useToolbarContentContext","useContext","ToolbarContentContext","useToolbarContext","ToolbarContext","_chipGroupContentRef$","chipGroupCollapsedText","chipGroupExpandedText","children","deleteChipGroup","useAliasToolbarContentContext","useAliasToolbarContext","props","isMounted","setIsMounted","useState","isExpanded","chipGroupContentRef","updateNumberFilters","chipContainerRef","normalizedCategoryKey","name","normalizedCategoryName","chipGroup","useMount","useEffect","chipGroupProps","isClosable","onClick","collapsedText","expandedText","ChipGroup","chip","normalizedChip","node","Chip","portalRef","current","firstElementChild","createPortal","isRequired"],"sourceRoot":""}