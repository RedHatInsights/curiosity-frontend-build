{"version":3,"file":"js/9877.6471af78c562cfbb903e.js","mappings":"kRAgBMA,EAAkB,SAAC,GAAwE,IAAtEC,EAAsE,EAAtEA,aAAqCC,EAAiC,EAAxDC,sBAAwD,GACjEC,EAAAA,EAAAA,UAAS,IADwD,eACxFC,EADwF,KAC/EC,EAD+E,KAEvFC,EAAaL,IAAbK,SAmBR,OAjBAC,EAAAA,EAAAA,YAAU,WACRF,EAAW,CACTC,UAAU,gBACRE,QAAS,CACPC,OAAQ,GACRC,KAAM,GACNC,MAAO,GACPC,IAAK,KAEJN,GAPG,IAQNO,cAAc,EACdC,OAAQd,EACRe,QAAS,CAACf,SAGb,CAACA,EAAcM,EAAUD,IAG1B,kBAAC,EAAAW,iBAAA,SAAD,CAA2BC,MAAOb,GAChC,kBAAC,EAAAc,sBAAD,KACE,kBAAC,EAAAC,eAAD,SAuBRpB,EAAgBqB,aAAe,CAC7BpB,aAAc,GACdE,sBAAAA,EAAAA","sources":["webpack:///./src/components/graphCard/graphCardMetric.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { GraphCardChart } from './graphCardChart';\nimport { useProductGraphConfig } from '../productView/productViewContext';\nimport { GraphCardContext } from './graphCardContext';\nimport { rhsmConstants } from '../../services/rhsm/rhsmConstants';\nimport { GraphCardMetricTotals } from './graphCardMetricTotals';\n\n/**\n * Display a single graph metric.\n *\n * @param {object} props\n * @param {object} props.metricFilter\n * @param {Function} props.useProductGraphConfig\n * @returns {Node}\n */\nconst GraphCardMetric = ({ metricFilter, useProductGraphConfig: useAliasProductGraphConfig }) => {\n  const [context, setContext] = useState({});\n  const { settings } = useAliasProductGraphConfig();\n\n  useEffect(() => {\n    setContext({\n      settings: {\n        padding: {\n          bottom: 75,\n          left: 75,\n          right: 45,\n          top: 45\n        },\n        ...settings,\n        isStandalone: true,\n        metric: metricFilter,\n        metrics: [metricFilter]\n      }\n    });\n  }, [metricFilter, settings, setContext]);\n\n  return (\n    <GraphCardContext.Provider value={context}>\n      <GraphCardMetricTotals>\n        <GraphCardChart />\n      </GraphCardMetricTotals>\n    </GraphCardContext.Provider>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphConfig: Function, metricFilter: object}}\n */\nGraphCardMetric.propTypes = {\n  metricFilter: PropTypes.shape({\n    id: PropTypes.oneOf([...Object.values(rhsmConstants.RHSM_API_PATH_METRIC_TYPES)])\n  }),\n  useProductGraphConfig: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphConfig: Function, metricFilter: object}}\n */\nGraphCardMetric.defaultProps = {\n  metricFilter: {},\n  useProductGraphConfig\n};\n\nexport { GraphCardMetric as default, GraphCardMetric };\n"],"names":["GraphCardMetric","metricFilter","useAliasProductGraphConfig","useProductGraphConfig","useState","context","setContext","settings","useEffect","padding","bottom","left","right","top","isStandalone","metric","metrics","GraphCardContext","value","GraphCardMetricTotals","GraphCardChart","defaultProps"],"sourceRoot":""}