{"version":3,"file":"js/7585.1679403700107.fc489d46c5b888907f25.js","mappings":"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","sources":["webpack:///./src/components/bannerMessages/bannerMessages.js","webpack:///./src/components/bannerMessages/bannerMessagesContext.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, AlertActionCloseButton, AlertVariant, Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { useShallowCompareEffect } from 'react-use';\nimport { useGetAppMessages } from './bannerMessagesContext';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Banner alert messages for a product view.\n *\n * @memberof Components\n * @module BannerMessages\n * @property {module} BannerMessagesContext\n */\n\n/**\n * Render banner messages.\n *\n * @param {object} props\n * @param {Array} props.messages\n * @param {Function} props.useGetAppMessages\n * @returns {React.ReactNode}\n */\nconst BannerMessages = ({ messages, useGetAppMessages: useAliasGetAppMessages }) => {\n  const [hideAlerts, setHideAlerts] = useState({});\n  const [alerts, setAlerts] = useState([]);\n  const { data: appMessages } = useAliasGetAppMessages();\n\n  useShallowCompareEffect(() => {\n    const updatedMessages = [];\n\n    if (messages.length) {\n      Object.entries(appMessages).forEach(([key, value]) => {\n        if (hideAlerts[key] !== true && value === true) {\n          const message = messages.find(({ id }) => id === key);\n\n          if (message) {\n            updatedMessages.push({\n              key,\n              ...message\n            });\n          }\n        }\n      });\n    }\n\n    setAlerts(\n      updatedMessages.map(({ key, message, title, variant = AlertVariant.info }) => {\n        const actionClose = <AlertActionCloseButton onClose={() => setHideAlerts({ ...hideAlerts, [key]: true })} />;\n\n        return (\n          <Alert actionClose={actionClose} key={key} title={title} variant={variant}>\n            {message}\n          </Alert>\n        );\n      })\n    );\n  }, [appMessages, hideAlerts, messages]);\n\n  if (alerts?.length) {\n    return <div className=\"curiosity-banner-messages\">{alerts}</div>;\n  }\n\n  return null;\n};\n\n/**\n * Prop types.\n *\n * @type {{useGetAppMessages: Function, messages: Array}}\n */\nBannerMessages.propTypes = {\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.node.isRequired,\n      message: PropTypes.node.isRequired,\n      variant: PropTypes.oneOf([...Object.values(AlertVariant)])\n    })\n  ),\n  useGetAppMessages: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGetAppMessages: Function, messages: Array}}\n */\nBannerMessages.defaultProps = {\n  messages: [\n    {\n      id: 'cloudigradeMismatch',\n      title: translate('curiosity-banner.dataMismatchTitle'),\n      message: translate(\n        'curiosity-banner.dataMismatchMessage',\n        {\n          context: helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS !== '' && 'cloudigradeMismatch',\n          appName: helpers.UI_DISPLAY_NAME\n        },\n        [\n          <Button\n            isInline\n            component=\"a\"\n            variant=\"link\"\n            icon={<ExternalLinkAltIcon />}\n            iconPosition=\"right\"\n            target=\"_blank\"\n            href={helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS}\n          />\n        ]\n      )\n    }\n  ],\n  useGetAppMessages\n};\n\nexport { BannerMessages as default, BannerMessages };\n","import { useShallowCompareEffect } from 'react-use';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { dateHelpers } from '../../common';\nimport {\n  rhsmConstants,\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\n\n/**\n * @memberof BannerMessages\n * @module BannerMessagesContext\n */\n\n/**\n * ToDo: useGetAppMessages is setup to work with existing Tally response, pre-metrics\n * Banner messages scans the returned Tally listing for the HAS_CLOUDIGRADE_MISMATCH. In the future\n * this may need to be updated to pull from the \"meta\" object part of the Tally response.\n */\n/**\n * Get app messages.\n *\n * @param {object} options\n * @param {Function} options.getMessageReports\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useProductQuery\n * @param {Function} options.useSelectorsResponse\n * @returns {{data: {cloudigradeMismatch: boolean}, pending: boolean, fulfilled: boolean, error: boolean}}\n */\nconst useGetAppMessages = ({\n  getMessageReports = reduxActions.rhsm.getMessageReports,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductQuery();\n  const dispatch = useAliasDispatch();\n  const { error, fulfilled, pending, data } = useAliasSelectorsResponse({\n    id: 'messages',\n    selector: ({ messages }) => messages?.report?.[productId]\n  });\n\n  useShallowCompareEffect(() => {\n    if (productId) {\n      const { startDate, endDate } = dateHelpers.getRangedDateTime('CURRENT');\n      const updatedQuery = {\n        ...query,\n        [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY,\n        [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate.toISOString(),\n        [RHSM_API_QUERY_SET_TYPES.END_DATE]: endDate.toISOString()\n      };\n\n      getMessageReports(productId, updatedQuery)(dispatch);\n    }\n  }, [productId, query]);\n\n  const updatedData = {\n    cloudigradeMismatch: false\n  };\n\n  if (fulfilled) {\n    const { messages = {} } = data || {};\n\n    updatedData.cloudigradeMismatch =\n      messages?.data\n        ?.reverse()\n        ?.find(\n          ({ [rhsmConstants.RHSM_API_RESPONSE_TALLY_CAPACITY_META_TYPES.HAS_CLOUDIGRADE_MISMATCH]: mismatch }) =>\n            mismatch === true\n        ) !== undefined;\n  }\n\n  return {\n    error,\n    fulfilled,\n    pending,\n    data: {\n      ...updatedData\n    }\n  };\n};\n\nconst context = {\n  useGetAppMessages\n};\n\nexport { context as default, context, useGetAppMessages };\n"],"names":["BannerMessages","_ref","messages","useAliasGetAppMessages","useGetAppMessages","_useState","useState","_useState2","_slicedToArray","hideAlerts","setHideAlerts","_useState3","_useState4","alerts","setAlerts","appMessages","data","useShallowCompareEffect","updatedMessages","length","Object","entries","forEach","_ref2","_ref3","key","value","message","find","_ref4","id","push","_objectSpread","map","_ref5","title","_ref5$variant","variant","AlertVariant","actionClose","React","AlertActionCloseButton","onClose","_defineProperty","Alert","className","defaultProps","translate","context","helpers","appName","Button","isInline","component","icon","ExternalLinkAltIcon","iconPosition","target","href","arguments","undefined","_ref$getMessageReport","getMessageReports","reduxActions","_ref$useDispatch","useDispatch","useAliasDispatch","storeHooks","_ref$useProduct","useProduct","useAliasProduct","_ref$useProductQuery","useProductQuery","useAliasProductQuery","_ref$useSelectorsResp","useSelectorsResponse","useAliasSelectorsResponse","_useAliasProduct","productId","query","dispatch","_useAliasSelectorsRes","selector","_messages$report","report","error","fulfilled","pending","_objectSpread2","_dateHelpers$getRange","dateHelpers","startDate","endDate","updatedQuery","RHSM_API_QUERY_SET_TYPES","GRANULARITY_TYPES","toISOString","updatedData","cloudigradeMismatch","_messages$data","_messages$data$revers","_ref3$messages","reverse","rhsmConstants"],"sourceRoot":""}