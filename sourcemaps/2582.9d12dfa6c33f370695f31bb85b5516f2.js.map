{"version":3,"file":"js/2582.22f5628fbb36f9959aa4.js","mappings":"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","sources":["webpack:///./src/components/bannerMessages/bannerMessages.js","webpack:///./src/components/bannerMessages/bannerMessagesContext.js","webpack:///./src/components/graphCard/graphCard.js","webpack:///./src/components/graphCard/graphCardMetricTotals.js","webpack:///./src/components/inventoryCardSubscriptions/inventoryCardSubscriptions.js","webpack:///./src/components/inventoryCardSubscriptions/inventoryCardSubscriptionsContext.js","webpack:///./src/components/inventoryTabs/inventoryTab.js","webpack:///./src/components/inventoryTabs/inventoryTabs.js","webpack:///./src/components/productView/productView.js","webpack:///./src/components/tabs/tabs.js","webpack:///./src/components/toolbar/toolbar.js","webpack:///./src/components/toolbar/toolbarContext.js","webpack:///./src/components/toolbar/toolbarFieldGroupVariant.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, AlertActionCloseButton, AlertGroup, AlertVariant } from '@patternfly/react-core';\nimport { useBannerMessages, useRemoveBannerMessages } from './bannerMessagesContext';\n\n/**\n * Banner alert messages for a product view.\n *\n * @memberof Components\n * @module BannerMessages\n * @property {module} BannerMessagesContext\n */\n\n/**\n * Render banner messages.\n *\n * @param {object} props\n * @param {Function} props.useBannerMessages\n * @param {Function} props.useRemoveBannerMessages\n * @returns {React.ReactNode}\n */\nconst BannerMessages = ({\n  useBannerMessages: useAliasBannerMessages,\n  useRemoveBannerMessages: useAliasRemoveBannerMessages\n}) => {\n  const bannerMessages = useAliasBannerMessages();\n  const removeBannerMessages = useAliasRemoveBannerMessages();\n\n  if (bannerMessages?.length) {\n    return (\n      <div className=\"curiosity-banner-messages\">\n        <AlertGroup isLiveRegion>\n          {bannerMessages?.map(({ id, message, title, variant = AlertVariant.info }) => {\n            const actionClose = <AlertActionCloseButton onClose={() => removeBannerMessages(id || title)} />;\n\n            return (\n              <Alert actionClose={actionClose} key={id || title} title={title} variant={variant} isInline>\n                {message}\n              </Alert>\n            );\n          })}\n        </AlertGroup>\n      </div>\n    );\n  }\n\n  return null;\n};\n\n/**\n * Prop types.\n *\n * @type {{useBannerMessages: Function, useRemoveBannerMessages: Function}}\n */\nBannerMessages.propTypes = {\n  useBannerMessages: PropTypes.func,\n  useRemoveBannerMessages: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useBannerMessages: Function, useRemoveBannerMessages: Function}}\n */\nBannerMessages.defaultProps = {\n  useBannerMessages,\n  useRemoveBannerMessages\n};\n\nexport { BannerMessages as default, BannerMessages };\n","import { useCallback } from 'react';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct } from '../productView/productViewContext';\nimport { helpers } from '../../common/helpers';\n\n/**\n * @memberof BannerMessages\n * @module BannerMessagesContext\n */\n\n/**\n * Retrieve, set and remove application banner messages from state.\n *\n * @param {object} options\n * @param {Function} options.useProduct\n * @param {Function} options.useSelector\n * @returns {{ bannerMessages: Array, setBannerMessages: Function, removeBannerMessages: Function }}\n */\nconst useBannerMessages = ({\n  useProduct: useAliasProduct = useProduct,\n  useSelector: useAliasSelector = storeHooks.reactRedux.useSelector\n} = {}) => {\n  const { productId } = useAliasProduct();\n  return useAliasSelector(({ messages }) => messages?.bannerMessages?.[productId], []);\n};\n\n/**\n * Provide a callback for removing application banner messages from state.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useBannerMessages\n * @returns {Function}\n */\nconst useRemoveBannerMessages = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useBannerMessages: useAliasBannerMessages = useBannerMessages\n} = {}) => {\n  const dispatch = useAliasDispatch();\n  const { productId } = useAliasProduct();\n  const bannerMessages = useAliasBannerMessages();\n\n  /**\n   * Remove a banner message from state.\n   *\n   * @callback removeBannerMessages\n   * @param {string} idTitle\n   */\n  return useCallback(\n    idTitle => {\n      if (productId && Array.isArray(bannerMessages) && bannerMessages.length) {\n        const filteredMessages = bannerMessages.filter(({ id, title }) => id !== idTitle && title !== idTitle);\n\n        dispatch({\n          type: reduxTypes.message.SET_BANNER_MESSAGES,\n          viewId: productId,\n          bannerMessages: filteredMessages || []\n        });\n      }\n    },\n    [bannerMessages, dispatch, productId]\n  );\n};\n\n/**\n * Provide a callback for setting application banner messages from state.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useBannerMessages\n * @returns {Function}\n */\nconst useSetBannerMessages = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useBannerMessages: useAliasBannerMessages = useBannerMessages\n} = {}) => {\n  const dispatch = useAliasDispatch();\n  const { productId } = useAliasProduct();\n  const bannerMessages = useAliasBannerMessages();\n\n  /**\n   * Set application messages for banner display\n   *\n   * @callback setBannerMessages\n   * @param {Array<{ id: string, message: string, title: string, variant: string }>|{ id: string, message: string, title: string, variant: string }} messages\n   */\n  return useCallback(\n    messages => {\n      if (productId) {\n        const updatedMessages = (Array.isArray(messages) && messages) || [messages];\n\n        dispatch({\n          type: reduxTypes.message.SET_BANNER_MESSAGES,\n          viewId: productId,\n          bannerMessages: [\n            ...(bannerMessages || []),\n            ...updatedMessages\n              .map(value => {\n                if (value?.id || value?.title || value?.message || value?.variant) {\n                  return value;\n                }\n\n                if (typeof value === 'string' || typeof value === 'number') {\n                  return {\n                    id: value,\n                    title: value\n                  };\n                }\n\n                return undefined;\n              })\n              .filter(value => value !== undefined)\n          ]\n        });\n      } else if (helpers.DEV_MODE) {\n        console.warn(\n          'Banner messages currently require the use of \"product id\". Product context is unavailable, try moving your banner message \"set\" lower in the component order.'\n        );\n      }\n    },\n    [bannerMessages, dispatch, productId]\n  );\n};\n\nconst context = {\n  useBannerMessages,\n  useRemoveBannerMessages,\n  useSetBannerMessages\n};\n\nexport { context as default, context, useBannerMessages, useRemoveBannerMessages, useSetBannerMessages };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { helpers } from '../../common';\nimport { GraphCardMetricTotals } from './graphCardMetricTotals';\nimport { GraphCardChart } from './graphCardChart';\nimport { GraphCardContext, useParseFiltersSettings } from './graphCardContext';\n\n/**\n * Configurable graph, chart, cards. Consumes Charts.\n *\n * @see Charts\n * @memberof Components\n * @module GraphCard\n * @property {module} GraphCardChart\n * @property {module} GraphCardChartLegend\n * @property {module} GraphCardChartTitleTooltip\n * @property {module} GraphCardChartTooltip\n * @property {module} GraphCardContext\n * @property {module} GraphCardHelpers\n * @property {module} GraphCardMetricTotals\n */\n\n/**\n * Set up graph cards. Expand filters with base graph settings.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useParseFiltersSettings\n * @returns {React.ReactNode}\n */\nconst GraphCard = ({ isDisabled, useParseFiltersSettings: useAliasParseFiltersSettings }) => {\n  const { filtersSettings } = useAliasParseFiltersSettings();\n\n  if (isDisabled || !filtersSettings?.length) {\n    return null;\n  }\n\n  return filtersSettings?.map(filterSetting => (\n    <GraphCardContext.Provider key={`graphCard-${filterSetting?.settings?.metrics?.[0]?.id}`} value={filterSetting}>\n      <GraphCardMetricTotals>\n        <GraphCardChart />\n      </GraphCardMetricTotals>\n    </GraphCardContext.Provider>\n  ));\n};\n\n/**\n * Prop types.\n *\n * @type {{useParseFiltersSettings: Function, isDisabled: boolean}}\n */\nGraphCard.propTypes = {\n  isDisabled: PropTypes.bool,\n  useParseFiltersSettings: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useParseFiltersSettings: Function, isDisabled: boolean}}\n */\nGraphCard.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_GRAPH,\n  useParseFiltersSettings\n};\n\nexport { GraphCard as default, GraphCard };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter, CardHeader, CardTitle, Title } from '@patternfly/react-core';\nimport _camelCase from 'lodash/camelCase';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useGraphCardContext, useMetricsSelector } from './graphCardContext';\nimport { Loader, SkeletonSize } from '../loader/loader';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldRangedMonthly';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { graphCardHelpers } from './graphCardHelpers';\nimport { helpers } from '../../common';\n\n/**\n * @memberof GraphCard\n * @module GraphCardMetricTotals\n */\n\n/**\n * Display totals for a single metric.\n *\n * @param {object} props\n * @param {React.ReactNode} props.children\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {React.ReactNode}\n */\nconst GraphCardMetricTotals = ({\n  children,\n  useGraphCardContext: useAliasGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const query = useAliasProductGraphTallyQuery();\n  const { pending, error, fulfilled, dataSets: dataByList = [] } = useAliasMetricsSelector();\n\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate } = query;\n  const { isCurrent: isSelectedMonthCurrent } =\n    toolbarFieldOptions.find(\n      option => option.title === startDate || option.value.startDate.toISOString() === startDate\n    ) || {};\n\n  if (settings?.isMetricDisplay && settings?.cards?.length) {\n    const metricDisplayPassedData = helpers.setImmutableData(\n      {\n        dataSets: dataByList.map(dataSet => {\n          const { id: chartId, metric: metricId } = dataSet || {};\n          return {\n            ...dataSet,\n            display: {\n              ...graphCardHelpers.getDailyMonthlyTotals({ dataSet, isCurrent: isSelectedMonthCurrent }),\n              ...graphCardHelpers.getRemainingCapacity({\n                ...graphCardHelpers.getPrepaidTallyCapacity({ data: dataByList }),\n                isCurrent: isSelectedMonthCurrent\n              }),\n              ...graphCardHelpers.getRemainingOverage({\n                ...graphCardHelpers.getPrepaidTallyCapacity({ data: dataByList }),\n                isCurrent: isSelectedMonthCurrent\n              }),\n              chartId,\n              metricId\n            }\n          };\n        })\n      },\n      { isClone: true }\n    );\n\n    return (\n      <div\n        data-test={`graphMetricTotals-${settings?.groupMetric?.map(metricId => _camelCase(metricId))?.join('-')}`}\n        data-test-data={JSON.stringify(metricDisplayPassedData)}\n        className=\"curiosity-usage-graph__totals\"\n      >\n        <div>\n          <div className=\"curiosity-usage-graph__totals-column\">\n            {settings?.cards?.map(({ key, header, body, footer }, index) => (\n              <Card\n                key={key || helpers.generateHash({ metricDisplayPassedData, index })}\n                isPlain\n                data-test={`graphMetricTotalsCard-${index}`}\n                className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n              >\n                <CardHeader>\n                  <CardTitle>\n                    <Title headingLevel=\"h2\" size=\"md\">\n                      {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                      {fulfilled && ((typeof header === 'function' && header(metricDisplayPassedData)) || header)}\n                    </Title>\n                  </CardTitle>\n                </CardHeader>\n                <CardBody>\n                  <div>\n                    {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg, height: '60px' }} />}\n                    {fulfilled && ((typeof body === 'function' && body(metricDisplayPassedData)) || body)}\n                  </div>\n                </CardBody>\n                <CardFooter>\n                  <div>\n                    {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                    {fulfilled && ((typeof footer === 'function' && footer(metricDisplayPassedData)) || footer)}\n                  </div>\n                </CardFooter>\n              </Card>\n            ))}\n          </div>\n        </div>\n        <div>\n          <div className=\"curiosity-usage-graph__totals-graph-column\">{children}</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div data-test=\"graphStandalone\" className=\"curiosity-usage-graph__standalone\">\n      {children}\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, children: React.ReactNode, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.propTypes = {\n  children: PropTypes.node,\n  useGraphCardContext: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, children: React.ReactNode, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.defaultProps = {\n  children: null,\n  useGraphCardContext,\n  useMetricsSelector,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardMetricTotals as default, GraphCardMetricTotals };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  useProductInventorySubscriptionsConfig,\n  useProductInventorySubscriptionsQuery\n} from '../productView/productViewContext';\nimport {\n  useGetSubscriptionsInventory,\n  useOnPageSubscriptions,\n  useOnColumnSortSubscriptions\n} from './inventoryCardSubscriptionsContext';\nimport InventoryCard from '../inventoryCard/inventoryCard';\nimport { helpers } from '../../common';\n\n/**\n * @memberof Components\n * @module InventoryCardSubscriptions\n * @property {module} InventoryCardSubscriptionsContext\n */\n\n/**\n * A subscriptions' system inventory component.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useGetInventory\n * @param {Function} props.useOnPage\n * @param {Function} props.useOnColumnSort\n * @param {Function} props.useProductInventoryConfig\n * @param {Function} props.useProductInventoryQuery\n * @fires onColumnSort\n * @fires onPage\n * @returns {React.ReactNode}\n */\nconst InventoryCardSubscriptions = ({ ...props }) => <InventoryCard cardActions={null} {...props} />;\n\n/**\n * Prop types.\n *\n * @type {{useOnPage: Function, isDisabled: boolean, useProductInventoryConfig: Function, useGetInventory: Function,\n *     useOnColumnSort: Function, useProductInventoryQuery: Function}}\n */\nInventoryCardSubscriptions.propTypes = {\n  isDisabled: PropTypes.bool,\n  useGetInventory: PropTypes.func,\n  useOnPage: PropTypes.func,\n  useOnColumnSort: PropTypes.func,\n  useProductInventoryConfig: PropTypes.func,\n  useProductInventoryQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnPage: Function, isDisabled: boolean, useProductInventoryConfig: Function, useGetInventory: Function,\n *     useOnColumnSort: Function, useProductInventoryQuery: Function}}\n */\nInventoryCardSubscriptions.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS,\n  useGetInventory: useGetSubscriptionsInventory,\n  useOnPage: useOnPageSubscriptions,\n  useOnColumnSort: useOnColumnSortSubscriptions,\n  useProductInventoryConfig: useProductInventorySubscriptionsConfig,\n  useProductInventoryQuery: useProductInventorySubscriptionsQuery\n};\n\nexport { InventoryCardSubscriptions as default, InventoryCardSubscriptions };\n","import { useShallowCompareEffect } from 'react-use';\nimport _camelCase from 'lodash/camelCase';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { reduxActions, reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductInventorySubscriptionsQuery } from '../productView/productViewContext';\nimport {\n  RHSM_API_QUERY_INVENTORY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_INVENTORY_SUBSCRIPTIONS_SORT_TYPES as SORT_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * @memberof InventoryCardSubscriptions\n * @module InventoryCardSubscriptionsContext\n */\n\n/**\n * Combined Redux RHSM Actions, getSubscriptionsInventory, and inventory selector response.\n *\n * @param {object} options\n * @param {boolean} options.isDisabled\n * @param {Function} options.getInventory\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useProductInventoryQuery\n * @param {Function} options.useSelectorsResponse\n * @returns {Function}\n */\nconst useGetSubscriptionsInventory = ({\n  isDisabled = false,\n  getInventory = reduxActions.rhsm.getSubscriptionsInventory,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventorySubscriptionsQuery,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductInventoryQuery();\n  const dispatch = useAliasDispatch();\n  const { cancelled, pending, data, ...response } = useAliasSelectorsResponse(\n    ({ inventory }) => inventory?.subscriptionsInventory?.[productId]\n  );\n\n  useShallowCompareEffect(() => {\n    if (!isDisabled) {\n      getInventory(productId, query)(dispatch);\n    }\n  }, [dispatch, isDisabled, productId, query]);\n\n  return {\n    ...response,\n    pending: pending || cancelled || false,\n    data: (data?.length === 1 && data[0]) || data || {}\n  };\n};\n\n/**\n * An onPage callback for subscriptions inventory.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnPageSubscriptions = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for subscriptions inventory.\n   *\n   * @event onPage\n   * @param {object} params\n   * @param {number} params.offset\n   * @param {number} params.perPage\n   * @returns {void}\n   */\n  return ({ offset, perPage }) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.OFFSET],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.OFFSET]: offset\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.LIMIT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.LIMIT]: perPage\n      }\n    ]);\n  };\n};\n\n/**\n * An onColumnSort callback for subscriptions inventory.\n *\n * @param {object} options\n * @param {object} options.sortColumns\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnColumnSortSubscriptions = ({\n  sortColumns = SORT_TYPES,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for subscriptions inventory.\n   *\n   * @event onColumnSort\n   * @param {*} _data\n   * @param {object} params\n   * @param {string} params.direction\n   * @param {string} params.id\n   * @returns {void}\n   */\n  return (_data, { direction, id }) => {\n    const updatedSortColumn = Object.values(sortColumns).find(value => value === id || _camelCase(value) === id);\n    let updatedDirection;\n\n    if (!updatedSortColumn) {\n      if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n        console.warn(`Sorting can only be performed on select fields, confirm field ${id} is allowed.`);\n      }\n      return;\n    }\n\n    switch (direction) {\n      case SortByDirection.desc:\n        updatedDirection = SORT_DIRECTION_TYPES.DESCENDING;\n        break;\n      default:\n        updatedDirection = SORT_DIRECTION_TYPES.ASCENDING;\n        break;\n    }\n\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.DIRECTION],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.DIRECTION]: updatedDirection\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.SORT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.SORT]: updatedSortColumn\n      }\n    ]);\n  };\n};\n\nconst context = {\n  useGetSubscriptionsInventory,\n  useOnPageSubscriptions,\n  useOnColumnSortSubscriptions\n};\n\nexport {\n  context as default,\n  context,\n  useGetSubscriptionsInventory,\n  useOnPageSubscriptions,\n  useOnColumnSortSubscriptions\n};\n","import PropTypes from 'prop-types';\n\n/**\n * @memberof InventoryTabs\n * @module InventoryTab\n */\n\n/**\n * A tab pass-through component for passing props to InventoryTabs.\n *\n * @param {object} props\n * @param {boolean} props.active\n * @param {React.ReactNode} props.children\n * @param {string} props.title\n * @returns {React.ReactNode}\n */\n// eslint-disable-next-line no-unused-vars\nconst InventoryTab = ({ active, children, title }) => children;\n\n/**\n * Prop types.\n *\n * @type {{children: React.ReactNode, className: string}}\n */\nInventoryTab.propTypes = {\n  children: PropTypes.node.isRequired,\n  active: PropTypes.bool,\n  title: PropTypes.node.isRequired\n};\n\n/**\n * Default props.\n *\n * @type {{className: string}}\n */\nInventoryTab.defaultProps = {\n  active: false\n};\n\nexport { InventoryTab as default, InventoryTab };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Title } from '@patternfly/react-core';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct } from '../productView/productViewContext';\nimport { Tabs } from '../tabs/tabs';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { InventoryTab } from './inventoryTab';\n\n/**\n * An inventory tabs display with state. Consume Tabs.\n *\n * @see Tabs\n * @memberof Components\n * @module InventoryTabs\n * @property {module} InventoryTab\n */\n\n/**\n * Update tab state.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnTab = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ index } = {}) => {\n    dispatch({\n      type: reduxTypes.inventory.SET_INVENTORY_TAB,\n      tabs: {\n        [productId]: index\n      }\n    });\n  };\n};\n\n/**\n * An inventory tabs component.\n * Render inventory tabs using Inventory tab passed props only.\n *\n * @fires onTab\n * @param {object} props\n * @param {number} props.activeTab\n * @param {React.ReactNode} props.children\n * @param {number} props.defaultActiveTab\n * @param {boolean} props.isDisabled\n * @param {Function} props.t\n * @param {Function} props.useOnTab\n * @param {Function} props.useProduct\n * @param {Function} props.useSelector\n * @returns {React.ReactNode|null}\n */\nconst InventoryTabs = ({\n  activeTab,\n  children,\n  defaultActiveTab,\n  isDisabled,\n  t,\n  useOnTab: useAliasOnTab,\n  useProduct: useAliasProduct,\n  useSelector: useAliasSelector\n}) => {\n  const { productId } = useAliasProduct();\n  const updatedActiveTab = useAliasSelector(({ inventory }) => inventory.tabs?.[productId], activeTab);\n  const onTab = useAliasOnTab();\n\n  if (isDisabled) {\n    return null;\n  }\n\n  const updatedChildren = React.Children.toArray(children).map((child, index) => {\n    const { props: childProps = {} } = child;\n\n    return {\n      active: childProps.active || false,\n      content: childProps.children || child,\n      title: childProps.title || t('curiosity-inventory.tabSubHeading', { count: index })\n    };\n  });\n\n  return (\n    <React.Fragment>\n      <Title headingLevel=\"h2\" className=\"sr-only\">\n        {t('curiosity-inventory.tabHeading', { count: updatedChildren.length })}\n      </Title>\n      <Tabs activeTab={updatedActiveTab} defaultActiveTab={defaultActiveTab} onTab={onTab} tabs={updatedChildren} />\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnTab: Function, useProduct: Function, t: Function, children: React.ReactNode,\n *     useSelector: Function, defaultActiveTab: number, isDisabled: boolean, activeTab: number}}\n */\nInventoryTabs.propTypes = {\n  activeTab: PropTypes.number,\n  children: PropTypes.node.isRequired,\n  defaultActiveTab: PropTypes.number,\n  isDisabled: PropTypes.bool,\n  t: PropTypes.func,\n  useOnTab: PropTypes.func,\n  useProduct: PropTypes.func,\n  useSelector: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnTab: Function, useProduct: Function, t: translate, useSelector: Function,\n *     defaultActiveTab: number, isDisabled: boolean, activeTab: number}}\n */\nInventoryTabs.defaultProps = {\n  activeTab: 0,\n  defaultActiveTab: 0,\n  isDisabled: helpers.UI_DISABLED_TABLE,\n  t: translate,\n  useOnTab,\n  useProduct,\n  useSelector: storeHooks.reactRedux.useSelector\n};\n\nexport { InventoryTabs as default, InventoryTabs, InventoryTab, useOnTab };\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { routerContext } from '../router';\nimport { ProductViewContext } from './productViewContext';\nimport { PageLayout, PageHeader, PageSection, PageToolbar, PageMessages, PageColumns } from '../pageLayout/pageLayout';\nimport { GraphCard } from '../graphCard/graphCard';\nimport { Toolbar } from '../toolbar/toolbar';\nimport { InventoryCard } from '../inventoryCard/inventoryCard';\nimport { helpers } from '../../common';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport { InventoryCardSubscriptions } from '../inventoryCardSubscriptions/inventoryCardSubscriptions';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Primary product display component, and config context provider.\n *\n * @memberof Components\n * @module ProductView\n * @property {module} ProductViewContext\n * @property {module} ProductViewMissing\n */\n\n/**\n * ToDo: review removing the \"useCallback\" once the routing updates are in place\n */\n/**\n * Display products.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useRouteDetail\n * @returns {React.ReactNode}\n */\nconst ProductView = ({ t, useRouteDetail: useAliasRouteDetail }) => {\n  const { firstMatch, productGroup } = useAliasRouteDetail();\n\n  const renderProduct = useCallback(() => {\n    const updated = config => {\n      const { initialInventoryFilters, initialSubscriptionsInventoryFilters, productId, viewId } = config;\n\n      if (!productId || !viewId) {\n        return null;\n      }\n\n      return (\n        <ProductViewContext.Provider value={config} key={`product_${productId}`}>\n          <PageMessages>\n            <BannerMessages />\n          </PageMessages>\n          <PageToolbar>\n            <Toolbar />\n          </PageToolbar>\n          <PageSection>\n            <GraphCard />\n          </PageSection>\n          <PageSection className=\"curiosity-page-section__tabs\">\n            <InventoryTabs\n              isDisabled={\n                (!initialInventoryFilters && !initialSubscriptionsInventoryFilters) || helpers.UI_DISABLED_TABLE\n              }\n            >\n              {!helpers.UI_DISABLED_TABLE_INSTANCES && initialInventoryFilters && (\n                <InventoryTab\n                  key={`inventory_instances_${productId}`}\n                  title={t('curiosity-inventory.tabInstances', { context: [productId] })}\n                >\n                  <InventoryCard />\n                </InventoryTab>\n              )}\n              {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && initialSubscriptionsInventoryFilters && (\n                <InventoryTab\n                  key={`inventory_subs_${productId}`}\n                  title={t('curiosity-inventory.tabSubscriptions', { context: [productId] })}\n                >\n                  <InventoryCardSubscriptions />\n                </InventoryTab>\n              )}\n            </InventoryTabs>\n          </PageSection>\n        </ProductViewContext.Provider>\n      );\n    };\n\n    return updated(firstMatch);\n  }, [firstMatch, t]);\n\n  return (\n    (productGroup && (\n      <PageLayout>\n        <PageHeader productLabel={productGroup}>\n          {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: productGroup })}\n        </PageHeader>\n        <PageColumns>{renderProduct()}</PageColumns>\n      </PageLayout>\n    )) ||\n    null\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: translate, useRouteDetail: Function}}\n */\nProductView.propTypes = {\n  t: PropTypes.func,\n  useRouteDetail: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, useRouteDetail: Function}}\n */\nProductView.defaultProps = {\n  t: translate,\n  useRouteDetail: routerContext.useRouteDetail\n};\n\nexport { ProductView as default, ProductView };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tabs as PfTabs, Tab, TabTitleText, Grid, GridItem } from '@patternfly/react-core';\nimport _isEqualWith from 'lodash/isEqualWith';\nimport { helpers } from '../../common';\n\n/**\n * PF tabs with state.\n *\n * @memberof Components\n * @module Tabs\n */\n\n/**\n * FixMe: PF tabs misinterprets \"isElementInView\" when tab title nodes are loaded dynamically\n * It appears the use of isElementInView within PF tabs is trying to be predicative in using\n * \"getBoundingClientRect\" but produces questionable results in scenarios where content is\n * async created. isElementInView assumes some form of the content will always be there\n * instead of scenarios where someone tries to dynamically apply components. It may be good to\n * review using a window.setTimeout(() => handleScrollButtons()) in componentDidMount.\n *\n * Our temporary solution is to simply hide the buttons with a manual set flag affecting the\n * CSS class. This will most likely cause long-term issues.\n */\n/**\n * ToDo: Insights frontend components uses a custom tabs layout, investigate related CSS classes\n * Originally we applied the CSS classes, but they appeared to provide nothing. Since Insights\n * rolled its own tabs we're hesitant to apply said classes without understanding what they provide.\n */\n/**\n * A set of tabs.\n *\n * @augments React.Component\n * @fires onTab\n */\nclass Tabs extends React.Component {\n  state = {\n    updatedActiveTab: null,\n    updatedTabs: null\n  };\n\n  componentDidMount() {\n    const { updatedTabs } = this.state;\n\n    if (updatedTabs === null) {\n      this.setTabData();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { tabs } = this.props;\n    const customizer = (valueA, valueB) => {\n      if (typeof valueA === 'function' && typeof valueB === 'function') {\n        return valueA.toString() === valueB.toString();\n      }\n\n      return undefined;\n    };\n\n    if (!_isEqualWith(prevProps.tabs, tabs, customizer)) {\n      this.setTabData();\n    }\n  }\n\n  /**\n   * On tab selected\n   *\n   * @event onTab\n   * @param {object} params\n   * @param {number} params.index\n   */\n  onTab = ({ index }) => {\n    const { onTab } = this.props;\n\n    this.setState(\n      {\n        updatedActiveTab: index\n      },\n      () => onTab({ index })\n    );\n  };\n\n  /**\n   * Convert tab objects into the required PF Tab format.\n   */\n  setTabData() {\n    const { activeTab, defaultActiveTab, tabs } = this.props;\n    let updatedActiveTab = defaultActiveTab;\n\n    const updatedTabs = tabs.map(({ active, content, title }, index) => {\n      updatedActiveTab = active ? index : updatedActiveTab;\n\n      return (\n        <Tab key={title} eventKey={index} title={<TabTitleText>{title}</TabTitleText>}>\n          {content}\n        </Tab>\n      );\n    });\n\n    if (typeof activeTab === 'number') {\n      updatedActiveTab = activeTab;\n    }\n\n    this.setState({\n      updatedActiveTab,\n      updatedTabs\n    });\n  }\n\n  /**\n   * Apply props to tabs.\n   *\n   * @returns {React.ReactNode}\n   */\n  renderTabs() {\n    const { updatedActiveTab, updatedTabs } = this.state;\n    const { className, hasOverflowScroll } = this.props;\n\n    return (\n      <PfTabs\n        className={`curiosity-tabs${(!hasOverflowScroll && '__no-scroll') || ''} ${className || ''}`}\n        activeKey={updatedActiveTab}\n        onSelect={(event, index) => this.onTab({ event, index })}\n        mountOnEnter\n        unmountOnExit\n        inset={{\n          default: 'insetNone',\n          md: 'insetLg'\n        }}\n      >\n        {updatedTabs}\n      </PfTabs>\n    );\n  }\n\n  /**\n   * Render tabs.\n   *\n   * @returns {React.ReactNode}\n   */\n  render() {\n    return (\n      <Grid className=\"curiosity-tabs-container\">\n        <GridItem span={12}>{this.renderTabs()}</GridItem>\n      </Grid>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{tabs: Array, hasOverflowScroll: boolean, onTab: Function, className: string,\n *     defaultActiveTab: number, activeTab: number}}\n */\nTabs.propTypes = {\n  activeTab: PropTypes.number,\n  className: PropTypes.string,\n  defaultActiveTab: PropTypes.number,\n  hasOverflowScroll: PropTypes.bool,\n  onTab: PropTypes.func,\n  tabs: PropTypes.arrayOf(\n    PropTypes.shape({\n      active: PropTypes.bool,\n      content: PropTypes.node.isRequired,\n      title: PropTypes.node.isRequired\n    })\n  )\n};\n\n/**\n * Default props.\n *\n * @type {{tabs: Array, hasOverflowScroll: boolean, onTab: Function, className: string,\n *     defaultActiveTab: number, activeTab: number}}\n */\nTabs.defaultProps = {\n  activeTab: null,\n  className: '',\n  defaultActiveTab: 0,\n  hasOverflowScroll: false,\n  onTab: helpers.noop,\n  tabs: []\n};\n\nexport { Tabs as default, Tabs };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Toolbar as PfToolbar,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup\n} from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport { useProductToolbarQuery } from '../productView/productViewContext';\nimport { useToolbarFieldClear, useToolbarFieldClearAll, useToolbarFields } from './toolbarContext';\nimport { ToolbarFieldGroupVariant } from './toolbarFieldGroupVariant';\nimport { ToolbarFieldSelectCategory, useSelectCategoryOptions } from './toolbarFieldSelectCategory';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Primary view toolbar.\n *\n * @memberof Components\n * @module Toolbar\n * @property {module} ToolbarContext\n * @property {module} ToolbarFieldBillingProvider\n * @property {module} ToolbarFieldCategory\n * @property {module} ToolbarFieldDisplayName\n * @property {module} ToolbarFieldGranularity\n * @property {module} ToolbarFieldRangedMonthly\n * @property {module} ToolbarFieldSelectCategory\n * @property {module} ToolbarFieldSla\n * @property {module} ToolbarFieldUom\n * @property {module} ToolbarFieldUsage\n * @property {module} ToolbarFieldVariant\n */\n\n/**\n * Application filter toolbar.\n *\n * @fires onClearFilter\n * @fires onClearAll\n * @param {object} props\n * @param {boolean} props.hardFilterReset On clearing all fields allow the category to reset as well.\n * @param {boolean} props.isDisabled\n * @param {boolean} props.isGroupVariantDisabled\n * @param {Function} props.t\n * @param {Function} props.useProductToolbarQuery\n * @param {Function} props.useSelectCategoryOptions\n * @param {Function} props.useToolbarFieldClear\n * @param {Function} props.useToolbarFieldClearAll\n * @param {Function} props.useToolbarFields\n * @returns {React.ReactNode}\n */\nconst Toolbar = ({\n  hardFilterReset,\n  isDisabled,\n  isGroupVariantDisabled,\n  t,\n  useProductToolbarQuery: useAliasProductToolbarQuery,\n  useSelectCategoryOptions: useAliasSelectCategoryOptions,\n  useToolbarFieldClear: useAliasToolbarFieldClear,\n  useToolbarFieldClearAll: useAliasToolbarFieldClearAll,\n  useToolbarFields: useAliasToolbarFields\n}) => {\n  const toolbarFieldQueries = useAliasProductToolbarQuery();\n  const { currentCategory, options } = useAliasSelectCategoryOptions();\n  const clearField = useAliasToolbarFieldClear();\n  const clearAllFields = useAliasToolbarFieldClearAll();\n  const { itemFields, secondaryFields } = useAliasToolbarFields();\n\n  if (isDisabled || (isGroupVariantDisabled && !options?.length && !secondaryFields?.length)) {\n    return null;\n  }\n\n  if (!isGroupVariantDisabled && !options?.length && !secondaryFields?.length) {\n    return <ToolbarFieldGroupVariant isStandalone />;\n  }\n\n  /**\n   * Clear a specific value\n   *\n   * @event onClearFilter\n   * @param {object} params\n   * @param {*} params.value\n   * @returns {void}\n   */\n  const onClearFilter = ({ value }) => clearField(value);\n\n  /**\n   * Clear all active filters.\n   *\n   * @event onClearAll\n   * @returns {void}\n   */\n  const onClearAll = () => clearAllFields(hardFilterReset);\n\n  /**\n   * Set selected options for chip display.\n   *\n   * @param {object} params\n   * @param {*} params.value\n   * @returns {Array}\n   */\n  const setSelectedOptions = ({ value: filterName } = {}) => {\n    const filterValue = toolbarFieldQueries?.[filterName];\n    return (\n      (typeof filterValue === 'string' && [\n        t('curiosity-toolbar.label', { context: [filterName, (filterValue === '' && 'none') || filterValue] })\n      ]) ||\n      []\n    );\n  };\n\n  return (\n    <PfToolbar\n      id=\"curiosity-toolbar\"\n      className=\"curiosity-toolbar pf-m-toggle-group-container ins-c-primary-toolbar\"\n      collapseListedFiltersBreakpoint=\"sm\"\n      clearAllFilters={onClearAll}\n      clearFiltersButtonText={t('curiosity-toolbar.clearFilters')}\n    >\n      {!isGroupVariantDisabled && <ToolbarFieldGroupVariant />}\n      <ToolbarContent>\n        <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"md\">\n          <ToolbarGroup variant=\"filter-group\">\n            {options.length > 1 && (\n              <ToolbarItem>\n                <ToolbarFieldSelectCategory />\n              </ToolbarItem>\n            )}\n            {options.map(({ title, value: filterName, component: OptionComponent, isClearable }) => {\n              const chipProps = { categoryName: title };\n\n              if (isClearable !== false) {\n                chipProps.chips = setSelectedOptions({ value: filterName });\n                chipProps.deleteChip = () => onClearFilter({ value: filterName });\n              }\n\n              return (\n                <ToolbarFilter\n                  key={filterName}\n                  showToolbarItem={currentCategory === filterName || options.length === 1}\n                  {...chipProps}\n                >\n                  <OptionComponent isFilter />\n                </ToolbarFilter>\n              );\n            })}\n          </ToolbarGroup>\n        </ToolbarToggleGroup>\n        <ToolbarGroup key=\"itemFields\">{itemFields}</ToolbarGroup>\n        <ToolbarGroup key=\"secondaryFields\" alignment={{ default: 'alignRight' }}>\n          {secondaryFields}\n        </ToolbarGroup>\n      </ToolbarContent>\n    </PfToolbar>\n  );\n};\n\n/**\n * Prop types\n *\n * @type {{useToolbarFieldClear: Function, t: Function, useSelectCategoryOptions: Function, hardFilterReset: boolean,\n *     useToolbarFields: Function, isGroupVariantDisabled: boolean, useProductToolbarQuery: Function, isDisabled: boolean,\n *     useToolbarFieldClearAll: Function}}\n */\nToolbar.propTypes = {\n  hardFilterReset: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  isGroupVariantDisabled: PropTypes.bool,\n  t: PropTypes.func,\n  useProductToolbarQuery: PropTypes.func,\n  useSelectCategoryOptions: PropTypes.func,\n  useToolbarFieldClear: PropTypes.func,\n  useToolbarFieldClearAll: PropTypes.func,\n  useToolbarFields: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useToolbarFieldClear: Function, t: translate, useSelectCategoryOptions: Function, hardFilterReset: boolean,\n *     useToolbarFields: Function, isGroupVariantDisabled: boolean, useProductToolbarQuery: Function, isDisabled: boolean,\n *     useToolbarFieldClearAll: Function}}\n */\nToolbar.defaultProps = {\n  hardFilterReset: false,\n  isDisabled: helpers.UI_DISABLED_TOOLBAR,\n  isGroupVariantDisabled: helpers.UI_DISABLED_TOOLBAR_GROUP_VARIANT,\n  t: translate,\n  useProductToolbarQuery,\n  useSelectCategoryOptions,\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFields\n};\n\nexport { Toolbar as default, Toolbar };\n","import React, { useMemo } from 'react';\nimport { ToolbarItem } from '@patternfly/react-core';\nimport { useProductQuery, useProductToolbarConfig } from '../productView/productViewContext';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { useOnSelect as useSelectCategoryOnSelect, toolbarFieldOptions } from './toolbarFieldSelectCategory';\nimport { useOnSelect as useBillingProviderOnSelect } from './toolbarFieldBillingProvider';\nimport { useOnSelect as useCategoryOnSelect } from './toolbarFieldCategory';\nimport { useOnSelect as useSlaOnSelect } from './toolbarFieldSla';\nimport { useOnSelect as useUsageOnSelect } from './toolbarFieldUsage';\nimport { useOnSelect as useVariantOnSelect } from './toolbarFieldVariant';\nimport { helpers } from '../../common/helpers';\n\n/**\n * @memberof Toolbar\n * @module ToolbarContext\n */\n\n/**\n * Clear a specific toolbar category using a select component's OnSelect hook.\n *\n * @param {object} options\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useCategoryOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @param {Function} options.useVariantOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClear = ({\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useCategoryOnSelect: useAliasCategoryOnSelect = useCategoryOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect,\n  useVariantOnSelect: useAliasVariantOnSelect = useVariantOnSelect\n} = {}) => {\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const categoryOnSelect = useAliasCategoryOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n  const variantOnSelect = useAliasVariantOnSelect();\n\n  return field => {\n    switch (field) {\n      case RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER:\n        billingOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.CATEGORY:\n        categoryOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.SLA:\n        slaOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.USAGE:\n        usageOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.VARIANT:\n        variantOnSelect();\n        break;\n      default:\n        break;\n    }\n  };\n};\n\n/**\n * Clear all available toolbar categories.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useSelectCategoryOnSelect\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useCategoryOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @param {Function} options.useVariantOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClearAll = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useSelectCategoryOnSelect: useAliasSelectCategoryOnSelect = useSelectCategoryOnSelect,\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useCategoryOnSelect: useAliasCategoryOnSelect = useCategoryOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect,\n  useVariantOnSelect: useAliasVariantOnSelect = useVariantOnSelect\n} = {}) => {\n  const {\n    [RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER]: billingProvider,\n    [RHSM_API_QUERY_SET_TYPES.CATEGORY]: category,\n    [RHSM_API_QUERY_SET_TYPES.SLA]: sla,\n    [RHSM_API_QUERY_SET_TYPES.USAGE]: usage,\n    [RHSM_API_QUERY_SET_TYPES.VARIANT]: variant\n  } = useAliasProductQuery();\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const categoryOnSelect = useAliasCategoryOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n  const selectCategoryOnSelect = useAliasSelectCategoryOnSelect();\n  const variantOnSelect = useAliasVariantOnSelect();\n\n  return hardFilterReset => {\n    if (typeof billingProvider === 'string') {\n      billingOnSelect();\n    }\n\n    if (typeof category === 'string') {\n      categoryOnSelect();\n    }\n\n    if (typeof sla === 'string') {\n      slaOnSelect();\n    }\n\n    if (typeof usage === 'string') {\n      usageOnSelect();\n    }\n\n    if (typeof variant === 'string') {\n      variantOnSelect();\n    }\n\n    if (hardFilterReset) {\n      selectCategoryOnSelect();\n    }\n  };\n};\n\n/**\n * Return lists of item and secondary toolbar fields for display.\n *\n * @param {object} options\n * @param {Array} options.categoryOptions\n * @param {Function} options.useProductToolbarConfig\n * @returns {Array}\n */\nconst useToolbarFields = ({\n  categoryOptions = toolbarFieldOptions,\n  useProductToolbarConfig: useAliasProductToolbarConfig = useProductToolbarConfig\n} = {}) => {\n  const { filters = [] } = useAliasProductToolbarConfig();\n\n  return useMemo(() => {\n    const setFilter = ({ id, content, ...filterProps }) => {\n      const option = categoryOptions.find(({ value: categoryOptionValue }) => id === categoryOptionValue);\n      const { component: OptionComponent } = option || {};\n\n      return (\n        (OptionComponent && (\n          <ToolbarItem key={`option-${id}`}>\n            <OptionComponent isFilter={false} {...filterProps} />\n          </ToolbarItem>\n        )) || (\n          <ToolbarItem key={id || helpers.generateId()}>\n            {typeof content === 'function' ? content() : content}\n          </ToolbarItem>\n        ) ||\n        null\n      );\n    };\n\n    return {\n      itemFields: filters.filter(({ isItem }) => isItem === true).map(setFilter),\n      secondaryFields: filters.filter(({ isSecondary }) => isSecondary === true).map(setFilter)\n    };\n  }, [categoryOptions, filters]);\n};\n\nconst context = {\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFields\n};\n\nexport { context as default, context, useToolbarFieldClear, useToolbarFieldClearAll, useToolbarFields };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Toolbar as PfToolbar, ToolbarContent, ToolbarItem, ToolbarItemVariant } from '@patternfly/react-core';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport { translate } from '../i18n/i18n';\nimport { routerContext } from '../router';\n\n/**\n * A toolbar product configuration select filter requiring a toolbar component parent.\n *\n * @memberof Toolbar\n * @module ToolbarFieldGroupVariant\n */\n\n/**\n * Generate select field options from config. Sorted by title string.\n *\n * @param {object} options\n * @param {Function} options.t\n * @param {Function} options.useRouteDetail\n * @returns {Function}\n */\nconst useToolbarFieldOptions = ({\n  t = translate,\n  useRouteDetail: useAliasRouteDetail = routerContext.useRouteDetail\n} = {}) => {\n  const { availableVariants, firstMatch } = useAliasRouteDetail();\n  const options = [];\n\n  availableVariants?.forEach(variant => {\n    options.push({\n      title: t('curiosity-toolbar.label', { context: ['groupVariant', variant] }),\n      value: variant,\n      selected: variant === firstMatch?.productId\n    });\n  });\n\n  return options.sort(({ title: titleA }, { title: titleB }) => titleA.localeCompare(titleB));\n};\n\n/**\n * On select update.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productGroup } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.app.SET_PRODUCT_VARIANT_QUERY_RESET_ALL,\n        productGroup\n      },\n      {\n        type: reduxTypes.app.SET_PRODUCT_VARIANT,\n        variant: value,\n        productGroup\n      }\n    ]);\n  };\n};\n\n/**\n * Display a product configuration field with generated options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {boolean} props.isStandalone\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProduct\n * @param {Function} props.useSelector\n * @param {Function} props.useToolbarFieldOptions\n * @returns {React.ReactNode}\n */\nconst ToolbarFieldGroupVariant = ({\n  isFilter,\n  isStandalone,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProduct: useAliasProduct,\n  useSelector: useAliasSelector,\n  useToolbarFieldOptions: useAliasToolbarFieldOptions\n}) => {\n  const { productGroup } = useAliasProduct();\n  const updatedValue = useAliasSelector(({ view }) => view?.product?.variant?.[productGroup], null);\n  const onSelect = useAliasOnSelect();\n  const options = useAliasToolbarFieldOptions();\n  const updatedOptions = options.map(option => ({\n    ...option,\n    selected: (updatedValue && option.value === updatedValue) || option?.selected\n  }));\n\n  if (options?.length <= 1) {\n    return null;\n  }\n\n  const element = (\n    <ToolbarContent>\n      <ToolbarItem variant={ToolbarItemVariant.label}>\n        {t('curiosity-toolbar.label', { context: ['groupVariant'] })}{' '}\n      </ToolbarItem>\n      <Select\n        aria-label={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'groupVariant'] })}\n        onSelect={onSelect}\n        options={updatedOptions}\n        selectedOptions={updatedValue}\n        placeholder={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'groupVariant'] })}\n        position={position}\n        data-test=\"toolbarFieldGroupVariant\"\n      />\n    </ToolbarContent>\n  );\n\n  return (\n    (isStandalone && (\n      <PfToolbar\n        id=\"curiosity-toolbar\"\n        className=\"curiosity-toolbar pf-m-toggle-group-container ins-c-primary-toolbar\"\n        collapseListedFiltersBreakpoint=\"sm\"\n      >\n        {element}\n      </PfToolbar>\n    )) ||\n    element\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, useProduct: Function, t: Function, useSelector: Function, isFilter: boolean,\n *     isStandalone: boolean, position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldGroupVariant.propTypes = {\n  isFilter: PropTypes.bool,\n  isStandalone: PropTypes.bool,\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProduct: PropTypes.func,\n  useSelector: PropTypes.func,\n  useToolbarFieldOptions: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, useProduct: Function, t: translate, useSelector: Function, isFilter: boolean,\n *     isStandalone: boolean, position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldGroupVariant.defaultProps = {\n  isFilter: false,\n  isStandalone: false,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProduct,\n  useSelector: storeHooks.reactRedux.useSelector,\n  useToolbarFieldOptions\n};\n\nexport { ToolbarFieldGroupVariant as default, ToolbarFieldGroupVariant, useOnSelect, useToolbarFieldOptions };\n"],"names":["BannerMessages","_ref","useAliasBannerMessages","useBannerMessages","useAliasRemoveBannerMessages","useRemoveBannerMessages","bannerMessages","removeBannerMessages","length","React","className","AlertGroup","isLiveRegion","map","_ref2","id","message","title","_ref2$variant","variant","AlertVariant","actionClose","AlertActionCloseButton","onClose","Alert","key","isInline","defaultProps","arguments","undefined","_ref$useProduct","useProduct","useAliasProduct","_ref$useSelector","useSelector","useAliasSelector","storeHooks","productId","_messages$bannerMessa","messages","_ref3","_ref3$useDispatch","useDispatch","useAliasDispatch","_ref3$useProduct","_ref3$useBannerMessag","dispatch","useCallback","idTitle","Array","isArray","filteredMessages","filter","_ref4","type","reduxTypes","viewId","useSetBannerMessages","_ref5","_ref5$useDispatch","_ref5$useProduct","_ref5$useBannerMessag","updatedMessages","concat","_toConsumableArray","value","helpers","console","warn","context","GraphCard","isDisabled","filtersSettings","useAliasParseFiltersSettings","useParseFiltersSettings","filterSetting","_filterSetting$settin","_filterSetting$settin2","_filterSetting$settin3","GraphCardContext","settings","metrics","GraphCardMetricTotals","GraphCardChart","_settings$cards","children","useAliasGraphCardContext","useGraphCardContext","useAliasMetricsSelector","useMetricsSelector","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","_useAliasGraphCardCon2","query","_useAliasMetricsSelec","pending","error","fulfilled","_useAliasMetricsSelec2","dataSets","dataByList","startDate","RHSM_API_QUERY_SET_TYPES","isSelectedMonthCurrent","toolbarFieldOptions","option","toISOString","isCurrent","isMetricDisplay","cards","_settings$groupMetric","_settings$groupMetric2","_settings$cards2","metricDisplayPassedData","dataSet","chartId","metricId","metric","_objectSpread","display","graphCardHelpers","data","isClone","groupMetric","_camelCase","join","JSON","stringify","index","header","body","footer","Card","isPlain","CardHeader","CardTitle","Title","headingLevel","size","Loader","skeletonProps","SkeletonSize","CardBody","height","CardFooter","InventoryCardSubscriptions","props","Object","assign","_objectDestructuringEmpty","InventoryCard","cardActions","useGetInventory","useGetSubscriptionsInventory","useOnPage","useOnPageSubscriptions","useOnColumnSort","useOnColumnSortSubscriptions","useProductInventoryConfig","useProductInventorySubscriptionsConfig","useProductInventoryQuery","useProductInventorySubscriptionsQuery","_ref$isDisabled","_ref$getInventory","getInventory","reduxActions","_ref$useDispatch","_ref$useProductInvent","useAliasProductInventoryQuery","_ref$useSelectorsResp","useSelectorsResponse","useAliasSelectorsResponse","_useAliasSelectorsRes","_inventory$subscripti","inventory","subscriptionsInventory","cancelled","response","_objectWithoutProperties","_excluded","useShallowCompareEffect","offset","perPage","_defineProperty","_ref7","_ref7$sortColumns","sortColumns","SORT_TYPES","_ref7$useDispatch","_ref7$useProduct","_data","_ref8","updatedDirection","direction","updatedSortColumn","values","find","SortByDirection","SORT_DIRECTION_TYPES","InventoryTab","active","propTypes","PropTypes","useOnTab","tabs","InventoryTabs","activeTab","defaultActiveTab","t","useAliasOnTab","updatedActiveTab","_inventory$tabs","onTab","updatedChildren","child","_child$props","childProps","content","count","Tabs","translate","ProductView","_useAliasRouteDetail","useAliasRouteDetail","useRouteDetail","firstMatch","productGroup","renderProduct","config","initialInventoryFilters","initialSubscriptionsInventoryFilters","ProductViewContext","PageMessages","PageToolbar","Toolbar","PageSection","PageLayout","PageHeader","productLabel","appName","PageColumns","routerContext","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","_key","call","apply","state","updatedTabs","setState","_createClass","this","setTabData","prevProps","_isEqualWith","valueA","valueB","toString","_this$props","Tab","eventKey","TabTitleText","_this2","_this$state","_this$props2","hasOverflowScroll","PfTabs","activeKey","onSelect","event","mountOnEnter","unmountOnExit","inset","default","md","Grid","GridItem","span","renderTabs","hardFilterReset","isGroupVariantDisabled","useAliasProductToolbarQuery","useProductToolbarQuery","useAliasSelectCategoryOptions","useSelectCategoryOptions","useAliasToolbarFieldClear","useToolbarFieldClear","useAliasToolbarFieldClearAll","useToolbarFieldClearAll","useAliasToolbarFields","useToolbarFields","toolbarFieldQueries","_useAliasSelectCatego","currentCategory","options","clearField","clearAllFields","_useAliasToolbarField","itemFields","secondaryFields","PfToolbar","collapseListedFiltersBreakpoint","clearAllFilters","clearFiltersButtonText","ToolbarFieldGroupVariant","ToolbarContent","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarGroup","ToolbarItem","ToolbarFieldSelectCategory","filterName","OptionComponent","component","chipProps","categoryName","isClearable","chips","filterValue","setSelectedOptions","deleteChip","ToolbarFilter","showToolbarItem","isFilter","alignment","isStandalone","_ref$useBillingProvid","useBillingProviderOnSelect","useAliasBillingProviderOnSelect","_ref$useCategoryOnSel","useCategoryOnSelect","useAliasCategoryOnSelect","_ref$useSlaOnSelect","useSlaOnSelect","useAliasSlaOnSelect","_ref$useUsageOnSelect","useUsageOnSelect","useAliasUsageOnSelect","_ref$useVariantOnSele","useVariantOnSelect","useAliasVariantOnSelect","billingOnSelect","categoryOnSelect","slaOnSelect","usageOnSelect","variantOnSelect","field","_ref2$useProductQuery","useProductQuery","useAliasProductQuery","_ref2$useSelectCatego","useSelectCategoryOnSelect","useAliasSelectCategoryOnSelect","_ref2$useBillingProvi","_ref2$useCategoryOnSe","_ref2$useSlaOnSelect","_ref2$useUsageOnSelec","_ref2$useVariantOnSel","_useAliasProductQuery","billingProvider","category","sla","usage","selectCategoryOnSelect","_ref3$categoryOptions","categoryOptions","_ref3$useProductToolb","useProductToolbarConfig","_useAliasProductToolb2","filters","useMemo","setFilter","filterProps","categoryOptionValue","isItem","isSecondary","useToolbarFieldOptions","_ref$t","_ref$useRouteDetail","availableVariants","forEach","push","selected","sort","titleA","titleB","localeCompare","useOnSelect","_ref4$useDispatch","_ref4$useProduct","_ref5$value","_ref6","position","useAliasOnSelect","useAliasToolbarFieldOptions","updatedValue","_view$product","_view$product$variant","view","product","updatedOptions","element","ToolbarItemVariant","Select","selectedOptions","placeholder","SelectPosition"],"sourceRoot":""}