{"version":3,"file":"js/9877.1643138654621.c01d5d10891cb359d33b.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardMetric.js","webpack:///./src/components/graphCard/graphCardMetricTotals.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { GraphCardChart } from './graphCardChart';\nimport { useProductGraphConfig } from '../productView/productViewContext';\nimport { GraphCardContext } from './graphCardContext';\nimport { rhsmConstants } from '../../services/rhsm/rhsmConstants';\nimport { GraphCardMetricTotals } from './graphCardMetricTotals';\n\n/**\n * Display a single graph metric.\n *\n * @param {object} props\n * @param {object} props.metricFilter\n * @param {Function} props.useProductGraphConfig\n * @returns {Node}\n */\nconst GraphCardMetric = ({ metricFilter, useProductGraphConfig: useAliasProductGraphConfig }) => {\n  const [context, setContext] = useState({});\n  const { settings } = useAliasProductGraphConfig();\n\n  useEffect(() => {\n    setContext({\n      settings: {\n        padding: {\n          bottom: 75,\n          left: 75,\n          right: 45,\n          top: 45\n        },\n        ...settings,\n        isStandalone: true,\n        metric: metricFilter,\n        metrics: [metricFilter]\n      }\n    });\n  }, [metricFilter, settings, setContext]);\n\n  return (\n    <GraphCardContext.Provider value={context}>\n      <GraphCardMetricTotals>\n        <GraphCardChart />\n      </GraphCardMetricTotals>\n    </GraphCardContext.Provider>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphConfig: Function, metricFilter: object}}\n */\nGraphCardMetric.propTypes = {\n  metricFilter: PropTypes.shape({\n    id: PropTypes.oneOf([...Object.values(rhsmConstants.RHSM_API_PATH_METRIC_TYPES)])\n  }),\n  useProductGraphConfig: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphConfig: Function, metricFilter: object}}\n */\nGraphCardMetric.defaultProps = {\n  metricFilter: {},\n  useProductGraphConfig\n};\n\nexport { GraphCardMetric as default, GraphCardMetric };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter, CardTitle, Flex, FlexItem } from '@patternfly/react-core';\nimport moment from 'moment';\nimport _camelCase from 'lodash/camelCase';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useMetricsSelector } from './graphCardContext';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { Loader, SkeletonSize } from '../loader/loader';\nimport { dateHelpers, helpers } from '../../common';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldRangedMonthly';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Display totals for a single metric.\n *\n * @param {object} props\n * @param {Node} props.children\n * @param {Function} props.t\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardMetricTotals = ({\n  children,\n  t,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate } = useAliasProductGraphTallyQuery();\n  const { pending, error, fulfilled, dataSets = [] } = useAliasMetricsSelector();\n  const { data = [], id: metricId, meta = {} } = dataSets[0] || {};\n  const { date: lastDate, hasData: lastHasData, y: lastValue } = data[data.length - 1] || {};\n  const {\n    date: currentDate,\n    hasData: currentHasData,\n    y: currentValue\n  } = data.find(({ isCurrentDate }) => isCurrentDate === true) || {};\n\n  const { totalMonthlyDate: monthlyDate, totalMonthlyHasData: monthlyHasData, totalMonthlyValue: monthlyValue } = meta;\n\n  const { title: selectedMonth, isCurrent } =\n    toolbarFieldOptions.find(\n      option => option.title === startDate || option.value.startDate.toISOString() === startDate\n    ) || {};\n\n  const dailyDate = isCurrent ? currentDate : lastDate;\n  const dailyHasData = isCurrent ? currentHasData : lastHasData;\n  const dailyValue = isCurrent ? currentValue : lastValue;\n\n  return (\n    <Flex data-test={`graphMetricTotals-${_camelCase(metricId)}`} className=\"curiosity-usage-graph__totals\">\n      <Flex flex={{ default: 'flex_1' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-column\">\n          <Card\n            data-test=\"graphDailyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric_dailyTotal', {\n                context: metricId,\n                month: selectedMonth\n              })}\n            </CardTitle>\n            <MinHeight key=\"currentBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric_total',\n                      {\n                        context: (dailyHasData && metricId) || '',\n                        total: helpers\n                          .numberDisplay(dailyValue)\n                          ?.format({\n                            average: true,\n                            mantissa: 5,\n                            trimMantissa: true,\n                            lowPrecision: false\n                          })\n                          ?.toUpperCase()\n                      },\n                      [<strong title={dailyValue} aria-label={dailyValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"currentFooter\">\n              <CardFooter>\n                <div className={(!dailyHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    dailyDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(dailyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n          <Card\n            data-test=\"graphMonthlyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric_monthlyTotal', {\n                context: metricId,\n                month: selectedMonth\n              })}\n            </CardTitle>\n            <MinHeight key=\"totalMonthlyBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric_total',\n                      {\n                        context: (monthlyHasData && metricId) || '',\n                        total: helpers\n                          .numberDisplay(monthlyValue)\n                          ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: false })\n                          ?.toUpperCase()\n                      },\n                      [<strong title={monthlyValue} aria-label={monthlyValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"totalMonthlyFooter\">\n              <CardFooter>\n                <div className={(!monthlyHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    monthlyDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(monthlyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n        </FlexItem>\n      </Flex>\n      <Flex flex={{ default: 'flex_3' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-graph-column\">{children}</FlexItem>\n      </Flex>\n    </Flex>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.propTypes = {\n  children: PropTypes.node,\n  t: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.defaultProps = {\n  children: null,\n  t: translate,\n  useMetricsSelector,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardMetricTotals as default, GraphCardMetricTotals };\n"],"names":["GraphCardMetric","metricFilter","useAliasProductGraphConfig","useProductGraphConfig","useState","context","setContext","settings","useEffect","padding","bottom","left","right","top","isStandalone","metric","metrics","GraphCardContext","value","GraphCardMetricTotals","GraphCardChart","defaultProps","children","t","useAliasMetricsSelector","useMetricsSelector","startDate","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","RHSM_API_QUERY_SET_TYPES","pending","error","fulfilled","dataSets","data","metricId","id","meta","length","lastDate","date","lastHasData","hasData","lastValue","y","find","isCurrentDate","currentDate","currentHasData","currentValue","monthlyDate","totalMonthlyDate","monthlyHasData","totalMonthlyHasData","monthlyValue","totalMonthlyValue","toolbarFieldOptions","option","title","toISOString","selectedMonth","isCurrent","dailyDate","dailyHasData","dailyValue","Flex","_camelCase","className","flex","default","direction","alignSelf","FlexItem","Card","CardTitle","month","MinHeight","key","CardBody","Loader","variant","skeletonProps","size","SkeletonSize","total","helpers","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","CardFooter","moment","dateHelpers","translate"],"sourceRoot":""}