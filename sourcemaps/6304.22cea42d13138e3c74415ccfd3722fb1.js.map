{"version":3,"file":"js/6304.db2534d91d1d61ae68bf.js","mappings":"4VAoBMA,EAAiB,SAAC,GAA2F,MAAzFC,EAAyF,EAAzFA,SAA0BC,EAA+D,EAA/EC,eAAqDC,EAA0B,EAA1CC,eAA0C,GAC7EC,EAAAA,EAAAA,UAAS,IADoE,eAC1GC,EAD0G,KAC9FC,EAD8F,QAErFF,EAAAA,EAAAA,UAAS,IAF4E,eAE1GG,EAF0G,KAElGC,EAFkG,OAG7DR,KAAyB,GAAtDS,EAH0F,EAGzGC,cAA0BC,EAH+E,EAG/EA,cAC5BC,EAA4C,KAA1BD,MAAAA,OAAA,EAAAA,EAAeE,UAAgBF,MAAAA,OAA/B,EAA+BA,EAAgB,IAC/DG,EAAUC,EAAAA,GAAAA,gBAA0BJ,MAAAA,GAAA,UAAAA,EAAgB,UAAhB,eAAoBG,QAAS,IAAjEA,MACAE,EAAgBd,IAAhBc,YA+CR,OA7CAC,EAAAA,EAAAA,IAAwB,WACtB,GAAIR,GAAaG,EAAiB,SACDM,EAAAA,GAAAA,kBAA8B,WAArDC,EADwB,EACxBA,UAAWC,EADa,EACbA,QACbC,GAAoB,kBACrBP,GADkB,mBAEpBQ,EAAAA,GAAAA,YAAmCC,EAAAA,GAAAA,QAFf,SAGpBD,EAAAA,GAAAA,WAAkCH,EAAUK,gBAHxB,SAIpBF,EAAAA,GAAAA,SAAgCF,EAAQI,eAJpB,IAOvBC,EAAAA,GAAAA,YAAAA,qBAA4ChB,EAAWY,MAExD,CAACZ,EAAWG,EAAiBE,KAEhCG,EAAAA,EAAAA,IAAwB,WACtB,IAAMS,EAAkB,GAEpB3B,EAASc,QACXc,OAAOC,QAAQZ,GAAaa,SAAQ,YAAkB,mBAAhBC,EAAgB,KAAXC,EAAW,KACpD,IAAwB,IAApB1B,EAAWyB,KAA2B,IAAVC,EAAgB,CAC9C,IAAMC,EAAUjC,EAASkC,MAAK,qBAAGC,KAAgBJ,KAE7CE,GACFN,EAAgBS,MAAhB,QACEL,IAAAA,GACGE,QAObxB,EACEkB,EAAgBU,KAAI,YAA0D,IAAvDN,EAAuD,EAAvDA,IAAKE,EAAkD,EAAlDA,QAASK,EAAyC,EAAzCA,MAAyC,IAAlCC,QAAAA,OAAkC,MAAxBC,EAAAA,aAAAA,KAAwB,EACtEC,EAAc,kBAAC,EAAAC,uBAAD,CAAwBC,QAAS,kBAAMpC,GAAc,kBAAKD,GAAN,cAAmByB,GAAM,QAEjG,OACE,kBAAC,EAAAa,MAAD,CAAOH,YAAaA,EAAaV,IAAKA,EAAKO,MAAOA,EAAOC,QAASA,GAC/DN,SAKR,CAAChB,EAAaX,EAAYN,KAEzBQ,MAAAA,OAAJ,EAAIA,EAAQM,QACH,yBAAK+B,UAAU,6BAA6BrC,GAG9C,MA0BTT,EAAe+C,aAAe,CAC5B9C,SAAU,CACR,CACEmC,GAAI,sBACJG,OAAOS,EAAAA,EAAAA,WAAU,sCACjBd,SAASc,EAAAA,EAAAA,WACP,uCACA,CACEC,QAA6D,KAApDC,EAAAA,GAAAA,yCAA0D,sBACnEC,QAASD,EAAAA,GAAAA,iBAEX,CACE,kBAAC,EAAAE,OAAD,CACEC,UAAQ,EACRC,UAAU,IACVd,QAAQ,OACRe,KAAM,kBAAC,EAAAC,oBAAD,MACNC,aAAa,QACbC,OAAO,SACPC,KAAMT,EAAAA,GAAAA,8CAMhB7C,eAAgBsB,EAAAA,GAAAA,cAAAA,eAChBxB,eAAAA,EAAAA,K,6ICjHIyD,EAAY,SAAC,GAAsE,IAApEC,EAAoE,EAApEA,WACXC,GAAYC,EADmE,EAAxDC,yBACvBF,QAD+E,EAEzCG,EAAAA,iBAAAA,sBAAuCH,GAA7EI,EAF+E,EAE/EA,eAAgBC,EAF+D,EAE/DA,kBAExB,OAAIN,EACK,KAIP,kBAAC,aAAD,MACIK,MAAAA,OAAA,EAAAA,EAAgBnD,SAAU,kBAAC,EAAAqD,iBAAD,CAAkBC,cAAeH,KAAuB,KACnFC,EAAkB7B,KAAI,SAAAgC,GAAY,OACjC,kBAAC,EAAAC,gBAAD,CAAiBvC,IAAG,oBAAesC,EAAalC,IAAMkC,aAAcA,SAqB5EV,EAAUb,aAAe,CACvBc,WAAYX,EAAAA,GAAAA,kBACZc,sBAAAA,EAAAA,wB,oPCvBIQ,EAAiB,SAAC,GAOlB,IANJC,EAMI,EANJA,EACkBC,EAKd,EALJC,iBACqBC,EAIjB,EAJJC,oBACoBC,EAGhB,EAHJC,mBACYC,EAER,EAFJC,WAC2BC,EACvB,EADJC,0BAEQxE,EAAcqE,IAAdrE,UADJ,EAEsBiE,IAAlBQ,SAAAA,OAFJ,MAEe,GAFf,EAGIC,EAAwCD,EAAxCC,cAAeC,EAAyBF,EAAzBE,OAHnB,EAG4CF,EAAjBG,QAAAA,OAH3B,MAGqC,GAHrC,EAK4CC,EAAgBN,IAAvDO,EAAAA,GAAAA,aALL,EAMiDX,IAA7CY,EANJ,EAMIA,QAASC,EANb,EAMaA,MANb,IAMoBC,KAAAA,OANpB,MAM2B,GAN3B,MAM+BC,SAAAA,OAN/B,MAM0C,GAN1C,EAOEC,EAAgBpB,KAEtBvD,EAAAA,EAAAA,IAAwB,WACtB2E,EAAcP,EAAQjD,KAAI,gBAAOyD,EAAP,EAAG3D,GAAH,MAAuB,CAAEA,GAAIzB,EAAW2E,OAAQS,SACzE,CAACR,EAAS5E,EAAWmF,IAExB,IAAME,GAAsBV,MAAAA,OAAA,EAAAA,EAAQlD,KAAR,WAAkBkD,MAAAA,OAAlB,EAAkBA,EAAQlD,KAAS,GAC3D6D,EAAuB,KAM3B,MAJ6B,mBAAlBZ,IACTY,EAAuBZ,EAAc,CAAEO,MAAM,UAAKA,MAIlD,kBAAC,EAAAM,KAAD,CAAMpD,UAAU,yBACd,kBAAC,EAAAqD,UAAD,CAAWnE,IAAI,mBACb,kBAAC,EAAAoE,WAAD,KACE,kBAAC,EAAAC,UAAD,KACE,kBAAC,EAAAC,MAAD,CAAOC,aAAa,KAAKC,KAAK,MAC3B/B,EAAE,8BAAD,OAA+BuB,GAAsB,CAAE/C,QAAStC,IAClE,kBAAC,EAAA8F,2BAAD,QAGHR,GACC,kBAAC,EAAAS,YAAD,CAAa5D,UAAY6C,EAAS,OAAW,IAAKM,KAIxD,kBAAC,EAAAE,UAAD,CAAWnE,IAAI,iBACb,kBAAC,EAAA2E,SAAD,KACE,yBAAK7D,WAAY6C,EAAS,OAAYD,GAAW,WAAa,IAC3DA,GAAW,kBAAC,EAAAkB,OAAD,CAAQpE,QAAQ,WAC1BkD,GACA,kBAAC,EAAAmB,MAAD,iBACM5C,EAAAA,iBAAAA,8BAA+C,CAAEmB,SAAAA,EAAUI,YAAAA,IADjE,CAEEK,SAAUA,EACViB,YAAa,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAV,OAAsB,kBAAC,EAAAC,qBAAD,CAAsBF,MAAOA,EAAOC,MAAOA,KAC9EE,aAAc,gBAAGF,EAAH,EAAGA,MAAH,OAAe,kBAAC,EAAAG,sBAAD,CAAuBH,MAAOA,aA+B3ExC,EAAezB,aAAe,CAC5B0B,EAAGzB,EAAAA,UACH2B,iBAAAA,EAAAA,iBACAE,oBAAAA,EAAAA,oBACAE,mBAAAA,EAAAA,mBACAE,WAAAA,EAAAA,WACAE,0BAAAA,EAAAA,4B,yKCpGIZ,EAAkB,SAAC,GAAwE,IAAtED,EAAsE,EAAtEA,aAAqCP,EAAiC,EAAxDC,sBAAwD,GACjE1D,EAAAA,EAAAA,UAAS,IADwD,eACxF2C,EADwF,KAC/EmE,EAD+E,KAEvFhC,EAAarB,IAAbqB,SAmBR,OAjBAiC,EAAAA,EAAAA,YAAU,WACRD,EAAW,CACThC,UAAU,gBACRkC,QAAS,CACPC,OAAQ,GACRC,KAAM,GACNC,MAAO,GACPC,IAAK,KAEJtC,GAPG,IAQNuC,cAAc,EACdrC,OAAQhB,EACRiB,QAAS,CAACjB,SAGb,CAACA,EAAcc,EAAUgC,IAG1B,kBAAC,EAAAQ,iBAAA,SAAD,CAA2B3F,MAAOgB,GAChC,kBAAC,EAAA4E,sBAAD,KACE,kBAAC,EAAArD,eAAD,SAuBRD,EAAgBxB,aAAe,CAC7BuB,aAAc,GACdN,sBAAAA,EAAAA,wB,4OCzCI6D,EAAwB,SAAC,GAKzB,IAJJC,EAII,EAJJA,SACArD,EAGI,EAHJA,EACoBK,EAEhB,EAFJC,mBAG+C1D,GAAc6D,EADzD,EADJC,6BAESM,EAAAA,GAAAA,YADL,EAEiDX,IAA7CY,EAFJ,EAEIA,QAASC,EAFb,EAEaA,MAAOoC,EAFpB,EAEoBA,UAFpB,IAE+BlC,SAF/B,cAE0C,GAF1C,GAGoD,IAAM,GAH1D,IAGID,KAAAA,OAHJ,MAGW,GAHX,EAGmBG,EAHnB,EAGe3D,GAHf,IAG6B4F,KAAAA,OAH7B,MAGoC,GAHpC,IAIoEpC,EAAKA,EAAK7E,OAAS,IAAM,GAAnFkH,EAJV,EAIIC,KAA4BC,EAJhC,EAIuBC,QAA4BC,EAJnD,EAIgDC,EAC5CC,EAA6DP,EAA7DO,iBAAkBC,EAA2CR,EAA3CQ,oBAAqBC,EAAsBT,EAAtBS,kBAL3C,EAQFC,EAAAA,oBAAAA,MACE,SAAAC,GAAM,OAAIA,EAAOpG,QAAUlB,GAAasH,EAAO1G,MAAMZ,UAAUK,gBAAkBL,MAC9E,GAHQuH,EAPX,EAOIrG,MAAsBsG,EAP1B,EAO0BA,UAK9B,OACE,kBAAC,EAAAC,KAAD,CAAMhG,UAAU,iCACd,kBAAC,EAAAgG,KAAD,CAAMC,KAAM,CAAEC,QAAS,UAAYC,UAAW,CAAED,QAAS,UAAYE,UAAW,CAAEF,QAAS,qBACzF,kBAAC,EAAAG,SAAD,CAAUrG,UAAU,wCAClB,kBAAC,EAAAoD,KAAD,CAAMpD,UAAS,oDAAgD6C,EAAS,OAAW,KACjF,kBAAC,EAAAU,UAAD,KACG5B,EAAE,iDAAkD,CACnDxB,QAAS,CAAC4F,GAAa,UAAW9C,GAClCqD,MAAOR,KAGX,kBAAC,EAAAzC,UAAD,CAAWnE,IAAI,eACb,kBAAC,EAAA2E,SAAD,KACE,6BACGjB,GAAW,kBAAC,EAAAkB,OAAD,CAAQpE,QAAQ,WAAW6G,cAAe,CAAE7C,KAAM8C,EAAAA,aAAAA,MAC7DvB,GACCtD,EACE,8CACA,CACExB,QAAUkF,GAAkBpC,GAAa,GACzCwD,MAAOC,GAAAA,CAAOnB,GACXoB,OAAO,CAAEC,SAAS,EAAMC,SAAU,EAAGC,cAAc,EAAMC,cAAc,IACvEC,eAEL,CAAC,4BAAQvH,MAAO8F,EAAc,aAAYA,SAKpD,kBAAC,EAAAlC,UAAD,CAAWnE,IAAI,iBACb,kBAAC,EAAA+H,WAAD,KACE,yBAAKjH,UAAaqF,EAA+B,GAAb,UACjCJ,GACCE,GACAxD,EAAE,mCAAoC,CACpCyD,KAAM8B,IAAAA,IAAW/B,GAAawB,OAAOrI,EAAAA,GAAAA,qBAAAA,qBAMjD,kBAAC,EAAA8E,KAAD,CAAMpD,UAAS,oDAAgD6C,EAAS,OAAW,KACjF,kBAAC,EAAAU,UAAD,KACG5B,EAAE,0CAA2C,CAAExB,QAAS8C,EAAUqD,MAAOR,KAE5E,kBAAC,EAAAzC,UAAD,CAAWnE,IAAI,oBACb,kBAAC,EAAA2E,SAAD,KACE,6BACGjB,GAAW,kBAAC,EAAAkB,OAAD,CAAQpE,QAAQ,WAAW6G,cAAe,CAAE7C,KAAM8C,EAAAA,aAAAA,MAC7DvB,GACCtD,EACE,uCACA,CACExB,QAAUuF,GAAuBzC,GAAa,GAC9CwD,MAAOC,GAAAA,CAAOf,GACXgB,OAAO,CAAEC,SAAS,EAAMC,SAAU,EAAGC,cAAc,EAAMC,cAAc,IACvEC,eAEL,CAAC,4BAAQvH,MAAOkG,EAAmB,aAAYA,SAKzD,kBAAC,EAAAtC,UAAD,CAAWnE,IAAI,sBACb,kBAAC,EAAA+H,WAAD,KACE,yBAAKjH,UAAa0F,EAAoC,GAAb,UACtCT,GACCQ,GACA9D,EAAE,mCAAoC,CACpCyD,KAAM8B,IAAAA,IAAWzB,GAAkBkB,OAAOrI,EAAAA,GAAAA,qBAAAA,uBAQ1D,kBAAC,EAAA0H,KAAD,CAAMC,KAAM,CAAEC,QAAS,UAAYC,UAAW,CAAED,QAAS,UAAYE,UAAW,CAAEF,QAAS,qBACzF,kBAAC,EAAAG,SAAD,CAAUrG,UAAU,8CAA8CgF,MAuB1ED,EAAsB9E,aAAe,CACnC+E,SAAU,KACVrD,EAAGzB,EAAAA,UACH+B,mBAAAA,EAAAA,mBACAI,0BAAAA,EAAAA,4B,oJCnIIf,G,SAAmB,SAAC,GAAyE,IAAvEC,EAAuE,EAAvEA,cAAsCN,EAAiC,EAAxDC,sBAAwD,GACnE1D,EAAAA,EAAAA,UAAS,IAD0D,eAC1F2C,EAD0F,KACjFmE,EADiF,KAEzFhC,EAAarB,IAAbqB,SAaR,OAXAiC,EAAAA,EAAAA,YAAU,WACRD,EAAW,CACThC,UAAU,kBACLA,GADG,IAENuC,cAAc,EACdrC,YAAQ2E,EACR1E,QAASlB,QAGZ,CAACA,EAAee,EAAUgC,IAG3B,kBAAC,EAAAQ,iBAAA,SAAD,CAA2B3F,MAAOgB,GAChC,kBAAC,EAAAuB,eAAD,SAwBNJ,EAAiBrB,aAAe,CAC9BsB,cAAe,GACfL,sBAAAA,EAAAA,wB,wHC3BIkG,EAAa,SAAbA,EAAc,GAAD,IACjBC,EADiB,EACjBA,cACAtG,EAFiB,EAEjBA,WACAuG,EAHiB,EAGjBA,UACAC,EAJiB,EAIjBA,UACAC,EALiB,EAKjBA,OACAC,EANiB,EAMjBA,OACAC,EAPiB,EAOjBA,UACAC,EARiB,EAQjBA,QACAjI,EATiB,EASjBA,QATiB,OAWjB,kBAAC,aAAD,CACE2H,cAAeA,EACfC,UAAWA,EACXvG,WAAYA,IAAewG,EAC3BA,UAAWA,EACXK,UAAW,SAACC,EAAOC,EAAMC,GAAd,OACTN,EAAO,CAAEI,MAAAA,EAAOF,QAASI,EAAOP,OAAQQ,EAAAA,kBAAAA,wBAA0CF,EAAMC,MAE1FE,gBAAiB,SAACJ,EAAOE,GAAR,OAAkBL,EAAU,CAAEG,MAAAA,EAAOF,QAASI,EAAOP,OAAQJ,EAAWnH,aAAauH,UACtGM,KAAME,EAAAA,kBAAAA,wBAA0CR,GAAUJ,EAAWnH,aAAauH,OAAQG,GAC1FA,QAASA,EACTjI,QAASA,KA8Bb0H,EAAWnH,aAAe,CACxBoH,cAAe,OACfC,WAAW,EACXvG,YAAY,EACZwG,UAAW,EACXC,OAAQ,EACRC,OAAQrH,EAAAA,GAAAA,KACRsH,UAAWtH,EAAAA,GAAAA,KACXuH,QAAS,GACTjI,QAAS,O,0RClDLwI,EAAc,SAAC,GAAsF,IAApFvG,EAAoF,EAApFA,EAAGwG,EAAiF,EAAjFA,aAAcC,EAAmE,EAAnEA,wBAAmE,GACXhL,EADW,EAA1CC,kBACxCgL,EADkF,EACjGvK,cAAiDwK,EADgD,EAClEC,iBAAqCxK,EAD6B,EAC7BA,cAoH5E,OACE,kBAAC,EAAAyK,WAAD,KACE,kBAAC,EAAAC,WAAD,CAAYC,aAAcJ,GACvB3G,EAAE,uBAAwB,CAAEtB,QAASD,EAAAA,GAAAA,gBAAyBD,QAASmI,KAE1E,kBAAC,EAAAK,aAAD,KAAeN,IAAmBO,EAAAA,GAAAA,QAAsC,kBAAC,UAAD,OACxE,kBAAC,EAAAC,YAAD,KAAc9K,EAAcyB,KAAI,SAAAsJ,GAAM,OAxHpB,SAAAA,GAAU,IAE5BC,EAUED,EAVFC,gBACAC,EASEF,EATFE,oBACAC,EAQEH,EARFG,4BACA/K,EAOE4K,EAPF5K,MACAgL,EAMEJ,EANFI,qBACAC,EAKEL,EALFK,wBACAC,EAIEN,EAJFM,yBACAC,EAGEP,EAHFO,qCACAxL,EAEEiL,EAFFjL,UACAyL,EACER,EADFQ,OAGF,IAAKzL,IAAcyL,EACjB,OAAO,KAfqB,MAsB1BnL,EAAAA,GAAAA,eAA0BD,EAAO,CAAE6K,gBAAAA,EAAiBC,oBAAAA,EAAqBC,4BAAAA,IAH1DM,EAnBW,EAmB5BR,gBACqBS,EApBO,EAoB5BR,oBAC6BS,EArBD,EAqB5BR,4BAGES,EAAmB,KAEnBtB,IACFsB,EACE,kBAAC,EAAAC,QAAD,CACEC,QAAS,2BAAIjI,EAAE,yCAA0C,CAAExB,QAAStC,KACpEgM,SAAUC,EAAAA,gBAAAA,IACVC,YAAY,EACZC,SAAU,EACVC,WAAY,IACZC,UAAW,GAEX,yBAAKlK,UAAU,wBACb,kBAAC,KAAD,SAMR,IAAMmK,EACJ,kBAAC,aAAD,KACGxI,EAAE,8BAA+B,CAAExB,QAAStC,IAC5C6L,GAIL,OACE,kBAAC,EAAAU,mBAAA,SAAD,CAA6BjL,MAAO2J,EAAQ5J,IAAG,kBAAarB,IAC1D,kBAAC,EAAAwM,YAAD,KACE,kBAAC,EAAAC,QAAD,OAEF,kBAAC,EAAAC,YAAD,KACG1M,IAAc+K,EAAAA,GAAAA,QACb,kBAAC,EAAA4B,mBAAD,CACEtL,IAAG,gBAAWrB,GACdK,MAAOqL,EACP1L,UAAWA,EACXyL,OAAQA,EACRmB,UAAWN,GAETO,IAAAA,eAAqBvC,IAAiBA,IACpB,IAAjBA,GAA0B,kBAAC,EAAAwC,wBAAD,CAAyBd,SAAUe,EAAAA,eAAAA,SAGnE/M,IAAc+K,EAAAA,GAAAA,QAAsC,kBAAC,EAAA9H,UAAD,OAEvD,kBAAC,EAAAyJ,YAAD,KACE,kBAAC,UAAD,CACErL,IAAG,oBAAerB,GAClBA,UAAWA,EACXkD,YACIoI,IAA4BE,GAAyCjJ,EAAAA,GAAAA,oBAGvEA,EAAAA,GAAAA,yBAAmC+I,GACnC,kBAAC,EAAA0B,aAAD,CACE3L,IAAG,0BAAqBrB,GACxB4B,MAAOkC,EAAE,+BAAgC,CAAExB,QAAS,CAAC,cAAetC,MAEpE,kBAAC,EAAAiN,uBAAD,CACE5L,IAAG,cAASrB,GACZkN,iBAAkB7B,EAClB8B,oBAAqB7B,EACrBtL,UAAWA,EACXyE,SAAU8G,EACVlL,MAAOsL,EACPF,OAAQA,MAIZlJ,EAAAA,GAAAA,iCAA2CiJ,GAC3C,kBAAC,EAAAwB,aAAD,CACE3L,IAAG,yBAAoBrB,GACvB4B,MAAOkC,EAAE,uCAAwC,CAAExB,QAAStC,KAE5D,kBAAC,EAAAoN,gCAAD,CACE/L,IAAG,eAAUrB,GACbmN,oBAAqB3B,EACrBxL,UAAWA,EACXK,MAAOuL,EACPH,OAAQA,QAgBsB4B,CAAcpC,SAsB9DZ,EAAYjI,aAAe,CACzB0B,EAAGzB,EAAAA,UACHiI,aAAc,KACdC,yBAAyB,EACzB/K,eAAAA,EAAAA,K,2ICrLI8N,EAAgC,kBACpC,kBAAC,EAAAjD,YAAD,CAAaC,aAAc,kBAAC,EAAAiD,0BAAD,CAA2BvB,SAAUe,EAAAA,eAAAA,QAA0BxC,yBAAuB,KAenH+C,EAA8BlL,aAAe","sources":["webpack:///./src/components/bannerMessages/bannerMessages.js","webpack:///./src/components/graphCard/graphCard.js","webpack:///./src/components/graphCard/graphCardChart.js","webpack:///./src/components/graphCard/graphCardMetric.js","webpack:///./src/components/graphCard/graphCardMetricTotals.js","webpack:///./src/components/graphCard/graphCardMetrics.js","webpack:///./src/components/pagination/pagination.js","webpack:///./src/components/productView/productView.js","webpack:///./src/components/productView/productViewOpenShiftDedicated.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, AlertActionCloseButton, AlertVariant, Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { useShallowCompareEffect } from 'react-use';\nimport { apiQueries, storeHooks } from '../../redux';\nimport { translate } from '../i18n/i18n';\nimport { dateHelpers, helpers } from '../../common';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { useRouteDetail } from '../../hooks/useRouter';\n\n/**\n * Render banner messages.\n *\n * @param {object} props\n * @param {Array} props.messages\n * @param {Function} props.useRouteDetail\n * @param {Function} props.useAppMessages\n * @returns {Node}\n */\nconst BannerMessages = ({ messages, useRouteDetail: useAliasRouteDetail, useAppMessages: useAliasAppMessages }) => {\n  const [hideAlerts, setHideAlerts] = useState({});\n  const [alerts, setAlerts] = useState([]);\n  const { pathParameter: productId, productConfig } = useAliasRouteDetail() || {};\n  const isProductConfig = productConfig?.length === 1 && productConfig?.[0];\n  const { query } = apiQueries.parseRhsmQuery(productConfig?.[0]?.query || {});\n  const { appMessages } = useAliasAppMessages();\n\n  useShallowCompareEffect(() => {\n    if (productId && isProductConfig) {\n      const { startDate, endDate } = dateHelpers.getRangedDateTime('CURRENT');\n      const updatedGraphQuery = {\n        ...query,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString(),\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      };\n\n      storeHooks.rhsmActions.useGetMessageReports(productId, updatedGraphQuery);\n    }\n  }, [productId, isProductConfig, query]);\n\n  useShallowCompareEffect(() => {\n    const updatedMessages = [];\n\n    if (messages.length) {\n      Object.entries(appMessages).forEach(([key, value]) => {\n        if (hideAlerts[key] !== true && value === true) {\n          const message = messages.find(({ id }) => id === key);\n\n          if (message) {\n            updatedMessages.push({\n              key,\n              ...message\n            });\n          }\n        }\n      });\n    }\n\n    setAlerts(\n      updatedMessages.map(({ key, message, title, variant = AlertVariant.info }) => {\n        const actionClose = <AlertActionCloseButton onClose={() => setHideAlerts({ ...hideAlerts, [key]: true })} />;\n\n        return (\n          <Alert actionClose={actionClose} key={key} title={title} variant={variant}>\n            {message}\n          </Alert>\n        );\n      })\n    );\n  }, [appMessages, hideAlerts, messages]);\n\n  if (alerts?.length) {\n    return <div className=\"curiosity-banner-messages\">{alerts}</div>;\n  }\n\n  return null;\n};\n\n/**\n * Prop types.\n *\n * @type {{useAppMessages: Function, messages: Array, useRouteDetail: Function}}\n */\nBannerMessages.propTypes = {\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.node.isRequired,\n      message: PropTypes.node.isRequired,\n      variant: PropTypes.oneOf([...Object.values(AlertVariant)])\n    })\n  ),\n  useAppMessages: PropTypes.func,\n  useRouteDetail: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useAppMessages: Function, messages: Array, useRouteDetail: Function}}\n */\nBannerMessages.defaultProps = {\n  messages: [\n    {\n      id: 'cloudigradeMismatch',\n      title: translate('curiosity-banner.dataMismatchTitle'),\n      message: translate(\n        'curiosity-banner.dataMismatchMessage',\n        {\n          context: helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS !== '' && 'cloudigradeMismatch',\n          appName: helpers.UI_DISPLAY_NAME\n        },\n        [\n          <Button\n            isInline\n            component=\"a\"\n            variant=\"link\"\n            icon={<ExternalLinkAltIcon />}\n            iconPosition=\"right\"\n            target=\"_blank\"\n            href={helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS}\n          />\n        ]\n      )\n    }\n  ],\n  useAppMessages: storeHooks.rhsmSelectors.useAppMessages,\n  useRouteDetail\n};\n\nexport { BannerMessages as default, BannerMessages };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProductGraphConfig } from '../productView/productViewContext';\nimport { helpers } from '../../common';\nimport { GraphCardMetrics } from './graphCardMetrics';\nimport { GraphCardMetric } from './graphCardMetric';\nimport { graphCardHelpers } from './graphCardHelpers';\n\n/**\n * Set up graph cards. Expand filters with base graph settings.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useProductGraphConfig\n * @returns {Node}\n */\nconst GraphCard = ({ isDisabled, useProductGraphConfig: useAliasProductGraphConfig }) => {\n  const { filters } = useAliasProductGraphConfig();\n  const { groupedFilters, standaloneFilters } = graphCardHelpers.generateChartSettings(filters);\n\n  if (isDisabled) {\n    return null;\n  }\n\n  return (\n    <React.Fragment>\n      {(groupedFilters?.length && <GraphCardMetrics metricFilters={groupedFilters} />) || null}\n      {standaloneFilters.map(metricFilter => (\n        <GraphCardMetric key={`graphCard_${metricFilter.id}`} metricFilter={metricFilter} />\n      ))}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphConfig: Function, isDisabled: boolean}}\n */\nGraphCard.propTypes = {\n  isDisabled: PropTypes.bool,\n  useProductGraphConfig: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphConfig: Function, isDisabled: boolean}}\n */\nGraphCard.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_GRAPH,\n  useProductGraphConfig\n};\n\nexport { GraphCard as default, GraphCard };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardActions, CardBody, CardHeader, CardTitle, Title } from '@patternfly/react-core';\nimport { useShallowCompareEffect } from 'react-use';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useGraphCardContext, useGetGraphTally, useMetricsSelector } from './graphCardContext';\nimport { graphCardHelpers } from './graphCardHelpers';\nimport { Chart } from '../chart/chart';\nimport { GraphCardChartLegend } from './graphCardChartLegend';\nimport { GraphCardChartTooltip } from './graphCardChartTooltip';\nimport { GraphCardChartTitleTooltip } from './graphCardChartTitleTooltip';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { Loader } from '../loader/loader';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A chart/graph card.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useGetGraphTally\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProduct\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardChart = ({\n  t,\n  useGetGraphTally: useAliasGetGraphTally,\n  useGraphCardContext: useAliasGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProduct: useAliasProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productId } = useAliasProduct();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { actionDisplay, metric, metrics = [] } = settings;\n\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n  const { pending, error, data = {}, dataSets = [] } = useAliasMetricsSelector();\n  const getGraphTally = useAliasGetGraphTally();\n\n  useShallowCompareEffect(() => {\n    getGraphTally(metrics.map(({ id: metricId }) => ({ id: productId, metric: metricId })));\n  }, [metrics, productId, getGraphTally]);\n\n  const standaloneMetricId = (metric?.id && `_${metric?.id}`) || '';\n  let updatedActionDisplay = null;\n\n  if (typeof actionDisplay === 'function') {\n    updatedActionDisplay = actionDisplay({ data: { ...data } });\n  }\n\n  return (\n    <Card className=\"curiosity-usage-graph\">\n      <MinHeight key=\"headerMinHeight\">\n        <CardHeader>\n          <CardTitle>\n            <Title headingLevel=\"h2\" size=\"lg\">\n              {t(`curiosity-graph.cardHeading${standaloneMetricId}`, { context: productId })}\n              <GraphCardChartTitleTooltip />\n            </Title>\n          </CardTitle>\n          {updatedActionDisplay && (\n            <CardActions className={(error && 'blur') || ''}>{updatedActionDisplay}</CardActions>\n          )}\n        </CardHeader>\n      </MinHeight>\n      <MinHeight key=\"bodyMinHeight\">\n        <CardBody>\n          <div className={(error && 'blur') || (pending && 'fadein') || ''}>\n            {pending && <Loader variant=\"graph\" />}\n            {!pending && (\n              <Chart\n                {...graphCardHelpers.generateExtendedChartSettings({ settings, granularity })}\n                dataSets={dataSets}\n                chartLegend={({ chart, datum }) => <GraphCardChartLegend chart={chart} datum={datum} />}\n                chartTooltip={({ datum }) => <GraphCardChartTooltip datum={datum} />}\n              />\n            )}\n          </div>\n        </CardBody>\n      </MinHeight>\n    </Card>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, useProductGraphTallyQuery: Function,\n *     useMetricsSelector: Function, useGetGraphTally: Function}}\n */\nGraphCardChart.propTypes = {\n  t: PropTypes.func,\n  useGetGraphTally: PropTypes.func,\n  useGraphCardContext: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, useProductGraphTallyQuery: Function,\n *     useMetricsSelector: Function, useGetGraphTally: Function}}\n */\nGraphCardChart.defaultProps = {\n  t: translate,\n  useGetGraphTally,\n  useGraphCardContext,\n  useMetricsSelector,\n  useProduct,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChart as default, GraphCardChart };\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { GraphCardChart } from './graphCardChart';\nimport { useProductGraphConfig } from '../productView/productViewContext';\nimport { GraphCardContext } from './graphCardContext';\nimport { rhsmConstants } from '../../services/rhsm/rhsmConstants';\nimport { GraphCardMetricTotals } from './graphCardMetricTotals';\n\n/**\n * Display a single graph metric.\n *\n * @param {object} props\n * @param {object} props.metricFilter\n * @param {Function} props.useProductGraphConfig\n * @returns {Node}\n */\nconst GraphCardMetric = ({ metricFilter, useProductGraphConfig: useAliasProductGraphConfig }) => {\n  const [context, setContext] = useState({});\n  const { settings } = useAliasProductGraphConfig();\n\n  useEffect(() => {\n    setContext({\n      settings: {\n        padding: {\n          bottom: 75,\n          left: 75,\n          right: 45,\n          top: 45\n        },\n        ...settings,\n        isStandalone: true,\n        metric: metricFilter,\n        metrics: [metricFilter]\n      }\n    });\n  }, [metricFilter, settings, setContext]);\n\n  return (\n    <GraphCardContext.Provider value={context}>\n      <GraphCardMetricTotals>\n        <GraphCardChart />\n      </GraphCardMetricTotals>\n    </GraphCardContext.Provider>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphConfig: Function, metricFilter: object}}\n */\nGraphCardMetric.propTypes = {\n  metricFilter: PropTypes.shape({\n    id: PropTypes.oneOf([...Object.values(rhsmConstants.RHSM_API_PATH_METRIC_TYPES)])\n  }),\n  useProductGraphConfig: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphConfig: Function, metricFilter: object}}\n */\nGraphCardMetric.defaultProps = {\n  metricFilter: {},\n  useProductGraphConfig\n};\n\nexport { GraphCardMetric as default, GraphCardMetric };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter, CardTitle, Flex, FlexItem } from '@patternfly/react-core';\nimport moment from 'moment';\nimport numbro from 'numbro';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useMetricsSelector } from './graphCardContext';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { Loader, SkeletonSize } from '../loader/loader';\nimport { dateHelpers } from '../../common';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldRangedMonthly';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Display totals for a single metric.\n *\n * @param {object} props\n * @param {Node} props.children\n * @param {Function} props.t\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardMetricTotals = ({\n  children,\n  t,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate } = useAliasProductGraphTallyQuery();\n  const { pending, error, fulfilled, dataSets = [] } = useAliasMetricsSelector();\n  const { data = [], id: metricId, meta = {} } = dataSets[0] || {};\n  const { date: currentDate, hasData: currentHasData, y: currentValue } = data[data.length - 1] || {};\n  const { totalMonthlyDate, totalMonthlyHasData, totalMonthlyValue } = meta;\n\n  const { title: selectedMonth, isCurrent } =\n    toolbarFieldOptions.find(\n      option => option.title === startDate || option.value.startDate.toISOString() === startDate\n    ) || {};\n\n  return (\n    <Flex className=\"curiosity-usage-graph__totals\">\n      <Flex flex={{ default: 'flex_1' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-column\">\n          <Card className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}>\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric_currentTotal', {\n                context: [isCurrent && 'current', metricId],\n                month: selectedMonth\n              })}\n            </CardTitle>\n            <MinHeight key=\"currentBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric_currentTotal',\n                      {\n                        context: (currentHasData && metricId) || '',\n                        total: numbro(currentValue)\n                          .format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: false })\n                          .toUpperCase()\n                      },\n                      [<strong title={currentValue} aria-label={currentValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"currentFooter\">\n              <CardFooter>\n                <div className={(!currentHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    currentDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(currentDate).format(dateHelpers.timestampTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n          <Card className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}>\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric_total', { context: metricId, month: selectedMonth })}\n            </CardTitle>\n            <MinHeight key=\"totalMonthlyBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric_total',\n                      {\n                        context: (totalMonthlyHasData && metricId) || '',\n                        total: numbro(totalMonthlyValue)\n                          .format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: false })\n                          .toUpperCase()\n                      },\n                      [<strong title={totalMonthlyValue} aria-label={totalMonthlyValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"totalMonthlyFooter\">\n              <CardFooter>\n                <div className={(!totalMonthlyHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    totalMonthlyDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(totalMonthlyDate).format(dateHelpers.timestampTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n        </FlexItem>\n      </Flex>\n      <Flex flex={{ default: 'flex_3' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-graph-column\">{children}</FlexItem>\n      </Flex>\n    </Flex>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.propTypes = {\n  children: PropTypes.node,\n  t: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.defaultProps = {\n  children: null,\n  t: translate,\n  useMetricsSelector,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardMetricTotals as default, GraphCardMetricTotals };\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { GraphCardChart } from './graphCardChart';\nimport { useProductGraphConfig } from '../productView/productViewContext';\nimport { GraphCardContext } from './graphCardContext';\nimport { rhsmConstants } from '../../services/rhsm/rhsmConstants';\n\n/**\n * Display a single graph metric.\n *\n * @param {object} props\n * @param {Array} props.metricFilters\n * @param {Function} props.useProductGraphConfig\n * @returns {Node}\n */\nconst GraphCardMetrics = ({ metricFilters, useProductGraphConfig: useAliasProductGraphConfig }) => {\n  const [context, setContext] = useState({});\n  const { settings } = useAliasProductGraphConfig();\n\n  useEffect(() => {\n    setContext({\n      settings: {\n        ...settings,\n        isStandalone: false,\n        metric: undefined,\n        metrics: metricFilters\n      }\n    });\n  }, [metricFilters, settings, setContext]);\n\n  return (\n    <GraphCardContext.Provider value={context}>\n      <GraphCardChart />\n    </GraphCardContext.Provider>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphConfig: Function, metricFilters: Array}}\n */\nGraphCardMetrics.propTypes = {\n  metricFilters: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.oneOf([...Object.values(rhsmConstants.RHSM_API_PATH_METRIC_TYPES)])\n    })\n  ),\n  useProductGraphConfig: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphConfig: Function, metricFilters: Array}}\n */\nGraphCardMetrics.defaultProps = {\n  metricFilters: [],\n  useProductGraphConfig\n};\n\nexport { GraphCardMetrics as default, GraphCardMetrics };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Pagination as PfPagination } from '@patternfly/react-core';\nimport { helpers } from '../../common';\nimport { paginationHelpers } from './paginationHelpers';\n\n/**\n * ToDo: Apply locale/translation to the PF Pagination \"titles\" prop.\n */\n/**\n * FixMe: PF Pagination component offset property is either broken, confusing to implement, ...\n * or requires an equivalent effort to using page. There appears to be confusing behavior in how\n * the next offset range is calculated. It fails to update when passing in the next expected\n * sequence using the returned starting index. We'll continue emulating the use of \"offset\"\n * by performing our own calculation and applying it to the page property instead.\n */\n/**\n * Pagination component.\n *\n * @param {object} props\n * @param {string} props.dropDirection\n * @param {boolean} props.isDisabled\n * @param {boolean} props.isCompact\n * @param {number} props.itemCount\n * @param {number} props.offset\n * @param {Function} props.onPage\n * @param {Function} props.onPerPage\n * @param {number} props.perPage\n * @param {string} props.variant\n * @returns {Node}\n */\nconst Pagination = ({\n  dropDirection,\n  isDisabled,\n  isCompact,\n  itemCount,\n  offset,\n  onPage,\n  onPerPage,\n  perPage,\n  variant\n}) => (\n  <PfPagination\n    dropDirection={dropDirection}\n    isCompact={isCompact}\n    isDisabled={isDisabled || !itemCount}\n    itemCount={itemCount}\n    onSetPage={(event, page, limit) =>\n      onPage({ event, perPage: limit, offset: paginationHelpers.calculateOffsetFromPage(page, limit) })\n    }\n    onPerPageSelect={(event, limit) => onPerPage({ event, perPage: limit, offset: Pagination.defaultProps.offset })}\n    page={paginationHelpers.calculatePageFromOffset(offset || Pagination.defaultProps.offset, perPage)}\n    perPage={perPage}\n    variant={variant}\n  />\n);\n\n/**\n * Prop types\n *\n * @type {{isCompact: boolean, onPage: Function, perPage: number, offset: number,\n *     dropDirection: string, onPerPage: Function, variant: null, isDisabled: boolean,\n *     itemCount: number}}\n */\nPagination.propTypes = {\n  dropDirection: PropTypes.oneOf(['up', 'down']),\n  isCompact: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  itemCount: PropTypes.number,\n  offset: PropTypes.number,\n  onPage: PropTypes.func,\n  onPerPage: PropTypes.func,\n  perPage: PropTypes.number,\n  variant: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{isCompact: boolean, onPage: Function, perPage: number, offset: number,\n *     dropDirection: string, onPerPage: Function, variant: null, isDisabled: boolean,\n *     itemCount: number}}\n */\nPagination.defaultProps = {\n  dropDirection: 'down',\n  isCompact: false,\n  isDisabled: false,\n  itemCount: 0,\n  offset: 0,\n  onPage: helpers.noop,\n  onPerPage: helpers.noop,\n  perPage: 10,\n  variant: null\n};\n\nexport { Pagination as default, Pagination };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport { useRouteDetail } from '../../hooks/useRouter';\nimport { ProductViewContext } from './productViewContext';\nimport { PageLayout, PageHeader, PageSection, PageToolbar, PageMessages, PageColumns } from '../pageLayout/pageLayout';\nimport { apiQueries } from '../../redux';\nimport { ConnectedGraphCard as ConnectedGraphCardDeprecated } from '../graphCard/graphCard.deprecated';\nimport { GraphCard } from '../graphCard/graphCard';\nimport { Toolbar } from '../toolbar/toolbar';\nimport { ConnectedInventoryList } from '../inventoryList/inventoryList';\nimport { helpers } from '../../common';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport { SelectPosition } from '../form/select';\nimport { ToolbarFieldGranularity } from '../toolbar/toolbarFieldGranularity';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport { ConnectedInventorySubscriptions } from '../inventorySubscriptions/inventorySubscriptions';\nimport { RHSM_API_PATH_PRODUCT_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * ToDo: base for default product layouts, add additional props for various toolbars\n * Next steps include...\n * Consider being able to pass customized toolbars for GraphCard and the\n * various Inventory displays. Have to evaluate how to handle the global toolbar, one\n * consideration is creating optional widgets with self-contained state update ability\n * based off of context/props/etc.\n *\n * Moving existing products to this layout, or maintaining them \"as is\", then renaming and\n * relocating them to this directory if they've been customized beyond a basic layout.\n */\n/**\n * Display product columns.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Node|boolean} props.toolbarGraph\n * @param {boolean} props.toolbarGraphDescription\n * @param {Function} props.useRouteDetail\n * @returns {Node}\n */\nconst ProductView = ({ t, toolbarGraph, toolbarGraphDescription, useRouteDetail: useAliasRouteDetail }) => {\n  const { pathParameter: routeProductId, productParameter: routeProductLabel, productConfig } = useAliasRouteDetail();\n\n  const renderProduct = config => {\n    const {\n      graphTallyQuery,\n      inventoryHostsQuery,\n      inventorySubscriptionsQuery,\n      query,\n      initialGuestsFilters,\n      initialInventoryFilters,\n      initialInventorySettings,\n      initialSubscriptionsInventoryFilters,\n      productId,\n      viewId\n    } = config;\n\n    if (!productId || !viewId) {\n      return null;\n    }\n\n    const {\n      graphTallyQuery: initialGraphTallyQuery,\n      inventoryHostsQuery: initialInventoryHostsQuery,\n      inventorySubscriptionsQuery: initialInventorySubscriptionsQuery\n    } = apiQueries.parseRhsmQuery(query, { graphTallyQuery, inventoryHostsQuery, inventorySubscriptionsQuery });\n\n    let graphCardTooltip = null;\n\n    if (toolbarGraphDescription) {\n      graphCardTooltip = (\n        <Tooltip\n          content={<p>{t('curiosity-graph.cardHeadingDescription', { context: productId })}</p>}\n          position={TooltipPosition.top}\n          enableFlip={false}\n          distance={5}\n          entryDelay={100}\n          exitDelay={0}\n        >\n          <sup className=\"curiosity-icon__info\">\n            <InfoCircleIcon />\n          </sup>\n        </Tooltip>\n      );\n    }\n\n    const graphCardTitle = (\n      <React.Fragment>\n        {t('curiosity-graph.cardHeading', { context: productId })}\n        {graphCardTooltip}\n      </React.Fragment>\n    );\n\n    return (\n      <ProductViewContext.Provider value={config} key={`product_${productId}`}>\n        <PageToolbar>\n          <Toolbar />\n        </PageToolbar>\n        <PageSection>\n          {productId !== RHSM_API_PATH_PRODUCT_TYPES.RHOSAK && (\n            <ConnectedGraphCardDeprecated\n              key={`graph_${productId}`}\n              query={initialGraphTallyQuery}\n              productId={productId}\n              viewId={viewId}\n              cardTitle={graphCardTitle}\n            >\n              {(React.isValidElement(toolbarGraph) && toolbarGraph) ||\n                (toolbarGraph !== false && <ToolbarFieldGranularity position={SelectPosition.right} />)}\n            </ConnectedGraphCardDeprecated>\n          )}\n          {productId === RHSM_API_PATH_PRODUCT_TYPES.RHOSAK && <GraphCard />}\n        </PageSection>\n        <PageSection>\n          <InventoryTabs\n            key={`inventory_${productId}`}\n            productId={productId}\n            isDisabled={\n              (!initialInventoryFilters && !initialSubscriptionsInventoryFilters) || helpers.UI_DISABLED_TABLE\n            }\n          >\n            {!helpers.UI_DISABLED_TABLE_HOSTS && initialInventoryFilters && (\n              <InventoryTab\n                key={`inventory_hosts_${productId}`}\n                title={t('curiosity-inventory.tabHosts', { context: ['noInstances', productId] })}\n              >\n                <ConnectedInventoryList\n                  key={`inv_${productId}`}\n                  filterGuestsData={initialGuestsFilters}\n                  filterInventoryData={initialInventoryFilters}\n                  productId={productId}\n                  settings={initialInventorySettings}\n                  query={initialInventoryHostsQuery}\n                  viewId={viewId}\n                />\n              </InventoryTab>\n            )}\n            {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && initialSubscriptionsInventoryFilters && (\n              <InventoryTab\n                key={`inventory_subs_${productId}`}\n                title={t('curiosity-inventory.tabSubscriptions', { context: productId })}\n              >\n                <ConnectedInventorySubscriptions\n                  key={`subs_${productId}`}\n                  filterInventoryData={initialSubscriptionsInventoryFilters}\n                  productId={productId}\n                  query={initialInventorySubscriptionsQuery}\n                  viewId={viewId}\n                />\n              </InventoryTab>\n            )}\n          </InventoryTabs>\n        </PageSection>\n      </ProductViewContext.Provider>\n    );\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader productLabel={routeProductLabel}>\n        {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: routeProductLabel })}\n      </PageHeader>\n      <PageMessages>{routeProductId !== RHSM_API_PATH_PRODUCT_TYPES.RHOSAK && <BannerMessages />}</PageMessages>\n      <PageColumns>{productConfig.map(config => renderProduct(config))}</PageColumns>\n    </PageLayout>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), toolbarGraphDescription: boolean, useRouteDetail: Function}}\n */\nProductView.propTypes = {\n  t: PropTypes.func,\n  toolbarGraph: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n  toolbarGraphDescription: PropTypes.bool,\n  useRouteDetail: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), toolbarGraphDescription: boolean, useRouteDetail: Function}}\n */\nProductView.defaultProps = {\n  t: translate,\n  toolbarGraph: null,\n  toolbarGraphDescription: false,\n  useRouteDetail\n};\n\nexport { ProductView as default, ProductView };\n","import React from 'react';\nimport { ProductView } from './productView';\nimport { SelectPosition } from '../form/select';\nimport { ToolbarFieldRangedMonthly } from '../toolbar/toolbarFieldRangedMonthly';\n\n/**\n * An OpenShift Dedicated configured view.\n *\n * @returns {Node}\n */\nconst ProductViewOpenShiftDedicated = () => (\n  <ProductView toolbarGraph={<ToolbarFieldRangedMonthly position={SelectPosition.right} />} toolbarGraphDescription />\n);\n\n/**\n * Prop types.\n *\n * @type {{}}\n */\nProductViewOpenShiftDedicated.propTypes = {};\n\n/**\n * Default props.\n *\n * @type {{}}\n */\nProductViewOpenShiftDedicated.defaultProps = {};\n\nexport { ProductViewOpenShiftDedicated as default, ProductViewOpenShiftDedicated };\n"],"names":["BannerMessages","messages","useAliasRouteDetail","useRouteDetail","useAliasAppMessages","useAppMessages","useState","hideAlerts","setHideAlerts","alerts","setAlerts","productId","pathParameter","productConfig","isProductConfig","length","query","apiQueries","appMessages","useShallowCompareEffect","dateHelpers","startDate","endDate","updatedGraphQuery","RHSM_API_QUERY_TYPES","GRANULARITY_TYPES","toISOString","storeHooks","updatedMessages","Object","entries","forEach","key","value","message","find","id","push","map","title","variant","AlertVariant","actionClose","AlertActionCloseButton","onClose","Alert","className","defaultProps","translate","context","helpers","appName","Button","isInline","component","icon","ExternalLinkAltIcon","iconPosition","target","href","GraphCard","isDisabled","filters","useAliasProductGraphConfig","useProductGraphConfig","graphCardHelpers","groupedFilters","standaloneFilters","GraphCardMetrics","metricFilters","metricFilter","GraphCardMetric","GraphCardChart","t","useAliasGetGraphTally","useGetGraphTally","useAliasGraphCardContext","useGraphCardContext","useAliasMetricsSelector","useMetricsSelector","useAliasProduct","useProduct","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","settings","actionDisplay","metric","metrics","granularity","RHSM_API_QUERY_SET_TYPES","pending","error","data","dataSets","getGraphTally","metricId","standaloneMetricId","updatedActionDisplay","Card","MinHeight","CardHeader","CardTitle","Title","headingLevel","size","GraphCardChartTitleTooltip","CardActions","CardBody","Loader","Chart","chartLegend","chart","datum","GraphCardChartLegend","chartTooltip","GraphCardChartTooltip","setContext","useEffect","padding","bottom","left","right","top","isStandalone","GraphCardContext","GraphCardMetricTotals","children","fulfilled","meta","currentDate","date","currentHasData","hasData","currentValue","y","totalMonthlyDate","totalMonthlyHasData","totalMonthlyValue","toolbarFieldOptions","option","selectedMonth","isCurrent","Flex","flex","default","direction","alignSelf","FlexItem","month","skeletonProps","SkeletonSize","total","numbro","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","CardFooter","moment","undefined","Pagination","dropDirection","isCompact","itemCount","offset","onPage","onPerPage","perPage","onSetPage","event","page","limit","paginationHelpers","onPerPageSelect","ProductView","toolbarGraph","toolbarGraphDescription","routeProductId","routeProductLabel","productParameter","PageLayout","PageHeader","productLabel","PageMessages","RHSM_API_PATH_PRODUCT_TYPES","PageColumns","config","graphTallyQuery","inventoryHostsQuery","inventorySubscriptionsQuery","initialGuestsFilters","initialInventoryFilters","initialInventorySettings","initialSubscriptionsInventoryFilters","viewId","initialGraphTallyQuery","initialInventoryHostsQuery","initialInventorySubscriptionsQuery","graphCardTooltip","Tooltip","content","position","TooltipPosition","enableFlip","distance","entryDelay","exitDelay","graphCardTitle","ProductViewContext","PageToolbar","Toolbar","PageSection","ConnectedGraphCard","cardTitle","React","ToolbarFieldGranularity","SelectPosition","InventoryTab","ConnectedInventoryList","filterGuestsData","filterInventoryData","ConnectedInventorySubscriptions","renderProduct","ProductViewOpenShiftDedicated","ToolbarFieldRangedMonthly"],"sourceRoot":""}