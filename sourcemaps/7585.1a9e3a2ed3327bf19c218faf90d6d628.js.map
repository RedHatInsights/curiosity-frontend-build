{"version":3,"file":"js/7585.4e9bb7ef4cafe261abd9.js","mappings":"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","sources":["webpack:///./src/components/bannerMessages/bannerMessages.js","webpack:///./src/components/bannerMessages/bannerMessagesContext.js","webpack:///./src/components/productView/productViewContext.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, AlertActionCloseButton, AlertGroup, AlertVariant } from '@patternfly/react-core';\nimport { useBannerMessages, useRemoveBannerMessages } from './bannerMessagesContext';\n\n/**\n * Banner alert messages for a product view.\n *\n * @memberof Components\n * @module BannerMessages\n * @property {module} BannerMessagesContext\n */\n\n/**\n * Render banner messages.\n *\n * @param {object} props\n * @param {Function} props.useBannerMessages\n * @param {Function} props.useRemoveBannerMessages\n * @returns {React.ReactNode}\n */\nconst BannerMessages = ({\n  useBannerMessages: useAliasBannerMessages,\n  useRemoveBannerMessages: useAliasRemoveBannerMessages\n}) => {\n  const bannerMessages = useAliasBannerMessages();\n  const removeBannerMessages = useAliasRemoveBannerMessages();\n\n  if (bannerMessages?.length) {\n    return (\n      <div className=\"curiosity-banner-messages\">\n        <AlertGroup isLiveRegion>\n          {bannerMessages?.map(({ id, message, title, variant = AlertVariant.info }) => {\n            const actionClose = <AlertActionCloseButton onClose={() => removeBannerMessages(id || title)} />;\n\n            return (\n              <Alert actionClose={actionClose} key={id || title} title={title} variant={variant} isInline>\n                {message}\n              </Alert>\n            );\n          })}\n        </AlertGroup>\n      </div>\n    );\n  }\n\n  return null;\n};\n\n/**\n * Prop types.\n *\n * @type {{useBannerMessages: Function, useRemoveBannerMessages: Function}}\n */\nBannerMessages.propTypes = {\n  useBannerMessages: PropTypes.func,\n  useRemoveBannerMessages: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useBannerMessages: Function, useRemoveBannerMessages: Function}}\n */\nBannerMessages.defaultProps = {\n  useBannerMessages,\n  useRemoveBannerMessages\n};\n\nexport { BannerMessages as default, BannerMessages };\n","import { useCallback } from 'react';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct } from '../productView/productViewContext';\nimport { helpers } from '../../common/helpers';\n\n/**\n * @memberof BannerMessages\n * @module BannerMessagesContext\n */\n\n/**\n * Retrieve, set and remove application banner messages from state.\n *\n * @param {object} options\n * @param {Function} options.useProduct\n * @param {Function} options.useSelector\n * @returns {{ bannerMessages: Array, setBannerMessages: Function, removeBannerMessages: Function }}\n */\nconst useBannerMessages = ({\n  useProduct: useAliasProduct = useProduct,\n  useSelector: useAliasSelector = storeHooks.reactRedux.useSelector\n} = {}) => {\n  const { productId } = useAliasProduct();\n  return useAliasSelector(({ messages }) => messages?.bannerMessages?.[productId], []);\n};\n\n/**\n * Provide a callback for removing application banner messages from state.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useBannerMessages\n * @returns {Function}\n */\nconst useRemoveBannerMessages = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useBannerMessages: useAliasBannerMessages = useBannerMessages\n} = {}) => {\n  const dispatch = useAliasDispatch();\n  const { productId } = useAliasProduct();\n  const bannerMessages = useAliasBannerMessages();\n\n  /**\n   * Remove a banner message from state.\n   *\n   * @callback removeBannerMessages\n   * @param {string} idTitle\n   */\n  return useCallback(\n    idTitle => {\n      if (productId && Array.isArray(bannerMessages) && bannerMessages.length) {\n        const filteredMessages = bannerMessages.filter(({ id, title }) => id !== idTitle && title !== idTitle);\n\n        dispatch({\n          type: reduxTypes.message.SET_BANNER_MESSAGES,\n          viewId: productId,\n          bannerMessages: filteredMessages || []\n        });\n      }\n    },\n    [bannerMessages, dispatch, productId]\n  );\n};\n\n/**\n * Provide a callback for setting application banner messages from state.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useBannerMessages\n * @returns {Function}\n */\nconst useSetBannerMessages = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useBannerMessages: useAliasBannerMessages = useBannerMessages\n} = {}) => {\n  const dispatch = useAliasDispatch();\n  const { productId } = useAliasProduct();\n  const bannerMessages = useAliasBannerMessages();\n\n  /**\n   * Set application messages for banner display\n   *\n   * @callback setBannerMessages\n   * @param {Array<{ id: string, message: string, title: string, variant: string }>|{ id: string, message: string, title: string, variant: string }} messages\n   */\n  return useCallback(\n    messages => {\n      if (productId) {\n        const updatedMessages = (Array.isArray(messages) && messages) || [messages];\n\n        dispatch({\n          type: reduxTypes.message.SET_BANNER_MESSAGES,\n          viewId: productId,\n          bannerMessages: [\n            ...(bannerMessages || []),\n            ...updatedMessages\n              .map(value => {\n                if (value?.id || value?.title || value?.message || value?.variant) {\n                  return value;\n                }\n\n                if (typeof value === 'string' || typeof value === 'number') {\n                  return {\n                    id: value,\n                    title: value\n                  };\n                }\n\n                return undefined;\n              })\n              .filter(value => value !== undefined)\n          ]\n        });\n      } else if (helpers.DEV_MODE) {\n        console.warn(\n          'Banner messages currently require the use of \"product id\". Product context is unavailable, try moving your banner message \"set\" lower in the component order.'\n        );\n      }\n    },\n    [bannerMessages, dispatch, productId]\n  );\n};\n\nconst context = {\n  useBannerMessages,\n  useRemoveBannerMessages,\n  useSetBannerMessages\n};\n\nexport { context as default, context, useBannerMessages, useRemoveBannerMessages, useSetBannerMessages };\n","import React, { useCallback, useContext } from 'react';\nimport _cloneDeep from 'lodash/cloneDeep';\nimport { reduxHelpers } from '../../redux/common';\nimport { storeHooks } from '../../redux/hooks';\nimport { rhsmConstants, RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common/helpers';\n\n/**\n * @memberof ProductView\n * @module ProductViewContext\n */\n\n/**\n * Route context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{}, helpers.noop];\n\nconst ProductViewContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated product view context.\n *\n * @returns {React.Context<{}>}\n */\nconst useProductViewContext = () => useContext(ProductViewContext);\n\n/**\n * Return a query object from initial product config and Redux store.\n *\n * @param {string} queryType An identifier used to pull from both config and Redux, they should named the same.\n * @param {object} options\n * @param {string} options.overrideId A custom identifier, used for scenarios like the Guest inventory IDs\n * @param {object} options.useProductViewContext\n * @param {Function} options.useSelectors\n * @returns {object}\n */\nconst useProductQueryFactory = (\n  queryType,\n  {\n    overrideId,\n    useProductViewContext: useAliasProductViewContext = useProductViewContext,\n    useSelectors: useAliasSelectors = storeHooks.reactRedux.useSelectors\n  } = {}\n) => {\n  const { [queryType]: initialQuery, productId, viewId } = useAliasProductViewContext();\n  const [queryOverride, queryProduct, queryView] = useAliasSelectors([\n    ({ view }) => view?.[queryType]?.[overrideId],\n    ({ view }) => view?.[queryType]?.[productId],\n    ({ view }) => view?.[queryType]?.[viewId]\n  ]);\n\n  return {\n    ...initialQuery,\n    ...queryOverride,\n    ...queryProduct,\n    ...queryView\n  };\n};\n\n/**\n * Return a base product query\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {Function} options.useProductQueryFactory\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductQuery = ({\n  queryType = 'query',\n  useProductQueryFactory: useAliasProductQueryFactory = useProductQueryFactory,\n  options\n} = {}) => useAliasProductQueryFactory(queryType, options);\n\n/**\n * Return the graph query based off of tally and capacity.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductQueryFactory\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductGraphTallyQuery = ({\n  queryType = 'graphTallyQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_TALLY_CAPACITY_TYPES,\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductQueryFactory: useAliasProductQueryFactory = useProductQueryFactory,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useAliasProductQuery(),\n      ...useAliasProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return the inventory query for guests. Use fallback/defaults for guests offset, limit.\n *\n * @param {object} options\n * @param {number} options.defaultLimit\n * @param {number} options.defaultOffset\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductQueryFactory\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryGuestsQuery = ({\n  defaultLimit = 100,\n  defaultOffset = 0,\n  queryType = 'inventoryGuestsQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductQueryFactory: useAliasProductQueryFactory = useProductQueryFactory,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      [RHSM_API_QUERY_SET_TYPES.LIMIT]: defaultLimit,\n      [RHSM_API_QUERY_SET_TYPES.OFFSET]: defaultOffset,\n      ...useAliasProductQuery(),\n      ...useAliasProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for hosts.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductQueryFactory\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryHostsQuery = ({\n  queryType = 'inventoryHostsQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductQueryFactory: useAliasProductQueryFactory = useProductQueryFactory,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useAliasProductQuery(),\n      ...useAliasProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for subscriptions.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductQueryFactory\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventorySubscriptionsQuery = ({\n  queryType = 'inventorySubscriptionsQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductQueryFactory: useAliasProductQueryFactory = useProductQueryFactory,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useAliasProductQuery(),\n      ...useAliasProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return a unified query for toolbars\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductGraphTallyQuery\n * @param {Function} options.useProductInventoryHostsQuery\n * @param {Function} options.useProductInventorySubscriptionsQuery\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductToolbarQuery = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery,\n  useProductInventoryHostsQuery: useAliasProductInventoryHostsQuery = useProductInventoryHostsQuery,\n  useProductInventorySubscriptionsQuery:\n    useAliasProductInventorySubscriptionsQuery = useProductInventorySubscriptionsQuery,\n  options\n} = {}) => ({\n  ...useAliasProductQuery({ options }),\n  ...useAliasProductGraphTallyQuery({ options }),\n  ...useAliasProductInventoryHostsQuery({ options }),\n  ...useAliasProductInventorySubscriptionsQuery({ options })\n});\n\n/**\n * Get a filtered product configuration context.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductViewContext\n * @returns {object}\n */\nconst useProductContext = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductViewContext: useAliasProductViewContext = useProductViewContext\n} = {}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.UOM]: uomFilter } = useAliasProductQuery();\n  const {\n    initialGraphFilters = [],\n    initialInventoryFilters = [],\n    initialSubscriptionsInventoryFilters = [],\n    productContextFilterUom,\n    ...config\n  } = useAliasProductViewContext();\n\n  const applyUomFilter = useCallback(() => {\n    if (productContextFilterUom === true) {\n      const filterFilters = ({ id, metric, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(uomFilter, 'i').test(metric) || new RegExp(uomFilter, 'i').test(id);\n      };\n\n      /**\n       * Allowing nested filters beside normal filters we take the quick path, just run the loop twice.\n       * Make sure to set \"isOptional\" false when it comes to nested filters in the event someone\n       * combined a config setting in the subsequent loop.\n       */\n      const updatedGraphFilters = _cloneDeep(initialGraphFilters)\n        .map(({ filters, ...rest }) => ({\n          ...rest,\n          filters: filters.filter(filterFilters),\n          isOptional: false\n        }))\n        .filter(filterFilters);\n\n      return {\n        ...config,\n        initialGraphFilters: updatedGraphFilters,\n        initialInventoryFilters: initialInventoryFilters.filter(filterFilters),\n        initialSubscriptionsInventoryFilters: initialSubscriptionsInventoryFilters.filter(filterFilters)\n      };\n    }\n\n    return {\n      ...config,\n      initialGraphFilters,\n      initialInventoryFilters,\n      initialSubscriptionsInventoryFilters\n    };\n  }, [\n    config,\n    initialGraphFilters,\n    initialInventoryFilters,\n    initialSubscriptionsInventoryFilters,\n    productContextFilterUom,\n    uomFilter\n  ]);\n\n  return applyUomFilter();\n};\n\n/**\n * Return product identifiers.\n *\n * @param {object} options\n * @param {Function} options.useProductViewContext\n * @returns {{productLabel, viewId, productId, productGroup, productVariants}}\n */\nconst useProduct = ({ useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}) => {\n  const { productGroup, productId, productLabel, productVariants, viewId } = useAliasProductViewContext();\n  return {\n    productGroup,\n    productId,\n    productLabel,\n    productVariants,\n    viewId\n  };\n};\n\n/**\n * Return graph configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductGraphConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialGraphFilters, initialGraphSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGraphFilters,\n    settings: initialGraphSettings\n  };\n};\n\n/**\n * Return guests inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryGuestsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { inventoryGuestsQuery = {}, initialGuestsFilters, initialGuestsSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGuestsFilters,\n    initialQuery: inventoryGuestsQuery,\n    settings: initialGuestsSettings\n  };\n};\n\n/**\n * Return inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryHostsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialInventoryFilters, initialInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialInventoryFilters,\n    settings: initialInventorySettings\n  };\n};\n\n/**\n * Return subscriptions inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventorySubscriptionsConfig = ({\n  useProductContext: useAliasProductContext = useProductContext\n} = {}) => {\n  const { initialSubscriptionsInventoryFilters, initialSubscriptionsInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialSubscriptionsInventoryFilters,\n    settings: initialSubscriptionsInventorySettings\n  };\n};\n\n/**\n * Return primary toolbar configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductToolbarConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialToolbarFilters, initialToolbarSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialToolbarFilters,\n    settings: initialToolbarSettings\n  };\n};\n\nconst context = {\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useQuery: useProductQuery,\n  useQueryFactory: useProductQueryFactory,\n  useGraphTallyQuery: useProductGraphTallyQuery,\n  useInventoryGuestsQuery: useProductInventoryGuestsQuery,\n  useInventoryHostsQuery: useProductInventoryHostsQuery,\n  useInventorySubscriptionsQuery: useProductInventorySubscriptionsQuery,\n  useProduct,\n  useGraphConfig: useProductGraphConfig,\n  useInventoryGuestsConfig: useProductInventoryGuestsConfig,\n  useInventoryHostsConfig: useProductInventoryHostsConfig,\n  useInventorySubscriptionsConfig: useProductInventorySubscriptionsConfig,\n  useToolbarConfig: useProductToolbarConfig,\n  useToolbarQuery: useProductToolbarQuery\n};\n\nexport {\n  context as default,\n  context,\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useProductQuery,\n  useProductQueryFactory,\n  useProductGraphTallyQuery,\n  useProductInventoryGuestsQuery,\n  useProductInventoryHostsQuery,\n  useProductInventorySubscriptionsQuery,\n  useProduct,\n  useProductGraphConfig,\n  useProductInventoryGuestsConfig,\n  useProductInventoryHostsConfig,\n  useProductInventorySubscriptionsConfig,\n  useProductToolbarConfig,\n  useProductToolbarQuery\n};\n"],"names":["BannerMessages","_ref","useBannerMessages","useAliasBannerMessages","useRemoveBannerMessages","useAliasRemoveBannerMessages","bannerMessages","removeBannerMessages","length","React","className","AlertGroup","isLiveRegion","map","_ref2","id","message","title","variant","AlertVariant","actionClose","AlertActionCloseButton","onClose","Alert","key","isInline","propTypes","PropTypes","defaultProps","useProduct","useAliasProduct","useSelector","useAliasSelector","storeHooks","arguments","undefined","productId","_messages$bannerMessa","messages","useDispatch","useAliasDispatch","dispatch","useCallback","idTitle","Array","isArray","filteredMessages","filter","type","reduxTypes","viewId","useSetBannerMessages","updatedMessages","value","helpers","console","warn","context","DEFAULT_CONTEXT","ProductViewContext","useProductViewContext","useContext","useProductQueryFactory","queryType","overrideId","useAliasProductViewContext","useSelectors","useAliasSelectors","initialQuery","queryOverride","queryProduct","queryView","_view$queryType","view","_view$queryType2","_ref3","_view$queryType3","useProductQuery","useAliasProductQueryFactory","options","useProductGraphTallyQuery","schemaCheck","rhsmConstants","useAliasProductQuery","reduxHelpers","useProductInventoryGuestsQuery","defaultLimit","defaultOffset","RHSM_API_QUERY_SET_TYPES","useProductInventoryHostsQuery","useProductInventorySubscriptionsQuery","useProductToolbarQuery","useAliasProductGraphTallyQuery","useAliasProductInventoryHostsQuery","useAliasProductInventorySubscriptionsQuery","useProductContext","uomFilter","initialGraphFilters","initialInventoryFilters","initialSubscriptionsInventoryFilters","productContextFilterUom","config","filterFilters","_ref4","metric","isOptional","RegExp","test","updatedGraphFilters","_cloneDeep","_ref5","filters","rest","applyUomFilter","productGroup","productLabel","productVariants","useProductGraphConfig","useAliasProductContext","initialGraphSettings","settings","useProductInventoryGuestsConfig","inventoryGuestsQuery","initialGuestsFilters","initialGuestsSettings","useProductInventoryHostsConfig","initialInventorySettings","useProductInventorySubscriptionsConfig","initialSubscriptionsInventorySettings","useProductToolbarConfig","initialToolbarFilters","initialToolbarSettings","useQuery","useQueryFactory","useGraphTallyQuery","useInventoryGuestsQuery","useInventoryHostsQuery","useInventorySubscriptionsQuery","useGraphConfig","useInventoryGuestsConfig","useInventoryHostsConfig","useInventorySubscriptionsConfig","useToolbarConfig","useToolbarQuery"],"sourceRoot":""}