{"version":3,"file":"js/4944.f298162325cbc1fc9572.js","mappings":"mQAcMA,EAAgC,SAAC,GAA4C,OAChCC,EADgC,EAA1CC,kBAC/BC,EADyE,EACzEA,cAA8BC,EAD2C,EAC1DC,cACoBC,GAAcH,MAAAA,OAFwB,EAExBA,EAAgB,GAAGI,iBAAnEC,EAAAA,GAAAA,YAET,OACE,kBAAC,EAAAC,YAAD,CACEC,gBAAgB,EAChBC,aAAc,kBAAC,EAAAC,0BAAD,CAA2BC,MAAOP,EAAWF,OAAQA,IACnEU,yBAAuB,KAmB7Bd,EAA8Be,aAAe,CAC3Cb,eAAAA,EAAAA,K,2MC7BIc,EAAsBC,EAAAA,GAAAA,yBAAqCC,mBAAmBC,KAAI,SAAAC,GAAQ,yBAC3FA,GAD2F,IAE9FC,UAAU,OAcNT,EAA4B,SAA5BA,EAA6B,GAAkC,IAAhCU,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,EAAGV,EAAoB,EAApBA,MAAOT,EAAa,EAAbA,OAChDoB,EAAeC,EAAAA,GAAAA,WAAAA,aACnB,uCAAGC,KAAgBC,aAAnB,iBAAc,EAAavB,UAA3B,aAAc,EAAuBI,EAAAA,GAAAA,cACrCK,GAGIe,EAAiBN,EAAQH,KAAI,SAAAU,GAAM,yBACpCA,GADoC,IAEvCR,SAAUQ,EAAOC,QAAUN,GAAgBK,EAAOhB,MAAMP,UAAUyB,gBAAkBP,OAmCtF,OACE,kBAAC,EAAAQ,OAAD,CACE,aAAYT,EAAE,gCAAiC,CAAEU,QAAS,gBAC1DC,SA5Ba,SAAAC,GAAS,MACOA,EAAMtB,MAA7BP,EADgB,EAChBA,UAAW8B,EADK,EACLA,QACnBC,EAAAA,EAAAA,SAAe,CACb,CACEC,KAAMC,EAAAA,GAAAA,MAAAA,+BACNnC,OAAAA,IAHW,QAMXkC,KAAMC,EAAAA,GAAAA,MAAAA,qBAAsC/B,EAAAA,GAAAA,aAC5CJ,OAAAA,GACCI,EAAAA,GAAAA,YAAmCgC,EAAAA,GAAAA,QARzB,QAWXF,KAAMC,EAAAA,GAAAA,MAAAA,qBAAsC/B,EAAAA,GAAAA,YAC5CJ,OAAAA,GACCI,EAAAA,GAAAA,WAAkCF,EAAUyB,gBAblC,QAgBXO,KAAMC,EAAAA,GAAAA,MAAAA,qBAAsC/B,EAAAA,GAAAA,UAC5CJ,OAAAA,GACCI,EAAAA,GAAAA,SAAgC4B,EAAQL,kBAS3CT,QAASM,EACTa,YAAalB,EAAE,gCAAiC,CAAEU,QAAS,gBAC3DS,SAAUC,EAAAA,eAAAA,MACVC,UAAW,IACX,YAAWhC,EAA0BG,aAAaX,UA4BxDQ,EAA0BG,aAAe,CACvCO,QAASN,EACTO,EAAGsB,EAAAA,UACHhC,OAAOgC,EAAAA,EAAAA,WAAU,qCAAsC,CAAEZ,QAAS,YAClE7B,OAAQ","sources":["webpack:///./src/components/productView/productViewOpenShiftDedicated.js","webpack:///./src/components/toolbar/toolbarFieldRangedMonthly.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useRouteDetail } from '../../hooks/useRouter';\nimport { RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { ProductView } from './productView';\nimport { ToolbarFieldRangedMonthly } from '../toolbar/toolbarFieldRangedMonthly';\n\n/**\n * An OpenShift Dedicated configured view.\n *\n * @param {object} props\n * @param {Function} props.useRouteDetail\n * @returns {Node}\n */\nconst ProductViewOpenShiftDedicated = ({ useRouteDetail: useAliasRouteDetail }) => {\n  const { productConfig, viewParameter: viewId } = useAliasRouteDetail();\n  const { [RHSM_API_QUERY_TYPES.START_DATE]: startDate } = productConfig?.[0].graphTallyQuery;\n\n  return (\n    <ProductView\n      toolbarProduct={false}\n      toolbarGraph={<ToolbarFieldRangedMonthly value={startDate} viewId={viewId} />}\n      toolbarGraphDescription\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useRouteDetail: Function}}\n */\nProductViewOpenShiftDedicated.propTypes = {\n  useRouteDetail: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useRouteDetail: Function}}\n */\nProductViewOpenShiftDedicated.defaultProps = {\n  useRouteDetail\n};\n\nexport { ProductViewOpenShiftDedicated as default, ProductViewOpenShiftDedicated };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, store, storeHooks } from '../../redux';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = dateHelpers.getRangedMonthDateTime().listDateTimeRanges.map(dateTime => ({\n  ...dateTime,\n  selected: false\n}));\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Array} props.options\n * @param {Function} props.t\n * @param {string} props.value\n * @param {string} props.viewId\n * @returns {Node}\n */\nconst ToolbarFieldRangedMonthly = ({ options, t, value, viewId }) => {\n  const updatedValue = storeHooks.reactRedux.useSelector(\n    ({ view }) => view.query?.[viewId]?.[RHSM_API_QUERY_TYPES.START_DATE],\n    value\n  );\n\n  const updatedOptions = options.map(option => ({\n    ...option,\n    selected: option.title === updatedValue || option.value.startDate.toISOString() === updatedValue\n  }));\n\n  /**\n   * On select, dispatch type.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @returns {void}\n   */\n  const onSelect = event => {\n    const { startDate, endDate } = event.value;\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: FIELD_TYPES.DAILY\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      }\n    ]);\n  };\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      placeholder={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      position={SelectPosition.right}\n      maxHeight={250}\n      data-test={ToolbarFieldRangedMonthly.defaultProps.viewId}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{viewId: string, t: Function, options: Array, value: string}}\n */\nToolbarFieldRangedMonthly.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  t: PropTypes.func,\n  value: PropTypes.string,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{viewId: string, t: translate, options: Array, value: string}}\n */\nToolbarFieldRangedMonthly.defaultProps = {\n  options: toolbarFieldOptions,\n  t: translate,\n  value: translate('curiosity-toolbar.granularityRange', { context: 'current' }),\n  viewId: 'toolbarFieldRangeGranularity'\n};\n\nexport { ToolbarFieldRangedMonthly as default, ToolbarFieldRangedMonthly, toolbarFieldOptions };\n"],"names":["ProductViewOpenShiftDedicated","useAliasRouteDetail","useRouteDetail","productConfig","viewId","viewParameter","startDate","graphTallyQuery","RHSM_API_QUERY_TYPES","ProductView","toolbarProduct","toolbarGraph","ToolbarFieldRangedMonthly","value","toolbarGraphDescription","defaultProps","toolbarFieldOptions","dateHelpers","listDateTimeRanges","map","dateTime","selected","options","t","updatedValue","storeHooks","view","query","updatedOptions","option","title","toISOString","Select","context","onSelect","event","endDate","store","type","reduxTypes","FIELD_TYPES","placeholder","position","SelectPosition","maxHeight","translate"],"sourceRoot":""}