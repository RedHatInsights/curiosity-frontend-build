{"version":3,"file":"js/6876.0e33fbe54a70447102a1.js","mappings":"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","sources":["webpack:///./src/components/inventoryList/inventoryList.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport _isEqual from 'lodash/isEqual';\nimport { SortByDirection, TableVariant } from '@patternfly/react-table';\nimport { Bullseye, Card, CardActions, CardBody, CardFooter, CardHeader, CardHeaderMain } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport _camelCase from 'lodash/camelCase';\nimport { helpers } from '../../common';\nimport { connect, reduxActions, reduxSelectors, reduxTypes, store } from '../../redux';\nimport Table from '../table/table';\nimport { Loader } from '../loader/loader';\nimport { MinHeight } from '../minHeight/minHeight';\nimport GuestsList from '../guestsList/guestsList';\nimport { inventoryListHelpers } from './inventoryListHelpers';\nimport Pagination from '../pagination/pagination';\nimport { ToolbarFieldDisplayName } from '../toolbar/toolbarFieldDisplayName';\nimport { paginationHelpers } from '../pagination/paginationHelpers';\nimport {\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_SORT_TYPES as SORT_TYPES,\n  RHSM_API_QUERY_TYPES\n} from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A hosts system inventory component.\n *\n * @augments React.Component\n * @fires onColumnSort\n * @fires onPage\n * @fires onUpdateInventoryData\n */\nclass InventoryList extends React.Component {\n  componentDidMount() {\n    this.onUpdateInventoryData();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { productId, query } = this.props;\n\n    if (productId !== prevProps.productId || !_isEqual(query, prevProps.query)) {\n      this.onUpdateInventoryData();\n    }\n  }\n\n  /**\n   * On column sort update state.\n   *\n   * @event onColumnSort\n   * @param {object} data pass-through inventory data.\n   * @param {object} sortParams\n   * @param {string} sortParams.direction\n   * @param {string} sortParams.id column identifier\n   */\n  onColumnSort = (data, { direction, id }) => {\n    const { productId } = this.props;\n    const updatedSortColumn = Object.values(SORT_TYPES).find(value => _camelCase(value) === id);\n    let updatedDirection;\n\n    if (!updatedSortColumn) {\n      if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n        console.warn(`Sorting can only be performed on select fields, confirm field ${id} is allowed.`);\n      }\n      return;\n    }\n\n    switch (direction) {\n      case SortByDirection.desc:\n        updatedDirection = SORT_DIRECTION_TYPES.DESCENDING;\n        break;\n      default:\n        updatedDirection = SORT_DIRECTION_TYPES.ASCENDING;\n        break;\n    }\n\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.DIRECTION],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.DIRECTION]: updatedDirection\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.SORT],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.SORT]: updatedSortColumn\n      }\n    ]);\n  };\n\n  /**\n   * On paging and on perPage events.\n   *\n   * @event onPage\n   * @param {object} params\n   * @param {number} params.offset\n   * @param {number} params.perPage\n   */\n  onPage = ({ offset, perPage }) => {\n    const { productId } = this.props;\n\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.OFFSET],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.OFFSET]: offset\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.LIMIT],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.LIMIT]: perPage\n      }\n    ]);\n  };\n\n  /**\n   * Call the RHSM APIs, apply filters.\n   *\n   * @event onUpdateInventoryData\n   */\n  onUpdateInventoryData = () => {\n    const { getHostsInventory, isDisabled, productId, query } = this.props;\n\n    if (!isDisabled && productId) {\n      getHostsInventory(productId, query);\n    }\n  };\n\n  /**\n   * Render an inventory table.\n   *\n   * @returns {Node}\n   */\n  renderTable() {\n    const { filterGuestsData, filterInventoryData, listData, query, session, settings } = this.props;\n    let updatedColumnHeaders = [];\n\n    const updatedRows = listData.map(({ ...cellData }) => {\n      const { columnHeaders, cells } = inventoryListHelpers.parseRowCellsListData({\n        filters: inventoryListHelpers.parseInventoryFilters({\n          filters: filterInventoryData,\n          onSort: this.onColumnSort,\n          query\n        }),\n        cellData,\n        session\n      });\n\n      updatedColumnHeaders = columnHeaders;\n\n      const guestsId = cellData?.subscriptionManagerId;\n      let hasGuests = cellData?.numberOfGuests > 0 && guestsId;\n\n      // Apply hasGuests callback, return boolean\n      if (typeof settings?.hasGuests === 'function') {\n        hasGuests = settings.hasGuests({ ...cellData }, { ...session });\n      }\n\n      return {\n        cells,\n        expandedContent:\n          (hasGuests && (\n            <GuestsList\n              key={guestsId}\n              filterGuestsData={filterGuestsData}\n              numberOfGuests={cellData?.numberOfGuests}\n              id={guestsId}\n              query={query}\n            />\n          )) ||\n          undefined\n      };\n    });\n\n    return (\n      <Table\n        borders\n        variant={TableVariant.compact}\n        className=\"curiosity-inventory-list\"\n        columnHeaders={updatedColumnHeaders}\n        rows={updatedRows}\n      />\n    );\n  }\n\n  /**\n   * Render an inventory card.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const {\n      error,\n      filterInventoryData,\n      fulfilled,\n      isDisabled,\n      itemCount,\n      listData,\n      pending,\n      perPageDefault,\n      query,\n      t,\n      viewId\n    } = this.props;\n\n    if (isDisabled) {\n      return (\n        <Card className=\"curiosity-inventory-card__disabled\">\n          <CardBody>\n            <Bullseye>{t('curiosity-inventory.tab', { context: 'disabled' })}</Bullseye>\n          </CardBody>\n        </Card>\n      );\n    }\n\n    const updatedPerPage = query[RHSM_API_QUERY_TYPES.LIMIT] || perPageDefault;\n    const updatedOffset = query[RHSM_API_QUERY_TYPES.OFFSET];\n    const isLastPage = paginationHelpers.isLastPage(updatedOffset, updatedPerPage, itemCount);\n\n    // Set an updated key to force refresh minHeight\n    const minHeightContentRefreshKey =\n      (fulfilled === true && itemCount < updatedPerPage && `bodyMinHeight-${updatedPerPage}-resize`) ||\n      (fulfilled === true && isLastPage && `bodyMinHeight-${updatedPerPage}-resize`) ||\n      (error === true && `bodyMinHeight-${updatedPerPage}-resize`) ||\n      `bodyMinHeight-${updatedPerPage}`;\n\n    return (\n      <Card className=\"curiosity-inventory-card\">\n        <MinHeight key=\"headerMinHeight\" updateOnContent>\n          <CardHeader className={(error && 'hidden') || ''} aria-hidden={error || false}>\n            <CardHeaderMain>\n              <ToolbarFieldDisplayName viewId={viewId} />\n            </CardHeaderMain>\n            <CardActions className={(!itemCount && 'transparent') || ''} aria-hidden={!itemCount || false}>\n              <Pagination\n                isCompact\n                isDisabled={pending || error}\n                itemCount={itemCount}\n                offset={updatedOffset}\n                onPage={this.onPage}\n                onPerPage={this.onPage}\n                perPage={updatedPerPage}\n              />\n            </CardActions>\n          </CardHeader>\n        </MinHeight>\n        <MinHeight key={minHeightContentRefreshKey} updateOnContent>\n          <CardBody>\n            <div className={(error && 'blur') || (pending && 'fadein') || ''}>\n              {pending && (\n                <Loader\n                  variant=\"table\"\n                  tableProps={{\n                    className: 'curiosity-inventory-list',\n                    colCount: filterInventoryData?.length || (listData?.[0] && Object.keys(listData[0]).length) || 1,\n                    colWidth:\n                      (filterInventoryData?.length && filterInventoryData.map(({ cellWidth }) => cellWidth)) || [],\n                    rowCount: listData?.length || updatedPerPage,\n                    variant: TableVariant.compact\n                  }}\n                />\n              )}\n              {!pending && this.renderTable()}\n            </div>\n          </CardBody>\n        </MinHeight>\n        <MinHeight key=\"footerMinHeight\" updateOnContent>\n          <CardFooter\n            className={(error && 'hidden') || (!itemCount && 'transparent') || ''}\n            aria-hidden={error || !itemCount || false}\n          >\n            <TableToolbar isFooter>\n              <Pagination\n                dropDirection=\"up\"\n                isDisabled={pending || error}\n                itemCount={itemCount}\n                offset={updatedOffset}\n                onPage={this.onPage}\n                onPerPage={this.onPage}\n                perPage={updatedPerPage}\n              />\n            </TableToolbar>\n          </CardFooter>\n        </MinHeight>\n      </Card>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{settings:object, productId: string, listData: Array, session: object, pending: boolean,\n *     query: object, fulfilled: boolean, getHostsInventory: Function, error: boolean,\n *     itemCount: number, viewId: string, t: Function, filterInventoryData: Array, filterGuestsData: Array,\n *     perPageDefault: number, isDisabled: boolean}}\n */\nInventoryList.propTypes = {\n  error: PropTypes.bool,\n  fulfilled: PropTypes.bool,\n  filterGuestsData: PropTypes.array,\n  filterInventoryData: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      header: PropTypes.oneOfType([\n        PropTypes.shape({\n          title: PropTypes.node.isRequired\n        }),\n        PropTypes.func,\n        PropTypes.node\n      ]),\n      cell: PropTypes.oneOfType([\n        PropTypes.shape({\n          title: PropTypes.node.isRequired\n        }),\n        PropTypes.func,\n        PropTypes.node\n      ])\n    }).isRequired\n  ),\n  getHostsInventory: PropTypes.func,\n  isDisabled: PropTypes.bool,\n  itemCount: PropTypes.number,\n  listData: PropTypes.array,\n  pending: PropTypes.bool,\n  productId: PropTypes.string.isRequired,\n  perPageDefault: PropTypes.number,\n  query: PropTypes.object.isRequired,\n  session: PropTypes.object,\n  settings: PropTypes.shape({\n    hasGuests: PropTypes.func\n  }),\n  t: PropTypes.func,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{settings: object, listData: Array, session: object, pending: boolean, fulfilled: boolean,\n *     getHostsInventory: Function, error: boolean, itemCount: number, viewId: string, t: translate,\n *     filterInventoryData: Array, filterGuestsData: Array, perPageDefault: number, isDisabled: boolean}}\n */\nInventoryList.defaultProps = {\n  error: false,\n  fulfilled: false,\n  filterGuestsData: [],\n  filterInventoryData: [],\n  getHostsInventory: helpers.noop,\n  isDisabled: helpers.UI_DISABLED_TABLE_HOSTS,\n  itemCount: 0,\n  listData: [],\n  pending: false,\n  perPageDefault: 10,\n  session: {},\n  settings: {},\n  t: translate,\n  viewId: 'inventoryList'\n};\n\n/**\n * Apply actions to props.\n *\n * @param {Function} dispatch\n * @returns {object}\n */\nconst mapDispatchToProps = dispatch => ({\n  getHostsInventory: (id, query) => dispatch(reduxActions.rhsm.getHostsInventory(id, query))\n});\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.inventoryList.makeInventoryList();\n\nconst ConnectedInventoryList = connect(makeMapStateToProps, mapDispatchToProps)(InventoryList);\n\nexport { ConnectedInventoryList as default, ConnectedInventoryList, InventoryList };\n"],"names":["InventoryList","onColumnSort","data","updatedDirection","direction","id","productId","props","updatedSortColumn","Object","values","SORT_TYPES","find","value","_camelCase","SortByDirection","SORT_DIRECTION_TYPES","store","type","reduxTypes","RHSM_API_QUERY_TYPES","viewId","helpers","console","warn","onPage","offset","perPage","onUpdateInventoryData","getHostsInventory","isDisabled","query","this","prevProps","_isEqual","filterGuestsData","filterInventoryData","listData","session","settings","updatedColumnHeaders","updatedRows","map","cellData","inventoryListHelpers","filters","onSort","columnHeaders","cells","guestsId","subscriptionManagerId","hasGuests","numberOfGuests","expandedContent","key","undefined","borders","variant","TableVariant","className","rows","error","fulfilled","itemCount","pending","perPageDefault","t","Card","CardBody","Bullseye","context","updatedPerPage","updatedOffset","isLastPage","paginationHelpers","minHeightContentRefreshKey","MinHeight","updateOnContent","CardHeader","CardHeaderMain","ToolbarFieldDisplayName","CardActions","isCompact","onPerPage","Loader","tableProps","colCount","length","keys","colWidth","cellWidth","rowCount","renderTable","CardFooter","isFooter","dropDirection","React","defaultProps","translate","makeMapStateToProps","reduxSelectors","ConnectedInventoryList","connect","dispatch","reduxActions"],"sourceRoot":""}