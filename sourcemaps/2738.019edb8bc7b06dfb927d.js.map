{"version":3,"file":"js/2738.b30e655d72e787364c73.js","mappings":"mTAaMA,EAAsBC,OAAOC,OAAOC,EAAAA,IAAaC,KAAI,SAAAC,GAAI,MAAK,CAClEC,OAAOC,EAAAA,EAAAA,WAAU,gCAAiC,CAAEC,QAASH,IAC7DI,MAAOJ,EACPK,UAAU,MAcNC,EAA0B,SAA1BA,EAA2B,GAAkC,IAAhCC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,EAAGJ,EAAoB,EAApBA,MAAOK,EAAa,EAAbA,OAC9CC,GAAeC,EAAAA,EAAAA,KACnB,uCAAGC,KAAgBC,uBAAnB,iBAAc,EAAuBJ,UAArC,aAAc,EAAiCK,EAAAA,GAAAA,eAC/CV,GAGIW,EAAiBR,EAAQR,KAAI,SAAAiB,GAAM,yBAAUA,GAAV,IAAkBX,SAAUW,EAAOZ,QAAUM,OAkCtF,OACE,kBAAC,EAAAO,OAAD,CACE,aAAYT,EAAE,gCAAiC,CAAEL,QAAS,gBAC1De,SA5Ba,SAAAC,GAAS,MACOC,EAAAA,GAAAA,kBAA8BD,EAAMf,OAA3DiB,EADgB,EAChBA,UAAWC,EADK,EACLA,QACnBC,EAAAA,EAAAA,SAAe,CACb,CACEvB,KAAMwB,EAAAA,GAAAA,MAAAA,+BACNf,OAAAA,IAHW,QAMXT,KAAMwB,EAAAA,GAAAA,MAAAA,qBAAsCV,EAAAA,GAAAA,aAC5CL,OAAAA,GACCK,EAAAA,GAAAA,YAAmCK,EAAMf,QAR/B,QAWXJ,KAAMwB,EAAAA,GAAAA,MAAAA,qBAAsCV,EAAAA,GAAAA,YAC5CL,OAAAA,GACCK,EAAAA,GAAAA,WAAkCO,EAAUI,gBAblC,QAgBXzB,KAAMwB,EAAAA,GAAAA,MAAAA,qBAAsCV,EAAAA,GAAAA,UAC5CL,OAAAA,GACCK,EAAAA,GAAAA,SAAgCQ,EAAQG,kBAS3ClB,QAASQ,EACTW,gBAAiBhB,EACjBiB,YAAanB,EAAE,gCAAiC,CAAEL,QAAS,gBAC3D,YAAWG,EAAwBsB,aAAanB,UA4BtDH,EAAwBsB,aAAe,CACrCrB,QAASZ,EACTa,EAAGN,EAAAA,UACHE,MAAON,EAAAA,GAAAA,MACPW,OAAQ","sources":["webpack:///./src/components/toolbar/toolbarFieldGranularity.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, store, useSelector } from '../../redux';\nimport { Select } from '../form/select';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.granularity', { context: type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Array} props.options\n * @param {Function} props.t\n * @param {string} props.value\n * @param {string} props.viewId\n * @returns {Node}\n */\nconst ToolbarFieldGranularity = ({ options, t, value, viewId }) => {\n  const updatedValue = useSelector(\n    ({ view }) => view.graphTallyQuery?.[viewId]?.[RHSM_API_QUERY_TYPES.GRANULARITY],\n    value\n  );\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  /**\n   * On select, dispatch type.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @returns {void}\n   */\n  const onSelect = event => {\n    const { startDate, endDate } = dateHelpers.getRangedDateTime(event.value);\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: event.value\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      }\n    ]);\n  };\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      data-test={ToolbarFieldGranularity.defaultProps.viewId}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{viewId: string, t: Function, options: Array, value: string}}\n */\nToolbarFieldGranularity.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  t: PropTypes.func,\n  value: PropTypes.oneOf([...Object.values(FIELD_TYPES)]),\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{viewId: string, t: translate, options: Array, value: string}}\n */\nToolbarFieldGranularity.defaultProps = {\n  options: toolbarFieldOptions,\n  t: translate,\n  value: FIELD_TYPES.DAILY,\n  viewId: 'toolbarFieldGranularity'\n};\n\nexport { ToolbarFieldGranularity as default, ToolbarFieldGranularity, toolbarFieldOptions };\n"],"names":["toolbarFieldOptions","Object","values","FIELD_TYPES","map","type","title","translate","context","value","selected","ToolbarFieldGranularity","options","t","viewId","updatedValue","useSelector","view","graphTallyQuery","RHSM_API_QUERY_TYPES","updatedOptions","option","Select","onSelect","event","dateHelpers","startDate","endDate","store","reduxTypes","toISOString","selectedOptions","placeholder","defaultProps"],"sourceRoot":""}