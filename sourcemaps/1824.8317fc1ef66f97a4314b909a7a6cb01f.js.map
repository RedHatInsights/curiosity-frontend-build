{"version":3,"file":"js/1824.7055bedda4708986543a.js","mappings":"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","sources":["webpack:///./src/components/bannerMessages/bannerMessagesContext.js","webpack:///./src/components/productView/productViewContext.js"],"sourcesContent":["import { useCallback } from 'react';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct } from '../productView/productViewContext';\nimport { helpers } from '../../common/helpers';\n\n/**\n * @memberof BannerMessages\n * @module BannerMessagesContext\n */\n\n/**\n * Retrieve, set and remove application banner messages from state.\n *\n * @param {object} options\n * @param {Function} options.useProduct\n * @param {Function} options.useSelector\n * @returns {{ bannerMessages: Array, setBannerMessages: Function, removeBannerMessages: Function }}\n */\nconst useBannerMessages = ({\n  useProduct: useAliasProduct = useProduct,\n  useSelector: useAliasSelector = storeHooks.reactRedux.useSelector\n} = {}) => {\n  const { productId } = useAliasProduct();\n  return useAliasSelector(({ messages }) => messages?.bannerMessages?.[productId], []);\n};\n\n/**\n * Provide a callback for removing application banner messages from state.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useBannerMessages\n * @returns {Function}\n */\nconst useRemoveBannerMessages = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useBannerMessages: useAliasBannerMessages = useBannerMessages\n} = {}) => {\n  const dispatch = useAliasDispatch();\n  const { productId } = useAliasProduct();\n  const bannerMessages = useAliasBannerMessages();\n\n  /**\n   * Remove a banner message from state.\n   *\n   * @callback removeBannerMessages\n   * @param {string} idTitle\n   */\n  return useCallback(\n    idTitle => {\n      if (productId && Array.isArray(bannerMessages) && bannerMessages.length) {\n        const filteredMessages = bannerMessages.filter(({ id, title }) => id !== idTitle && title !== idTitle);\n\n        dispatch({\n          type: reduxTypes.message.SET_BANNER_MESSAGES,\n          viewId: productId,\n          bannerMessages: filteredMessages || []\n        });\n      }\n    },\n    [bannerMessages, dispatch, productId]\n  );\n};\n\n/**\n * Provide a callback for setting application banner messages from state.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useBannerMessages\n * @returns {Function}\n */\nconst useSetBannerMessages = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useBannerMessages: useAliasBannerMessages = useBannerMessages\n} = {}) => {\n  const dispatch = useAliasDispatch();\n  const { productId } = useAliasProduct();\n  const bannerMessages = useAliasBannerMessages();\n\n  /**\n   * Set application messages for banner display\n   *\n   * @callback setBannerMessages\n   * @param {Array<{ id: string, message: string, title: string, variant: string }>|{ id: string, message: string, title: string, variant: string }} messages\n   */\n  return useCallback(\n    messages => {\n      if (productId) {\n        const updatedMessages = (Array.isArray(messages) && messages) || [messages];\n\n        dispatch({\n          type: reduxTypes.message.SET_BANNER_MESSAGES,\n          viewId: productId,\n          bannerMessages: [\n            ...(bannerMessages || []),\n            ...updatedMessages\n              .map(value => {\n                if (value?.id || value?.title || value?.message || value?.variant) {\n                  return value;\n                }\n\n                if (typeof value === 'string' || typeof value === 'number') {\n                  return {\n                    id: value,\n                    title: value\n                  };\n                }\n\n                return undefined;\n              })\n              .filter(value => value !== undefined)\n          ]\n        });\n      } else if (helpers.DEV_MODE) {\n        console.warn(\n          'Banner messages currently require the use of \"product id\". Product context is unavailable, try moving your banner message \"set\" lower in the component order.'\n        );\n      }\n    },\n    [bannerMessages, dispatch, productId]\n  );\n};\n\nconst context = {\n  useBannerMessages,\n  useRemoveBannerMessages,\n  useSetBannerMessages\n};\n\nexport { context as default, context, useBannerMessages, useRemoveBannerMessages, useSetBannerMessages };\n","import React, { useCallback, useContext } from 'react';\nimport _cloneDeep from 'lodash/cloneDeep';\nimport { reduxHelpers } from '../../redux/common';\nimport { storeHooks } from '../../redux/hooks';\nimport { rhsmConstants, RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common/helpers';\n\n/**\n * @memberof ProductView\n * @module ProductViewContext\n */\n\n/**\n * Route context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{}, helpers.noop];\n\nconst ProductViewContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated product view context.\n *\n * @returns {React.Context<{}>}\n */\nconst useProductViewContext = () => useContext(ProductViewContext);\n\n/**\n * Return a query object from initial product config and Redux store.\n *\n * @param {string} queryType An identifier used to pull from both config and Redux, they should named the same.\n * @param {object} options\n * @param {string} options.overrideId A custom identifier, used for scenarios like the Guest inventory IDs\n * @param {object} options.useProductViewContext\n * @param {Function} options.useSelectors\n * @returns {object}\n */\nconst useProductQueryFactory = (\n  queryType,\n  {\n    overrideId,\n    useProductViewContext: useAliasProductViewContext = useProductViewContext,\n    useSelectors: useAliasSelectors = storeHooks.reactRedux.useSelectors\n  } = {}\n) => {\n  const { [queryType]: initialQuery, productId, viewId } = useAliasProductViewContext();\n  const [queryOverride, queryProduct, queryView] = useAliasSelectors([\n    ({ view }) => view?.[queryType]?.[overrideId],\n    ({ view }) => view?.[queryType]?.[productId],\n    ({ view }) => view?.[queryType]?.[viewId]\n  ]);\n\n  return {\n    ...initialQuery,\n    ...queryOverride,\n    ...queryProduct,\n    ...queryView\n  };\n};\n\n/**\n * Return a base product query\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {Function} options.useProductQueryFactory\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductQuery = ({\n  queryType = 'query',\n  useProductQueryFactory: useAliasProductQueryFactory = useProductQueryFactory,\n  options\n} = {}) => useAliasProductQueryFactory(queryType, options);\n\n/**\n * Return the graph query based off of tally and capacity.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductQueryFactory\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductGraphTallyQuery = ({\n  queryType = 'graphTallyQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_TALLY_CAPACITY_TYPES,\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductQueryFactory: useAliasProductQueryFactory = useProductQueryFactory,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useAliasProductQuery(),\n      ...useAliasProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return the inventory query for guests. Use fallback/defaults for guests offset, limit.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductQueryFactory\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryGuestsQuery = ({\n  queryType = 'inventoryGuestsQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductQueryFactory: useAliasProductQueryFactory = useProductQueryFactory,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useAliasProductQuery(),\n      ...useAliasProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for hosts.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductQueryFactory\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryHostsQuery = ({\n  queryType = 'inventoryHostsQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductQueryFactory: useAliasProductQueryFactory = useProductQueryFactory,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useAliasProductQuery(),\n      ...useAliasProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for subscriptions.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductQueryFactory\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventorySubscriptionsQuery = ({\n  queryType = 'inventorySubscriptionsQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductQueryFactory: useAliasProductQueryFactory = useProductQueryFactory,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useAliasProductQuery(),\n      ...useAliasProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return a unified query for toolbars\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductGraphTallyQuery\n * @param {Function} options.useProductInventoryHostsQuery\n * @param {Function} options.useProductInventorySubscriptionsQuery\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductToolbarQuery = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery,\n  useProductInventoryHostsQuery: useAliasProductInventoryHostsQuery = useProductInventoryHostsQuery,\n  useProductInventorySubscriptionsQuery:\n    useAliasProductInventorySubscriptionsQuery = useProductInventorySubscriptionsQuery,\n  options\n} = {}) => ({\n  ...useAliasProductQuery({ options }),\n  ...useAliasProductGraphTallyQuery({ options }),\n  ...useAliasProductInventoryHostsQuery({ options }),\n  ...useAliasProductInventorySubscriptionsQuery({ options })\n});\n\n/**\n * Get a filtered product configuration context.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductViewContext\n * @returns {object}\n */\nconst useProductContext = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductViewContext: useAliasProductViewContext = useProductViewContext\n} = {}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.UOM]: uomFilter } = useAliasProductQuery();\n  const {\n    initialGraphFilters = [],\n    initialInventoryFilters = [],\n    initialSubscriptionsInventoryFilters = [],\n    productContextFilterUom,\n    ...config\n  } = useAliasProductViewContext();\n\n  const applyUomFilter = useCallback(() => {\n    if (productContextFilterUom === true) {\n      const filterFilters = ({ id, metric, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(uomFilter, 'i').test(metric) || new RegExp(uomFilter, 'i').test(id);\n      };\n\n      /**\n       * Allowing nested filters beside normal filters we take the quick path, just run the loop twice.\n       * Make sure to set \"isOptional\" false when it comes to nested filters in the event someone\n       * combined a config setting in the subsequent loop.\n       */\n      const updatedGraphFilters = _cloneDeep(initialGraphFilters)\n        .map(({ filters, ...rest }) => ({\n          ...rest,\n          filters: filters.filter(filterFilters),\n          isOptional: false\n        }))\n        .filter(filterFilters);\n\n      return {\n        ...config,\n        initialGraphFilters: updatedGraphFilters,\n        initialInventoryFilters: initialInventoryFilters.filter(filterFilters),\n        initialSubscriptionsInventoryFilters: initialSubscriptionsInventoryFilters.filter(filterFilters)\n      };\n    }\n\n    return {\n      ...config,\n      initialGraphFilters,\n      initialInventoryFilters,\n      initialSubscriptionsInventoryFilters\n    };\n  }, [\n    config,\n    initialGraphFilters,\n    initialInventoryFilters,\n    initialSubscriptionsInventoryFilters,\n    productContextFilterUom,\n    uomFilter\n  ]);\n\n  return applyUomFilter();\n};\n\n/**\n * Return product identifiers.\n *\n * @param {object} options\n * @param {Function} options.useProductViewContext\n * @returns {{productLabel, viewId, productId, productGroup, productVariants}}\n */\nconst useProduct = ({ useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}) => {\n  const { productGroup, productId, productLabel, productVariants, viewId } = useAliasProductViewContext();\n  return {\n    productGroup,\n    productId,\n    productLabel,\n    productVariants,\n    viewId\n  };\n};\n\n/**\n * Return graph configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductGraphConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialGraphFilters, initialGraphSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGraphFilters,\n    settings: initialGraphSettings\n  };\n};\n\n/**\n * Return guests inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryGuestsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { inventoryGuestsQuery = {}, initialGuestsFilters, initialGuestsSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGuestsFilters,\n    initialQuery: inventoryGuestsQuery,\n    settings: initialGuestsSettings\n  };\n};\n\n/**\n * Return inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryHostsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialInventoryFilters, initialInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialInventoryFilters,\n    settings: initialInventorySettings\n  };\n};\n\n/**\n * Return subscriptions inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventorySubscriptionsConfig = ({\n  useProductContext: useAliasProductContext = useProductContext\n} = {}) => {\n  const { initialSubscriptionsInventoryFilters, initialSubscriptionsInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialSubscriptionsInventoryFilters,\n    settings: initialSubscriptionsInventorySettings\n  };\n};\n\n/**\n * Return primary toolbar configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductToolbarConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialToolbarFilters, initialToolbarSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialToolbarFilters,\n    settings: initialToolbarSettings\n  };\n};\n\nconst context = {\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useQuery: useProductQuery,\n  useQueryFactory: useProductQueryFactory,\n  useGraphTallyQuery: useProductGraphTallyQuery,\n  useInventoryGuestsQuery: useProductInventoryGuestsQuery,\n  useInventoryHostsQuery: useProductInventoryHostsQuery,\n  useInventorySubscriptionsQuery: useProductInventorySubscriptionsQuery,\n  useProduct,\n  useGraphConfig: useProductGraphConfig,\n  useInventoryGuestsConfig: useProductInventoryGuestsConfig,\n  useInventoryHostsConfig: useProductInventoryHostsConfig,\n  useInventorySubscriptionsConfig: useProductInventorySubscriptionsConfig,\n  useToolbarConfig: useProductToolbarConfig,\n  useToolbarQuery: useProductToolbarQuery\n};\n\nexport {\n  context as default,\n  context,\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useProductQuery,\n  useProductQueryFactory,\n  useProductGraphTallyQuery,\n  useProductInventoryGuestsQuery,\n  useProductInventoryHostsQuery,\n  useProductInventorySubscriptionsQuery,\n  useProduct,\n  useProductGraphConfig,\n  useProductInventoryGuestsConfig,\n  useProductInventoryHostsConfig,\n  useProductInventorySubscriptionsConfig,\n  useProductToolbarConfig,\n  useProductToolbarQuery\n};\n"],"names":["useBannerMessages","useProduct","useAliasProduct","useSelector","useAliasSelector","storeHooks","arguments","length","undefined","productId","_ref","_messages$bannerMessa","messages","bannerMessages","useRemoveBannerMessages","useDispatch","useAliasDispatch","useAliasBannerMessages","dispatch","useCallback","idTitle","Array","isArray","filteredMessages","filter","_ref2","id","title","type","reduxTypes","viewId","useSetBannerMessages","updatedMessages","map","value","message","variant","helpers","console","warn","context","DEFAULT_CONTEXT","ProductViewContext","React","useProductViewContext","useContext","useProductQueryFactory","queryType","overrideId","useAliasProductViewContext","useSelectors","useAliasSelectors","initialQuery","queryOverride","queryProduct","queryView","_view$queryType","view","_view$queryType2","_ref3","_view$queryType3","useProductQuery","useAliasProductQueryFactory","options","useProductGraphTallyQuery","schemaCheck","rhsmConstants","useAliasProductQuery","reduxHelpers","useProductInventoryGuestsQuery","useProductInventoryHostsQuery","useProductInventorySubscriptionsQuery","useProductToolbarQuery","useAliasProductGraphTallyQuery","useAliasProductInventoryHostsQuery","useAliasProductInventorySubscriptionsQuery","useProductContext","RHSM_API_QUERY_SET_TYPES","uomFilter","initialGraphFilters","initialInventoryFilters","initialSubscriptionsInventoryFilters","productContextFilterUom","config","filterFilters","_ref4","metric","isOptional","RegExp","test","updatedGraphFilters","_cloneDeep","_ref5","filters","rest","applyUomFilter","productGroup","productLabel","productVariants","useProductGraphConfig","useAliasProductContext","initialGraphSettings","settings","useProductInventoryGuestsConfig","inventoryGuestsQuery","initialGuestsFilters","initialGuestsSettings","useProductInventoryHostsConfig","initialInventorySettings","useProductInventorySubscriptionsConfig","initialSubscriptionsInventorySettings","useProductToolbarConfig","initialToolbarFilters","initialToolbarSettings","useQuery","useQueryFactory","useGraphTallyQuery","useInventoryGuestsQuery","useInventoryHostsQuery","useInventorySubscriptionsQuery","useGraphConfig","useInventoryGuestsConfig","useInventoryHostsConfig","useInventorySubscriptionsConfig","useToolbarConfig","useToolbarQuery"],"sourceRoot":""}