{"version":3,"file":"js/2896.1655141193366.a37bd81ac71eeecd2a32.js","mappings":"gWAwBMA,EAA2B,WAOtB,6DAAP,GAAO,IANTC,WAAAA,OAMS,aALTC,aAAAA,OAKS,MALMC,EAAAA,GAAAA,KAAAA,sBAKN,MAJTC,YAAaC,OAIJ,MAJuBC,EAAAA,GAAAA,WAAAA,YAIvB,MAHTC,WAAYC,OAGH,MAHqBD,EAAAA,WAGrB,MAFTE,yBAA0BC,OAEjB,MAFiDC,EAAAA,8BAEjD,MADTC,qBAAsBC,OACb,MADyCP,EAAAA,GAAAA,WAAAA,qBACzC,EACT,EAAsBE,IAAdM,EAAR,EAAQA,UACFC,EAAQL,IACRM,EAAWX,IACjB,EAAuDQ,GACrD,kBAAGI,EAAH,EAAGA,UAAH,OAAmBA,MAAAA,GAAnB,UAAmBA,EAAWC,0BAA9B,aAAmB,EAAgCJ,MAD7CK,EAAR,EAAQA,MAAOC,EAAf,EAAeA,UAAWC,EAA1B,EAA0BA,UAAWC,EAArC,EAAqCA,QAASC,EAA9C,EAA8CA,KAU9C,OANAC,EAAAA,EAAAA,IAAwB,WACjBvB,GACHC,EAAaY,EAAWC,EAAxBb,CAA+Bc,KAEhC,CAACA,EAAUf,EAAYa,EAAWC,IAE9B,CACLI,MAAAA,EACAE,UAAAA,EACAC,QAASA,GAAWF,IAAa,EACjCG,KAAwB,KAAjBA,MAAAA,OAAA,EAAAA,EAAME,SAAgBF,EAAK,IAAOA,GAAQ,KAY/CG,EAAqB,WAGhB,6DAAP,GAAO,IAFTtB,YAAaC,OAEJ,MAFuBC,EAAAA,GAAAA,WAAAA,YAEvB,MADTC,WAAYC,OACH,MADqBD,EAAAA,WACrB,EACT,EAAsBC,IAAdM,EAAR,EAAQA,UACFE,EAAWX,IAWjB,OAAO,YAAyB,IAAtBsB,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAChBZ,EAAS,EAAC,QAENa,KAAMC,EAAAA,GAAAA,MAAAA,qCAAsDC,EAAAA,GAAAA,QAC5DC,OAAQlB,GACPiB,EAAAA,GAAAA,OAAkCJ,IAJ9B,QAOLE,KAAMC,EAAAA,GAAAA,MAAAA,qCAAsDC,EAAAA,GAAAA,OAC5DC,OAAQlB,GACPiB,EAAAA,GAAAA,MAAiCH,OAepCK,EAA2B,WAItB,6DAAP,GAAO,IAHTC,YAAAA,OAGS,MAHKC,EAAAA,GAGL,MAFT/B,YAAaC,OAEJ,MAFuBC,EAAAA,GAAAA,WAAAA,YAEvB,MADTC,WAAYC,OACH,MADqBD,EAAAA,WACrB,EACT,EAAsBC,IAAdM,EAAR,EAAQA,UACFE,EAAWX,IAYjB,OAAO,SAAC+B,EAAD,GAA8B,IAE/BC,EAFWC,EAAoB,EAApBA,UAAWC,EAAS,EAATA,GACpBC,EAAoBC,OAAOC,OAAOR,GAAaS,MAAK,SAAAC,GAAK,OAAIA,IAAUL,GAAMM,GAAAA,CAAWD,KAAWL,KAGpGC,GASDH,EAFIC,IACDQ,EAAAA,gBAAAA,KACgBC,EAAAA,GAAAA,WAGAA,EAAAA,GAAAA,UAIvB/B,EAAS,EAAC,QAENa,KAAMC,EAAAA,GAAAA,MAAAA,qCAAsDC,EAAAA,GAAAA,WAC5DC,OAAQlB,GACPiB,EAAAA,GAAAA,UAAqCM,IAJjC,QAOLR,KAAMC,EAAAA,GAAAA,MAAAA,qCAAsDC,EAAAA,GAAAA,MAC5DC,OAAQlB,GACPiB,EAAAA,GAAAA,KAAgCS,OAxB/BQ,EAAAA,GAAAA,UAAoBA,EAAAA,GAAAA,cACtBC,QAAQC,KAAR,wEAA8EX,EAA9E,mBA6BFY,EAAU,CACdnD,yBAAAA,EACA0B,mBAAAA,EACAO,yBAAAA","sources":["webpack:///./src/components/inventoryCard/inventoryCardContext.js"],"sourcesContent":["import { useShallowCompareEffect } from 'react-use';\nimport _camelCase from 'lodash/camelCase';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { reduxActions, reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductInventoryHostsQuery } from '../productView/productViewContext';\nimport {\n  RHSM_API_QUERY_INVENTORY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_INVENTORY_SORT_TYPES as SORT_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * Combined Redux RHSM Actions, getInstancesInventory, and inventory selector response.\n *\n * @param {object} options\n * @param {boolean} options.isDisabled\n * @param {Function} options.getInventory\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useProductInventoryQuery\n * @param {Function} options.useSelectorsResponse\n * @returns {Function}\n */\nconst useGetInstancesInventory = ({\n  isDisabled = false,\n  getInventory = reduxActions.rhsm.getInstancesInventory,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventoryHostsQuery,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductInventoryQuery();\n  const dispatch = useAliasDispatch();\n  const { error, cancelled, fulfilled, pending, data } = useAliasSelectorsResponse(\n    ({ inventory }) => inventory?.instancesInventory?.[productId]\n  );\n\n  useShallowCompareEffect(() => {\n    if (!isDisabled) {\n      getInventory(productId, query)(dispatch);\n    }\n  }, [dispatch, isDisabled, productId, query]);\n\n  return {\n    error,\n    fulfilled,\n    pending: pending || cancelled || false,\n    data: (data?.length === 1 && data[0]) || data || {}\n  };\n};\n\n/**\n * An onPage callback for instances inventory.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnPageInstances = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for instances inventory.\n   *\n   * @event onPage\n   * @param {object} params\n   * @param {number} params.offset\n   * @param {number} params.perPage\n   * @returns {void}\n   */\n  return ({ offset, perPage }) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.OFFSET],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.OFFSET]: offset\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.LIMIT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.LIMIT]: perPage\n      }\n    ]);\n  };\n};\n\n/**\n * An onColumnSort callback for instances inventory.\n *\n * @param {object} options\n * @param {object} options.sortColumns\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnColumnSortInstances = ({\n  sortColumns = SORT_TYPES,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for instances inventory.\n   *\n   * @event onColumnSort\n   * @param {*} _data\n   * @param {object} params\n   * @param {string} params.direction\n   * @param {string} params.id\n   * @returns {void}\n   */\n  return (_data, { direction, id }) => {\n    const updatedSortColumn = Object.values(sortColumns).find(value => value === id || _camelCase(value) === id);\n    let updatedDirection;\n\n    if (!updatedSortColumn) {\n      if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n        console.warn(`Sorting can only be performed on select fields, confirm field ${id} is allowed.`);\n      }\n      return;\n    }\n\n    switch (direction) {\n      case SortByDirection.desc:\n        updatedDirection = SORT_DIRECTION_TYPES.DESCENDING;\n        break;\n      default:\n        updatedDirection = SORT_DIRECTION_TYPES.ASCENDING;\n        break;\n    }\n\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.DIRECTION],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.DIRECTION]: updatedDirection\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.SORT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.SORT]: updatedSortColumn\n      }\n    ]);\n  };\n};\n\nconst context = {\n  useGetInstancesInventory,\n  useOnPageInstances,\n  useOnColumnSortInstances\n};\n\nexport { context as default, context, useGetInstancesInventory, useOnPageInstances, useOnColumnSortInstances };\n"],"names":["useGetInstancesInventory","isDisabled","getInventory","reduxActions","useDispatch","useAliasDispatch","storeHooks","useProduct","useAliasProduct","useProductInventoryQuery","useAliasProductInventoryQuery","useProductInventoryHostsQuery","useSelectorsResponse","useAliasSelectorsResponse","productId","query","dispatch","inventory","instancesInventory","error","cancelled","fulfilled","pending","data","useShallowCompareEffect","length","useOnPageInstances","offset","perPage","type","reduxTypes","RHSM_API_QUERY_SET_TYPES","viewId","useOnColumnSortInstances","sortColumns","SORT_TYPES","_data","updatedDirection","direction","id","updatedSortColumn","Object","values","find","value","_camelCase","SortByDirection","SORT_DIRECTION_TYPES","helpers","console","warn","context"],"sourceRoot":""}