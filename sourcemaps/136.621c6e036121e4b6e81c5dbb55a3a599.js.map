{"version":3,"file":"js/136.1656041807170.7c68029d7a7acc3eaefa.js","mappings":"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","sources":["webpack:///./src/components/form/select.js","webpack:///./src/components/toolbar/toolbarFieldBillingProvider.js","webpack:///./src/components/toolbar/toolbarFieldGranularity.js","webpack:///./src/components/toolbar/toolbarFieldRangedMonthly.js","webpack:///./src/components/toolbar/toolbarFieldSelectCategory.js","webpack:///./src/components/toolbar/toolbarFieldSla.js","webpack:///./src/components/toolbar/toolbarFieldUom.js","webpack:///./src/components/toolbar/toolbarFieldUsage.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  DropdownDirection,\n  DropdownPosition,\n  Select as PfSelect,\n  SelectOption as PfSelectOption,\n  SelectVariant\n} from '@patternfly/react-core';\nimport _cloneDeep from 'lodash/cloneDeep';\nimport _isEqual from 'lodash/isEqual';\nimport _findIndex from 'lodash/findIndex';\nimport _isPlainObject from 'lodash/isPlainObject';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Pass direction as select component variant option.\n *\n * @type {DropdownDirection}\n */\nconst SelectDirection = DropdownDirection;\n\n/**\n * Pass position as select component variant option.\n *\n * @type {DropdownPosition}\n */\nconst SelectPosition = DropdownPosition;\n\n/**\n * A wrapper for Patternfly Select. Provides restructured event data for onSelect callback.\n *\n * @augments React.Component\n * @fires onSelect\n * @fires onToggle\n */\nclass Select extends React.Component {\n  state = { isExpanded: false, options: null, selected: null };\n\n  selectField = React.createRef();\n\n  componentDidMount() {\n    const { options } = this.state;\n\n    if (options === null) {\n      this.formatOptions();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { options, selectedOptions } = this.props;\n\n    if (!_isEqual(prevProps.options, options) || !_isEqual(prevProps.selectedOptions, selectedOptions)) {\n      this.formatOptions();\n    }\n  }\n\n  /**\n   * Emulate select event object, apply to provided onSelect prop.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @param {string} titleSelection\n   */\n  onSelect = (event, titleSelection) => {\n    const { options } = this.state;\n    const { id, name, onSelect, variant } = this.props;\n\n    const updatedOptions = options;\n    const optionsIndex = updatedOptions.findIndex(option => option.title === titleSelection);\n    updatedOptions[optionsIndex].selected =\n      variant === SelectVariant.single ? true : !updatedOptions[optionsIndex].selected;\n\n    if (variant === SelectVariant.single) {\n      updatedOptions.forEach((option, index) => {\n        if (optionsIndex !== index) {\n          updatedOptions[index].selected = false;\n        }\n      });\n    }\n\n    const updateSelected =\n      variant === SelectVariant.single\n        ? titleSelection\n        : updatedOptions.filter(opt => opt.selected === true).map(opt => opt.title);\n\n    this.setState(\n      {\n        options: updatedOptions,\n        selected: updateSelected\n      },\n      () => {\n        const mockUpdatedOptions = _cloneDeep(updatedOptions);\n\n        const mockTarget = {\n          id,\n          name: name || id,\n          value: mockUpdatedOptions[optionsIndex].value,\n          selected:\n            (variant === SelectVariant.single && mockUpdatedOptions[optionsIndex]) || _cloneDeep(updateSelected),\n          selectedIndex: optionsIndex,\n          type: `select-${(variant === SelectVariant.single && 'one') || 'multiple'}`,\n          options: mockUpdatedOptions\n        };\n\n        if (variant === SelectVariant.checkbox) {\n          mockTarget.checked = mockUpdatedOptions[optionsIndex].selected;\n        }\n\n        const mockEvent = {\n          ...mockTarget,\n          target: { ...mockTarget },\n          currentTarget: { ...mockTarget },\n          persist: helpers.noop\n        };\n\n        onSelect({ ...mockEvent }, optionsIndex, mockUpdatedOptions);\n\n        if (variant === SelectVariant.single) {\n          this.setState({\n            isExpanded: false\n          });\n        }\n      }\n    );\n  };\n\n  /**\n   * Patternfly Select's open/closed state.\n   *\n   * @event onToggle\n   * @param {boolean} expanded\n   */\n  onToggle = expanded => {\n    this.setState({\n      isExpanded: expanded\n    });\n  };\n\n  // FixMe: attributes filtered on PF select component. allow data- attributes\n  /**\n   * Format options into a consumable array of objects format.\n   * Note: It is understood that for line 151'ish around \"updatedOptions\" we dump all values regardless\n   * of whether they are plain objects, or not, into updatedOptions. This has been done for speed only,\n   * one less check to perform.\n   */\n  formatOptions() {\n    const { current: domElement = {} } = this.selectField;\n    const { options, selectedOptions, variant } = this.props;\n    const dataAttributes = Object.entries(this.props).filter(([key]) => /^data-/i.test(key));\n    const updatedOptions = _isPlainObject(options)\n      ? Object.entries(options).map(([key, value]) => ({ ...value, title: key, value }))\n      : _cloneDeep(options);\n\n    const activateOptions =\n      (selectedOptions && typeof selectedOptions === 'string') || typeof selectedOptions === 'number'\n        ? [selectedOptions]\n        : selectedOptions;\n\n    updatedOptions.forEach((option, index) => {\n      let convertedOption = option;\n\n      if (typeof convertedOption === 'string') {\n        convertedOption = {\n          title: option,\n          value: option\n        };\n\n        updatedOptions[index] = convertedOption;\n      }\n\n      convertedOption.text = convertedOption.text || convertedOption.title;\n      convertedOption.textContent = convertedOption.textContent || convertedOption.title;\n      convertedOption.label = convertedOption.label || convertedOption.title;\n\n      if (activateOptions) {\n        let isSelected;\n\n        if (_isPlainObject(convertedOption.value)) {\n          isSelected = _findIndex(activateOptions, convertedOption.value) > -1;\n\n          if (!isSelected) {\n            const tempSearch = activateOptions.find(activeOption =>\n              Object.values(convertedOption.value).includes(activeOption)\n            );\n            isSelected = !!tempSearch;\n          }\n        } else {\n          isSelected = activateOptions.includes(convertedOption.value);\n        }\n\n        if (!isSelected) {\n          isSelected = activateOptions.includes(convertedOption.title);\n        }\n\n        updatedOptions[index].selected = isSelected;\n      }\n    });\n\n    let updateSelected;\n\n    if (variant === SelectVariant.single) {\n      updateSelected = (updatedOptions.find(opt => opt.selected === true) || {}).title;\n    } else {\n      updateSelected = updatedOptions.filter(opt => opt.selected === true).map(opt => opt.title);\n    }\n\n    if (domElement?.parentRef?.current) {\n      dataAttributes.forEach(([key, value]) => domElement?.parentRef?.current.setAttribute(key, value));\n    }\n\n    this.setState({\n      options: updatedOptions,\n      selected: updateSelected\n    });\n  }\n\n  /**\n   * Render a select/dropdown list.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { options, selected, isExpanded } = this.state;\n    const {\n      ariaLabel,\n      className,\n      direction,\n      isDisabled,\n      isToggleText,\n      maxHeight,\n      placeholder,\n      position,\n      toggleIcon,\n      variant\n    } = this.props;\n\n    const pfSelectOptions = {\n      direction,\n      maxHeight\n    };\n\n    // FixMe: investigate \"isDisabled\", PFReact quirks?\n    if (!options || !options.length || isDisabled) {\n      pfSelectOptions.isDisabled = true;\n    }\n\n    /**\n     * FixMe: PFReact quirks around PfSelect, requires children\n     * \"Null\" is a typical fallback we use across the board on a multitude of React apps.\n     * In this case \"null\" is a fallback for scenarios where an \"undefined\" list is passed\n     * during initial mount. Converted to an empty list/array \"[]\" to compensate.\n     */\n    /**\n     * Note: PFReact missing select border on compile\n     * Related https://github.com/patternfly/patternfly-react/issues/5650 and\n     * https://github.com/cssnano/cssnano/issues/1051\n     */\n    return (\n      <div className=\"curiosity-select\">\n        <PfSelect\n          menuAppendTo=\"parent\"\n          className={`curiosity-select-pf${(!isToggleText && '__no-toggle-text') || ''} ${\n            (position === DropdownPosition.right && 'curiosity-select-pf__position-right') || ''\n          } ${className}`}\n          variant={variant}\n          aria-label={ariaLabel}\n          onToggle={this.onToggle}\n          onSelect={this.onSelect}\n          selections={selected}\n          isOpen={isExpanded}\n          toggleIcon={toggleIcon}\n          placeholderText={placeholder}\n          ref={this.selectField}\n          {...pfSelectOptions}\n        >\n          {(options &&\n            options.map(option => (\n              <PfSelectOption\n                key={window.btoa(`${option.title}-${option.value}`)}\n                id={window.btoa(`${option.title}-${option.value}`)}\n                value={option.title}\n                data-value={(_isPlainObject(option.value) && JSON.stringify([option.value])) || option.value}\n                data-title={option.title}\n              />\n            ))) ||\n            []}\n        </PfSelect>\n      </div>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{toggleIcon: (Node|Function), className: string, ariaLabel: string, onSelect: Function,\n *     isToggleText: boolean, maxHeight: number, name: string, options: (Array|object),\n *     selectedOptions: (number|string|Array), variant: string, id: string, isDisabled: boolean,\n *     placeholder: string, position: string, direction: string}}\n */\nSelect.propTypes = {\n  ariaLabel: PropTypes.string,\n  className: PropTypes.string,\n  direction: PropTypes.oneOf(Object.values(SelectDirection)),\n  id: PropTypes.string,\n  isDisabled: PropTypes.bool,\n  isToggleText: PropTypes.bool,\n  maxHeight: PropTypes.number,\n  name: PropTypes.string,\n  onSelect: PropTypes.func,\n  options: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.string),\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.any,\n        value: PropTypes.any.isRequired,\n        selected: PropTypes.bool\n      })\n    ),\n    PropTypes.shape({\n      title: PropTypes.any,\n      value: PropTypes.any.isRequired,\n      selected: PropTypes.bool\n    }),\n    PropTypes.object\n  ]),\n  placeholder: PropTypes.string,\n  position: PropTypes.oneOf(Object.values(SelectPosition)),\n  selectedOptions: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]))\n  ]),\n  toggleIcon: PropTypes.element,\n  variant: PropTypes.oneOf([...Object.values(SelectVariant)])\n};\n\n/**\n * Default props.\n *\n * @type {{toggleIcon: (Node|Function), className: string, ariaLabel: string, onSelect: Function, isToggleText: boolean,\n *     maxHeight: number, name: string, options: (Array|object), selectedOptions: (number|string|Array),\n *     variant: SelectVariant.single, id: string, isDisabled: boolean, placeholder: string,\n *     position: DropdownPosition.left, direction: DropdownDirection.down}}\n */\nSelect.defaultProps = {\n  ariaLabel: 'Select option',\n  className: '',\n  direction: SelectDirection.down,\n  id: helpers.generateId(),\n  isDisabled: false,\n  isToggleText: true,\n  maxHeight: null,\n  name: null,\n  onSelect: helpers.noop,\n  options: [],\n  placeholder: 'Select option',\n  position: SelectPosition.left,\n  selectedOptions: null,\n  toggleIcon: null,\n  variant: SelectVariant.single\n};\n\nexport { Select as default, Select, SelectDirection, SelectPosition };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport {\n  RHSM_API_QUERY_BILLING_PROVIDER_TYPES as FIELD_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.billing_provider', { context: (type === '' && 'none') || type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update billing provider.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER]: value\n      }\n    ]);\n  };\n};\n\n/**\n * Display a billing provider field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {object} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductQuery\n * @returns {Node}\n */\nconst ToolbarFieldBillingProvider = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductQuery: useAliasProductQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER]: updatedValue } = useAliasProductQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'billing_provider' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'billing_provider' })}\n      position={position}\n      data-test=\"toolbarFieldBillingProvider\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldBillingProvider.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldBillingProvider.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductQuery\n};\n\nexport { ToolbarFieldBillingProvider as default, ToolbarFieldBillingProvider, toolbarFieldOptions, useOnSelect };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.granularity', { context: type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update granularity.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    const { startDate, endDate } = dateHelpers.getRangedDateTime(value);\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: value\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      }\n    ]);\n  };\n};\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {Array} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst ToolbarFieldGranularity = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_TYPES.GRANULARITY]: updatedValue } = useAliasProductGraphTallyQuery();\n  const onSelect = useAliasOnSelect();\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'granularity' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'granularity' })}\n      position={position}\n      data-test=\"toolbarFieldGranularity\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldGranularity.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldGranularity.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductGraphTallyQuery\n};\n\nexport { ToolbarFieldGranularity as default, ToolbarFieldGranularity, toolbarFieldOptions, useOnSelect };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = dateHelpers.getRangedMonthDateTime().listDateTimeRanges.map(dateTime => ({\n  ...dateTime,\n  selected: false\n}));\n\n/**\n * On select update granularity.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value } = {}) => {\n    const { startDate, endDate } = value;\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: FIELD_TYPES.DAILY\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate?.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate?.toISOString()\n      }\n    ]);\n  };\n};\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {Array} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst ToolbarFieldRangedMonthly = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_TYPES.START_DATE]: updatedValue } = useAliasProductGraphTallyQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({\n    ...option,\n    selected: option.title === updatedValue || option.value.startDate.toISOString() === updatedValue\n  }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'rangedMonthly' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'rangedMonthly' })}\n      position={position}\n      maxHeight={250}\n      data-test=\"toolbarFieldRangeGranularity\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldRangedMonthly.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldRangedMonthly.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductGraphTallyQuery\n};\n\nexport { ToolbarFieldRangedMonthly as default, ToolbarFieldRangedMonthly, toolbarFieldOptions, useOnSelect };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport { useShallowCompareEffect } from 'react-use';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductToolbarConfig } from '../productView/productViewContext';\nimport { Select } from '../form/select';\nimport { RHSM_API_QUERY_SET_TYPES as RHSM_API_QUERY_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\nimport { ToolbarFieldGranularity, toolbarFieldOptions as granularityOptions } from './toolbarFieldGranularity';\nimport { ToolbarFieldRangedMonthly, toolbarFieldOptions as rangedMonthlyOptions } from './toolbarFieldRangedMonthly';\nimport {\n  ToolbarFieldBillingProvider,\n  toolbarFieldOptions as billingProviderOptions\n} from './toolbarFieldBillingProvider';\nimport { ToolbarFieldSla, toolbarFieldOptions as slaOptions } from './toolbarFieldSla';\nimport { ToolbarFieldUom, toolbarFieldOptions as uomOptions } from './toolbarFieldUom';\nimport { ToolbarFieldUsage, toolbarFieldOptions as usageOptions } from './toolbarFieldUsage';\n\n/**\n * Select field options. Use function instead of arrow func to help with component\n * display name during testing.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = [\n  {\n    title: translate('curiosity-toolbar.category', { context: RHSM_API_QUERY_TYPES.GRANULARITY }),\n    value: RHSM_API_QUERY_TYPES.GRANULARITY,\n    component: function Granularity(props) {\n      return <ToolbarFieldGranularity key=\"selectCategory_granularity\" {...props} />;\n    },\n    options: granularityOptions,\n    isClearable: false\n  },\n  {\n    title: translate('curiosity-toolbar.category', { context: 'rangedMonthly' }),\n    value: 'rangedMonthly',\n    component: function RangedMonthly(props) {\n      return <ToolbarFieldRangedMonthly key=\"selectCategory_rangedMonthly\" {...props} />;\n    },\n    options: rangedMonthlyOptions,\n    isClearable: false\n  },\n  {\n    title: translate('curiosity-toolbar.category', { context: RHSM_API_QUERY_TYPES.UOM }),\n    value: RHSM_API_QUERY_TYPES.UOM,\n    component: function Uom(props) {\n      return <ToolbarFieldUom key=\"selectCategory_uom\" {...props} />;\n    },\n    options: uomOptions,\n    isClearable: false\n  },\n  {\n    title: translate('curiosity-toolbar.category', { context: RHSM_API_QUERY_TYPES.BILLING_PROVIDER }),\n    value: RHSM_API_QUERY_TYPES.BILLING_PROVIDER,\n    component: function BillingProvider(props) {\n      return <ToolbarFieldBillingProvider key=\"selectCategory_billingProvider\" {...props} />;\n    },\n    options: billingProviderOptions,\n    isClearable: true\n  },\n  {\n    title: translate('curiosity-toolbar.category', { context: RHSM_API_QUERY_TYPES.SLA }),\n    value: RHSM_API_QUERY_TYPES.SLA,\n    component: function Sla(props) {\n      return <ToolbarFieldSla key=\"selectCategory_sla\" {...props} />;\n    },\n    options: slaOptions,\n    isClearable: true\n  },\n  {\n    title: translate('curiosity-toolbar.category', { context: RHSM_API_QUERY_TYPES.USAGE }),\n    value: RHSM_API_QUERY_TYPES.USAGE,\n    component: function Usage(props) {\n      return <ToolbarFieldUsage key=\"selectCategory_usage\" {...props} />;\n    },\n    options: usageOptions,\n    isClearable: true\n  }\n].map(option => ({\n  ...option,\n  selected: false\n}));\n\n/**\n * On select update category.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.toolbar.SET_FILTER_TYPE,\n        viewId,\n        currentFilter: value\n      }\n    ]);\n  };\n};\n\n/**\n * Return filtered category options, current, and initial value.\n *\n * @param {object} options\n * @param {Array} options.categoryOptions\n * @param {Function} options.useProduct\n * @param {Function} options.useProductToolbarConfig\n * @param {Function} options.useSelector\n * @returns {object}\n */\nconst useSelectCategoryOptions = ({\n  categoryOptions = toolbarFieldOptions,\n  useProduct: useAliasProduct = useProduct,\n  useProductToolbarConfig: useAliasProductToolbarConfig = useProductToolbarConfig,\n  useSelector: useAliasSelector = storeHooks.reactRedux.useSelector\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const { currentFilter: updatedValue } = useAliasSelector(({ toolbar }) => toolbar.filters?.[viewId], {});\n  const { filters = [] } = useAliasProductToolbarConfig();\n\n  let initialValue;\n\n  const updatedOptions = filters.map(({ id, selected }) => {\n    const option = categoryOptions.find(({ value }) => id === value);\n\n    if (updatedValue === undefined && selected) {\n      initialValue = option.value;\n    }\n\n    return {\n      ...option,\n      selected: (updatedValue === undefined && selected) || updatedValue === option.value\n    };\n  });\n\n  return {\n    currentCategory: updatedValue,\n    initialCategory: initialValue,\n    options: updatedOptions\n  };\n};\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useSelectCategoryOptions\n * @returns {Node}\n */\nconst ToolbarFieldSelectCategory = ({\n  t,\n  useOnSelect: useAliasOnSelect,\n  useSelectCategoryOptions: useAliasSelectCategoryOptions\n}) => {\n  const { currentCategory: updatedValue, initialCategory: initialValue, options } = useAliasSelectCategoryOptions();\n  const onSelect = useAliasOnSelect();\n\n  useShallowCompareEffect(() => {\n    if (initialValue) {\n      onSelect({ value: initialValue });\n    }\n  }, [initialValue, onSelect]);\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder_filter')}\n      onSelect={onSelect}\n      options={options}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder_filter')}\n      toggleIcon={<FilterIcon />}\n      data-test=\"toolbarFieldCategory\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, useSelectCategoryOptions: Function}}\n */\nToolbarFieldSelectCategory.propTypes = {\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useSelectCategoryOptions: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, useSelectCategoryOptions: Function}}\n */\nToolbarFieldSelectCategory.defaultProps = {\n  t: translate,\n  useOnSelect,\n  useSelectCategoryOptions\n};\n\nexport {\n  ToolbarFieldSelectCategory as default,\n  ToolbarFieldSelectCategory,\n  toolbarFieldOptions,\n  useOnSelect,\n  useSelectCategoryOptions\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_SLA_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.sla', { context: (type === '' && 'none') || type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update sla.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.SLA],\n        viewId,\n        [RHSM_API_QUERY_TYPES.SLA]: value\n      }\n    ]);\n  };\n};\n\n/**\n * Display a sla field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {object} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductQuery\n * @returns {Node}\n */\nconst ToolbarFieldSla = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductQuery: useAliasProductQuery\n}) => {\n  const { [RHSM_API_QUERY_TYPES.SLA]: updatedValue } = useAliasProductQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'sla' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'sla' })}\n      position={position}\n      data-test=\"toolbarFieldSla\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldSla.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldSla.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductQuery\n};\n\nexport { ToolbarFieldSla as default, ToolbarFieldSla, toolbarFieldOptions, useOnSelect };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_UOM_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.uom', { context: type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update uom.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) =>\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.UOM],\n        viewId,\n        [RHSM_API_QUERY_TYPES.UOM]: value\n      }\n    ]);\n};\n\n/**\n * Display a unit of measure (uom) field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {Array} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductQuery\n * @returns {Node}\n */\nconst ToolbarFieldUom = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductQuery: useAliasProductQuery\n}) => {\n  const { [RHSM_API_QUERY_TYPES.UOM]: updatedValue } = useAliasProductQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'uom' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'uom' })}\n      position={position}\n      data-test=\"toolbarFieldUom\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldUom.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldUom.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductQuery\n};\n\nexport { ToolbarFieldUom as default, ToolbarFieldUom, toolbarFieldOptions, useOnSelect };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_USAGE_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.usage', { context: (type === '' && 'unspecified') || type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update usage.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) =>\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.USAGE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.USAGE]: value\n      }\n    ]);\n};\n\n/**\n * Display a usage field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {object} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductQuery\n * @returns {Node}\n */\nconst ToolbarFieldUsage = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductQuery: useAliasProductQuery\n}) => {\n  const { [RHSM_API_QUERY_TYPES.USAGE]: updatedValue } = useAliasProductQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'usage' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'usage' })}\n      position={position}\n      data-test=\"toolbarFieldUsage\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldUsage.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\n\nToolbarFieldUsage.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductQuery\n};\n\nexport { ToolbarFieldUsage as default, ToolbarFieldUsage, toolbarFieldOptions, useOnSelect };\n"],"names":["SelectDirection","DropdownDirection","SelectPosition","DropdownPosition","Select","state","isExpanded","options","selected","selectField","React","onSelect","event","titleSelection","props","id","name","variant","updatedOptions","optionsIndex","findIndex","option","title","SelectVariant","forEach","index","updateSelected","filter","opt","map","setState","mockUpdatedOptions","_cloneDeep","mockTarget","value","selectedIndex","type","checked","mockEvent","target","currentTarget","persist","helpers","onToggle","expanded","this","formatOptions","prevProps","selectedOptions","_isEqual","current","domElement","dataAttributes","Object","entries","key","test","_isPlainObject","activateOptions","isSelected","convertedOption","text","textContent","label","_findIndex","find","activeOption","values","includes","parentRef","setAttribute","ariaLabel","className","direction","isDisabled","isToggleText","maxHeight","placeholder","position","toggleIcon","pfSelectOptions","length","menuAppendTo","selections","isOpen","placeholderText","ref","window","btoa","JSON","stringify","defaultProps","down","left","toolbarFieldOptions","FIELD_TYPES","translate","context","useOnSelect","useDispatch","useAliasDispatch","storeHooks","useProduct","useAliasProduct","viewId","dispatch","reduxTypes","RHSM_API_QUERY_SET_TYPES","ToolbarFieldBillingProvider","isFilter","t","useAliasOnSelect","updatedValue","useAliasProductQuery","useProductQuery","dateHelpers","startDate","endDate","RHSM_API_QUERY_TYPES","toISOString","ToolbarFieldGranularity","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","listDateTimeRanges","dateTime","ToolbarFieldRangedMonthly","component","granularityOptions","isClearable","rangedMonthlyOptions","ToolbarFieldUom","uomOptions","billingProviderOptions","ToolbarFieldSla","slaOptions","ToolbarFieldUsage","usageOptions","currentFilter","useSelectCategoryOptions","initialValue","categoryOptions","useProductToolbarConfig","useAliasProductToolbarConfig","useSelector","useAliasSelector","toolbar","filters","undefined","currentCategory","initialCategory","ToolbarFieldSelectCategory","useAliasSelectCategoryOptions","useShallowCompareEffect","FilterIcon"],"sourceRoot":""}