{"version":3,"file":"js/5876.1678890239215.6d17b3bab2ba69d0a4e8.js","mappings":"mZAwBMA,EAAsBC,EAAAA,GAAAA,yBAAqCC,mBAAmBC,KAAI,SAAAC,GAAQ,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC3FD,GAAQ,IACXE,UAAU,GAAK,IAWXC,EAAc,WAGT,IAAAC,EAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,CAAC,EAACG,EAAAJ,EAFJK,YAAaC,OAAgB,IAAAF,EAAGG,EAAAA,GAAAA,WAAAA,YAAiCH,EAAAI,EAAAR,EACjES,WAAYC,OAAe,IAAAF,EAAGC,EAAAA,WAAUD,EAExCG,EAAmBD,IAAXE,EAAMD,EAANC,OACFC,EAAWP,IAEjB,OAAO,WAAoB,IAAAQ,EAAAb,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,CAAC,EAAXc,EAAKD,EAALC,MACAC,EAAuBD,EAAvBC,UAAWC,EAAYF,EAAZE,QACnBJ,EAAS,CACP,CACEK,KAAMC,EAAAA,GAAAA,MAAAA,+BACNP,OAAAA,IACDQ,EAAAA,EAAAA,GAAA,CAECF,KAAMC,EAAAA,GAAAA,MAAAA,qBAAsCE,EAAAA,GAAAA,aAC5CT,OAAAA,GACCS,EAAAA,GAAAA,YAAuCC,EAAAA,GAAAA,QAAiBF,EAAAA,EAAAA,GAAA,CAGzDF,KAAMC,EAAAA,GAAAA,MAAAA,qBAAsCE,EAAAA,GAAAA,YAC5CT,OAAAA,GACCS,EAAAA,GAAAA,WAAsCL,aAAS,EAATA,EAAWO,gBAAaH,EAAAA,EAAAA,GAAA,CAG/DF,KAAMC,EAAAA,GAAAA,MAAAA,qBAAsCE,EAAAA,GAAAA,UAC5CT,OAAAA,GACCS,EAAAA,GAAAA,SAAoCJ,aAAO,EAAPA,EAASM,gBAGpD,CACF,EAeMC,EAA4B,SAAHC,GAOzB,IANJC,EAAQD,EAARC,SACAC,EAAOF,EAAPE,QACAC,EAAQH,EAARG,SACAC,EAACJ,EAADI,EACaC,EAAgBL,EAA7B1B,YAG+CgC,GAAiBC,EAFPP,EAAzDQ,6BAESZ,EAAAA,GAAAA,YACHa,EAAWJ,IAEXK,EAAiBR,EAAQhC,KAAI,SAAAyC,GAAM,OAAAvC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACpCuC,GAAM,IACTtC,SAAUsC,EAAOC,QAAUN,GAAgBK,EAAOrB,MAAMC,UAAUO,gBAAkBQ,GAAY,IAGlG,OACEO,IAAAA,cAACC,EAAAA,OAAM,CACL,aAAYV,EAAE,gCAADW,OAAkCd,EAAY,UAAc,IAAM,CAAEe,QAAS,kBAC1FP,SAAUA,EACVP,QAASQ,EACTO,YAAab,EAAE,gCAADW,OAAkCd,EAAY,UAAc,IAAM,CAAEe,QAAS,kBAC3Fb,SAAUA,EACVe,UAAW,IACX,YAAU,gCAGhB,EA6BAnB,EAA0BoB,aAAe,CACvClB,UAAU,EACVC,QAASnC,EACToC,SAAUiB,EAAAA,eAAAA,KACVhB,EAAGiB,EAAAA,UACH/C,YAAAA,EACAkC,0BAAAA,EAAAA,0B","sources":["webpack:///./src/components/toolbar/toolbarFieldRangedMonthly.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport {\n  RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A standalone Ranged Monthly Granularity select filter.\n *\n * @memberof Toolbar\n * @module ToolbarFieldRangedMonthly\n */\n\n/**\n * Select field options.\n *\n * @type {Array<{title: React.ReactNode, value: string, selected: boolean}>}\n */\nconst toolbarFieldOptions = dateHelpers.getRangedMonthDateTime().listDateTimeRanges.map(dateTime => ({\n  ...dateTime,\n  selected: false\n}));\n\n/**\n * On select update granularity.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value } = {}) => {\n    const { startDate, endDate } = value;\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: FIELD_TYPES.DAILY\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate?.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.END_DATE]: endDate?.toISOString()\n      }\n    ]);\n  };\n};\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {Array} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {React.ReactNode}\n */\nconst ToolbarFieldRangedMonthly = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: updatedValue } = useAliasProductGraphTallyQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({\n    ...option,\n    selected: option.title === updatedValue || option.value.startDate.toISOString() === updatedValue\n  }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'rangedMonthly' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'rangedMonthly' })}\n      position={position}\n      maxHeight={250}\n      data-test=\"toolbarFieldRangeGranularity\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldRangedMonthly.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldRangedMonthly.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductGraphTallyQuery\n};\n\nexport { ToolbarFieldRangedMonthly as default, ToolbarFieldRangedMonthly, toolbarFieldOptions, useOnSelect };\n"],"names":["toolbarFieldOptions","dateHelpers","listDateTimeRanges","map","dateTime","_objectSpread","selected","useOnSelect","_ref","arguments","length","undefined","_ref$useDispatch","useDispatch","useAliasDispatch","storeHooks","_ref$useProduct","useProduct","useAliasProduct","_useAliasProduct","viewId","dispatch","_ref2","value","startDate","endDate","type","reduxTypes","_defineProperty","RHSM_API_QUERY_SET_TYPES","FIELD_TYPES","toISOString","ToolbarFieldRangedMonthly","_ref6","isFilter","options","position","t","useAliasOnSelect","updatedValue","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","onSelect","updatedOptions","option","title","React","Select","concat","context","placeholder","maxHeight","defaultProps","SelectPosition","translate"],"sourceRoot":""}