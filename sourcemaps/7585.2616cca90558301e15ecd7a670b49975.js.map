{"version":3,"file":"js/7585.1669838718151.1f50fb24378df3068c2d.js","mappings":"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","sources":["webpack:///./src/components/bannerMessages/bannerMessages.js","webpack:///./src/components/bannerMessages/bannerMessagesContext.js","webpack:///./src/components/productView/productViewContext.js","webpack:///./node_modules/fast-shallow-equal/index.js","webpack:///./node_modules/react-use/esm/useCustomCompareEffect.js","webpack:///./node_modules/react-use/esm/useShallowCompareEffect.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, AlertActionCloseButton, AlertVariant, Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { useShallowCompareEffect } from 'react-use';\nimport { useGetAppMessages } from './bannerMessagesContext';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Render banner messages.\n *\n * @param {object} props\n * @param {Array} props.messages\n * @param {Function} props.useGetAppMessages\n * @returns {React.ReactNode}\n */\nconst BannerMessages = ({ messages, useGetAppMessages: useAliasGetAppMessages }) => {\n  const [hideAlerts, setHideAlerts] = useState({});\n  const [alerts, setAlerts] = useState([]);\n  const { data: appMessages } = useAliasGetAppMessages();\n\n  useShallowCompareEffect(() => {\n    const updatedMessages = [];\n\n    if (messages.length) {\n      Object.entries(appMessages).forEach(([key, value]) => {\n        if (hideAlerts[key] !== true && value === true) {\n          const message = messages.find(({ id }) => id === key);\n\n          if (message) {\n            updatedMessages.push({\n              key,\n              ...message\n            });\n          }\n        }\n      });\n    }\n\n    setAlerts(\n      updatedMessages.map(({ key, message, title, variant = AlertVariant.info }) => {\n        const actionClose = <AlertActionCloseButton onClose={() => setHideAlerts({ ...hideAlerts, [key]: true })} />;\n\n        return (\n          <Alert actionClose={actionClose} key={key} title={title} variant={variant}>\n            {message}\n          </Alert>\n        );\n      })\n    );\n  }, [appMessages, hideAlerts, messages]);\n\n  if (alerts?.length) {\n    return <div className=\"curiosity-banner-messages\">{alerts}</div>;\n  }\n\n  return null;\n};\n\n/**\n * Prop types.\n *\n * @type {{useGetAppMessages: Function, messages: Array}}\n */\nBannerMessages.propTypes = {\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.node.isRequired,\n      message: PropTypes.node.isRequired,\n      variant: PropTypes.oneOf([...Object.values(AlertVariant)])\n    })\n  ),\n  useGetAppMessages: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGetAppMessages: Function, messages: Array}}\n */\nBannerMessages.defaultProps = {\n  messages: [\n    {\n      id: 'cloudigradeMismatch',\n      title: translate('curiosity-banner.dataMismatchTitle'),\n      message: translate(\n        'curiosity-banner.dataMismatchMessage',\n        {\n          context: helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS !== '' && 'cloudigradeMismatch',\n          appName: helpers.UI_DISPLAY_NAME\n        },\n        [\n          <Button\n            isInline\n            component=\"a\"\n            variant=\"link\"\n            icon={<ExternalLinkAltIcon />}\n            iconPosition=\"right\"\n            target=\"_blank\"\n            href={helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS}\n          />\n        ]\n      )\n    }\n  ],\n  useGetAppMessages\n};\n\nexport { BannerMessages as default, BannerMessages };\n","import { useShallowCompareEffect } from 'react-use';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { dateHelpers } from '../../common';\nimport {\n  rhsmConstants,\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\n\n/**\n * ToDo: useGetAppMessages is setup to work with existing Tally response, pre-metrics\n * Banner messages scans the returned Tally listing for the HAS_CLOUDIGRADE_MISMATCH. In the future\n * this may need to be updated to pull from the \"meta\" object part of the Tally response.\n */\n/**\n * Get app messages.\n *\n * @param {object} options\n * @param {Function} options.getMessageReports\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useProductQuery\n * @param {Function} options.useSelectorsResponse\n * @returns {object}\n */\nconst useGetAppMessages = ({\n  getMessageReports = reduxActions.rhsm.getMessageReports,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductQuery();\n  const dispatch = useAliasDispatch();\n  const { error, fulfilled, pending, data } = useAliasSelectorsResponse({\n    id: 'messages',\n    selector: ({ messages }) => messages?.report?.[productId]\n  });\n\n  useShallowCompareEffect(() => {\n    if (productId) {\n      const { startDate, endDate } = dateHelpers.getRangedDateTime('CURRENT');\n      const updatedQuery = {\n        ...query,\n        [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY,\n        [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate.toISOString(),\n        [RHSM_API_QUERY_SET_TYPES.END_DATE]: endDate.toISOString()\n      };\n\n      getMessageReports(productId, updatedQuery)(dispatch);\n    }\n  }, [productId, query]);\n\n  const updatedData = {\n    cloudigradeMismatch: false\n  };\n\n  if (fulfilled) {\n    const { messages = {} } = data || {};\n\n    updatedData.cloudigradeMismatch =\n      messages?.data\n        ?.reverse()\n        ?.find(\n          ({ [rhsmConstants.RHSM_API_RESPONSE_TALLY_META_TYPES.HAS_CLOUDIGRADE_MISMATCH]: mismatch }) =>\n            mismatch === true\n        ) !== undefined;\n  }\n\n  return {\n    error,\n    fulfilled,\n    pending,\n    data: {\n      ...updatedData\n    }\n  };\n};\n\nconst context = {\n  useGetAppMessages\n};\n\nexport { context as default, context, useGetAppMessages };\n","import React, { useCallback, useContext } from 'react';\nimport { reduxHelpers } from '../../redux/common';\nimport { storeHooks } from '../../redux/hooks';\nimport { rhsmConstants, RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Route context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{}, helpers.noop];\n\nconst ProductViewContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated product view context.\n *\n * @returns {React.Context<{}>}\n */\nconst useProductViewContext = () => useContext(ProductViewContext);\n\n/**\n * Return a query object from initial product config and Redux store.\n *\n * @param {string} queryType An identifier used to pull from both config and Redux, they should named the same.\n * @param {object} options\n * @param {string} options.overrideId A custom identifier, used for scenarios like the Guest inventory IDs\n * @param {object} options.useProductViewContext\n * @returns {object}\n */\nconst useProductQueryFactory = (\n  queryType,\n  { overrideId, useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}\n) => {\n  const { [queryType]: initialQuery, productId, viewId } = useAliasProductViewContext();\n  const queryOverride = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[overrideId], undefined);\n  const queryProduct = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[productId], undefined);\n  const queryView = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[viewId], undefined);\n\n  return {\n    ...initialQuery,\n    ...queryOverride,\n    ...queryProduct,\n    ...queryView\n  };\n};\n\n/**\n * Return a base product query\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductQuery = ({ queryType = 'query', options } = {}) => useProductQueryFactory(queryType, options);\n\n/**\n * Return the graph query based off of tally and capacity.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductGraphTallyQuery = ({\n  queryType = 'graphTallyQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_TALLY_CAPACITY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return the inventory query for guests. Use fallback/defaults for guests offset, limit.\n *\n * @param {object} options\n * @param {number} options.defaultLimit\n * @param {number} options.defaultOffset\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryGuestsQuery = ({\n  defaultLimit = 100,\n  defaultOffset = 0,\n  queryType = 'inventoryGuestsQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      [RHSM_API_QUERY_SET_TYPES.LIMIT]: defaultLimit,\n      [RHSM_API_QUERY_SET_TYPES.OFFSET]: defaultOffset,\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for hosts.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryHostsQuery = ({\n  queryType = 'inventoryHostsQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for subscriptions.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventorySubscriptionsQuery = ({\n  queryType = 'inventorySubscriptionsQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Get a filtered product configuration context.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductViewContext\n * @returns {object}\n */\nconst useProductContext = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductViewContext: useAliasProductViewContext = useProductViewContext\n} = {}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.UOM]: uomFilter } = useAliasProductQuery();\n  const {\n    initialGraphFilters = [],\n    initialInventoryFilters = [],\n    initialSubscriptionsInventoryFilters = [],\n    productContextFilterUom,\n    ...config\n  } = useAliasProductViewContext();\n\n  const applyUomFilter = useCallback(() => {\n    if (productContextFilterUom === true) {\n      const filterFilters = ({ id, metric, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(uomFilter, 'i').test(metric) || new RegExp(uomFilter, 'i').test(id);\n      };\n\n      return {\n        ...config,\n        initialGraphFilters: initialGraphFilters.filter(filterFilters),\n        initialInventoryFilters: initialInventoryFilters.filter(filterFilters),\n        initialSubscriptionsInventoryFilters: initialSubscriptionsInventoryFilters.filter(filterFilters)\n      };\n    }\n\n    return {\n      ...config,\n      initialGraphFilters,\n      initialInventoryFilters,\n      initialSubscriptionsInventoryFilters\n    };\n  }, [\n    config,\n    initialGraphFilters,\n    initialInventoryFilters,\n    initialSubscriptionsInventoryFilters,\n    productContextFilterUom,\n    uomFilter\n  ]);\n\n  return applyUomFilter();\n};\n\n/**\n * Return product identifiers.\n *\n * @param {object} options\n * @param {Function} options.useProductViewContext\n * @returns {{productLabel: string, viewId: string, productId: string, productGroup: string}}\n */\nconst useProduct = ({ useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}) => {\n  const { productGroup, productId, productLabel, viewId } = useAliasProductViewContext();\n  return {\n    productGroup,\n    productId,\n    productLabel,\n    viewId\n  };\n};\n\n/**\n * Return graph configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductGraphConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialGraphFilters, initialGraphSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGraphFilters,\n    settings: initialGraphSettings\n  };\n};\n\n/**\n * Return guests inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryGuestsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { inventoryGuestsQuery = {}, initialGuestsFilters, initialGuestsSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGuestsFilters,\n    initialQuery: inventoryGuestsQuery,\n    settings: initialGuestsSettings\n  };\n};\n\n/**\n * Return hosts inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryHostsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialInventoryFilters, initialInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialInventoryFilters,\n    settings: initialInventorySettings\n  };\n};\n\n/**\n * Return subscriptions inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventorySubscriptionsConfig = ({\n  useProductContext: useAliasProductContext = useProductContext\n} = {}) => {\n  const { initialSubscriptionsInventoryFilters, initialSubscriptionsInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialSubscriptionsInventoryFilters,\n    settings: initialSubscriptionsInventorySettings\n  };\n};\n\n/**\n * Return primary toolbar configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductToolbarConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const {\n    initialToolbarFilters,\n    initialToolbarSettings = {},\n    initialSecondaryToolbarFilters\n  } = useAliasProductContext();\n  return {\n    filters: initialToolbarFilters,\n    secondaryFilters: initialSecondaryToolbarFilters,\n    settings: initialToolbarSettings\n  };\n};\n\nconst context = {\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useQuery: useProductQuery,\n  useQueryFactory: useProductQueryFactory,\n  useGraphTallyQuery: useProductGraphTallyQuery,\n  useInventoryGuestsQuery: useProductInventoryGuestsQuery,\n  useInventoryHostsQuery: useProductInventoryHostsQuery,\n  useInventorySubscriptionsQuery: useProductInventorySubscriptionsQuery,\n  useProduct,\n  useGraphConfig: useProductGraphConfig,\n  useInventoryGuestsConfig: useProductInventoryGuestsConfig,\n  useInventoryHostsConfig: useProductInventoryHostsConfig,\n  useInventorySubscriptionsConfig: useProductInventorySubscriptionsConfig,\n  useToolbarConfig: useProductToolbarConfig\n};\n\nexport {\n  context as default,\n  context,\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useProductQuery,\n  useProductQueryFactory,\n  useProductGraphTallyQuery,\n  useProductInventoryGuestsQuery,\n  useProductInventoryHostsQuery,\n  useProductInventorySubscriptionsQuery,\n  useProduct,\n  useProductGraphConfig,\n  useProductInventoryGuestsConfig,\n  useProductInventoryHostsConfig,\n  useProductInventorySubscriptionsConfig,\n  useProductToolbarConfig\n};\n","var keyList = Object.keys;\n\nexports.equal = function equal (a, b) {\n  if (a === b) return true;\n  if (!(a instanceof Object) || !(b instanceof Object)) return false;\n\n  var keys = keyList(a);\n  var length = keys.length;\n\n  for (var i = 0; i < length; i++)\n    if (!(keys[i] in b)) return false;\n\n  for (var i = 0; i < length; i++)\n    if (a[keys[i]] !== b[keys[i]]) return false;\n\n  return length === keyList(b).length;\n};\n","import { useEffect, useRef } from 'react';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar useCustomCompareEffect = function (effect, deps, depsEqual) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useCustomCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useCustomCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n        if (typeof depsEqual !== 'function') {\n            console.warn('`useCustomCompareEffect` should be used with depsEqual callback for comparing deps list');\n        }\n    }\n    var ref = useRef(undefined);\n    if (!ref.current || !depsEqual(deps, ref.current)) {\n        ref.current = deps;\n    }\n    useEffect(effect, ref.current);\n};\nexport default useCustomCompareEffect;\n","import { equal as isShallowEqual } from 'fast-shallow-equal';\nimport useCustomCompareEffect from './useCustomCompareEffect';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar shallowEqualDepsList = function (prevDeps, nextDeps) {\n    return prevDeps.every(function (dep, index) { return isShallowEqual(dep, nextDeps[index]); });\n};\nvar useShallowCompareEffect = function (effect, deps) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useShallowCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useShallowCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n    }\n    useCustomCompareEffect(effect, deps, shallowEqualDepsList);\n};\nexport default useShallowCompareEffect;\n"],"names":["BannerMessages","messages","useAliasGetAppMessages","useGetAppMessages","useState","hideAlerts","setHideAlerts","alerts","setAlerts","appMessages","data","useShallowCompareEffect","updatedMessages","length","Object","entries","forEach","key","value","message","find","id","push","map","title","variant","AlertVariant","actionClose","AlertActionCloseButton","onClose","Alert","className","defaultProps","translate","context","helpers","appName","Button","isInline","component","icon","ExternalLinkAltIcon","iconPosition","target","href","getMessageReports","reduxActions","useDispatch","useAliasDispatch","storeHooks","useProduct","useAliasProduct","useProductQuery","useAliasProductQuery","useSelectorsResponse","useAliasSelectorsResponse","productId","query","dispatch","selector","report","error","fulfilled","pending","dateHelpers","startDate","endDate","updatedQuery","RHSM_API_QUERY_SET_TYPES","GRANULARITY_TYPES","toISOString","updatedData","cloudigradeMismatch","undefined","reverse","rhsmConstants","DEFAULT_CONTEXT","ProductViewContext","React","useProductViewContext","useContext","useProductQueryFactory","queryType","overrideId","useAliasProductViewContext","initialQuery","viewId","queryOverride","view","queryProduct","queryView","options","useProductGraphTallyQuery","schemaCheck","reduxHelpers","useProductInventoryGuestsQuery","defaultLimit","defaultOffset","useProductInventoryHostsQuery","useProductInventorySubscriptionsQuery","useProductContext","uomFilter","initialGraphFilters","initialInventoryFilters","initialSubscriptionsInventoryFilters","productContextFilterUom","config","applyUomFilter","useCallback","filterFilters","metric","isOptional","RegExp","test","filter","productGroup","productLabel","useProductGraphConfig","useAliasProductContext","initialGraphSettings","filters","settings","useProductInventoryGuestsConfig","inventoryGuestsQuery","initialGuestsFilters","initialGuestsSettings","useProductInventoryHostsConfig","initialInventorySettings","useProductInventorySubscriptionsConfig","initialSubscriptionsInventorySettings","useProductToolbarConfig","initialToolbarFilters","initialToolbarSettings","initialSecondaryToolbarFilters","secondaryFilters","useQuery","useQueryFactory","useGraphTallyQuery","useInventoryGuestsQuery","useInventoryHostsQuery","useInventorySubscriptionsQuery","useGraphConfig","useInventoryGuestsConfig","useInventoryHostsConfig","useInventorySubscriptionsConfig","useToolbarConfig","keyList","keys","exports","a","b","i","effect","deps","depsEqual","ref","useRef","current","useEffect","shallowEqualDepsList","prevDeps","nextDeps","every","dep","index"],"sourceRoot":""}