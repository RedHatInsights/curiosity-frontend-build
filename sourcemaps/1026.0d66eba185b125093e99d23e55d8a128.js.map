{"version":3,"file":"js/1026.1661997975917.288650ca067e2e6a3108.js","mappings":"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","sources":["webpack:///./src/components/chart/chartHelpers.js"],"sourcesContent":["import React from 'react';\nimport _cloneDeep from 'lodash/cloneDeep';\nimport { helpers } from '../../common';\n\n/**\n * Generate max X and Y values from datasets.\n *\n * @param {object} params\n * @param {Array} params.dataSets\n * @returns {{individualMaxY: object, maxY: number, maxX: number}}\n */\nconst generateMaxXY = ({ dataSets = [] } = {}) => {\n  const individualDataSetsMaxY = {};\n  let combinedDataSetMaxX = 0;\n  let combinedDataSetsMaxY = 0;\n\n  dataSets\n    .filter(({ isStacked }) => isStacked === true)\n    .forEach(({ data }) => {\n      if (Array.isArray(data)) {\n        combinedDataSetsMaxY += Math.max(...data.map(value => value?.y ?? 0));\n      }\n    });\n\n  dataSets.forEach(({ id, data }) => {\n    let dataSetMaxY = 0;\n\n    if (Array.isArray(data)) {\n      combinedDataSetMaxX = data.length > combinedDataSetMaxX ? data.length : combinedDataSetMaxX;\n\n      dataSetMaxY = Math.max(...data.map(value => value?.y ?? 0));\n      combinedDataSetsMaxY = dataSetMaxY > combinedDataSetsMaxY ? dataSetMaxY : combinedDataSetsMaxY;\n    }\n\n    if (id) {\n      individualDataSetsMaxY[id] = dataSetMaxY;\n    }\n  });\n\n  return {\n    maxX: combinedDataSetMaxX,\n    maxY: combinedDataSetsMaxY,\n    individualMaxY: individualDataSetsMaxY\n  };\n};\n\n/**\n * Generate Y axis domain ranges from dataSets, ignore X axis.\n *\n * @param {object} params\n * @param {number|object} params.maxY\n * @param {object} params.padding\n * @returns {{ domain: { y: Array }, padding: {object} }}\n */\nconst generateDomains = ({ maxY, padding = {} } = {}) => {\n  const updatedChartDomain = {};\n  const updatedPadding = { ...padding };\n  const generatedDomain = {};\n\n  if (Object.values(maxY).length) {\n    generatedDomain.y = [0, 1.25];\n  } else if (maxY >= 0.1) {\n    const floored = Math.pow(10, Math.floor(Math.log10(maxY || 10)));\n    generatedDomain.y = [0, Math.ceil((maxY + 1) / floored) * floored];\n  } else if (maxY < 0.1) {\n    generatedDomain.y = [0, maxY + maxY / 4 || 10];\n  } else {\n    generatedDomain.y = [0, 10];\n  }\n\n  if (maxY < 0.01) {\n    updatedPadding.left += generatedDomain.y.toString().length;\n    updatedPadding.right += generatedDomain.y.toString().length;\n  }\n\n  if (Object.keys(generatedDomain).length) {\n    updatedChartDomain.domain = generatedDomain;\n  }\n\n  return {\n    ...updatedChartDomain,\n    padding: updatedPadding\n  };\n};\n\n/**\n * Generate chart element props.\n *\n * @param {object} params\n * @param {Array} params.dataSets\n * @param {number} params.maxX\n * @param {number} params.maxY\n * @param {Function} params.xValueFormat\n * @param {Function} params.yValueFormat\n * @returns {{elementsById: object, stackedElements: Array, stackedElementsById: object, elements: Array}}\n */\nconst generateElementsProps = ({ dataSets = [], maxX, maxY, xValueFormat, yValueFormat }) => {\n  const elements = [];\n  const stackedElements = [];\n  const elementsById = {};\n  const stackedElementsById = {};\n\n  dataSets.forEach(dataSet => {\n    const { animate, chartType, data, fill, id, isStacked, interpolation, stroke, strokeDasharray, strokeWidth } =\n      dataSet;\n\n    if (data?.length) {\n      const dataColorStroke = {\n        data: {}\n      };\n\n      if (fill && chartType !== 'line' && chartType !== 'threshold') {\n        dataColorStroke.data.fill = fill;\n      }\n\n      if (stroke) {\n        dataColorStroke.data.stroke = stroke;\n      }\n\n      if (strokeDasharray) {\n        dataColorStroke.data.strokeDasharray = strokeDasharray;\n      }\n\n      if (strokeWidth) {\n        dataColorStroke.data.strokeWidth = strokeWidth;\n      }\n\n      const defaultProps = {};\n\n      if (animate) {\n        defaultProps.animate = animate;\n      }\n\n      if (interpolation) {\n        defaultProps.interpolation = interpolation;\n      }\n\n      const chartElementProps = {\n        ...defaultProps,\n        key: `chart-${dataSet.id}-${chartType || ''}`,\n        name: `chart-${dataSet.id}-${chartType || ''}`,\n        data: dataSet.data,\n        style: { ...(dataSet.style || {}), ...dataColorStroke },\n        themeColor: dataSet.themeColor,\n        themeVariant: dataSet.themeVariant,\n        x:\n          (xValueFormat &&\n            (datum => {\n              const xValue = xValueFormat({ datum, maxX });\n              return xValue === undefined || Number.isNaN(xValue) ? 0 : xValue;\n            })) ||\n          undefined,\n        y: datum => {\n          let yValue;\n\n          if (yValueFormat) {\n            yValue = yValueFormat({\n              datum,\n              isMultiAxis: typeof maxY !== 'number',\n              maxY: typeof maxY === 'number' ? maxY : maxY?.[dataSet.id]\n            });\n          } else {\n            yValue = typeof maxY === 'number' ? datum.y : datum.y / maxY?.[dataSet.id]; // eslint-disable-line\n          }\n\n          return yValue === undefined || Number.isNaN(yValue) ? 0 : yValue;\n        }\n      };\n\n      const props = { ...chartElementProps };\n      const updatedProps = { chartType, props };\n\n      if (isStacked) {\n        stackedElementsById[id] = updatedProps;\n        stackedElements.push(updatedProps);\n      } else {\n        elementsById[id] = updatedProps;\n        elements.push(updatedProps);\n      }\n    }\n  });\n\n  return {\n    elements,\n    elementsById,\n    stackedElements,\n    stackedElementsById\n  };\n};\n\n/**\n * Preprocess datasets for tooltips.\n *\n * @param {object} params\n * @param {Node|Function} params.content\n * @param {Array} params.dataSets\n * @returns {{}}\n */\nconst generateTooltipData = ({ content = helpers.noop, dataSets = [] } = {}) => {\n  const tooltipDataSetLookUp = {};\n\n  if (content && Array.isArray(dataSets?.[0]?.data)) {\n    dataSets[0].data.forEach((dataSet, index) => {\n      const itemsByKey = {};\n\n      dataSets.forEach(data => {\n        if (data?.data[index]) {\n          itemsByKey[data.id] = {\n            color: data.stroke || data.fill || data.color || '',\n            chartType: data.chartType,\n            data: _cloneDeep(data.data[index])\n          };\n        }\n      });\n\n      const mockDatum = {\n        datum: { x: dataSet.x, y: dataSet.y, index, itemsByKey }\n      };\n\n      tooltipDataSetLookUp[dataSet.x] = {\n        x: dataSet.x,\n        y: null,\n        itemsByKey,\n        tooltip:\n          (React.isValidElement(content) && React.cloneElement(content, { ...mockDatum })) || content({ ...mockDatum })\n      };\n    });\n  }\n\n  return tooltipDataSetLookUp;\n};\n\n/**\n * Generate X axis props, ticks, tick formatting.\n *\n * @param {object} params\n * @param {object} params.dataSet\n * @param {number} params.maxX\n * @param {number} params.xAxisLabelIncrement\n * @param {object} params.xAxisPropDefaults\n * @param {Function} params.xAxisTickFormat\n * @returns {{tickFormat: (function(*)), tickValues: *}}\n */\nconst generateXAxisProps = ({\n  dataSet = {},\n  maxX,\n  xAxisLabelIncrement,\n  xAxisPropDefaults = {},\n  xAxisTickFormat\n} = {}) => {\n  const { data = [], xAxisChartLabel } = dataSet;\n  const axisProps = {\n    ...xAxisPropDefaults,\n    tickValues: data.reduce(\n      (acc, current, index) => (index % xAxisLabelIncrement === 0 ? acc.concat(current.x) : acc),\n      []\n    ),\n    tickFormat: tick => data[tick]?.xAxisLabel || tick\n  };\n\n  if (typeof xAxisChartLabel === 'function') {\n    axisProps.label = xAxisChartLabel({ ...dataSet, xAxisChartLabel: undefined });\n  } else {\n    axisProps.label = xAxisChartLabel;\n  }\n\n  if (typeof xAxisTickFormat === 'function') {\n    axisProps.tickFormat = tick => {\n      const tickIndex = axisProps.tickValues.indexOf(tick);\n      const previousItem = { ...data[axisProps.tickValues[tickIndex - 1]] };\n      const nextItem = { ...data[axisProps.tickValues[tickIndex + 1]] };\n      const item = { ...data[tick] };\n\n      return xAxisTickFormat({ tick, previousItem, item, nextItem, maxX });\n    };\n  }\n\n  return axisProps;\n};\n\n/**\n * Generate Y axis props, ticks, tick formatting.\n *\n * @param {object} params\n * @param {Array} params.dataSets\n * @param {number|object} params.maxY\n * @param {object} params.yAxisPropDefaults\n * @param {Function} params.yAxisTickFormat\n * @returns {Array}\n */\nconst generateYAxisProps = ({ dataSets = [], maxY, yAxisPropDefaults = {}, yAxisTickFormat } = {}) => {\n  const axisProps = [];\n  const isMultiAxis = dataSets.length > 1;\n\n  dataSets.forEach(({ yAxisChartLabel, id, stroke, strokeWidth, ...dataSet } = {}, index) => {\n    const updatedAxisProps = {\n      style: { axis: {}, tickLabels: {} },\n      tickFormat: tick => tick\n    };\n\n    if (isMultiAxis && stroke) {\n      updatedAxisProps.style.axis.stroke = stroke;\n    }\n\n    if (isMultiAxis && strokeWidth) {\n      updatedAxisProps.style.axis.strokeWidth = strokeWidth;\n    }\n\n    if (typeof yAxisChartLabel === 'function') {\n      updatedAxisProps.label = yAxisChartLabel({ id, stroke, strokeWidth, ...dataSet });\n    } else {\n      updatedAxisProps.label = yAxisChartLabel;\n    }\n\n    if (typeof yAxisTickFormat === 'function') {\n      const updatedMaxY = (typeof maxY === 'number' && maxY) || maxY?.[id];\n\n      updatedAxisProps.tickFormat = tick => {\n        const normalizedTick = (isMultiAxis && tick * updatedMaxY) || tick;\n\n        return yAxisTickFormat({\n          tick: normalizedTick,\n          isMultiAxis,\n          maxY: updatedMaxY\n        });\n      };\n    }\n\n    axisProps.push({\n      ...yAxisPropDefaults,\n      ...updatedAxisProps,\n      orientation: (index === 0 && 'left') || 'right'\n    });\n  });\n\n  return axisProps;\n};\n\n/**\n * Generate x,y props.\n *\n * @param {object} params\n * @param {Array} params.dataSets\n * @param {object} params.individualMaxY\n * @param {number} params.maxX\n * @param {number} params.maxY\n * @param {Node|Function} params.xAxisChartLabel\n * @param {Node|Function} params.yAxisChartLabel\n * @param {boolean} params.xAxisFixLabelOverlap\n * @param {number} params.xAxisLabelIncrement\n * @param {Function} params.xAxisTickFormat\n * @param {Function} params.yAxisTickFormat\n * @returns {{xAxisProps: object, yAxisProps: Array}}\n */\nconst generateAxisProps = ({\n  dataSets = [],\n  individualMaxY = {},\n  maxX,\n  maxY,\n  xAxisChartLabel,\n  yAxisChartLabel,\n  xAxisFixLabelOverlap = true,\n  xAxisLabelIncrement = 1,\n  xAxisTickFormat,\n  yAxisTickFormat\n} = {}) => {\n  const xAxisPropDefaults = {\n    fixLabelOverlap: xAxisFixLabelOverlap\n  };\n\n  const yAxisPropDefaults = {\n    dependentAxis: true,\n    showGrid: true\n  };\n\n  let yAxisDataSets = [];\n  let xAxisDataSet;\n\n  dataSets.forEach(dataSet => {\n    if (dataSet.yAxisUseDataSet) {\n      yAxisDataSets.push({\n        yAxisChartLabel,\n        ...dataSet\n      });\n    }\n    if (dataSet.xAxisUseDataSet) {\n      xAxisDataSet = {\n        xAxisChartLabel,\n        ...dataSet\n      };\n    }\n  });\n\n  if (!yAxisDataSets.length) {\n    yAxisDataSets.push({\n      yAxisChartLabel,\n      ...dataSets?.[0]\n    });\n  } else {\n    yAxisDataSets = yAxisDataSets.slice(0, 2);\n  }\n\n  if (!xAxisDataSet) {\n    xAxisDataSet = {\n      xAxisChartLabel,\n      ...dataSets?.[0]\n    };\n  }\n\n  const updatedMaxY = (yAxisDataSets.length > 1 && individualMaxY) || maxY;\n\n  return {\n    xAxisProps: generateXAxisProps({\n      dataSet: xAxisDataSet,\n      maxX,\n      xAxisLabelIncrement,\n      xAxisPropDefaults,\n      xAxisTickFormat\n    }),\n    yAxisProps: generateYAxisProps({ dataSets: yAxisDataSets, maxY: updatedMaxY, yAxisPropDefaults, yAxisTickFormat })\n  };\n};\n\nconst chartHelpers = {\n  generateAxisProps,\n  generateDomains,\n  generateElementsProps,\n  generateMaxXY,\n  generateTooltipData,\n  generateXAxisProps,\n  generateYAxisProps\n};\n\nexport {\n  chartHelpers as default,\n  chartHelpers,\n  generateAxisProps,\n  generateDomains,\n  generateElementsProps,\n  generateMaxXY,\n  generateTooltipData,\n  generateXAxisProps,\n  generateYAxisProps\n};\n"],"names":["generateMaxXY","dataSets","individualDataSetsMaxY","combinedDataSetMaxX","combinedDataSetsMaxY","filter","isStacked","forEach","data","Array","isArray","Math","max","map","value","y","id","dataSetMaxY","length","maxX","maxY","individualMaxY","generateDomains","padding","updatedChartDomain","updatedPadding","generatedDomain","Object","values","floored","pow","floor","log10","ceil","left","toString","right","keys","domain","generateElementsProps","xValueFormat","yValueFormat","elements","stackedElements","elementsById","stackedElementsById","dataSet","animate","chartType","fill","interpolation","stroke","strokeDasharray","strokeWidth","dataColorStroke","defaultProps","chartElementProps","key","name","style","themeColor","themeVariant","x","datum","xValue","undefined","Number","isNaN","yValue","isMultiAxis","updatedProps","props","push","generateTooltipData","content","helpers","tooltipDataSetLookUp","index","itemsByKey","color","_cloneDeep","mockDatum","tooltip","React","generateXAxisProps","xAxisLabelIncrement","xAxisPropDefaults","xAxisTickFormat","xAxisChartLabel","axisProps","tickValues","reduce","acc","current","concat","tickFormat","tick","xAxisLabel","label","tickIndex","indexOf","previousItem","nextItem","item","generateYAxisProps","yAxisPropDefaults","yAxisTickFormat","yAxisChartLabel","updatedAxisProps","axis","tickLabels","updatedMaxY","orientation","generateAxisProps","xAxisDataSet","xAxisFixLabelOverlap","fixLabelOverlap","dependentAxis","showGrid","yAxisDataSets","yAxisUseDataSet","xAxisUseDataSet","slice","xAxisProps","yAxisProps","chartHelpers"],"sourceRoot":""}