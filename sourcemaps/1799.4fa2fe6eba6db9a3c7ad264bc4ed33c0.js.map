{"version":3,"file":"js/1799.1653339788071.b3f4ea095973b31d804d.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardChart.js","webpack:///./src/components/graphCard/graphCardChartLegend.js","webpack:///./src/components/graphCard/graphCardChartTitleTooltip.js","webpack:///./src/components/graphCard/graphCardChartTooltip.js","webpack:///./src/components/graphCard/graphCardContext.js","webpack:///./src/components/graphCard/graphCardHelpers.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardActions, CardBody, CardHeader, CardTitle, Title } from '@patternfly/react-core';\nimport { useShallowCompareEffect } from 'react-use';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useGraphCardContext, useGetGraphTally, useMetricsSelector } from './graphCardContext';\nimport { graphCardHelpers } from './graphCardHelpers';\nimport { Chart } from '../chart/chart';\nimport { GraphCardChartLegend } from './graphCardChartLegend';\nimport { GraphCardChartTooltip } from './graphCardChartTooltip';\nimport { GraphCardChartTitleTooltip } from './graphCardChartTitleTooltip';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { Loader } from '../loader/loader';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A chart/graph card.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useGetGraphTally\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProduct\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardChart = ({\n  t,\n  useGetGraphTally: useAliasGetGraphTally,\n  useGraphCardContext: useAliasGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProduct: useAliasProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productId } = useAliasProduct();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { actionDisplay, metric, metrics = [] } = settings;\n\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n  const { pending, error, data = {}, dataSets = [] } = useAliasMetricsSelector();\n  const getGraphTally = useAliasGetGraphTally();\n\n  useShallowCompareEffect(() => {\n    getGraphTally(metrics.map(({ id: metricId }) => ({ id: productId, metric: metricId })));\n  }, [metrics, productId, getGraphTally]);\n\n  const standaloneMetricId = (metric?.id && `_${metric?.id}`) || '';\n  let updatedActionDisplay = null;\n\n  if (typeof actionDisplay === 'function') {\n    updatedActionDisplay = actionDisplay({ data: { ...data } });\n  }\n\n  return (\n    <Card className=\"curiosity-usage-graph\">\n      <MinHeight key=\"headerMinHeight\">\n        <CardHeader>\n          <CardTitle>\n            <Title headingLevel=\"h2\" size=\"lg\">\n              {t(`curiosity-graph.cardHeading${standaloneMetricId}`, { context: productId })}\n              <GraphCardChartTitleTooltip />\n            </Title>\n          </CardTitle>\n          {updatedActionDisplay && (\n            <CardActions className={(error && 'blur') || ''}>{updatedActionDisplay}</CardActions>\n          )}\n        </CardHeader>\n      </MinHeight>\n      <MinHeight key=\"bodyMinHeight\">\n        <CardBody>\n          <div className={(error && 'blur') || (pending && 'fadein') || ''}>\n            {pending && <Loader variant=\"graph\" />}\n            {!pending && (\n              <Chart\n                {...graphCardHelpers.generateExtendedChartSettings({ settings, granularity })}\n                dataSets={dataSets}\n                chartLegend={({ chart, datum }) => <GraphCardChartLegend chart={chart} datum={datum} />}\n                chartTooltip={({ datum }) => <GraphCardChartTooltip datum={datum} />}\n              />\n            )}\n          </div>\n        </CardBody>\n      </MinHeight>\n    </Card>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, useProductGraphTallyQuery: Function,\n *     useMetricsSelector: Function, useGetGraphTally: Function}}\n */\nGraphCardChart.propTypes = {\n  t: PropTypes.func,\n  useGetGraphTally: PropTypes.func,\n  useGraphCardContext: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, useProductGraphTallyQuery: Function,\n *     useMetricsSelector: Function, useGetGraphTally: Function}}\n */\nGraphCardChart.defaultProps = {\n  t: translate,\n  useGetGraphTally,\n  useGraphCardContext,\n  useMetricsSelector,\n  useProduct,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChart as default, GraphCardChart };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { useMount } from 'react-use';\nimport { useProduct } from '../productView/productViewContext';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { ChartIcon } from '../chart/chartIcon';\n\n/**\n * A custom chart legend.\n *\n * @fires onClick\n * @param {object} props\n * @param {object} props.chart\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useDispatch\n * @param {Function} props.useProduct\n * @param {Function} props.useSelectors\n * @returns {Node}\n */\nconst GraphCardChartLegend = ({\n  chart,\n  datum,\n  t,\n  useDispatch: useAliasDispatch,\n  useSelectors: useAliasSelectors,\n  useProduct: useAliasProduct\n}) => {\n  const { productLabel, viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n  const legendItems = useAliasSelectors(\n    datum.dataSets.map(\n      ({ id }) =>\n        ({ graph }) =>\n          graph.legend?.[`${viewId}-${id}`]\n    )\n  );\n\n  useMount(() => {\n    datum.dataSets.forEach(({ id }, index) => {\n      const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n\n      if (checkIsToggled) {\n        chart.hide(id);\n      }\n    });\n  });\n\n  /**\n   * Toggle legend item and chart.\n   *\n   * @event onClick\n   * @param {string} id\n   */\n  const onClick = id => {\n    const updatedToggle = chart.toggle(id);\n\n    dispatch({\n      type: reduxTypes.graph.SET_GRAPH_LEGEND,\n      id: `${viewId}-${id}`,\n      value: updatedToggle\n    });\n  };\n\n  return (\n    <React.Fragment>\n      {datum.dataSets.map(({ id, isThreshold, stroke: color, data = [] }, index) => {\n        const isDisabled =\n          !data.find(({ y, hasData }) => (y >= 0 && hasData === true) || (y >= 0 && isThreshold === true)) || false;\n\n        const labelContent = t(\n          [`curiosity-graph.label_${(isThreshold && 'threshold') || id}`, 'curiosity-graph.label_no'],\n          {\n            product: productLabel,\n            context: productLabel\n          }\n        );\n\n        const tooltipContent = t(\n          `curiosity-graph.legendTooltip${(isThreshold && '_threshold') || ''}_${id}`,\n          {\n            product: productLabel,\n            context: productLabel\n          },\n          [<span style={{ whiteSpace: 'nowrap' }} />]\n        );\n\n        const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n\n        const button = (\n          <Button\n            onClick={() => onClick(id)}\n            onKeyPress={() => onClick(id)}\n            className=\"curiosity-usage-graph__legend-item\"\n            tabIndex={0}\n            key={`curiosity-button-${id}`}\n            variant=\"link\"\n            component=\"a\"\n            isDisabled={isDisabled}\n            icon={\n              ((isDisabled || checkIsToggled) && <ChartIcon symbol=\"eyeSlash\" />) || (\n                <ChartIcon\n                  symbol={(isThreshold && 'dash') || 'square'}\n                  style={{ visibility: (isDisabled && 'hidden') || (checkIsToggled && 'hidden') || 'visible' }}\n                  fill={color}\n                />\n              )\n            }\n          >\n            {labelContent}\n          </Button>\n        );\n\n        if (tooltipContent) {\n          return (\n            <Tooltip\n              key={`curiosity-tooltip-${id}`}\n              content={<p>{tooltipContent}</p>}\n              position={TooltipPosition.top}\n              enableFlip\n              distance={5}\n            >\n              {button}\n            </Tooltip>\n          );\n        }\n\n        return button;\n      })}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, t: Function, useDispatch: Function, useSelectors: Function, chart: object}}\n */\nGraphCardChartLegend.propTypes = {\n  chart: PropTypes.shape({\n    hide: PropTypes.func,\n    toggle: PropTypes.func,\n    isToggled: PropTypes.func\n  }),\n  datum: PropTypes.shape({\n    dataSets: PropTypes.arrayOf(\n      PropTypes.shape({\n        stroke: PropTypes.string.isRequired,\n        id: PropTypes.string.isRequired,\n        isThreshold: PropTypes.bool\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useDispatch: PropTypes.func,\n  useSelectors: PropTypes.func,\n  useProduct: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: object, useProduct: Function, t: Function, useDispatch: Function, useSelectors: Function, chart: object}}\n */\nGraphCardChartLegend.defaultProps = {\n  chart: {\n    hide: helpers.noop,\n    toggle: helpers.noop,\n    isToggled: helpers.noop\n  },\n  datum: {\n    dataSets: []\n  },\n  t: translate,\n  useDispatch: storeHooks.reactRedux.useDispatch,\n  useSelectors: storeHooks.reactRedux.useSelectors,\n  useProduct\n};\n\nexport { GraphCardChartLegend as default, GraphCardChartLegend };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { useProduct } from '../productView/productViewContext';\nimport { useGraphCardContext } from './graphCardContext';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Graph card title tooltip.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useProduct\n * @returns {Node}\n */\nconst GraphCardChartTitleTooltip = ({\n  t,\n  useGraphCardContext: useAliasGraphCardContext,\n  useProduct: useAliasProduct\n}) => {\n  const { productId } = useAliasProduct();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { isCardTitleDescription, metric } = settings;\n  const standaloneMetricId = (metric?.id && `_${metric?.id}`) || '';\n\n  if (!isCardTitleDescription) {\n    return null;\n  }\n\n  return (\n    <Tooltip\n      content={<p>{t(`curiosity-graph.cardHeadingDescription${standaloneMetricId}`, { context: productId })}</p>}\n      position={TooltipPosition.top}\n      enableFlip={false}\n      distance={5}\n      entryDelay={100}\n      exitDelay={0}\n    >\n      <span className=\"curiosity-icon__question\">\n        <OutlinedQuestionCircleIcon />\n      </span>\n    </Tooltip>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, t: Function}}\n */\nGraphCardChartTitleTooltip.propTypes = {\n  t: PropTypes.func,\n  useProduct: PropTypes.func,\n  useGraphCardContext: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, t: Function}}\n */\nGraphCardChartTitleTooltip.defaultProps = {\n  t: translate,\n  useProduct,\n  useGraphCardContext\n};\n\nexport { GraphCardChartTitleTooltip as default, GraphCardChartTitleTooltip };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { getTooltipDate } from './graphCardHelpers';\nimport { translate } from '../i18n/i18n';\nimport { ChartIcon } from '../chart/chartIcon';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * A custom chart tooltip.\n *\n * @param {object} props\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useProduct\n * @returns {Node}\n */\nconst GraphCardChartTooltip = ({\n  datum,\n  t,\n  useProduct: useAliasProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productLabel } = useAliasProduct();\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n\n  let header = null;\n  const data = [];\n  const { itemsByKey = {} } = datum || {};\n\n  Object.keys(itemsByKey)\n    .reverse()\n    .forEach((key, index) => {\n      if (index === 0) {\n        header = getTooltipDate({\n          date: itemsByKey[key]?.data.date,\n          granularity\n        });\n      }\n\n      const tempDataFacet = {\n        color: itemsByKey[key]?.color\n      };\n\n      if (itemsByKey[key]?.chartType === 'threshold') {\n        let thresholdStringValue = itemsByKey[key]?.data.y ?? t('curiosity-graph.label_noData');\n\n        if (itemsByKey[key]?.data.hasInfinite) {\n          if (tempDataFacet.color) {\n            thresholdStringValue = (\n              <ChartIcon\n                symbol=\"infinity\"\n                fill=\"#ffffff\"\n                title={t('curiosity-graph.label_threshold', { context: 'infinite' })}\n              />\n            );\n          } else {\n            thresholdStringValue = t('curiosity-graph.label_threshold', { context: 'infinite' });\n          }\n        }\n\n        tempDataFacet.label = t('curiosity-graph.label_threshold');\n        tempDataFacet.value = thresholdStringValue;\n      } else {\n        const dataFactsValue =\n          (itemsByKey[key]?.data.hasData === false && t('curiosity-graph.label_noData')) ||\n          itemsByKey[key]?.data.y ||\n          0;\n\n        tempDataFacet.label = t('curiosity-graph.label', { context: key, product: productLabel });\n        tempDataFacet.value = dataFactsValue;\n      }\n\n      tempDataFacet.chartType = itemsByKey[key]?.chartType;\n      data.push(tempDataFacet);\n    });\n\n  return (\n    <div className=\"curiosity-usage-graph__tooltip\">\n      <table summary={t('curiosity-graph.tooltipSummary')}>\n        {(data.length && header && (\n          <thead>\n            <tr>\n              <th colSpan={2}>{header}</th>\n            </tr>\n          </thead>\n        )) ||\n          null}\n        {(data.length && (\n          <tbody>\n            {data.map(dataFacet => {\n              const updatedDataFacetValue =\n                (typeof dataFacet.value === 'number' &&\n                  !Number.isInteger(dataFacet.value) &&\n                  helpers\n                    .numberDisplay(dataFacet.value)\n                    ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: true })\n                    ?.toUpperCase()) ||\n                dataFacet.value;\n\n              return (\n                <tr key={`tooltip-${dataFacet.label}`}>\n                  <th>\n                    {dataFacet.chartType === 'threshold' && (\n                      <ChartIcon size=\"sm\" symbol=\"dash\" fill={dataFacet.color || 'transparent'} />\n                    )}\n                    {dataFacet.chartType !== 'threshold' && (\n                      <ChartIcon size=\"sm\" fill={dataFacet.color || 'transparent'} />\n                    )}{' '}\n                    {dataFacet.label}\n                  </th>\n                  <td>{updatedDataFacetValue}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        )) ||\n          null}\n      </table>\n      {(!data.length && t('curiosity-graph.label_noData', { context: 'error' })) || null}\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.propTypes = {\n  datum: PropTypes.shape({\n    itemsByKey: PropTypes.objectOf(\n      PropTypes.shape({\n        chartType: PropTypes.string,\n        color: PropTypes.string,\n        data: PropTypes.shape({\n          date: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),\n          hasData: PropTypes.bool,\n          hasInfinite: PropTypes.bool,\n          y: PropTypes.number\n        })\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.defaultProps = {\n  datum: {},\n  t: translate,\n  useProduct,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChartTooltip as default, GraphCardChartTooltip };\n","import React, { useContext } from 'react';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Chart context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{ settings: { isStandalone: false, metrics: [], metric: undefined } }, helpers.noop];\n\nconst GraphCardContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated graph card context.\n *\n * @returns {React.Context<{}>}\n */\nconst useGraphCardContext = () => useContext(GraphCardContext);\n\n/**\n * Use Redux RHSM Actions, getGraphTally.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProductGraphTallyQuery\n * @returns {Function}\n */\nconst useGetGraphTally = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery\n} = {}) => {\n  const query = useAliasProductGraphTallyQuery();\n  const dispatch = useAliasDispatch();\n\n  return metrics => reduxActions.rhsm.getGraphTally(metrics, query)(dispatch);\n};\n\n/**\n * Get multiple metrics from store.\n *\n * @param {object} options\n * @param {Function} options.useGraphCardContext\n * @param {Function} options.useSelectors\n * @param {Function} options.useProduct\n * @returns {{data: object, pending: boolean, fulfilled: boolean, dataSets: Array, error: boolean}}\n */\nconst useMetricsSelector = ({\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useSelectors: useAliasSelectors = storeHooks.reactRedux.useSelectors,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n  const data = {};\n\n  const metricResponses = useAliasSelectors(\n    metrics.map(\n      ({ id: metricId }) =>\n        ({ graph }) =>\n          graph.tally?.[`${productId}_${metricId}`]\n    ),\n    []\n  );\n\n  let isPending = false;\n  let isFulfilled = false;\n  let errorCount = 0;\n\n  const dataSets = metricResponses.map((metric, index) => {\n    const { pending, fulfilled, error, cancelled } = metric || {};\n    const updatedPending = pending || cancelled || false;\n\n    if (updatedPending) {\n      isPending = true;\n    }\n\n    if (fulfilled) {\n      isFulfilled = true;\n    }\n\n    if (error) {\n      errorCount += 1;\n    }\n\n    const updatedMetric = {\n      ...metrics[index],\n      data: metric?.data?.data || [],\n      meta: metric?.data?.meta || {}\n    };\n    data[metrics[index].id] = updatedMetric;\n\n    return updatedMetric;\n  });\n\n  const response = {\n    data,\n    dataSets,\n    error: false,\n    fulfilled: false,\n    pending: false\n  };\n\n  if (errorCount === dataSets.length) {\n    response.error = true;\n  } else if (isPending) {\n    response.pending = true;\n  } else if (isFulfilled) {\n    response.fulfilled = true;\n  }\n\n  return response;\n};\n\nconst context = {\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetGraphTally,\n  useGraphCardContext,\n  useMetricsSelector\n};\n\nexport {\n  context as default,\n  context,\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetGraphTally,\n  useGraphCardContext,\n  useMetricsSelector\n};\n","import moment from 'moment';\nimport { chart_color_green_300 as chartColorGreenDark } from '@patternfly/react-tokens';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers, helpers } from '../../common';\n\n/**\n * Update chart/graph filters with base settings with styling.\n *\n * @param {Array} filters\n * @returns {{standaloneFilters: Array, groupedFilters: Array}}\n */\nconst generateChartSettings = (filters = []) => {\n  const standaloneFilters = [];\n  const groupedFilters = [];\n\n  filters.forEach(({ id, isStandalone = false, isThreshold = false, ...settings }) => {\n    if (!id) {\n      return;\n    }\n\n    const baseFilterSettings = {\n      id,\n      isStacked: !isThreshold,\n      isStandalone,\n      isThreshold,\n      strokeWidth: 2\n    };\n\n    if (isThreshold) {\n      baseFilterSettings.stroke = chartColorGreenDark.value;\n      baseFilterSettings.strokeDasharray = '4,3';\n      baseFilterSettings.strokeWidth = 3;\n    }\n\n    if (isStandalone) {\n      standaloneFilters.push({\n        ...baseFilterSettings,\n        ...settings\n      });\n    } else {\n      groupedFilters.push({\n        ...baseFilterSettings,\n        ...settings\n      });\n    }\n  });\n\n  return {\n    standaloneFilters,\n    groupedFilters\n  };\n};\n\n/**\n * Returns x axis ticks/intervals array for the xAxisTickInterval\n *\n * @param {string} granularity See enum of RHSM_API_QUERY_GRANULARITY_TYPES\n * @returns {number}\n */\nconst getChartXAxisLabelIncrement = granularity => {\n  switch (granularity) {\n    case GRANULARITY_TYPES.DAILY:\n      return 5;\n    case GRANULARITY_TYPES.WEEKLY:\n    case GRANULARITY_TYPES.MONTHLY:\n      return 2;\n    case GRANULARITY_TYPES.QUARTERLY:\n    default:\n      return 1;\n  }\n};\n\n/**\n * Return a formatted date string.\n *\n * @param {object} params\n * @param {Date} params.date\n * @param {string} params.granularity See enum of RHSM_API_QUERY_GRANULARITY_TYPES\n * @returns {string}\n */\nconst getTooltipDate = ({ date, granularity } = {}) => {\n  const momentDate = moment.utc(date);\n\n  switch (granularity) {\n    case GRANULARITY_TYPES.QUARTERLY:\n      return `${momentDate.format(dateHelpers.timestampQuarterFormats.yearShort)} - ${momentDate\n        .add(1, 'quarter')\n        .format(dateHelpers.timestampQuarterFormats.yearShort)}`;\n\n    case GRANULARITY_TYPES.MONTHLY:\n      return momentDate.format(dateHelpers.timestampMonthFormats.yearLong);\n\n    case GRANULARITY_TYPES.WEEKLY:\n      return `${momentDate.format(dateHelpers.timestampDayFormats.short)} - ${momentDate\n        .add(1, 'week')\n        .format(dateHelpers.timestampDayFormats.yearShort)}`;\n\n    case GRANULARITY_TYPES.DAILY:\n    default:\n      return momentDate.format(dateHelpers.timestampDayFormats.long);\n  }\n};\n\n/**\n * Format x axis ticks.\n *\n * @param {object} params\n * @param {Function} params.callback\n * @param {Date} params.date\n * @param {string} params.granularity See enum of RHSM_API_QUERY_GRANULARITY_TYPES\n * @param {number|string} params.tick\n * @param {Date} params.previousDate\n * @returns {string|undefined}\n */\nconst xAxisTickFormat = ({ callback, date, granularity, tick, previousDate } = {}) => {\n  if (!date || !granularity) {\n    return undefined;\n  }\n\n  if (callback) {\n    return callback({ callback, date, granularity, tick, previousDate });\n  }\n\n  const momentDate = moment.utc(date);\n  const isNewYear =\n    tick !== 0 && Number.parseInt(momentDate.year(), 10) !== Number.parseInt(moment.utc(previousDate).year(), 10);\n  let formattedDate;\n\n  switch (granularity) {\n    case GRANULARITY_TYPES.QUARTERLY:\n      formattedDate = isNewYear\n        ? momentDate.format(dateHelpers.timestampQuarterFormats.yearShort)\n        : momentDate.format(dateHelpers.timestampQuarterFormats.short);\n\n      formattedDate = formattedDate.replace(/\\s/, '\\n');\n      break;\n    case GRANULARITY_TYPES.MONTHLY:\n      formattedDate = isNewYear\n        ? momentDate.format(dateHelpers.timestampMonthFormats.yearShort)\n        : momentDate.format(dateHelpers.timestampMonthFormats.short);\n\n      formattedDate = formattedDate.replace(/\\s/, '\\n');\n      break;\n    case GRANULARITY_TYPES.WEEKLY:\n    case GRANULARITY_TYPES.DAILY:\n    default:\n      formattedDate = isNewYear\n        ? momentDate.format(dateHelpers.timestampDayFormats.yearShort)\n        : momentDate.format(dateHelpers.timestampDayFormats.short);\n\n      formattedDate = formattedDate.replace(/\\s(\\d{4})$/, '\\n$1');\n      break;\n  }\n\n  return formattedDate;\n};\n\n/**\n * Format y axis ticks.\n *\n * @param {object} params\n * @param {Function} params.callback\n * @param {number|string} params.tick\n * @returns {string}\n */\nconst yAxisTickFormat = ({ callback, tick } = {}) => {\n  if (callback) {\n    return callback({ tick });\n  }\n\n  return helpers\n    .numberDisplay(tick)\n    ?.format({\n      average: true,\n      mantissa: 1,\n      trimMantissa: true,\n      lowPrecision: false\n    })\n    ?.toUpperCase();\n};\n\n/**\n * Generate base chart component props.\n *\n * @param {object} params\n * @param {object} params.settings\n * @param {string} params.granularity\n * @returns {object}\n */\nconst generateExtendedChartSettings = ({ settings, granularity } = {}) => ({\n  ...settings,\n  xAxisLabelIncrement: getChartXAxisLabelIncrement(granularity),\n  xAxisTickFormat: ({ item, previousItem, tick }) =>\n    xAxisTickFormat({\n      callback: settings?.xAxisTickFormat,\n      tick,\n      date: item.date,\n      previousDate: previousItem.date,\n      granularity\n    }),\n  yAxisTickFormat: ({ tick }) =>\n    yAxisTickFormat({\n      callback: settings?.yAxisTickFormat,\n      tick\n    })\n});\n\nconst graphCardHelpers = {\n  generateChartSettings,\n  generateExtendedChartSettings,\n  getChartXAxisLabelIncrement,\n  getTooltipDate,\n  xAxisTickFormat,\n  yAxisTickFormat\n};\n\nexport {\n  graphCardHelpers as default,\n  graphCardHelpers,\n  generateChartSettings,\n  generateExtendedChartSettings,\n  getChartXAxisLabelIncrement,\n  getTooltipDate,\n  xAxisTickFormat,\n  yAxisTickFormat\n};\n"],"names":["GraphCardChart","t","useAliasGetGraphTally","useGetGraphTally","useAliasGraphCardContext","useGraphCardContext","useAliasMetricsSelector","useMetricsSelector","useAliasProduct","useProduct","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","productId","settings","actionDisplay","metric","metrics","granularity","RHSM_API_QUERY_SET_TYPES","pending","error","data","dataSets","getGraphTally","useShallowCompareEffect","map","metricId","id","standaloneMetricId","updatedActionDisplay","Card","className","MinHeight","key","CardHeader","CardTitle","Title","headingLevel","size","context","GraphCardChartTitleTooltip","CardActions","CardBody","Loader","variant","Chart","graphCardHelpers","chartLegend","chart","datum","GraphCardChartLegend","chartTooltip","GraphCardChartTooltip","defaultProps","translate","useAliasDispatch","useDispatch","useAliasSelectors","useSelectors","productLabel","viewId","dispatch","legendItems","graph","legend","useMount","forEach","index","isToggled","hide","onClick","updatedToggle","toggle","type","reduxTypes","value","isThreshold","color","stroke","isDisabled","find","y","hasData","labelContent","product","tooltipContent","style","whiteSpace","checkIsToggled","button","Button","onKeyPress","tabIndex","component","icon","ChartIcon","symbol","visibility","fill","Tooltip","content","position","TooltipPosition","enableFlip","distance","helpers","storeHooks","isCardTitleDescription","entryDelay","exitDelay","OutlinedQuestionCircleIcon","header","itemsByKey","Object","keys","reverse","getTooltipDate","date","tempDataFacet","chartType","thresholdStringValue","hasInfinite","title","label","dataFactsValue","push","summary","length","colSpan","dataFacet","updatedDataFacetValue","Number","isInteger","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","DEFAULT_CONTEXT","isStandalone","undefined","GraphCardContext","React","useContext","query","reduxActions","metricResponses","tally","isPending","isFulfilled","errorCount","fulfilled","cancelled","updatedMetric","meta","response","generateChartSettings","filters","standaloneFilters","groupedFilters","baseFilterSettings","isStacked","strokeWidth","chartColorGreenDark","strokeDasharray","getChartXAxisLabelIncrement","GRANULARITY_TYPES","momentDate","moment","dateHelpers","add","xAxisTickFormat","callback","tick","previousDate","formattedDate","isNewYear","parseInt","year","replace","yAxisTickFormat","generateExtendedChartSettings","xAxisLabelIncrement","item","previousItem"],"sourceRoot":""}