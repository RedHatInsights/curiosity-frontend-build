{"version":3,"file":"js/4024.1667930752922.4b43ae5687eb682529d3.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardChartTooltip.js","webpack:///./src/components/productView/productViewContext.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { getTooltipDate } from './graphCardHelpers';\nimport { translate } from '../i18n/i18n';\nimport { ChartTypeVariant } from '../chart/chart';\nimport { ChartIcon } from '../chart/chartIcon';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * A custom chart tooltip.\n *\n * @param {object} props\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useProduct\n * @returns {Node}\n */\nconst GraphCardChartTooltip = ({\n  datum,\n  t,\n  useProduct: useAliasProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productId, productLabel } = useAliasProduct();\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n\n  let header = null;\n  const data = [];\n  const { itemsByKey = {} } = datum || {};\n\n  Object.keys(itemsByKey)\n    .reverse()\n    .forEach((key, index) => {\n      if (index === 0) {\n        header = getTooltipDate({\n          date: itemsByKey[key]?.data.date,\n          granularity\n        });\n      }\n\n      const tempDataFacet = {\n        color: itemsByKey[key]?.color\n      };\n\n      if (itemsByKey[key]?.chartType === ChartTypeVariant.threshold) {\n        let thresholdStringValue = itemsByKey[key]?.data.y ?? t('curiosity-graph.label_noData');\n\n        if (itemsByKey[key]?.data.hasInfinite) {\n          if (tempDataFacet.color) {\n            thresholdStringValue = (\n              <ChartIcon\n                symbol=\"infinity\"\n                fill=\"#ffffff\"\n                title={t('curiosity-graph.label_threshold', { context: 'infinite' })}\n              />\n            );\n          } else {\n            thresholdStringValue = t('curiosity-graph.label_threshold', { context: 'infinite' });\n          }\n        }\n\n        tempDataFacet.label = t('curiosity-graph.label_threshold');\n        tempDataFacet.value = thresholdStringValue;\n      } else {\n        const dataFactsValue =\n          (itemsByKey[key]?.data.hasData === false && t('curiosity-graph.label_noData')) ||\n          itemsByKey[key]?.data.y ||\n          0;\n\n        tempDataFacet.label = t(`curiosity-graph.label_${key}`, { context: productId, product: productLabel });\n        tempDataFacet.value = dataFactsValue;\n      }\n\n      tempDataFacet.chartType = itemsByKey[key]?.chartType;\n      data.push(tempDataFacet);\n    });\n\n  return (\n    <div className=\"curiosity-usage-graph__tooltip\">\n      <table summary={t('curiosity-graph.tooltipSummary')}>\n        {(data.length && header && (\n          <thead>\n            <tr>\n              <th colSpan={2}>{header}</th>\n            </tr>\n          </thead>\n        )) ||\n          null}\n        {(data.length && (\n          <tbody>\n            {data.map(dataFacet => {\n              const updatedDataFacetValue =\n                (typeof dataFacet.value === 'number' &&\n                  !Number.isInteger(dataFacet.value) &&\n                  helpers\n                    .numberDisplay(dataFacet.value)\n                    ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: true })\n                    ?.toUpperCase()) ||\n                dataFacet.value;\n\n              return (\n                <tr key={`tooltip-${dataFacet.label}`}>\n                  <th>\n                    {dataFacet.chartType === ChartTypeVariant.threshold && (\n                      <ChartIcon size=\"sm\" symbol=\"dash\" fill={dataFacet.color || 'transparent'} />\n                    )}\n                    {dataFacet.chartType !== ChartTypeVariant.threshold && (\n                      <ChartIcon size=\"sm\" fill={dataFacet.color || 'transparent'} />\n                    )}{' '}\n                    {dataFacet.label}\n                  </th>\n                  <td>{updatedDataFacetValue}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        )) ||\n          null}\n      </table>\n      {(!data.length && t('curiosity-graph.label_noData', { context: 'error' })) || null}\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.propTypes = {\n  datum: PropTypes.shape({\n    itemsByKey: PropTypes.objectOf(\n      PropTypes.shape({\n        chartType: PropTypes.string,\n        color: PropTypes.string,\n        data: PropTypes.shape({\n          date: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),\n          hasData: PropTypes.bool,\n          hasInfinite: PropTypes.bool,\n          y: PropTypes.number\n        })\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.defaultProps = {\n  datum: {},\n  t: translate,\n  useProduct,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChartTooltip as default, GraphCardChartTooltip };\n","import React, { useCallback, useContext } from 'react';\nimport { reduxHelpers } from '../../redux/common';\nimport { storeHooks } from '../../redux/hooks';\nimport { RHSM_API_QUERY_TYPES, rhsmApiTypes } from '../../types/rhsmApiTypes';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Route context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{}, helpers.noop];\n\nconst ProductViewContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated product view context.\n *\n * @returns {React.Context<{}>}\n */\nconst useProductViewContext = () => useContext(ProductViewContext);\n\n/**\n * Return a query object from initial product config and Redux store.\n *\n * @param {string} queryType An identifier used to pull from both config and Redux, they should named the same.\n * @param {object} options\n * @param {string} options.overrideId A custom identifier, used for scenarios like the Guest inventory IDs\n * @param {object} options.useProductViewContext\n * @returns {object}\n */\nconst useProductQueryFactory = (\n  queryType,\n  { overrideId, useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}\n) => {\n  const { [queryType]: initialQuery, productId, viewId } = useAliasProductViewContext();\n  const queryOverride = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[overrideId], undefined);\n  const queryProduct = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[productId], undefined);\n  const queryView = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[viewId], undefined);\n\n  return {\n    ...initialQuery,\n    ...queryOverride,\n    ...queryProduct,\n    ...queryView\n  };\n};\n\n/**\n * Return a base product query\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductQuery = ({ queryType = 'query', options } = {}) => useProductQueryFactory(queryType, options);\n\n/**\n * Return the graph query based off of tally and capacity.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductGraphTallyQuery = ({\n  queryType = 'graphTallyQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_REPORT_CAPACITY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return the inventory query for guests. Use fallback/defaults for guests offset, limit.\n *\n * @param {object} options\n * @param {number} options.defaultLimit\n * @param {number} options.defaultOffset\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryGuestsQuery = ({\n  defaultLimit = 100,\n  defaultOffset = 0,\n  queryType = 'inventoryGuestsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_GUESTS_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      [RHSM_API_QUERY_SET_TYPES.LIMIT]: defaultLimit,\n      [RHSM_API_QUERY_SET_TYPES.OFFSET]: defaultOffset,\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for hosts.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryHostsQuery = ({\n  queryType = 'inventoryHostsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for subscriptions.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventorySubscriptionsQuery = ({\n  queryType = 'inventorySubscriptionsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Get a filtered product configuration context.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductViewContext\n * @returns {object}\n */\nconst useProductContext = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductViewContext: useAliasProductViewContext = useProductViewContext\n} = {}) => {\n  const { [RHSM_API_QUERY_TYPES.UOM]: uomFilter } = useAliasProductQuery();\n  const {\n    initialGraphFilters = [],\n    initialInventoryFilters = [],\n    initialSubscriptionsInventoryFilters = [],\n    productContextFilterUom,\n    ...config\n  } = useAliasProductViewContext();\n\n  const applyUomFilter = useCallback(() => {\n    if (productContextFilterUom === true) {\n      const filterFilters = ({ id, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(uomFilter, 'i').test(id);\n      };\n\n      return {\n        ...config,\n        initialGraphFilters: initialGraphFilters.filter(filterFilters),\n        initialInventoryFilters: initialInventoryFilters.filter(filterFilters),\n        initialSubscriptionsInventoryFilters: initialSubscriptionsInventoryFilters.filter(filterFilters)\n      };\n    }\n\n    return {\n      ...config,\n      initialGraphFilters,\n      initialInventoryFilters,\n      initialSubscriptionsInventoryFilters\n    };\n  }, [\n    config,\n    initialGraphFilters,\n    initialInventoryFilters,\n    initialSubscriptionsInventoryFilters,\n    productContextFilterUom,\n    uomFilter\n  ]);\n\n  return applyUomFilter();\n};\n\n/**\n * Return product identifiers.\n *\n * @param {object} options\n * @param {Function} options.useProductViewContext\n * @returns {{productLabel: string, viewId: string, productId: string, productGroup: string}}\n */\nconst useProduct = ({ useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}) => {\n  const { productGroup, productId, productLabel, viewId } = useAliasProductViewContext();\n  return {\n    productGroup,\n    productId,\n    productLabel,\n    viewId\n  };\n};\n\n/**\n * Return graph configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductGraphConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialGraphFilters, initialGraphSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGraphFilters,\n    settings: initialGraphSettings\n  };\n};\n\n/**\n * Return guests inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryGuestsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { inventoryGuestsQuery = {}, initialGuestsFilters, initialGuestsSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGuestsFilters,\n    initialQuery: inventoryGuestsQuery,\n    settings: initialGuestsSettings\n  };\n};\n\n/**\n * Return hosts inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryHostsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialInventoryFilters, initialInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialInventoryFilters,\n    settings: initialInventorySettings\n  };\n};\n\n/**\n * Return subscriptions inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventorySubscriptionsConfig = ({\n  useProductContext: useAliasProductContext = useProductContext\n} = {}) => {\n  const { initialSubscriptionsInventoryFilters, initialSubscriptionsInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialSubscriptionsInventoryFilters,\n    settings: initialSubscriptionsInventorySettings\n  };\n};\n\n/**\n * Return primary toolbar configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductToolbarConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const {\n    initialToolbarFilters,\n    initialToolbarSettings = {},\n    initialSecondaryToolbarFilters\n  } = useAliasProductContext();\n  return {\n    filters: initialToolbarFilters,\n    secondaryFilters: initialSecondaryToolbarFilters,\n    settings: initialToolbarSettings\n  };\n};\n\nconst context = {\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useQuery: useProductQuery,\n  useQueryFactory: useProductQueryFactory,\n  useGraphTallyQuery: useProductGraphTallyQuery,\n  useInventoryGuestsQuery: useProductInventoryGuestsQuery,\n  useInventoryHostsQuery: useProductInventoryHostsQuery,\n  useInventorySubscriptionsQuery: useProductInventorySubscriptionsQuery,\n  useProduct,\n  useGraphConfig: useProductGraphConfig,\n  useInventoryGuestsConfig: useProductInventoryGuestsConfig,\n  useInventoryHostsConfig: useProductInventoryHostsConfig,\n  useInventorySubscriptionsConfig: useProductInventorySubscriptionsConfig,\n  useToolbarConfig: useProductToolbarConfig\n};\n\nexport {\n  context as default,\n  context,\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useProductQuery,\n  useProductQueryFactory,\n  useProductGraphTallyQuery,\n  useProductInventoryGuestsQuery,\n  useProductInventoryHostsQuery,\n  useProductInventorySubscriptionsQuery,\n  useProduct,\n  useProductGraphConfig,\n  useProductInventoryGuestsConfig,\n  useProductInventoryHostsConfig,\n  useProductInventorySubscriptionsConfig,\n  useProductToolbarConfig\n};\n"],"names":["GraphCardChartTooltip","datum","t","useAliasProduct","useProduct","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","productId","productLabel","granularity","RHSM_API_QUERY_SET_TYPES","header","data","itemsByKey","Object","keys","reverse","forEach","key","index","getTooltipDate","date","tempDataFacet","color","chartType","ChartTypeVariant","thresholdStringValue","y","hasInfinite","ChartIcon","symbol","fill","title","context","label","value","dataFactsValue","hasData","product","push","className","summary","length","colSpan","map","dataFacet","updatedDataFacetValue","Number","isInteger","helpers","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","size","defaultProps","translate","DEFAULT_CONTEXT","ProductViewContext","React","useProductViewContext","useContext","useProductQueryFactory","queryType","overrideId","useAliasProductViewContext","initialQuery","viewId","queryOverride","storeHooks","view","undefined","queryProduct","queryView","useProductQuery","options","schemaCheck","rhsmApiTypes","reduxHelpers","useProductInventoryGuestsQuery","defaultLimit","defaultOffset","useProductInventoryHostsQuery","useProductInventorySubscriptionsQuery","useProductContext","useAliasProductQuery","uomFilter","RHSM_API_QUERY_TYPES","initialGraphFilters","initialInventoryFilters","initialSubscriptionsInventoryFilters","productContextFilterUom","config","applyUomFilter","useCallback","filterFilters","id","isOptional","RegExp","test","filter","productGroup","useProductGraphConfig","useAliasProductContext","initialGraphSettings","filters","settings","useProductInventoryGuestsConfig","inventoryGuestsQuery","initialGuestsFilters","initialGuestsSettings","useProductInventoryHostsConfig","initialInventorySettings","useProductInventorySubscriptionsConfig","initialSubscriptionsInventorySettings","useProductToolbarConfig","initialToolbarFilters","initialToolbarSettings","initialSecondaryToolbarFilters","secondaryFilters","useQuery","useQueryFactory","useGraphTallyQuery","useInventoryGuestsQuery","useInventoryHostsQuery","useInventorySubscriptionsQuery","useGraphConfig","useInventoryGuestsConfig","useInventoryHostsConfig","useInventorySubscriptionsConfig","useToolbarConfig"],"sourceRoot":""}