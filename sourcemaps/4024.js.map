{"version":3,"file":"js/4024.1670253317951.73a9b946386a798b8dd4.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardChartTooltip.js","webpack:///./src/components/graphCard/graphCardHelpers.js","webpack:///./src/components/productView/productViewContext.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { getTooltipDate } from './graphCardHelpers';\nimport { translate } from '../i18n/i18n';\nimport { ChartTypeVariant } from '../chart/chart';\nimport { ChartIcon } from '../chart/chartIcon';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * A custom chart tooltip.\n *\n * @param {object} props\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useProduct\n * @returns {Node}\n */\nconst GraphCardChartTooltip = ({\n  datum,\n  t,\n  useProduct: useAliasProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productId, productLabel } = useAliasProduct();\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n\n  let header = null;\n  const data = [];\n  const { itemsByKey = {} } = datum || {};\n\n  Object.keys(itemsByKey)\n    .reverse()\n    .forEach((key, index) => {\n      if (index === 0) {\n        header = getTooltipDate({\n          date: itemsByKey[key]?.data.date,\n          granularity\n        });\n      }\n\n      const tempDataFacet = {\n        color: itemsByKey[key]?.color\n      };\n\n      if (itemsByKey[key]?.chartType === ChartTypeVariant.threshold) {\n        let thresholdStringValue = itemsByKey[key]?.data.y ?? t('curiosity-graph.label_noData');\n\n        if (itemsByKey[key]?.data.hasInfinite) {\n          if (tempDataFacet.color) {\n            thresholdStringValue = (\n              <ChartIcon\n                symbol=\"infinity\"\n                fill=\"#ffffff\"\n                title={t('curiosity-graph.label_threshold', { context: 'infinite' })}\n              />\n            );\n          } else {\n            thresholdStringValue = t('curiosity-graph.label_threshold', { context: 'infinite' });\n          }\n        }\n\n        tempDataFacet.label = t('curiosity-graph.label_threshold');\n        tempDataFacet.value = thresholdStringValue;\n      } else {\n        const dataFactsValue =\n          (itemsByKey[key]?.data.hasData === false && t('curiosity-graph.label_noData')) ||\n          itemsByKey[key]?.data.y ||\n          0;\n\n        tempDataFacet.label = t(`curiosity-graph.label_${key}`, { context: productId, product: productLabel });\n        tempDataFacet.value = dataFactsValue;\n      }\n\n      tempDataFacet.chartType = itemsByKey[key]?.chartType;\n      data.push(tempDataFacet);\n    });\n\n  return (\n    <div className=\"curiosity-usage-graph__tooltip\">\n      <table summary={t('curiosity-graph.tooltipSummary')}>\n        {(data.length && header && (\n          <thead>\n            <tr>\n              <th colSpan={2}>{header}</th>\n            </tr>\n          </thead>\n        )) ||\n          null}\n        {(data.length && (\n          <tbody>\n            {data.map(dataFacet => {\n              const updatedDataFacetValue =\n                (typeof dataFacet.value === 'number' &&\n                  !Number.isInteger(dataFacet.value) &&\n                  helpers\n                    .numberDisplay(dataFacet.value)\n                    ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: true })\n                    ?.toUpperCase()) ||\n                dataFacet.value;\n\n              return (\n                <tr key={`tooltip-${dataFacet.label}`}>\n                  <th>\n                    {dataFacet.chartType === ChartTypeVariant.threshold && (\n                      <ChartIcon size=\"sm\" symbol=\"dash\" fill={dataFacet.color || 'transparent'} />\n                    )}\n                    {dataFacet.chartType !== ChartTypeVariant.threshold && (\n                      <ChartIcon size=\"sm\" fill={dataFacet.color || 'transparent'} />\n                    )}{' '}\n                    {dataFacet.label}\n                  </th>\n                  <td>{updatedDataFacetValue}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        )) ||\n          null}\n      </table>\n      {(!data.length && t('curiosity-graph.label_noData', { context: 'error' })) || null}\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.propTypes = {\n  datum: PropTypes.shape({\n    itemsByKey: PropTypes.objectOf(\n      PropTypes.shape({\n        chartType: PropTypes.string,\n        color: PropTypes.string,\n        data: PropTypes.shape({\n          date: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),\n          hasData: PropTypes.bool,\n          hasInfinite: PropTypes.bool,\n          y: PropTypes.number\n        })\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.defaultProps = {\n  datum: {},\n  t: translate,\n  useProduct,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChartTooltip as default, GraphCardChartTooltip };\n","import moment from 'moment';\nimport { chart_color_green_300 as chartColorGreenDark } from '@patternfly/react-tokens';\nimport { ChartTypeVariant } from '../chart/chart';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers, helpers } from '../../common';\n\n/**\n * Update chart/graph filters with core settings and styling.\n *\n * @param {Array} filters\n * @param {object} graphCardSettings\n * @returns {{standaloneFilters: Array, groupedFilters: object}}\n */\nconst generateChartSettings = (filters = [], graphCardSettings = {}) => {\n  const standaloneFiltersSettings = [];\n  const groupedFiltersSettings = [];\n\n  filters.forEach(({ id, isStandalone = false, ...filterSettings }) => {\n    if (!id) {\n      return;\n    }\n\n    const isThreshold = filterSettings?.chartType === ChartTypeVariant.threshold;\n    const baseFilterSettings = {\n      id,\n      isStacked: !isThreshold,\n      isStandalone,\n      isThreshold,\n      isCapacity: isThreshold,\n      strokeWidth: 2\n    };\n\n    if (isThreshold) {\n      baseFilterSettings.stroke = chartColorGreenDark.value;\n      baseFilterSettings.strokeDasharray = '4,3';\n      baseFilterSettings.strokeWidth = 3;\n    }\n\n    if (isStandalone) {\n      standaloneFiltersSettings.push({\n        settings: {\n          padding: {\n            bottom: 75,\n            left: 75,\n            right: 45,\n            top: 45\n          },\n          ...graphCardSettings,\n          isStandalone: true,\n          metric: {\n            ...baseFilterSettings,\n            ...filterSettings\n          },\n          metrics: [\n            {\n              ...baseFilterSettings,\n              ...filterSettings\n            }\n          ]\n        }\n      });\n    } else {\n      groupedFiltersSettings.push({\n        ...baseFilterSettings,\n        ...filterSettings\n      });\n    }\n  });\n\n  const updatedGroupedFiltersSettings =\n    (groupedFiltersSettings.length && {\n      settings: {\n        ...graphCardSettings,\n        isStandalone: false,\n        metric: undefined,\n        metrics: groupedFiltersSettings\n      }\n    }) ||\n    undefined;\n\n  return {\n    standaloneFiltersSettings,\n    groupedFiltersSettings: updatedGroupedFiltersSettings\n  };\n};\n\n/**\n * Returns x axis ticks/intervals array for the xAxisTickInterval\n *\n * @param {string} granularity See enum of RHSM_API_QUERY_GRANULARITY_TYPES\n * @returns {number}\n */\nconst getChartXAxisLabelIncrement = granularity => {\n  switch (granularity) {\n    case GRANULARITY_TYPES.DAILY:\n      return 5;\n    case GRANULARITY_TYPES.WEEKLY:\n    case GRANULARITY_TYPES.MONTHLY:\n      return 2;\n    case GRANULARITY_TYPES.QUARTERLY:\n    default:\n      return 1;\n  }\n};\n\n/**\n * Return a formatted date string.\n *\n * @param {object} params\n * @param {Date} params.date\n * @param {string} params.granularity See enum of RHSM_API_QUERY_GRANULARITY_TYPES\n * @returns {string}\n */\nconst getTooltipDate = ({ date, granularity } = {}) => {\n  const momentDate = moment.utc(date);\n\n  switch (granularity) {\n    case GRANULARITY_TYPES.QUARTERLY:\n      return `${momentDate.format(dateHelpers.timestampQuarterFormats.yearShort)} - ${momentDate\n        .add(1, 'quarter')\n        .format(dateHelpers.timestampQuarterFormats.yearShort)}`;\n\n    case GRANULARITY_TYPES.MONTHLY:\n      return momentDate.format(dateHelpers.timestampMonthFormats.yearLong);\n\n    case GRANULARITY_TYPES.WEEKLY:\n      return `${momentDate.format(dateHelpers.timestampDayFormats.short)} - ${momentDate\n        .add(1, 'week')\n        .format(dateHelpers.timestampDayFormats.yearShort)}`;\n\n    case GRANULARITY_TYPES.DAILY:\n    default:\n      return momentDate.format(dateHelpers.timestampDayFormats.long);\n  }\n};\n\n/**\n * Format x axis ticks.\n *\n * @param {object} params\n * @param {Function} params.callback\n * @param {Date} params.date\n * @param {string} params.granularity See enum of RHSM_API_QUERY_GRANULARITY_TYPES\n * @param {number|string} params.tick\n * @param {Date} params.previousDate\n * @returns {string|undefined}\n */\nconst xAxisTickFormat = ({ callback, date, granularity, tick, previousDate } = {}) => {\n  if (!date || !granularity) {\n    return undefined;\n  }\n\n  if (callback) {\n    return callback({ callback, date, granularity, tick, previousDate });\n  }\n\n  const momentDate = moment.utc(date);\n  const isNewYear =\n    tick !== 0 && Number.parseInt(momentDate.year(), 10) !== Number.parseInt(moment.utc(previousDate).year(), 10);\n  let formattedDate;\n\n  switch (granularity) {\n    case GRANULARITY_TYPES.QUARTERLY:\n      formattedDate = isNewYear\n        ? momentDate.format(dateHelpers.timestampQuarterFormats.yearShort)\n        : momentDate.format(dateHelpers.timestampQuarterFormats.short);\n\n      formattedDate = formattedDate.replace(/\\s/, '\\n');\n      break;\n    case GRANULARITY_TYPES.MONTHLY:\n      formattedDate = isNewYear\n        ? momentDate.format(dateHelpers.timestampMonthFormats.yearShort)\n        : momentDate.format(dateHelpers.timestampMonthFormats.short);\n\n      formattedDate = formattedDate.replace(/\\s/, '\\n');\n      break;\n    case GRANULARITY_TYPES.WEEKLY:\n    case GRANULARITY_TYPES.DAILY:\n    default:\n      formattedDate = isNewYear\n        ? momentDate.format(dateHelpers.timestampDayFormats.yearShort)\n        : momentDate.format(dateHelpers.timestampDayFormats.short);\n\n      formattedDate = formattedDate.replace(/\\s(\\d{4})$/, '\\n$1');\n      break;\n  }\n\n  return formattedDate;\n};\n\n/**\n * Format y axis ticks.\n *\n * @param {object} params\n * @param {Function} params.callback\n * @param {number|string} params.tick\n * @returns {string}\n */\nconst yAxisTickFormat = ({ callback, tick } = {}) => {\n  if (callback) {\n    return callback({ tick });\n  }\n\n  return helpers\n    .numberDisplay(tick)\n    ?.format({\n      average: true,\n      mantissa: 1,\n      trimMantissa: true,\n      lowPrecision: false\n    })\n    ?.toUpperCase();\n};\n\n/**\n * Generate base chart component props.\n *\n * @param {object} params\n * @param {object} params.settings\n * @param {string} params.granularity\n * @returns {object}\n */\nconst generateExtendedChartSettings = ({ settings, granularity } = {}) => ({\n  ...settings,\n  xAxisLabelIncrement: getChartXAxisLabelIncrement(granularity),\n  xAxisTickFormat: ({ item, previousItem, tick }) =>\n    xAxisTickFormat({\n      callback: settings?.xAxisTickFormat,\n      tick,\n      date: item.date,\n      previousDate: previousItem.date,\n      granularity\n    }),\n  yAxisTickFormat: ({ tick }) =>\n    yAxisTickFormat({\n      callback: settings?.yAxisTickFormat,\n      tick\n    })\n});\n\nconst graphCardHelpers = {\n  generateChartSettings,\n  generateExtendedChartSettings,\n  getChartXAxisLabelIncrement,\n  getTooltipDate,\n  xAxisTickFormat,\n  yAxisTickFormat\n};\n\nexport {\n  graphCardHelpers as default,\n  graphCardHelpers,\n  generateChartSettings,\n  generateExtendedChartSettings,\n  getChartXAxisLabelIncrement,\n  getTooltipDate,\n  xAxisTickFormat,\n  yAxisTickFormat\n};\n","import React, { useCallback, useContext } from 'react';\nimport { reduxHelpers } from '../../redux/common';\nimport { storeHooks } from '../../redux/hooks';\nimport { RHSM_API_QUERY_TYPES, rhsmApiTypes } from '../../types/rhsmApiTypes';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Route context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{}, helpers.noop];\n\nconst ProductViewContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated product view context.\n *\n * @returns {React.Context<{}>}\n */\nconst useProductViewContext = () => useContext(ProductViewContext);\n\n/**\n * Return a query object from initial product config and Redux store.\n *\n * @param {string} queryType An identifier used to pull from both config and Redux, they should named the same.\n * @param {object} options\n * @param {string} options.overrideId A custom identifier, used for scenarios like the Guest inventory IDs\n * @param {object} options.useProductViewContext\n * @returns {object}\n */\nconst useProductQueryFactory = (\n  queryType,\n  { overrideId, useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}\n) => {\n  const { [queryType]: initialQuery, productId, viewId } = useAliasProductViewContext();\n  const queryOverride = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[overrideId], undefined);\n  const queryProduct = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[productId], undefined);\n  const queryView = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[viewId], undefined);\n\n  return {\n    ...initialQuery,\n    ...queryOverride,\n    ...queryProduct,\n    ...queryView\n  };\n};\n\n/**\n * Return a base product query\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductQuery = ({ queryType = 'query', options } = {}) => useProductQueryFactory(queryType, options);\n\n/**\n * Return the graph query based off of tally and capacity.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductGraphTallyQuery = ({\n  queryType = 'graphTallyQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_REPORT_CAPACITY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return the inventory query for guests. Use fallback/defaults for guests offset, limit.\n *\n * @param {object} options\n * @param {number} options.defaultLimit\n * @param {number} options.defaultOffset\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryGuestsQuery = ({\n  defaultLimit = 100,\n  defaultOffset = 0,\n  queryType = 'inventoryGuestsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_GUESTS_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      [RHSM_API_QUERY_SET_TYPES.LIMIT]: defaultLimit,\n      [RHSM_API_QUERY_SET_TYPES.OFFSET]: defaultOffset,\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for hosts.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryHostsQuery = ({\n  queryType = 'inventoryHostsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for subscriptions.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventorySubscriptionsQuery = ({\n  queryType = 'inventorySubscriptionsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Get a filtered product configuration context.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductViewContext\n * @returns {object}\n */\nconst useProductContext = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductViewContext: useAliasProductViewContext = useProductViewContext\n} = {}) => {\n  const { [RHSM_API_QUERY_TYPES.UOM]: uomFilter } = useAliasProductQuery();\n  const {\n    initialGraphFilters = [],\n    initialInventoryFilters = [],\n    initialSubscriptionsInventoryFilters = [],\n    productContextFilterUom,\n    ...config\n  } = useAliasProductViewContext();\n\n  const applyUomFilter = useCallback(() => {\n    if (productContextFilterUom === true) {\n      const filterFilters = ({ id, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(uomFilter, 'i').test(id);\n      };\n\n      return {\n        ...config,\n        initialGraphFilters: initialGraphFilters.filter(filterFilters),\n        initialInventoryFilters: initialInventoryFilters.filter(filterFilters),\n        initialSubscriptionsInventoryFilters: initialSubscriptionsInventoryFilters.filter(filterFilters)\n      };\n    }\n\n    return {\n      ...config,\n      initialGraphFilters,\n      initialInventoryFilters,\n      initialSubscriptionsInventoryFilters\n    };\n  }, [\n    config,\n    initialGraphFilters,\n    initialInventoryFilters,\n    initialSubscriptionsInventoryFilters,\n    productContextFilterUom,\n    uomFilter\n  ]);\n\n  return applyUomFilter();\n};\n\n/**\n * Return product identifiers.\n *\n * @param {object} options\n * @param {Function} options.useProductViewContext\n * @returns {{productLabel: string, viewId: string, productId: string, productGroup: string}}\n */\nconst useProduct = ({ useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}) => {\n  const { productGroup, productId, productLabel, viewId } = useAliasProductViewContext();\n  return {\n    productGroup,\n    productId,\n    productLabel,\n    viewId\n  };\n};\n\n/**\n * Return graph configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductGraphConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialGraphFilters, initialGraphSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGraphFilters,\n    settings: initialGraphSettings\n  };\n};\n\n/**\n * Return guests inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryGuestsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { inventoryGuestsQuery = {}, initialGuestsFilters, initialGuestsSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGuestsFilters,\n    initialQuery: inventoryGuestsQuery,\n    settings: initialGuestsSettings\n  };\n};\n\n/**\n * Return hosts inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryHostsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialInventoryFilters, initialInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialInventoryFilters,\n    settings: initialInventorySettings\n  };\n};\n\n/**\n * Return subscriptions inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventorySubscriptionsConfig = ({\n  useProductContext: useAliasProductContext = useProductContext\n} = {}) => {\n  const { initialSubscriptionsInventoryFilters, initialSubscriptionsInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialSubscriptionsInventoryFilters,\n    settings: initialSubscriptionsInventorySettings\n  };\n};\n\n/**\n * Return primary toolbar configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductToolbarConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const {\n    initialToolbarFilters,\n    initialToolbarSettings = {},\n    initialSecondaryToolbarFilters\n  } = useAliasProductContext();\n  return {\n    filters: initialToolbarFilters,\n    secondaryFilters: initialSecondaryToolbarFilters,\n    settings: initialToolbarSettings\n  };\n};\n\nconst context = {\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useQuery: useProductQuery,\n  useQueryFactory: useProductQueryFactory,\n  useGraphTallyQuery: useProductGraphTallyQuery,\n  useInventoryGuestsQuery: useProductInventoryGuestsQuery,\n  useInventoryHostsQuery: useProductInventoryHostsQuery,\n  useInventorySubscriptionsQuery: useProductInventorySubscriptionsQuery,\n  useProduct,\n  useGraphConfig: useProductGraphConfig,\n  useInventoryGuestsConfig: useProductInventoryGuestsConfig,\n  useInventoryHostsConfig: useProductInventoryHostsConfig,\n  useInventorySubscriptionsConfig: useProductInventorySubscriptionsConfig,\n  useToolbarConfig: useProductToolbarConfig\n};\n\nexport {\n  context as default,\n  context,\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useProductQuery,\n  useProductQueryFactory,\n  useProductGraphTallyQuery,\n  useProductInventoryGuestsQuery,\n  useProductInventoryHostsQuery,\n  useProductInventorySubscriptionsQuery,\n  useProduct,\n  useProductGraphConfig,\n  useProductInventoryGuestsConfig,\n  useProductInventoryHostsConfig,\n  useProductInventorySubscriptionsConfig,\n  useProductToolbarConfig\n};\n"],"names":["GraphCardChartTooltip","datum","t","useAliasProduct","useProduct","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","productId","productLabel","granularity","RHSM_API_QUERY_SET_TYPES","header","data","itemsByKey","Object","keys","reverse","forEach","key","index","getTooltipDate","date","tempDataFacet","color","chartType","ChartTypeVariant","thresholdStringValue","y","hasInfinite","ChartIcon","symbol","fill","title","context","label","value","dataFactsValue","hasData","product","push","className","summary","length","colSpan","map","dataFacet","updatedDataFacetValue","Number","isInteger","helpers","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","size","defaultProps","translate","generateChartSettings","filters","graphCardSettings","standaloneFiltersSettings","groupedFiltersSettings","id","isStandalone","filterSettings","isThreshold","baseFilterSettings","isStacked","isCapacity","strokeWidth","stroke","chartColorGreenDark","strokeDasharray","settings","padding","bottom","left","right","top","metric","metrics","updatedGroupedFiltersSettings","undefined","getChartXAxisLabelIncrement","GRANULARITY_TYPES","momentDate","moment","dateHelpers","add","xAxisTickFormat","callback","tick","previousDate","formattedDate","isNewYear","parseInt","year","replace","yAxisTickFormat","generateExtendedChartSettings","xAxisLabelIncrement","item","previousItem","graphCardHelpers","DEFAULT_CONTEXT","ProductViewContext","React","useProductViewContext","useContext","useProductQueryFactory","queryType","overrideId","useAliasProductViewContext","initialQuery","viewId","queryOverride","storeHooks","view","queryProduct","queryView","useProductQuery","options","schemaCheck","rhsmApiTypes","reduxHelpers","useProductInventoryGuestsQuery","defaultLimit","defaultOffset","useProductInventoryHostsQuery","useProductInventorySubscriptionsQuery","useProductContext","useAliasProductQuery","uomFilter","RHSM_API_QUERY_TYPES","initialGraphFilters","initialInventoryFilters","initialSubscriptionsInventoryFilters","productContextFilterUom","config","applyUomFilter","useCallback","filterFilters","isOptional","RegExp","test","filter","productGroup","useProductGraphConfig","useAliasProductContext","initialGraphSettings","useProductInventoryGuestsConfig","inventoryGuestsQuery","initialGuestsFilters","initialGuestsSettings","useProductInventoryHostsConfig","initialInventorySettings","useProductInventorySubscriptionsConfig","initialSubscriptionsInventorySettings","useProductToolbarConfig","initialToolbarFilters","initialToolbarSettings","initialSecondaryToolbarFilters","secondaryFilters","useQuery","useQueryFactory","useGraphTallyQuery","useInventoryGuestsQuery","useInventoryHostsQuery","useInventorySubscriptionsQuery","useGraphConfig","useInventoryGuestsConfig","useInventoryHostsConfig","useInventorySubscriptionsConfig","useToolbarConfig"],"sourceRoot":""}