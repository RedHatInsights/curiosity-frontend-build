{"version":3,"file":"js/3280.c0aa3c2af1e27122d8ec.js","mappings":"kcA0BA,MAAMA,EAAuB,WAKlB,IAJTC,2BAA4BC,EAAkCD,EAAAA,YAC9DE,oBAAqBC,EAA2BD,EAAAA,YAChDE,eAAgBC,EAAsBD,EAAAA,YACtCE,iBAAkBC,EAAwBD,EAAAA,aAC3CE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACH,MAAMG,EAAkBV,IAClBW,EAAmBT,IACnBU,EAAcR,IACdS,EAAgBP,IAEtB,OAAOQ,IACL,OAAQA,GACN,KAAKC,EAAAA,GAAAA,iBACHL,IACA,MACF,KAAKK,EAAAA,GAAAA,SACHJ,IACA,MACF,KAAKI,EAAAA,GAAAA,IACHH,IACA,MACF,KAAKG,EAAAA,GAAAA,MACHF,IAIJ,CAEJ,EAcMG,EAA0B,WAOrB,IANTC,gBAAiBC,EAAuBD,EAAAA,gBACxCE,0BAA2BC,EAAiCD,EAAAA,YAC5DpB,2BAA4BC,EAAkCD,EAAAA,YAC9DE,oBAAqBC,EAA2BD,EAAAA,YAChDE,eAAgBC,EAAsBD,EAAAA,YACtCE,iBAAkBC,EAAwBD,EAAAA,aAC3CE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACH,MACE,CAACQ,EAAAA,GAAAA,kBAA4CM,EAC7C,CAACN,EAAAA,GAAAA,UAAoCO,EACrC,CAACP,EAAAA,GAAAA,KAA+BQ,EAChC,CAACR,EAAAA,GAAAA,OAAiCS,GAChCN,IACER,EAAkBV,IAClBW,EAAmBT,IACnBU,EAAcR,IACdS,EAAgBP,IAChBmB,EAAyBL,IAE/B,OAAOM,IAC0B,iBAApBL,GACTX,IAGsB,iBAAbY,GACTX,IAGiB,iBAARY,GACTX,IAGmB,iBAAVY,GACTX,IAGEa,GACFD,GACF,CAEJ,EAUME,EAAmB,WAGd,IAHe,gBACxBC,EAAkBC,EAAAA,oBAClBC,wBAAyBC,EAA+BD,EAAAA,yBACzDvB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACH,MAAM,QAAEyB,EAAU,IAAOD,IAEzB,OAAOE,EAAAA,EAAAA,UAAQ,KACb,MAAMC,EAAYC,IAAqC,IAApC,GAAEC,EAAE,QAAEC,KAAYC,GAAaH,EAChD,MAAMI,EAASX,EAAgBY,MAAKC,IAAA,IAAGC,MAAOC,GAAqBF,EAAA,OAAKL,IAAOO,CAAmB,KAC1FC,UAAWC,GAAoBN,GAAU,CAAC,EAElD,OACGM,GACCC,IAAAA,cAACC,EAAAA,YAAW,CAACC,IAAG,UAAAC,OAAYb,IAC1BU,IAAAA,cAACD,GAAeK,EAAAA,EAAAA,GAAA,CAACC,UAAU,GAAWb,MAGxCQ,IAAAA,cAACC,EAAAA,YAAW,CAACC,IAAKZ,GAAMgB,EAAAA,EAAAA,cACF,mBAAZf,EAAyBA,IAAYA,IAGjD,IAAI,EAIR,MAAO,CACLgB,WAAYrB,EAAQsB,QAAOC,IAAA,IAAC,OAAEC,GAAQD,EAAA,OAAgB,IAAXC,CAAe,IAAEC,IAAIvB,GAChEwB,gBAAiB1B,EAAQsB,QAAOK,IAAA,IAAC,YAAEC,GAAaD,EAAA,OAAqB,IAAhBC,CAAoB,IAAEH,IAAIvB,GAChF,GACA,CAACN,EAAiBI,GACvB,EAEM6B,EAAU,CACd/D,uBACAkB,0BACAW,mB","sources":["webpack:///./src/components/toolbar/toolbarContext.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { ToolbarItem } from '@patternfly/react-core';\nimport { useProductQuery, useProductToolbarConfig } from '../productView/productViewContext';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { useOnSelect as useSelectCategoryOnSelect, toolbarFieldOptions } from './toolbarFieldSelectCategory';\nimport { useOnSelect as useBillingProviderOnSelect } from './toolbarFieldBillingProvider';\nimport { useOnSelect as useCategoryOnSelect } from './toolbarFieldCategory';\nimport { useOnSelect as useSlaOnSelect } from './toolbarFieldSla';\nimport { useOnSelect as useUsageOnSelect } from './toolbarFieldUsage';\nimport { helpers } from '../../common/helpers';\n\n/**\n * @memberof Toolbar\n * @module ToolbarContext\n */\n\n/**\n * Clear a specific toolbar category using a select component's OnSelect hook.\n *\n * @param {object} options\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useCategoryOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClear = ({\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useCategoryOnSelect: useAliasCategoryOnSelect = useCategoryOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect\n} = {}) => {\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const categoryOnSelect = useAliasCategoryOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n\n  return field => {\n    switch (field) {\n      case RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER:\n        billingOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.CATEGORY:\n        categoryOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.SLA:\n        slaOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.USAGE:\n        usageOnSelect();\n        break;\n      default:\n        break;\n    }\n  };\n};\n\n/**\n * Clear all available toolbar categories.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useSelectCategoryOnSelect\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useCategoryOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClearAll = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useSelectCategoryOnSelect: useAliasSelectCategoryOnSelect = useSelectCategoryOnSelect,\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useCategoryOnSelect: useAliasCategoryOnSelect = useCategoryOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect\n} = {}) => {\n  const {\n    [RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER]: billingProvider,\n    [RHSM_API_QUERY_SET_TYPES.CATEGORY]: category,\n    [RHSM_API_QUERY_SET_TYPES.SLA]: sla,\n    [RHSM_API_QUERY_SET_TYPES.USAGE]: usage\n  } = useAliasProductQuery();\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const categoryOnSelect = useAliasCategoryOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n  const selectCategoryOnSelect = useAliasSelectCategoryOnSelect();\n\n  return hardFilterReset => {\n    if (typeof billingProvider === 'string') {\n      billingOnSelect();\n    }\n\n    if (typeof category === 'string') {\n      categoryOnSelect();\n    }\n\n    if (typeof sla === 'string') {\n      slaOnSelect();\n    }\n\n    if (typeof usage === 'string') {\n      usageOnSelect();\n    }\n\n    if (hardFilterReset) {\n      selectCategoryOnSelect();\n    }\n  };\n};\n\n/**\n * Return lists of item and secondary toolbar fields for display.\n *\n * @param {object} options\n * @param {Array} options.categoryOptions\n * @param {Function} options.useProductToolbarConfig\n * @returns {Array}\n */\nconst useToolbarFields = ({\n  categoryOptions = toolbarFieldOptions,\n  useProductToolbarConfig: useAliasProductToolbarConfig = useProductToolbarConfig\n} = {}) => {\n  const { filters = [] } = useAliasProductToolbarConfig();\n\n  return useMemo(() => {\n    const setFilter = ({ id, content, ...filterProps }) => {\n      const option = categoryOptions.find(({ value: categoryOptionValue }) => id === categoryOptionValue);\n      const { component: OptionComponent } = option || {};\n\n      return (\n        (OptionComponent && (\n          <ToolbarItem key={`option-${id}`}>\n            <OptionComponent isFilter={false} {...filterProps} />\n          </ToolbarItem>\n        )) || (\n          <ToolbarItem key={id || helpers.generateId()}>\n            {typeof content === 'function' ? content() : content}\n          </ToolbarItem>\n        ) ||\n        null\n      );\n    };\n\n    return {\n      itemFields: filters.filter(({ isItem }) => isItem === true).map(setFilter),\n      secondaryFields: filters.filter(({ isSecondary }) => isSecondary === true).map(setFilter)\n    };\n  }, [categoryOptions, filters]);\n};\n\nconst context = {\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFields\n};\n\nexport { context as default, context, useToolbarFieldClear, useToolbarFieldClearAll, useToolbarFields };\n"],"names":["useToolbarFieldClear","useBillingProviderOnSelect","useAliasBillingProviderOnSelect","useCategoryOnSelect","useAliasCategoryOnSelect","useSlaOnSelect","useAliasSlaOnSelect","useUsageOnSelect","useAliasUsageOnSelect","arguments","length","undefined","billingOnSelect","categoryOnSelect","slaOnSelect","usageOnSelect","field","RHSM_API_QUERY_SET_TYPES","useToolbarFieldClearAll","useProductQuery","useAliasProductQuery","useSelectCategoryOnSelect","useAliasSelectCategoryOnSelect","billingProvider","category","sla","usage","selectCategoryOnSelect","hardFilterReset","useToolbarFields","categoryOptions","toolbarFieldOptions","useProductToolbarConfig","useAliasProductToolbarConfig","filters","useMemo","setFilter","_ref","id","content","filterProps","option","find","_ref2","value","categoryOptionValue","component","OptionComponent","React","ToolbarItem","key","concat","_extends","isFilter","helpers","itemFields","filter","_ref3","isItem","map","secondaryFields","_ref4","isSecondary","context"],"sourceRoot":""}