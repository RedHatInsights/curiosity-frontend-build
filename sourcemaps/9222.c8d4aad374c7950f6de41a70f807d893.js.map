{"version":3,"file":"js/9222.1679403700107.fc489d46c5b888907f25.js","mappings":"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","sources":["webpack:///./src/components/inventoryCardSubscriptions/inventoryCardSubscriptions.js","webpack:///./src/components/inventoryCardSubscriptions/inventoryCardSubscriptionsContext.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  useProductInventorySubscriptionsConfig,\n  useProductInventorySubscriptionsQuery\n} from '../productView/productViewContext';\nimport {\n  useGetSubscriptionsInventory,\n  useOnPageSubscriptions,\n  useOnColumnSortSubscriptions\n} from './inventoryCardSubscriptionsContext';\nimport InventoryCard from '../inventoryCard/inventoryCard';\nimport { helpers } from '../../common';\n\n/**\n * @memberof Components\n * @module InventoryCardSubscriptions\n * @property {module} InventoryCardSubscriptionsContext\n */\n\n/**\n * A subscriptions' system inventory component.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useGetInventory\n * @param {Function} props.useOnPage\n * @param {Function} props.useOnColumnSort\n * @param {Function} props.useProductInventoryConfig\n * @param {Function} props.useProductInventoryQuery\n * @fires onColumnSort\n * @fires onPage\n * @returns {React.ReactNode}\n */\nconst InventoryCardSubscriptions = ({ ...props }) => <InventoryCard cardActions={null} {...props} />;\n\n/**\n * Prop types.\n *\n * @type {{useOnPage: Function, isDisabled: boolean, useProductInventoryConfig: Function, useGetInventory: Function,\n *     useOnColumnSort: Function, useProductInventoryQuery: Function}}\n */\nInventoryCardSubscriptions.propTypes = {\n  isDisabled: PropTypes.bool,\n  useGetInventory: PropTypes.func,\n  useOnPage: PropTypes.func,\n  useOnColumnSort: PropTypes.func,\n  useProductInventoryConfig: PropTypes.func,\n  useProductInventoryQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnPage: Function, isDisabled: boolean, useProductInventoryConfig: Function, useGetInventory: Function,\n *     useOnColumnSort: Function, useProductInventoryQuery: Function}}\n */\nInventoryCardSubscriptions.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS,\n  useGetInventory: useGetSubscriptionsInventory,\n  useOnPage: useOnPageSubscriptions,\n  useOnColumnSort: useOnColumnSortSubscriptions,\n  useProductInventoryConfig: useProductInventorySubscriptionsConfig,\n  useProductInventoryQuery: useProductInventorySubscriptionsQuery\n};\n\nexport { InventoryCardSubscriptions as default, InventoryCardSubscriptions };\n","import { useShallowCompareEffect } from 'react-use';\nimport _camelCase from 'lodash/camelCase';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { reduxActions, reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductInventorySubscriptionsQuery } from '../productView/productViewContext';\nimport {\n  RHSM_API_QUERY_INVENTORY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_INVENTORY_SUBSCRIPTIONS_SORT_TYPES as SORT_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * @memberof InventoryCardSubscriptions\n * @module InventoryCardSubscriptionsContext\n */\n\n/**\n * Combined Redux RHSM Actions, getSubscriptionsInventory, and inventory selector response.\n *\n * @param {object} options\n * @param {boolean} options.isDisabled\n * @param {Function} options.getInventory\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useProductInventoryQuery\n * @param {Function} options.useSelectorsResponse\n * @returns {Function}\n */\nconst useGetSubscriptionsInventory = ({\n  isDisabled = false,\n  getInventory = reduxActions.rhsm.getSubscriptionsInventory,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventorySubscriptionsQuery,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductInventoryQuery();\n  const dispatch = useAliasDispatch();\n  const { cancelled, pending, data, ...response } = useAliasSelectorsResponse(\n    ({ inventory }) => inventory?.subscriptionsInventory?.[productId]\n  );\n\n  useShallowCompareEffect(() => {\n    if (!isDisabled) {\n      getInventory(productId, query)(dispatch);\n    }\n  }, [dispatch, isDisabled, productId, query]);\n\n  return {\n    ...response,\n    pending: pending || cancelled || false,\n    data: (data?.length === 1 && data[0]) || data || {}\n  };\n};\n\n/**\n * An onPage callback for subscriptions inventory.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnPageSubscriptions = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for subscriptions inventory.\n   *\n   * @event onPage\n   * @param {object} params\n   * @param {number} params.offset\n   * @param {number} params.perPage\n   * @returns {void}\n   */\n  return ({ offset, perPage }) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.OFFSET],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.OFFSET]: offset\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.LIMIT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.LIMIT]: perPage\n      }\n    ]);\n  };\n};\n\n/**\n * An onColumnSort callback for subscriptions inventory.\n *\n * @param {object} options\n * @param {object} options.sortColumns\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnColumnSortSubscriptions = ({\n  sortColumns = SORT_TYPES,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for subscriptions inventory.\n   *\n   * @event onColumnSort\n   * @param {*} _data\n   * @param {object} params\n   * @param {string} params.direction\n   * @param {string} params.id\n   * @returns {void}\n   */\n  return (_data, { direction, id }) => {\n    const updatedSortColumn = Object.values(sortColumns).find(value => value === id || _camelCase(value) === id);\n    let updatedDirection;\n\n    if (!updatedSortColumn) {\n      if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n        console.warn(`Sorting can only be performed on select fields, confirm field ${id} is allowed.`);\n      }\n      return;\n    }\n\n    switch (direction) {\n      case SortByDirection.desc:\n        updatedDirection = SORT_DIRECTION_TYPES.DESCENDING;\n        break;\n      default:\n        updatedDirection = SORT_DIRECTION_TYPES.ASCENDING;\n        break;\n    }\n\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.DIRECTION],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.DIRECTION]: updatedDirection\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.SORT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.SORT]: updatedSortColumn\n      }\n    ]);\n  };\n};\n\nconst context = {\n  useGetSubscriptionsInventory,\n  useOnPageSubscriptions,\n  useOnColumnSortSubscriptions\n};\n\nexport {\n  context as default,\n  context,\n  useGetSubscriptionsInventory,\n  useOnPageSubscriptions,\n  useOnColumnSortSubscriptions\n};\n"],"names":["InventoryCardSubscriptions","_ref","props","Object","assign","React","InventoryCard","cardActions","defaultProps","isDisabled","helpers","useGetInventory","useGetSubscriptionsInventory","useOnPage","useOnPageSubscriptions","useOnColumnSort","useOnColumnSortSubscriptions","useProductInventoryConfig","useProductInventorySubscriptionsConfig","useProductInventoryQuery","useProductInventorySubscriptionsQuery","arguments","length","undefined","_ref$isDisabled","_ref$getInventory","getInventory","reduxActions","_ref$useDispatch","useDispatch","useAliasDispatch","storeHooks","_ref$useProduct","useProduct","useAliasProduct","_ref$useProductInvent","useAliasProductInventoryQuery","_ref$useSelectorsResp","useSelectorsResponse","useAliasSelectorsResponse","_useAliasProduct","productId","query","dispatch","_useAliasSelectorsRes","_ref2","_inventory$subscripti","inventory","subscriptionsInventory","cancelled","pending","data","response","_objectWithoutProperties","_excluded","useShallowCompareEffect","_objectSpread","_ref3","_ref3$useDispatch","_ref3$useProduct","_useAliasProduct2","_ref4","offset","perPage","_defineProperty","type","reduxTypes","RHSM_API_QUERY_SET_TYPES","viewId","_ref7","_ref7$sortColumns","sortColumns","SORT_TYPES","_ref7$useDispatch","_ref7$useProduct","_useAliasProduct3","_data","_ref8","updatedDirection","direction","id","updatedSortColumn","values","find","value","_camelCase","SortByDirection","SORT_DIRECTION_TYPES","console","warn","concat","context"],"sourceRoot":""}