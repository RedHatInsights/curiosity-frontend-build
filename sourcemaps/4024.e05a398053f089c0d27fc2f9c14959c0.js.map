{"version":3,"file":"js/4024.595f2d4193a5bf3143e6.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardChartTooltip.js","webpack:///./src/components/productView/productViewContext.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { getTooltipDate } from './graphCardHelpers';\nimport { translate } from '../i18n/i18n';\nimport { ChartTypeVariant } from '../chart/chart';\nimport { ChartIcon } from '../chart/chartIcon';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * @memberof GraphCard\n * @module GraphCardChartTooltip\n */\n\n/**\n * A custom chart tooltip.\n *\n * @param {object} props\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useProduct\n * @returns {React.ReactNode}\n */\nconst GraphCardChartTooltip = ({\n  datum,\n  t,\n  useProduct: useAliasProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productLabel } = useAliasProduct();\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n\n  let header = null;\n  const data = [];\n  const { itemsByKey = {} } = datum || {};\n\n  Object.keys(itemsByKey)\n    .reverse()\n    .forEach((key, index) => {\n      if (index === 0) {\n        header = getTooltipDate({\n          date: itemsByKey[key]?.data.date,\n          granularity\n        });\n      }\n\n      const tempDataFacet = {\n        color: itemsByKey[key]?.color\n      };\n\n      if (itemsByKey[key]?.chartType === ChartTypeVariant.threshold) {\n        let thresholdStringValue = itemsByKey[key]?.data.y ?? t('curiosity-graph.label', { context: 'noData' });\n\n        // ToDo: Remove hasInfinite check once deprecated graphCard components are removed\n        if (itemsByKey[key]?.data.hasInfinite || itemsByKey[key]?.data.hasInfiniteQuantity) {\n          thresholdStringValue = t('curiosity-graph.label', { context: ['threshold', 'infinite'] }, [\n            tempDataFacet.color && (\n              <ChartIcon\n                symbol=\"infinity\"\n                fill=\"#ffffff\"\n                title={t('curiosity-graph.label', { context: ['threshold', 'infinite'] })}\n              />\n            )\n          ]);\n        }\n\n        tempDataFacet.label = t('curiosity-graph.label', { context: ['threshold'] });\n        tempDataFacet.value = thresholdStringValue;\n      } else {\n        const dataFactsValue =\n          (itemsByKey[key]?.data.hasData === false && t('curiosity-graph.label', { context: 'noData' })) ||\n          itemsByKey[key]?.data.y ||\n          0;\n\n        tempDataFacet.label = t(`curiosity-graph.label`, { context: key, product: productLabel });\n        tempDataFacet.value = dataFactsValue;\n      }\n\n      tempDataFacet.chartType = itemsByKey[key]?.chartType;\n      data.push(tempDataFacet);\n    });\n\n  return (\n    <div className=\"curiosity-usage-graph__tooltip\">\n      <table summary={t('curiosity-graph.tooltipSummary')}>\n        {(data.length && header && (\n          <thead>\n            <tr>\n              <th colSpan={2}>{header}</th>\n            </tr>\n          </thead>\n        )) ||\n          null}\n        {(data.length && (\n          <tbody>\n            {data.map(dataFacet => {\n              const updatedDataFacetValue =\n                (typeof dataFacet.value === 'number' &&\n                  !Number.isInteger(dataFacet.value) &&\n                  helpers\n                    .numberDisplay(dataFacet.value)\n                    ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: true })\n                    ?.toUpperCase()) ||\n                dataFacet.value;\n\n              return (\n                <tr key={`tooltip-${dataFacet.label}`}>\n                  <th>\n                    {dataFacet.chartType === ChartTypeVariant.threshold && (\n                      <ChartIcon size=\"sm\" symbol=\"dash\" fill={dataFacet.color || 'transparent'} />\n                    )}\n                    {dataFacet.chartType !== ChartTypeVariant.threshold && (\n                      <ChartIcon size=\"sm\" fill={dataFacet.color || 'transparent'} />\n                    )}{' '}\n                    {dataFacet.label}\n                  </th>\n                  <td>{updatedDataFacetValue}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        )) ||\n          null}\n      </table>\n      {(!data.length && t('curiosity-graph.label', { context: ['noData', 'error'] })) || null}\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.propTypes = {\n  datum: PropTypes.shape({\n    itemsByKey: PropTypes.objectOf(\n      PropTypes.shape({\n        chartType: PropTypes.string,\n        color: PropTypes.string,\n        data: PropTypes.shape({\n          date: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),\n          hasData: PropTypes.bool,\n          hasInfinite: PropTypes.bool,\n          hasInfiniteQuantity: PropTypes.bool,\n          y: PropTypes.number\n        })\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.defaultProps = {\n  datum: {},\n  t: translate,\n  useProduct,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChartTooltip as default, GraphCardChartTooltip };\n","import React, { useCallback, useContext } from 'react';\nimport _cloneDeep from 'lodash/cloneDeep';\nimport { reduxHelpers } from '../../redux/common';\nimport { storeHooks } from '../../redux/hooks';\nimport { rhsmConstants, RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common/helpers';\n\n/**\n * @memberof ProductView\n * @module ProductViewContext\n */\n\n/**\n * Route context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{}, helpers.noop];\n\nconst ProductViewContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated product view context.\n *\n * @returns {React.Context<{}>}\n */\nconst useProductViewContext = () => useContext(ProductViewContext);\n\n/**\n * Return a query object from initial product config and Redux store.\n *\n * @param {string} queryType An identifier used to pull from both config and Redux, they should named the same.\n * @param {object} options\n * @param {string} options.overrideId A custom identifier, used for scenarios like the Guest inventory IDs\n * @param {object} options.useProductViewContext\n * @param {Function} options.useSelectors\n * @returns {object}\n */\nconst useProductQueryFactory = (\n  queryType,\n  {\n    overrideId,\n    useProductViewContext: useAliasProductViewContext = useProductViewContext,\n    useSelectors: useAliasSelectors = storeHooks.reactRedux.useSelectors\n  } = {}\n) => {\n  const { [queryType]: initialQuery, productId, viewId } = useAliasProductViewContext();\n  const [queryOverride, queryProduct, queryView] = useAliasSelectors([\n    ({ view }) => view?.[queryType]?.[overrideId],\n    ({ view }) => view?.[queryType]?.[productId],\n    ({ view }) => view?.[queryType]?.[viewId]\n  ]);\n\n  return {\n    ...initialQuery,\n    ...queryOverride,\n    ...queryProduct,\n    ...queryView\n  };\n};\n\n/**\n * Return a base product query\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {Function} options.useProductQueryFactory\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductQuery = ({\n  queryType = 'query',\n  useProductQueryFactory: useAliasProductQueryFactory = useProductQueryFactory,\n  options\n} = {}) => useAliasProductQueryFactory(queryType, options);\n\n/**\n * Return the graph query based off of tally and capacity.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductQueryFactory\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductGraphTallyQuery = ({\n  queryType = 'graphTallyQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_TALLY_CAPACITY_TYPES,\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductQueryFactory: useAliasProductQueryFactory = useProductQueryFactory,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useAliasProductQuery(),\n      ...useAliasProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return the inventory query for guests. Use fallback/defaults for guests offset, limit.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductQueryFactory\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryGuestsQuery = ({\n  queryType = 'inventoryGuestsQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductQueryFactory: useAliasProductQueryFactory = useProductQueryFactory,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useAliasProductQuery(),\n      ...useAliasProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for hosts.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductQueryFactory\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryHostsQuery = ({\n  queryType = 'inventoryHostsQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductQueryFactory: useAliasProductQueryFactory = useProductQueryFactory,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useAliasProductQuery(),\n      ...useAliasProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for subscriptions.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductQueryFactory\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventorySubscriptionsQuery = ({\n  queryType = 'inventorySubscriptionsQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductQueryFactory: useAliasProductQueryFactory = useProductQueryFactory,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useAliasProductQuery(),\n      ...useAliasProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return a unified query for toolbars\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductGraphTallyQuery\n * @param {Function} options.useProductInventoryHostsQuery\n * @param {Function} options.useProductInventorySubscriptionsQuery\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductToolbarQuery = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery,\n  useProductInventoryHostsQuery: useAliasProductInventoryHostsQuery = useProductInventoryHostsQuery,\n  useProductInventorySubscriptionsQuery:\n    useAliasProductInventorySubscriptionsQuery = useProductInventorySubscriptionsQuery,\n  options\n} = {}) => ({\n  ...useAliasProductQuery({ options }),\n  ...useAliasProductGraphTallyQuery({ options }),\n  ...useAliasProductInventoryHostsQuery({ options }),\n  ...useAliasProductInventorySubscriptionsQuery({ options })\n});\n\n/**\n * Get a filtered product configuration context.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductViewContext\n * @returns {object}\n */\nconst useProductContext = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductViewContext: useAliasProductViewContext = useProductViewContext\n} = {}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.UOM]: uomFilter } = useAliasProductQuery();\n  const {\n    initialGraphFilters = [],\n    initialInventoryFilters = [],\n    initialSubscriptionsInventoryFilters = [],\n    productContextFilterUom,\n    ...config\n  } = useAliasProductViewContext();\n\n  const applyUomFilter = useCallback(() => {\n    if (productContextFilterUom === true) {\n      const filterFilters = ({ id, metric, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(uomFilter, 'i').test(metric) || new RegExp(uomFilter, 'i').test(id);\n      };\n\n      /**\n       * Allowing nested filters beside normal filters we take the quick path, just run the loop twice.\n       * Make sure to set \"isOptional\" false when it comes to nested filters in the event someone\n       * combined a config setting in the subsequent loop.\n       */\n      const updatedGraphFilters = _cloneDeep(initialGraphFilters)\n        .map(({ filters, ...rest }) => ({\n          ...rest,\n          filters: filters.filter(filterFilters),\n          isOptional: false\n        }))\n        .filter(filterFilters);\n\n      return {\n        ...config,\n        initialGraphFilters: updatedGraphFilters,\n        initialInventoryFilters: initialInventoryFilters.filter(filterFilters),\n        initialSubscriptionsInventoryFilters: initialSubscriptionsInventoryFilters.filter(filterFilters)\n      };\n    }\n\n    return {\n      ...config,\n      initialGraphFilters,\n      initialInventoryFilters,\n      initialSubscriptionsInventoryFilters\n    };\n  }, [\n    config,\n    initialGraphFilters,\n    initialInventoryFilters,\n    initialSubscriptionsInventoryFilters,\n    productContextFilterUom,\n    uomFilter\n  ]);\n\n  return applyUomFilter();\n};\n\n/**\n * Return product identifiers.\n *\n * @param {object} options\n * @param {Function} options.useProductViewContext\n * @returns {{productLabel, viewId, productId, productGroup, productVariants}}\n */\nconst useProduct = ({ useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}) => {\n  const { productGroup, productId, productLabel, productVariants, viewId } = useAliasProductViewContext();\n  return {\n    productGroup,\n    productId,\n    productLabel,\n    productVariants,\n    viewId\n  };\n};\n\n/**\n * Return graph configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductGraphConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialGraphFilters, initialGraphSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGraphFilters,\n    settings: initialGraphSettings\n  };\n};\n\n/**\n * Return guests inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryGuestsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { inventoryGuestsQuery = {}, initialGuestsFilters, initialGuestsSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGuestsFilters,\n    initialQuery: inventoryGuestsQuery,\n    settings: initialGuestsSettings\n  };\n};\n\n/**\n * Return inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryHostsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialInventoryFilters, initialInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialInventoryFilters,\n    settings: initialInventorySettings\n  };\n};\n\n/**\n * Return subscriptions inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventorySubscriptionsConfig = ({\n  useProductContext: useAliasProductContext = useProductContext\n} = {}) => {\n  const { initialSubscriptionsInventoryFilters, initialSubscriptionsInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialSubscriptionsInventoryFilters,\n    settings: initialSubscriptionsInventorySettings\n  };\n};\n\n/**\n * Return primary toolbar configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductToolbarConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialToolbarFilters, initialToolbarSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialToolbarFilters,\n    settings: initialToolbarSettings\n  };\n};\n\nconst context = {\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useQuery: useProductQuery,\n  useQueryFactory: useProductQueryFactory,\n  useGraphTallyQuery: useProductGraphTallyQuery,\n  useInventoryGuestsQuery: useProductInventoryGuestsQuery,\n  useInventoryHostsQuery: useProductInventoryHostsQuery,\n  useInventorySubscriptionsQuery: useProductInventorySubscriptionsQuery,\n  useProduct,\n  useGraphConfig: useProductGraphConfig,\n  useInventoryGuestsConfig: useProductInventoryGuestsConfig,\n  useInventoryHostsConfig: useProductInventoryHostsConfig,\n  useInventorySubscriptionsConfig: useProductInventorySubscriptionsConfig,\n  useToolbarConfig: useProductToolbarConfig,\n  useToolbarQuery: useProductToolbarQuery\n};\n\nexport {\n  context as default,\n  context,\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useProductQuery,\n  useProductQueryFactory,\n  useProductGraphTallyQuery,\n  useProductInventoryGuestsQuery,\n  useProductInventoryHostsQuery,\n  useProductInventorySubscriptionsQuery,\n  useProduct,\n  useProductGraphConfig,\n  useProductInventoryGuestsConfig,\n  useProductInventoryHostsConfig,\n  useProductInventorySubscriptionsConfig,\n  useProductToolbarConfig,\n  useProductToolbarQuery\n};\n"],"names":["GraphCardChartTooltip","_ref","datum","t","useProduct","useAliasProduct","useProductGraphTallyQuery","useAliasProductGraphTallyQuery","productLabel","RHSM_API_QUERY_SET_TYPES","granularity","header","data","itemsByKey","Object","keys","reverse","forEach","key","index","_itemsByKey$key2","_itemsByKey$key3","_itemsByKey$key9","_itemsByKey$key","getTooltipDate","date","tempDataFacet","color","chartType","ChartTypeVariant","_itemsByKey$key$data$","_itemsByKey$key4","_itemsByKey$key5","_itemsByKey$key6","thresholdStringValue","y","context","hasInfinite","hasInfiniteQuantity","React","ChartIcon","symbol","fill","title","label","value","_itemsByKey$key7","_itemsByKey$key8","dataFactsValue","hasData","product","push","className","summary","length","colSpan","map","dataFacet","_helpers$numberDispla","_helpers$numberDispla2","updatedDataFacetValue","Number","isInteger","helpers","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","concat","size","propTypes","PropTypes","Date","defaultProps","translate","DEFAULT_CONTEXT","ProductViewContext","useProductViewContext","useContext","useProductQueryFactory","queryType","overrideId","useAliasProductViewContext","useSelectors","useAliasSelectors","storeHooks","arguments","undefined","initialQuery","productId","viewId","queryOverride","queryProduct","queryView","_view$queryType","view","_ref2","_view$queryType2","_ref3","_view$queryType3","useProductQuery","useAliasProductQueryFactory","options","schemaCheck","rhsmConstants","useAliasProductQuery","reduxHelpers","useProductInventoryGuestsQuery","useProductInventoryHostsQuery","useProductInventorySubscriptionsQuery","useProductToolbarQuery","useAliasProductInventoryHostsQuery","useAliasProductInventorySubscriptionsQuery","useProductContext","uomFilter","initialGraphFilters","initialInventoryFilters","initialSubscriptionsInventoryFilters","productContextFilterUom","config","useCallback","filterFilters","_ref4","id","metric","isOptional","RegExp","test","updatedGraphFilters","_cloneDeep","_ref5","filters","rest","filter","applyUomFilter","productGroup","productVariants","useProductGraphConfig","useAliasProductContext","initialGraphSettings","settings","useProductInventoryGuestsConfig","inventoryGuestsQuery","initialGuestsFilters","initialGuestsSettings","useProductInventoryHostsConfig","initialInventorySettings","useProductInventorySubscriptionsConfig","initialSubscriptionsInventorySettings","useProductToolbarConfig","initialToolbarFilters","initialToolbarSettings","useQuery","useQueryFactory","useGraphTallyQuery","useInventoryGuestsQuery","useInventoryHostsQuery","useInventorySubscriptionsQuery","useGraphConfig","useInventoryGuestsConfig","useInventoryHostsConfig","useInventorySubscriptionsConfig","useToolbarConfig","useToolbarQuery"],"sourceRoot":""}