{"version":3,"file":"js/9517.1669840105786.d71f3ac54fd3cb5ada63.js","mappings":"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","sources":["webpack:///./src/components/form/formHelpers.js","webpack:///./src/components/form/textInput.js","webpack:///./src/components/productView/productViewContext.js","webpack:///./src/components/toolbar/toolbarFieldDisplayName.js"],"sourcesContent":["import { helpers } from '../../common/helpers';\n\n/**\n * Create a consistent mock event object.\n *\n * @param {object} event\n * @param {boolean} persistEvent\n * @returns {{keyCode, currentTarget, name, id: *, persist: Function, value, target}}\n */\nconst createMockEvent = (event, persistEvent = false) => {\n  const { checked, currentTarget = {}, keyCode, persist = helpers.noop, target = {} } = { ...event };\n  if (persistEvent) {\n    persist();\n  }\n\n  return {\n    checked,\n    currentTarget,\n    keyCode,\n    id: currentTarget.id || currentTarget.name,\n    name: currentTarget.name,\n    persist,\n    value: currentTarget.value,\n    target\n  };\n};\n\n/**\n * Confirm a string has minimum length.\n *\n * @param {string} value\n * @param {number} characters\n * @returns {boolean}\n */\nconst doesNotHaveMinimumCharacters = (value, characters = 1) =>\n  (typeof value === 'string' && value.length < characters) || typeof value !== 'string';\n\nconst formHelpers = {\n  createMockEvent,\n  doesNotHaveMinimumCharacters\n};\n\nexport { formHelpers as default, formHelpers, createMockEvent, doesNotHaveMinimumCharacters };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TextInput as PfTextInput } from '@patternfly/react-core';\nimport { createMockEvent } from './formHelpers';\nimport { helpers } from '../../common';\n\n/**\n * A wrapper for Patternfly TextInput. Provides restructured event data,\n * and an onClear event for the search type.\n *\n * @augments React.Component\n * @fires onKeyUp\n * @fires onMouseUp\n * @fires onChange\n */\nclass TextInput extends React.Component {\n  state = {\n    updatedValue: null\n  };\n\n  /**\n   * onKeyUp event, provide additional functionality for onClear event.\n   *\n   * @event onKeyUp\n   * @param {object} event\n   */\n  onKeyUp = event => {\n    const { onClear, onKeyUp, type } = this.props;\n    const { currentTarget, keyCode } = event;\n    const clonedEvent = { ...event };\n\n    onKeyUp(createMockEvent(event, true));\n\n    if (keyCode === 27) {\n      if (type === 'search' && currentTarget.value === '') {\n        onClear(createMockEvent(clonedEvent));\n      } else {\n        this.setState({ updatedValue: '' }, () => {\n          onClear(\n            createMockEvent({ ...clonedEvent, ...{ currentTarget: { ...clonedEvent.currentTarget, value: '' } } })\n          );\n        });\n      }\n    }\n  };\n\n  /**\n   * onMouseUp event, provide additional functionality for onClear event.\n   *\n   * @event onMouseUp\n   * @param {object} event\n   */\n  onMouseUp = event => {\n    const { onClear, onMouseUp, type } = this.props;\n    const { currentTarget } = event;\n    const clonedEvent = { ...event };\n\n    onMouseUp(createMockEvent(event, true));\n\n    if (type !== 'search' || currentTarget.value === '') {\n      return;\n    }\n\n    setTimeout(() => {\n      if (currentTarget.value === '') {\n        onClear(createMockEvent(clonedEvent));\n      }\n    });\n  };\n\n  /**\n   * onChange event, provide restructured event.\n   *\n   * @param {string} value\n   * @param {object} event\n   */\n  onChange = (value, event) => {\n    const { onChange } = this.props;\n    const clonedEvent = { ...event };\n\n    this.setState({ updatedValue: value }, () => {\n      onChange(createMockEvent(clonedEvent));\n    });\n  };\n\n  /**\n   * Render a text input.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { updatedValue } = this.state;\n    const {\n      className,\n      id,\n      isDisabled,\n      name,\n      onChange,\n      onClear,\n      onKeyUp,\n      onMouseUp,\n      isReadOnly,\n      type,\n      value,\n      ...props\n    } = this.props;\n    const updatedName = name || helpers.generateId();\n    const updatedId = id || updatedName;\n\n    return (\n      <PfTextInput\n        id={updatedId}\n        name={updatedName}\n        className={`curiosity-text-input ${className}`}\n        isDisabled={isDisabled || false}\n        onChange={this.onChange}\n        onKeyUp={this.onKeyUp}\n        onMouseUp={this.onMouseUp}\n        isReadOnly={isReadOnly || false}\n        type={type}\n        value={updatedValue ?? value ?? ''}\n        {...props}\n      />\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{onKeyUp: Function, isReadOnly: boolean, onChange: Function, onClear: Function,\n *     name: string, className: string, id: string, isDisabled: boolean, onMouseUp: Function,\n *     type: string, value: string}}\n */\nTextInput.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  isDisabled: PropTypes.bool,\n  isReadOnly: PropTypes.bool,\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  onClear: PropTypes.func,\n  onKeyUp: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  type: PropTypes.string,\n  value: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{onKeyUp: Function, isReadOnly: boolean, onChange: Function, onClear: Function,\n *     name: string, className: string, id: string, isDisabled: boolean, onMouseUp: Function,\n *     type: string, value: string}}\n */\nTextInput.defaultProps = {\n  className: '',\n  id: null,\n  isDisabled: false,\n  isReadOnly: false,\n  name: null,\n  onChange: helpers.noop,\n  onClear: helpers.noop,\n  onKeyUp: helpers.noop,\n  onMouseUp: helpers.noop,\n  type: 'text',\n  value: ''\n};\n\nexport { TextInput as default, TextInput };\n","import React, { useCallback, useContext } from 'react';\nimport { reduxHelpers } from '../../redux/common';\nimport { storeHooks } from '../../redux/hooks';\nimport { rhsmConstants, RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Route context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{}, helpers.noop];\n\nconst ProductViewContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated product view context.\n *\n * @returns {React.Context<{}>}\n */\nconst useProductViewContext = () => useContext(ProductViewContext);\n\n/**\n * Return a query object from initial product config and Redux store.\n *\n * @param {string} queryType An identifier used to pull from both config and Redux, they should named the same.\n * @param {object} options\n * @param {string} options.overrideId A custom identifier, used for scenarios like the Guest inventory IDs\n * @param {object} options.useProductViewContext\n * @returns {object}\n */\nconst useProductQueryFactory = (\n  queryType,\n  { overrideId, useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}\n) => {\n  const { [queryType]: initialQuery, productId, viewId } = useAliasProductViewContext();\n  const queryOverride = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[overrideId], undefined);\n  const queryProduct = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[productId], undefined);\n  const queryView = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[viewId], undefined);\n\n  return {\n    ...initialQuery,\n    ...queryOverride,\n    ...queryProduct,\n    ...queryView\n  };\n};\n\n/**\n * Return a base product query\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductQuery = ({ queryType = 'query', options } = {}) => useProductQueryFactory(queryType, options);\n\n/**\n * Return the graph query based off of tally and capacity.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductGraphTallyQuery = ({\n  queryType = 'graphTallyQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_TALLY_CAPACITY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return the inventory query for guests. Use fallback/defaults for guests offset, limit.\n *\n * @param {object} options\n * @param {number} options.defaultLimit\n * @param {number} options.defaultOffset\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryGuestsQuery = ({\n  defaultLimit = 100,\n  defaultOffset = 0,\n  queryType = 'inventoryGuestsQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      [RHSM_API_QUERY_SET_TYPES.LIMIT]: defaultLimit,\n      [RHSM_API_QUERY_SET_TYPES.OFFSET]: defaultOffset,\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for hosts.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryHostsQuery = ({\n  queryType = 'inventoryHostsQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for subscriptions.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventorySubscriptionsQuery = ({\n  queryType = 'inventorySubscriptionsQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Get a filtered product configuration context.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductViewContext\n * @returns {object}\n */\nconst useProductContext = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductViewContext: useAliasProductViewContext = useProductViewContext\n} = {}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.UOM]: uomFilter } = useAliasProductQuery();\n  const {\n    initialGraphFilters = [],\n    initialInventoryFilters = [],\n    initialSubscriptionsInventoryFilters = [],\n    productContextFilterUom,\n    ...config\n  } = useAliasProductViewContext();\n\n  const applyUomFilter = useCallback(() => {\n    if (productContextFilterUom === true) {\n      const filterFilters = ({ id, metric, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(uomFilter, 'i').test(metric) || new RegExp(uomFilter, 'i').test(id);\n      };\n\n      return {\n        ...config,\n        initialGraphFilters: initialGraphFilters.filter(filterFilters),\n        initialInventoryFilters: initialInventoryFilters.filter(filterFilters),\n        initialSubscriptionsInventoryFilters: initialSubscriptionsInventoryFilters.filter(filterFilters)\n      };\n    }\n\n    return {\n      ...config,\n      initialGraphFilters,\n      initialInventoryFilters,\n      initialSubscriptionsInventoryFilters\n    };\n  }, [\n    config,\n    initialGraphFilters,\n    initialInventoryFilters,\n    initialSubscriptionsInventoryFilters,\n    productContextFilterUom,\n    uomFilter\n  ]);\n\n  return applyUomFilter();\n};\n\n/**\n * Return product identifiers.\n *\n * @param {object} options\n * @param {Function} options.useProductViewContext\n * @returns {{productLabel: string, viewId: string, productId: string, productGroup: string}}\n */\nconst useProduct = ({ useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}) => {\n  const { productGroup, productId, productLabel, viewId } = useAliasProductViewContext();\n  return {\n    productGroup,\n    productId,\n    productLabel,\n    viewId\n  };\n};\n\n/**\n * Return graph configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductGraphConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialGraphFilters, initialGraphSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGraphFilters,\n    settings: initialGraphSettings\n  };\n};\n\n/**\n * Return guests inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryGuestsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { inventoryGuestsQuery = {}, initialGuestsFilters, initialGuestsSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGuestsFilters,\n    initialQuery: inventoryGuestsQuery,\n    settings: initialGuestsSettings\n  };\n};\n\n/**\n * Return hosts inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryHostsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialInventoryFilters, initialInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialInventoryFilters,\n    settings: initialInventorySettings\n  };\n};\n\n/**\n * Return subscriptions inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventorySubscriptionsConfig = ({\n  useProductContext: useAliasProductContext = useProductContext\n} = {}) => {\n  const { initialSubscriptionsInventoryFilters, initialSubscriptionsInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialSubscriptionsInventoryFilters,\n    settings: initialSubscriptionsInventorySettings\n  };\n};\n\n/**\n * Return primary toolbar configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductToolbarConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const {\n    initialToolbarFilters,\n    initialToolbarSettings = {},\n    initialSecondaryToolbarFilters\n  } = useAliasProductContext();\n  return {\n    filters: initialToolbarFilters,\n    secondaryFilters: initialSecondaryToolbarFilters,\n    settings: initialToolbarSettings\n  };\n};\n\nconst context = {\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useQuery: useProductQuery,\n  useQueryFactory: useProductQueryFactory,\n  useGraphTallyQuery: useProductGraphTallyQuery,\n  useInventoryGuestsQuery: useProductInventoryGuestsQuery,\n  useInventoryHostsQuery: useProductInventoryHostsQuery,\n  useInventorySubscriptionsQuery: useProductInventorySubscriptionsQuery,\n  useProduct,\n  useGraphConfig: useProductGraphConfig,\n  useInventoryGuestsConfig: useProductInventoryGuestsConfig,\n  useInventoryHostsConfig: useProductInventoryHostsConfig,\n  useInventorySubscriptionsConfig: useProductInventorySubscriptionsConfig,\n  useToolbarConfig: useProductToolbarConfig\n};\n\nexport {\n  context as default,\n  context,\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useProductQuery,\n  useProductQueryFactory,\n  useProductGraphTallyQuery,\n  useProductInventoryGuestsQuery,\n  useProductInventoryHostsQuery,\n  useProductInventorySubscriptionsQuery,\n  useProduct,\n  useProductGraphConfig,\n  useProductInventoryGuestsConfig,\n  useProductInventoryHostsConfig,\n  useProductInventorySubscriptionsConfig,\n  useProductToolbarConfig\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { InputGroup } from '@patternfly/react-core';\nimport _debounce from 'lodash/debounce';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductInventoryHostsQuery } from '../productView/productViewContext';\nimport { TextInput } from '../form/textInput';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * ToDo: evaluate the debounce milliseconds, currently based off platforms default 800 ms\n */\n/**\n * Display a display name input field for search.\n *\n * @fires onSubmit\n * @fires onClear\n * @fires onKeyUp\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useDispatch\n * @param {Function} props.useProduct\n * @param {Function} props.useProductInventoryHostsQuery\n * @returns {Node}\n */\nconst ToolbarFieldDisplayName = ({\n  t,\n  useDispatch: useAliasDispatch,\n  useProduct: useAliasProduct,\n  useProductInventoryHostsQuery: useAliasProductInventoryHostsQuery\n}) => {\n  const { viewId } = useAliasProduct();\n  const { [RHSM_API_QUERY_SET_TYPES.DISPLAY_NAME]: currentValue } = useAliasProductInventoryHostsQuery();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On submit, dispatch type.\n   *\n   * @event onSubmit\n   * @param {string} submitValue\n   * @returns {void}\n   */\n  const onSubmit = submitValue =>\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.DISPLAY_NAME],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.DISPLAY_NAME]: submitValue?.trim() || null\n      }\n    ]);\n\n  /**\n   * On clear, dispatch type.\n   *\n   * @event onClear\n   * @returns {void}\n   */\n  const onClear = () => {\n    if (currentValue === '' || !currentValue) {\n      return;\n    }\n\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.DISPLAY_NAME],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.DISPLAY_NAME]: null\n      }\n    ]);\n  };\n\n  /**\n   * Set up submit debounce event to allow for bypass.\n   */\n  const debounced = _debounce(onSubmit, 700);\n\n  /**\n   * On enter submit value, on type submit value, and on esc ignore (clear value at component level).\n   *\n   * @event onKeyUp\n   * @param {object} event\n   */\n  const onKeyUp = event => {\n    switch (event.keyCode) {\n      case 13:\n        onSubmit(event.value);\n        break;\n      case 27:\n        break;\n      default:\n        debounced(event.value);\n        break;\n    }\n  };\n\n  return (\n    <InputGroup>\n      <TextInput\n        aria-label={t('curiosity-toolbar.placeholder_filter', { context: 'displayName' })}\n        className=\"curiosity-input__display-name\"\n        iconVariant=\"search\"\n        maxLength={255}\n        onClear={onClear}\n        onKeyUp={onKeyUp}\n        value={currentValue}\n        placeholder={t('curiosity-toolbar.placeholder_filter', { context: 'displayName' })}\n        data-test=\"toolbarFieldDisplayName\"\n      />\n    </InputGroup>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProduct: Function, t: translate, useDispatch: Function, useProductInventoryHostsQuery: Function}}\n */\nToolbarFieldDisplayName.propTypes = {\n  t: PropTypes.func,\n  useDispatch: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductInventoryHostsQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProduct: Function, t: translate, useDispatch: Function, useProductInventoryHostsQuery: Function}}\n */\nToolbarFieldDisplayName.defaultProps = {\n  t: translate,\n  useDispatch: storeHooks.reactRedux.useDispatch,\n  useProduct,\n  useProductInventoryHostsQuery\n};\n\nexport { ToolbarFieldDisplayName as default, ToolbarFieldDisplayName };\n"],"names":["createMockEvent","event","persistEvent","checked","currentTarget","keyCode","persist","helpers","target","id","name","value","doesNotHaveMinimumCharacters","characters","length","formHelpers","TextInput","state","updatedValue","onKeyUp","props","onClear","type","clonedEvent","setState","onMouseUp","setTimeout","onChange","this","className","isDisabled","isReadOnly","updatedName","updatedId","React","defaultProps","DEFAULT_CONTEXT","ProductViewContext","useProductViewContext","useContext","useProductQueryFactory","queryType","overrideId","useAliasProductViewContext","initialQuery","productId","viewId","queryOverride","storeHooks","view","undefined","queryProduct","queryView","useProductQuery","options","useProductGraphTallyQuery","schemaCheck","rhsmConstants","reduxHelpers","useProductInventoryGuestsQuery","defaultLimit","defaultOffset","RHSM_API_QUERY_SET_TYPES","useProductInventoryHostsQuery","useProductInventorySubscriptionsQuery","useProductContext","useAliasProductQuery","uomFilter","initialGraphFilters","initialInventoryFilters","initialSubscriptionsInventoryFilters","productContextFilterUom","config","applyUomFilter","useCallback","filterFilters","metric","isOptional","RegExp","test","filter","useProduct","productGroup","productLabel","useProductGraphConfig","useAliasProductContext","initialGraphSettings","filters","settings","useProductInventoryGuestsConfig","inventoryGuestsQuery","initialGuestsFilters","initialGuestsSettings","useProductInventoryHostsConfig","initialInventorySettings","useProductInventorySubscriptionsConfig","initialSubscriptionsInventorySettings","useProductToolbarConfig","initialToolbarFilters","initialToolbarSettings","initialSecondaryToolbarFilters","secondaryFilters","context","useQuery","useQueryFactory","useGraphTallyQuery","useInventoryGuestsQuery","useInventoryHostsQuery","useInventorySubscriptionsQuery","useGraphConfig","useInventoryGuestsConfig","useInventoryHostsConfig","useInventorySubscriptionsConfig","useToolbarConfig","ToolbarFieldDisplayName","t","useAliasDispatch","useDispatch","useAliasProduct","useAliasProductInventoryHostsQuery","currentValue","dispatch","onSubmit","submitValue","reduxTypes","trim","debounced","_debounce","InputGroup","iconVariant","maxLength","placeholder","translate"],"sourceRoot":""}