{"version":3,"file":"js/5242.02080d4bb151ae012b46.js","mappings":"skBA+BA,MAAMA,EAAsB,SAACC,GAA+B,IAAzB,OAAEC,EAAS,IAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAChDG,EAAcL,EAMlB,GAJoB,mBAATA,IACTK,EAAcL,KAAUM,MAAMC,QAAQN,IAAWA,GAAW,CAACA,KAGpC,iBAAhBI,GAAmD,iBAAhBA,GAA4BG,IAAAA,eAAqBH,GAC7F,OAAOA,CAIX,EAeMI,EAA4B,WAA8E,IAA7E,QAAEC,EAAU,GAAE,SAAEC,EAAW,CAAC,EAAC,KAAEC,EAAO,CAAC,EAAC,UAAEC,EAAS,QAAEC,EAAU,CAAC,GAAGZ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACxG,MAAMa,EAAc,GACdC,EAAY,GA6GlB,OA3GAN,EAAQO,SACNC,IAYM,IAZL,aACCC,EAAY,GACZC,EAAE,KACFC,EAAI,UACJC,EAAS,OACTC,EAAM,OACNC,EAAM,cACNC,GAAgB,EAAI,OACpBC,EAAM,WACNC,EAAU,cACVC,EAAa,WACbC,GACDX,EACC,MAAMY,EAAoB,CACxBC,OAAOC,EAAAA,EAAAA,WAAU,6BAA8B,CAAEC,QAAS,CAACb,EAAIP,KAC/DgB,WAAY,IAERK,EAAkB,CAAEH,MAAO,IAGf,IAAAI,EAAAC,EAAAC,EAAAC,EAAlB,GAAI3B,EAASS,GACXU,EAAkBC,MAA2B,QAAtBI,EAAe,QAAfC,EAAGzB,EAASS,UAAG,IAAAgB,OAAA,EAAZA,EAAcL,aAAK,IAAAI,EAAAA,EAAIf,EACjDc,EAAgBH,MAA2B,QAAtBM,EAAe,QAAfC,EAAG3B,EAASS,UAAG,IAAAkB,OAAA,EAAZA,EAAcC,aAAK,IAAAF,EAAAA,EAAI,QAC1C,IAAqB,IAAjBlB,EACTW,EAAkBC,MAAQ,GAC1BG,EAAgBH,MAAQ,QAKxB,IAHIS,EAAAA,QAAAA,UAAoBA,EAAAA,QAAAA,cACtBC,QAAQC,KAAK,oBAADC,OAAqBvB,EAAE,6CAA6CT,IAE5D,IAAlBc,EACF,OAKJ,GAAIF,EAAQ,CACV,MAAMqB,EAAyB7C,EAAoBwB,EAAQ,CACzDtB,OAAQ,CAAC,IAAKU,GAAY,IAAKG,GAAW,IAAKF,MASjD,GAPIgC,EACFd,EAAkBC,MAAQa,EACjBC,IAAetB,IACxBuB,OAAOC,OAAOjB,EAAmB,IAAKP,IAIpCA,EAAOyB,SAAWlB,EAAkBC,MAAO,CAC7C,MAAMkB,EAA2BlD,EAAoBwB,EAAOyB,QAAS,CACnE/C,OAAQ,CAAC,IAAKU,GAAY,IAAKG,GAAW,IAAKF,MAE7CqC,IACFnB,EAAkBC,MAAQvB,IAAAA,cAAC0C,EAAAA,QAAO,CAACC,QAASF,GAA2BnB,EAAkBC,eAGpFD,EAAkBkB,OAC3B,CACF,CAqBA,GAlBI1C,MAAMC,QAAQuB,EAAkBD,cAC9BvB,MAAMC,QAAQsB,KAChBC,EAAkBD,WAAaC,EAAkBD,WAAWc,OAAO,IAAId,KAGhD,iBAAdP,GACTQ,EAAkBD,WAAWuB,MAAKC,EAAAA,EAAAA,WAAY/B,KAK5B,mBAAXE,IACTM,EAAkBN,OAAS8B,GAAO9B,EAAO,IAAKb,GAAY,IAAK2C,EAAKlC,GAAIM,GAAUN,IAClFU,EAAkBH,WAAaA,EAC/BG,EAAkBF,cAAgBA,GAIhCP,EAAM,CACR,MAAMkC,EAAuBxD,EAAoBsB,EAAM,CACrDpB,OAAQ,CAAC,IAAKU,GAAY,IAAKG,GAAW,IAAKF,MASjD,GAPI2C,EACFrB,EAAgBH,MAAQwB,EACfV,IAAexB,IACxByB,OAAOC,OAAOb,EAAiB,IAAKb,IAIlCA,EAAK2B,SAAWd,EAAgBH,MAAO,CACzC,MAAMyB,EAAyBzD,EAAoBsB,EAAK2B,QAAS,CAC/D/C,OAAQ,CAAC,IAAKU,GAAY,IAAKG,GAAW,IAAKF,MAE7C4C,IACFtB,EAAgBH,MAAQvB,IAAAA,cAAC0C,EAAAA,QAAO,CAACC,QAASK,GAAyBtB,EAAgBH,eAG9EG,EAAgBc,OACzB,CACF,CAEAjC,EAAYqC,KAAKtB,GACjBd,EAAUoC,KAAKlB,EAAgB,IAI5B,CACLnB,cACAC,YAEJ,EAYMyC,EAAmB,WAA8C,IAA7C,OAAEC,EAAS,CAAC,EAAC,OAAElC,EAAM,MAAEmC,EAAQ,CAAC,GAAGzD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC/D,MAAM,GAAEkB,EAAE,OAAEM,GAAWgC,EACjBE,EAAYlC,GAAUN,EACtByC,EAAgB,IAAKH,GACrBI,EAAUD,EAAcrC,QAAUA,EA0CxC,OAxCKqC,EAAcrC,QAAUA,IAC3BqC,EAAcrC,OAASA,GAKvBsC,GACoC,kBAA7BD,EAAclC,YADrBmC,MAEAH,GAAAA,EAAQI,EAAAA,GAAAA,SACPJ,aAAK,EAALA,EAAQI,EAAAA,GAAAA,SAAmCH,GAC1CI,IAAWL,aAAK,EAALA,EAAQI,EAAAA,GAAAA,SAAoCH,KAEzDC,EAAclC,YAAa,GAIzBmC,IAAYD,EAAcjC,eAA1BkC,MAA2CH,GAAAA,EAAQI,EAAAA,GAAAA,cAC7CJ,aAAK,EAALA,EAAQI,EAAAA,GAAAA,cACTE,EAAAA,GAAAA,WACHJ,EAAcjC,cAAgBsC,EAAAA,gBAAAA,KAG9BL,EAAcjC,cAAgBsC,EAAAA,gBAAAA,MAMlCJ,GACCD,EAAclC,YACdgC,SAAAA,EAAQI,EAAAA,GAAAA,QACuB,IAAhCF,EAAcM,gBAEdN,EAAclC,YAAa,EAEvBkC,EAAcO,8BAChBP,EAAcjC,cAAgBiC,EAAcO,8BAIzCP,CACT,EASMQ,EAAwB,WAA0B,IAAzB,OAAEX,EAAS,CAAC,GAAGxD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAChD,MAAM2D,EAAgB,IAAKH,GAQ3B,OANIpD,MAAMC,QAAQsD,EAAchC,YAC9BgC,EAAchC,WAAWuB,KAAKkB,EAAAA,WAE9BT,EAAchC,WAAa,CAACyC,EAAAA,WAGvBT,CACT,EAcMU,EAAwB,eAAC,QAAE7D,EAAU,GAAE,OAAEc,EAAM,MAAEmC,EAAQ,CAAC,GAAGzD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,MACtE,IAAIQ,GAAS8D,KAAId,IACf,MAAMG,EAAgB,IAAKH,GAU3B,OARIG,EAAcY,YAChB3B,OAAOC,OAAOc,EAAeJ,EAAiB,CAAEC,OAAQG,EAAerC,SAAQmC,WAG7EE,EAAca,aAChB5B,OAAOC,OAAOc,EAAeQ,EAAsB,CAAEX,OAAQG,KAGxDA,CAAa,GACpB,EAgBEc,EAAwB,WAA8E,IAA7E,QAAEjE,EAAU,GAAE,SAAEC,EAAW,CAAC,EAAC,KAAEC,EAAO,CAAC,EAAC,UAAEC,EAAS,QAAEC,EAAU,CAAC,GAAGZ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACpG,MAAM0E,EAAuB,GACvBC,EAAe,GACfC,EAAW,CAAC,EAclB,GAXAhC,OAAOiC,QAAQpE,GAAUM,SAAQ+D,IAAuB,IAArBC,EAAK1C,EAAQ,IAAGyC,EACjDF,EAASG,GAAO,CACdlD,OAAOC,EAAAA,EAAAA,WAAU,6BAA8B,CAAEC,QAAS,CAACgD,EAAKpE,KAChE0B,SAGFqC,EAAqBxB,KAAK0B,EAASG,GAAKlD,OACxC8C,EAAazB,KAAKb,GAAS,MAAM,IAI/B7B,SAAAA,EAASP,QAAU2C,OAAOoC,KAAKJ,GAAU3E,OAAQ,CACnDyE,EAAqBzE,OAAS,EAC9B0E,EAAa1E,OAAS,EAEtB,MAAM,YAAEY,EAAc,GAAE,UAAEC,EAAY,IAAOP,EAA0B,CACrEC,UACAC,SAAUmE,EACVlE,OACAC,YACAC,YAGF8D,EAAqBxB,QAAQrC,GAC7B8D,EAAazB,QAAQpC,EACvB,CAEA,MAAO,CACLmE,cAAeP,EACfQ,MAAOP,EACPQ,KAAM,IAAKP,GAEf,EAEMQ,EAAuB,CAC3BvF,sBACAU,4BACAgD,mBACAY,wBACAE,wBACAI,wB,6OClTF,MAAMY,EAAkBrE,IASlB,IATmB,eACvBsE,EAAc,GACdpE,EAAE,eACFqE,EACAC,sBAAuBC,EACvBC,YAAaC,EACbC,+BAAgCC,EAChCC,gCAAiCC,EACjCC,WAAYC,GACbjF,EACC,MAAMkF,EAAcD,KACZzF,QAAS2F,GAAqBJ,KAChC,QAAEK,EAASjB,KAAMkB,EAAW,IAAOZ,EAA2BvE,GAC9DoF,EAAWX,EAAiBzE,GAC5BuC,EAAQoC,EAAoC,CAAEU,QAAS,CAAEC,WAAYtF,MACnE,CAAC2C,EAAAA,GAAAA,QAAkC4C,GAAgBhD,EAwC3D,IAAIiB,EAAuB,GAC3B,MAAMgC,EAAcL,EAAS/B,KAAIqC,IAAqB,OAAflG,GAAUkG,EAC/C,MAAM,cAAE1B,EAAa,MAAEC,GAAUE,EAAAA,qBAAAA,sBAA2C,CAC1E5E,QAAS2F,EACT1F,WACAG,QAASsF,IAKX,OAFAxB,EAAuBO,EAEhB,CACLC,QACD,IAKH,IAAI0B,EAAuC,IAAtBrB,EAAiB,GAGtC,OAFAqB,EAAiBA,EAAgB,KAAOA,GAAkB,IAGxDtG,IAAAA,cAAA,OAAKuG,UAAU,UACbvG,IAAAA,cAAA,OAAKuG,UAAU,yBAAyBC,MAAO,CAAEC,OAAQ,GAAFtE,OAAKmE,EAAa,QACvEtG,IAAAA,cAAA,OACEuG,UAAS,8BAAApE,OAAiCmE,EAAgB,IAAO,cAAkB,IACnFN,SAAUA,GAzDGU,KACnB,GAAIZ,EAAS,CACX,IAAIa,EAAkB,EAElBD,IAEAC,EADE1B,EAAiBD,EACDC,EAEAD,GAItB,MAAM4B,EACJ5G,IAAAA,cAAC6G,EAAAA,OAAM,CACLC,QAAQ,QACRC,WAAY,CACVC,SAAS,EACTT,UAAYG,EAAe,6BAA4B9G,EACvDqH,UAAUpB,aAAgB,EAAhBA,EAAkBlG,UAAWoG,aAAQ,EAARA,EAAW,KAAMzD,OAAOoC,KAAKqB,EAAS,IAAIpG,QAAW,EAC5FuH,UAAWrB,aAAgB,EAAhBA,EAAkBlG,SAAUkG,EAAiB7B,KAAIQ,IAAA,IAAC,UAAE1D,GAAW0D,EAAA,OAAK1D,CAAS,KAAM,GAC9FqG,SAAUR,EACVG,QAASM,EAAAA,aAAAA,WAKf,OAAOpH,IAAAA,cAAA,OAAKuG,UAAU,yCAAyCK,EACjE,CAEA,OAAO,IAAI,EA8BJS,CAA6B,IAAhBlB,GACZC,EAAYzG,QACZK,IAAAA,cAACsH,EAAAA,MAAK,CACJN,SAAS,EACTF,QAASM,EAAAA,aAAAA,QACTb,UAAU,wBACV5B,cAAeP,EACfmD,KAAMnB,KAGR,OAGF,EAWVrB,EAAgByC,UAAY,CAC1BxC,eAAgByC,IAAAA,OAChB7G,GAAI6G,IAAAA,OAAAA,WACJxC,eAAgBwC,IAAAA,OAAAA,WAChBvC,sBAAuBuC,IAAAA,KACvBrC,YAAaqC,IAAAA,KACbjC,gCAAiCiC,IAAAA,KACjCnC,+BAAgCmC,IAAAA,KAChC/B,WAAY+B,IAAAA,MASd1C,EAAgB2C,aAAe,CAC7B1C,eAAgB,EAChBE,sBAAqB,wBACrBE,YAAW,cACXI,gCAA+B,kCAC/BF,+BAA8B,iCAC9BI,WAAUA,EAAAA,W,gTChJZ,MAAMiC,EAA8B,SAClC/G,GAEG,IADDgH,qBAAsBC,EAA4BC,EAAAA,GAAAA,WAAAA,sBAA4CpI,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEpG,MAAM,MAAEqI,EAAK,UAAEC,EAAS,UAAEC,EAAS,QAAEnC,EAAO,KAAEjB,GAASgD,GACrDnH,IAAA,IAAAwH,EAAA,IAAC,UAAEC,GAAWzH,EAAA,OAAKyH,SAA0B,QAAjBD,EAATC,EAAWC,uBAAe,IAAAF,OAAjB,EAATA,EAA6BtH,EAAG,IAGrD,MAAO,CACLmH,QACAE,YACAnC,QAASA,GAAWkC,IAAa,EACjCnD,KAAwB,KAAjBA,aAAI,EAAJA,EAAMlF,SAAgBkF,EAAK,IAAOA,GAAQ,CAAC,EAEtD,EAaMK,EAAwB,SAC5BtE,GAOG,IANH,aACEyH,EAAeC,EAAAA,GAAAA,KAAAA,4BACfC,YAAaC,EAAmBV,EAAAA,GAAAA,WAAAA,YAChCW,yBAA0BC,EAAgCpD,EAAAA,+BAC1DqD,sBAAuBC,EAA6BjB,GACrDjI,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEL,MAAOmJ,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,IACzC5F,EAAQuF,EAA8B,CAAEzC,QAAS,CAAEC,WAAYtF,KAC/DoI,EAAWR,KACX,KAAE3D,EAAO,CAAC,EAAC,UAAEoD,GAAY,KAAUgB,GAAaL,EAA2BhI,IACzEiE,KAAMkB,EAAW,IAAOlB,EAYhC,OAVAqE,EAAAA,EAAAA,IAAwB,KACtBb,EAAazH,EAAIuC,EAAjBkF,CAAwBW,EAAS,GAChC,CAACA,EAAUpI,EAAIuC,KAElBgG,EAAAA,EAAAA,IAAqB,KACflB,GACFa,GAAeM,GAAa,IAAIA,KAAcrD,IAChD,GACC,CAACkC,EAAWlC,IAER,CACLlB,KAAMgE,EACNZ,eACGgB,EAEP,EAYM7D,EAAc,SAClBxE,GAMG,IAJD2H,YAAaC,EAAmBV,EAAAA,GAAAA,WAAAA,YAChCa,sBAAuBC,EAA6BjB,EACpDc,yBAA0BC,EAAgCpD,EAAAA,gCAC3D5F,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEL,MAAMsJ,EAAWR,KACX,QAAE1C,EAAO,KAAEjB,EAAO,CAAC,GAAM+D,EAA2BhI,IAClDyI,MAAOpE,IAAmBJ,aAAI,EAAJA,EAAMzE,OAAQ,CAAC,EAE3C+C,EAAQuF,EAA8B,CAAEzC,QAAS,CAAEC,WAAYtF,MAC7D,CAAC2C,EAAAA,GAAAA,OAAiC+F,EAAO,CAAC/F,EAAAA,GAAAA,QAAkC4C,GAAgBhD,EAyBpG,OC5HyBoG,EDwGd,KACTP,EAAS,CACP,CACEQ,KAAMC,EAAAA,GAAAA,MAAAA,sCACNC,OAAQ9I,GAEV,CACE4I,KAAMC,EAAAA,GAAAA,UAAAA,uBACN7I,OAEF,GCjHE+I,GAAQ,IAAAC,QAAOL,IAEbM,QAAUN,GAChB,EAAAO,EAAA,IAAc,WAAc,OAAO,WAAc,OAAOH,EAAME,SAAW,CAAG,IDwHvEE,IACL,MAAM,OAAEC,GAAWD,EACbE,EAASD,EAAOE,aAAeF,EAAOG,YAAcH,EAAOI,aAE7DnF,EAAiBkB,EAAcmD,GAASW,IAAWnE,GACrDkD,EAAS,CACP,CACEQ,KAAMC,EAAAA,GAAAA,MAAAA,sCAAuDlG,EAAAA,GAAAA,QAC7DmG,OAAQ9I,EACR,CAAC2C,EAAAA,GAAAA,QAAkC4C,EAAcmD,GAEnD,CACEE,KAAMC,EAAAA,GAAAA,MAAAA,sCAAuDlG,EAAAA,GAAAA,OAC7DmG,OAAQ9I,EACR,CAAC2C,EAAAA,GAAAA,OAAiC+F,IAGxC,EC7Ia,IAAUC,EACnBI,CD8IR,EAEMlI,EAAU,CACdyD,wBACAE,cACAuC,8B,oBEhJF0C,EAAOC,QAAU,SAASC,EAAMC,EAAGC,GACjC,GAAID,IAAMC,EAAG,OAAO,EAEpB,GAAID,GAAKC,GAAiB,iBAALD,GAA6B,iBAALC,EAAe,CAC1D,GAAID,EAAEE,cAAgBD,EAAEC,YAAa,OAAO,EAE5C,IAAI/K,EAAQgL,EAAGjG,EACf,GAAI5E,MAAMC,QAAQyK,GAAI,CAEpB,IADA7K,EAAS6K,EAAE7K,SACG8K,EAAE9K,OAAQ,OAAO,EAC/B,IAAKgL,EAAIhL,EAAgB,GAARgL,KACf,IAAKJ,EAAMC,EAAEG,GAAIF,EAAEE,IAAK,OAAO,EACjC,OAAO,CACT,CAIA,GAAIH,EAAEE,cAAgBE,OAAQ,OAAOJ,EAAEK,SAAWJ,EAAEI,QAAUL,EAAEM,QAAUL,EAAEK,MAC5E,GAAIN,EAAEO,UAAYzI,OAAO0I,UAAUD,QAAS,OAAOP,EAAEO,YAAcN,EAAEM,UACrE,GAAIP,EAAES,WAAa3I,OAAO0I,UAAUC,SAAU,OAAOT,EAAES,aAAeR,EAAEQ,WAIxE,IADAtL,GADA+E,EAAOpC,OAAOoC,KAAK8F,IACL7K,UACC2C,OAAOoC,KAAK+F,GAAG9K,OAAQ,OAAO,EAE7C,IAAKgL,EAAIhL,EAAgB,GAARgL,KACf,IAAKrI,OAAO0I,UAAUE,eAAeC,KAAKV,EAAG/F,EAAKiG,IAAK,OAAO,EAEhE,IAAKA,EAAIhL,EAAgB,GAARgL,KAAY,CAC3B,IAAIlG,EAAMC,EAAKiG,GAEf,KAAY,WAARlG,GAAoB+F,EAAEY,UAOrBb,EAAMC,EAAE/F,GAAMgG,EAAEhG,KAAO,OAAO,CACrC,CAEA,OAAO,CACT,CAGA,OAAO+F,GAAIA,GAAKC,GAAIA,CACtB,C,kFCnDA,E,MAAA,GCaA,EAX2B,SAAUY,EAAQC,IASzC,EAAAC,EAAA,GAAuBF,EAAQC,EAAME,EACzC,C","sources":["webpack:///./src/components/inventoryCard/inventoryCardHelpers.js","webpack:///./src/components/inventoryGuests/inventoryGuests.js","webpack:///./src/components/inventoryGuests/inventoryGuestsContext.js","webpack:///./node_modules/react-use/esm/useUnmount.js","webpack:///./node_modules/fast-deep-equal/react.js","webpack:///./node_modules/react-use/esm/misc/isDeepEqual.js","webpack:///./node_modules/react-use/esm/useDeepCompareEffect.js"],"sourcesContent":["import React from 'react';\nimport { cellWidth as PfCellWidth, SortByDirection, wrappable } from '@patternfly/react-table';\nimport _camelCase from 'lodash/camelCase';\nimport _isPlainObject from 'lodash/isPlainObject';\nimport { Tooltip } from '../tooltip/tooltip';\nimport { translate } from '../i18n/i18n';\nimport {\n  RHSM_API_QUERY_INVENTORY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * @memberof InventoryCard\n * @module InventoryCardHelpers\n */\n\n/**\n * ToDo: review setting up a transformed cell cache for already transformed cells.\n * - review using a simple state and key memoized component\n * - review using lru cache in a inventoryCardContext custom hook\n */\n\n/**\n * Apply product inventory config properties consistently.\n *\n * @param {Function|string|number} prop\n * @param {object} options\n * @param {Array|*} options.params\n * @returns {React.ReactNode}\n */\nconst applyConfigProperty = (prop, { params = [] } = {}) => {\n  let updatedProp = prop;\n\n  if (typeof prop === 'function') {\n    updatedProp = prop(...((Array.isArray(params) && params) || [params]));\n  }\n\n  if (typeof updatedProp === 'string' || typeof updatedProp === 'number' || React.isValidElement(updatedProp)) {\n    return updatedProp;\n  }\n\n  return undefined;\n};\n\n/**\n * Generate header and row cell configuration from filters.\n *\n * @param {object} params\n * @param {Array<{id: string, isStandalone: boolean, cell:(React.ReactNode|{ title: string }), cellWidth: number,\n *     header:(React.ReactNode|{ title: string }), onSort: Function, showEmptyCell: boolean, sortId: string,\n *     sortActive: boolean, sortDirection: string, transforms: Array}>} params.filters\n * @param {object} params.cellData\n * @param {object} params.meta\n * @param {string} params.productId\n * @param {object} params.session\n * @returns {{bodyCells: Array<{ title: React.ReactNode }>, headerCells: Array<{ title: React.ReactNode }>}}\n */\nconst applyHeaderRowCellFilters = ({ filters = [], cellData = {}, meta = {}, productId, session = {} } = {}) => {\n  const headerCells = [];\n  const bodyCells = [];\n\n  filters.forEach(\n    ({\n      isStandalone,\n      id,\n      cell,\n      cellWidth,\n      header,\n      onSort,\n      showEmptyCell = true,\n      sortId,\n      sortActive,\n      sortDirection,\n      transforms\n    }) => {\n      const headerCellUpdated = {\n        title: translate('curiosity-inventory.header', { context: [id, productId] }),\n        transforms: []\n      };\n      const bodyCellUpdated = { title: '' };\n\n      // set filtered base header and body cells, or if filter doesn't exist skip\n      if (cellData[id]) {\n        headerCellUpdated.title = cellData[id]?.title ?? id;\n        bodyCellUpdated.title = cellData[id]?.value ?? '';\n      } else if (isStandalone === true) {\n        headerCellUpdated.title = '';\n        bodyCellUpdated.title = '';\n      } else {\n        if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n          console.warn(`Warning: Filter \"${id}\" not found in \"table row\" response data.`, cellData);\n        }\n        if (showEmptyCell === false) {\n          return;\n        }\n      }\n\n      // set header cell title\n      if (header) {\n        const updatedHeaderCellTitle = applyConfigProperty(header, {\n          params: [{ ...cellData }, { ...session }, { ...meta }]\n        });\n        if (updatedHeaderCellTitle) {\n          headerCellUpdated.title = updatedHeaderCellTitle;\n        } else if (_isPlainObject(header)) {\n          Object.assign(headerCellUpdated, { ...header });\n        }\n\n        // set header cell tooltip\n        if (header.tooltip && headerCellUpdated.title) {\n          const updatedHeaderCellTooltip = applyConfigProperty(header.tooltip, {\n            params: [{ ...cellData }, { ...session }, { ...meta }]\n          });\n          if (updatedHeaderCellTooltip) {\n            headerCellUpdated.title = <Tooltip content={updatedHeaderCellTooltip}>{headerCellUpdated.title}</Tooltip>;\n          }\n\n          delete headerCellUpdated.tooltip;\n        }\n      }\n\n      // set header cell transforms\n      if (Array.isArray(headerCellUpdated.transforms)) {\n        if (Array.isArray(transforms)) {\n          headerCellUpdated.transforms = headerCellUpdated.transforms.concat([...transforms]);\n        }\n\n        if (typeof cellWidth === 'number') {\n          headerCellUpdated.transforms.push(PfCellWidth(cellWidth));\n        }\n      }\n\n      // set header cell onSort\n      if (typeof onSort === 'function') {\n        headerCellUpdated.onSort = obj => onSort({ ...cellData }, { ...obj, id: sortId || id });\n        headerCellUpdated.sortActive = sortActive;\n        headerCellUpdated.sortDirection = sortDirection;\n      }\n\n      // set body cell title\n      if (cell) {\n        const updatedBodyCellTitle = applyConfigProperty(cell, {\n          params: [{ ...cellData }, { ...session }, { ...meta }]\n        });\n        if (updatedBodyCellTitle) {\n          bodyCellUpdated.title = updatedBodyCellTitle;\n        } else if (_isPlainObject(cell)) {\n          Object.assign(bodyCellUpdated, { ...cell });\n        }\n\n        // set body cell tooltip\n        if (cell.tooltip && bodyCellUpdated.title) {\n          const updatedBodyCellTooltip = applyConfigProperty(cell.tooltip, {\n            params: [{ ...cellData }, { ...session }, { ...meta }]\n          });\n          if (updatedBodyCellTooltip) {\n            bodyCellUpdated.title = <Tooltip content={updatedBodyCellTooltip}>{bodyCellUpdated.title}</Tooltip>;\n          }\n\n          delete bodyCellUpdated.tooltip;\n        }\n      }\n\n      headerCells.push(headerCellUpdated);\n      bodyCells.push(bodyCellUpdated);\n    }\n  );\n\n  return {\n    headerCells,\n    bodyCells\n  };\n};\n\n/**\n * Shallow clone filter, and apply a column sort filter.\n *\n * @param {object} params\n * @param {{onSort: Function, sortActive: boolean, sortDirection: string, isSortDefault: boolean,\n *     sortDefaultInitialDirection: string}} params.filter\n * @param {Function} params.onSort\n * @param {object} params.query\n * @returns {{}}\n */\nconst applySortFilters = ({ filter = {}, onSort, query = {} } = {}) => {\n  const { id, sortId } = filter;\n  const updatedId = sortId || id;\n  const updatedFilter = { ...filter };\n  const hasSort = updatedFilter.onSort || onSort;\n\n  if (!updatedFilter.onSort && onSort) {\n    updatedFilter.onSort = onSort;\n  }\n\n  // set fallback for the active sorted column based on query\n  if (\n    hasSort &&\n    typeof updatedFilter.sortActive !== 'boolean' &&\n    query?.[RHSM_API_QUERY_SET_TYPES.SORT] &&\n    (query?.[RHSM_API_QUERY_SET_TYPES.SORT] === updatedId ||\n      _camelCase(query?.[RHSM_API_QUERY_SET_TYPES.SORT]) === updatedId)\n  ) {\n    updatedFilter.sortActive = true;\n  }\n\n  // set sort direction\n  if (hasSort && !updatedFilter.sortDirection && query?.[RHSM_API_QUERY_SET_TYPES.DIRECTION]) {\n    switch (query?.[RHSM_API_QUERY_SET_TYPES.DIRECTION]) {\n      case SORT_DIRECTION_TYPES.DESCENDING:\n        updatedFilter.sortDirection = SortByDirection.desc;\n        break;\n      default:\n        updatedFilter.sortDirection = SortByDirection.asc;\n        break;\n    }\n  }\n\n  if (\n    hasSort &&\n    !updatedFilter.sortActive &&\n    !query?.[RHSM_API_QUERY_SET_TYPES.SORT] &&\n    updatedFilter.isSortDefault === true\n  ) {\n    updatedFilter.sortActive = true;\n\n    if (updatedFilter.sortDefaultInitialDirection) {\n      updatedFilter.sortDirection = updatedFilter.sortDefaultInitialDirection;\n    }\n  }\n\n  return updatedFilter;\n};\n\n/**\n * Shallow clone and apply a consistent PF \"wrappable\" transformation config allowing column content to wrap.\n *\n * @param {object} params\n * @param {object} params.filter\n * @returns {{}}\n */\nconst applyWrappableFilters = ({ filter = {} } = {}) => {\n  const updatedFilter = { ...filter };\n\n  if (Array.isArray(updatedFilter.transforms)) {\n    updatedFilter.transforms.push(wrappable);\n  } else {\n    updatedFilter.transforms = [wrappable];\n  }\n\n  return updatedFilter;\n};\n\n/**\n * Shallow clone and apply, sequence specific, additional properties to filters.\n *\n * @param {object} params\n * @param {Array<{id: string, cell:*, cellWidth: number, header:*, onSort: Function,\n *     showEmptyCell: boolean, sortId: string, sortActive: boolean,\n *     sortDirection: string, transforms: Array, isSortDefault: boolean,\n *     sortDefaultInitialDirection: string}>} params.filters\n * @param {Function} params.onSort\n * @param {object} params.query\n * @returns {Array}\n */\nconst parseInventoryFilters = ({ filters = [], onSort, query = {} } = {}) =>\n  [...filters].map(filter => {\n    const updatedFilter = { ...filter };\n\n    if (updatedFilter.isSortable) {\n      Object.assign(updatedFilter, applySortFilters({ filter: updatedFilter, onSort, query }));\n    }\n\n    if (updatedFilter.isWrappable) {\n      Object.assign(updatedFilter, applyWrappableFilters({ filter: updatedFilter }));\n    }\n\n    return updatedFilter;\n  });\n\n/**\n * Parse and return formatted/filtered table cells, and apply table filters.\n *\n * @param {object} params\n * @param {Array<{id: string, cell:(React.ReactNode|{ title: string }), cellWidth: number,\n *     header:(React.ReactNode|{ title: string }), onSort: Function, showEmptyCell: boolean,\n *     sortId: string, sortActive: boolean, sortDirection: string,\n *     transforms: Array}>} params.filters\n * @param {object} params.cellData\n * @param {object} params.meta\n * @param {string} params.productId\n * @param {object} params.session\n * @returns {{columnHeaders: Array<{ title: React.ReactNode }>, cells: Array<{ title: React.ReactNode }>, data: {}}}\n */\nconst parseRowCellsListData = ({ filters = [], cellData = {}, meta = {}, productId, session = {} } = {}) => {\n  const updatedColumnHeaders = [];\n  const updatedCells = [];\n  const allCells = {};\n\n  // Apply basic translation and value\n  Object.entries(cellData).forEach(([key, value = '']) => {\n    allCells[key] = {\n      title: translate('curiosity-inventory.header', { context: [key, productId] }),\n      value\n    };\n\n    updatedColumnHeaders.push(allCells[key].title);\n    updatedCells.push(value || '...');\n  });\n\n  // Apply filters to header and cell values\n  if (filters?.length && Object.keys(allCells).length) {\n    updatedColumnHeaders.length = 0;\n    updatedCells.length = 0;\n\n    const { headerCells = [], bodyCells = [] } = applyHeaderRowCellFilters({\n      filters,\n      cellData: allCells,\n      meta,\n      productId,\n      session\n    });\n\n    updatedColumnHeaders.push(...headerCells);\n    updatedCells.push(...bodyCells);\n  }\n\n  return {\n    columnHeaders: updatedColumnHeaders,\n    cells: updatedCells,\n    data: { ...allCells }\n  };\n};\n\nconst inventoryCardHelpers = {\n  applyConfigProperty,\n  applyHeaderRowCellFilters,\n  applySortFilters,\n  applyWrappableFilters,\n  parseInventoryFilters,\n  parseRowCellsListData\n};\n\nexport {\n  inventoryCardHelpers as default,\n  inventoryCardHelpers,\n  applyConfigProperty,\n  applyHeaderRowCellFilters,\n  applySortFilters,\n  applyWrappableFilters,\n  parseInventoryFilters,\n  parseRowCellsListData\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TableVariant } from '@patternfly/react-table';\nimport { useSession } from '../authentication/authenticationContext';\nimport { useProductInventoryGuestsConfig, useProductInventoryGuestsQuery } from '../productView/productViewContext';\nimport { Loader } from '../loader/loader';\nimport { inventoryCardHelpers } from '../inventoryCard/inventoryCardHelpers';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { Table } from '../table/table';\nimport { useGetGuestsInventory, useOnScroll } from './inventoryGuestsContext';\n\n/**\n * Guests inventory table wrapper.\n *\n * @memberof Components\n * @module InventoryGuests\n * @property {module} InventoryGuestsContext\n */\n\n/**\n * A system inventory guests component.\n *\n * @param {object} props\n * @param {number} props.defaultPerPage\n * @param {string} props.id\n * @param {number} props.numberOfGuests\n * @param {Function} props.useGetGuestsInventory\n * @param {Function} props.useOnScroll\n * @param {Function} props.useProductInventoryGuestsQuery\n * @param {Function} props.useProductInventoryGuestsConfig\n * @param {Function} props.useSession\n * @fires onScroll\n * @returns {React.ReactNode}\n */\nconst InventoryGuests = ({\n  defaultPerPage,\n  id,\n  numberOfGuests,\n  useGetGuestsInventory: useAliasGetGuestsInventory,\n  useOnScroll: useAliasOnScroll,\n  useProductInventoryGuestsQuery: useAliasProductInventoryGuestsQuery,\n  useProductInventoryGuestsConfig: useAliasProductInventoryGuestsConfig,\n  useSession: useAliasSession\n}) => {\n  const sessionData = useAliasSession();\n  const { filters: filterGuestsData } = useAliasProductInventoryGuestsConfig();\n  const { pending, data: listData = [] } = useAliasGetGuestsInventory(id);\n  const onScroll = useAliasOnScroll(id);\n  const query = useAliasProductInventoryGuestsQuery({ options: { overrideId: id } });\n  const { [RHSM_API_QUERY_SET_TYPES.OFFSET]: currentPage } = query;\n\n  /**\n   * Render a scroll table loader.\n   *\n   * @param {boolean} isFirstPage\n   * @returns {React.ReactNode}\n   */\n  const renderLoader = isFirstPage => {\n    if (pending) {\n      let updatedRowCount = 0;\n\n      if (isFirstPage) {\n        if (numberOfGuests < defaultPerPage) {\n          updatedRowCount = numberOfGuests;\n        } else {\n          updatedRowCount = defaultPerPage;\n        }\n      }\n\n      const scrollLoader = (\n        <Loader\n          variant=\"table\"\n          tableProps={{\n            borders: false,\n            className: (isFirstPage && 'curiosity-guests-list') || undefined,\n            colCount: filterGuestsData?.length || (listData?.[0] && Object.keys(listData[0]).length) || 1,\n            colWidth: (filterGuestsData?.length && filterGuestsData.map(({ cellWidth }) => cellWidth)) || [],\n            rowCount: updatedRowCount,\n            variant: TableVariant.compact\n          }}\n        />\n      );\n\n      return <div className=\"curiosity-table-scroll-loader__custom\">{scrollLoader}</div>;\n    }\n\n    return null;\n  };\n\n  let updatedColumnHeaders = [];\n  const updatedRows = listData.map(({ ...cellData }) => {\n    const { columnHeaders, cells } = inventoryCardHelpers.parseRowCellsListData({\n      filters: filterGuestsData,\n      cellData,\n      session: sessionData\n    });\n\n    updatedColumnHeaders = columnHeaders;\n\n    return {\n      cells\n    };\n  });\n\n  // ToDo: Review having the height be a calc value\n  // Include the table header\n  let updatedHeight = (numberOfGuests + 1) * 42;\n  updatedHeight = (updatedHeight < 275 && updatedHeight) || 275;\n\n  return (\n    <div className=\"fadein\">\n      <div className=\"curiosity-table-scroll\" style={{ height: `${updatedHeight}px` }}>\n        <div\n          className={`curiosity-table-scroll-list${(updatedHeight < 275 && '__no-scroll') || ''}`}\n          onScroll={onScroll}\n        >\n          {renderLoader(currentPage === 0)}\n          {(updatedRows.length && (\n            <Table\n              borders={false}\n              variant={TableVariant.compact}\n              className=\"curiosity-guests-list\"\n              columnHeaders={updatedColumnHeaders}\n              rows={updatedRows}\n            />\n          )) ||\n            null}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductInventoryGuestsConfig: Function, useSession: Function, numberOfGuests: number, id: string,\n *     useOnScroll: Function, useGetGuestsInventory: Function, useProductInventoryGuestsQuery: Function,\n *     defaultPerPage: number}}\n */\nInventoryGuests.propTypes = {\n  defaultPerPage: PropTypes.number,\n  id: PropTypes.string.isRequired,\n  numberOfGuests: PropTypes.number.isRequired,\n  useGetGuestsInventory: PropTypes.func,\n  useOnScroll: PropTypes.func,\n  useProductInventoryGuestsConfig: PropTypes.func,\n  useProductInventoryGuestsQuery: PropTypes.func,\n  useSession: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductInventoryGuestsConfig: Function, useSession: Function, useOnScroll: Function,\n *     useGetGuestsInventory: Function, useProductInventoryGuestsQuery: Function, defaultPerPage: number}}\n */\nInventoryGuests.defaultProps = {\n  defaultPerPage: 5,\n  useGetGuestsInventory,\n  useOnScroll,\n  useProductInventoryGuestsConfig,\n  useProductInventoryGuestsQuery,\n  useSession\n};\n\nexport { InventoryGuests as default, InventoryGuests };\n","import { useState } from 'react';\nimport { useDeepCompareEffect, useUnmount, useShallowCompareEffect } from 'react-use';\nimport { reduxActions, reduxTypes, storeHooks } from '../../redux';\nimport { useProductInventoryGuestsQuery } from '../productView/productViewContext';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\n\n/**\n * @memberof InventoryGuests\n * @module InventoryGuestsContext\n */\n\n/**\n * Guests inventory selector response.\n *\n * @param {string} id\n * @param {object} options\n * @param {Function} options.useSelectorsResponse\n * @returns {{data: (*|{}), pending: (*|boolean), fulfilled, error}}\n */\nconst useSelectorsGuestsInventory = (\n  id,\n  { useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse } = {}\n) => {\n  const { error, cancelled, fulfilled, pending, data } = useAliasSelectorsResponse(\n    ({ inventory }) => inventory?.instancesGuests?.[id]\n  );\n\n  return {\n    error,\n    fulfilled,\n    pending: pending || cancelled || false,\n    data: (data?.length === 1 && data[0]) || data || {}\n  };\n};\n\n/**\n * Combined Redux RHSM Actions, getInstancesInventoryGuests, and inventory selector response.\n *\n * @param {string} id\n * @param {object} options\n * @param {Function} options.getInventory\n * @param {Function} options.useDispatch\n * @param {Function} options.useProductInventoryQuery\n * @param {Function} options.useSelectorsInventory\n * @returns {Function}\n */\nconst useGetGuestsInventory = (\n  id,\n  {\n    getInventory = reduxActions.rhsm.getInstancesInventoryGuests,\n    useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n    useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventoryGuestsQuery,\n    useSelectorsInventory: useAliasSelectorsInventory = useSelectorsGuestsInventory\n  } = {}\n) => {\n  const [updatedData, setUpdatedData] = useState([]);\n  const query = useAliasProductInventoryQuery({ options: { overrideId: id } });\n  const dispatch = useAliasDispatch();\n  const { data = {}, fulfilled = false, ...response } = useAliasSelectorsInventory(id);\n  const { data: listData = [] } = data;\n\n  useShallowCompareEffect(() => {\n    getInventory(id, query)(dispatch);\n  }, [dispatch, id, query]);\n\n  useDeepCompareEffect(() => {\n    if (fulfilled) {\n      setUpdatedData(prevState => [...prevState, ...listData]);\n    }\n  }, [fulfilled, listData]);\n\n  return {\n    data: updatedData,\n    fulfilled,\n    ...response\n  };\n};\n\n/**\n * Use paging as onScroll event for guests inventory.\n *\n * @param {string} id\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useSelectorsInventory\n * @param {Function} options.useProductInventoryQuery\n * @returns {Function}\n */\nconst useOnScroll = (\n  id,\n  {\n    useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n    useSelectorsInventory: useAliasSelectorsInventory = useSelectorsGuestsInventory,\n    useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventoryGuestsQuery\n  } = {}\n) => {\n  const dispatch = useAliasDispatch();\n  const { pending, data = {} } = useAliasSelectorsInventory(id);\n  const { count: numberOfGuests } = data?.meta || {};\n\n  const query = useAliasProductInventoryQuery({ options: { overrideId: id } });\n  const { [RHSM_API_QUERY_SET_TYPES.LIMIT]: limit, [RHSM_API_QUERY_SET_TYPES.OFFSET]: currentPage } = query;\n\n  /**\n   * Reset paging in scenarios where inventory is filtered, or guests is collapsed.\n   */\n  useUnmount(() => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_GUESTS_LIST,\n        viewId: id\n      },\n      {\n        type: reduxTypes.inventory.CLEAR_INVENTORY_GUESTS,\n        id\n      }\n    ]);\n  });\n\n  /**\n   * On scroll, dispatch type.\n   *\n   * @event onScroll\n   * @param {object} event\n   * @returns {void}\n   */\n  return event => {\n    const { target } = event;\n    const bottom = target.scrollHeight - target.scrollTop === target.clientHeight;\n\n    if (numberOfGuests > currentPage + limit && bottom && !pending) {\n      dispatch([\n        {\n          type: reduxTypes.query.SET_QUERY_RHSM_GUESTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.OFFSET],\n          viewId: id,\n          [RHSM_API_QUERY_SET_TYPES.OFFSET]: currentPage + limit\n        },\n        {\n          type: reduxTypes.query.SET_QUERY_RHSM_GUESTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.LIMIT],\n          viewId: id,\n          [RHSM_API_QUERY_SET_TYPES.LIMIT]: limit\n        }\n      ]);\n    }\n  };\n};\n\nconst context = {\n  useGetGuestsInventory,\n  useOnScroll,\n  useSelectorsGuestsInventory\n};\n\nexport { context as default, context, useGetGuestsInventory, useOnScroll, useSelectorsGuestsInventory };\n","import { useRef } from 'react';\nimport useEffectOnce from './useEffectOnce';\nvar useUnmount = function (fn) {\n    var fnRef = useRef(fn);\n    // update the ref each render so if it change the newest callback will be invoked\n    fnRef.current = fn;\n    useEffectOnce(function () { return function () { return fnRef.current(); }; });\n};\nexport default useUnmount;\n","'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (key === '_owner' && a.$$typeof) {\n        // React-specific: avoid traversing React elements' _owner.\n        //  _owner contains circular references\n        // and is not needed when comparing the actual elements (and not their owners)\n        continue;\n      }\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n","import isDeepEqualReact from 'fast-deep-equal/react';\nexport default isDeepEqualReact;\n","import useCustomCompareEffect from './useCustomCompareEffect';\nimport isDeepEqual from './misc/isDeepEqual';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar useDeepCompareEffect = function (effect, deps) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useDeepCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useDeepCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n    }\n    useCustomCompareEffect(effect, deps, isDeepEqual);\n};\nexport default useDeepCompareEffect;\n"],"names":["applyConfigProperty","prop","params","arguments","length","undefined","updatedProp","Array","isArray","React","applyHeaderRowCellFilters","filters","cellData","meta","productId","session","headerCells","bodyCells","forEach","_ref","isStandalone","id","cell","cellWidth","header","onSort","showEmptyCell","sortId","sortActive","sortDirection","transforms","headerCellUpdated","title","translate","context","bodyCellUpdated","_cellData$id$title","_cellData$id","_cellData$id$value","_cellData$id2","value","helpers","console","warn","concat","updatedHeaderCellTitle","_isPlainObject","Object","assign","tooltip","updatedHeaderCellTooltip","Tooltip","content","push","PfCellWidth","obj","updatedBodyCellTitle","updatedBodyCellTooltip","applySortFilters","filter","query","updatedId","updatedFilter","hasSort","RHSM_API_QUERY_SET_TYPES","_camelCase","SORT_DIRECTION_TYPES","SortByDirection","isSortDefault","sortDefaultInitialDirection","applyWrappableFilters","wrappable","parseInventoryFilters","map","isSortable","isWrappable","parseRowCellsListData","updatedColumnHeaders","updatedCells","allCells","entries","_ref2","key","keys","columnHeaders","cells","data","inventoryCardHelpers","InventoryGuests","defaultPerPage","numberOfGuests","useGetGuestsInventory","useAliasGetGuestsInventory","useOnScroll","useAliasOnScroll","useProductInventoryGuestsQuery","useAliasProductInventoryGuestsQuery","useProductInventoryGuestsConfig","useAliasProductInventoryGuestsConfig","useSession","useAliasSession","sessionData","filterGuestsData","pending","listData","onScroll","options","overrideId","currentPage","updatedRows","_ref3","updatedHeight","className","style","height","isFirstPage","updatedRowCount","scrollLoader","Loader","variant","tableProps","borders","colCount","colWidth","rowCount","TableVariant","renderLoader","Table","rows","propTypes","PropTypes","defaultProps","useSelectorsGuestsInventory","useSelectorsResponse","useAliasSelectorsResponse","storeHooks","error","cancelled","fulfilled","_inventory$instancesG","inventory","instancesGuests","getInventory","reduxActions","useDispatch","useAliasDispatch","useProductInventoryQuery","useAliasProductInventoryQuery","useSelectorsInventory","useAliasSelectorsInventory","updatedData","setUpdatedData","useState","dispatch","response","useShallowCompareEffect","useDeepCompareEffect","prevState","count","limit","fn","type","reduxTypes","viewId","fnRef","useRef","current","useEffectOnce","event","target","bottom","scrollHeight","scrollTop","clientHeight","module","exports","equal","a","b","constructor","i","RegExp","source","flags","valueOf","prototype","toString","hasOwnProperty","call","$$typeof","effect","deps","useCustomCompareEffect","isDeepEqual"],"sourceRoot":""}