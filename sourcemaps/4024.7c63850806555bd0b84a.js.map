{"version":3,"file":"js/4024.1fe3f25a027f77e5e7f1.js","mappings":"2OAgBMA,EAAwB,SAAC,GAA4C,IAA1CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,YAAaC,EAAsB,EAAtBA,aAAcC,EAAQ,EAARA,EAC7DC,EAAS,KACPC,EAAO,GAF4D,GAG7CL,GAAS,IAA7BM,WAAAA,OAHiE,MAGpD,GAHoD,EA8CzE,OAzCAC,OAAOC,KAAKF,GACTG,UACAC,SAAQ,SAACC,EAAKC,GAAU,UACN,EAAH,IAAVA,IACFR,GAASS,EAAAA,EAAAA,gBAAe,CACtBC,KAAI,UAAER,EAAWK,UAAb,aAAE,EAAiBN,KAAKS,KAC5Bb,YAAAA,KAIJ,IAAMc,EAAgB,CACpBC,MAAK,UAAEV,EAAWK,UAAb,aAAE,EAAiBK,OAG1B,GAAmC,eAA/B,UAAAV,EAAWK,UAAX,eAAiBM,WAA2B,WAC1CC,EAAoB,oBAAGZ,EAAWK,UAAd,aAAG,EAAiBN,KAAKc,SAAzB,QAA8BhB,EAAE,gCAExD,UAAIG,EAAWK,UAAf,aAAI,EAAiBN,KAAKe,eAEtBF,EADEH,EAAcC,MAEd,kBAAC,EAAAK,UAAD,CAAWC,OAAO,WAAWC,KAAK,UAAUC,MAAOrB,EAAE,4CAGhCA,EAAE,2CAI7BY,EAAcU,MAAQtB,EAAE,wBAAyB,CAAEuB,QAAS,cAC5DX,EAAcY,MAAQT,MACjB,SACCU,GAC+B,KAAlC,UAAAtB,EAAWK,UAAX,eAAiBN,KAAKwB,UAAqB1B,EAAE,iCAA9C,UAAiFG,EAAWK,UAA5F,aAAiF,EAAiBN,KAAKc,IAAK,EAE9GJ,EAAcU,MAAQtB,EAAE,mBAAD,OAAoBQ,EAApB,SAAgC,CAAEmB,QAAS5B,IAClEa,EAAcY,MAAQC,EAGxBb,EAAcE,UAAd,UAA0BX,EAAWK,UAArC,aAA0B,EAAiBM,UAC3CZ,EAAK0B,KAAKhB,MAIZ,yBAAKiB,UAAU,kCACb,2BAAOC,QAAS9B,EAAE,mCACdE,EAAK6B,QAAU9B,GACf,+BACE,4BACE,wBAAI+B,QAAS,GAAI/B,MAIrB,KACAC,EAAK6B,QACL,+BACG7B,EAAK+B,KAAI,SAAAC,GAAS,OACjB,wBAAI1B,IAAG,kBAAa0B,EAAUZ,QAC5B,4BAC2B,cAAxBY,EAAUpB,WACT,kBAAC,EAAAI,UAAD,CAAWiB,KAAK,KAAKhB,OAAO,OAAOC,KAAMc,EAAUrB,OAAS,gBAErC,cAAxBqB,EAAUpB,WACT,kBAAC,EAAAI,UAAD,CAAWiB,KAAK,KAAKf,KAAMc,EAAUrB,OAAS,gBAC7C,IACFqB,EAAUZ,OAEb,4BAAKY,EAAUV,aAKrB,OAEDtB,EAAK6B,QAAU/B,EAAE,qCAAwC,OAmClEJ,EAAsBwC,aAAe,CACnCvC,MAAO,GACPE,aAAc,GACdC,EAAGqC,EAAAA","sources":["webpack:///./src/components/graphCard/graphCardChartTooltip.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getTooltipDate } from './graphCardHelpers';\nimport { translate } from '../i18n/i18n';\nimport { ChartIcon } from '../chart/chartIcon';\n\n/**\n * A custom chart tooltip.\n *\n * @param {object} props\n * @param {object} props.datum\n * @param {string} props.granularity\n * @param {string} props.productLabel\n * @param {Function} props.t\n * @returns {Node}\n */\nconst GraphCardChartTooltip = ({ datum, granularity, productLabel, t }) => {\n  let header = null;\n  const data = [];\n  const { itemsByKey = {} } = datum || {};\n\n  Object.keys(itemsByKey)\n    .reverse()\n    .forEach((key, index) => {\n      if (index === 0) {\n        header = getTooltipDate({\n          date: itemsByKey[key]?.data.date,\n          granularity\n        });\n      }\n\n      const tempDataFacet = {\n        color: itemsByKey[key]?.color\n      };\n\n      if (itemsByKey[key]?.chartType === 'threshold') {\n        let thresholdStringValue = itemsByKey[key]?.data.y ?? t('curiosity-graph.noDataLabel');\n\n        if (itemsByKey[key]?.data.hasInfinite) {\n          if (tempDataFacet.color) {\n            thresholdStringValue = (\n              <ChartIcon symbol=\"infinity\" fill=\"#ffffff\" title={t('curiosity-graph.infiniteThresholdLabel')} />\n            );\n          } else {\n            thresholdStringValue = t('curiosity-graph.infiniteThresholdLabel');\n          }\n        }\n\n        tempDataFacet.label = t('curiosity-graph.label', { context: 'threshold' });\n        tempDataFacet.value = thresholdStringValue;\n      } else {\n        const dataFactsValue =\n          (itemsByKey[key]?.data.hasData === false && t('curiosity-graph.noDataLabel')) || itemsByKey[key]?.data.y || 0;\n\n        tempDataFacet.label = t(`curiosity-graph.${key}Label`, { product: productLabel });\n        tempDataFacet.value = dataFactsValue;\n      }\n\n      tempDataFacet.chartType = itemsByKey[key]?.chartType;\n      data.push(tempDataFacet);\n    });\n\n  return (\n    <div className=\"curiosity-usage-graph__tooltip\">\n      <table summary={t('curiosity-graph.tooltipSummary')}>\n        {(data.length && header && (\n          <thead>\n            <tr>\n              <th colSpan={2}>{header}</th>\n            </tr>\n          </thead>\n        )) ||\n          null}\n        {(data.length && (\n          <tbody>\n            {data.map(dataFacet => (\n              <tr key={`tooltip-${dataFacet.label}`}>\n                <th>\n                  {dataFacet.chartType === 'threshold' && (\n                    <ChartIcon size=\"sm\" symbol=\"dash\" fill={dataFacet.color || 'transparent'} />\n                  )}\n                  {dataFacet.chartType !== 'threshold' && (\n                    <ChartIcon size=\"sm\" fill={dataFacet.color || 'transparent'} />\n                  )}{' '}\n                  {dataFacet.label}\n                </th>\n                <td>{dataFacet.value}</td>\n              </tr>\n            ))}\n          </tbody>\n        )) ||\n          null}\n      </table>\n      {(!data.length && t('curiosity-graph.noDataErrorLabel')) || null}\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum, productLabel: string, t: Function, granularity: string}}\n */\nGraphCardChartTooltip.propTypes = {\n  datum: PropTypes.shape({\n    itemsByKey: PropTypes.objectOf(\n      PropTypes.shape({\n        chartType: PropTypes.string,\n        color: PropTypes.string,\n        data: PropTypes.shape({\n          date: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),\n          hasData: PropTypes.bool,\n          hasInfinite: PropTypes.bool,\n          y: PropTypes.number\n        })\n      })\n    )\n  }),\n  granularity: PropTypes.string.isRequired,\n  productLabel: PropTypes.string,\n  t: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: object, productLabel: string, t: translate}}\n */\nGraphCardChartTooltip.defaultProps = {\n  datum: {},\n  productLabel: '',\n  t: translate\n};\n\nexport { GraphCardChartTooltip as default, GraphCardChartTooltip };\n"],"names":["GraphCardChartTooltip","datum","granularity","productLabel","t","header","data","itemsByKey","Object","keys","reverse","forEach","key","index","getTooltipDate","date","tempDataFacet","color","chartType","thresholdStringValue","y","hasInfinite","ChartIcon","symbol","fill","title","label","context","value","dataFactsValue","hasData","product","push","className","summary","length","colSpan","map","dataFacet","size","defaultProps","translate"],"sourceRoot":""}