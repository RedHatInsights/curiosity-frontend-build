{"version":3,"file":"js/9407.1668012320183.3055cd403684971ee96e.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardContext.js","webpack:///./src/components/graphCard/graphCardMetricTotals.js","webpack:///./src/components/minHeight/minHeight.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Chart context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{ settings: { isStandalone: false, metrics: [], metric: undefined } }, helpers.noop];\n\nconst GraphCardContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated graph card context.\n *\n * @returns {React.Context<{}>}\n */\nconst useGraphCardContext = () => useContext(GraphCardContext);\n\n/**\n * Use Redux RHSM Actions, getGraphTally.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProductGraphTallyQuery\n * @returns {Function}\n */\nconst useGetGraphTally = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery\n} = {}) => {\n  const query = useAliasProductGraphTallyQuery();\n  const dispatch = useAliasDispatch();\n\n  return metrics => reduxActions.rhsm.getGraphTally(metrics, query)(dispatch);\n};\n\n/**\n * Get multiple metrics from store.\n *\n * @param {object} options\n * @param {Function} options.useGraphCardContext\n * @param {Function} options.useSelectors\n * @param {Function} options.useProduct\n * @returns {{data: object, pending: boolean, fulfilled: boolean, dataSets: Array, error: boolean}}\n */\nconst useMetricsSelector = ({\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useSelectors: useAliasSelectors = storeHooks.reactRedux.useSelectors,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n  const data = {};\n\n  const metricResponses = useAliasSelectors(\n    metrics.map(\n      ({ id: metricId }) =>\n        ({ graph }) =>\n          graph.tally?.[`${productId}_${metricId}`]\n    ),\n    []\n  );\n\n  let isPending = false;\n  let isFulfilled = false;\n  let errorCount = 0;\n\n  const dataSets = metricResponses.map((metric, index) => {\n    const { pending, fulfilled, error, cancelled } = metric || {};\n    const updatedPending = pending || cancelled || false;\n\n    if (updatedPending) {\n      isPending = true;\n    }\n\n    if (fulfilled) {\n      isFulfilled = true;\n    }\n\n    if (error) {\n      errorCount += 1;\n    }\n\n    const updatedMetric = {\n      ...metrics[index],\n      data: metric?.data?.data || [],\n      meta: metric?.data?.meta || {}\n    };\n    data[metrics[index].id] = updatedMetric;\n\n    return updatedMetric;\n  });\n\n  const response = {\n    data,\n    dataSets,\n    error: false,\n    fulfilled: false,\n    pending: false\n  };\n\n  if (errorCount === dataSets.length) {\n    response.error = true;\n  } else if (isPending) {\n    response.pending = true;\n  } else if (isFulfilled) {\n    response.fulfilled = true;\n  }\n\n  return response;\n};\n\nconst context = {\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetGraphTally,\n  useGraphCardContext,\n  useMetricsSelector\n};\n\nexport {\n  context as default,\n  context,\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetGraphTally,\n  useGraphCardContext,\n  useMetricsSelector\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter, CardTitle, Flex, FlexItem } from '@patternfly/react-core';\nimport moment from 'moment';\nimport _camelCase from 'lodash/camelCase';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useMetricsSelector } from './graphCardContext';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { Loader, SkeletonSize } from '../loader/loader';\nimport { dateHelpers, helpers } from '../../common';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldRangedMonthly';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Display totals for a single metric.\n *\n * @param {object} props\n * @param {Node} props.children\n * @param {Function} props.t\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardMetricTotals = ({\n  children,\n  t,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate } = useAliasProductGraphTallyQuery();\n  const { pending, error, fulfilled, dataSets = [] } = useAliasMetricsSelector();\n  const { data = [], id: metricId, meta = {} } = dataSets[0] || {};\n  const { date: lastDate, hasData: lastHasData, y: lastValue } = data[data.length - 1] || {};\n  const {\n    date: currentDate,\n    hasData: currentHasData,\n    y: currentValue\n  } = data.find(({ isCurrentDate }) => isCurrentDate === true) || {};\n\n  const { totalMonthlyDate: monthlyDate, totalMonthlyHasData: monthlyHasData, totalMonthlyValue: monthlyValue } = meta;\n\n  const { title: selectedMonth, isCurrent } =\n    toolbarFieldOptions.find(\n      option => option.title === startDate || option.value.startDate.toISOString() === startDate\n    ) || {};\n\n  const dailyDate = isCurrent ? currentDate : lastDate;\n  const dailyHasData = isCurrent ? currentHasData : lastHasData;\n  const dailyValue = isCurrent ? currentValue : lastValue;\n\n  return (\n    <Flex data-test={`graphMetricTotals-${_camelCase(metricId)}`} className=\"curiosity-usage-graph__totals\">\n      <Flex flex={{ default: 'flex_1' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-column\">\n          <Card\n            data-test=\"graphDailyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric_dailyTotal', {\n                context: metricId,\n                month: selectedMonth\n              })}\n            </CardTitle>\n            <MinHeight key=\"currentBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric_total',\n                      {\n                        context: (dailyHasData && metricId) || '',\n                        total: helpers\n                          .numberDisplay(dailyValue)\n                          ?.format({\n                            average: true,\n                            mantissa: 5,\n                            trimMantissa: true,\n                            lowPrecision: false\n                          })\n                          ?.toUpperCase()\n                      },\n                      [<strong title={dailyValue} aria-label={dailyValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"currentFooter\">\n              <CardFooter>\n                <div className={(!dailyHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    dailyDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(dailyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n          <Card\n            data-test=\"graphMonthlyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric_monthlyTotal', {\n                context: metricId,\n                month: selectedMonth\n              })}\n            </CardTitle>\n            <MinHeight key=\"totalMonthlyBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric_total',\n                      {\n                        context: (monthlyHasData && metricId) || '',\n                        total: helpers\n                          .numberDisplay(monthlyValue)\n                          ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: false })\n                          ?.toUpperCase()\n                      },\n                      [<strong title={monthlyValue} aria-label={monthlyValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"totalMonthlyFooter\">\n              <CardFooter>\n                <div className={(!monthlyHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    monthlyDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(monthlyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n        </FlexItem>\n      </Flex>\n      <Flex flex={{ default: 'flex_3' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-graph-column\">{children}</FlexItem>\n      </Flex>\n    </Flex>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.propTypes = {\n  children: PropTypes.node,\n  t: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.defaultProps = {\n  children: null,\n  t: translate,\n  useMetricsSelector,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardMetricTotals as default, GraphCardMetricTotals };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { helpers } from '../../common';\n\n/**\n * Set a min-height to prevent page jump component.\n *\n * @augments React.Component\n * @fires onResizeContainer\n */\nclass MinHeight extends React.Component {\n  containerRef = React.createRef();\n\n  innerContainerRef = React.createRef();\n\n  updatedContainerWidth = 0;\n\n  resizeObserver = helpers.noop;\n\n  componentDidMount() {\n    const { updateOnResize } = this.props;\n    window.setTimeout(() => {\n      this.setMinHeight();\n    });\n\n    if (updateOnResize) {\n      this.setResizeObserver();\n    }\n  }\n\n  componentDidUpdate() {\n    const { updateOnContent } = this.props;\n\n    if (updateOnContent) {\n      window.setTimeout(() => {\n        this.setMinHeight();\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.resizeObserver();\n  }\n\n  /**\n   * On resize adjust graph display.\n   *\n   * @event onResizeContainer\n   */\n  onResizeContainer = () => {\n    const { updatedContainerWidth } = this;\n    const { updateOnResize } = this.props;\n    const clientWidth = this.containerRef?.current?.clientWidth || 0;\n\n    if (updateOnResize && clientWidth !== updatedContainerWidth) {\n      this.updatedContainerWidth = clientWidth;\n      this.setMinHeight(true);\n    }\n  };\n\n  /**\n   * Set minHeight on mount or update.\n   *\n   * @param {boolean} reset\n   */\n  setMinHeight(reset = false) {\n    const { minHeight: overrideMinHeight } = this.props;\n    const { current: domElement = {} } = this.containerRef;\n    const { current: innerDomElement = {} } = this.innerContainerRef;\n\n    if (domElement?.style) {\n      let clientHeight;\n\n      if (reset) {\n        clientHeight = innerDomElement?.clientHeight || 0;\n      } else {\n        clientHeight = domElement?.clientHeight || 0;\n      }\n\n      if (overrideMinHeight > clientHeight) {\n        clientHeight = overrideMinHeight;\n      }\n\n      domElement.style.minHeight = `${clientHeight}px`;\n    }\n  }\n\n  /**\n   * Set ResizeObserver for scenarios when min-height needs to be updated.\n   */\n  setResizeObserver() {\n    window.addEventListener('resize', this.onResizeContainer);\n    this.resizeObserver = () => window.removeEventListener('resize', this.onResizeContainer);\n  }\n\n  /**\n   * Render a min-height div with children.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { children } = this.props;\n\n    return (\n      <div className=\"curiosity-minheight\" ref={this.containerRef}>\n        <div ref={this.innerContainerRef}>{children}</div>\n      </div>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{minHeight: number, children: Node, updateOnContent: boolean, updateOnResize: boolean}}\n */\nMinHeight.propTypes = {\n  updateOnContent: PropTypes.bool,\n  updateOnResize: PropTypes.bool,\n  children: PropTypes.node.isRequired,\n  minHeight: PropTypes.number\n};\n\n/**\n * Default props.\n *\n * @type {{minHeight: number, updateOnContent: boolean, updateOnResize: boolean}}\n */\nMinHeight.defaultProps = {\n  updateOnContent: false,\n  updateOnResize: true,\n  minHeight: 0\n};\n\nexport { MinHeight as default, MinHeight };\n"],"names":["DEFAULT_CONTEXT","settings","isStandalone","metrics","metric","undefined","helpers","GraphCardContext","React","useGraphCardContext","useContext","useGetGraphTally","useDispatch","useAliasDispatch","storeHooks","useProductGraphTallyQuery","useAliasProductGraphTallyQuery","query","dispatch","reduxActions","useMetricsSelector","useAliasGraphCardContext","useSelectors","useAliasSelectors","useProduct","useAliasProduct","productId","data","metricResponses","map","metricId","id","graph","tally","isPending","isFulfilled","errorCount","dataSets","index","pending","fulfilled","error","cancelled","updatedMetric","meta","response","length","context","GraphCardMetricTotals","children","t","useAliasMetricsSelector","startDate","RHSM_API_QUERY_SET_TYPES","lastDate","date","lastHasData","hasData","lastValue","y","find","isCurrentDate","currentDate","currentHasData","currentValue","monthlyDate","totalMonthlyDate","monthlyHasData","totalMonthlyHasData","monthlyValue","totalMonthlyValue","toolbarFieldOptions","option","title","value","toISOString","selectedMonth","isCurrent","dailyDate","dailyHasData","dailyValue","Flex","_camelCase","className","flex","default","direction","alignSelf","FlexItem","Card","CardTitle","month","MinHeight","key","CardBody","Loader","variant","skeletonProps","size","SkeletonSize","total","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","CardFooter","moment","dateHelpers","defaultProps","translate","containerRef","innerContainerRef","updatedContainerWidth","resizeObserver","onResizeContainer","updateOnResize","props","clientWidth","current","setMinHeight","this","window","setTimeout","setResizeObserver","updateOnContent","clientHeight","reset","overrideMinHeight","minHeight","domElement","innerDomElement","style","addEventListener","removeEventListener","ref"],"sourceRoot":""}