{"version":3,"file":"js/4418.1670431853948.6a8e7031e202f1445c9d.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardChartLegend.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { useMount } from 'react-use';\nimport { useProduct, useProductGraphConfig } from '../productView/productViewContext';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { ChartIcon } from '../chart/chartIcon';\n\n/**\n * FixMe: PF button disabled borks events on immediate parent nodes, such as tooltip wrappers\n * PF is using \"pointer-events: none\" styling when disabled is activated. This\n * currently affects events on immediate parent nodes.\n */\n/**\n * A custom chart legend.\n *\n * @fires onClick\n * @param {object} props\n * @param {object} props.chart\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useDispatch\n * @param {Function} props.useProduct\n * @param {Function} props.useProductGraphConfig\n * @param {Function} props.useSelectors\n * @returns {Node}\n */\nconst GraphCardChartLegend = ({\n  chart,\n  datum,\n  t,\n  useDispatch: useAliasDispatch,\n  useProductGraphConfig: useAliasProductGraphConfig,\n  useSelectors: useAliasSelectors,\n  useProduct: useAliasProduct\n}) => {\n  const { productLabel, viewId } = useAliasProduct();\n  const { settings = {} } = useAliasProductGraphConfig();\n  const { isDisabledLegendClick } = settings;\n\n  const dispatch = useAliasDispatch();\n  const [invertedLegendItem, ...legendItems] = useAliasSelectors([\n    ({ graph }) => graph.legend?.[`${viewId}-inverted`],\n    ...datum.dataSets.map(\n      ({ id }) =>\n        ({ graph }) =>\n          graph.legend?.[`${viewId}-${id}`]\n    )\n  ]);\n\n  useMount(() => {\n    datum.dataSets.forEach(({ id, isToolbarFilter }, index) => {\n      if (invertedLegendItem && isToolbarFilter) {\n        if (!new RegExp(invertedLegendItem).test(id)) {\n          chart.hide(id);\n        }\n      } else {\n        const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n\n        if (checkIsToggled) {\n          chart.hide(id);\n        }\n      }\n    });\n  });\n\n  /**\n   * Toggle legend item and chart.\n   *\n   * @event onClick\n   * @param {string} id\n   */\n  const onClick = id => {\n    const updatedToggle = chart.toggle(id);\n\n    dispatch({\n      type: reduxTypes.graph.SET_GRAPH_LEGEND,\n      id: `${viewId}-${id}`,\n      value: updatedToggle\n    });\n  };\n\n  return (\n    <React.Fragment>\n      {datum.dataSets.map(({ id, isThreshold, stroke: color, data = [] }, index) => {\n        const isDisabled =\n          !data.find(({ y, hasData }) => (y >= 0 && hasData === true) || (y >= 0 && isThreshold === true)) || false;\n\n        const labelContent = t([`curiosity-graph.label`, 'curiosity-graph.label_no'], {\n          product: productLabel,\n          context: id\n        });\n\n        const tooltipContent = t(\n          `curiosity-graph.legendTooltip`,\n          {\n            product: productLabel,\n            context: id\n          },\n          [<span style={{ whiteSpace: 'nowrap' }} />]\n        );\n\n        const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n        const buttonActionProps = {};\n\n        if (!isDisabledLegendClick) {\n          buttonActionProps.onClick = () => onClick(id);\n          buttonActionProps.onKeyPress = () => onClick(id);\n        }\n\n        const button = (\n          <Button\n            {...buttonActionProps}\n            className=\"curiosity-usage-graph__legend-item\"\n            tabIndex={0}\n            key={`curiosity-button-${id}`}\n            variant=\"link\"\n            component=\"a\"\n            isDisabled={isDisabledLegendClick ?? isDisabled}\n            icon={\n              ((isDisabled || checkIsToggled) && <ChartIcon symbol=\"eyeSlash\" />) || (\n                <ChartIcon\n                  symbol={(isThreshold && 'dash') || 'square'}\n                  style={{ visibility: (isDisabled && 'hidden') || (checkIsToggled && 'hidden') || 'visible' }}\n                  fill={color}\n                />\n              )\n            }\n          >\n            {labelContent}\n          </Button>\n        );\n\n        if (tooltipContent) {\n          return (\n            <Tooltip\n              key={`curiosity-tooltip-${id}`}\n              content={<p>{tooltipContent}</p>}\n              position={TooltipPosition.top}\n              enableFlip\n              distance={5}\n            >\n              <span className=\"pf-c-button pf-m-link\">{button}</span>\n            </Tooltip>\n          );\n        }\n\n        return button;\n      })}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, t: Function, useProductGraphConfig: Function, useDispatch: Function,\n *     useSelectors: Function, chart: object}}\n */\nGraphCardChartLegend.propTypes = {\n  chart: PropTypes.shape({\n    hide: PropTypes.func,\n    toggle: PropTypes.func,\n    isToggled: PropTypes.func\n  }),\n  datum: PropTypes.shape({\n    dataSets: PropTypes.arrayOf(\n      PropTypes.shape({\n        data: PropTypes.array,\n        id: PropTypes.string.isRequired,\n        isThreshold: PropTypes.bool,\n        stroke: PropTypes.string.isRequired\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useDispatch: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductGraphConfig: PropTypes.func,\n  useSelectors: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: {dataSets: *[]}, useProduct: Function, t: Function, useProductGraphConfig: Function, useDispatch: Function,\n *     useSelectors: Function, chart: {hide: Function, toggle: Function, isToggled: Function}}}\n */\nGraphCardChartLegend.defaultProps = {\n  chart: {\n    hide: helpers.noop,\n    toggle: helpers.noop,\n    isToggled: helpers.noop\n  },\n  datum: {\n    dataSets: []\n  },\n  t: translate,\n  useDispatch: storeHooks.reactRedux.useDispatch,\n  useProduct,\n  useProductGraphConfig,\n  useSelectors: storeHooks.reactRedux.useSelectors\n};\n\nexport { GraphCardChartLegend as default, GraphCardChartLegend };\n"],"names":["GraphCardChartLegend","chart","datum","t","useAliasDispatch","useDispatch","useAliasProductGraphConfig","useProductGraphConfig","useAliasSelectors","useSelectors","useAliasProduct","useProduct","productLabel","viewId","settings","isDisabledLegendClick","dispatch","graph","legend","dataSets","map","id","invertedLegendItem","legendItems","useMount","forEach","index","isToolbarFilter","RegExp","test","hide","isToggled","onClick","updatedToggle","toggle","type","reduxTypes","value","isThreshold","color","stroke","data","isDisabled","find","y","hasData","labelContent","product","context","tooltipContent","style","whiteSpace","checkIsToggled","buttonActionProps","onKeyPress","button","Button","className","tabIndex","key","variant","component","icon","ChartIcon","symbol","visibility","fill","Tooltip","content","position","TooltipPosition","enableFlip","distance","defaultProps","helpers","translate","storeHooks"],"sourceRoot":""}