{"version":3,"file":"js/2243.1643662791925.2ffec8357d21e0fda301.js","mappings":"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","sources":["webpack:///./src/components/inventoryCard/inventoryCardHelpers.js"],"sourcesContent":["import React from 'react';\nimport { cellWidth as PfCellWidth, SortByDirection, wrappable } from '@patternfly/react-table';\nimport _camelCase from 'lodash/camelCase';\nimport { translate } from '../i18n/i18n';\nimport {\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_TYPES\n} from '../../types/rhsmApiTypes';\nimport { helpers } from '../../common';\n\n/**\n * Apply sort filter to filters.\n *\n * @param {object} params\n * @param {{ onSort: Function, sortActive: boolean, sortDirection: string, isSortDefault: boolean,\n *     sortDefaultInitialDirection: string }} params.filter\n * @param {Function} params.onSort\n * @param {object} params.query\n * @returns {object}\n */\nconst applySortFilters = ({ filter = {}, onSort, query = {} }) => {\n  const { id, sortId } = filter;\n  const updatedId = sortId || id;\n  const updatedFilter = { ...filter };\n  const hasSort = updatedFilter.onSort || onSort;\n\n  if (!updatedFilter.onSort && onSort) {\n    updatedFilter.onSort = onSort;\n  }\n\n  // set fallback for the active sorted column based on query\n  if (\n    hasSort &&\n    typeof updatedFilter.sortActive !== 'boolean' &&\n    query?.[RHSM_API_QUERY_TYPES.SORT] &&\n    (query?.[RHSM_API_QUERY_TYPES.SORT] === updatedId || _camelCase(query?.[RHSM_API_QUERY_TYPES.SORT]) === updatedId)\n  ) {\n    updatedFilter.sortActive = true;\n  }\n\n  // set sort direction\n  if (hasSort && !updatedFilter.sortDirection && query?.[RHSM_API_QUERY_TYPES.DIRECTION]) {\n    switch (query?.[RHSM_API_QUERY_TYPES.DIRECTION]) {\n      case SORT_DIRECTION_TYPES.DESCENDING:\n        updatedFilter.sortDirection = SortByDirection.desc;\n        break;\n      default:\n        updatedFilter.sortDirection = SortByDirection.asc;\n        break;\n    }\n  }\n\n  if (\n    hasSort &&\n    !updatedFilter.sortActive &&\n    !query?.[RHSM_API_QUERY_TYPES.SORT] &&\n    updatedFilter.isSortDefault === true\n  ) {\n    updatedFilter.sortActive = true;\n\n    if (updatedFilter.sortDefaultInitialDirection) {\n      updatedFilter.sortDirection = updatedFilter.sortDefaultInitialDirection;\n    }\n  }\n\n  return updatedFilter;\n};\n\nconst applyWrappableFilters = ({ filter = {} }) => {\n  const updatedFilter = { ...filter };\n\n  if (Array.isArray(updatedFilter.transforms)) {\n    updatedFilter.transforms.push(wrappable);\n  } else {\n    updatedFilter.transforms = [wrappable];\n  }\n\n  return updatedFilter;\n};\n\n/**\n * Apply additional properties to filters.\n *\n * @param {object} params\n * @param {Array} params.filters\n * @param {Function} params.onSort\n * @param {object} params.query\n * @returns {Array}\n */\nconst parseInventoryFilters = ({ filters = [], onSort, query = {} }) =>\n  [...filters].map(filter => {\n    const updatedFilter = { ...filter };\n\n    if (updatedFilter.isSortable) {\n      Object.assign(updatedFilter, applySortFilters({ filter: updatedFilter, onSort, query }));\n    }\n\n    if (updatedFilter.isWrappable) {\n      Object.assign(updatedFilter, applyWrappableFilters({ filter: updatedFilter }));\n    }\n\n    return updatedFilter;\n  });\n\n/**\n * Parse and return formatted/filtered table cells, and apply table filters.\n *\n * @param {object} params\n * @param {Array} params.filters\n * @param {object} params.cellData\n * @param {object} params.session\n * @returns {{columnHeaders: Array, cells: Array, data: object}}\n */\nconst parseRowCellsListData = ({ filters = [], cellData = {}, session = {} }) => {\n  const updatedColumnHeaders = [];\n  const updatedCells = [];\n  const allCells = {};\n\n  // Apply basic translation and value\n  Object.entries(cellData).forEach(([key, value]) => {\n    allCells[key] = {\n      title: translate('curiosity-inventory.header', { context: key }),\n      value\n    };\n\n    updatedColumnHeaders.push(allCells[key].title);\n    updatedCells.push(value);\n  });\n\n  // Apply filters to header and cell values\n  if (filters?.length) {\n    updatedColumnHeaders.length = 0;\n    updatedCells.length = 0;\n\n    filters.forEach(({ id, cell, cellWidth, header, onSort, sortId, sortActive, sortDirection, transforms }) => {\n      let headerUpdated;\n      let cellUpdated;\n\n      if (allCells[id]) {\n        headerUpdated = allCells[id]?.title ?? id;\n        cellUpdated = allCells[id]?.value ?? '';\n      } else if (id) {\n        headerUpdated = translate('curiosity-inventory.header', { context: id });\n        cellUpdated = '';\n      }\n\n      // set table header cell filter params\n      if (header) {\n        headerUpdated = (typeof header === 'function' && header({ ...allCells })) || header;\n      }\n\n      if (\n        typeof headerUpdated === 'string' ||\n        typeof headerUpdated === 'number' ||\n        React.isValidElement(headerUpdated)\n      ) {\n        headerUpdated = {\n          title: headerUpdated\n        };\n      }\n\n      if (headerUpdated) {\n        headerUpdated.transforms = [];\n\n        if (Array.isArray(transforms)) {\n          headerUpdated.transforms = headerUpdated.transforms.concat([...transforms]);\n        }\n\n        if (typeof cellWidth === 'number') {\n          headerUpdated.transforms.push(PfCellWidth(cellWidth));\n        }\n      }\n\n      if (typeof onSort === 'function') {\n        headerUpdated = {\n          ...headerUpdated,\n          onSort: obj => onSort({ ...allCells }, { ...obj, id: sortId || id }),\n          sortActive,\n          sortDirection\n        };\n      }\n\n      // set table row cell filter params\n      if (cell) {\n        cellUpdated = typeof cell === 'function' ? cell({ ...allCells }, { ...session }) : cell;\n      }\n\n      if (typeof cellUpdated === 'string' || typeof cellUpdated === 'number' || React.isValidElement(cellUpdated)) {\n        cellUpdated = {\n          title: cellUpdated\n        };\n      } else if (!cellUpdated?.title) {\n        if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n          console.error(\n            `PF table throws an error when cell values don't conform to what it is expecting, or align exactly to column headers.\n            \\n\\nSee cell ID=${id} with VALUE=${cellUpdated}`\n          );\n        }\n\n        cellUpdated = {\n          title: ''\n        };\n      }\n\n      updatedColumnHeaders.push(headerUpdated);\n      updatedCells.push(cellUpdated);\n    });\n  }\n\n  return {\n    columnHeaders: updatedColumnHeaders,\n    cells: updatedCells,\n    data: { ...allCells }\n  };\n};\n\nconst inventoryCardHelpers = {\n  applySortFilters,\n  applyWrappableFilters,\n  parseInventoryFilters,\n  parseRowCellsListData\n};\n\nexport {\n  inventoryCardHelpers as default,\n  inventoryCardHelpers,\n  applySortFilters,\n  applyWrappableFilters,\n  parseInventoryFilters,\n  parseRowCellsListData\n};\n"],"names":["applySortFilters","filter","onSort","query","id","updatedId","sortId","updatedFilter","hasSort","sortActive","RHSM_API_QUERY_TYPES","_camelCase","sortDirection","SORT_DIRECTION_TYPES","SortByDirection","isSortDefault","sortDefaultInitialDirection","applyWrappableFilters","Array","isArray","transforms","push","wrappable","parseInventoryFilters","filters","map","isSortable","Object","assign","isWrappable","parseRowCellsListData","cellData","session","updatedColumnHeaders","updatedCells","allCells","entries","forEach","key","value","title","translate","context","length","headerUpdated","cellUpdated","cell","cellWidth","header","React","concat","PfCellWidth","obj","helpers","console","error","columnHeaders","cells","data","inventoryCardHelpers"],"sourceRoot":""}