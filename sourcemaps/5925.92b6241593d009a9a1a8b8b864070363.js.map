{"version":3,"file":"js/5925.22f5628fbb36f9959aa4.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCard.js","webpack:///./src/components/graphCard/graphCardMetricTotals.js","webpack:///./src/components/minHeight/minHeight.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { helpers } from '../../common';\nimport { GraphCardMetricTotals } from './graphCardMetricTotals';\nimport { GraphCardChart } from './graphCardChart';\nimport { GraphCardContext, useParseFiltersSettings } from './graphCardContext';\n\n/**\n * Configurable graph, chart, cards. Consumes Charts.\n *\n * @see Charts\n * @memberof Components\n * @module GraphCard\n * @property {module} GraphCardChart\n * @property {module} GraphCardChartLegend\n * @property {module} GraphCardChartTitleTooltip\n * @property {module} GraphCardChartTooltip\n * @property {module} GraphCardContext\n * @property {module} GraphCardHelpers\n * @property {module} GraphCardMetricTotals\n */\n\n/**\n * Set up graph cards. Expand filters with base graph settings.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useParseFiltersSettings\n * @returns {React.ReactNode}\n */\nconst GraphCard = ({ isDisabled, useParseFiltersSettings: useAliasParseFiltersSettings }) => {\n  const { filtersSettings } = useAliasParseFiltersSettings();\n\n  if (isDisabled || !filtersSettings?.length) {\n    return null;\n  }\n\n  return filtersSettings?.map(filterSetting => (\n    <GraphCardContext.Provider key={`graphCard-${filterSetting?.settings?.metrics?.[0]?.id}`} value={filterSetting}>\n      <GraphCardMetricTotals>\n        <GraphCardChart />\n      </GraphCardMetricTotals>\n    </GraphCardContext.Provider>\n  ));\n};\n\n/**\n * Prop types.\n *\n * @type {{useParseFiltersSettings: Function, isDisabled: boolean}}\n */\nGraphCard.propTypes = {\n  isDisabled: PropTypes.bool,\n  useParseFiltersSettings: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useParseFiltersSettings: Function, isDisabled: boolean}}\n */\nGraphCard.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_GRAPH,\n  useParseFiltersSettings\n};\n\nexport { GraphCard as default, GraphCard };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter, CardHeader, CardTitle, Title } from '@patternfly/react-core';\nimport _camelCase from 'lodash/camelCase';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useGraphCardContext, useMetricsSelector } from './graphCardContext';\nimport { Loader, SkeletonSize } from '../loader/loader';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldRangedMonthly';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { graphCardHelpers } from './graphCardHelpers';\nimport { helpers } from '../../common';\n\n/**\n * @memberof GraphCard\n * @module GraphCardMetricTotals\n */\n\n/**\n * Display totals for a single metric.\n *\n * @param {object} props\n * @param {React.ReactNode} props.children\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {React.ReactNode}\n */\nconst GraphCardMetricTotals = ({\n  children,\n  useGraphCardContext: useAliasGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const query = useAliasProductGraphTallyQuery();\n  const { pending, error, fulfilled, dataSets: dataByList = [] } = useAliasMetricsSelector();\n\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate } = query;\n  const { isCurrent: isSelectedMonthCurrent } =\n    toolbarFieldOptions.find(\n      option => option.title === startDate || option.value.startDate.toISOString() === startDate\n    ) || {};\n\n  if (settings?.isMetricDisplay && settings?.cards?.length) {\n    const metricDisplayPassedData = helpers.setImmutableData(\n      {\n        dataSets: dataByList.map(dataSet => {\n          const { id: chartId, metric: metricId } = dataSet || {};\n          return {\n            ...dataSet,\n            display: {\n              ...graphCardHelpers.getDailyMonthlyTotals({ dataSet, isCurrent: isSelectedMonthCurrent }),\n              ...graphCardHelpers.getRemainingCapacity({\n                ...graphCardHelpers.getPrepaidTallyCapacity({ data: dataByList }),\n                isCurrent: isSelectedMonthCurrent\n              }),\n              ...graphCardHelpers.getRemainingOverage({\n                ...graphCardHelpers.getPrepaidTallyCapacity({ data: dataByList }),\n                isCurrent: isSelectedMonthCurrent\n              }),\n              chartId,\n              metricId\n            }\n          };\n        })\n      },\n      { isClone: true }\n    );\n\n    return (\n      <div\n        data-test={`graphMetricTotals-${settings?.groupMetric?.map(metricId => _camelCase(metricId))?.join('-')}`}\n        data-test-data={JSON.stringify(metricDisplayPassedData)}\n        className=\"curiosity-usage-graph__totals\"\n      >\n        <div>\n          <div className=\"curiosity-usage-graph__totals-column\">\n            {settings?.cards?.map(({ key, header, body, footer }, index) => (\n              <Card\n                key={key || helpers.generateHash({ metricDisplayPassedData, index })}\n                isPlain\n                data-test={`graphMetricTotalsCard-${index}`}\n                className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n              >\n                <CardHeader>\n                  <CardTitle>\n                    <Title headingLevel=\"h2\" size=\"md\">\n                      {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                      {fulfilled && ((typeof header === 'function' && header(metricDisplayPassedData)) || header)}\n                    </Title>\n                  </CardTitle>\n                </CardHeader>\n                <CardBody>\n                  <div>\n                    {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg, height: '60px' }} />}\n                    {fulfilled && ((typeof body === 'function' && body(metricDisplayPassedData)) || body)}\n                  </div>\n                </CardBody>\n                <CardFooter>\n                  <div>\n                    {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                    {fulfilled && ((typeof footer === 'function' && footer(metricDisplayPassedData)) || footer)}\n                  </div>\n                </CardFooter>\n              </Card>\n            ))}\n          </div>\n        </div>\n        <div>\n          <div className=\"curiosity-usage-graph__totals-graph-column\">{children}</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div data-test=\"graphStandalone\" className=\"curiosity-usage-graph__standalone\">\n      {children}\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, children: React.ReactNode, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.propTypes = {\n  children: PropTypes.node,\n  useGraphCardContext: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, children: React.ReactNode, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.defaultProps = {\n  children: null,\n  useGraphCardContext,\n  useMetricsSelector,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardMetricTotals as default, GraphCardMetricTotals };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { helpers } from '../../common';\n\n/**\n * Normalize component height on page loads and updates.\n *\n * @memberof Components\n * @module MinHeight\n */\n\n/**\n * Set a min-height to prevent page jump component.\n *\n * @augments React.Component\n * @fires onResizeContainer\n */\nclass MinHeight extends React.Component {\n  containerRef = React.createRef();\n\n  innerContainerRef = React.createRef();\n\n  updatedContainerWidth = 0;\n\n  resizeObserver = helpers.noop;\n\n  componentDidMount() {\n    const { updateOnResize } = this.props;\n    window.setTimeout(() => {\n      this.setMinHeight();\n    });\n\n    if (updateOnResize) {\n      this.setResizeObserver();\n    }\n  }\n\n  componentDidUpdate() {\n    const { updateOnContent } = this.props;\n\n    if (updateOnContent) {\n      window.setTimeout(() => {\n        this.setMinHeight();\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.resizeObserver();\n  }\n\n  /**\n   * On resize adjust graph display.\n   *\n   * @event onResizeContainer\n   */\n  onResizeContainer = () => {\n    const { updatedContainerWidth } = this;\n    const { updateOnResize } = this.props;\n    const clientWidth = this.containerRef?.current?.clientWidth || 0;\n\n    if (updateOnResize && clientWidth !== updatedContainerWidth) {\n      this.updatedContainerWidth = clientWidth;\n      this.setMinHeight(true);\n    }\n  };\n\n  /**\n   * Set minHeight on mount or update.\n   *\n   * @param {boolean} reset\n   */\n  setMinHeight(reset = false) {\n    const { minHeight: overrideMinHeight } = this.props;\n    const { current: domElement = {} } = this.containerRef;\n    const { current: innerDomElement = {} } = this.innerContainerRef;\n\n    if (domElement?.style) {\n      let clientHeight;\n\n      if (reset) {\n        clientHeight = innerDomElement?.clientHeight || 0;\n      } else {\n        clientHeight = domElement?.clientHeight || 0;\n      }\n\n      if (overrideMinHeight > clientHeight) {\n        clientHeight = overrideMinHeight;\n      }\n\n      domElement.style.minHeight = `${clientHeight}px`;\n    }\n  }\n\n  /**\n   * Set ResizeObserver for scenarios when min-height needs to be updated.\n   */\n  setResizeObserver() {\n    window.addEventListener('resize', this.onResizeContainer);\n    this.resizeObserver = () => window.removeEventListener('resize', this.onResizeContainer);\n  }\n\n  /**\n   * Render a min-height div with children.\n   *\n   * @returns {React.ReactNode}\n   */\n  render() {\n    const { children } = this.props;\n\n    return (\n      <div className=\"curiosity-minheight\" ref={this.containerRef}>\n        <div ref={this.innerContainerRef}>{children}</div>\n      </div>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{minHeight: number, children: React.ReactNode, updateOnContent: boolean, updateOnResize: boolean}}\n */\nMinHeight.propTypes = {\n  updateOnContent: PropTypes.bool,\n  updateOnResize: PropTypes.bool,\n  children: PropTypes.node.isRequired,\n  minHeight: PropTypes.number\n};\n\n/**\n * Default props.\n *\n * @type {{minHeight: number, updateOnContent: boolean, updateOnResize: boolean}}\n */\nMinHeight.defaultProps = {\n  updateOnContent: false,\n  updateOnResize: true,\n  minHeight: 0\n};\n\nexport { MinHeight as default, MinHeight };\n"],"names":["GraphCard","_ref","isDisabled","filtersSettings","useAliasParseFiltersSettings","useParseFiltersSettings","length","map","filterSetting","_filterSetting$settin","_filterSetting$settin2","_filterSetting$settin3","React","GraphCardContext","key","concat","settings","metrics","id","value","GraphCardMetricTotals","GraphCardChart","defaultProps","helpers","_settings$cards","children","useAliasGraphCardContext","useGraphCardContext","useAliasMetricsSelector","useMetricsSelector","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","_useAliasGraphCardCon2","query","_useAliasMetricsSelec","pending","error","fulfilled","_useAliasMetricsSelec2","dataSets","dataByList","startDate","RHSM_API_QUERY_SET_TYPES","isSelectedMonthCurrent","toolbarFieldOptions","option","title","toISOString","isCurrent","isMetricDisplay","cards","_settings$groupMetric","_settings$groupMetric2","_settings$cards2","metricDisplayPassedData","dataSet","_ref3","chartId","metricId","metric","_objectSpread","display","graphCardHelpers","data","isClone","groupMetric","_camelCase","join","JSON","stringify","className","_ref4","index","header","body","footer","Card","isPlain","CardHeader","CardTitle","Title","headingLevel","size","Loader","variant","skeletonProps","SkeletonSize","CardBody","height","CardFooter","MinHeight","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","call","apply","containerRef","innerContainerRef","updatedContainerWidth","resizeObserver","onResizeContainer","_this$containerRef","_this$containerRef$cu","_assertThisInitialized","updateOnResize","props","clientWidth","current","setMinHeight","_createClass","_this2","this","window","setTimeout","setResizeObserver","_this3","updateOnContent","clientHeight","reset","undefined","overrideMinHeight","minHeight","_this$containerRef$cu2","domElement","_this$innerContainerR","innerDomElement","style","_this4","addEventListener","removeEventListener","ref"],"sourceRoot":""}