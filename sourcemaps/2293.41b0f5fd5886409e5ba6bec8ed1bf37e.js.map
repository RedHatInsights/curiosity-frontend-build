{"version":3,"file":"js/2293.1663093764801.76443cab8b87a106b783.js","mappings":"qZAaMA,EAA8B,SAClCC,GAEG,6DADgG,CAAC,EACjG,IADDC,qBAAsBC,OACrB,MADiDC,EAAAA,GAAAA,WAAAA,qBACjD,EACH,EAAuDD,GACrD,kBAAGE,EAAH,EAAGA,UAAH,OAAmBA,SAAnB,UAAmBA,EAAWC,mBAA9B,aAAmB,EAAyBL,EAA5C,IADMM,EAAR,EAAQA,MAAOC,EAAf,EAAeA,UAAWC,EAA1B,EAA0BA,UAAWC,EAArC,EAAqCA,QAASC,EAA9C,EAA8CA,KAI9C,MAAO,CACLJ,MAAAA,EACAE,UAAAA,EACAC,QAASA,GAAWF,IAAa,EACjCG,KAAwB,KAAjBA,aAAA,EAAAA,EAAMC,SAAgBD,EAAK,IAAOA,GAAQ,CAAC,EAErD,EAaKE,EAAwB,SAC5BZ,GAOG,6DADC,CAAC,EACF,IALDa,aAAAA,OAKC,MALcC,EAAAA,GAAAA,KAAAA,wBAKd,MAJDC,YAAaC,OAIZ,MAJ+Bb,EAAAA,GAAAA,WAAAA,YAI/B,MAHDc,yBAA0BC,OAGzB,MAHyDC,EAAAA,+BAGzD,MAFDC,sBAAuBC,OAEtB,MAFmDtB,EAEnD,EACGuB,EAAQJ,EAA8B,CAAEK,QAAS,CAAEC,WAAYxB,KAC/DyB,EAAWT,IACXU,EAAWL,EAA2BrB,GAM5C,OAJA2B,EAAAA,EAAAA,IAAwB,WACtBd,EAAab,EAAIsB,EAAjBT,CAAwBY,EACzB,GAAE,CAACA,EAAUzB,EAAIsB,KAEX,UACFI,EAEN,EAaKE,EAAc,SAClB5B,EACA6B,GAMG,6DADC,CAAC,EACF,IAJDd,YAAaC,OAIZ,MAJ+Bb,EAAAA,GAAAA,WAAAA,YAI/B,MAHDiB,sBAAuBC,OAGtB,MAHmDtB,EAGnD,MAFDkB,yBAA0BC,OAEzB,MAFyDC,EAAAA,+BAEzD,EACGM,EAAWT,IACjB,EAA+BK,EAA2BrB,GAAlDS,EAAR,EAAQA,QAAR,IAAiBC,KAAAA,OAAjB,MAAwB,CAAC,EAAzB,EACA,GAAkCA,aAAA,EAAAA,EAAMoB,OAAQ,CAAC,EAAlCC,EAAf,EAAQC,MAEFV,EAAQJ,EAA8B,CAAEK,QAAS,CAAEC,WAAYxB,KAC3BiC,EAA0DX,EAA3FY,EAAAA,GAAAA,OAA2EC,EAAgBb,EAAlDY,EAAAA,GAAAA,QAqBlD,OAhBAE,EAAAA,EAAAA,IAAW,WACTX,EAAS,CACP,CACEY,KAAMC,EAAAA,GAAAA,MAAAA,sCACNC,OAAQvC,IAGb,IASM,SAAAwC,GACL,IAAQC,EAAWD,EAAXC,OACFC,EAASD,EAAOE,aAAeF,EAAOG,YAAcH,EAAOI,aAE7Dd,GAAkBI,EAAc,GAAKF,GAASS,IAAWjC,IAC5B,mBAApBoB,GACTA,EAAgBW,GAGlBf,EAAS,EAAC,QAENY,KAAMC,EAAAA,GAAAA,MAAAA,sCAAuDJ,EAAAA,GAAAA,QAC7DK,OAAQvC,GACPkC,EAAAA,GAAAA,OAAkCC,EAAc,IAJ5C,QAOLE,KAAMC,EAAAA,GAAAA,MAAAA,sCAAuDJ,EAAAA,GAAAA,OAC7DK,OAAQvC,GACPkC,EAAAA,GAAAA,MAAiCD,KAIzC,CACF,EAEKa,EAAU,CACdlC,sBAAAA,EACAgB,YAAAA,EACA7B,4BAAAA,E","sources":["webpack:///./src/components/inventoryGuests/inventoryGuestsContext.js"],"sourcesContent":["import { useUnmount, useShallowCompareEffect } from 'react-use';\nimport { reduxActions, reduxTypes, storeHooks } from '../../redux';\nimport { useProductInventoryGuestsQuery } from '../productView/productViewContext';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\n\n/**\n * Guests inventory selector response.\n *\n * @param {string} id\n * @param {object} options\n * @param {Function} options.useSelectorsResponse\n * @returns {{data: (*|{}), pending: (*|boolean), fulfilled, error}}\n */\nconst useSelectorsGuestsInventory = (\n  id,\n  { useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse } = {}\n) => {\n  const { error, cancelled, fulfilled, pending, data } = useAliasSelectorsResponse(\n    ({ inventory }) => inventory?.hostsGuests?.[id]\n  );\n\n  return {\n    error,\n    fulfilled,\n    pending: pending || cancelled || false,\n    data: (data?.length === 1 && data[0]) || data || {}\n  };\n};\n\n/**\n * Combined Redux RHSM Actions, getHostsInventoryGuests, and inventory selector response.\n *\n * @param {string} id\n * @param {object} options\n * @param {Function} options.getInventory\n * @param {Function} options.useDispatch\n * @param {Function} options.useProductInventoryQuery\n * @param {Function} options.useSelectorsInventory\n * @returns {Function}\n */\nconst useGetGuestsInventory = (\n  id,\n  {\n    getInventory = reduxActions.rhsm.getHostsInventoryGuests,\n    useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n    useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventoryGuestsQuery,\n    useSelectorsInventory: useAliasSelectorsInventory = useSelectorsGuestsInventory\n  } = {}\n) => {\n  const query = useAliasProductInventoryQuery({ options: { overrideId: id } });\n  const dispatch = useAliasDispatch();\n  const response = useAliasSelectorsInventory(id);\n\n  useShallowCompareEffect(() => {\n    getInventory(id, query)(dispatch);\n  }, [dispatch, id, query]);\n\n  return {\n    ...response\n  };\n};\n\n/**\n * Use paging as onScroll event for guests inventory.\n *\n * @param {string} id\n * @param {Function} successCallback\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useSelectorsInventory\n * @param {Function} options.useProductInventoryQuery\n * @returns {Function}\n */\nconst useOnScroll = (\n  id,\n  successCallback,\n  {\n    useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n    useSelectorsInventory: useAliasSelectorsInventory = useSelectorsGuestsInventory,\n    useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventoryGuestsQuery\n  } = {}\n) => {\n  const dispatch = useAliasDispatch();\n  const { pending, data = {} } = useAliasSelectorsInventory(id);\n  const { count: numberOfGuests } = data?.meta || {};\n\n  const query = useAliasProductInventoryQuery({ options: { overrideId: id } });\n  const { [RHSM_API_QUERY_SET_TYPES.LIMIT]: limit, [RHSM_API_QUERY_SET_TYPES.OFFSET]: currentPage } = query;\n\n  /**\n   * Reset paging in scenarios where inventory is filtered, or guests is collapsed.\n   */\n  useUnmount(() => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_GUESTS_LIST,\n        viewId: id\n      }\n    ]);\n  });\n\n  /**\n   * On scroll, dispatch type.\n   *\n   * @event onScroll\n   * @param {object} event\n   * @returns {void}\n   */\n  return event => {\n    const { target } = event;\n    const bottom = target.scrollHeight - target.scrollTop === target.clientHeight;\n\n    if (numberOfGuests > (currentPage + 1) * limit && bottom && !pending) {\n      if (typeof successCallback === 'function') {\n        successCallback(event);\n      }\n\n      dispatch([\n        {\n          type: reduxTypes.query.SET_QUERY_RHSM_GUESTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.OFFSET],\n          viewId: id,\n          [RHSM_API_QUERY_SET_TYPES.OFFSET]: currentPage + 1\n        },\n        {\n          type: reduxTypes.query.SET_QUERY_RHSM_GUESTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.LIMIT],\n          viewId: id,\n          [RHSM_API_QUERY_SET_TYPES.LIMIT]: limit\n        }\n      ]);\n    }\n  };\n};\n\nconst context = {\n  useGetGuestsInventory,\n  useOnScroll,\n  useSelectorsGuestsInventory\n};\n\nexport { context as default, context, useGetGuestsInventory, useOnScroll, useSelectorsGuestsInventory };\n"],"names":["useSelectorsGuestsInventory","id","useSelectorsResponse","useAliasSelectorsResponse","storeHooks","inventory","hostsGuests","error","cancelled","fulfilled","pending","data","length","useGetGuestsInventory","getInventory","reduxActions","useDispatch","useAliasDispatch","useProductInventoryQuery","useAliasProductInventoryQuery","useProductInventoryGuestsQuery","useSelectorsInventory","useAliasSelectorsInventory","query","options","overrideId","dispatch","response","useShallowCompareEffect","useOnScroll","successCallback","meta","numberOfGuests","count","limit","RHSM_API_QUERY_SET_TYPES","currentPage","useUnmount","type","reduxTypes","viewId","event","target","bottom","scrollHeight","scrollTop","clientHeight","context"],"sourceRoot":""}