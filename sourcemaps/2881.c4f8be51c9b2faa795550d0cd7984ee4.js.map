{"version":3,"file":"js/2881.595f2d4193a5bf3143e6.js","mappings":"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","sources":["webpack:///./src/components/inventoryCardSubscriptions/inventoryCardSubscriptionsContext.js"],"sourcesContent":["import { reduxActions, reduxTypes, storeHooks } from '../../redux';\nimport {\n  useProduct,\n  useProductInventorySubscriptionsConfig,\n  useProductInventorySubscriptionsQuery\n} from '../productView/productViewContext';\nimport {\n  RHSM_API_QUERY_INVENTORY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_INVENTORY_SUBSCRIPTIONS_SORT_TYPES as SORT_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\nimport {\n  useGetInstancesInventory,\n  useInventoryCardActionsInstances,\n  useParseInstancesFiltersSettings,\n  useSelectorInstances\n} from '../inventoryCardInstances/inventoryCardInstancesContext';\nimport { tableHelpers } from '../table/table';\n\n/**\n * @memberof InventoryCardSubscriptions\n * @module InventoryCardSubscriptionsContext\n */\n\n/**\n * Parse filters settings for context.\n * See @module InventoryCardInstancesContext\n *\n * @param {object} options\n * @param {boolean} options.isDisabled\n * @param {Function} options.useParseFiltersSettings\n * @param {Function} options.useProductConfig\n * @returns {{settings: {}, columnCountAndWidths: {count: number, widths: Array}, filters: Array}}\n */\nconst useParseSubscriptionsFiltersSettings = ({\n  isDisabled = false,\n  useParseFiltersSettings: useAliasParseFiltersSettings = useParseInstancesFiltersSettings,\n  useProductConfig: useAliasProductConfig = useProductInventorySubscriptionsConfig\n} = {}) =>\n  useAliasParseFiltersSettings({\n    isDisabled,\n    useProductConfig: useAliasProductConfig\n  });\n\n/**\n * Parse selector response for consuming components.\n * See @module InventoryCardInstancesContext\n *\n * @param {object} options\n * @param {string} options.storeRef\n * @param {Function} options.useParseFiltersSettings\n * @param {Function} options.useProductInventoryQuery\n * @param {Function} options.useSelector\n * @returns {{pending: boolean, fulfilled: boolean, error: boolean, resultsColumnCountAndWidths: {count: number,\n *     widths: Array}, dataSetColumnHeaders: Array, resultsPerPage: number, resultsOffset: number, dataSetRows: Array,\n *     resultsCount: number}}\n */\nconst useSelectorSubscriptions = ({\n  storeRef = 'subscriptionsInventory',\n  useParseFiltersSettings: useAliasParseFiltersSettings = useParseSubscriptionsFiltersSettings,\n  useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventorySubscriptionsQuery,\n  useSelector: useAliasSelector = useSelectorInstances\n} = {}) =>\n  useAliasSelector({\n    storeRef,\n    useParseFiltersSettings: useAliasParseFiltersSettings,\n    useProductInventoryQuery: useAliasProductInventoryQuery\n  });\n\n/**\n * Combine service call, Redux, and inventory selector response.\n * See @module InventoryCardInstancesContext\n *\n * @param {object} options\n * @param {boolean} options.isDisabled\n * @param {Function} options.getInventory\n * @param {Function} options.useGetInventory\n * @param {Function} options.useProductInventoryQuery\n * @param {Function} options.useSelector\n * @returns {{pending: boolean, fulfilled: boolean, error: boolean, resultsColumnCountAndWidths: {count: number,\n *     widths: Array}, dataSetColumnHeaders: Array, resultsPerPage: number, resultsOffset: number, dataSetRows: Array,\n *     resultsCount: number}}\n */\nconst useGetSubscriptionsInventory = ({\n  isDisabled = false,\n  getInventory = reduxActions.rhsm.getSubscriptionsInventory,\n  useGetInventory: useAliasGetInventory = useGetInstancesInventory,\n  useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventorySubscriptionsQuery,\n  useSelector: useAliasSelector = useSelectorSubscriptions\n} = {}) =>\n  useAliasGetInventory({\n    isDisabled,\n    getInventory,\n    useProductInventoryQuery: useAliasProductInventoryQuery,\n    useSelector: useAliasSelector\n  });\n\n/**\n * Return a component list for a configurable inventoryCard action toolbar.\n * Allow the \"content\" prop to receive inventory data for display via callback.\n * See @module InventoryCardInstancesContext\n *\n * @param {object} options\n * @param {Function} options.useInventoryCardActions\n * @param {Function} options.useSelector\n * @param {Function} options.useProductConfig\n * @returns {Array}\n */\nconst useInventoryCardActionsSubscriptions = ({\n  useInventoryCardActions: useAliasInventoryCardActions = useInventoryCardActionsInstances,\n  useSelector: useAliasSelector = useSelectorSubscriptions,\n  useProductConfig: useAliasProductConfig = useProductInventorySubscriptionsConfig\n} = {}) => useAliasInventoryCardActions({ useSelector: useAliasSelector, useProductConfig: useAliasProductConfig });\n\n/**\n * An onPage callback for inventory.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnPageSubscriptions = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for inventory.\n   *\n   * @event onPage\n   * @param {object} params\n   * @param {number} params.offset\n   * @param {number} params.perPage\n   * @returns {void}\n   */\n  return ({ offset, perPage }) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.OFFSET],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.OFFSET]: offset\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.LIMIT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.LIMIT]: perPage\n      }\n    ]);\n  };\n};\n\n/**\n * An onColumnSort callback for inventory.\n *\n * @param {object} options\n * @param {object} options.sortColumns\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnColumnSortSubscriptions = ({\n  sortColumns = SORT_TYPES,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for inventory.\n   *\n   * @event onColumnSort\n   * @param {object} params\n   * @param {string} params.direction\n   * @param {object} params.data\n   * @returns {void}\n   */\n  return ({ direction, data = {} }) => {\n    const { metric: id } = data;\n    const updatedSortColumn = Object.values(sortColumns).find(value => value === id);\n    let updatedDirection;\n\n    if (!updatedSortColumn) {\n      if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n        console.warn(`Sorting can only be performed on select fields, confirm field ${id} is allowed.`);\n      }\n      return;\n    }\n\n    switch (direction) {\n      case tableHelpers.SortByDirectionVariant.desc:\n        updatedDirection = SORT_DIRECTION_TYPES.DESCENDING;\n        break;\n      default:\n        updatedDirection = SORT_DIRECTION_TYPES.ASCENDING;\n        break;\n    }\n\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.DIRECTION],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.DIRECTION]: updatedDirection\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.SORT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.SORT]: updatedSortColumn\n      }\n    ]);\n  };\n};\n\nconst context = {\n  useGetSubscriptionsInventory,\n  useInventoryCardActionsSubscriptions,\n  useOnPageSubscriptions,\n  useOnColumnSortSubscriptions,\n  useParseSubscriptionsFiltersSettings,\n  useSelectorSubscriptions\n};\n\nexport {\n  context as default,\n  context,\n  useGetSubscriptionsInventory,\n  useInventoryCardActionsSubscriptions,\n  useOnPageSubscriptions,\n  useOnColumnSortSubscriptions,\n  useParseSubscriptionsFiltersSettings,\n  useSelectorSubscriptions\n};\n"],"names":["useParseSubscriptionsFiltersSettings","isDisabled","useParseFiltersSettings","useAliasParseFiltersSettings","useParseInstancesFiltersSettings","useProductConfig","useAliasProductConfig","useProductInventorySubscriptionsConfig","arguments","length","undefined","useSelectorSubscriptions","storeRef","useProductInventoryQuery","useAliasProductInventoryQuery","useProductInventorySubscriptionsQuery","useSelector","useAliasSelector","useSelectorInstances","useGetSubscriptionsInventory","getInventory","reduxActions","useGetInventory","useAliasGetInventory","useGetInstancesInventory","useInventoryCardActionsSubscriptions","useInventoryCardActions","useAliasInventoryCardActions","useInventoryCardActionsInstances","useOnPageSubscriptions","useDispatch","useAliasDispatch","storeHooks","useProduct","useAliasProduct","productId","dispatch","_ref","offset","perPage","type","reduxTypes","RHSM_API_QUERY_SET_TYPES","viewId","useOnColumnSortSubscriptions","sortColumns","SORT_TYPES","_ref2","direction","data","metric","id","updatedSortColumn","Object","values","find","value","updatedDirection","tableHelpers","SORT_DIRECTION_TYPES","helpers","console","warn","concat","context"],"sourceRoot":""}