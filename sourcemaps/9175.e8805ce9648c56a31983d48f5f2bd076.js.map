{"version":3,"file":"js/9175.d15280ca8bb0fa8ab14e.js","mappings":"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","sources":["webpack:///./src/components/bannerMessages/bannerMessages.js","webpack:///./src/components/graphCard/graphCard.js","webpack:///./src/components/inventorySubscriptions/inventorySubscriptions.js","webpack:///./src/components/inventoryTabs/inventoryTabs.js","webpack:///./src/components/productView/productView.js","webpack:///./src/components/toolbar/toolbar.js","webpack:///./src/components/toolbar/toolbarFieldGranularity.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, AlertActionCloseButton, AlertVariant, Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { useShallowCompareEffect } from 'react-use';\nimport { apiQueries, storeHooks } from '../../redux';\nimport { translate } from '../i18n/i18n';\nimport { dateHelpers, helpers } from '../../common';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { useRouteDetail } from '../../hooks/useRouter';\n\n/**\n * Render banner messages.\n *\n * @param {object} props\n * @param {Array} props.messages\n * @param {Function} props.useRouteDetail\n * @param {Function} props.useAppMessages\n * @returns {Node}\n */\nconst BannerMessages = ({ messages, useRouteDetail: useAliasRouteDetail, useAppMessages: useAliasAppMessages }) => {\n  const [hideAlerts, setHideAlerts] = useState({});\n  const [alerts, setAlerts] = useState([]);\n  const { pathParameter: productId, productConfig } = useAliasRouteDetail() || {};\n  const isProductConfig = productConfig?.length === 1 && productConfig?.[0];\n  const { query } = apiQueries.parseRhsmQuery(productConfig?.[0]?.query || {});\n  const { appMessages } = useAliasAppMessages();\n\n  useShallowCompareEffect(() => {\n    if (productId && isProductConfig) {\n      const { startDate, endDate } = dateHelpers.getRangedDateTime('CURRENT');\n      const updatedGraphQuery = {\n        ...query,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString(),\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      };\n\n      storeHooks.rhsmActions.useGetMessageReports(productId, updatedGraphQuery);\n    }\n  }, [productId, isProductConfig, query]);\n\n  useShallowCompareEffect(() => {\n    const updatedMessages = [];\n\n    if (messages.length) {\n      Object.entries(appMessages).forEach(([key, value]) => {\n        if (hideAlerts[key] !== true && value === true) {\n          const message = messages.find(({ id }) => id === key);\n\n          if (message) {\n            updatedMessages.push({\n              key,\n              ...message\n            });\n          }\n        }\n      });\n    }\n\n    setAlerts(\n      updatedMessages.map(({ key, message, title, variant = AlertVariant.info }) => {\n        const actionClose = <AlertActionCloseButton onClose={() => setHideAlerts({ ...hideAlerts, [key]: true })} />;\n\n        return (\n          <Alert actionClose={actionClose} key={key} title={title} variant={variant}>\n            {message}\n          </Alert>\n        );\n      })\n    );\n  }, [appMessages, hideAlerts, messages]);\n\n  if (alerts?.length) {\n    return <div className=\"curiosity-banner-messages\">{alerts}</div>;\n  }\n\n  return null;\n};\n\n/**\n * Prop types.\n *\n * @type {{useAppMessages: Function, messages: Array, useRouteDetail: Function}}\n */\nBannerMessages.propTypes = {\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.node.isRequired,\n      message: PropTypes.node.isRequired,\n      variant: PropTypes.oneOf([...Object.values(AlertVariant)])\n    })\n  ),\n  useAppMessages: PropTypes.func,\n  useRouteDetail: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useAppMessages: Function, messages: Array, useRouteDetail: Function}}\n */\nBannerMessages.defaultProps = {\n  messages: [\n    {\n      id: 'cloudigradeMismatch',\n      title: translate('curiosity-banner.dataMismatchTitle'),\n      message: translate(\n        'curiosity-banner.dataMismatchMessage',\n        {\n          context: helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS !== '' && 'cloudigradeMismatch',\n          appName: helpers.UI_DISPLAY_NAME\n        },\n        [\n          <Button\n            isInline\n            component=\"a\"\n            variant=\"link\"\n            icon={<ExternalLinkAltIcon />}\n            iconPosition=\"right\"\n            target=\"_blank\"\n            href={helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS}\n          />\n        ]\n      )\n    }\n  ],\n  useAppMessages: storeHooks.rhsmSelectors.useAppMessages,\n  useRouteDetail\n};\n\nexport { BannerMessages as default, BannerMessages };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardTitle, CardHeader, CardActions, CardBody, Title } from '@patternfly/react-core';\nimport { useShallowCompareEffect } from 'react-use';\nimport { connect, reduxActions, reduxSelectors } from '../../redux';\nimport { useProduct, useProductGraphConfig, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { helpers } from '../../common';\nimport { RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { Loader } from '../loader/loader';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { GraphCardChart } from './graphCardChart';\n\n/**\n * A chart/graph card.\n *\n * @param {object} props\n * @param {Node} props.cardTitle\n * @param {Node} props.children\n * @param {boolean} props.error\n * @param {Function} props.getGraphReportsCapacity\n * @param {object} props.graphData\n * @param {object} props.meta\n * @param {boolean} props.isDisabled\n * @param {boolean} props.pending\n * @param {Function} props.useProduct\n * @param {Function} props.useProductGraphConfig\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCard = ({\n  cardTitle,\n  children,\n  error,\n  getGraphReportsCapacity,\n  graphData,\n  meta,\n  isDisabled,\n  pending,\n  useProduct: useAliasProduct,\n  useProductGraphConfig: useAliasProductGraphConfig,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productId } = useAliasProduct();\n  const { settings } = useAliasProductGraphConfig();\n  const query = useAliasProductGraphTallyQuery();\n\n  useShallowCompareEffect(() => {\n    const {\n      [RHSM_API_QUERY_TYPES.START_DATE]: startDate,\n      [RHSM_API_QUERY_TYPES.END_DATE]: endDate,\n      [RHSM_API_QUERY_TYPES.GRANULARITY]: granularity\n    } = query;\n\n    if (!isDisabled && granularity && startDate && endDate && productId) {\n      getGraphReportsCapacity(productId, query);\n    }\n  }, [getGraphReportsCapacity, isDisabled, productId, query]);\n\n  if (isDisabled) {\n    return null;\n  }\n\n  let actionDisplay = null;\n\n  if (typeof settings?.actionDisplay === 'function') {\n    actionDisplay = settings.actionDisplay({ data: { ...graphData }, meta: { ...meta } });\n  }\n\n  return (\n    <Card className=\"curiosity-usage-graph\">\n      <MinHeight key=\"headerMinHeight\">\n        <CardHeader>\n          <CardTitle>\n            <Title headingLevel=\"h2\" size=\"lg\">\n              {cardTitle}\n            </Title>\n          </CardTitle>\n          <CardActions className={(error && 'blur') || ''}>\n            <React.Fragment key=\"actionDisplay\">{actionDisplay}</React.Fragment>\n            {children}\n          </CardActions>\n        </CardHeader>\n      </MinHeight>\n      <MinHeight key=\"bodyMinHeight\">\n        <CardBody>\n          <div className={(error && 'blur') || (pending && 'fadein') || ''}>\n            {pending && <Loader variant=\"graph\" />}\n            {!pending && <GraphCardChart graphData={graphData} />}\n          </div>\n        </CardBody>\n      </MinHeight>\n    </Card>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{getGraphReportsCapacity: Function, useProduct: Function, useProductGraphTallyQuery: Function,\n *     useProductGraphConfig: Function, children: Node, meta: object, pending: boolean, graphData: object,\n *     isDisabled: boolean, error: boolean, cardTitle: Node}}\n */\nGraphCard.propTypes = {\n  cardTitle: PropTypes.node,\n  children: PropTypes.node,\n  error: PropTypes.bool,\n  getGraphReportsCapacity: PropTypes.func,\n  graphData: PropTypes.object,\n  isDisabled: PropTypes.bool,\n  meta: PropTypes.object,\n  pending: PropTypes.bool,\n  useProduct: PropTypes.func,\n  useProductGraphConfig: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{getGraphReportsCapacity: Function, useProduct: Function, useProductGraphTallyQuery: Function,\n *     useProductGraphConfig: Function, children: Node, meta: object, pending: boolean, graphData: object,\n *     isDisabled: boolean, error: boolean, cardTitle: Node}}\n */\nGraphCard.defaultProps = {\n  cardTitle: null,\n  children: null,\n  error: false,\n  getGraphReportsCapacity: helpers.noop,\n  graphData: {},\n  isDisabled: helpers.UI_DISABLED_GRAPH,\n  meta: {},\n  pending: false,\n  useProduct,\n  useProductGraphConfig,\n  useProductGraphTallyQuery\n};\n\n/**\n * Apply actions to props.\n *\n * @param {Function} dispatch\n * @returns {object}\n */\nconst mapDispatchToProps = dispatch => ({\n  getGraphReportsCapacity: (id, query) => dispatch(reduxActions.rhsm.getGraphReportsCapacity(id, query))\n});\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.graphCard.makeGraphCard();\n\nconst ConnectedGraphCard = connect(makeMapStateToProps, mapDispatchToProps)(GraphCard);\n\nexport { ConnectedGraphCard as default, ConnectedGraphCard, GraphCard };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _isEqual from 'lodash/isEqual';\nimport { SortByDirection, TableVariant } from '@patternfly/react-table';\nimport { Bullseye, Card, CardActions, CardBody, CardFooter, CardHeader } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport _camelCase from 'lodash/camelCase';\nimport { helpers } from '../../common';\nimport { connect, reduxActions, reduxSelectors, reduxTypes, store } from '../../redux';\nimport Table from '../table/table';\nimport { Loader } from '../loader/loader';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { inventoryListHelpers } from '../inventoryList/inventoryListHelpers';\nimport Pagination from '../pagination/pagination';\nimport { paginationHelpers } from '../pagination/paginationHelpers';\nimport {\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES as SORT_TYPES,\n  RHSM_API_QUERY_TYPES\n} from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A subscriptions system inventory component.\n *\n * @augments React.Component\n * @fires onColumnSort\n * @fires onPage\n * @fires onUpdateInventoryData\n */\nclass InventorySubscriptions extends React.Component {\n  componentDidMount() {\n    this.onUpdateInventoryData();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { productId, query } = this.props;\n\n    if (productId !== prevProps.productId || !_isEqual(query, prevProps.query)) {\n      this.onUpdateInventoryData();\n    }\n  }\n\n  /**\n   * On column sort update state.\n   *\n   * @event onColumnSort\n   * @param {object} data pass-through inventory data.\n   * @param {object} sortParams\n   * @param {string} sortParams.direction\n   * @param {string} sortParams.id column identifier\n   */\n  onColumnSort = (data, { direction, id }) => {\n    const { productId } = this.props;\n    const updatedSortColumn = Object.values(SORT_TYPES).find(value => _camelCase(value) === id);\n    let updatedDirection;\n\n    if (!updatedSortColumn) {\n      if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n        console.warn(`Sorting can only be performed on select fields, confirm field ${id} is allowed.`);\n      }\n      return;\n    }\n\n    switch (direction) {\n      case SortByDirection.desc:\n        updatedDirection = SORT_DIRECTION_TYPES.DESCENDING;\n        break;\n      default:\n        updatedDirection = SORT_DIRECTION_TYPES.ASCENDING;\n        break;\n    }\n\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.DIRECTION],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.DIRECTION]: updatedDirection\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.SORT],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.SORT]: updatedSortColumn\n      }\n    ]);\n  };\n\n  /**\n   * On paging and on perPage events.\n   *\n   * @event onPage\n   * @param {object} params\n   * @param {number} params.offset\n   * @param {number} params.perPage\n   */\n  onPage = ({ offset, perPage }) => {\n    const { productId } = this.props;\n\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.OFFSET],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.OFFSET]: offset\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.LIMIT],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.LIMIT]: perPage\n      }\n    ]);\n  };\n\n  /**\n   * Call the RHSM APIs, apply filters.\n   *\n   * @event onUpdateInventoryData\n   */\n  onUpdateInventoryData = () => {\n    const { getSubscriptionsInventory, isDisabled, productId, query } = this.props;\n\n    if (!isDisabled && productId) {\n      getSubscriptionsInventory(productId, query);\n    }\n  };\n\n  /**\n   * Render an inventory table.\n   *\n   * @returns {Node}\n   */\n  renderTable() {\n    const { filterInventoryData, listData, query, session } = this.props;\n    let updatedColumnHeaders = [];\n\n    const updatedRows = listData.map(({ ...cellData }) => {\n      const { columnHeaders, cells } = inventoryListHelpers.parseRowCellsListData({\n        filters: inventoryListHelpers.parseInventoryFilters({\n          filters: filterInventoryData,\n          onSort: this.onColumnSort,\n          query\n        }),\n        cellData,\n        session\n      });\n\n      updatedColumnHeaders = columnHeaders;\n\n      return {\n        cells\n      };\n    });\n\n    return (\n      <Table\n        borders\n        variant={TableVariant.compact}\n        className=\"curiosity-inventory-list\"\n        columnHeaders={updatedColumnHeaders}\n        rows={updatedRows}\n      />\n    );\n  }\n\n  /**\n   * Render an inventory card.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const {\n      error,\n      filterInventoryData,\n      fulfilled,\n      isDisabled,\n      itemCount,\n      listData,\n      pending,\n      perPageDefault,\n      query,\n      t\n    } = this.props;\n\n    if (isDisabled) {\n      return (\n        <Card className=\"curiosity-inventory-card__disabled\">\n          <CardBody>\n            <Bullseye>{t('curiosity-inventory.tab', { context: 'disabled' })}</Bullseye>\n          </CardBody>\n        </Card>\n      );\n    }\n\n    const updatedPerPage = query[RHSM_API_QUERY_TYPES.LIMIT] || perPageDefault;\n    const updatedOffset = query[RHSM_API_QUERY_TYPES.OFFSET];\n    const isLastPage = paginationHelpers.isLastPage(updatedOffset, updatedPerPage, itemCount);\n\n    // Set an updated key to force refresh minHeight\n    const minHeightContentRefreshKey =\n      (fulfilled === true && itemCount < updatedPerPage && `bodyMinHeight-${updatedPerPage}-resize`) ||\n      (fulfilled === true && isLastPage && `bodyMinHeight-${updatedPerPage}-resize`) ||\n      (error === true && `bodyMinHeight-${updatedPerPage}-resize`) ||\n      `bodyMinHeight-${updatedPerPage}`;\n\n    return (\n      <Card className=\"curiosity-inventory-card\">\n        <MinHeight key=\"headerMinHeight\" updateOnContent>\n          <CardHeader className={(error && 'hidden') || ''} aria-hidden={error || false}>\n            <CardActions className={(!itemCount && 'transparent') || ''} aria-hidden={!itemCount || false}>\n              <Pagination\n                isCompact\n                isDisabled={pending || error}\n                itemCount={itemCount}\n                offset={updatedOffset}\n                onPage={this.onPage}\n                onPerPage={this.onPage}\n                perPage={updatedPerPage}\n              />\n            </CardActions>\n          </CardHeader>\n        </MinHeight>\n        <MinHeight key={minHeightContentRefreshKey} updateOnContent>\n          <CardBody>\n            <div className={(error && 'blur') || (pending && 'fadein') || ''}>\n              {pending && (\n                <Loader\n                  variant=\"table\"\n                  tableProps={{\n                    className: 'curiosity-inventory-list',\n                    colCount: filterInventoryData?.length || (listData?.[0] && Object.keys(listData[0]).length) || 1,\n                    colWidth:\n                      (filterInventoryData?.length && filterInventoryData.map(({ cellWidth }) => cellWidth)) || [],\n                    rowCount: listData?.length || updatedPerPage,\n                    variant: TableVariant.compact\n                  }}\n                />\n              )}\n              {!pending && this.renderTable()}\n            </div>\n          </CardBody>\n        </MinHeight>\n        <MinHeight key=\"footerMinHeight\" updateOnContent>\n          <CardFooter\n            className={(error && 'hidden') || (!itemCount && 'transparent') || ''}\n            aria-hidden={error || !itemCount || false}\n          >\n            <TableToolbar isFooter>\n              <Pagination\n                dropDirection=\"up\"\n                isDisabled={pending || error}\n                itemCount={itemCount}\n                offset={updatedOffset}\n                onPage={this.onPage}\n                onPerPage={this.onPage}\n                perPage={updatedPerPage}\n              />\n            </TableToolbar>\n          </CardFooter>\n        </MinHeight>\n      </Card>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{productId: string, listData: Array, session: object, pending: boolean, query: object,\n *     fulfilled: boolean, error: boolean, getSubscriptionsInventory: Function, itemCount: number,\n *     t: Function, filterInventoryData: Array, perPageDefault: number, isDisabled: boolean}}\n */\nInventorySubscriptions.propTypes = {\n  error: PropTypes.bool,\n  fulfilled: PropTypes.bool,\n  filterInventoryData: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      header: PropTypes.oneOfType([\n        PropTypes.shape({\n          title: PropTypes.node.isRequired\n        }),\n        PropTypes.func,\n        PropTypes.node\n      ]),\n      cell: PropTypes.oneOfType([\n        PropTypes.shape({\n          title: PropTypes.node.isRequired\n        }),\n        PropTypes.func,\n        PropTypes.node\n      ])\n    }).isRequired\n  ),\n  getSubscriptionsInventory: PropTypes.func,\n  isDisabled: PropTypes.bool,\n  itemCount: PropTypes.number,\n  listData: PropTypes.array,\n  pending: PropTypes.bool,\n  productId: PropTypes.string.isRequired,\n  perPageDefault: PropTypes.number,\n  query: PropTypes.object.isRequired,\n  session: PropTypes.object,\n  t: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, filterInventoryData: Array, listData: Array, session: object, pending: boolean,\n *     fulfilled: boolean, perPageDefault: number, isDisabled: boolean, error: boolean,\n *     getSubscriptionsInventory: Function, itemCount: number}}\n */\nInventorySubscriptions.defaultProps = {\n  error: false,\n  fulfilled: false,\n  filterInventoryData: [],\n  getSubscriptionsInventory: helpers.noop,\n  isDisabled: helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS,\n  itemCount: 0,\n  listData: [],\n  pending: false,\n  perPageDefault: 10,\n  session: {},\n  t: translate\n};\n\n/**\n * Apply actions to props.\n *\n * @param {Function} dispatch\n * @returns {object}\n */\nconst mapDispatchToProps = dispatch => ({\n  getSubscriptionsInventory: (id, query) => dispatch(reduxActions.rhsm.getSubscriptionsInventory(id, query))\n});\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.subscriptionsList.makeSubscriptionsList();\n\nconst ConnectedInventorySubscriptions = connect(makeMapStateToProps, mapDispatchToProps)(InventorySubscriptions);\n\nexport { ConnectedInventorySubscriptions as default, ConnectedInventorySubscriptions, InventorySubscriptions };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Title } from '@patternfly/react-core';\nimport { connect, reduxTypes, store } from '../../redux';\nimport { Tabs } from '../tabs/tabs';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { InventoryTab } from './inventoryTab';\n\n/**\n * A system inventory tabs component.\n *\n * @augments React.Component\n * @fires onTab\n */\nclass InventoryTabs extends React.Component {\n  /**\n   * On tab update state.\n   *\n   * @event onTab\n   * @param {object} params\n   * @param {string} params.index tab index\n   */\n  onTab = ({ index }) => {\n    const { productId } = this.props;\n\n    store.dispatch({\n      type: reduxTypes.inventory.SET_INVENTORY_TAB,\n      tabs: {\n        [productId]: index\n      }\n    });\n  };\n\n  /**\n   * Render inventory tabs using Inventory tab passed props only. A parallel outcome can be\n   * achieved by passing an array of objects through a prop.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { activeTab, children, defaultActiveTab, isDisabled, t } = this.props;\n\n    if (isDisabled) {\n      return null;\n    }\n\n    const updatedChildren = React.Children.toArray(children).map((child, index) => {\n      const { props = {} } = child;\n\n      return {\n        active: props.active || false,\n        content: props.children || child,\n        title: props.title || t('curiosity-inventory.tabSubHeading', { count: index })\n      };\n    });\n\n    return (\n      <React.Fragment>\n        <Title headingLevel=\"h2\" className=\"sr-only\">\n          {t('curiosity-inventory.tabHeading', { count: updatedChildren.length })}\n        </Title>\n        <Tabs activeTab={activeTab} defaultActiveTab={defaultActiveTab} onTab={this.onTab} tabs={updatedChildren} />\n      </React.Fragment>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{productId: string, t: Function, children: Node, defaultActiveTab: number, isDisabled: boolean,\n *     activeTab: number}}\n */\nInventoryTabs.propTypes = {\n  activeTab: PropTypes.number,\n  children: PropTypes.node.isRequired,\n  defaultActiveTab: PropTypes.number,\n  isDisabled: PropTypes.bool,\n  productId: PropTypes.string.isRequired,\n  t: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, defaultActiveTab: number, isDisabled: boolean, activeTab: number}}\n */\nInventoryTabs.defaultProps = {\n  activeTab: 0,\n  defaultActiveTab: 0,\n  isDisabled: helpers.UI_DISABLED_TABLE,\n  t: translate\n};\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst mapStateToProps = ({ inventory }, { productId }) => ({ activeTab: inventory.tabs?.[productId] });\n\nconst ConnectedInventoryTabs = connect(mapStateToProps)(InventoryTabs);\n\nexport { ConnectedInventoryTabs as default, ConnectedInventoryTabs, InventoryTabs, InventoryTab };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport { useRouteDetail } from '../../hooks/useRouter';\nimport { ProductViewContext } from './productViewContext';\nimport { PageLayout, PageHeader, PageSection, PageToolbar, PageMessages, PageColumns } from '../pageLayout/pageLayout';\nimport { apiQueries } from '../../redux';\nimport { ConnectedGraphCard } from '../graphCard/graphCard';\nimport { ConnectedToolbar } from '../toolbar/toolbar';\nimport { ConnectedInventoryList } from '../inventoryList/inventoryList';\nimport { helpers } from '../../common';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport { ToolbarFieldGranularity } from '../toolbar/toolbarFieldGranularity';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport { ConnectedInventorySubscriptions } from '../inventorySubscriptions/inventorySubscriptions';\nimport { RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * ToDo: base for default product layouts, add additional props for various toolbars\n * Next steps include...\n * Consider being able to pass customized toolbars for GraphCard and the\n * various Inventory displays. Have to evaluate how to handle the global toolbar, one\n * consideration is creating optional widgets with self-contained state update ability\n * based off of context/props/etc.\n *\n * Moving existing products to this layout, or maintaining them \"as is\", then renaming and\n * relocating them to this directory if they've been customized beyond a basic layout.\n */\n/**\n * Display product columns.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Node|boolean} props.toolbarGraph\n * @param {boolean} props.toolbarGraphDescription\n * @param {Node|boolean} props.toolbarProduct\n * @param {Function} props.useRouteDetail\n * @returns {Node}\n */\nconst ProductView = ({\n  t,\n  toolbarGraph,\n  toolbarGraphDescription,\n  toolbarProduct,\n  useRouteDetail: useAliasRouteDetail\n}) => {\n  const { productParameter: routeProductLabel, productConfig } = useAliasRouteDetail();\n\n  const renderProduct = config => {\n    const {\n      graphTallyQuery,\n      inventoryHostsQuery,\n      inventorySubscriptionsQuery,\n      query,\n      initialToolbarFilters,\n      initialGuestsFilters,\n      initialInventoryFilters,\n      initialInventorySettings,\n      initialSubscriptionsInventoryFilters,\n      productId,\n      viewId\n    } = config;\n\n    if (!productId || !viewId) {\n      return null;\n    }\n\n    const {\n      graphTallyQuery: initialGraphTallyQuery,\n      inventoryHostsQuery: initialInventoryHostsQuery,\n      inventorySubscriptionsQuery: initialInventorySubscriptionsQuery,\n      toolbarQuery: initialToolbarQuery\n    } = apiQueries.parseRhsmQuery(query, { graphTallyQuery, inventoryHostsQuery, inventorySubscriptionsQuery });\n\n    let graphCardTooltip = null;\n\n    if (toolbarGraphDescription) {\n      graphCardTooltip = (\n        <Tooltip\n          content={<p>{t('curiosity-graph.cardHeadingDescription', { context: productId })}</p>}\n          position={TooltipPosition.top}\n          enableFlip={false}\n          distance={5}\n          entryDelay={100}\n          exitDelay={0}\n        >\n          <sup className=\"curiosity-icon__info\">\n            <InfoCircleIcon />\n          </sup>\n        </Tooltip>\n      );\n    }\n\n    const graphCardTitle = (\n      <React.Fragment>\n        {t('curiosity-graph.cardHeading', { context: productId })}\n        {graphCardTooltip}\n      </React.Fragment>\n    );\n\n    return (\n      <ProductViewContext.Provider value={config} key={`product_${productId}`}>\n        <PageToolbar>\n          {(React.isValidElement(toolbarProduct) && toolbarProduct) ||\n            (toolbarProduct !== false && (\n              <ConnectedToolbar\n                filterOptions={initialToolbarFilters}\n                productId={productId}\n                query={initialToolbarQuery}\n                viewId={viewId}\n              />\n            ))}\n        </PageToolbar>\n        <PageSection>\n          <ConnectedGraphCard\n            key={`graph_${productId}`}\n            query={initialGraphTallyQuery}\n            productId={productId}\n            viewId={viewId}\n            cardTitle={graphCardTitle}\n          >\n            {(React.isValidElement(toolbarGraph) && toolbarGraph) ||\n              (toolbarGraph !== false && (\n                <ToolbarFieldGranularity\n                  viewId={viewId}\n                  value={initialGraphTallyQuery[RHSM_API_QUERY_TYPES.GRANULARITY]}\n                />\n              ))}\n          </ConnectedGraphCard>\n        </PageSection>\n        <PageSection>\n          <InventoryTabs key={`inventory_${productId}`} productId={productId}>\n            <InventoryTab\n              key={`inventory_hosts_${productId}`}\n              title={t('curiosity-inventory.tabHosts', { context: ['noInstances', productId] })}\n            >\n              <ConnectedInventoryList\n                key={`inv_${productId}`}\n                filterGuestsData={initialGuestsFilters}\n                filterInventoryData={initialInventoryFilters}\n                productId={productId}\n                settings={initialInventorySettings}\n                query={initialInventoryHostsQuery}\n                viewId={viewId}\n              />\n            </InventoryTab>\n            {initialSubscriptionsInventoryFilters && (\n              <InventoryTab\n                key={`inventory_subs_${productId}`}\n                title={t('curiosity-inventory.tabSubscriptions', { context: productId })}\n              >\n                <ConnectedInventorySubscriptions\n                  key={`subs_${productId}`}\n                  filterInventoryData={initialSubscriptionsInventoryFilters}\n                  productId={productId}\n                  query={initialInventorySubscriptionsQuery}\n                  viewId={viewId}\n                />\n              </InventoryTab>\n            )}\n          </InventoryTabs>\n        </PageSection>\n      </ProductViewContext.Provider>\n    );\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader productLabel={routeProductLabel}>\n        {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: routeProductLabel })}\n      </PageHeader>\n      <PageMessages>\n        <BannerMessages />\n      </PageMessages>\n      <PageColumns>{productConfig.map(config => renderProduct(config))}</PageColumns>\n    </PageLayout>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), toolbarGraphDescription: boolean, toolbarProduct: (Node|boolean),\n *    useRouteDetail: Function}}\n */\nProductView.propTypes = {\n  t: PropTypes.func,\n  toolbarGraph: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n  toolbarGraphDescription: PropTypes.bool,\n  toolbarProduct: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n  useRouteDetail: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), toolbarGraphDescription: boolean, toolbarProduct: (Node|boolean),\n *    useRouteDetail: Function}}\n */\nProductView.defaultProps = {\n  t: translate,\n  toolbarGraph: null,\n  toolbarGraphDescription: false,\n  toolbarProduct: null,\n  useRouteDetail\n};\n\nexport { ProductView as default, ProductView };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Toolbar as PfToolbar,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup\n} from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport { Select } from '../form/select';\nimport { connect, reduxTypes, store } from '../../redux';\nimport { RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { toolbarHelpers } from './toolbarHelpers';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Application filter toolbar.\n *\n * @augments React.Component\n * @fires onClear\n * @fires onClearFilter\n * @fires onCategorySelect\n * @fires onSelect\n */\nclass Toolbar extends React.Component {\n  /**\n   * Clear all filters' state.\n   *\n   * @event onClear\n   */\n  onClear = () => {\n    const { hardFilterReset } = this.props;\n    const dispatchActions = [\n      { type: reduxTypes.toolbar.SET_ACTIVE_FILTERS, data: { activeFilters: new Set() } },\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR,\n        data: {\n          clearFilters: {\n            [RHSM_API_QUERY_TYPES.SLA]: null,\n            [RHSM_API_QUERY_TYPES.USAGE]: null\n          }\n        }\n      }\n    ];\n\n    if (hardFilterReset) {\n      dispatchActions.push({ type: reduxTypes.toolbar.SET_FILTER_TYPE, data: { currentFilter: null } });\n    }\n\n    this.setDispatch(dispatchActions, true);\n  };\n\n  /**\n   * Clear individual filter state.\n   *\n   * @event onClearFilter\n   * @param {string} categoryTitle\n   */\n  onClearFilter = categoryTitle => {\n    const { activeFilters, currentFilter, hardFilterReset } = this.props;\n\n    const categoryOptions = toolbarHelpers.getOptions();\n    const { value: categoryValue } = categoryOptions.options.find(({ title }) => title === categoryTitle) || {};\n\n    if (!categoryValue) {\n      return;\n    }\n\n    const updatedActiveFilters = new Set(activeFilters);\n    updatedActiveFilters.delete(categoryValue);\n\n    const dispatchActions = [\n      { type: reduxTypes.toolbar.SET_ACTIVE_FILTERS, data: { activeFilters: updatedActiveFilters } },\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR,\n        data: {\n          clearFilters: {\n            [categoryValue]: null\n          }\n        }\n      }\n    ];\n\n    if (hardFilterReset) {\n      const updatedCurrentFilter = (updatedActiveFilters.size > 0 && currentFilter) || null;\n      dispatchActions.push({ type: reduxTypes.toolbar.SET_FILTER_TYPE, data: { currentFilter: updatedCurrentFilter } });\n    }\n\n    this.setDispatch(dispatchActions, true);\n  };\n\n  /**\n   * Set Category selection.\n   *\n   * @event onCategorySelect\n   * @param {object} event\n   */\n  onCategorySelect = event => {\n    const { value } = event;\n    this.setDispatch({ type: reduxTypes.toolbar.SET_FILTER_TYPE, data: { currentFilter: value } });\n  };\n\n  /**\n   * Set select filter selection for dispatch.\n   *\n   * @param {object} params\n   * @param {object} params.event\n   * @param {string} params.field\n   */\n  onSelect = ({ event, field }) => {\n    const { activeFilters } = this.props;\n    const { value } = event;\n    const updatedActiveFilters = new Set(activeFilters).add(field);\n\n    this.setDispatch(\n      [\n        {\n          type: reduxTypes.toolbar.SET_ACTIVE_FILTERS,\n          data: { activeFilters: updatedActiveFilters }\n        },\n        {\n          type: reduxTypes.query.SET_QUERY_RHSM_TYPES[field],\n          data: { [field]: value }\n        }\n      ],\n      true\n    );\n  };\n\n  /**\n   * Dispatch a Redux store type.\n   *\n   * @param {Array|object} actions\n   * @param {boolean} resetPage\n   */\n  setDispatch(actions, resetPage = false) {\n    const { viewId } = this.props;\n    const updatedActions = ((Array.isArray(actions) && actions) || [actions]).map(({ type, data }) => ({\n      type,\n      viewId,\n      ...data\n    }));\n\n    if (resetPage) {\n      updatedActions.push({\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      });\n    }\n\n    store.dispatch(updatedActions);\n  }\n\n  /**\n   * Available, and selected select filter options.\n   *\n   * @param {string} field\n   * @returns {{optionsSelected: Array, options: Array }}\n   */\n  setSelectFilter(field) {\n    const { query } = this.props;\n    const options = toolbarHelpers.getOptions(field);\n    const currentFilter = this.getCurrentFilter();\n    let filter;\n\n    if (field) {\n      filter = typeof query?.[field] === 'string' && options.options.find(({ value }) => value === query?.[field]);\n    } else {\n      filter = options.options.find(({ value }) => value === currentFilter);\n    }\n\n    const optionsSelected = (filter?.title && [filter.title]) || (options?.selected && [options.selected]) || [];\n\n    return { options, optionsSelected };\n  }\n\n  /**\n   * Return the currentFilter, fallback to selected\n   *\n   * @returns {string|undefined}\n   */\n  getCurrentFilter() {\n    const { currentFilter, filterOptions } = this.props;\n\n    return (\n      currentFilter ||\n      filterOptions.find(({ selected }) => selected === true)?.id ||\n      (filterOptions.length === 1 && filterOptions[0]?.id)\n    );\n  }\n\n  /**\n   * A select filter node.\n   *\n   * @param {object} params\n   * @param {string} params.id\n   * @returns {object}\n   */\n  renderSelectFilter({ id: field }) {\n    const { t } = this.props;\n    const { options, optionsSelected } = this.setSelectFilter(field);\n    const currentFilter = this.getCurrentFilter();\n\n    return (\n      <ToolbarFilter\n        key={field}\n        chips={optionsSelected}\n        deleteChip={this.onClearFilter}\n        categoryName={t('curiosity-toolbar.category', { context: field })}\n        showToolbarItem={currentFilter === field}\n      >\n        <Select\n          aria-label={t('curiosity-toolbar.category', { context: field })}\n          onSelect={event => this.onSelect({ event, field })}\n          selectedOptions={optionsSelected}\n          placeholder={t('curiosity-toolbar.placeholder', { context: field })}\n          options={options.options}\n        />\n      </ToolbarFilter>\n    );\n  }\n\n  /**\n   * Render a filter toolbar.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { filterOptions, isDisabled, t } = this.props;\n\n    if (isDisabled) {\n      return null;\n    }\n\n    const { options: categoryOptions, optionsSelected: categoryOptionsSelected } = this.setSelectFilter();\n\n    return (\n      <PfToolbar\n        id=\"curiosity-toolbar\"\n        className=\"curiosity-toolbar pf-m-toggle-group-container ins-c-primary-toolbar\"\n        collapseListedFiltersBreakpoint=\"sm\"\n        clearAllFilters={this.onClear}\n        clearFiltersButtonText={t('curiosity-toolbar.clearFilters')}\n      >\n        <ToolbarContent>\n          <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"md\">\n            <ToolbarGroup variant=\"filter-group\">\n              {filterOptions.length !== 1 && (\n                <ToolbarItem>\n                  <Select\n                    aria-label={t('curiosity-toolbar.category')}\n                    onSelect={this.onCategorySelect}\n                    selectedOptions={categoryOptionsSelected}\n                    placeholder={t('curiosity-toolbar.placeholder')}\n                    options={categoryOptions.options}\n                    toggleIcon={<FilterIcon />}\n                  />\n                </ToolbarItem>\n              )}\n              {filterOptions.map(({ id, selected }) => this.renderSelectFilter({ id, selected }))}\n            </ToolbarGroup>\n          </ToolbarToggleGroup>\n        </ToolbarContent>\n      </PfToolbar>\n    );\n  }\n}\n\n/**\n * Prop types\n *\n * @type {{viewId: string, t: Function, activeFilters: Set, hardFilterReset: boolean, query: object,\n *     currentFilter: string, isDisabled: boolean, filterOptions: Array}}\n */\nToolbar.propTypes = {\n  query: PropTypes.shape({\n    [RHSM_API_QUERY_TYPES.SLA]: PropTypes.string,\n    [RHSM_API_QUERY_TYPES.USAGE]: PropTypes.string\n  }),\n  activeFilters: PropTypes.instanceOf(Set),\n  currentFilter: PropTypes.oneOf([RHSM_API_QUERY_TYPES.SLA, RHSM_API_QUERY_TYPES.USAGE]),\n  filterOptions: PropTypes.arrayOf(\n    PropTypes.shape({\n      filterType: PropTypes.oneOf(['select']),\n      id: PropTypes.oneOf([RHSM_API_QUERY_TYPES.SLA, RHSM_API_QUERY_TYPES.USAGE]),\n      selected: PropTypes.bool\n    })\n  ),\n  hardFilterReset: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  t: PropTypes.func,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{viewId: string, t: translate, activeFilters: Set, hardFilterReset: boolean, query: object,\n *     currentFilter: string, isDisabled: boolean, filterOptions: Array}}\n */\nToolbar.defaultProps = {\n  query: {},\n  activeFilters: new Set(),\n  currentFilter: null,\n  filterOptions: [\n    {\n      id: RHSM_API_QUERY_TYPES.SLA,\n      filterType: 'select'\n    },\n    {\n      id: RHSM_API_QUERY_TYPES.USAGE,\n      filterType: 'select',\n      selected: true\n    }\n  ],\n  hardFilterReset: false,\n  isDisabled: helpers.UI_DISABLED_TOOLBAR,\n  t: translate,\n  viewId: 'toolbar'\n};\n\n/**\n * Apply state to props.\n *\n * @param {object} state\n * @param {object} state.toolbar\n * @param {object} state.view\n * @param {object} props\n * @param {string} props.query\n * @param {string} props.viewId\n * @returns {object}\n */\nconst mapStateToProps = ({ toolbar, view }, { query: initialQuery, viewId }) => ({\n  ...toolbar.filters?.[viewId],\n  query: view.query?.[viewId] || initialQuery\n});\n\nconst ConnectedToolbar = connect(mapStateToProps)(Toolbar);\n\nexport { ConnectedToolbar as default, ConnectedToolbar, Toolbar };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, store, storeHooks } from '../../redux';\nimport { Select } from '../form/select';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.granularity', { context: type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Array} props.options\n * @param {Function} props.t\n * @param {string} props.value\n * @param {string} props.viewId\n * @returns {Node}\n */\nconst ToolbarFieldGranularity = ({ options, t, value, viewId }) => {\n  const updatedValue = storeHooks.reactRedux.useSelector(\n    ({ view }) => view.graphTallyQuery?.[viewId]?.[RHSM_API_QUERY_TYPES.GRANULARITY],\n    value\n  );\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  /**\n   * On select, dispatch type.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @returns {void}\n   */\n  const onSelect = event => {\n    const { startDate, endDate } = dateHelpers.getRangedDateTime(event.value);\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: event.value\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      }\n    ]);\n  };\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      data-test={ToolbarFieldGranularity.defaultProps.viewId}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{viewId: string, t: Function, options: Array, value: string}}\n */\nToolbarFieldGranularity.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  t: PropTypes.func,\n  value: PropTypes.oneOf([...Object.values(FIELD_TYPES)]),\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{viewId: string, t: translate, options: Array, value: string}}\n */\nToolbarFieldGranularity.defaultProps = {\n  options: toolbarFieldOptions,\n  t: translate,\n  value: FIELD_TYPES.DAILY,\n  viewId: 'toolbarFieldGranularity'\n};\n\nexport { ToolbarFieldGranularity as default, ToolbarFieldGranularity, toolbarFieldOptions };\n"],"names":["BannerMessages","messages","useAliasRouteDetail","useRouteDetail","useAliasAppMessages","useAppMessages","useState","hideAlerts","setHideAlerts","alerts","setAlerts","productId","pathParameter","productConfig","isProductConfig","length","query","apiQueries","appMessages","useShallowCompareEffect","dateHelpers","startDate","endDate","updatedGraphQuery","RHSM_API_QUERY_TYPES","GRANULARITY_TYPES","toISOString","storeHooks","updatedMessages","Object","entries","forEach","key","value","message","find","id","push","map","title","variant","AlertVariant","actionClose","AlertActionCloseButton","onClose","Alert","className","defaultProps","translate","context","helpers","appName","Button","isInline","component","icon","ExternalLinkAltIcon","iconPosition","target","href","GraphCard","cardTitle","children","error","getGraphReportsCapacity","graphData","meta","isDisabled","pending","useAliasProduct","useProduct","useAliasProductGraphConfig","useProductGraphConfig","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","settings","granularity","actionDisplay","data","Card","MinHeight","CardHeader","CardTitle","Title","headingLevel","size","CardActions","CardBody","Loader","GraphCardChart","makeMapStateToProps","reduxSelectors","ConnectedGraphCard","connect","dispatch","reduxActions","InventorySubscriptions","onColumnSort","updatedDirection","direction","props","updatedSortColumn","values","SORT_TYPES","_camelCase","SortByDirection","SORT_DIRECTION_TYPES","store","type","reduxTypes","viewId","console","warn","onPage","offset","perPage","onUpdateInventoryData","getSubscriptionsInventory","this","prevProps","_isEqual","filterInventoryData","listData","session","updatedColumnHeaders","updatedRows","cellData","inventoryListHelpers","filters","onSort","columnHeaders","cells","borders","TableVariant","rows","fulfilled","itemCount","perPageDefault","t","Bullseye","updatedPerPage","updatedOffset","isLastPage","paginationHelpers","minHeightContentRefreshKey","updateOnContent","isCompact","onPerPage","tableProps","colCount","keys","colWidth","cellWidth","rowCount","renderTable","CardFooter","isFooter","dropDirection","React","ConnectedInventorySubscriptions","InventoryTabs","onTab","index","tabs","activeTab","defaultActiveTab","updatedChildren","child","active","content","count","Tabs","ConnectedInventoryTabs","inventory","ProductView","toolbarGraph","toolbarGraphDescription","toolbarProduct","routeProductLabel","productParameter","PageLayout","PageHeader","productLabel","PageMessages","PageColumns","config","graphTallyQuery","inventoryHostsQuery","inventorySubscriptionsQuery","initialToolbarFilters","initialGuestsFilters","initialInventoryFilters","initialInventorySettings","initialSubscriptionsInventoryFilters","initialGraphTallyQuery","initialInventoryHostsQuery","initialInventorySubscriptionsQuery","initialToolbarQuery","toolbarQuery","graphCardTooltip","Tooltip","position","TooltipPosition","enableFlip","distance","entryDelay","exitDelay","graphCardTitle","ProductViewContext","PageToolbar","ConnectedToolbar","filterOptions","PageSection","ToolbarFieldGranularity","InventoryTab","ConnectedInventoryList","filterGuestsData","renderProduct","Toolbar","onClear","hardFilterReset","dispatchActions","activeFilters","Set","clearFilters","currentFilter","setDispatch","onClearFilter","categoryTitle","categoryValue","toolbarHelpers","options","updatedActiveFilters","updatedCurrentFilter","onCategorySelect","event","onSelect","field","add","actions","resetPage","updatedActions","Array","isArray","filter","getCurrentFilter","optionsSelected","selected","setSelectFilter","ToolbarFilter","chips","deleteChip","categoryName","showToolbarItem","Select","selectedOptions","placeholder","categoryOptions","categoryOptionsSelected","collapseListedFiltersBreakpoint","clearAllFilters","clearFiltersButtonText","ToolbarContent","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarGroup","ToolbarItem","renderSelectFilter","filterType","toolbar","view","initialQuery","toolbarFieldOptions","FIELD_TYPES","updatedValue","updatedOptions","option"],"sourceRoot":""}