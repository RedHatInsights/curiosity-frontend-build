{"version":3,"file":"js/8900.81848a2db562df54177a.js","mappings":"0QAuCMA,EAAa,SAAbA,EAAUC,GAAA,IACdC,EAAaD,EAAbC,cACAC,EAAUF,EAAVE,WACAC,EAASH,EAATG,UACAC,EAASJ,EAATI,UACAC,EAAML,EAANK,OACAC,EAAMN,EAANM,OACAC,EAASP,EAATO,UACAC,EAAOR,EAAPQ,QACAC,EAAOT,EAAPS,QAAO,OAEPC,IAAAA,cAACC,EAAAA,WAAY,CACXV,cAAeA,EACfE,UAAWA,EACXD,WAAYA,IAAeE,EAC3BA,UAAWA,EACXQ,UAAW,SAACC,EAAOC,EAAMC,GAAK,OAC5BT,EAAO,CAAEO,MAAAA,EAAOL,QAASO,EAAOV,OAAQW,EAAAA,kBAAAA,wBAA0CF,EAAMC,IAAS,EAEnGE,gBAAiB,SAACJ,EAAOE,GAAK,OAAKR,EAAU,CAAEM,MAAAA,EAAOL,QAASO,EAAOV,OAAQN,EAAWmB,aAAab,QAAS,EAC/GS,KAAME,EAAAA,kBAAAA,wBAA0CX,GAAUN,EAAWmB,aAAab,OAAQG,GAC1FA,QAASA,EACTC,QAASA,GACT,EA6BJV,EAAWmB,aAAe,CACxBjB,cAAe,OACfE,WAAW,EACXD,YAAY,EACZE,UAAW,EACXC,OAAQ,EACRC,OAAQa,EAAAA,GAAAA,KACRZ,UAAWY,EAAAA,GAAAA,KACXX,QAAS,GACTC,QAAS,K,sOCxFX,IAAMW,EAA0B,SAACN,EAAMN,GAAO,OAAKA,GAAWM,EAAO,IAAM,CAAC,EAStEO,EAA0B,SAAChB,EAAQG,GAAO,OAAKH,EAASG,EAAU,GAAK,CAAC,EAUxEc,EAAa,SAACjB,EAAQG,EAASJ,GAAS,OAC5CiB,EAAwBhB,EAAQG,KAAae,KAAKC,KAAKpB,EAAYI,EAAQ,EAEvEQ,EAAoB,CACxBI,wBAAAA,EACAC,wBAAAA,EACAC,WAAAA,E","sources":["webpack:///./src/components/pagination/pagination.js","webpack:///./src/components/pagination/paginationHelpers.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Pagination as PfPagination } from '@patternfly/react-core';\nimport { helpers } from '../../common';\nimport { paginationHelpers } from './paginationHelpers';\n\n/**\n * Inventory paging.\n *\n * @memberof Components\n * @module Pagination\n * @property {module} PaginationHelpers\n */\n\n/**\n * ToDo: Apply locale/translation to the PF Pagination \"titles\" prop.\n */\n/**\n * FixMe: PF Pagination component offset property is either broken, confusing to implement, ...\n * or requires an equivalent effort to using page. There appears to be confusing behavior in how\n * the next offset range is calculated. It fails to update when passing in the next expected\n * sequence using the returned starting index. We'll continue emulating the use of \"offset\"\n * by performing our own calculation and applying it to the page property instead.\n */\n/**\n * Pagination component.\n *\n * @param {object} props\n * @param {string} props.dropDirection\n * @param {boolean} props.isDisabled\n * @param {boolean} props.isCompact\n * @param {number} props.itemCount\n * @param {number} props.offset\n * @param {Function} props.onPage\n * @param {Function} props.onPerPage\n * @param {number} props.perPage\n * @param {string} props.variant\n * @returns {React.ReactNode}\n */\nconst Pagination = ({\n  dropDirection,\n  isDisabled,\n  isCompact,\n  itemCount,\n  offset,\n  onPage,\n  onPerPage,\n  perPage,\n  variant\n}) => (\n  <PfPagination\n    dropDirection={dropDirection}\n    isCompact={isCompact}\n    isDisabled={isDisabled || !itemCount}\n    itemCount={itemCount}\n    onSetPage={(event, page, limit) =>\n      onPage({ event, perPage: limit, offset: paginationHelpers.calculateOffsetFromPage(page, limit) })\n    }\n    onPerPageSelect={(event, limit) => onPerPage({ event, perPage: limit, offset: Pagination.defaultProps.offset })}\n    page={paginationHelpers.calculatePageFromOffset(offset || Pagination.defaultProps.offset, perPage)}\n    perPage={perPage}\n    variant={variant}\n  />\n);\n\n/**\n * Prop types\n *\n * @type {{isCompact: boolean, onPage: Function, perPage: number, offset: number,\n *     dropDirection: string, onPerPage: Function, variant: null, isDisabled: boolean,\n *     itemCount: number}}\n */\nPagination.propTypes = {\n  dropDirection: PropTypes.oneOf(['up', 'down']),\n  isCompact: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  itemCount: PropTypes.number,\n  offset: PropTypes.number,\n  onPage: PropTypes.func,\n  onPerPage: PropTypes.func,\n  perPage: PropTypes.number,\n  variant: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{isCompact: boolean, onPage: Function, perPage: number, offset: number,\n *     dropDirection: string, onPerPage: Function, variant: null, isDisabled: boolean,\n *     itemCount: number}}\n */\nPagination.defaultProps = {\n  dropDirection: 'down',\n  isCompact: false,\n  isDisabled: false,\n  itemCount: 0,\n  offset: 0,\n  onPage: helpers.noop,\n  onPerPage: helpers.noop,\n  perPage: 10,\n  variant: null\n};\n\nexport { Pagination as default, Pagination };\n","/**\n * @memberof Pagination\n * @module PaginationHelpers\n */\n\n/**\n * Calculate offset from page and perPage/limit.\n *\n * @param {number} page\n * @param {number} perPage\n * @returns {number}\n */\nconst calculateOffsetFromPage = (page, perPage) => perPage * (page - 1) || 0;\n\n/**\n * Calculate page from offset and perPage/limit\n *\n * @param {number} offset\n * @param {number} perPage\n * @returns {number}\n */\nconst calculatePageFromOffset = (offset, perPage) => offset / perPage + 1 || 1;\n\n/**\n * Determine if paging is on the last page.\n *\n * @param {number} offset\n * @param {number} perPage\n * @param {number} itemCount\n * @returns {boolean}\n */\nconst isLastPage = (offset, perPage, itemCount) =>\n  calculatePageFromOffset(offset, perPage) === Math.ceil(itemCount / perPage);\n\nconst paginationHelpers = {\n  calculateOffsetFromPage,\n  calculatePageFromOffset,\n  isLastPage\n};\n\nexport {\n  paginationHelpers as default,\n  paginationHelpers,\n  calculateOffsetFromPage,\n  calculatePageFromOffset,\n  isLastPage\n};\n"],"names":["Pagination","_ref","dropDirection","isDisabled","isCompact","itemCount","offset","onPage","onPerPage","perPage","variant","React","PfPagination","onSetPage","event","page","limit","paginationHelpers","onPerPageSelect","defaultProps","helpers","calculateOffsetFromPage","calculatePageFromOffset","isLastPage","Math","ceil"],"sourceRoot":""}