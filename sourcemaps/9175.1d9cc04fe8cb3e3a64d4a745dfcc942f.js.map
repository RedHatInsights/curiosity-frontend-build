{"version":3,"file":"js/9175.1651542007418.69b34a86178edf196f95.js","mappings":"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","sources":["webpack:///./src/components/bannerMessages/bannerMessages.js","webpack:///./src/components/bannerMessages/bannerMessagesContext.js","webpack:///./src/components/graphCard/graphCard.js","webpack:///./src/components/graphCard/graphCardMetric.js","webpack:///./src/components/graphCard/graphCardMetricTotals.js","webpack:///./src/components/graphCard/graphCardMetrics.js","webpack:///./src/components/productView/productView.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, AlertActionCloseButton, AlertVariant, Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { useShallowCompareEffect } from 'react-use';\nimport { useGetAppMessages } from './bannerMessagesContext';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Render banner messages.\n *\n * @param {object} props\n * @param {Array} props.messages\n * @param {Function} props.useGetAppMessages\n * @returns {React.ReactNode}\n */\nconst BannerMessages = ({ messages, useGetAppMessages: useAliasGetAppMessages }) => {\n  const [hideAlerts, setHideAlerts] = useState({});\n  const [alerts, setAlerts] = useState([]);\n  const { data: appMessages } = useAliasGetAppMessages();\n\n  useShallowCompareEffect(() => {\n    const updatedMessages = [];\n\n    if (messages.length) {\n      Object.entries(appMessages).forEach(([key, value]) => {\n        if (hideAlerts[key] !== true && value === true) {\n          const message = messages.find(({ id }) => id === key);\n\n          if (message) {\n            updatedMessages.push({\n              key,\n              ...message\n            });\n          }\n        }\n      });\n    }\n\n    setAlerts(\n      updatedMessages.map(({ key, message, title, variant = AlertVariant.info }) => {\n        const actionClose = <AlertActionCloseButton onClose={() => setHideAlerts({ ...hideAlerts, [key]: true })} />;\n\n        return (\n          <Alert actionClose={actionClose} key={key} title={title} variant={variant}>\n            {message}\n          </Alert>\n        );\n      })\n    );\n  }, [appMessages, hideAlerts, messages]);\n\n  if (alerts?.length) {\n    return <div className=\"curiosity-banner-messages\">{alerts}</div>;\n  }\n\n  return null;\n};\n\n/**\n * Prop types.\n *\n * @type {{useGetAppMessages: Function, messages: Array}}\n */\nBannerMessages.propTypes = {\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.node.isRequired,\n      message: PropTypes.node.isRequired,\n      variant: PropTypes.oneOf([...Object.values(AlertVariant)])\n    })\n  ),\n  useGetAppMessages: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGetAppMessages: Function, messages: Array}}\n */\nBannerMessages.defaultProps = {\n  messages: [\n    {\n      id: 'cloudigradeMismatch',\n      title: translate('curiosity-banner.dataMismatchTitle'),\n      message: translate(\n        'curiosity-banner.dataMismatchMessage',\n        {\n          context: helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS !== '' && 'cloudigradeMismatch',\n          appName: helpers.UI_DISPLAY_NAME\n        },\n        [\n          <Button\n            isInline\n            component=\"a\"\n            variant=\"link\"\n            icon={<ExternalLinkAltIcon />}\n            iconPosition=\"right\"\n            target=\"_blank\"\n            href={helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS}\n          />\n        ]\n      )\n    }\n  ],\n  useGetAppMessages\n};\n\nexport { BannerMessages as default, BannerMessages };\n","import { useShallowCompareEffect } from 'react-use';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { dateHelpers } from '../../common';\nimport {\n  rhsmConstants,\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\n\n/**\n * ToDo: useGetAppMessages is setup to work with existing Tally response, pre-metrics\n * Banner messages scans the returned Tally listing for the HAS_CLOUDIGRADE_MISMATCH. In the future\n * this may need to be updated to pull from the \"meta\" object part of the Tally response.\n */\n/**\n * Get app messages.\n *\n * @param {object} options\n * @param {Function} options.getMessageReports\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useProductQuery\n * @param {Function} options.useSelectorsResponse\n * @returns {object}\n */\nconst useGetAppMessages = ({\n  getMessageReports = reduxActions.rhsm.getMessageReports,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductQuery();\n  const dispatch = useAliasDispatch();\n  const { error, fulfilled, pending, data } = useAliasSelectorsResponse({\n    id: 'messages',\n    selector: ({ messages }) => messages?.report?.[productId]\n  });\n\n  useShallowCompareEffect(() => {\n    if (productId) {\n      const { startDate, endDate } = dateHelpers.getRangedDateTime('CURRENT');\n      const updatedQuery = {\n        ...query,\n        [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY,\n        [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate.toISOString(),\n        [RHSM_API_QUERY_SET_TYPES.END_DATE]: endDate.toISOString()\n      };\n\n      getMessageReports(productId, updatedQuery)(dispatch);\n    }\n  }, [productId, query]);\n\n  const updatedData = {\n    cloudigradeMismatch: false\n  };\n\n  if (fulfilled) {\n    const { messages = {} } = data || {};\n\n    updatedData.cloudigradeMismatch =\n      messages?.data\n        ?.reverse()\n        ?.find(\n          ({ [rhsmConstants.RHSM_API_RESPONSE_TALLY_META_TYPES.HAS_CLOUDIGRADE_MISMATCH]: mismatch }) =>\n            mismatch === true\n        ) !== undefined;\n  }\n\n  return {\n    error,\n    fulfilled,\n    pending,\n    data: {\n      ...updatedData\n    }\n  };\n};\n\nconst context = {\n  useGetAppMessages\n};\n\nexport { context as default, context, useGetAppMessages };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProductGraphConfig } from '../productView/productViewContext';\nimport { helpers } from '../../common';\nimport { GraphCardMetrics } from './graphCardMetrics';\nimport { GraphCardMetric } from './graphCardMetric';\nimport { graphCardHelpers } from './graphCardHelpers';\n\n/**\n * Set up graph cards. Expand filters with base graph settings.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useProductGraphConfig\n * @returns {Node}\n */\nconst GraphCard = ({ isDisabled, useProductGraphConfig: useAliasProductGraphConfig }) => {\n  const { filters } = useAliasProductGraphConfig();\n  const { groupedFilters, standaloneFilters } = graphCardHelpers.generateChartSettings(filters);\n\n  if (isDisabled) {\n    return null;\n  }\n\n  return (\n    <React.Fragment>\n      {(groupedFilters?.length && <GraphCardMetrics metricFilters={groupedFilters} />) || null}\n      {standaloneFilters.map(metricFilter => (\n        <GraphCardMetric key={`graphCard_${metricFilter.id}`} metricFilter={metricFilter} />\n      ))}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphConfig: Function, isDisabled: boolean}}\n */\nGraphCard.propTypes = {\n  isDisabled: PropTypes.bool,\n  useProductGraphConfig: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphConfig: Function, isDisabled: boolean}}\n */\nGraphCard.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_GRAPH,\n  useProductGraphConfig\n};\n\nexport { GraphCard as default, GraphCard };\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { GraphCardChart } from './graphCardChart';\nimport { useProductGraphConfig } from '../productView/productViewContext';\nimport { GraphCardContext } from './graphCardContext';\nimport { rhsmConstants } from '../../services/rhsm/rhsmConstants';\nimport { GraphCardMetricTotals } from './graphCardMetricTotals';\n\n/**\n * Display a single graph metric.\n *\n * @param {object} props\n * @param {object} props.metricFilter\n * @param {Function} props.useProductGraphConfig\n * @returns {Node}\n */\nconst GraphCardMetric = ({ metricFilter, useProductGraphConfig: useAliasProductGraphConfig }) => {\n  const [context, setContext] = useState({});\n  const { settings } = useAliasProductGraphConfig();\n\n  useEffect(() => {\n    setContext({\n      settings: {\n        padding: {\n          bottom: 75,\n          left: 75,\n          right: 45,\n          top: 45\n        },\n        ...settings,\n        isStandalone: true,\n        metric: metricFilter,\n        metrics: [metricFilter]\n      }\n    });\n  }, [metricFilter, settings, setContext]);\n\n  return (\n    <GraphCardContext.Provider value={context}>\n      <GraphCardMetricTotals>\n        <GraphCardChart />\n      </GraphCardMetricTotals>\n    </GraphCardContext.Provider>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphConfig: Function, metricFilter: object}}\n */\nGraphCardMetric.propTypes = {\n  metricFilter: PropTypes.shape({\n    id: PropTypes.oneOf([...Object.values(rhsmConstants.RHSM_API_PATH_METRIC_TYPES)])\n  }),\n  useProductGraphConfig: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphConfig: Function, metricFilter: object}}\n */\nGraphCardMetric.defaultProps = {\n  metricFilter: {},\n  useProductGraphConfig\n};\n\nexport { GraphCardMetric as default, GraphCardMetric };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter, CardTitle, Flex, FlexItem } from '@patternfly/react-core';\nimport moment from 'moment';\nimport _camelCase from 'lodash/camelCase';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useMetricsSelector } from './graphCardContext';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { Loader, SkeletonSize } from '../loader/loader';\nimport { dateHelpers, helpers } from '../../common';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldRangedMonthly';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Display totals for a single metric.\n *\n * @param {object} props\n * @param {Node} props.children\n * @param {Function} props.t\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardMetricTotals = ({\n  children,\n  t,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate } = useAliasProductGraphTallyQuery();\n  const { pending, error, fulfilled, dataSets = [] } = useAliasMetricsSelector();\n  const { data = [], id: metricId, meta = {} } = dataSets[0] || {};\n  const { date: lastDate, hasData: lastHasData, y: lastValue } = data[data.length - 1] || {};\n  const {\n    date: currentDate,\n    hasData: currentHasData,\n    y: currentValue\n  } = data.find(({ isCurrentDate }) => isCurrentDate === true) || {};\n\n  const { totalMonthlyDate: monthlyDate, totalMonthlyHasData: monthlyHasData, totalMonthlyValue: monthlyValue } = meta;\n\n  const { title: selectedMonth, isCurrent } =\n    toolbarFieldOptions.find(\n      option => option.title === startDate || option.value.startDate.toISOString() === startDate\n    ) || {};\n\n  const dailyDate = isCurrent ? currentDate : lastDate;\n  const dailyHasData = isCurrent ? currentHasData : lastHasData;\n  const dailyValue = isCurrent ? currentValue : lastValue;\n\n  return (\n    <Flex data-test={`graphMetricTotals-${_camelCase(metricId)}`} className=\"curiosity-usage-graph__totals\">\n      <Flex flex={{ default: 'flex_1' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-column\">\n          <Card\n            data-test=\"graphDailyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric_dailyTotal', {\n                context: metricId,\n                month: selectedMonth\n              })}\n            </CardTitle>\n            <MinHeight key=\"currentBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric_total',\n                      {\n                        context: (dailyHasData && metricId) || '',\n                        total: helpers\n                          .numberDisplay(dailyValue)\n                          ?.format({\n                            average: true,\n                            mantissa: 5,\n                            trimMantissa: true,\n                            lowPrecision: false\n                          })\n                          ?.toUpperCase()\n                      },\n                      [<strong title={dailyValue} aria-label={dailyValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"currentFooter\">\n              <CardFooter>\n                <div className={(!dailyHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    dailyDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(dailyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n          <Card\n            data-test=\"graphMonthlyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric_monthlyTotal', {\n                context: metricId,\n                month: selectedMonth\n              })}\n            </CardTitle>\n            <MinHeight key=\"totalMonthlyBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric_total',\n                      {\n                        context: (monthlyHasData && metricId) || '',\n                        total: helpers\n                          .numberDisplay(monthlyValue)\n                          ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: false })\n                          ?.toUpperCase()\n                      },\n                      [<strong title={monthlyValue} aria-label={monthlyValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"totalMonthlyFooter\">\n              <CardFooter>\n                <div className={(!monthlyHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    monthlyDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(monthlyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n        </FlexItem>\n      </Flex>\n      <Flex flex={{ default: 'flex_3' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-graph-column\">{children}</FlexItem>\n      </Flex>\n    </Flex>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.propTypes = {\n  children: PropTypes.node,\n  t: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.defaultProps = {\n  children: null,\n  t: translate,\n  useMetricsSelector,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardMetricTotals as default, GraphCardMetricTotals };\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { GraphCardChart } from './graphCardChart';\nimport { useProductGraphConfig } from '../productView/productViewContext';\nimport { GraphCardContext } from './graphCardContext';\nimport { rhsmConstants } from '../../services/rhsm/rhsmConstants';\n\n/**\n * Display a single graph metric.\n *\n * @param {object} props\n * @param {Array} props.metricFilters\n * @param {Function} props.useProductGraphConfig\n * @returns {Node}\n */\nconst GraphCardMetrics = ({ metricFilters, useProductGraphConfig: useAliasProductGraphConfig }) => {\n  const [context, setContext] = useState({});\n  const { settings } = useAliasProductGraphConfig();\n\n  useEffect(() => {\n    setContext({\n      settings: {\n        ...settings,\n        isStandalone: false,\n        metric: undefined,\n        metrics: metricFilters\n      }\n    });\n  }, [metricFilters, settings, setContext]);\n\n  return (\n    <GraphCardContext.Provider value={context}>\n      <GraphCardChart />\n    </GraphCardContext.Provider>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphConfig: Function, metricFilters: Array}}\n */\nGraphCardMetrics.propTypes = {\n  metricFilters: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.oneOf([...Object.values(rhsmConstants.RHSM_API_PATH_METRIC_TYPES)])\n    })\n  ),\n  useProductGraphConfig: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphConfig: Function, metricFilters: Array}}\n */\nGraphCardMetrics.defaultProps = {\n  metricFilters: [],\n  useProductGraphConfig\n};\n\nexport { GraphCardMetrics as default, GraphCardMetrics };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport { useRouteDetail } from '../../hooks/useRouter';\nimport { ProductViewContext } from './productViewContext';\nimport { PageLayout, PageHeader, PageSection, PageToolbar, PageMessages, PageColumns } from '../pageLayout/pageLayout';\nimport { apiQueries } from '../../redux';\nimport { ConnectedGraphCard as ConnectedGraphCardDeprecated } from '../graphCard/graphCard.deprecated';\nimport { GraphCard } from '../graphCard/graphCard';\nimport { Toolbar } from '../toolbar/toolbar';\nimport { ConnectedInventoryList as ConnectedInventoryListDeprecated } from '../inventoryCard/inventoryList.deprecated';\nimport { InventoryCard } from '../inventoryCard/inventoryCard';\nimport { helpers } from '../../common';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport { SelectPosition } from '../form/select';\nimport { ToolbarFieldGranularity } from '../toolbar/toolbarFieldGranularity';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport { InventoryCardSubscriptions } from '../inventoryCardSubscriptions/inventoryCardSubscriptions';\nimport { RHSM_API_PATH_PRODUCT_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * ToDo: base for default product layouts, add additional props for various toolbars\n * Next steps include...\n * Consider being able to pass customized toolbars for GraphCard and the\n * various Inventory displays. Have to evaluate how to handle the global toolbar, one\n * consideration is creating optional widgets with self-contained state update ability\n * based off of context/props/etc.\n *\n * Moving existing products to this layout, or maintaining them \"as is\", then renaming and\n * relocating them to this directory if they've been customized beyond a basic layout.\n */\n/**\n * Display product columns.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Node|boolean} props.toolbarGraph\n * @param {boolean} props.toolbarGraphDescription\n * @param {Function} props.useRouteDetail\n * @returns {Node}\n */\nconst ProductView = ({ t, toolbarGraph, toolbarGraphDescription, useRouteDetail: useAliasRouteDetail }) => {\n  const { productParameter: routeProductLabel, productConfig } = useAliasRouteDetail();\n\n  const renderProduct = config => {\n    const {\n      graphTallyQuery,\n      inventoryHostsQuery,\n      inventorySubscriptionsQuery,\n      query,\n      initialGuestsFilters,\n      initialInventoryFilters,\n      initialInventorySettings,\n      initialSubscriptionsInventoryFilters,\n      productId,\n      viewId\n    } = config;\n\n    if (!productId || !viewId) {\n      return null;\n    }\n\n    const { graphTallyQuery: initialGraphTallyQuery, inventoryHostsQuery: initialInventoryHostsQuery } =\n      apiQueries.parseRhsmQuery(query, { graphTallyQuery, inventoryHostsQuery, inventorySubscriptionsQuery });\n\n    let graphCardTooltip = null;\n\n    if (toolbarGraphDescription) {\n      graphCardTooltip = (\n        <Tooltip\n          content={<p>{t('curiosity-graph.cardHeadingDescription', { context: productId })}</p>}\n          position={TooltipPosition.top}\n          enableFlip={false}\n          distance={5}\n          entryDelay={100}\n          exitDelay={0}\n        >\n          <sup className=\"curiosity-icon__info\">\n            <InfoCircleIcon />\n          </sup>\n        </Tooltip>\n      );\n    }\n\n    const graphCardTitle = (\n      <React.Fragment>\n        {t('curiosity-graph.cardHeading', { context: productId })}\n        {graphCardTooltip}\n      </React.Fragment>\n    );\n\n    return (\n      <ProductViewContext.Provider value={config} key={`product_${productId}`}>\n        <PageMessages>{productId !== RHSM_API_PATH_PRODUCT_TYPES.RHOSAK && <BannerMessages />}</PageMessages>\n        <PageToolbar>\n          <Toolbar />\n        </PageToolbar>\n        <PageSection>\n          {productId !== RHSM_API_PATH_PRODUCT_TYPES.RHOSAK && (\n            <ConnectedGraphCardDeprecated\n              key={`graph_${productId}`}\n              query={initialGraphTallyQuery}\n              productId={productId}\n              viewId={viewId}\n              cardTitle={graphCardTitle}\n            >\n              {(React.isValidElement(toolbarGraph) && toolbarGraph) ||\n                (toolbarGraph !== false && <ToolbarFieldGranularity position={SelectPosition.right} />)}\n            </ConnectedGraphCardDeprecated>\n          )}\n          {productId === RHSM_API_PATH_PRODUCT_TYPES.RHOSAK && <GraphCard />}\n        </PageSection>\n        <PageSection\n          className={(productId === RHSM_API_PATH_PRODUCT_TYPES.RHOSAK && 'curiosity-page-section__tabs') || ''}\n        >\n          <InventoryTabs\n            key={`inventory_${productId}`}\n            productId={productId}\n            isDisabled={\n              (!initialInventoryFilters && !initialSubscriptionsInventoryFilters) || helpers.UI_DISABLED_TABLE\n            }\n          >\n            {!helpers.UI_DISABLED_TABLE_HOSTS &&\n              productId !== RHSM_API_PATH_PRODUCT_TYPES.RHOSAK &&\n              initialInventoryFilters && (\n                <InventoryTab\n                  key={`inventory_hosts_${productId}`}\n                  title={t('curiosity-inventory.tabHosts', { context: ['noInstances', productId] })}\n                >\n                  <ConnectedInventoryListDeprecated\n                    key={`inv_${productId}`}\n                    filterGuestsData={initialGuestsFilters}\n                    filterInventoryData={initialInventoryFilters}\n                    productId={productId}\n                    settings={initialInventorySettings}\n                    query={initialInventoryHostsQuery}\n                    viewId={viewId}\n                  />\n                </InventoryTab>\n              )}\n            {!helpers.UI_DISABLED_TABLE_INSTANCES &&\n              productId === RHSM_API_PATH_PRODUCT_TYPES.RHOSAK &&\n              initialInventoryFilters && (\n                <InventoryTab\n                  key={`inventory_instances_${productId}`}\n                  title={t('curiosity-inventory.tabInstances', { context: ['noInstances', productId] })}\n                >\n                  <InventoryCard />\n                </InventoryTab>\n              )}\n            {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && initialSubscriptionsInventoryFilters && (\n              <InventoryTab\n                key={`inventory_subs_${productId}`}\n                title={t('curiosity-inventory.tabSubscriptions', { context: productId })}\n              >\n                <InventoryCardSubscriptions />\n              </InventoryTab>\n            )}\n          </InventoryTabs>\n        </PageSection>\n      </ProductViewContext.Provider>\n    );\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader productLabel={routeProductLabel}>\n        {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: routeProductLabel })}\n      </PageHeader>\n      <PageColumns>{productConfig.map(config => renderProduct(config))}</PageColumns>\n    </PageLayout>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), toolbarGraphDescription: boolean, useRouteDetail: Function}}\n */\nProductView.propTypes = {\n  t: PropTypes.func,\n  toolbarGraph: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n  toolbarGraphDescription: PropTypes.bool,\n  useRouteDetail: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), toolbarGraphDescription: boolean, useRouteDetail: Function}}\n */\nProductView.defaultProps = {\n  t: translate,\n  toolbarGraph: null,\n  toolbarGraphDescription: false,\n  useRouteDetail\n};\n\nexport { ProductView as default, ProductView };\n"],"names":["BannerMessages","messages","useAliasGetAppMessages","useGetAppMessages","useState","hideAlerts","setHideAlerts","alerts","setAlerts","appMessages","data","useShallowCompareEffect","updatedMessages","length","Object","entries","forEach","key","value","message","find","id","push","map","title","variant","AlertVariant","actionClose","AlertActionCloseButton","onClose","Alert","className","defaultProps","translate","context","helpers","appName","Button","isInline","component","icon","ExternalLinkAltIcon","iconPosition","target","href","getMessageReports","reduxActions","useDispatch","useAliasDispatch","storeHooks","useProduct","useAliasProduct","useProductQuery","useAliasProductQuery","useSelectorsResponse","useAliasSelectorsResponse","productId","query","dispatch","selector","report","error","fulfilled","pending","dateHelpers","startDate","endDate","updatedQuery","RHSM_API_QUERY_SET_TYPES","GRANULARITY_TYPES","toISOString","updatedData","cloudigradeMismatch","undefined","reverse","rhsmConstants","GraphCard","isDisabled","filters","useAliasProductGraphConfig","useProductGraphConfig","graphCardHelpers","groupedFilters","standaloneFilters","GraphCardMetrics","metricFilters","metricFilter","GraphCardMetric","setContext","settings","useEffect","padding","bottom","left","right","top","isStandalone","metric","metrics","GraphCardContext","GraphCardMetricTotals","GraphCardChart","children","t","useAliasMetricsSelector","useMetricsSelector","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","dataSets","metricId","meta","lastDate","date","lastHasData","hasData","lastValue","y","isCurrentDate","currentDate","currentHasData","currentValue","monthlyDate","totalMonthlyDate","monthlyHasData","totalMonthlyHasData","monthlyValue","totalMonthlyValue","toolbarFieldOptions","option","selectedMonth","isCurrent","dailyDate","dailyHasData","dailyValue","Flex","_camelCase","flex","default","direction","alignSelf","FlexItem","Card","CardTitle","month","MinHeight","CardBody","Loader","skeletonProps","size","SkeletonSize","total","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","CardFooter","moment","ProductView","toolbarGraph","toolbarGraphDescription","useAliasRouteDetail","useRouteDetail","routeProductLabel","productParameter","productConfig","PageLayout","PageHeader","productLabel","PageColumns","config","graphTallyQuery","inventoryHostsQuery","inventorySubscriptionsQuery","initialGuestsFilters","initialInventoryFilters","initialInventorySettings","initialSubscriptionsInventoryFilters","viewId","apiQueries","initialGraphTallyQuery","initialInventoryHostsQuery","graphCardTooltip","Tooltip","content","position","TooltipPosition","enableFlip","distance","entryDelay","exitDelay","graphCardTitle","ProductViewContext","PageMessages","RHSM_API_PATH_PRODUCT_TYPES","PageToolbar","Toolbar","PageSection","ConnectedGraphCard","cardTitle","React","ToolbarFieldGranularity","SelectPosition","InventoryTab","ConnectedInventoryList","filterGuestsData","filterInventoryData","InventoryCard","InventoryCardSubscriptions","renderProduct"],"sourceRoot":""}