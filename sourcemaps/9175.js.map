{"version":3,"file":"js/9175.1668717095700.e1a3439d2bf484368a21.js","mappings":"yUAiBMA,EAAiB,SAAH,GAAgE,IAA1DC,EAAQ,EAARA,SAA6BC,EAAsB,EAAzCC,kBAClC,GAAoCC,EAAAA,EAAAA,UAAS,CAAC,GAAE,eAAzCC,EAAU,KAAEC,EAAa,KAChC,GAA4BF,EAAAA,EAAAA,UAAS,IAAG,eAAjCG,EAAM,KAAEC,EAAS,KACVC,EAAgBP,IAAtBQ,KAiCR,OA/BAC,EAAAA,EAAAA,IAAwB,WACtB,IAAMC,EAAkB,GAEpBX,EAASY,QACXC,OAAOC,QAAQN,GAAaO,SAAQ,YAAkB,mBAAhBC,EAAG,KAAEC,EAAK,KAC9C,IAAwB,IAApBb,EAAWY,KAA2B,IAAVC,EAAgB,CAC9C,IAAMC,EAAUlB,EAASmB,MAAK,YAAK,SAAFC,KAAgBJ,CAAG,IAEhDE,GACFP,EAAgBU,MAAK,QACnBL,IAAAA,GACGE,GAGT,CACF,IAGFX,EACEI,EAAgBW,KAAI,YAA0D,IAAvDN,EAAG,EAAHA,IAAKE,EAAO,EAAPA,QAASK,EAAK,EAALA,MAAK,IAAEC,QAAAA,OAAO,IAAG,EAAAC,EAAAA,aAAAA,KAAiB,EAC/DC,EAAc,kBAAC,EAAAC,uBAAsB,CAACC,QAAS,kBAAMvB,GAAc,kBAAKD,GAAU,cAAGY,GAAM,IAAO,IAExG,OACE,kBAAC,EAAAa,MAAK,CAACH,YAAaA,EAAaV,IAAKA,EAAKO,MAAOA,EAAOC,QAASA,GAC/DN,EAGP,IAEJ,GAAG,CAACV,EAAaJ,EAAYJ,IAEzBM,SAAAA,EAAQM,OACH,yBAAKkB,UAAU,6BAA6BxB,GAG9C,IACT,EAwBAP,EAAegC,aAAe,CAC5B/B,SAAU,CACR,CACEoB,GAAI,sBACJG,OAAOS,EAAAA,EAAAA,WAAU,sCACjBd,SAASc,EAAAA,EAAAA,WACP,uCACA,CACEC,QAA6D,KAApDC,EAAAA,GAAAA,yCAA0D,sBACnEC,QAASD,EAAAA,GAAAA,iBAEX,CACE,kBAAC,EAAAE,OAAM,CACLC,UAAQ,EACRC,UAAU,IACVd,QAAQ,OACRe,KAAM,kBAAC,EAAAC,oBAAmB,MAC1BC,aAAa,QACbC,OAAO,SACPC,KAAMT,EAAAA,GAAAA,8CAMhBhC,kBAAAA,EAAAA,kB,wNCjFIA,EAAoB,WAMf,6DAAP,CAAC,EAAC,IALJ0C,kBAAAA,OAAiB,IAAG,EAAAC,EAAAA,GAAAA,KAAAA,kBAAmC,MACvDC,YAAaC,OAAgB,IAAG,EAAAC,EAAAA,GAAAA,WAAAA,YAAiC,MACjEC,WAAYC,OAAe,IAAG,EAAAD,EAAAA,WAAU,MACxCE,gBAAiBC,OAAoB,IAAG,EAAAD,EAAAA,gBAAe,MACvDE,qBAAsBC,OAAyB,IAAG,EAAAN,EAAAA,GAAAA,WAAAA,qBAA0C,EAE5F,EAAsBE,IAAdK,EAAS,EAATA,UACFC,EAAQJ,IACRK,EAAWV,IACjB,EAA4CO,EAA0B,CACpElC,GAAI,WACJsC,SAAU,kBAAG1D,EAAQ,EAARA,SAAQ,OAAOA,SAAgB,QAAR,EAARA,EAAU2D,cAAM,WAAR,EAAR,EAAmBJ,EAAU,IAFnDK,EAAK,EAALA,MAAOC,EAAS,EAATA,UAAWC,EAAO,EAAPA,QAASrD,EAAI,EAAJA,MAKnCC,EAAAA,EAAAA,IAAwB,WACtB,GAAI6C,EAAW,OACb,EAA+BQ,EAAAA,GAAAA,kBAA8B,WAArDC,EAAS,EAATA,UAAWC,EAAO,EAAPA,QACbC,GAAe,kBAChBV,GAAK,mBACPW,EAAAA,GAAAA,YAAuCC,EAAAA,GAAAA,QAAuB,SAC9DD,EAAAA,GAAAA,WAAsCH,EAAUK,gBAAa,SAC7DF,EAAAA,GAAAA,SAAoCF,EAAQI,eAAa,IAG5DzB,EAAkBW,EAAWW,EAA7BtB,CAA2Ca,EAC7C,CACF,GAAG,CAACF,EAAWC,IAEf,IAAMc,EAAc,CAClBC,qBAAqB,GAGvB,GAAIV,EAAW,SACb,EAA0BpD,GAAQ,CAAC,EAAC,IAA5BT,SAAAA,OAAQ,IAAG,GAAC,EAAC,EAErBsE,EAAYC,yBAMFC,KALRxE,SAAc,QAAN,EAARA,EAAUS,YAAI,OACD,QADC,EAAd,EACIgE,iBAAS,WADL,EAAR,EAEItD,MACA,YAA6E,OAC9D,IADyE,EAApFuD,EAAAA,GAAAA,mCAAAA,yBACe,IAE3B,CAEA,MAAO,CACLd,MAAAA,EACAC,UAAAA,EACAC,QAAAA,EACArD,MAAM,UACD6D,GAGT,EAEMrC,EAAU,CACd/B,kBAAAA,E,8LChEIyE,EAAY,SAAH,GAAuG,IAAjGC,EAAU,EAAVA,WAAwB1B,EAAe,EAA3BD,WAAoD4B,EAA0B,EAAjDC,sBACpDvB,EAAcL,IAAdK,UACR,EAA8BsB,IAAtBE,EAAO,EAAPA,QAASC,EAAQ,EAARA,SACjB,EAA8DC,EAAAA,iBAAAA,sBAAuC,CACnGF,QAAAA,EACAC,SAAAA,EACAzB,UAAAA,IAHM2B,EAAsB,EAAtBA,uBAAwBC,EAAyB,EAAzBA,0BAMhC,OAAIP,EACK,KAIP,kBAAC,aAAc,KACXM,GACA,kBAAC,EAAAE,iBAAA,SAAyB,CAACnE,MAAOiE,GAChC,kBAAC,EAAAG,eAAc,QAGjB,KACDF,aAAyB,EAAzBA,EAA2B7D,KAAI,SAAAgE,GAAe,eAC7C,kBAAC,EAAAF,iBAAA,SAAyB,CAACpE,IAAG,oBAAesE,SAAyB,QAAV,EAAfA,EAAiBN,gBAAQ,OAAQ,QAAR,EAAzB,EAA2BO,cAAM,WAAlB,EAAf,EAAmCnE,IAAMH,MAAOqE,GAC3F,kBAAC,EAAAE,sBAAqB,KACpB,kBAAC,EAAAH,eAAc,OAES,IAIpC,EAkBAV,EAAU5C,aAAe,CACvB6C,WAAY1C,EAAAA,GAAAA,kBACZe,WAAAA,EAAAA,WACA6B,sBAAAA,EAAAA,sB,kRC7CIU,EAAwB,SAAH,GAKrB,YAJJC,EAAQ,EAARA,SACAC,EAAC,EAADA,EACoBC,EAAuB,EAA3CC,mBAG+C5B,GAAc6B,EAFJ,EAAzDC,6BAES3B,EAAAA,GAAAA,YACT,EAAqDwB,IAA7C7B,EAAO,EAAPA,QAASF,EAAK,EAALA,MAAOC,EAAS,EAATA,UAAS,IAAEkC,SACnC,QAD2C,IAAG,KAAE,GACgB,IAAM,CAAC,EAAC,IAAhEtF,KAAAA,OAAI,IAAG,KAAE,EAAEW,EAAE,EAAFA,GAAY4E,EAAQ,EAAhBT,OAAM,IAAYU,KAAAA,OAAI,IAAG,GAAC,EAAC,EAClD,EAA+DxF,EAAKA,EAAKG,OAAS,IAAM,CAAC,EAA3EsF,EAAQ,EAAdC,KAAyBC,EAAW,EAApBC,QAAyBC,EAAS,EAAZC,EAC9C,EAII9F,EAAKU,MAAK,YAAgB,OAAyB,IAAzB,EAAbqF,aAA0C,KAAK,CAAC,EAHzDC,EAAW,EAAjBN,KACSO,EAAc,EAAvBL,QACGM,EAAY,EAAfJ,EAGwBK,EAAsFX,EAAxGY,iBAAoDC,EAAoDb,EAAzEc,oBAAwDC,EAAiBf,EAApCgB,kBAE5E,EACEC,EAAAA,oBAAAA,MACE,SAAAC,GAAM,OAAIA,EAAO5F,QAAUyC,GAAamD,EAAOlG,MAAM+C,UAAUK,gBAAkBL,CAAS,KACvF,CAAC,EAHOoD,EAAa,EAApB7F,MAAsB8F,EAAS,EAATA,UAKxBC,EAAYD,EAAYZ,EAAcP,EACtCqB,EAAeF,EAAYX,EAAiBN,EAC5CoB,EAAaH,EAAYV,EAAeL,EAE9C,OACE,kBAAC,EAAAmB,KAAI,CAAC,wCAAgCC,IAAW1B,IAAalE,UAAU,iCACtE,kBAAC,EAAA2F,KAAI,CAACE,KAAM,CAAEC,QAAS,UAAYC,UAAW,CAAED,QAAS,UAAYE,UAAW,CAAEF,QAAS,qBACzF,kBAAC,EAAAG,SAAQ,CAACjG,UAAU,wCAClB,kBAAC,EAAAkG,KAAI,CACH,YAAU,sBACVlG,UAAS,oDAAgD8B,EAAS,OAAW,KAE7E,kBAAC,EAAAqE,UAAS,KACPvC,EAAE,oCAAqC,CACtCzD,QAAS,CAAC,aAAcb,GACxB8G,MAAOd,KAGX,kBAAC,EAAAe,UAAS,CAACnH,IAAI,eACb,kBAAC,EAAAoH,SAAQ,KACP,6BACGtE,GAAW,kBAAC,EAAAuE,OAAM,CAAC7G,QAAQ,WAAW8G,cAAe,CAAEC,KAAMC,EAAAA,aAAAA,MAC7D3E,GACC6B,EACE,iCACA,CACEzD,QAAS,CAAC,QAASsF,GAAgBnG,GACnCqH,MAC4B,QADvB,EAAEvG,EAAAA,GAAAA,cACUsF,UAAW,OAMxB,QANwB,EADrB,EAEHkB,OAAO,CACPC,SAAS,EACTC,SAAU,EACVC,cAAc,EACdC,cAAc,WACd,WANwB,EADrB,EAQHC,eAEN,CAAC,4BAAQxH,MAAOiG,EAAY,aAAYA,SAKlD,kBAAC,EAAAW,UAAS,CAACnH,IAAI,iBACb,kBAAC,EAAAgI,WAAU,KACT,yBAAKlH,UAAayF,EAA6B,GAAb,UAC/B1D,GACCyD,GACA5B,EAAE,mCAAoC,CACpCS,KAAM8C,IAAAA,IAAW3B,GAAWoB,OAAO3E,EAAAA,GAAAA,wBAAAA,qBAM/C,kBAAC,EAAAiE,KAAI,CACH,YAAU,wBACVlG,UAAS,oDAAgD8B,EAAS,OAAW,KAE7E,kBAAC,EAAAqE,UAAS,KACPvC,EAAE,oCAAqC,CACtCzD,QAAS,CAAC,eAAgBb,GAC1B8G,MAAOd,KAGX,kBAAC,EAAAe,UAAS,CAACnH,IAAI,oBACb,kBAAC,EAAAoH,SAAQ,KACP,6BACGtE,GAAW,kBAAC,EAAAuE,OAAM,CAAC7G,QAAQ,WAAW8G,cAAe,CAAEC,KAAMC,EAAAA,aAAAA,MAC7D3E,GACC6B,EACE,iCACA,CACEzD,QAAS,CAAC,QAAS6E,GAAkB1F,GACrCqH,MAC8B,QADzB,EAAEvG,EAAAA,GAAAA,cACU8E,UAAa,OACqD,QADrD,EADvB,EAEH0B,OAAO,CAAEC,SAAS,EAAMC,SAAU,EAAGC,cAAc,EAAMC,cAAc,WAAQ,WADrD,EADvB,EAGHC,eAEN,CAAC,4BAAQxH,MAAOyF,EAAc,aAAYA,SAKpD,kBAAC,EAAAmB,UAAS,CAACnH,IAAI,sBACb,kBAAC,EAAAgI,WAAU,KACT,yBAAKlH,UAAagF,EAA+B,GAAb,UACjCjD,GACC+C,GACAlB,EAAE,mCAAoC,CACpCS,KAAM8C,IAAAA,IAAWrC,GAAa8B,OAAO3E,EAAAA,GAAAA,wBAAAA,uBAQrD,kBAAC,EAAA0D,KAAI,CAACE,KAAM,CAAEC,QAAS,UAAYC,UAAW,CAAED,QAAS,UAAYE,UAAW,CAAEF,QAAS,qBACzF,kBAAC,EAAAG,SAAQ,CAACjG,UAAU,8CAA8C2D,IAI1E,EAmBAD,EAAsBzD,aAAe,CACnC0D,SAAU,KACVC,EAAG1D,EAAAA,UACH4D,mBAAAA,EAAAA,mBACAE,0BAAAA,EAAAA,0B,sKC9JIoD,EAAqB,SAAH,OAASC,EAAK,2BAAO,kBAAC,UAAkBA,EAAS,EAiBzED,EAAmBnH,aAAe,CAChC6C,WAAY1C,EAAAA,GAAAA,wBACZkH,gBAAiBC,EAAAA,qB,wVCWbC,EAAc,SAAH,GAA0F,IAApF5D,EAAC,EAADA,EAAG6D,EAAY,EAAZA,aAAcC,EAAuB,EAAvBA,wBACtC,GAA+DC,EADmC,EAAnCC,kBACrCC,EAAiB,EAAnCC,iBAAqCC,EAAa,EAAbA,cAmI7C,OACE,kBAAC,EAAAC,WAAU,KACT,kBAAC,EAAAC,WAAU,CAACC,aAAcL,GACvBjE,EAAE,uBAAwB,CAAEvD,QAASD,EAAAA,GAAAA,gBAAyBD,QAAS0H,KAE1E,kBAAC,EAAAM,YAAW,KAAEJ,EAAcvI,KAAI,SAAA4I,GAAM,OAtIpB,SAAAA,GACpB,IACEC,EAWED,EAXFC,gBACAC,EAUEF,EAVFE,oBACAC,EASEH,EATFG,4BACA7G,EAQE0G,EARF1G,MACA8G,EAOEJ,EAPFI,qBACAC,EAMEL,EANFK,wBACAC,EAKEN,EALFM,yBACAC,EAIEP,EAJFO,qCACAC,EAGER,EAHFQ,eACAnH,EAEE2G,EAFF3G,UACAoH,EACET,EADFS,OAGF,IAAKpH,IAAcoH,EACjB,OAAO,KAGT,MACEC,EAAAA,GAAAA,eAA0BpH,EAAO,CAAE2G,gBAAAA,EAAiBC,oBAAAA,EAAqBC,4BAAAA,IADlDQ,EAAsB,EAAvCV,gBAA8DW,EAA0B,EAA/CV,oBAG7CW,EAAmB,KAEnBvB,IACFuB,EACE,kBAAC,EAAAC,QAAO,CACNC,QAAS,2BAAIvF,EAAE,yCAA0C,CAAEzD,QAASsB,KACpE2H,SAAUC,EAAAA,gBAAAA,IACVC,YAAY,EACZC,SAAU,EACVC,WAAY,IACZC,UAAW,GAEX,yBAAKzJ,UAAU,wBACb,kBAAC,KAAc,SAMvB,IAAM0J,EACJ,kBAAC,aAAc,KACZ9F,EAAE,8BAA+B,CAAEzD,QAASsB,IAC5CwH,GAIL,OACE,kBAAC,EAAAU,mBAAA,SAA2B,CAACxK,MAAOiJ,EAAQlJ,IAAG,kBAAauC,IAC1D,kBAAC,EAAAmI,aAAY,KAAEhB,IAAmBiB,EAAAA,GAAAA,QAAwB,kBAAC,UAAc,OACzE,kBAAC,EAAAC,YAAW,KACV,kBAAC,EAAAC,QAAO,OAEV,kBAAC,EAAAC,YAAW,KACTpB,IAAmBiB,EAAAA,GAAAA,QAAwBjB,IAAmBiB,EAAAA,GAAAA,SAC7D,kBAAC,EAAAI,mBAA4B,CAC3B/K,IAAG,gBAAWuC,GACdC,MAAOqH,EACPtH,UAAWA,EACXoH,OAAQA,EACRqB,UAAWR,GAETS,IAAAA,eAAqB1C,IAAiBA,IACpB,IAAjBA,GAA0B,kBAAC,EAAA2C,wBAAuB,CAAChB,SAAUiB,EAAAA,eAAAA,SAGlEzB,IAAmBiB,EAAAA,GAAAA,QAAwB,kBAAC,EAAAhH,UAAS,OACpD+F,IAAmBiB,EAAAA,GAAAA,SAAyB,kBAAC,EAAAhH,UAAS,OAE3D,kBAAC,EAAAmH,YAAW,CAAChK,UAAY4I,IAAmBiB,EAAAA,GAAAA,OAAwB,+BAAmC,IACrG,kBAAC,UAAa,CACZ3K,IAAG,oBAAeuC,GAClBA,UAAWA,EACXqB,YACI2F,IAA4BE,GAAyCvI,EAAAA,GAAAA,oBAGvEA,EAAAA,GAAAA,yBACAwI,IAAmBiB,EAAAA,GAAAA,QACnBjB,IAAmBiB,EAAAA,GAAAA,SACnBpB,GACE,kBAAC,EAAA6B,aAAY,CACXpL,IAAG,qCAAgCuC,GACnChC,MAAOmE,EAAE,+BAAgC,CAAEzD,QAAS,CAACsB,MAErD,kBAAC,EAAA8I,uBAAgC,CAC/BrL,IAAG,cAASuC,GACZ+I,iBAAkBhC,EAClBiC,oBAAqBhC,EACrBhH,UAAWA,EACXyB,SAAUwF,EACVhH,MAAOsH,EACPH,OAAQA,MAIdzI,EAAAA,GAAAA,yBAAmCwI,IAAmBiB,EAAAA,GAAAA,SAAyBpB,GAC/E,kBAAC,EAAA6B,aAAY,CACXpL,IAAG,0BAAqBuC,GACxBhC,MAAOmE,EAAE,+BAAgC,CAAEzD,QAAS,CAACsB,MAErD,kBAAC,EAAA2F,mBAAkB,QAGrBhH,EAAAA,GAAAA,6BACAwI,IAAmBiB,EAAAA,GAAAA,QACnBpB,GACE,kBAAC,EAAA6B,aAAY,CACXpL,IAAG,8BAAyBuC,GAC5BhC,MAAOmE,EAAE,mCAAoC,CAAEzD,QAAS,CAACsB,MAEzD,kBAAC,EAAAiJ,cAAa,QAGlBtK,EAAAA,GAAAA,iCAA2CuI,GAC3C,kBAAC,EAAA2B,aAAY,CACXpL,IAAG,yBAAoBuC,GACvBhC,MAAOmE,EAAE,uCAAwC,CAAEzD,QAAS,CAACsB,MAE7D,kBAAC,EAAAkJ,2BAA0B,SAOzC,CAO8CC,CAAcxC,EAAO,KAGrE,EAmBAZ,EAAYvH,aAAe,CACzB2D,EAAG1D,EAAAA,UACHuH,aAAc,KACdC,yBAAyB,EACzBE,eAAAA,EAAAA,G","sources":["webpack:///./src/components/bannerMessages/bannerMessages.js","webpack:///./src/components/bannerMessages/bannerMessagesContext.js","webpack:///./src/components/graphCard/graphCard.js","webpack:///./src/components/graphCard/graphCardMetricTotals.js","webpack:///./src/components/inventoryCard/inventoryCardHosts.js","webpack:///./src/components/productView/productView.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, AlertActionCloseButton, AlertVariant, Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { useShallowCompareEffect } from 'react-use';\nimport { useGetAppMessages } from './bannerMessagesContext';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Render banner messages.\n *\n * @param {object} props\n * @param {Array} props.messages\n * @param {Function} props.useGetAppMessages\n * @returns {React.ReactNode}\n */\nconst BannerMessages = ({ messages, useGetAppMessages: useAliasGetAppMessages }) => {\n  const [hideAlerts, setHideAlerts] = useState({});\n  const [alerts, setAlerts] = useState([]);\n  const { data: appMessages } = useAliasGetAppMessages();\n\n  useShallowCompareEffect(() => {\n    const updatedMessages = [];\n\n    if (messages.length) {\n      Object.entries(appMessages).forEach(([key, value]) => {\n        if (hideAlerts[key] !== true && value === true) {\n          const message = messages.find(({ id }) => id === key);\n\n          if (message) {\n            updatedMessages.push({\n              key,\n              ...message\n            });\n          }\n        }\n      });\n    }\n\n    setAlerts(\n      updatedMessages.map(({ key, message, title, variant = AlertVariant.info }) => {\n        const actionClose = <AlertActionCloseButton onClose={() => setHideAlerts({ ...hideAlerts, [key]: true })} />;\n\n        return (\n          <Alert actionClose={actionClose} key={key} title={title} variant={variant}>\n            {message}\n          </Alert>\n        );\n      })\n    );\n  }, [appMessages, hideAlerts, messages]);\n\n  if (alerts?.length) {\n    return <div className=\"curiosity-banner-messages\">{alerts}</div>;\n  }\n\n  return null;\n};\n\n/**\n * Prop types.\n *\n * @type {{useGetAppMessages: Function, messages: Array}}\n */\nBannerMessages.propTypes = {\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.node.isRequired,\n      message: PropTypes.node.isRequired,\n      variant: PropTypes.oneOf([...Object.values(AlertVariant)])\n    })\n  ),\n  useGetAppMessages: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGetAppMessages: Function, messages: Array}}\n */\nBannerMessages.defaultProps = {\n  messages: [\n    {\n      id: 'cloudigradeMismatch',\n      title: translate('curiosity-banner.dataMismatchTitle'),\n      message: translate(\n        'curiosity-banner.dataMismatchMessage',\n        {\n          context: helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS !== '' && 'cloudigradeMismatch',\n          appName: helpers.UI_DISPLAY_NAME\n        },\n        [\n          <Button\n            isInline\n            component=\"a\"\n            variant=\"link\"\n            icon={<ExternalLinkAltIcon />}\n            iconPosition=\"right\"\n            target=\"_blank\"\n            href={helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS}\n          />\n        ]\n      )\n    }\n  ],\n  useGetAppMessages\n};\n\nexport { BannerMessages as default, BannerMessages };\n","import { useShallowCompareEffect } from 'react-use';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { dateHelpers } from '../../common';\nimport {\n  rhsmConstants,\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\n\n/**\n * ToDo: useGetAppMessages is setup to work with existing Tally response, pre-metrics\n * Banner messages scans the returned Tally listing for the HAS_CLOUDIGRADE_MISMATCH. In the future\n * this may need to be updated to pull from the \"meta\" object part of the Tally response.\n */\n/**\n * Get app messages.\n *\n * @param {object} options\n * @param {Function} options.getMessageReports\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useProductQuery\n * @param {Function} options.useSelectorsResponse\n * @returns {object}\n */\nconst useGetAppMessages = ({\n  getMessageReports = reduxActions.rhsm.getMessageReports,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductQuery();\n  const dispatch = useAliasDispatch();\n  const { error, fulfilled, pending, data } = useAliasSelectorsResponse({\n    id: 'messages',\n    selector: ({ messages }) => messages?.report?.[productId]\n  });\n\n  useShallowCompareEffect(() => {\n    if (productId) {\n      const { startDate, endDate } = dateHelpers.getRangedDateTime('CURRENT');\n      const updatedQuery = {\n        ...query,\n        [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY,\n        [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate.toISOString(),\n        [RHSM_API_QUERY_SET_TYPES.END_DATE]: endDate.toISOString()\n      };\n\n      getMessageReports(productId, updatedQuery)(dispatch);\n    }\n  }, [productId, query]);\n\n  const updatedData = {\n    cloudigradeMismatch: false\n  };\n\n  if (fulfilled) {\n    const { messages = {} } = data || {};\n\n    updatedData.cloudigradeMismatch =\n      messages?.data\n        ?.reverse()\n        ?.find(\n          ({ [rhsmConstants.RHSM_API_RESPONSE_TALLY_META_TYPES.HAS_CLOUDIGRADE_MISMATCH]: mismatch }) =>\n            mismatch === true\n        ) !== undefined;\n  }\n\n  return {\n    error,\n    fulfilled,\n    pending,\n    data: {\n      ...updatedData\n    }\n  };\n};\n\nconst context = {\n  useGetAppMessages\n};\n\nexport { context as default, context, useGetAppMessages };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductGraphConfig } from '../productView/productViewContext';\nimport { helpers } from '../../common';\nimport { GraphCardMetricTotals } from './graphCardMetricTotals';\nimport { GraphCardChart } from './graphCardChart';\nimport { GraphCardContext } from './graphCardContext';\nimport { graphCardHelpers } from './graphCardHelpers';\n\n/**\n * Set up graph cards. Expand filters with base graph settings.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useProduct\n * @param {Function} props.useProductGraphConfig\n * @returns {Node}\n */\nconst GraphCard = ({ isDisabled, useProduct: useAliasProduct, useProductGraphConfig: useAliasProductGraphConfig }) => {\n  const { productId } = useAliasProduct();\n  const { filters, settings } = useAliasProductGraphConfig();\n  const { groupedFiltersSettings, standaloneFiltersSettings } = graphCardHelpers.generateChartSettings({\n    filters,\n    settings,\n    productId\n  });\n\n  if (isDisabled) {\n    return null;\n  }\n\n  return (\n    <React.Fragment>\n      {(groupedFiltersSettings && (\n        <GraphCardContext.Provider value={groupedFiltersSettings}>\n          <GraphCardChart />\n        </GraphCardContext.Provider>\n      )) ||\n        null}\n      {standaloneFiltersSettings?.map(filtersSettings => (\n        <GraphCardContext.Provider key={`graphCard_${filtersSettings?.settings?.metric?.id}`} value={filtersSettings}>\n          <GraphCardMetricTotals>\n            <GraphCardChart />\n          </GraphCardMetricTotals>\n        </GraphCardContext.Provider>\n      ))}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProduct: Function, useProductGraphConfig: Function, isDisabled: boolean}}\n */\nGraphCard.propTypes = {\n  isDisabled: PropTypes.bool,\n  useProduct: PropTypes.func,\n  useProductGraphConfig: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProduct: Function, useProductGraphConfig: Function, isDisabled: boolean}}\n */\nGraphCard.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_GRAPH,\n  useProduct,\n  useProductGraphConfig\n};\n\nexport { GraphCard as default, GraphCard };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter, CardTitle, Flex, FlexItem } from '@patternfly/react-core';\nimport moment from 'moment';\nimport _camelCase from 'lodash/camelCase';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useMetricsSelector } from './graphCardContext';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { Loader, SkeletonSize } from '../loader/loader';\nimport { dateHelpers, helpers } from '../../common';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldRangedMonthly';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Display totals for a single metric.\n *\n * @param {object} props\n * @param {Node} props.children\n * @param {Function} props.t\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardMetricTotals = ({\n  children,\n  t,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate } = useAliasProductGraphTallyQuery();\n  const { pending, error, fulfilled, dataSets = [] } = useAliasMetricsSelector();\n  const { data = [], id, metric: metricId, meta = {} } = dataSets[0] || {};\n  const { date: lastDate, hasData: lastHasData, y: lastValue } = data[data.length - 1] || {};\n  const {\n    date: currentDate,\n    hasData: currentHasData,\n    y: currentValue\n  } = data.find(({ isCurrentDate }) => isCurrentDate === true) || {};\n\n  const { totalMonthlyDate: monthlyDate, totalMonthlyHasData: monthlyHasData, totalMonthlyValue: monthlyValue } = meta;\n\n  const { title: selectedMonth, isCurrent } =\n    toolbarFieldOptions.find(\n      option => option.title === startDate || option.value.startDate.toISOString() === startDate\n    ) || {};\n\n  const dailyDate = isCurrent ? currentDate : lastDate;\n  const dailyHasData = isCurrent ? currentHasData : lastHasData;\n  const dailyValue = isCurrent ? currentValue : lastValue;\n\n  return (\n    <Flex data-test={`graphMetricTotals-${_camelCase(metricId)}`} className=\"curiosity-usage-graph__totals\">\n      <Flex flex={{ default: 'flex_1' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-column\">\n          <Card\n            data-test=\"graphDailyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric', {\n                context: ['dailyTotal', id],\n                month: selectedMonth\n              })}\n            </CardTitle>\n            <MinHeight key=\"currentBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric',\n                      {\n                        context: ['total', dailyHasData && id],\n                        total: helpers\n                          .numberDisplay(dailyValue)\n                          ?.format({\n                            average: true,\n                            mantissa: 5,\n                            trimMantissa: true,\n                            lowPrecision: false\n                          })\n                          ?.toUpperCase()\n                      },\n                      [<strong title={dailyValue} aria-label={dailyValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"currentFooter\">\n              <CardFooter>\n                <div className={(!dailyHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    dailyDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(dailyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n          <Card\n            data-test=\"graphMonthlyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric', {\n                context: ['monthlyTotal', id],\n                month: selectedMonth\n              })}\n            </CardTitle>\n            <MinHeight key=\"totalMonthlyBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric',\n                      {\n                        context: ['total', monthlyHasData && id],\n                        total: helpers\n                          .numberDisplay(monthlyValue)\n                          ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: false })\n                          ?.toUpperCase()\n                      },\n                      [<strong title={monthlyValue} aria-label={monthlyValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"totalMonthlyFooter\">\n              <CardFooter>\n                <div className={(!monthlyHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    monthlyDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(monthlyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n        </FlexItem>\n      </Flex>\n      <Flex flex={{ default: 'flex_3' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-graph-column\">{children}</FlexItem>\n      </Flex>\n    </Flex>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.propTypes = {\n  children: PropTypes.node,\n  t: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.defaultProps = {\n  children: null,\n  t: translate,\n  useMetricsSelector,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardMetricTotals as default, GraphCardMetricTotals };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useGetHostsInventory } from './inventoryCardContext';\nimport InventoryCard from './inventoryCard';\nimport { helpers } from '../../common';\n\n/**\n * A hosts' system inventory component.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useGetInventory\n * @returns {React.ReactNode}\n */\nconst InventoryCardHosts = ({ ...props }) => <InventoryCard {...props} />;\n\n/**\n * Prop types.\n *\n * @type {{isDisabled: boolean, useGetInventory: Function}}\n */\nInventoryCardHosts.propTypes = {\n  isDisabled: PropTypes.bool,\n  useGetInventory: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{isDisabled: boolean, useGetInventory: Function}}\n */\nInventoryCardHosts.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_TABLE_HOSTS,\n  useGetInventory: useGetHostsInventory\n};\n\nexport { InventoryCardHosts as default, InventoryCardHosts };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport { useRouteDetail } from '../../hooks/useRouter';\nimport { ProductViewContext } from './productViewContext';\nimport { PageLayout, PageHeader, PageSection, PageToolbar, PageMessages, PageColumns } from '../pageLayout/pageLayout';\nimport { apiQueries } from '../../redux';\nimport { ConnectedGraphCard as ConnectedGraphCardDeprecated } from '../graphCard/graphCard.deprecated';\nimport { GraphCard } from '../graphCard/graphCard';\nimport { Toolbar } from '../toolbar/toolbar';\nimport { ConnectedInventoryList as ConnectedInventoryListDeprecated } from '../inventoryCard/inventoryList.deprecated';\nimport { InventoryCard } from '../inventoryCard/inventoryCard';\nimport { InventoryCardHosts } from '../inventoryCard/inventoryCardHosts';\nimport { helpers } from '../../common';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport { SelectPosition } from '../form/select';\nimport { ToolbarFieldGranularity } from '../toolbar/toolbarFieldGranularity';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport { InventoryCardSubscriptions } from '../inventoryCardSubscriptions/inventoryCardSubscriptions';\nimport { RHSM_INTERNAL_PRODUCT_DISPLAY_TYPES as DISPLAY_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * ToDo: base for default product layouts, add additional props for various toolbars\n * Next steps include...\n * Consider being able to pass customized toolbars for GraphCard and the\n * various Inventory displays. Have to evaluate how to handle the global toolbar, one\n * consideration is creating optional widgets with self-contained state update ability\n * based off of context/props/etc.\n *\n * Moving existing products to this layout, or maintaining them \"as is\", then renaming and\n * relocating them to this directory if they've been customized beyond a basic layout.\n */\n/**\n * Display product columns.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Node|boolean} props.toolbarGraph\n * @param {boolean} props.toolbarGraphDescription\n * @param {Function} props.useRouteDetail\n * @returns {Node}\n */\nconst ProductView = ({ t, toolbarGraph, toolbarGraphDescription, useRouteDetail: useAliasRouteDetail }) => {\n  const { productParameter: routeProductLabel, productConfig } = useAliasRouteDetail();\n\n  const renderProduct = config => {\n    const {\n      graphTallyQuery,\n      inventoryHostsQuery,\n      inventorySubscriptionsQuery,\n      query,\n      initialGuestsFilters,\n      initialInventoryFilters,\n      initialInventorySettings,\n      initialSubscriptionsInventoryFilters,\n      productDisplay,\n      productId,\n      viewId\n    } = config;\n\n    if (!productId || !viewId) {\n      return null;\n    }\n\n    const { graphTallyQuery: initialGraphTallyQuery, inventoryHostsQuery: initialInventoryHostsQuery } =\n      apiQueries.parseRhsmQuery(query, { graphTallyQuery, inventoryHostsQuery, inventorySubscriptionsQuery });\n\n    let graphCardTooltip = null;\n\n    if (toolbarGraphDescription) {\n      graphCardTooltip = (\n        <Tooltip\n          content={<p>{t('curiosity-graph.cardHeadingDescription', { context: productId })}</p>}\n          position={TooltipPosition.top}\n          enableFlip={false}\n          distance={5}\n          entryDelay={100}\n          exitDelay={0}\n        >\n          <sup className=\"curiosity-icon__info\">\n            <InfoCircleIcon />\n          </sup>\n        </Tooltip>\n      );\n    }\n\n    const graphCardTitle = (\n      <React.Fragment>\n        {t('curiosity-graph.cardHeading', { context: productId })}\n        {graphCardTooltip}\n      </React.Fragment>\n    );\n\n    return (\n      <ProductViewContext.Provider value={config} key={`product_${productId}`}>\n        <PageMessages>{productDisplay !== DISPLAY_TYPES.HOURLY && <BannerMessages />}</PageMessages>\n        <PageToolbar>\n          <Toolbar />\n        </PageToolbar>\n        <PageSection>\n          {productDisplay !== DISPLAY_TYPES.HOURLY && productDisplay !== DISPLAY_TYPES.PARTIAL && (\n            <ConnectedGraphCardDeprecated\n              key={`graph_${productId}`}\n              query={initialGraphTallyQuery}\n              productId={productId}\n              viewId={viewId}\n              cardTitle={graphCardTitle}\n            >\n              {(React.isValidElement(toolbarGraph) && toolbarGraph) ||\n                (toolbarGraph !== false && <ToolbarFieldGranularity position={SelectPosition.right} />)}\n            </ConnectedGraphCardDeprecated>\n          )}\n          {(productDisplay === DISPLAY_TYPES.HOURLY && <GraphCard />) ||\n            (productDisplay === DISPLAY_TYPES.PARTIAL && <GraphCard />)}\n        </PageSection>\n        <PageSection className={(productDisplay === DISPLAY_TYPES.HOURLY && 'curiosity-page-section__tabs') || ''}>\n          <InventoryTabs\n            key={`inventory_${productId}`}\n            productId={productId}\n            isDisabled={\n              (!initialInventoryFilters && !initialSubscriptionsInventoryFilters) || helpers.UI_DISABLED_TABLE\n            }\n          >\n            {!helpers.UI_DISABLED_TABLE_HOSTS &&\n              productDisplay !== DISPLAY_TYPES.HOURLY &&\n              productDisplay !== DISPLAY_TYPES.PARTIAL &&\n              initialInventoryFilters && (\n                <InventoryTab\n                  key={`inventory_deprecated-hosts_${productId}`}\n                  title={t('curiosity-inventory.tabHosts', { context: [productId] })}\n                >\n                  <ConnectedInventoryListDeprecated\n                    key={`inv_${productId}`}\n                    filterGuestsData={initialGuestsFilters}\n                    filterInventoryData={initialInventoryFilters}\n                    productId={productId}\n                    settings={initialInventorySettings}\n                    query={initialInventoryHostsQuery}\n                    viewId={viewId}\n                  />\n                </InventoryTab>\n              )}\n            {!helpers.UI_DISABLED_TABLE_HOSTS && productDisplay === DISPLAY_TYPES.PARTIAL && initialInventoryFilters && (\n              <InventoryTab\n                key={`inventory_hosts_${productId}`}\n                title={t('curiosity-inventory.tabHosts', { context: [productId] })}\n              >\n                <InventoryCardHosts />\n              </InventoryTab>\n            )}\n            {!helpers.UI_DISABLED_TABLE_INSTANCES &&\n              productDisplay === DISPLAY_TYPES.HOURLY &&\n              initialInventoryFilters && (\n                <InventoryTab\n                  key={`inventory_instances_${productId}`}\n                  title={t('curiosity-inventory.tabInstances', { context: [productId] })}\n                >\n                  <InventoryCard />\n                </InventoryTab>\n              )}\n            {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && initialSubscriptionsInventoryFilters && (\n              <InventoryTab\n                key={`inventory_subs_${productId}`}\n                title={t('curiosity-inventory.tabSubscriptions', { context: [productId] })}\n              >\n                <InventoryCardSubscriptions />\n              </InventoryTab>\n            )}\n          </InventoryTabs>\n        </PageSection>\n      </ProductViewContext.Provider>\n    );\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader productLabel={routeProductLabel}>\n        {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: routeProductLabel })}\n      </PageHeader>\n      <PageColumns>{productConfig.map(config => renderProduct(config))}</PageColumns>\n    </PageLayout>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), toolbarGraphDescription: boolean, useRouteDetail: Function}}\n */\nProductView.propTypes = {\n  t: PropTypes.func,\n  toolbarGraph: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n  toolbarGraphDescription: PropTypes.bool,\n  useRouteDetail: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), toolbarGraphDescription: boolean, useRouteDetail: Function}}\n */\nProductView.defaultProps = {\n  t: translate,\n  toolbarGraph: null,\n  toolbarGraphDescription: false,\n  useRouteDetail\n};\n\nexport { ProductView as default, ProductView };\n"],"names":["BannerMessages","messages","useAliasGetAppMessages","useGetAppMessages","useState","hideAlerts","setHideAlerts","alerts","setAlerts","appMessages","data","useShallowCompareEffect","updatedMessages","length","Object","entries","forEach","key","value","message","find","id","push","map","title","variant","AlertVariant","actionClose","AlertActionCloseButton","onClose","Alert","className","defaultProps","translate","context","helpers","appName","Button","isInline","component","icon","ExternalLinkAltIcon","iconPosition","target","href","getMessageReports","reduxActions","useDispatch","useAliasDispatch","storeHooks","useProduct","useAliasProduct","useProductQuery","useAliasProductQuery","useSelectorsResponse","useAliasSelectorsResponse","productId","query","dispatch","selector","report","error","fulfilled","pending","dateHelpers","startDate","endDate","updatedQuery","RHSM_API_QUERY_SET_TYPES","GRANULARITY_TYPES","toISOString","updatedData","cloudigradeMismatch","undefined","reverse","rhsmConstants","GraphCard","isDisabled","useAliasProductGraphConfig","useProductGraphConfig","filters","settings","graphCardHelpers","groupedFiltersSettings","standaloneFiltersSettings","GraphCardContext","GraphCardChart","filtersSettings","metric","GraphCardMetricTotals","children","t","useAliasMetricsSelector","useMetricsSelector","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","dataSets","metricId","meta","lastDate","date","lastHasData","hasData","lastValue","y","isCurrentDate","currentDate","currentHasData","currentValue","monthlyDate","totalMonthlyDate","monthlyHasData","totalMonthlyHasData","monthlyValue","totalMonthlyValue","toolbarFieldOptions","option","selectedMonth","isCurrent","dailyDate","dailyHasData","dailyValue","Flex","_camelCase","flex","default","direction","alignSelf","FlexItem","Card","CardTitle","month","MinHeight","CardBody","Loader","skeletonProps","size","SkeletonSize","total","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","CardFooter","moment","InventoryCardHosts","props","useGetInventory","useGetHostsInventory","ProductView","toolbarGraph","toolbarGraphDescription","useAliasRouteDetail","useRouteDetail","routeProductLabel","productParameter","productConfig","PageLayout","PageHeader","productLabel","PageColumns","config","graphTallyQuery","inventoryHostsQuery","inventorySubscriptionsQuery","initialGuestsFilters","initialInventoryFilters","initialInventorySettings","initialSubscriptionsInventoryFilters","productDisplay","viewId","apiQueries","initialGraphTallyQuery","initialInventoryHostsQuery","graphCardTooltip","Tooltip","content","position","TooltipPosition","enableFlip","distance","entryDelay","exitDelay","graphCardTitle","ProductViewContext","PageMessages","DISPLAY_TYPES","PageToolbar","Toolbar","PageSection","ConnectedGraphCard","cardTitle","React","ToolbarFieldGranularity","SelectPosition","InventoryTab","ConnectedInventoryList","filterGuestsData","filterInventoryData","InventoryCard","InventoryCardSubscriptions","renderProduct"],"sourceRoot":""}