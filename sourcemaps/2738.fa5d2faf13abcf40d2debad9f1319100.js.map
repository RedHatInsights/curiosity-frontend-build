{"version":3,"file":"js/2738.595f2d4193a5bf3143e6.js","mappings":"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","sources":["webpack:///./src/components/productView/productViewContext.js","webpack:///./src/components/toolbar/toolbarFieldGranularity.js"],"sourcesContent":["import React, { useCallback, useContext } from 'react';\nimport _cloneDeep from 'lodash/cloneDeep';\nimport { reduxHelpers } from '../../redux/common';\nimport { storeHooks } from '../../redux/hooks';\nimport { rhsmConstants, RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common/helpers';\n\n/**\n * @memberof ProductView\n * @module ProductViewContext\n */\n\n/**\n * Route context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{}, helpers.noop];\n\nconst ProductViewContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated product view context.\n *\n * @returns {React.Context<{}>}\n */\nconst useProductViewContext = () => useContext(ProductViewContext);\n\n/**\n * Return a query object from initial product config and Redux store.\n *\n * @param {string} queryType An identifier used to pull from both config and Redux, they should named the same.\n * @param {object} options\n * @param {string} options.overrideId A custom identifier, used for scenarios like the Guest inventory IDs\n * @param {object} options.useProductViewContext\n * @param {Function} options.useSelectors\n * @returns {object}\n */\nconst useProductQueryFactory = (\n  queryType,\n  {\n    overrideId,\n    useProductViewContext: useAliasProductViewContext = useProductViewContext,\n    useSelectors: useAliasSelectors = storeHooks.reactRedux.useSelectors\n  } = {}\n) => {\n  const { [queryType]: initialQuery, productId, viewId } = useAliasProductViewContext();\n  const [queryOverride, queryProduct, queryView] = useAliasSelectors([\n    ({ view }) => view?.[queryType]?.[overrideId],\n    ({ view }) => view?.[queryType]?.[productId],\n    ({ view }) => view?.[queryType]?.[viewId]\n  ]);\n\n  return {\n    ...initialQuery,\n    ...queryOverride,\n    ...queryProduct,\n    ...queryView\n  };\n};\n\n/**\n * Return a base product query\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {Function} options.useProductQueryFactory\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductQuery = ({\n  queryType = 'query',\n  useProductQueryFactory: useAliasProductQueryFactory = useProductQueryFactory,\n  options\n} = {}) => useAliasProductQueryFactory(queryType, options);\n\n/**\n * Return the graph query based off of tally and capacity.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductQueryFactory\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductGraphTallyQuery = ({\n  queryType = 'graphTallyQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_TALLY_CAPACITY_TYPES,\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductQueryFactory: useAliasProductQueryFactory = useProductQueryFactory,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useAliasProductQuery(),\n      ...useAliasProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return the inventory query for guests. Use fallback/defaults for guests offset, limit.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductQueryFactory\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryGuestsQuery = ({\n  queryType = 'inventoryGuestsQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductQueryFactory: useAliasProductQueryFactory = useProductQueryFactory,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useAliasProductQuery(),\n      ...useAliasProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for hosts.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductQueryFactory\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryHostsQuery = ({\n  queryType = 'inventoryHostsQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductQueryFactory: useAliasProductQueryFactory = useProductQueryFactory,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useAliasProductQuery(),\n      ...useAliasProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for subscriptions.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductQueryFactory\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventorySubscriptionsQuery = ({\n  queryType = 'inventorySubscriptionsQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductQueryFactory: useAliasProductQueryFactory = useProductQueryFactory,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useAliasProductQuery(),\n      ...useAliasProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return a unified query for toolbars\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductGraphTallyQuery\n * @param {Function} options.useProductInventoryHostsQuery\n * @param {Function} options.useProductInventorySubscriptionsQuery\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductToolbarQuery = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery,\n  useProductInventoryHostsQuery: useAliasProductInventoryHostsQuery = useProductInventoryHostsQuery,\n  useProductInventorySubscriptionsQuery:\n    useAliasProductInventorySubscriptionsQuery = useProductInventorySubscriptionsQuery,\n  options\n} = {}) => ({\n  ...useAliasProductQuery({ options }),\n  ...useAliasProductGraphTallyQuery({ options }),\n  ...useAliasProductInventoryHostsQuery({ options }),\n  ...useAliasProductInventorySubscriptionsQuery({ options })\n});\n\n/**\n * Get a filtered product configuration context.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductViewContext\n * @returns {object}\n */\nconst useProductContext = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductViewContext: useAliasProductViewContext = useProductViewContext\n} = {}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.UOM]: uomFilter } = useAliasProductQuery();\n  const {\n    initialGraphFilters = [],\n    initialInventoryFilters = [],\n    initialSubscriptionsInventoryFilters = [],\n    productContextFilterUom,\n    ...config\n  } = useAliasProductViewContext();\n\n  const applyUomFilter = useCallback(() => {\n    if (productContextFilterUom === true) {\n      const filterFilters = ({ id, metric, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(uomFilter, 'i').test(metric) || new RegExp(uomFilter, 'i').test(id);\n      };\n\n      /**\n       * Allowing nested filters beside normal filters we take the quick path, just run the loop twice.\n       * Make sure to set \"isOptional\" false when it comes to nested filters in the event someone\n       * combined a config setting in the subsequent loop.\n       */\n      const updatedGraphFilters = _cloneDeep(initialGraphFilters)\n        .map(({ filters, ...rest }) => ({\n          ...rest,\n          filters: filters.filter(filterFilters),\n          isOptional: false\n        }))\n        .filter(filterFilters);\n\n      return {\n        ...config,\n        initialGraphFilters: updatedGraphFilters,\n        initialInventoryFilters: initialInventoryFilters.filter(filterFilters),\n        initialSubscriptionsInventoryFilters: initialSubscriptionsInventoryFilters.filter(filterFilters)\n      };\n    }\n\n    return {\n      ...config,\n      initialGraphFilters,\n      initialInventoryFilters,\n      initialSubscriptionsInventoryFilters\n    };\n  }, [\n    config,\n    initialGraphFilters,\n    initialInventoryFilters,\n    initialSubscriptionsInventoryFilters,\n    productContextFilterUom,\n    uomFilter\n  ]);\n\n  return applyUomFilter();\n};\n\n/**\n * Return product identifiers.\n *\n * @param {object} options\n * @param {Function} options.useProductViewContext\n * @returns {{productLabel, viewId, productId, productGroup, productVariants}}\n */\nconst useProduct = ({ useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}) => {\n  const { productGroup, productId, productLabel, productVariants, viewId } = useAliasProductViewContext();\n  return {\n    productGroup,\n    productId,\n    productLabel,\n    productVariants,\n    viewId\n  };\n};\n\n/**\n * Return graph configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductGraphConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialGraphFilters, initialGraphSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGraphFilters,\n    settings: initialGraphSettings\n  };\n};\n\n/**\n * Return guests inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryGuestsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { inventoryGuestsQuery = {}, initialGuestsFilters, initialGuestsSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGuestsFilters,\n    initialQuery: inventoryGuestsQuery,\n    settings: initialGuestsSettings\n  };\n};\n\n/**\n * Return inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryHostsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialInventoryFilters, initialInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialInventoryFilters,\n    settings: initialInventorySettings\n  };\n};\n\n/**\n * Return subscriptions inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventorySubscriptionsConfig = ({\n  useProductContext: useAliasProductContext = useProductContext\n} = {}) => {\n  const { initialSubscriptionsInventoryFilters, initialSubscriptionsInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialSubscriptionsInventoryFilters,\n    settings: initialSubscriptionsInventorySettings\n  };\n};\n\n/**\n * Return primary toolbar configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductToolbarConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialToolbarFilters, initialToolbarSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialToolbarFilters,\n    settings: initialToolbarSettings\n  };\n};\n\nconst context = {\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useQuery: useProductQuery,\n  useQueryFactory: useProductQueryFactory,\n  useGraphTallyQuery: useProductGraphTallyQuery,\n  useInventoryGuestsQuery: useProductInventoryGuestsQuery,\n  useInventoryHostsQuery: useProductInventoryHostsQuery,\n  useInventorySubscriptionsQuery: useProductInventorySubscriptionsQuery,\n  useProduct,\n  useGraphConfig: useProductGraphConfig,\n  useInventoryGuestsConfig: useProductInventoryGuestsConfig,\n  useInventoryHostsConfig: useProductInventoryHostsConfig,\n  useInventorySubscriptionsConfig: useProductInventorySubscriptionsConfig,\n  useToolbarConfig: useProductToolbarConfig,\n  useToolbarQuery: useProductToolbarQuery\n};\n\nexport {\n  context as default,\n  context,\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useProductQuery,\n  useProductQueryFactory,\n  useProductGraphTallyQuery,\n  useProductInventoryGuestsQuery,\n  useProductInventoryHostsQuery,\n  useProductInventorySubscriptionsQuery,\n  useProduct,\n  useProductGraphConfig,\n  useProductInventoryGuestsConfig,\n  useProductInventoryHostsConfig,\n  useProductInventorySubscriptionsConfig,\n  useProductToolbarConfig,\n  useProductToolbarQuery\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport {\n  RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A standalone Granularity select filter.\n *\n * @memberof Toolbar\n * @module ToolbarFieldGranularity\n */\n\n/**\n * Select field options.\n *\n * @type {Array<{title: React.ReactNode, value: string, selected: boolean}>}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.label', { context: ['granularity', type] }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update granularity.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    const { startDate, endDate } = dateHelpers.getRangedDateTime(value);\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: value\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.END_DATE]: endDate.toISOString()\n      }\n    ]);\n  };\n};\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {Array} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {React.ReactNode}\n */\nconst ToolbarFieldGranularity = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: updatedValue } = useAliasProductGraphTallyQuery();\n  const onSelect = useAliasOnSelect();\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'granularity' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'granularity' })}\n      position={position}\n      data-test=\"toolbarFieldGranularity\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldGranularity.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldGranularity.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductGraphTallyQuery\n};\n\nexport { ToolbarFieldGranularity as default, ToolbarFieldGranularity, toolbarFieldOptions, useOnSelect };\n"],"names":["DEFAULT_CONTEXT","helpers","ProductViewContext","React","useProductViewContext","useContext","useProductQueryFactory","queryType","overrideId","useAliasProductViewContext","useSelectors","useAliasSelectors","storeHooks","arguments","length","undefined","initialQuery","productId","viewId","queryOverride","queryProduct","queryView","_ref","_view$queryType","view","_ref2","_view$queryType2","_ref3","_view$queryType3","useProductQuery","useAliasProductQueryFactory","options","useProductGraphTallyQuery","schemaCheck","rhsmConstants","useAliasProductQuery","reduxHelpers","useProductInventoryGuestsQuery","useProductInventoryHostsQuery","useProductInventorySubscriptionsQuery","useProductToolbarQuery","useAliasProductGraphTallyQuery","useAliasProductInventoryHostsQuery","useAliasProductInventorySubscriptionsQuery","useProductContext","RHSM_API_QUERY_SET_TYPES","uomFilter","initialGraphFilters","initialInventoryFilters","initialSubscriptionsInventoryFilters","productContextFilterUom","config","useCallback","filterFilters","_ref4","id","metric","isOptional","RegExp","test","updatedGraphFilters","_cloneDeep","map","_ref5","filters","rest","filter","applyUomFilter","useProduct","productGroup","productLabel","productVariants","useProductGraphConfig","useAliasProductContext","initialGraphSettings","settings","useProductInventoryGuestsConfig","inventoryGuestsQuery","initialGuestsFilters","initialGuestsSettings","useProductInventoryHostsConfig","initialInventorySettings","useProductInventorySubscriptionsConfig","initialSubscriptionsInventorySettings","useProductToolbarConfig","initialToolbarFilters","initialToolbarSettings","context","useQuery","useQueryFactory","useGraphTallyQuery","useInventoryGuestsQuery","useInventoryHostsQuery","useInventorySubscriptionsQuery","useGraphConfig","useInventoryGuestsConfig","useInventoryHostsConfig","useInventorySubscriptionsConfig","useToolbarConfig","useToolbarQuery","toolbarFieldOptions","Object","values","FIELD_TYPES","type","title","translate","value","selected","useOnSelect","useDispatch","useAliasDispatch","useAliasProduct","dispatch","startDate","endDate","dateHelpers","reduxTypes","toISOString","ToolbarFieldGranularity","isFilter","position","t","useAliasOnSelect","updatedValue","onSelect","updatedOptions","option","Select","concat","selectedOptions","placeholder","propTypes","PropTypes","defaultProps","SelectPosition"],"sourceRoot":""}