{"version":3,"file":"js/9517.41d52a95902911d2a05a.js","mappings":"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","sources":["webpack:///./src/components/form/textInput.js","webpack:///./src/components/toolbar/toolbarFieldDisplayName.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TextInput as PfTextInput } from '@patternfly/react-core';\nimport { createMockEvent } from './formHelpers';\nimport { helpers } from '../../common';\n\n/**\n * Text input with state.\n *\n * @memberof Form\n * @module TextInput\n */\n\n/**\n * A wrapper for Patternfly TextInput. Provides restructured event data,\n * and an onClear event for the search type.\n *\n * @augments React.Component\n * @fires onKeyUp\n * @fires onMouseUp\n * @fires onChange\n */\nclass TextInput extends React.Component {\n  state = {\n    updatedValue: null\n  };\n\n  /**\n   * onKeyUp event, provide additional functionality for onClear event.\n   *\n   * @event onKeyUp\n   * @param {object} event\n   */\n  onKeyUp = event => {\n    const { onClear, onKeyUp, type } = this.props;\n    const { currentTarget, keyCode } = event;\n    const clonedEvent = { ...event };\n\n    onKeyUp(createMockEvent(event, true));\n\n    if (keyCode === 27) {\n      if (type === 'search' && currentTarget.value === '') {\n        onClear(createMockEvent(clonedEvent));\n      } else {\n        this.setState({ updatedValue: '' }, () => {\n          onClear(\n            createMockEvent({ ...clonedEvent, ...{ currentTarget: { ...clonedEvent.currentTarget, value: '' } } })\n          );\n        });\n      }\n    }\n  };\n\n  /**\n   * onMouseUp event, provide additional functionality for onClear event.\n   *\n   * @event onMouseUp\n   * @param {object} event\n   */\n  onMouseUp = event => {\n    const { onClear, onMouseUp, type } = this.props;\n    const { currentTarget } = event;\n    const clonedEvent = { ...event };\n\n    onMouseUp(createMockEvent(event, true));\n\n    if (type !== 'search' || currentTarget.value === '') {\n      return;\n    }\n\n    setTimeout(() => {\n      if (currentTarget.value === '') {\n        onClear(createMockEvent(clonedEvent));\n      }\n    });\n  };\n\n  /**\n   * onChange event, provide restructured event.\n   *\n   * @event onChange\n   * @param {string} value\n   * @param {object} event\n   */\n  onChange = (value, event) => {\n    const { onChange } = this.props;\n    const clonedEvent = { ...event };\n\n    this.setState({ updatedValue: value }, () => {\n      onChange(createMockEvent(clonedEvent));\n    });\n  };\n\n  /**\n   * Render a text input.\n   *\n   * @returns {React.ReactNode}\n   */\n  render() {\n    const { updatedValue } = this.state;\n    const {\n      className,\n      id,\n      isDisabled,\n      name,\n      onChange,\n      onClear,\n      onKeyUp,\n      onMouseUp,\n      isReadOnly,\n      type,\n      value,\n      ...props\n    } = this.props;\n    const updatedName = name || helpers.generateId();\n    const updatedId = id || updatedName;\n\n    return (\n      <PfTextInput\n        id={updatedId}\n        name={updatedName}\n        className={`curiosity-text-input ${className}`}\n        isDisabled={isDisabled || false}\n        onChange={this.onChange}\n        onKeyUp={this.onKeyUp}\n        onMouseUp={this.onMouseUp}\n        isReadOnly={isReadOnly || false}\n        type={type}\n        value={updatedValue ?? value ?? ''}\n        {...props}\n      />\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{onKeyUp: Function, isReadOnly: boolean, onChange: Function, onClear: Function,\n *     name: string, className: string, id: string, isDisabled: boolean, onMouseUp: Function,\n *     type: string, value: string}}\n */\nTextInput.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  isDisabled: PropTypes.bool,\n  isReadOnly: PropTypes.bool,\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  onClear: PropTypes.func,\n  onKeyUp: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  type: PropTypes.string,\n  value: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{onKeyUp: Function, isReadOnly: boolean, onChange: Function, onClear: Function,\n *     name: string, className: string, id: string, isDisabled: boolean, onMouseUp: Function,\n *     type: string, value: string}}\n */\nTextInput.defaultProps = {\n  className: '',\n  id: null,\n  isDisabled: false,\n  isReadOnly: false,\n  name: null,\n  onChange: helpers.noop,\n  onClear: helpers.noop,\n  onKeyUp: helpers.noop,\n  onMouseUp: helpers.noop,\n  type: 'text',\n  value: ''\n};\n\nexport { TextInput as default, TextInput };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { InputGroup } from '@patternfly/react-core';\nimport _debounce from 'lodash/debounce';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductInventoryHostsQuery } from '../productView/productViewContext';\nimport { TextInput } from '../form/textInput';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A standalone Display Name input filter.\n *\n * @memberof Toolbar\n * @module ToolbarFieldDisplayName\n */\n\n/**\n * ToDo: evaluate the debounce milliseconds, currently based off platforms default 800 ms\n */\n/**\n * Display a display name input field for search.\n *\n * @fires onSubmit\n * @fires onClear\n * @fires onKeyUp\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useDispatch\n * @param {Function} props.useProduct\n * @param {Function} props.useProductInventoryHostsQuery\n * @returns {React.ReactNode}\n */\nconst ToolbarFieldDisplayName = ({\n  t,\n  useDispatch: useAliasDispatch,\n  useProduct: useAliasProduct,\n  useProductInventoryHostsQuery: useAliasProductInventoryHostsQuery\n}) => {\n  const { viewId } = useAliasProduct();\n  const { [RHSM_API_QUERY_SET_TYPES.DISPLAY_NAME]: currentValue } = useAliasProductInventoryHostsQuery();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On submit, dispatch type.\n   *\n   * @event onSubmit\n   * @param {string} submitValue\n   * @returns {void}\n   */\n  const onSubmit = submitValue =>\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.DISPLAY_NAME],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.DISPLAY_NAME]: submitValue?.trim() || null\n      }\n    ]);\n\n  /**\n   * On clear, dispatch type.\n   *\n   * @event onClear\n   * @returns {void}\n   */\n  const onClear = () => {\n    if (currentValue === '' || !currentValue) {\n      return;\n    }\n\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.DISPLAY_NAME],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.DISPLAY_NAME]: null\n      }\n    ]);\n  };\n\n  /**\n   * Set up submit debounce event to allow for bypass.\n   */\n  const debounced = _debounce(onSubmit, 700);\n\n  /**\n   * On enter submit value, on type submit value, and on esc ignore (clear value at component level).\n   *\n   * @event onKeyUp\n   * @param {object} event\n   */\n  const onKeyUp = event => {\n    switch (event.keyCode) {\n      case 13:\n        onSubmit(event.value);\n        break;\n      case 27:\n        break;\n      default:\n        debounced(event.value);\n        break;\n    }\n  };\n\n  return (\n    <InputGroup>\n      <TextInput\n        aria-label={t('curiosity-toolbar.placeholder_filter', { context: 'displayName' })}\n        className=\"curiosity-input__display-name\"\n        iconVariant=\"search\"\n        maxLength={255}\n        onClear={onClear}\n        onKeyUp={onKeyUp}\n        value={currentValue}\n        placeholder={t('curiosity-toolbar.placeholder_filter', { context: 'displayName' })}\n        data-test=\"toolbarFieldDisplayName\"\n      />\n    </InputGroup>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProduct: Function, t: translate, useDispatch: Function, useProductInventoryHostsQuery: Function}}\n */\nToolbarFieldDisplayName.propTypes = {\n  t: PropTypes.func,\n  useDispatch: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductInventoryHostsQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProduct: Function, t: translate, useDispatch: Function, useProductInventoryHostsQuery: Function}}\n */\nToolbarFieldDisplayName.defaultProps = {\n  t: translate,\n  useDispatch: storeHooks.reactRedux.useDispatch,\n  useProduct,\n  useProductInventoryHostsQuery\n};\n\nexport { ToolbarFieldDisplayName as default, ToolbarFieldDisplayName };\n"],"names":["TextInput","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","updatedValue","onKeyUp","event","_this$props","props","onClear","type","currentTarget","keyCode","clonedEvent","_objectSpread","createMockEvent","value","setState","onMouseUp","_this$props2","setTimeout","onChange","_createClass","key","_ref","this","_this$props3","className","id","isDisabled","name","isReadOnly","_objectWithoutProperties","_excluded","updatedName","helpers","updatedId","React","PfTextInput","Object","assign","defaultProps","ToolbarFieldDisplayName","t","useAliasDispatch","useDispatch","useAliasProduct","useProduct","useAliasProductInventoryHostsQuery","useProductInventoryHostsQuery","viewId","currentValue","RHSM_API_QUERY_SET_TYPES","dispatch","onSubmit","submitValue","reduxTypes","_defineProperty","trim","debounced","_debounce","InputGroup","context","iconVariant","maxLength","placeholder","translate","storeHooks"],"sourceRoot":""}