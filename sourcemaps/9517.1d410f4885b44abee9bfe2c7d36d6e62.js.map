{"version":3,"file":"js/9517.1676410485973.3c5dac3b9002f99011bd.js","mappings":"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","sources":["webpack:///./src/components/form/textInput.js","webpack:///./src/components/toolbar/toolbarFieldDisplayName.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TextInput as PfTextInput } from '@patternfly/react-core';\nimport { createMockEvent } from './formHelpers';\nimport { helpers } from '../../common';\n\n/**\n * A wrapper for Patternfly TextInput. Provides restructured event data,\n * and an onClear event for the search type.\n *\n * @augments React.Component\n * @fires onKeyUp\n * @fires onMouseUp\n * @fires onChange\n */\nclass TextInput extends React.Component {\n  state = {\n    updatedValue: null\n  };\n\n  /**\n   * onKeyUp event, provide additional functionality for onClear event.\n   *\n   * @event onKeyUp\n   * @param {object} event\n   */\n  onKeyUp = event => {\n    const { onClear, onKeyUp, type } = this.props;\n    const { currentTarget, keyCode } = event;\n    const clonedEvent = { ...event };\n\n    onKeyUp(createMockEvent(event, true));\n\n    if (keyCode === 27) {\n      if (type === 'search' && currentTarget.value === '') {\n        onClear(createMockEvent(clonedEvent));\n      } else {\n        this.setState({ updatedValue: '' }, () => {\n          onClear(\n            createMockEvent({ ...clonedEvent, ...{ currentTarget: { ...clonedEvent.currentTarget, value: '' } } })\n          );\n        });\n      }\n    }\n  };\n\n  /**\n   * onMouseUp event, provide additional functionality for onClear event.\n   *\n   * @event onMouseUp\n   * @param {object} event\n   */\n  onMouseUp = event => {\n    const { onClear, onMouseUp, type } = this.props;\n    const { currentTarget } = event;\n    const clonedEvent = { ...event };\n\n    onMouseUp(createMockEvent(event, true));\n\n    if (type !== 'search' || currentTarget.value === '') {\n      return;\n    }\n\n    setTimeout(() => {\n      if (currentTarget.value === '') {\n        onClear(createMockEvent(clonedEvent));\n      }\n    });\n  };\n\n  /**\n   * onChange event, provide restructured event.\n   *\n   * @param {string} value\n   * @param {object} event\n   */\n  onChange = (value, event) => {\n    const { onChange } = this.props;\n    const clonedEvent = { ...event };\n\n    this.setState({ updatedValue: value }, () => {\n      onChange(createMockEvent(clonedEvent));\n    });\n  };\n\n  /**\n   * Render a text input.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { updatedValue } = this.state;\n    const {\n      className,\n      id,\n      isDisabled,\n      name,\n      onChange,\n      onClear,\n      onKeyUp,\n      onMouseUp,\n      isReadOnly,\n      type,\n      value,\n      ...props\n    } = this.props;\n    const updatedName = name || helpers.generateId();\n    const updatedId = id || updatedName;\n\n    return (\n      <PfTextInput\n        id={updatedId}\n        name={updatedName}\n        className={`curiosity-text-input ${className}`}\n        isDisabled={isDisabled || false}\n        onChange={this.onChange}\n        onKeyUp={this.onKeyUp}\n        onMouseUp={this.onMouseUp}\n        isReadOnly={isReadOnly || false}\n        type={type}\n        value={updatedValue ?? value ?? ''}\n        {...props}\n      />\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{onKeyUp: Function, isReadOnly: boolean, onChange: Function, onClear: Function,\n *     name: string, className: string, id: string, isDisabled: boolean, onMouseUp: Function,\n *     type: string, value: string}}\n */\nTextInput.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  isDisabled: PropTypes.bool,\n  isReadOnly: PropTypes.bool,\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  onClear: PropTypes.func,\n  onKeyUp: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  type: PropTypes.string,\n  value: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{onKeyUp: Function, isReadOnly: boolean, onChange: Function, onClear: Function,\n *     name: string, className: string, id: string, isDisabled: boolean, onMouseUp: Function,\n *     type: string, value: string}}\n */\nTextInput.defaultProps = {\n  className: '',\n  id: null,\n  isDisabled: false,\n  isReadOnly: false,\n  name: null,\n  onChange: helpers.noop,\n  onClear: helpers.noop,\n  onKeyUp: helpers.noop,\n  onMouseUp: helpers.noop,\n  type: 'text',\n  value: ''\n};\n\nexport { TextInput as default, TextInput };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { InputGroup } from '@patternfly/react-core';\nimport _debounce from 'lodash/debounce';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductInventoryHostsQuery } from '../productView/productViewContext';\nimport { TextInput } from '../form/textInput';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * ToDo: evaluate the debounce milliseconds, currently based off platforms default 800 ms\n */\n/**\n * Display a display name input field for search.\n *\n * @fires onSubmit\n * @fires onClear\n * @fires onKeyUp\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useDispatch\n * @param {Function} props.useProduct\n * @param {Function} props.useProductInventoryHostsQuery\n * @returns {Node}\n */\nconst ToolbarFieldDisplayName = ({\n  t,\n  useDispatch: useAliasDispatch,\n  useProduct: useAliasProduct,\n  useProductInventoryHostsQuery: useAliasProductInventoryHostsQuery\n}) => {\n  const { viewId } = useAliasProduct();\n  const { [RHSM_API_QUERY_SET_TYPES.DISPLAY_NAME]: currentValue } = useAliasProductInventoryHostsQuery();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On submit, dispatch type.\n   *\n   * @event onSubmit\n   * @param {string} submitValue\n   * @returns {void}\n   */\n  const onSubmit = submitValue =>\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.DISPLAY_NAME],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.DISPLAY_NAME]: submitValue?.trim() || null\n      }\n    ]);\n\n  /**\n   * On clear, dispatch type.\n   *\n   * @event onClear\n   * @returns {void}\n   */\n  const onClear = () => {\n    if (currentValue === '' || !currentValue) {\n      return;\n    }\n\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.DISPLAY_NAME],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.DISPLAY_NAME]: null\n      }\n    ]);\n  };\n\n  /**\n   * Set up submit debounce event to allow for bypass.\n   */\n  const debounced = _debounce(onSubmit, 700);\n\n  /**\n   * On enter submit value, on type submit value, and on esc ignore (clear value at component level).\n   *\n   * @event onKeyUp\n   * @param {object} event\n   */\n  const onKeyUp = event => {\n    switch (event.keyCode) {\n      case 13:\n        onSubmit(event.value);\n        break;\n      case 27:\n        break;\n      default:\n        debounced(event.value);\n        break;\n    }\n  };\n\n  return (\n    <InputGroup>\n      <TextInput\n        aria-label={t('curiosity-toolbar.placeholder_filter', { context: 'displayName' })}\n        className=\"curiosity-input__display-name\"\n        iconVariant=\"search\"\n        maxLength={255}\n        onClear={onClear}\n        onKeyUp={onKeyUp}\n        value={currentValue}\n        placeholder={t('curiosity-toolbar.placeholder_filter', { context: 'displayName' })}\n        data-test=\"toolbarFieldDisplayName\"\n      />\n    </InputGroup>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProduct: Function, t: translate, useDispatch: Function, useProductInventoryHostsQuery: Function}}\n */\nToolbarFieldDisplayName.propTypes = {\n  t: PropTypes.func,\n  useDispatch: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductInventoryHostsQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProduct: Function, t: translate, useDispatch: Function, useProductInventoryHostsQuery: Function}}\n */\nToolbarFieldDisplayName.defaultProps = {\n  t: translate,\n  useDispatch: storeHooks.reactRedux.useDispatch,\n  useProduct,\n  useProductInventoryHostsQuery\n};\n\nexport { ToolbarFieldDisplayName as default, ToolbarFieldDisplayName };\n"],"names":["TextInput","state","updatedValue","onKeyUp","event","props","onClear","type","currentTarget","keyCode","clonedEvent","createMockEvent","value","setState","onMouseUp","setTimeout","onChange","this","className","id","isDisabled","name","isReadOnly","updatedName","helpers","updatedId","React","defaultProps","ToolbarFieldDisplayName","t","useAliasDispatch","useDispatch","useAliasProduct","useProduct","useAliasProductInventoryHostsQuery","useProductInventoryHostsQuery","viewId","currentValue","RHSM_API_QUERY_SET_TYPES","dispatch","onSubmit","submitValue","reduxTypes","trim","debounced","_debounce","InputGroup","context","iconVariant","maxLength","placeholder","translate","storeHooks"],"sourceRoot":""}