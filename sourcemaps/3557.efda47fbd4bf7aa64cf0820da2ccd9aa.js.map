{"version":3,"file":"js/3557.17ea673906d749e9420f.js","mappings":"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","sources":["webpack:///./src/components/bannerMessages/bannerMessages.js","webpack:///./src/components/bannerMessages/bannerMessagesContext.js","webpack:///./src/components/graphCard/graphCard.js","webpack:///./src/components/graphCard/graphCardMetricTotals.js","webpack:///./src/components/inventoryCard/inventoryCardHosts.js","webpack:///./src/components/inventoryCardSubscriptions/inventoryCardSubscriptions.js","webpack:///./src/components/inventoryCardSubscriptions/inventoryCardSubscriptionsContext.js","webpack:///./src/components/inventoryTabs/inventoryTab.js","webpack:///./src/components/inventoryTabs/inventoryTabs.js","webpack:///./src/components/productView/productView.js","webpack:///./src/components/tabs/tabs.js","webpack:///./src/components/toolbar/toolbar.js","webpack:///./src/components/toolbar/toolbarContext.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, AlertActionCloseButton, AlertVariant, Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { useShallowCompareEffect } from 'react-use';\nimport { useGetAppMessages } from './bannerMessagesContext';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Banner alert messages for a product view.\n *\n * @memberof Components\n * @module BannerMessages\n * @property {module} BannerMessagesContext\n */\n\n/**\n * Render banner messages.\n *\n * @param {object} props\n * @param {Array} props.messages\n * @param {Function} props.useGetAppMessages\n * @returns {React.ReactNode}\n */\nconst BannerMessages = ({ messages, useGetAppMessages: useAliasGetAppMessages }) => {\n  const [hideAlerts, setHideAlerts] = useState({});\n  const [alerts, setAlerts] = useState([]);\n  const { data: appMessages } = useAliasGetAppMessages();\n\n  useShallowCompareEffect(() => {\n    const updatedMessages = [];\n\n    if (messages.length) {\n      Object.entries(appMessages).forEach(([key, value]) => {\n        if (hideAlerts[key] !== true && value === true) {\n          const message = messages.find(({ id }) => id === key);\n\n          if (message) {\n            updatedMessages.push({\n              key,\n              ...message\n            });\n          }\n        }\n      });\n    }\n\n    setAlerts(\n      updatedMessages.map(({ key, message, title, variant = AlertVariant.info }) => {\n        const actionClose = <AlertActionCloseButton onClose={() => setHideAlerts({ ...hideAlerts, [key]: true })} />;\n\n        return (\n          <Alert actionClose={actionClose} key={key} title={title} variant={variant}>\n            {message}\n          </Alert>\n        );\n      })\n    );\n  }, [appMessages, hideAlerts, messages]);\n\n  if (alerts?.length) {\n    return <div className=\"curiosity-banner-messages\">{alerts}</div>;\n  }\n\n  return null;\n};\n\n/**\n * Prop types.\n *\n * @type {{useGetAppMessages: Function, messages: Array}}\n */\nBannerMessages.propTypes = {\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.node.isRequired,\n      message: PropTypes.node.isRequired,\n      variant: PropTypes.oneOf([...Object.values(AlertVariant)])\n    })\n  ),\n  useGetAppMessages: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGetAppMessages: Function, messages: Array}}\n */\nBannerMessages.defaultProps = {\n  messages: [\n    {\n      id: 'cloudigradeMismatch',\n      title: translate('curiosity-banner.dataMismatchTitle'),\n      message: translate(\n        'curiosity-banner.dataMismatchMessage',\n        {\n          context: helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS !== '' && 'cloudigradeMismatch',\n          appName: helpers.UI_DISPLAY_NAME\n        },\n        [\n          <Button\n            isInline\n            component=\"a\"\n            variant=\"link\"\n            icon={<ExternalLinkAltIcon />}\n            iconPosition=\"right\"\n            target=\"_blank\"\n            href={helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS}\n          />\n        ]\n      )\n    }\n  ],\n  useGetAppMessages\n};\n\nexport { BannerMessages as default, BannerMessages };\n","import { useShallowCompareEffect } from 'react-use';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { dateHelpers } from '../../common';\nimport {\n  rhsmConstants,\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\n\n/**\n * @memberof BannerMessages\n * @module BannerMessagesContext\n */\n\n/**\n * ToDo: useGetAppMessages is setup to work with existing Tally response, pre-metrics\n * Banner messages scans the returned Tally listing for the HAS_CLOUDIGRADE_MISMATCH. In the future\n * this may need to be updated to pull from the \"meta\" object part of the Tally response.\n */\n/**\n * Get app messages.\n *\n * @param {object} options\n * @param {Function} options.getMessageReports\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useProductQuery\n * @param {Function} options.useSelectorsResponse\n * @returns {{data: {cloudigradeMismatch: boolean}, pending: boolean, fulfilled: boolean, error: boolean}}\n */\nconst useGetAppMessages = ({\n  getMessageReports = reduxActions.rhsm.getMessageReports,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductQuery();\n  const dispatch = useAliasDispatch();\n  const { error, fulfilled, pending, data } = useAliasSelectorsResponse({\n    id: 'messages',\n    selector: ({ messages }) => messages?.report?.[productId]\n  });\n\n  useShallowCompareEffect(() => {\n    if (productId) {\n      const { startDate, endDate } = dateHelpers.getRangedDateTime('CURRENT');\n      const updatedQuery = {\n        ...query,\n        [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY,\n        [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate.toISOString(),\n        [RHSM_API_QUERY_SET_TYPES.END_DATE]: endDate.toISOString()\n      };\n\n      getMessageReports(productId, updatedQuery)(dispatch);\n    }\n  }, [productId, query]);\n\n  const updatedData = {\n    cloudigradeMismatch: false\n  };\n\n  if (fulfilled) {\n    const { messages = {} } = data || {};\n\n    updatedData.cloudigradeMismatch =\n      messages?.data\n        ?.reverse()\n        ?.find(\n          ({ [rhsmConstants.RHSM_API_RESPONSE_TALLY_CAPACITY_META_TYPES.HAS_CLOUDIGRADE_MISMATCH]: mismatch }) =>\n            mismatch === true\n        ) !== undefined;\n  }\n\n  return {\n    error,\n    fulfilled,\n    pending,\n    data: {\n      ...updatedData\n    }\n  };\n};\n\nconst context = {\n  useGetAppMessages\n};\n\nexport { context as default, context, useGetAppMessages };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { helpers } from '../../common';\nimport { GraphCardMetricTotals } from './graphCardMetricTotals';\nimport { GraphCardChart } from './graphCardChart';\nimport { GraphCardContext, useParseFiltersSettings } from './graphCardContext';\n\n/**\n * Configurable graph, chart, cards. Consumes Charts.\n *\n * @see Charts\n * @memberof Components\n * @module GraphCard\n * @property {module} GraphCardChart\n * @property {module} GraphCardChartLegend\n * @property {module} GraphCardChartTitleTooltip\n * @property {module} GraphCardChartTooltip\n * @property {module} GraphCardContext\n * @property {module} GraphCardHelpers\n * @property {module} GraphCardMetricTotals\n */\n\n/**\n * Set up graph cards. Expand filters with base graph settings.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useParseFiltersSettings\n * @returns {React.ReactNode}\n */\nconst GraphCard = ({ isDisabled, useParseFiltersSettings: useAliasParseFiltersSettings }) => {\n  const { filtersSettings } = useAliasParseFiltersSettings();\n\n  if (isDisabled || !filtersSettings?.length) {\n    return null;\n  }\n\n  return filtersSettings?.map(filterSetting => (\n    <GraphCardContext.Provider key={`graphCard-${filterSetting?.settings?.metrics?.[0]?.id}`} value={filterSetting}>\n      <GraphCardMetricTotals>\n        <GraphCardChart />\n      </GraphCardMetricTotals>\n    </GraphCardContext.Provider>\n  ));\n};\n\n/**\n * Prop types.\n *\n * @type {{useParseFiltersSettings: Function, isDisabled: boolean}}\n */\nGraphCard.propTypes = {\n  isDisabled: PropTypes.bool,\n  useParseFiltersSettings: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useParseFiltersSettings: Function, isDisabled: boolean}}\n */\nGraphCard.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_GRAPH,\n  useParseFiltersSettings\n};\n\nexport { GraphCard as default, GraphCard };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter, CardHeader, CardTitle, Title } from '@patternfly/react-core';\nimport _camelCase from 'lodash/camelCase';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useGraphCardContext, useMetricsSelector } from './graphCardContext';\nimport { Loader, SkeletonSize } from '../loader/loader';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldRangedMonthly';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * @memberof GraphCard\n * @module GraphCardMetricTotals\n */\n\n/**\n * Display totals for a single metric.\n *\n * @param {object} props\n * @param {React.ReactNode} props.children\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {React.ReactNode}\n */\nconst GraphCardMetricTotals = ({\n  children,\n  useGraphCardContext: useAliasGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate } = useAliasProductGraphTallyQuery();\n  const { pending, error, fulfilled, dataSets = [] } = useAliasMetricsSelector();\n  const { data = [], id: firstChartId, metric: firstMetricId, meta = {} } = dataSets[0] || {};\n  const { date: lastDate, hasData: lastHasData, y: lastValue } = data[data.length - 1] || {};\n\n  const {\n    date: currentDate,\n    hasData: currentHasData,\n    y: currentValue\n  } = data.find(({ isCurrentDate }) => isCurrentDate === true) || {};\n\n  const { totalMonthlyDate: monthlyDate, totalMonthlyHasData: monthlyHasData, totalMonthlyValue: monthlyValue } = meta;\n\n  const { title: selectedMonth, isCurrent } =\n    toolbarFieldOptions.find(\n      option => option.title === startDate || option.value.startDate.toISOString() === startDate\n    ) || {};\n\n  const dailyDate = isCurrent ? currentDate : lastDate;\n  const dailyHasData = isCurrent ? currentHasData : lastHasData;\n  const dailyValue = isCurrent ? currentValue : lastValue;\n\n  if (settings?.isMetricDisplay && settings?.cards?.length) {\n    const metricDisplayPassedData = helpers.setImmutableData({\n      chartId: firstChartId,\n      dailyDate,\n      dailyHasData,\n      dailyValue,\n      metricId: firstMetricId,\n      groupMetricId: [...settings.groupMetric],\n      monthlyDate,\n      monthlyHasData,\n      monthlyValue,\n      selectedValue: selectedMonth\n    });\n\n    return (\n      <div\n        data-test={`graphMetricTotals-${settings?.groupMetric?.map(metricId => _camelCase(metricId))?.join('-')}`}\n        data-test-data={JSON.stringify(metricDisplayPassedData)}\n        className=\"curiosity-usage-graph__totals\"\n      >\n        <div>\n          <div className=\"curiosity-usage-graph__totals-column\">\n            {settings?.cards?.map(({ key, header, body, footer }, index) => (\n              <Card\n                key={key || helpers.generateHash({ metricDisplayPassedData, index })}\n                isPlain\n                data-test={`graphMetricTotalsCard-${index}`}\n                className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n              >\n                <CardHeader>\n                  <CardTitle>\n                    <Title headingLevel=\"h2\" size=\"md\">\n                      {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                      {fulfilled && ((typeof header === 'function' && header(metricDisplayPassedData)) || header)}\n                    </Title>\n                  </CardTitle>\n                </CardHeader>\n                <CardBody>\n                  <div>\n                    {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg, height: '60px' }} />}\n                    {fulfilled && ((typeof body === 'function' && body(metricDisplayPassedData)) || body)}\n                  </div>\n                </CardBody>\n                <CardFooter>\n                  <div>\n                    {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                    {fulfilled && ((typeof footer === 'function' && footer(metricDisplayPassedData)) || footer)}\n                  </div>\n                </CardFooter>\n              </Card>\n            ))}\n          </div>\n        </div>\n        <div>\n          <div className=\"curiosity-usage-graph__totals-graph-column\">{children}</div>\n        </div>\n      </div>\n    );\n  }\n\n  return children;\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, children: React.ReactNode, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.propTypes = {\n  children: PropTypes.node,\n  useGraphCardContext: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, children: React.ReactNode, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.defaultProps = {\n  children: null,\n  useGraphCardContext,\n  useMetricsSelector,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardMetricTotals as default, GraphCardMetricTotals };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useGetHostsInventory, useOnColumnSortHosts } from './inventoryCardContext';\nimport InventoryCard from './inventoryCard';\nimport { helpers } from '../../common';\n\n/**\n * @memberof InventoryCard\n * @module InventoryCardHosts\n */\n\n/**\n * A hosts' system inventory component.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useGetInventory\n * @param {Function} props.useOnColumnSort\n * @returns {React.ReactNode}\n */\nconst InventoryCardHosts = ({ ...props }) => <InventoryCard {...props} />;\n\n/**\n * Prop types.\n *\n * @type {{isDisabled: boolean, useGetInventory: Function, useOnColumnSort: Function}}\n */\nInventoryCardHosts.propTypes = {\n  isDisabled: PropTypes.bool,\n  useGetInventory: PropTypes.func,\n  useOnColumnSort: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{isDisabled: boolean, useGetInventory: Function, useOnColumnSort: Function}}\n */\nInventoryCardHosts.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_TABLE_HOSTS,\n  useGetInventory: useGetHostsInventory,\n  useOnColumnSort: useOnColumnSortHosts\n};\n\nexport { InventoryCardHosts as default, InventoryCardHosts };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  useProductInventorySubscriptionsConfig,\n  useProductInventorySubscriptionsQuery\n} from '../productView/productViewContext';\nimport {\n  useGetSubscriptionsInventory,\n  useOnPageSubscriptions,\n  useOnColumnSortSubscriptions\n} from './inventoryCardSubscriptionsContext';\nimport InventoryCard from '../inventoryCard/inventoryCard';\nimport { helpers } from '../../common';\n\n/**\n * @memberof Components\n * @module InventoryCardSubscriptions\n * @property {module} InventoryCardSubscriptionsContext\n */\n\n/**\n * A subscriptions' system inventory component.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useGetInventory\n * @param {Function} props.useOnPage\n * @param {Function} props.useOnColumnSort\n * @param {Function} props.useProductInventoryConfig\n * @param {Function} props.useProductInventoryQuery\n * @fires onColumnSort\n * @fires onPage\n * @returns {React.ReactNode}\n */\nconst InventoryCardSubscriptions = ({ ...props }) => <InventoryCard cardActions={null} {...props} />;\n\n/**\n * Prop types.\n *\n * @type {{useOnPage: Function, isDisabled: boolean, useProductInventoryConfig: Function, useGetInventory: Function,\n *     useOnColumnSort: Function, useProductInventoryQuery: Function}}\n */\nInventoryCardSubscriptions.propTypes = {\n  isDisabled: PropTypes.bool,\n  useGetInventory: PropTypes.func,\n  useOnPage: PropTypes.func,\n  useOnColumnSort: PropTypes.func,\n  useProductInventoryConfig: PropTypes.func,\n  useProductInventoryQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnPage: Function, isDisabled: boolean, useProductInventoryConfig: Function, useGetInventory: Function,\n *     useOnColumnSort: Function, useProductInventoryQuery: Function}}\n */\nInventoryCardSubscriptions.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS,\n  useGetInventory: useGetSubscriptionsInventory,\n  useOnPage: useOnPageSubscriptions,\n  useOnColumnSort: useOnColumnSortSubscriptions,\n  useProductInventoryConfig: useProductInventorySubscriptionsConfig,\n  useProductInventoryQuery: useProductInventorySubscriptionsQuery\n};\n\nexport { InventoryCardSubscriptions as default, InventoryCardSubscriptions };\n","import { useShallowCompareEffect } from 'react-use';\nimport _camelCase from 'lodash/camelCase';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { reduxActions, reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductInventorySubscriptionsQuery } from '../productView/productViewContext';\nimport {\n  RHSM_API_QUERY_INVENTORY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_INVENTORY_SUBSCRIPTIONS_SORT_TYPES as SORT_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * @memberof InventoryCardSubscriptions\n * @module InventoryCardSubscriptionsContext\n */\n\n/**\n * Combined Redux RHSM Actions, getSubscriptionsInventory, and inventory selector response.\n *\n * @param {object} options\n * @param {boolean} options.isDisabled\n * @param {Function} options.getInventory\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useProductInventoryQuery\n * @param {Function} options.useSelectorsResponse\n * @returns {Function}\n */\nconst useGetSubscriptionsInventory = ({\n  isDisabled = false,\n  getInventory = reduxActions.rhsm.getSubscriptionsInventory,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventorySubscriptionsQuery,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductInventoryQuery();\n  const dispatch = useAliasDispatch();\n  const { cancelled, pending, data, ...response } = useAliasSelectorsResponse(\n    ({ inventory }) => inventory?.subscriptionsInventory?.[productId]\n  );\n\n  useShallowCompareEffect(() => {\n    if (!isDisabled) {\n      getInventory(productId, query)(dispatch);\n    }\n  }, [dispatch, isDisabled, productId, query]);\n\n  return {\n    ...response,\n    pending: pending || cancelled || false,\n    data: (data?.length === 1 && data[0]) || data || {}\n  };\n};\n\n/**\n * An onPage callback for subscriptions inventory.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnPageSubscriptions = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for subscriptions inventory.\n   *\n   * @event onPage\n   * @param {object} params\n   * @param {number} params.offset\n   * @param {number} params.perPage\n   * @returns {void}\n   */\n  return ({ offset, perPage }) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.OFFSET],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.OFFSET]: offset\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.LIMIT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.LIMIT]: perPage\n      }\n    ]);\n  };\n};\n\n/**\n * An onColumnSort callback for subscriptions inventory.\n *\n * @param {object} options\n * @param {object} options.sortColumns\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnColumnSortSubscriptions = ({\n  sortColumns = SORT_TYPES,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for subscriptions inventory.\n   *\n   * @event onColumnSort\n   * @param {*} _data\n   * @param {object} params\n   * @param {string} params.direction\n   * @param {string} params.id\n   * @returns {void}\n   */\n  return (_data, { direction, id }) => {\n    const updatedSortColumn = Object.values(sortColumns).find(value => value === id || _camelCase(value) === id);\n    let updatedDirection;\n\n    if (!updatedSortColumn) {\n      if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n        console.warn(`Sorting can only be performed on select fields, confirm field ${id} is allowed.`);\n      }\n      return;\n    }\n\n    switch (direction) {\n      case SortByDirection.desc:\n        updatedDirection = SORT_DIRECTION_TYPES.DESCENDING;\n        break;\n      default:\n        updatedDirection = SORT_DIRECTION_TYPES.ASCENDING;\n        break;\n    }\n\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.DIRECTION],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.DIRECTION]: updatedDirection\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.SORT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.SORT]: updatedSortColumn\n      }\n    ]);\n  };\n};\n\nconst context = {\n  useGetSubscriptionsInventory,\n  useOnPageSubscriptions,\n  useOnColumnSortSubscriptions\n};\n\nexport {\n  context as default,\n  context,\n  useGetSubscriptionsInventory,\n  useOnPageSubscriptions,\n  useOnColumnSortSubscriptions\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * @memberof InventoryTabs\n * @module InventoryTab\n */\n\n/**\n * A tab pass-through component for passing props to InventoryTabs.\n *\n * @param {object} props\n * @param {boolean} props.active\n * @param {React.ReactNode} props.children\n * @param {string} props.title\n * @returns {React.ReactNode}\n */\n// eslint-disable-next-line no-unused-vars\nconst InventoryTab = ({ active, children, title }) => children;\n\n/**\n * Prop types.\n *\n * @type {{children: React.ReactNode, className: string}}\n */\nInventoryTab.propTypes = {\n  children: PropTypes.node.isRequired,\n  active: PropTypes.bool,\n  title: PropTypes.node.isRequired\n};\n\n/**\n * Default props.\n *\n * @type {{className: string}}\n */\nInventoryTab.defaultProps = {\n  active: false\n};\n\nexport { InventoryTab as default, InventoryTab };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Title } from '@patternfly/react-core';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct } from '../productView/productViewContext';\nimport { Tabs } from '../tabs/tabs';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { InventoryTab } from './inventoryTab';\n\n/**\n * An inventory tabs display with state. Consume Tabs.\n *\n * @see Tabs\n * @memberof Components\n * @module InventoryTabs\n * @property {module} InventoryTab\n */\n\n/**\n * Update tab state.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnTab = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ index } = {}) => {\n    dispatch({\n      type: reduxTypes.inventory.SET_INVENTORY_TAB,\n      tabs: {\n        [productId]: index\n      }\n    });\n  };\n};\n\n/**\n * An inventory tabs component.\n * Render inventory tabs using Inventory tab passed props only.\n *\n * @fires onTab\n * @param {object} props\n * @param {number} props.activeTab\n * @param {React.ReactNode} props.children\n * @param {number} props.defaultActiveTab\n * @param {boolean} props.isDisabled\n * @param {Function} props.t\n * @param {Function} props.useOnTab\n * @param {Function} props.useProduct\n * @param {Function} props.useSelector\n * @returns {React.ReactNode|null}\n */\nconst InventoryTabs = ({\n  activeTab,\n  children,\n  defaultActiveTab,\n  isDisabled,\n  t,\n  useOnTab: useAliasOnTab,\n  useProduct: useAliasProduct,\n  useSelector: useAliasSelector\n}) => {\n  const { productId } = useAliasProduct();\n  const updatedActiveTab = useAliasSelector(({ inventory }) => inventory.tabs?.[productId], activeTab);\n  const onTab = useAliasOnTab();\n\n  if (isDisabled) {\n    return null;\n  }\n\n  const updatedChildren = React.Children.toArray(children).map((child, index) => {\n    const { props: childProps = {} } = child;\n\n    return {\n      active: childProps.active || false,\n      content: childProps.children || child,\n      title: childProps.title || t('curiosity-inventory.tabSubHeading', { count: index })\n    };\n  });\n\n  return (\n    <React.Fragment>\n      <Title headingLevel=\"h2\" className=\"sr-only\">\n        {t('curiosity-inventory.tabHeading', { count: updatedChildren.length })}\n      </Title>\n      <Tabs activeTab={updatedActiveTab} defaultActiveTab={defaultActiveTab} onTab={onTab} tabs={updatedChildren} />\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnTab: Function, useProduct: Function, t: Function, children: React.ReactNode,\n *     useSelector: Function, defaultActiveTab: number, isDisabled: boolean, activeTab: number}}\n */\nInventoryTabs.propTypes = {\n  activeTab: PropTypes.number,\n  children: PropTypes.node.isRequired,\n  defaultActiveTab: PropTypes.number,\n  isDisabled: PropTypes.bool,\n  t: PropTypes.func,\n  useOnTab: PropTypes.func,\n  useProduct: PropTypes.func,\n  useSelector: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnTab: Function, useProduct: Function, t: translate, useSelector: Function,\n *     defaultActiveTab: number, isDisabled: boolean, activeTab: number}}\n */\nInventoryTabs.defaultProps = {\n  activeTab: 0,\n  defaultActiveTab: 0,\n  isDisabled: helpers.UI_DISABLED_TABLE,\n  t: translate,\n  useOnTab,\n  useProduct,\n  useSelector: storeHooks.reactRedux.useSelector\n};\n\nexport { InventoryTabs as default, InventoryTabs, InventoryTab, useOnTab };\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { routerContext } from '../router';\nimport { ProductViewContext } from './productViewContext';\nimport { PageLayout, PageHeader, PageSection, PageToolbar, PageMessages, PageColumns } from '../pageLayout/pageLayout';\nimport { GraphCard } from '../graphCard/graphCard';\nimport { Toolbar } from '../toolbar/toolbar';\nimport { InventoryCard } from '../inventoryCard/inventoryCard';\nimport { InventoryCardHosts } from '../inventoryCard/inventoryCardHosts';\nimport { helpers } from '../../common';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport { InventoryCardSubscriptions } from '../inventoryCardSubscriptions/inventoryCardSubscriptions';\nimport { RHSM_INTERNAL_PRODUCT_DISPLAY_TYPES as DISPLAY_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Primary product display component, and config context provider.\n *\n * @memberof Components\n * @module ProductView\n * @property {module} ProductViewContext\n * @property {module} ProductViewMissing\n */\n\n/**\n * ToDo: review removing the \"useCallback\" once the routing updates are in place\n */\n/**\n * Display products.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useRouteDetail\n * @returns {React.ReactNode}\n */\nconst ProductView = ({ t, useRouteDetail: useAliasRouteDetail }) => {\n  const { productGroup, productConfig } = useAliasRouteDetail();\n\n  const renderProduct = useCallback(() => {\n    const updated = config => {\n      const { initialInventoryFilters, initialSubscriptionsInventoryFilters, productDisplay, productId, viewId } =\n        config;\n\n      if (!productId || !viewId) {\n        return null;\n      }\n\n      return (\n        <ProductViewContext.Provider value={config} key={`product_${productId}`}>\n          <PageMessages>{productDisplay !== DISPLAY_TYPES.HOURLY && <BannerMessages />}</PageMessages>\n          <PageToolbar>\n            <Toolbar />\n          </PageToolbar>\n          <PageSection>\n            <GraphCard />\n          </PageSection>\n          <PageSection className={(productDisplay === DISPLAY_TYPES.HOURLY && 'curiosity-page-section__tabs') || ''}>\n            <InventoryTabs\n              isDisabled={\n                (!initialInventoryFilters && !initialSubscriptionsInventoryFilters) || helpers.UI_DISABLED_TABLE\n              }\n            >\n              {!helpers.UI_DISABLED_TABLE_HOSTS &&\n                productDisplay !== DISPLAY_TYPES.HOURLY &&\n                productDisplay !== DISPLAY_TYPES.CAPACITY &&\n                initialInventoryFilters && (\n                  <InventoryTab\n                    key={`inventory_hosts_${productId}`}\n                    title={t('curiosity-inventory.tabHosts', { context: [productId] })}\n                  >\n                    <InventoryCardHosts />\n                  </InventoryTab>\n                )}\n              {!helpers.UI_DISABLED_TABLE_INSTANCES &&\n                productDisplay !== DISPLAY_TYPES.DUAL_AXES &&\n                productDisplay !== DISPLAY_TYPES.LEGACY &&\n                productDisplay !== DISPLAY_TYPES.PARTIAL &&\n                initialInventoryFilters && (\n                  <InventoryTab\n                    key={`inventory_instances_${productId}`}\n                    title={t('curiosity-inventory.tabInstances', { context: [productId] })}\n                  >\n                    <InventoryCard />\n                  </InventoryTab>\n                )}\n              {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && initialSubscriptionsInventoryFilters && (\n                <InventoryTab\n                  key={`inventory_subs_${productId}`}\n                  title={t('curiosity-inventory.tabSubscriptions', { context: [productId] })}\n                >\n                  <InventoryCardSubscriptions />\n                </InventoryTab>\n              )}\n            </InventoryTabs>\n          </PageSection>\n        </ProductViewContext.Provider>\n      );\n    };\n\n    return productConfig?.map(config => updated(config));\n  }, [productConfig, t]);\n\n  return (\n    (productGroup && (\n      <PageLayout>\n        <PageHeader productLabel={productGroup}>\n          {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: productGroup })}\n        </PageHeader>\n        <PageColumns>{renderProduct()}</PageColumns>\n      </PageLayout>\n    )) ||\n    null\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: translate, useRouteDetail: Function}}\n */\nProductView.propTypes = {\n  t: PropTypes.func,\n  useRouteDetail: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, useRouteDetail: Function}}\n */\nProductView.defaultProps = {\n  t: translate,\n  useRouteDetail: routerContext.useRouteDetail\n};\n\nexport { ProductView as default, ProductView };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tabs as PfTabs, Tab, TabTitleText, Grid, GridItem } from '@patternfly/react-core';\nimport _isEqualWith from 'lodash/isEqualWith';\nimport { helpers } from '../../common';\n\n/**\n * PF tabs with state.\n *\n * @memberof Components\n * @module Tabs\n */\n\n/**\n * FixMe: PF tabs misinterprets \"isElementInView\" when tab title nodes are loaded dynamically\n * It appears the use of isElementInView within PF tabs is trying to be predicative in using\n * \"getBoundingClientRect\" but produces questionable results in scenarios where content is\n * async created. isElementInView assumes some form of the content will always be there\n * instead of scenarios where someone tries to dynamically apply components. It may be good to\n * review using a window.setTimeout(() => handleScrollButtons()) in componentDidMount.\n *\n * Our temporary solution is to simply hide the buttons with a manual set flag affecting the\n * CSS class. This will most likely cause long-term issues.\n */\n/**\n * ToDo: Insights frontend components uses a custom tabs layout, investigate related CSS classes\n * Originally we applied the CSS classes, but they appeared to provide nothing. Since Insights\n * rolled its own tabs we're hesitant to apply said classes without understanding what they provide.\n */\n/**\n * A set of tabs.\n *\n * @augments React.Component\n * @fires onTab\n */\nclass Tabs extends React.Component {\n  state = {\n    updatedActiveTab: null,\n    updatedTabs: null\n  };\n\n  componentDidMount() {\n    const { updatedTabs } = this.state;\n\n    if (updatedTabs === null) {\n      this.setTabData();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { tabs } = this.props;\n    const customizer = (valueA, valueB) => {\n      if (typeof valueA === 'function' && typeof valueB === 'function') {\n        return valueA.toString() === valueB.toString();\n      }\n\n      return undefined;\n    };\n\n    if (!_isEqualWith(prevProps.tabs, tabs, customizer)) {\n      this.setTabData();\n    }\n  }\n\n  /**\n   * On tab selected\n   *\n   * @event onTab\n   * @param {object} params\n   * @param {number} params.index\n   */\n  onTab = ({ index }) => {\n    const { onTab } = this.props;\n\n    this.setState(\n      {\n        updatedActiveTab: index\n      },\n      () => onTab({ index })\n    );\n  };\n\n  /**\n   * Convert tab objects into the required PF Tab format.\n   */\n  setTabData() {\n    const { activeTab, defaultActiveTab, tabs } = this.props;\n    let updatedActiveTab = defaultActiveTab;\n\n    const updatedTabs = tabs.map(({ active, content, title }, index) => {\n      updatedActiveTab = active ? index : updatedActiveTab;\n\n      return (\n        <Tab key={title} eventKey={index} title={<TabTitleText>{title}</TabTitleText>}>\n          {content}\n        </Tab>\n      );\n    });\n\n    if (typeof activeTab === 'number') {\n      updatedActiveTab = activeTab;\n    }\n\n    this.setState({\n      updatedActiveTab,\n      updatedTabs\n    });\n  }\n\n  /**\n   * Apply props to tabs.\n   *\n   * @returns {React.ReactNode}\n   */\n  renderTabs() {\n    const { updatedActiveTab, updatedTabs } = this.state;\n    const { className, hasOverflowScroll } = this.props;\n\n    return (\n      <PfTabs\n        className={`curiosity-tabs${(!hasOverflowScroll && '__no-scroll') || ''} ${className || ''}`}\n        activeKey={updatedActiveTab}\n        onSelect={(event, index) => this.onTab({ event, index })}\n        mountOnEnter\n        unmountOnExit\n        inset={{\n          default: 'insetNone',\n          md: 'insetLg'\n        }}\n      >\n        {updatedTabs}\n      </PfTabs>\n    );\n  }\n\n  /**\n   * Render tabs.\n   *\n   * @returns {React.ReactNode}\n   */\n  render() {\n    return (\n      <Grid className=\"curiosity-tabs-container\">\n        <GridItem span={12}>{this.renderTabs()}</GridItem>\n      </Grid>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{tabs: Array, hasOverflowScroll: boolean, onTab: Function, className: string,\n *     defaultActiveTab: number, activeTab: number}}\n */\nTabs.propTypes = {\n  activeTab: PropTypes.number,\n  className: PropTypes.string,\n  defaultActiveTab: PropTypes.number,\n  hasOverflowScroll: PropTypes.bool,\n  onTab: PropTypes.func,\n  tabs: PropTypes.arrayOf(\n    PropTypes.shape({\n      active: PropTypes.bool,\n      content: PropTypes.node.isRequired,\n      title: PropTypes.node.isRequired\n    })\n  )\n};\n\n/**\n * Default props.\n *\n * @type {{tabs: Array, hasOverflowScroll: boolean, onTab: Function, className: string,\n *     defaultActiveTab: number, activeTab: number}}\n */\nTabs.defaultProps = {\n  activeTab: null,\n  className: '',\n  defaultActiveTab: 0,\n  hasOverflowScroll: false,\n  onTab: helpers.noop,\n  tabs: []\n};\n\nexport { Tabs as default, Tabs };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Toolbar as PfToolbar,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup\n} from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport { useProductToolbarQuery } from '../productView/productViewContext';\nimport { useToolbarFieldClear, useToolbarFieldClearAll, useToolbarFields } from './toolbarContext';\nimport { ToolbarFieldSelectCategory, useSelectCategoryOptions } from './toolbarFieldSelectCategory';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Primary view toolbar.\n *\n * @memberof Components\n * @module Toolbar\n * @property {module} ToolbarContext\n * @property {module} ToolbarFieldArchitecture\n * @property {module} ToolbarFieldBillingProvider\n * @property {module} ToolbarFieldCategory\n * @property {module} ToolbarFieldDisplayName\n * @property {module} ToolbarFieldGranularity\n * @property {module} ToolbarFieldRangedMonthly\n * @property {module} ToolbarFieldSelectCategory\n * @property {module} ToolbarFieldSla\n * @property {module} ToolbarFieldUom\n * @property {module} ToolbarFieldUsage\n * @property {module} ToolbarFieldVariant\n */\n\n/**\n * Application filter toolbar.\n *\n * @fires onClearFilter\n * @fires onClearAll\n * @param {object} props\n * @param {boolean} props.hardFilterReset On clearing all fields allow the category to reset as well.\n * @param {boolean} props.isDisabled\n * @param {Function} props.t\n * @param {Function} props.useProductToolbarQuery\n * @param {Function} props.useSelectCategoryOptions\n * @param {Function} props.useToolbarFieldClear\n * @param {Function} props.useToolbarFieldClearAll\n * @param {Function} props.useToolbarFields\n * @returns {React.ReactNode}\n */\nconst Toolbar = ({\n  hardFilterReset,\n  isDisabled,\n  t,\n  useProductToolbarQuery: useAliasProductToolbarQuery,\n  useSelectCategoryOptions: useAliasSelectCategoryOptions,\n  useToolbarFieldClear: useAliasToolbarFieldClear,\n  useToolbarFieldClearAll: useAliasToolbarFieldClearAll,\n  useToolbarFields: useAliasToolbarFields\n}) => {\n  const toolbarFieldQueries = useAliasProductToolbarQuery();\n  const { currentCategory, options } = useAliasSelectCategoryOptions();\n  const clearField = useAliasToolbarFieldClear();\n  const clearAllFields = useAliasToolbarFieldClearAll();\n  const { itemFields, secondaryFields } = useAliasToolbarFields();\n\n  if (isDisabled || (!options?.length && !secondaryFields?.length)) {\n    return null;\n  }\n\n  /**\n   * Clear a specific value\n   *\n   * @event onClearFilter\n   * @param {object} params\n   * @param {*} params.value\n   * @returns {void}\n   */\n  const onClearFilter = ({ value }) => clearField(value);\n\n  /**\n   * Clear all active filters.\n   *\n   * @event onClearAll\n   * @returns {void}\n   */\n  const onClearAll = () => clearAllFields(hardFilterReset);\n\n  /**\n   * Set selected options for chip display.\n   *\n   * @param {object} params\n   * @param {*} params.value\n   * @returns {Array}\n   */\n  const setSelectedOptions = ({ value: filterName } = {}) => {\n    const filterValue = toolbarFieldQueries?.[filterName];\n    return (\n      (typeof filterValue === 'string' && [\n        t('curiosity-toolbar.label', { context: [filterName, (filterValue === '' && 'none') || filterValue] })\n      ]) ||\n      []\n    );\n  };\n\n  return (\n    <PfToolbar\n      id=\"curiosity-toolbar\"\n      className=\"curiosity-toolbar pf-m-toggle-group-container ins-c-primary-toolbar\"\n      collapseListedFiltersBreakpoint=\"sm\"\n      clearAllFilters={onClearAll}\n      clearFiltersButtonText={t('curiosity-toolbar.clearFilters')}\n    >\n      <ToolbarContent>\n        <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"md\">\n          <ToolbarGroup variant=\"filter-group\">\n            {options.length > 1 && (\n              <ToolbarItem>\n                <ToolbarFieldSelectCategory />\n              </ToolbarItem>\n            )}\n            {options.map(({ title, value: filterName, component: OptionComponent, isClearable }) => {\n              const chipProps = { categoryName: title };\n\n              if (isClearable !== false) {\n                chipProps.chips = setSelectedOptions({ value: filterName });\n                chipProps.deleteChip = () => onClearFilter({ value: filterName });\n              }\n\n              return (\n                <ToolbarFilter\n                  key={filterName}\n                  showToolbarItem={currentCategory === filterName || options.length === 1}\n                  {...chipProps}\n                >\n                  <OptionComponent isFilter />\n                </ToolbarFilter>\n              );\n            })}\n          </ToolbarGroup>\n        </ToolbarToggleGroup>\n        <ToolbarGroup key=\"itemFields\">{itemFields}</ToolbarGroup>\n        <ToolbarGroup key=\"secondaryFields\" alignment={{ default: 'alignRight' }}>\n          {secondaryFields}\n        </ToolbarGroup>\n      </ToolbarContent>\n    </PfToolbar>\n  );\n};\n\n/**\n * Prop types\n *\n * @type {{useToolbarFieldClear: Function, t: Function, useSelectCategoryOptions: Function, hardFilterReset: boolean,\n *     useToolbarFields: Function, useProductToolbarQuery: Function, isDisabled: boolean,\n *     useToolbarFieldClearAll: Function}}\n */\nToolbar.propTypes = {\n  hardFilterReset: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  t: PropTypes.func,\n  useProductToolbarQuery: PropTypes.func,\n  useSelectCategoryOptions: PropTypes.func,\n  useToolbarFieldClear: PropTypes.func,\n  useToolbarFieldClearAll: PropTypes.func,\n  useToolbarFields: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useToolbarFieldClear: Function, t: Function, useSelectCategoryOptions: Function, hardFilterReset: boolean,\n *     useToolbarFields: Function, useProductToolbarQuery: Function, isDisabled: boolean,\n *     useToolbarFieldClearAll: Function}}\n */\nToolbar.defaultProps = {\n  hardFilterReset: false,\n  isDisabled: helpers.UI_DISABLED_TOOLBAR,\n  t: translate,\n  useProductToolbarQuery,\n  useSelectCategoryOptions,\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFields\n};\n\nexport { Toolbar as default, Toolbar };\n","import React, { useMemo } from 'react';\nimport { ToolbarItem } from '@patternfly/react-core';\nimport { useProductQuery, useProductToolbarConfig } from '../productView/productViewContext';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { useOnSelect as useSelectCategoryOnSelect, toolbarFieldOptions } from './toolbarFieldSelectCategory';\nimport { useOnSelect as useArchitectureOnSelect } from './toolbarFieldArchitecture';\nimport { useOnSelect as useBillingProviderOnSelect } from './toolbarFieldBillingProvider';\nimport { useOnSelect as useCategoryOnSelect } from './toolbarFieldCategory';\nimport { useOnSelect as useSlaOnSelect } from './toolbarFieldSla';\nimport { useOnSelect as useUsageOnSelect } from './toolbarFieldUsage';\nimport { useOnSelect as useVariantOnSelect } from './toolbarFieldVariant';\nimport { helpers } from '../../common/helpers';\n\n/**\n * @memberof Toolbar\n * @module ToolbarContext\n */\n\n/**\n * Clear a specific toolbar category using a select component's OnSelect hook.\n *\n * @param {object} options\n * @param {Function} options.useArchitectureOnSelect\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useCategoryOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @param {Function} options.useVariantOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClear = ({\n  useArchitectureOnSelect: useAliasArchitectureOnSelect = useArchitectureOnSelect,\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useCategoryOnSelect: useAliasCategoryOnSelect = useCategoryOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect,\n  useVariantOnSelect: useAliasVariantOnSelect = useVariantOnSelect\n} = {}) => {\n  const architectureOnSelect = useAliasArchitectureOnSelect();\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const categoryOnSelect = useAliasCategoryOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n  const variantOnSelect = useAliasVariantOnSelect();\n\n  return field => {\n    switch (field) {\n      case RHSM_API_QUERY_SET_TYPES.ARCHITECTURE:\n        architectureOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER:\n        billingOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.CATEGORY:\n        categoryOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.SLA:\n        slaOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.USAGE:\n        usageOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.VARIANT:\n        variantOnSelect();\n        break;\n      default:\n        break;\n    }\n  };\n};\n\n/**\n * Clear all available toolbar categories.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useArchitectureOnSelect\n * @param {Function} options.useSelectCategoryOnSelect\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useCategoryOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @param {Function} options.useVariantOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClearAll = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useArchitectureOnSelect: useAliasArchitectureOnSelect = useArchitectureOnSelect,\n  useSelectCategoryOnSelect: useAliasSelectCategoryOnSelect = useSelectCategoryOnSelect,\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useCategoryOnSelect: useAliasCategoryOnSelect = useCategoryOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect,\n  useVariantOnSelect: useAliasVariantOnSelect = useVariantOnSelect\n} = {}) => {\n  const {\n    [RHSM_API_QUERY_SET_TYPES.ARCHITECTURE]: architecture,\n    [RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER]: billingProvider,\n    [RHSM_API_QUERY_SET_TYPES.CATEGORY]: category,\n    [RHSM_API_QUERY_SET_TYPES.SLA]: sla,\n    [RHSM_API_QUERY_SET_TYPES.USAGE]: usage,\n    [RHSM_API_QUERY_SET_TYPES.VARIANT]: variant\n  } = useAliasProductQuery();\n  const architectureOnSelect = useAliasArchitectureOnSelect();\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const categoryOnSelect = useAliasCategoryOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n  const selectCategoryOnSelect = useAliasSelectCategoryOnSelect();\n  const variantOnSelect = useAliasVariantOnSelect();\n\n  return hardFilterReset => {\n    if (typeof architecture === 'string') {\n      architectureOnSelect();\n    }\n\n    if (typeof billingProvider === 'string') {\n      billingOnSelect();\n    }\n\n    if (typeof category === 'string') {\n      categoryOnSelect();\n    }\n\n    if (typeof sla === 'string') {\n      slaOnSelect();\n    }\n\n    if (typeof usage === 'string') {\n      usageOnSelect();\n    }\n\n    if (typeof variant === 'string') {\n      variantOnSelect();\n    }\n\n    if (hardFilterReset) {\n      selectCategoryOnSelect();\n    }\n  };\n};\n\n/**\n * Return lists of item and secondary toolbar fields for display.\n *\n * @param {object} options\n * @param {Array} options.categoryOptions\n * @param {Function} options.useProductToolbarConfig\n * @returns {Array}\n */\nconst useToolbarFields = ({\n  categoryOptions = toolbarFieldOptions,\n  useProductToolbarConfig: useAliasProductToolbarConfig = useProductToolbarConfig\n} = {}) => {\n  const { filters = [] } = useAliasProductToolbarConfig();\n\n  return useMemo(() => {\n    const setFilter = ({ id, content, ...filterProps }) => {\n      const option = categoryOptions.find(({ value: categoryOptionValue }) => id === categoryOptionValue);\n      const { component: OptionComponent } = option || {};\n\n      return (\n        (OptionComponent && (\n          <ToolbarItem key={`option-${id}`}>\n            <OptionComponent isFilter={false} {...filterProps} />\n          </ToolbarItem>\n        )) || (\n          <ToolbarItem key={id || helpers.generateId()}>\n            {typeof content === 'function' ? content() : content}\n          </ToolbarItem>\n        ) ||\n        null\n      );\n    };\n\n    return {\n      itemFields: filters.filter(({ isItem }) => isItem === true).map(setFilter),\n      secondaryFields: filters.filter(({ isSecondary }) => isSecondary === true).map(setFilter)\n    };\n  }, [categoryOptions, filters]);\n};\n\nconst context = {\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFields\n};\n\nexport { context as default, context, useToolbarFieldClear, useToolbarFieldClearAll, useToolbarFields };\n"],"names":["BannerMessages","_ref","messages","useAliasGetAppMessages","useGetAppMessages","_useState","useState","_useState2","_slicedToArray","hideAlerts","setHideAlerts","_useState3","_useState4","alerts","setAlerts","appMessages","data","useShallowCompareEffect","updatedMessages","length","Object","entries","forEach","_ref2","_ref3","key","value","message","find","_ref4","id","push","_objectSpread","map","_ref5","title","_ref5$variant","variant","AlertVariant","actionClose","React","AlertActionCloseButton","onClose","_defineProperty","Alert","className","defaultProps","translate","context","helpers","appName","Button","isInline","component","icon","ExternalLinkAltIcon","iconPosition","target","href","arguments","undefined","_ref$getMessageReport","getMessageReports","reduxActions","_ref$useDispatch","useDispatch","useAliasDispatch","storeHooks","_ref$useProduct","useProduct","useAliasProduct","_ref$useProductQuery","useProductQuery","useAliasProductQuery","_ref$useSelectorsResp","useSelectorsResponse","useAliasSelectorsResponse","_useAliasProduct","productId","query","dispatch","_useAliasSelectorsRes","selector","_messages$report","report","error","fulfilled","pending","_objectSpread2","_dateHelpers$getRange","dateHelpers","startDate","endDate","updatedQuery","RHSM_API_QUERY_SET_TYPES","GRANULARITY_TYPES","toISOString","updatedData","cloudigradeMismatch","_messages$data","_messages$data$revers","_ref3$messages","reverse","rhsmConstants","GraphCard","isDisabled","filtersSettings","useAliasParseFiltersSettings","useParseFiltersSettings","filterSetting","_filterSetting$settin","_filterSetting$settin2","_filterSetting$settin3","GraphCardContext","concat","settings","metrics","GraphCardMetricTotals","GraphCardChart","_settings$cards","children","useAliasGraphCardContext","useGraphCardContext","useAliasMetricsSelector","useMetricsSelector","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","_useAliasGraphCardCon2","_useAliasMetricsSelec","_useAliasMetricsSelec2","dataSets","_ref2$data","firstChartId","firstMetricId","metric","_ref2$meta","meta","lastDate","date","lastHasData","hasData","lastValue","y","isCurrentDate","currentDate","currentHasData","currentValue","monthlyDate","totalMonthlyDate","monthlyHasData","totalMonthlyHasData","monthlyValue","totalMonthlyValue","_ref6","toolbarFieldOptions","option","selectedMonth","isCurrent","dailyDate","dailyHasData","dailyValue","isMetricDisplay","cards","_settings$groupMetric","_settings$groupMetric2","_settings$cards2","metricDisplayPassedData","chartId","metricId","groupMetricId","_toConsumableArray","groupMetric","selectedValue","_camelCase","join","JSON","stringify","_ref7","index","header","body","footer","Card","isPlain","CardHeader","CardTitle","Title","headingLevel","size","Loader","skeletonProps","SkeletonSize","CardBody","height","CardFooter","InventoryCardHosts","props","assign","InventoryCard","useGetInventory","useGetHostsInventory","useOnColumnSort","useOnColumnSortHosts","InventoryCardSubscriptions","cardActions","useGetSubscriptionsInventory","useOnPage","useOnPageSubscriptions","useOnColumnSortSubscriptions","useProductInventoryConfig","useProductInventorySubscriptionsConfig","useProductInventoryQuery","useProductInventorySubscriptionsQuery","_ref$isDisabled","_ref$getInventory","getInventory","_ref$useProductInvent","useAliasProductInventoryQuery","_inventory$subscripti","inventory","subscriptionsInventory","cancelled","response","_objectWithoutProperties","_excluded","_ref3$useDispatch","_ref3$useProduct","_useAliasProduct2","offset","perPage","type","reduxTypes","viewId","_ref7$sortColumns","sortColumns","SORT_TYPES","_ref7$useDispatch","_ref7$useProduct","_useAliasProduct3","_data","_ref8","updatedDirection","direction","updatedSortColumn","values","SortByDirection","SORT_DIRECTION_TYPES","console","warn","InventoryTab","active","propTypes","PropTypes","useOnTab","tabs","InventoryTabs","activeTab","defaultActiveTab","t","useAliasOnTab","useAliasSelector","useSelector","updatedActiveTab","_inventory$tabs","onTab","updatedChildren","child","_child$props","childProps","content","count","Tabs","ProductView","_useAliasRouteDetail","useAliasRouteDetail","useRouteDetail","productGroup","productConfig","renderProduct","useCallback","config","initialInventoryFilters","initialSubscriptionsInventoryFilters","productDisplay","ProductViewContext","PageMessages","DISPLAY_TYPES","PageToolbar","Toolbar","PageSection","updated","PageLayout","PageHeader","productLabel","PageColumns","routerContext","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","apply","state","updatedTabs","setState","_createClass","this","setTabData","prevProps","_isEqualWith","valueA","valueB","toString","_this$props","Tab","eventKey","TabTitleText","_this2","_this$state","_this$props2","hasOverflowScroll","PfTabs","activeKey","onSelect","event","mountOnEnter","unmountOnExit","inset","default","md","Grid","GridItem","span","renderTabs","hardFilterReset","useAliasProductToolbarQuery","useProductToolbarQuery","useAliasSelectCategoryOptions","useSelectCategoryOptions","useAliasToolbarFieldClear","useToolbarFieldClear","useAliasToolbarFieldClearAll","useToolbarFieldClearAll","useAliasToolbarFields","useToolbarFields","toolbarFieldQueries","_useAliasSelectCatego","currentCategory","options","clearField","clearAllFields","_useAliasToolbarField","itemFields","secondaryFields","PfToolbar","collapseListedFiltersBreakpoint","clearAllFilters","clearFiltersButtonText","ToolbarContent","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarGroup","ToolbarItem","ToolbarFieldSelectCategory","filterName","OptionComponent","chipProps","categoryName","isClearable","chips","filterValue","setSelectedOptions","deleteChip","ToolbarFilter","showToolbarItem","isFilter","alignment","_ref$useArchitectureO","useArchitectureOnSelect","useAliasArchitectureOnSelect","_ref$useBillingProvid","useBillingProviderOnSelect","useAliasBillingProviderOnSelect","_ref$useCategoryOnSel","useCategoryOnSelect","useAliasCategoryOnSelect","_ref$useSlaOnSelect","useSlaOnSelect","useAliasSlaOnSelect","_ref$useUsageOnSelect","useUsageOnSelect","useAliasUsageOnSelect","_ref$useVariantOnSele","useVariantOnSelect","useAliasVariantOnSelect","architectureOnSelect","billingOnSelect","categoryOnSelect","slaOnSelect","usageOnSelect","variantOnSelect","field","_ref2$useProductQuery","_ref2$useArchitecture","_ref2$useSelectCatego","useSelectCategoryOnSelect","useAliasSelectCategoryOnSelect","_ref2$useBillingProvi","_ref2$useCategoryOnSe","_ref2$useSlaOnSelect","_ref2$useUsageOnSelec","_ref2$useVariantOnSel","_useAliasProductQuery","architecture","billingProvider","category","sla","usage","selectCategoryOnSelect","_ref3$categoryOptions","categoryOptions","_ref3$useProductToolb","useProductToolbarConfig","useAliasProductToolbarConfig","_useAliasProductToolb","_useAliasProductToolb2","filters","useMemo","setFilter","filterProps","categoryOptionValue","filter","isItem","isSecondary"],"sourceRoot":""}