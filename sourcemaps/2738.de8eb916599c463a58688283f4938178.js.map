{"version":3,"file":"js/2738.cf7e922a76ae89a601d2.js","mappings":"gZAwBMA,EAAsBC,OAAOC,OAAOC,EAAAA,IAAaC,KAAI,SAAAC,GAAI,MAAK,CAClEC,OAAOC,EAAAA,EAAAA,WAAU,0BAA2B,CAAEC,QAAS,CAAC,cAAeH,KACvEI,MAAOJ,EACPK,UAAU,EACX,IAUKC,EAAc,WAGT,IAAAC,EAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,CAAC,EAACG,EAAAJ,EAFJK,YAAaC,OAAgB,IAAAF,EAAGG,EAAAA,GAAAA,WAAAA,YAAiCH,EAAAI,EAAAR,EACjES,WAEQC,QAFmB,IAAAF,EAAGC,EAAAA,WAAUD,KAEhCE,OACFC,EAAWL,IAEjB,OAAO,WAA2B,IAALM,GAAKX,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,CAAC,GAAlBJ,MAAAA,OAAK,IAAAe,EAAG,KAAIA,EACpBC,EAA+BC,EAAAA,GAAAA,kBAA8BjB,GAArDkB,EAASF,EAATE,UAAWC,EAAOH,EAAPG,QACnBL,EAAS,CACP,CACElB,KAAMwB,EAAAA,GAAAA,MAAAA,+BACNP,OAAAA,IACDQ,EAAAA,EAAAA,GAAA,CAECzB,KAAMwB,EAAAA,GAAAA,MAAAA,qBAAsCE,EAAAA,GAAAA,aAC5CT,OAAAA,GACCS,EAAAA,GAAAA,YAAuCtB,IAAKqB,EAAAA,EAAAA,GAAA,CAG7CzB,KAAMwB,EAAAA,GAAAA,MAAAA,qBAAsCE,EAAAA,GAAAA,YAC5CT,OAAAA,GACCS,EAAAA,GAAAA,WAAsCJ,EAAUK,gBAAaF,EAAAA,EAAAA,GAAA,CAG9DzB,KAAMwB,EAAAA,GAAAA,MAAAA,qBAAsCE,EAAAA,GAAAA,UAC5CT,OAAAA,GACCS,EAAAA,GAAAA,SAAoCH,EAAQI,gBAGnD,CACF,EAeMC,EAA0B,SAAHC,GAOvB,IANJC,EAAQD,EAARC,SACAC,EAAOF,EAAPE,QACAC,EAAQH,EAARG,SACAC,EAACJ,EAADI,EACaC,EAAgBL,EAA7BvB,YAGgD6B,GAAiBC,EAFRP,EAAzDQ,6BAESX,EAAAA,GAAAA,aACHY,EAAWJ,IACXK,EAAiBR,EAAQhC,KAAI,SAAAyC,GAAM,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAM,IAAEnC,SAAUmC,EAAOpC,QAAU+B,GAAY,IAElG,OACEO,IAAAA,cAACC,EAAAA,OAAM,CACL,aAAYV,EAAE,gCAADW,OAAkCd,EAAY,UAAc,IAAM,CAAE3B,QAAS,gBAC1FmC,SAAUA,EACVP,QAASQ,EACTM,gBAAiBV,EACjBW,YAAab,EAAE,gCAADW,OAAkCd,EAAY,UAAc,IAAM,CAAE3B,QAAS,gBAC3F6B,SAAUA,EACV,YAAU,2BAGhB,EA6BAJ,EAAwBmB,aAAe,CACrCjB,UAAU,EACVC,QAASpC,EACTqC,SAAUgB,EAAAA,eAAAA,KACVf,EAAG/B,EAAAA,UACHI,YAAAA,EACA+B,0BAAAA,EAAAA,0B","sources":["webpack:///./src/components/toolbar/toolbarFieldGranularity.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport {\n  RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A standalone Granularity select filter.\n *\n * @memberof Toolbar\n * @module ToolbarFieldGranularity\n */\n\n/**\n * Select field options.\n *\n * @type {Array<{title: React.ReactNode, value: string, selected: boolean}>}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.label', { context: ['granularity', type] }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update granularity.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    const { startDate, endDate } = dateHelpers.getRangedDateTime(value);\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: value\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.END_DATE]: endDate.toISOString()\n      }\n    ]);\n  };\n};\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {Array} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {React.ReactNode}\n */\nconst ToolbarFieldGranularity = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: updatedValue } = useAliasProductGraphTallyQuery();\n  const onSelect = useAliasOnSelect();\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'granularity' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'granularity' })}\n      position={position}\n      data-test=\"toolbarFieldGranularity\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldGranularity.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldGranularity.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductGraphTallyQuery\n};\n\nexport { ToolbarFieldGranularity as default, ToolbarFieldGranularity, toolbarFieldOptions, useOnSelect };\n"],"names":["toolbarFieldOptions","Object","values","FIELD_TYPES","map","type","title","translate","context","value","selected","useOnSelect","_ref","arguments","length","undefined","_ref$useDispatch","useDispatch","useAliasDispatch","storeHooks","_ref$useProduct","useProduct","viewId","dispatch","_ref2$value","_dateHelpers$getRange","dateHelpers","startDate","endDate","reduxTypes","_defineProperty","RHSM_API_QUERY_SET_TYPES","toISOString","ToolbarFieldGranularity","_ref6","isFilter","options","position","t","useAliasOnSelect","updatedValue","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","onSelect","updatedOptions","option","_objectSpread","React","Select","concat","selectedOptions","placeholder","defaultProps","SelectPosition"],"sourceRoot":""}