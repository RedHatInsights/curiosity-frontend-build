{"version":3,"file":"js/8341.1643121555415.01f4c28f8272826bf7dd.js","mappings":"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","sources":["webpack:///./src/components/chart/chartIcon.js","webpack:///./src/components/graphCard/graphCard.deprecated.js","webpack:///./src/components/graphCard/graphCardChart.deprecated.js","webpack:///./src/components/graphCard/graphCardChartLegend.js","webpack:///./src/components/graphCard/graphCardChartTooltip.js","webpack:///./src/components/graphCard/graphCardHelpers.js","webpack:///./src/components/minHeight/minHeight.js","webpack:///./src/components/productView/productViewContext.js","webpack:///./node_modules/fast-shallow-equal/index.js","webpack:///./node_modules/react-use/esm/useShallowCompareEffect.js","webpack:///./node_modules/react-use/esm/useCustomCompareEffect.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { EyeIcon, EyeSlashIcon, InfinityIcon, SquareIcon, IconSize } from '@patternfly/react-icons';\n\n/**\n * Emulate pf icon sizing for custom SVGs\n *\n * @param {string} size\n * @returns {string} em measurement\n */\nconst getSize = size => {\n  switch (size) {\n    case 'md':\n      return '1.5em';\n    case 'lg':\n      return '2em';\n    case 'xl':\n      return '3em';\n    case 'sm':\n    default:\n      return '1em';\n  }\n};\n\n/**\n * Render an icon for use outside of Victory charts.\n *\n * @param {object} props\n * @param {string} props.fill\n * @param {string} props.symbol\n * @param {string} props.size\n * @param {string} props.title\n * @returns {Node}\n */\nconst ChartIcon = ({ fill, symbol, size, title }) => {\n  const svgProps = {};\n  const iconProps = { size, title };\n  const emSvgSize = getSize(size);\n\n  if (title) {\n    svgProps['aria-labelledby'] = title;\n  } else {\n    svgProps['aria-hidden'] = true;\n  }\n\n  if (fill) {\n    iconProps.color = fill;\n  }\n\n  const setIcon = () => {\n    switch (symbol) {\n      case 'dash':\n        return (\n          <span\n            style={{\n              width: emSvgSize,\n              height: `${Number.parseFloat(emSvgSize) / 2}em`\n            }}\n          >\n            <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 38 10\" role=\"img\" {...svgProps}>\n              <rect y=\"5\" width=\"10\" height=\"10\" fill={fill} />\n              <rect x=\"14\" y=\"5\" width=\"10\" height=\"10\" fill={fill} />\n              <rect x=\"28\" y=\"5\" width=\"10\" height=\"10\" fill={fill} />\n            </svg>\n          </span>\n        );\n      case 'threshold':\n        return (\n          <span style={{ width: `${Number.parseFloat(emSvgSize) * 2}em`, height: emSvgSize }}>\n            <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 18 10\" role=\"img\" {...svgProps}>\n              <line\n                x1={0}\n                y1={(Number.parseFloat(emSvgSize) * 16) / 2}\n                x2={Number.parseFloat(emSvgSize) * 16 * 3}\n                y2={(Number.parseFloat(emSvgSize) * 16) / 2}\n                stroke={fill}\n                strokeWidth={3}\n                strokeDasharray=\"4,3\"\n              />\n            </svg>\n          </span>\n        );\n      case 'eye':\n        return <EyeIcon {...iconProps} />;\n      case 'eyeSlash':\n        return <EyeSlashIcon {...iconProps} />;\n      case 'infinity':\n        return <InfinityIcon {...iconProps} />;\n      case 'square':\n      default:\n        return <SquareIcon {...iconProps} />;\n    }\n  };\n\n  return <span className={`curiosity-chartarea__icon curiosity-chartarea__icon-${symbol}`}>{setIcon()}</span>;\n};\n\nChartIcon.propTypes = {\n  fill: PropTypes.string,\n  size: PropTypes.oneOf([...Object.keys(IconSize)]),\n  symbol: PropTypes.oneOf(['dash', 'eye', 'eyeSlash', 'infinity', 'square', 'threshold']),\n  title: PropTypes.string\n};\n\nChartIcon.defaultProps = {\n  fill: null,\n  size: 'sm',\n  symbol: 'square',\n  title: null\n};\n\nexport { ChartIcon as default, ChartIcon };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardTitle, CardHeader, CardActions, CardBody, Title } from '@patternfly/react-core';\nimport { useShallowCompareEffect } from 'react-use';\nimport { connect, reduxActions, reduxSelectors } from '../../redux';\nimport { useProduct, useProductGraphConfig, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { helpers } from '../../common';\nimport { RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { Loader } from '../loader/loader';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { GraphCardChart } from './graphCardChart.deprecated';\n\n/**\n * A chart/graph card.\n *\n * @param {object} props\n * @param {Node} props.cardTitle\n * @param {Node} props.children\n * @param {boolean} props.error\n * @param {Function} props.getGraphReportsCapacity\n * @param {object} props.graphData\n * @param {object} props.meta\n * @param {boolean} props.isDisabled\n * @param {boolean} props.pending\n * @param {Function} props.useProduct\n * @param {Function} props.useProductGraphConfig\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCard = ({\n  cardTitle,\n  children,\n  error,\n  getGraphReportsCapacity,\n  graphData,\n  meta,\n  isDisabled,\n  pending,\n  useProduct: useAliasProduct,\n  useProductGraphConfig: useAliasProductGraphConfig,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productId } = useAliasProduct();\n  const { settings } = useAliasProductGraphConfig();\n  const query = useAliasProductGraphTallyQuery();\n\n  useShallowCompareEffect(() => {\n    const {\n      [RHSM_API_QUERY_TYPES.START_DATE]: startDate,\n      [RHSM_API_QUERY_TYPES.END_DATE]: endDate,\n      [RHSM_API_QUERY_TYPES.GRANULARITY]: granularity\n    } = query;\n\n    if (!isDisabled && granularity && startDate && endDate && productId) {\n      getGraphReportsCapacity(productId, query);\n    }\n  }, [getGraphReportsCapacity, isDisabled, productId, query]);\n\n  if (isDisabled) {\n    return null;\n  }\n\n  let actionDisplay = null;\n\n  if (typeof settings?.actionDisplay === 'function') {\n    actionDisplay = settings.actionDisplay({ data: { ...graphData }, meta: { ...meta } });\n  }\n\n  return (\n    <Card className=\"curiosity-usage-graph\">\n      <MinHeight key=\"headerMinHeight\">\n        <CardHeader>\n          <CardTitle>\n            <Title headingLevel=\"h2\" size=\"lg\">\n              {cardTitle}\n            </Title>\n          </CardTitle>\n          <CardActions className={(error && 'blur') || ''}>\n            <React.Fragment key=\"actionDisplay\">{actionDisplay}</React.Fragment>\n            {children}\n          </CardActions>\n        </CardHeader>\n      </MinHeight>\n      <MinHeight key=\"bodyMinHeight\">\n        <CardBody>\n          <div className={(error && 'blur') || (pending && 'fadein') || ''}>\n            {pending && <Loader variant=\"graph\" />}\n            {!pending && <GraphCardChart graphData={graphData} />}\n          </div>\n        </CardBody>\n      </MinHeight>\n    </Card>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{getGraphReportsCapacity: Function, useProduct: Function, useProductGraphTallyQuery: Function,\n *     useProductGraphConfig: Function, children: Node, meta: object, pending: boolean, graphData: object,\n *     isDisabled: boolean, error: boolean, cardTitle: Node}}\n */\nGraphCard.propTypes = {\n  cardTitle: PropTypes.node,\n  children: PropTypes.node,\n  error: PropTypes.bool,\n  getGraphReportsCapacity: PropTypes.func,\n  graphData: PropTypes.object,\n  isDisabled: PropTypes.bool,\n  meta: PropTypes.object,\n  pending: PropTypes.bool,\n  useProduct: PropTypes.func,\n  useProductGraphConfig: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{getGraphReportsCapacity: Function, useProduct: Function, useProductGraphTallyQuery: Function,\n *     useProductGraphConfig: Function, children: Node, meta: object, pending: boolean, graphData: object,\n *     isDisabled: boolean, error: boolean, cardTitle: Node}}\n */\nGraphCard.defaultProps = {\n  cardTitle: null,\n  children: null,\n  error: false,\n  getGraphReportsCapacity: helpers.noop,\n  graphData: {},\n  isDisabled: helpers.UI_DISABLED_GRAPH,\n  meta: {},\n  pending: false,\n  useProduct,\n  useProductGraphConfig,\n  useProductGraphTallyQuery\n};\n\n/**\n * Apply actions to props.\n *\n * @param {Function} dispatch\n * @returns {object}\n */\nconst mapDispatchToProps = dispatch => ({\n  getGraphReportsCapacity: (id, query) => dispatch(reduxActions.rhsm.getGraphReportsCapacity(id, query))\n});\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.graphCard.makeGraphCard();\n\nconst ConnectedGraphCard = connect(makeMapStateToProps, mapDispatchToProps)(GraphCard);\n\nexport { ConnectedGraphCard as default, ConnectedGraphCard, GraphCard };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { chart_color_green_300 as chartColorGreenDark } from '@patternfly/react-tokens';\nimport { useProductGraphConfig, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { graphCardHelpers } from './graphCardHelpers';\nimport { Chart } from '../chart/chart';\nimport GraphCardChartLegend from './graphCardChartLegend';\nimport GraphCardChartTooltip from './graphCardChartTooltip';\nimport { RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\n\n/**\n * A chart/graph.\n *\n * @param {object} props\n * @param {object} props.graphData\n * @param {Function} props.useProductGraphConfig\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardChart = ({\n  graphData,\n  useProductGraphConfig: useAliasProductGraphConfig,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { filters } = useAliasProductGraphConfig();\n  const query = useAliasProductGraphTallyQuery();\n  const { [RHSM_API_QUERY_TYPES.GRANULARITY]: granularity } = query;\n\n  const chartAreaProps = {\n    xAxisLabelIncrement: graphCardHelpers.getChartXAxisLabelIncrement(granularity),\n    xAxisTickFormat: ({ item, previousItem, tick }) =>\n      graphCardHelpers.xAxisTickFormat({\n        tick,\n        date: item.date,\n        previousDate: previousItem.date,\n        granularity\n      }),\n    yAxisTickFormat: graphCardHelpers.yAxisTickFormat\n  };\n\n  const filteredGraphData = data => {\n    const filtered = key => {\n      const tempFiltered = {\n        data: data[key],\n        id: key,\n        strokeWidth: 2,\n        isStacked: !/^threshold/.test(key),\n        isThreshold: /^threshold/.test(key)\n      };\n\n      if (/^threshold/.test(key)) {\n        tempFiltered.stroke = chartColorGreenDark.value;\n        tempFiltered.strokeDasharray = '4,3';\n        tempFiltered.strokeWidth = 3;\n      }\n\n      return tempFiltered;\n    };\n\n    if (filters?.length) {\n      return filters.map(value => Object.assign(filtered(value.id), value));\n    }\n\n    return Object.keys(data).map(key => filtered(key));\n  };\n\n  return (\n    <Chart\n      key={`chart_${JSON.stringify(query)}`}\n      {...chartAreaProps}\n      dataSets={filteredGraphData(graphData)}\n      chartLegend={({ chart, datum }) => <GraphCardChartLegend chart={chart} datum={datum} />}\n      chartTooltip={({ datum }) => <GraphCardChartTooltip datum={datum} />}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, useProductGraphConfig: Function, graphData: object}}\n */\nGraphCardChart.propTypes = {\n  graphData: PropTypes.object,\n  useProductGraphConfig: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, useProductGraphConfig: Function, graphData: object}}\n */\nGraphCardChart.defaultProps = {\n  graphData: {},\n  useProductGraphConfig,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChart as default, GraphCardChart };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { useMount } from 'react-use';\nimport { useProduct } from '../productView/productViewContext';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { ChartIcon } from '../chart/chartIcon';\n\n/**\n * A custom chart legend.\n *\n * @fires onClick\n * @param {object} props\n * @param {object} props.chart\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useDispatch\n * @param {Function} props.useProduct\n * @param {Function} props.useSelectors\n * @returns {Node}\n */\nconst GraphCardChartLegend = ({\n  chart,\n  datum,\n  t,\n  useDispatch: useAliasDispatch,\n  useSelectors: useAliasSelectors,\n  useProduct: useAliasProduct\n}) => {\n  const { productLabel, viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n  const legendItems = useAliasSelectors(\n    datum.dataSets.map(\n      ({ id }) =>\n        ({ graph }) =>\n          graph.legend?.[`${viewId}-${id}`]\n    )\n  );\n\n  useMount(() => {\n    datum.dataSets.forEach(({ id }, index) => {\n      const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n\n      if (checkIsToggled) {\n        chart.hide(id);\n      }\n    });\n  });\n\n  /**\n   * Toggle legend item and chart.\n   *\n   * @event onClick\n   * @param {string} id\n   */\n  const onClick = id => {\n    const updatedToggle = chart.toggle(id);\n\n    dispatch({\n      type: reduxTypes.graph.SET_GRAPH_LEGEND,\n      id: `${viewId}-${id}`,\n      value: updatedToggle\n    });\n  };\n\n  return (\n    <React.Fragment>\n      {datum.dataSets.map(({ id, isThreshold, stroke: color, data = [] }, index) => {\n        const isDisabled =\n          !data.find(({ y, hasData }) => (y >= 0 && hasData === true) || (y >= 0 && isThreshold === true)) || false;\n\n        const labelContent = t(\n          [`curiosity-graph.label_${(isThreshold && 'threshold') || id}`, 'curiosity-graph.label_no'],\n          {\n            product: productLabel,\n            context: productLabel\n          }\n        );\n\n        const tooltipContent = t(\n          `curiosity-graph.legendTooltip${(isThreshold && '_threshold') || ''}_${id}`,\n          {\n            product: productLabel,\n            context: productLabel\n          },\n          [<span style={{ whiteSpace: 'nowrap' }} />]\n        );\n\n        const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n\n        const button = (\n          <Button\n            onClick={() => onClick(id)}\n            onKeyPress={() => onClick(id)}\n            className=\"curiosity-usage-graph__legend-item\"\n            tabIndex={0}\n            key={`curiosity-button-${id}`}\n            variant=\"link\"\n            component=\"a\"\n            isDisabled={isDisabled}\n            icon={\n              ((isDisabled || checkIsToggled) && <ChartIcon symbol=\"eyeSlash\" />) || (\n                <ChartIcon\n                  symbol={(isThreshold && 'dash') || 'square'}\n                  style={{ visibility: (isDisabled && 'hidden') || (checkIsToggled && 'hidden') || 'visible' }}\n                  fill={color}\n                />\n              )\n            }\n          >\n            {labelContent}\n          </Button>\n        );\n\n        if (tooltipContent) {\n          return (\n            <Tooltip\n              key={`curiosity-tooltip-${id}`}\n              content={<p>{tooltipContent}</p>}\n              position={TooltipPosition.top}\n              enableFlip\n              distance={5}\n            >\n              {button}\n            </Tooltip>\n          );\n        }\n\n        return button;\n      })}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, t: Function, useDispatch: Function, useSelectors: Function, chart: object}}\n */\nGraphCardChartLegend.propTypes = {\n  chart: PropTypes.shape({\n    hide: PropTypes.func,\n    toggle: PropTypes.func,\n    isToggled: PropTypes.func\n  }),\n  datum: PropTypes.shape({\n    dataSets: PropTypes.arrayOf(\n      PropTypes.shape({\n        stroke: PropTypes.string.isRequired,\n        id: PropTypes.string.isRequired,\n        isThreshold: PropTypes.bool\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useDispatch: PropTypes.func,\n  useSelectors: PropTypes.func,\n  useProduct: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: object, useProduct: Function, t: Function, useDispatch: Function, useSelectors: Function, chart: object}}\n */\nGraphCardChartLegend.defaultProps = {\n  chart: {\n    hide: helpers.noop,\n    toggle: helpers.noop,\n    isToggled: helpers.noop\n  },\n  datum: {\n    dataSets: []\n  },\n  t: translate,\n  useDispatch: storeHooks.reactRedux.useDispatch,\n  useSelectors: storeHooks.reactRedux.useSelectors,\n  useProduct\n};\n\nexport { GraphCardChartLegend as default, GraphCardChartLegend };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { getTooltipDate } from './graphCardHelpers';\nimport { translate } from '../i18n/i18n';\nimport { ChartIcon } from '../chart/chartIcon';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * A custom chart tooltip.\n *\n * @param {object} props\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useProduct\n * @returns {Node}\n */\nconst GraphCardChartTooltip = ({\n  datum,\n  t,\n  useProduct: useAliasProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productLabel } = useAliasProduct();\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n\n  let header = null;\n  const data = [];\n  const { itemsByKey = {} } = datum || {};\n\n  Object.keys(itemsByKey)\n    .reverse()\n    .forEach((key, index) => {\n      if (index === 0) {\n        header = getTooltipDate({\n          date: itemsByKey[key]?.data.date,\n          granularity\n        });\n      }\n\n      const tempDataFacet = {\n        color: itemsByKey[key]?.color\n      };\n\n      if (itemsByKey[key]?.chartType === 'threshold') {\n        let thresholdStringValue = itemsByKey[key]?.data.y ?? t('curiosity-graph.label_noData');\n\n        if (itemsByKey[key]?.data.hasInfinite) {\n          if (tempDataFacet.color) {\n            thresholdStringValue = (\n              <ChartIcon\n                symbol=\"infinity\"\n                fill=\"#ffffff\"\n                title={t('curiosity-graph.label_threshold', { context: 'infinite' })}\n              />\n            );\n          } else {\n            thresholdStringValue = t('curiosity-graph.label_threshold', { context: 'infinite' });\n          }\n        }\n\n        tempDataFacet.label = t('curiosity-graph.label_threshold');\n        tempDataFacet.value = thresholdStringValue;\n      } else {\n        const dataFactsValue =\n          (itemsByKey[key]?.data.hasData === false && t('curiosity-graph.label_noData')) ||\n          itemsByKey[key]?.data.y ||\n          0;\n\n        tempDataFacet.label = t('curiosity-graph.label', { context: key, product: productLabel });\n        tempDataFacet.value = dataFactsValue;\n      }\n\n      tempDataFacet.chartType = itemsByKey[key]?.chartType;\n      data.push(tempDataFacet);\n    });\n\n  return (\n    <div className=\"curiosity-usage-graph__tooltip\">\n      <table summary={t('curiosity-graph.tooltipSummary')}>\n        {(data.length && header && (\n          <thead>\n            <tr>\n              <th colSpan={2}>{header}</th>\n            </tr>\n          </thead>\n        )) ||\n          null}\n        {(data.length && (\n          <tbody>\n            {data.map(dataFacet => {\n              const updatedDataFacetValue =\n                (typeof dataFacet.value === 'number' &&\n                  !Number.isInteger(dataFacet.value) &&\n                  helpers\n                    .numberDisplay(dataFacet.value)\n                    ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: true })\n                    ?.toUpperCase()) ||\n                dataFacet.value;\n\n              return (\n                <tr key={`tooltip-${dataFacet.label}`}>\n                  <th>\n                    {dataFacet.chartType === 'threshold' && (\n                      <ChartIcon size=\"sm\" symbol=\"dash\" fill={dataFacet.color || 'transparent'} />\n                    )}\n                    {dataFacet.chartType !== 'threshold' && (\n                      <ChartIcon size=\"sm\" fill={dataFacet.color || 'transparent'} />\n                    )}{' '}\n                    {dataFacet.label}\n                  </th>\n                  <td>{updatedDataFacetValue}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        )) ||\n          null}\n      </table>\n      {(!data.length && t('curiosity-graph.label_noData', { context: 'error' })) || null}\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.propTypes = {\n  datum: PropTypes.shape({\n    itemsByKey: PropTypes.objectOf(\n      PropTypes.shape({\n        chartType: PropTypes.string,\n        color: PropTypes.string,\n        data: PropTypes.shape({\n          date: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),\n          hasData: PropTypes.bool,\n          hasInfinite: PropTypes.bool,\n          y: PropTypes.number\n        })\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.defaultProps = {\n  datum: {},\n  t: translate,\n  useProduct,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChartTooltip as default, GraphCardChartTooltip };\n","import moment from 'moment';\nimport { chart_color_green_300 as chartColorGreenDark } from '@patternfly/react-tokens';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers, helpers } from '../../common';\n\n/**\n * Update chart/graph filters with base settings with styling.\n *\n * @param {Array} filters\n * @returns {{standaloneFilters: Array, groupedFilters: Array}}\n */\nconst generateChartSettings = (filters = []) => {\n  const standaloneFilters = [];\n  const groupedFilters = [];\n\n  filters.forEach(({ id, isStandalone = false, isThreshold = false, ...settings }) => {\n    if (!id) {\n      return;\n    }\n\n    const baseFilterSettings = {\n      id,\n      isStacked: !isThreshold,\n      isStandalone,\n      isThreshold,\n      strokeWidth: 2\n    };\n\n    if (isThreshold) {\n      baseFilterSettings.stroke = chartColorGreenDark.value;\n      baseFilterSettings.strokeDasharray = '4,3';\n      baseFilterSettings.strokeWidth = 3;\n    }\n\n    if (isStandalone) {\n      standaloneFilters.push({\n        ...baseFilterSettings,\n        ...settings\n      });\n    } else {\n      groupedFilters.push({\n        ...baseFilterSettings,\n        ...settings\n      });\n    }\n  });\n\n  return {\n    standaloneFilters,\n    groupedFilters\n  };\n};\n\n/**\n * Returns x axis ticks/intervals array for the xAxisTickInterval\n *\n * @param {string} granularity See enum of RHSM_API_QUERY_GRANULARITY_TYPES\n * @returns {number}\n */\nconst getChartXAxisLabelIncrement = granularity => {\n  switch (granularity) {\n    case GRANULARITY_TYPES.DAILY:\n      return 5;\n    case GRANULARITY_TYPES.WEEKLY:\n    case GRANULARITY_TYPES.MONTHLY:\n      return 2;\n    case GRANULARITY_TYPES.QUARTERLY:\n    default:\n      return 1;\n  }\n};\n\n/**\n * Return a formatted date string.\n *\n * @param {object} params\n * @param {Date} params.date\n * @param {string} params.granularity See enum of RHSM_API_QUERY_GRANULARITY_TYPES\n * @returns {string}\n */\nconst getTooltipDate = ({ date, granularity } = {}) => {\n  const momentDate = moment.utc(date);\n\n  switch (granularity) {\n    case GRANULARITY_TYPES.QUARTERLY:\n      return `${momentDate.format(dateHelpers.timestampQuarterFormats.yearShort)} - ${momentDate\n        .add(1, 'quarter')\n        .format(dateHelpers.timestampQuarterFormats.yearShort)}`;\n\n    case GRANULARITY_TYPES.MONTHLY:\n      return momentDate.format(dateHelpers.timestampMonthFormats.yearLong);\n\n    case GRANULARITY_TYPES.WEEKLY:\n      return `${momentDate.format(dateHelpers.timestampDayFormats.short)} - ${momentDate\n        .add(1, 'week')\n        .format(dateHelpers.timestampDayFormats.yearShort)}`;\n\n    case GRANULARITY_TYPES.DAILY:\n    default:\n      return momentDate.format(dateHelpers.timestampDayFormats.long);\n  }\n};\n\n/**\n * Format x axis ticks.\n *\n * @param {object} params\n * @param {Function} params.callback\n * @param {Date} params.date\n * @param {string} params.granularity See enum of RHSM_API_QUERY_GRANULARITY_TYPES\n * @param {number|string} params.tick\n * @param {Date} params.previousDate\n * @returns {string|undefined}\n */\nconst xAxisTickFormat = ({ callback, date, granularity, tick, previousDate } = {}) => {\n  if (!date || !granularity) {\n    return undefined;\n  }\n\n  if (callback) {\n    return callback({ callback, date, granularity, tick, previousDate });\n  }\n\n  const momentDate = moment.utc(date);\n  const isNewYear =\n    tick !== 0 && Number.parseInt(momentDate.year(), 10) !== Number.parseInt(moment.utc(previousDate).year(), 10);\n  let formattedDate;\n\n  switch (granularity) {\n    case GRANULARITY_TYPES.QUARTERLY:\n      formattedDate = isNewYear\n        ? momentDate.format(dateHelpers.timestampQuarterFormats.yearShort)\n        : momentDate.format(dateHelpers.timestampQuarterFormats.short);\n\n      formattedDate = formattedDate.replace(/\\s/, '\\n');\n      break;\n    case GRANULARITY_TYPES.MONTHLY:\n      formattedDate = isNewYear\n        ? momentDate.format(dateHelpers.timestampMonthFormats.yearShort)\n        : momentDate.format(dateHelpers.timestampMonthFormats.short);\n\n      formattedDate = formattedDate.replace(/\\s/, '\\n');\n      break;\n    case GRANULARITY_TYPES.WEEKLY:\n    case GRANULARITY_TYPES.DAILY:\n    default:\n      formattedDate = isNewYear\n        ? momentDate.format(dateHelpers.timestampDayFormats.yearShort)\n        : momentDate.format(dateHelpers.timestampDayFormats.short);\n\n      formattedDate = formattedDate.replace(/\\s(\\d{4})$/, '\\n$1');\n      break;\n  }\n\n  return formattedDate;\n};\n\n/**\n * Format y axis ticks.\n *\n * @param {object} params\n * @param {Function} params.callback\n * @param {number|string} params.tick\n * @returns {string}\n */\nconst yAxisTickFormat = ({ callback, tick } = {}) => {\n  if (callback) {\n    return callback({ tick });\n  }\n\n  return helpers\n    .numberDisplay(tick)\n    ?.format({\n      average: true,\n      mantissa: 1,\n      trimMantissa: true,\n      lowPrecision: false\n    })\n    ?.toUpperCase();\n};\n\n/**\n * Generate base chart component props.\n *\n * @param {object} params\n * @param {object} params.settings\n * @param {string} params.granularity\n * @returns {object}\n */\nconst generateExtendedChartSettings = ({ settings, granularity } = {}) => ({\n  ...settings,\n  xAxisLabelIncrement: getChartXAxisLabelIncrement(granularity),\n  xAxisTickFormat: ({ item, previousItem, tick }) =>\n    xAxisTickFormat({\n      callback: settings?.xAxisTickFormat,\n      tick,\n      date: item.date,\n      previousDate: previousItem.date,\n      granularity\n    }),\n  yAxisTickFormat: ({ tick }) =>\n    yAxisTickFormat({\n      callback: settings?.yAxisTickFormat,\n      tick\n    })\n});\n\nconst graphCardHelpers = {\n  generateChartSettings,\n  generateExtendedChartSettings,\n  getChartXAxisLabelIncrement,\n  getTooltipDate,\n  xAxisTickFormat,\n  yAxisTickFormat\n};\n\nexport {\n  graphCardHelpers as default,\n  graphCardHelpers,\n  generateChartSettings,\n  generateExtendedChartSettings,\n  getChartXAxisLabelIncrement,\n  getTooltipDate,\n  xAxisTickFormat,\n  yAxisTickFormat\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { helpers } from '../../common';\n\n/**\n * Set a min-height to prevent page jump component.\n *\n * @augments React.Component\n * @fires onResizeContainer\n */\nclass MinHeight extends React.Component {\n  containerRef = React.createRef();\n\n  innerContainerRef = React.createRef();\n\n  updatedContainerWidth = 0;\n\n  resizeObserver = helpers.noop;\n\n  componentDidMount() {\n    const { updateOnResize } = this.props;\n    window.setTimeout(() => {\n      this.setMinHeight();\n    });\n\n    if (updateOnResize) {\n      this.setResizeObserver();\n    }\n  }\n\n  componentDidUpdate() {\n    const { updateOnContent } = this.props;\n\n    if (updateOnContent) {\n      window.setTimeout(() => {\n        this.setMinHeight();\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.resizeObserver();\n  }\n\n  /**\n   * On resize adjust graph display.\n   *\n   * @event onResizeContainer\n   */\n  onResizeContainer = () => {\n    const { updatedContainerWidth } = this;\n    const { updateOnResize } = this.props;\n    const clientWidth = this.containerRef?.current?.clientWidth || 0;\n\n    if (updateOnResize && clientWidth !== updatedContainerWidth) {\n      this.updatedContainerWidth = clientWidth;\n      this.setMinHeight(true);\n    }\n  };\n\n  /**\n   * Set minHeight on mount or update.\n   *\n   * @param {boolean} reset\n   */\n  setMinHeight(reset = false) {\n    const { minHeight: overrideMinHeight } = this.props;\n    const { current: domElement = {} } = this.containerRef;\n    const { current: innerDomElement = {} } = this.innerContainerRef;\n\n    if (domElement?.style) {\n      let clientHeight;\n\n      if (reset) {\n        clientHeight = innerDomElement?.clientHeight || 0;\n      } else {\n        clientHeight = domElement?.clientHeight || 0;\n      }\n\n      if (overrideMinHeight > clientHeight) {\n        clientHeight = overrideMinHeight;\n      }\n\n      domElement.style.minHeight = `${clientHeight}px`;\n    }\n  }\n\n  /**\n   * Set ResizeObserver for scenarios when min-height needs to be updated.\n   */\n  setResizeObserver() {\n    window.addEventListener('resize', this.onResizeContainer);\n    this.resizeObserver = () => window.removeEventListener('resize', this.onResizeContainer);\n  }\n\n  /**\n   * Render a min-height div with children.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { children } = this.props;\n\n    return (\n      <div className=\"curiosity-minheight\" ref={this.containerRef}>\n        <div ref={this.innerContainerRef}>{children}</div>\n      </div>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{minHeight: number, children: Node, updateOnContent: boolean, updateOnResize: boolean}}\n */\nMinHeight.propTypes = {\n  updateOnContent: PropTypes.bool,\n  updateOnResize: PropTypes.bool,\n  children: PropTypes.node.isRequired,\n  minHeight: PropTypes.number\n};\n\n/**\n * Default props.\n *\n * @type {{minHeight: number, updateOnContent: boolean, updateOnResize: boolean}}\n */\nMinHeight.defaultProps = {\n  updateOnContent: false,\n  updateOnResize: true,\n  minHeight: 0\n};\n\nexport { MinHeight as default, MinHeight };\n","import React, { useCallback, useContext } from 'react';\nimport { reduxHelpers } from '../../redux/common';\nimport { storeHooks } from '../../redux/hooks';\nimport { RHSM_API_QUERY_TYPES, rhsmApiTypes } from '../../types/rhsmApiTypes';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Route context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{}, helpers.noop];\n\nconst ProductViewContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated product view context.\n *\n * @returns {React.Context<{}>}\n */\nconst useProductViewContext = () => useContext(ProductViewContext);\n\n/**\n * Return a query object from initial product config and Redux store.\n *\n * @param {string} queryType An identifier used to pull from both config and Redux, they should named the same.\n * @param {object} options\n * @param {object} options.useProductViewContext\n * @returns {object}\n */\nconst useProductQueryFactory = (\n  queryType,\n  { useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}\n) => {\n  const { [queryType]: initialQuery, productId, viewId } = useAliasProductViewContext();\n  const queryProduct = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[productId], undefined);\n  const queryView = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[viewId], undefined);\n\n  return {\n    ...initialQuery,\n    ...queryProduct,\n    ...queryView\n  };\n};\n\n/**\n * Return a base product query\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductQuery = ({ queryType = 'query', options } = {}) => useProductQueryFactory(queryType, options);\n\n/**\n * Return the graph query based off of tally and capacity.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductGraphTallyQuery = ({\n  queryType = 'graphTallyQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_REPORT_CAPACITY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return the inventory query for guests.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryGuestsQuery = ({\n  queryType = 'inventoryGuestsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_GUESTS_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for hosts.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryHostsQuery = ({\n  queryType = 'inventoryHostsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for subscriptions.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventorySubscriptionsQuery = ({\n  queryType = 'inventorySubscriptionsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Get a filtered product configuration context.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductViewContext\n * @returns {object}\n */\nconst useProductContext = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductViewContext: useAliasProductViewContext = useProductViewContext\n} = {}) => {\n  const { [RHSM_API_QUERY_TYPES.UOM]: uomFilter } = useAliasProductQuery();\n  const {\n    initialGraphFilters = [],\n    initialInventoryFilters = [],\n    initialSubscriptionsInventoryFilters = [],\n    productContextFilterUom,\n    ...config\n  } = useAliasProductViewContext();\n\n  const applyUomFilter = useCallback(() => {\n    if (productContextFilterUom === true) {\n      const filterFilters = ({ id, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(uomFilter, 'i').test(id);\n      };\n\n      return {\n        ...config,\n        initialGraphFilters: initialGraphFilters.filter(filterFilters),\n        initialInventoryFilters: initialInventoryFilters.filter(filterFilters),\n        initialSubscriptionsInventoryFilters: initialSubscriptionsInventoryFilters.filter(filterFilters)\n      };\n    }\n\n    return {\n      ...config,\n      initialGraphFilters,\n      initialInventoryFilters,\n      initialSubscriptionsInventoryFilters\n    };\n  }, [\n    config,\n    initialGraphFilters,\n    initialInventoryFilters,\n    initialSubscriptionsInventoryFilters,\n    productContextFilterUom,\n    uomFilter\n  ]);\n\n  return applyUomFilter();\n};\n\n/**\n * Return product identifiers.\n *\n * @param {object} options\n * @param {Function} options.useProductViewContext\n * @returns {{productLabel: string, viewId: string, productId: string, productGroup: string}}\n */\nconst useProduct = ({ useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}) => {\n  const { productGroup, productId, productLabel, viewId } = useAliasProductViewContext();\n  return {\n    productGroup,\n    productId,\n    productLabel,\n    viewId\n  };\n};\n\n/**\n * Return graph configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductGraphConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialGraphFilters, initialGraphSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGraphFilters,\n    settings: initialGraphSettings\n  };\n};\n\n/**\n * Return hosts inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryHostsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialInventoryFilters, initialInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialInventoryFilters,\n    settings: initialInventorySettings\n  };\n};\n\n/**\n * Return subscriptions inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventorySubscriptionsConfig = ({\n  useProductContext: useAliasProductContext = useProductContext\n} = {}) => {\n  const { initialSubscriptionsInventoryFilters, initialSubscriptionsInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialSubscriptionsInventoryFilters,\n    settings: initialSubscriptionsInventorySettings\n  };\n};\n\n/**\n * Return primary toolbar configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductToolbarConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialToolbarFilters, initialToolbarSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialToolbarFilters,\n    settings: initialToolbarSettings\n  };\n};\n\nconst context = {\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useQuery: useProductQuery,\n  useQueryFactory: useProductQueryFactory,\n  useGraphTallyQuery: useProductGraphTallyQuery,\n  useInventoryGuestsQuery: useProductInventoryGuestsQuery,\n  useInventoryHostsQuery: useProductInventoryHostsQuery,\n  useInventorySubscriptionsQuery: useProductInventorySubscriptionsQuery,\n  useProduct,\n  useGraphConfig: useProductGraphConfig,\n  useInventoryHostsConfig: useProductInventoryHostsConfig,\n  useInventorySubscriptionsConfig: useProductInventorySubscriptionsConfig,\n  useToolbarConfig: useProductToolbarConfig\n};\n\nexport {\n  context as default,\n  context,\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useProductQuery,\n  useProductQueryFactory,\n  useProductGraphTallyQuery,\n  useProductInventoryGuestsQuery,\n  useProductInventoryHostsQuery,\n  useProductInventorySubscriptionsQuery,\n  useProduct,\n  useProductGraphConfig,\n  useProductInventoryHostsConfig,\n  useProductInventorySubscriptionsConfig,\n  useProductToolbarConfig\n};\n","var keyList = Object.keys;\n\nexports.equal = function equal (a, b) {\n  if (a === b) return true;\n  if (!(a instanceof Object) || !(b instanceof Object)) return false;\n\n  var keys = keyList(a);\n  var length = keys.length;\n\n  for (var i = 0; i < length; i++)\n    if (!(keys[i] in b)) return false;\n\n  for (var i = 0; i < length; i++)\n    if (a[keys[i]] !== b[keys[i]]) return false;\n\n  return length === keyList(b).length;\n};\n","import { equal as isShallowEqual } from 'fast-shallow-equal';\nimport useCustomCompareEffect from './useCustomCompareEffect';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar shallowEqualDepsList = function (prevDeps, nextDeps) {\n    return prevDeps.every(function (dep, index) { return isShallowEqual(dep, nextDeps[index]); });\n};\nvar useShallowCompareEffect = function (effect, deps) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useShallowCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useShallowCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n    }\n    useCustomCompareEffect(effect, deps, shallowEqualDepsList);\n};\nexport default useShallowCompareEffect;\n","import { useEffect, useRef } from 'react';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar useCustomCompareEffect = function (effect, deps, depsEqual) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useCustomCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useCustomCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n        if (typeof depsEqual !== 'function') {\n            console.warn('`useCustomCompareEffect` should be used with depsEqual callback for comparing deps list');\n        }\n    }\n    var ref = useRef(undefined);\n    if (!ref.current || !depsEqual(deps, ref.current)) {\n        ref.current = deps;\n    }\n    useEffect(effect, ref.current);\n};\nexport default useCustomCompareEffect;\n"],"names":["ChartIcon","fill","symbol","size","title","svgProps","iconProps","emSvgSize","getSize","color","className","style","width","height","Number","parseFloat","viewBox","role","y","x","x1","y1","x2","y2","stroke","strokeWidth","strokeDasharray","EyeIcon","EyeSlashIcon","InfinityIcon","SquareIcon","setIcon","defaultProps","GraphCard","cardTitle","children","error","getGraphReportsCapacity","graphData","meta","isDisabled","pending","useAliasProduct","useProduct","useAliasProductGraphConfig","useProductGraphConfig","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","productId","settings","query","useShallowCompareEffect","startDate","RHSM_API_QUERY_TYPES","endDate","granularity","actionDisplay","data","Card","MinHeight","key","CardHeader","CardTitle","Title","headingLevel","CardActions","CardBody","Loader","variant","GraphCardChart","helpers","makeMapStateToProps","reduxSelectors","ConnectedGraphCard","connect","dispatch","id","reduxActions","filtered","filters","chartAreaProps","xAxisLabelIncrement","graphCardHelpers","xAxisTickFormat","item","previousItem","tick","date","previousDate","yAxisTickFormat","Chart","JSON","stringify","dataSets","tempFiltered","isStacked","test","isThreshold","chartColorGreenDark","length","map","value","Object","assign","keys","chartLegend","chart","datum","chartTooltip","GraphCardChartLegend","t","useAliasDispatch","useDispatch","useAliasSelectors","useSelectors","productLabel","viewId","legendItems","graph","legend","useMount","forEach","index","isToggled","hide","onClick","updatedToggle","toggle","type","reduxTypes","find","hasData","labelContent","product","context","tooltipContent","whiteSpace","checkIsToggled","button","Button","onKeyPress","tabIndex","component","icon","visibility","Tooltip","content","position","TooltipPosition","enableFlip","distance","translate","storeHooks","GraphCardChartTooltip","RHSM_API_QUERY_SET_TYPES","header","itemsByKey","reverse","getTooltipDate","tempDataFacet","chartType","thresholdStringValue","hasInfinite","label","dataFactsValue","push","summary","colSpan","dataFacet","updatedDataFacetValue","isInteger","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","generateChartSettings","standaloneFilters","groupedFilters","isStandalone","baseFilterSettings","getChartXAxisLabelIncrement","GRANULARITY_TYPES","momentDate","moment","dateHelpers","add","callback","formattedDate","isNewYear","parseInt","year","replace","generateExtendedChartSettings","containerRef","React","innerContainerRef","updatedContainerWidth","resizeObserver","onResizeContainer","updateOnResize","props","clientWidth","current","setMinHeight","this","window","setTimeout","setResizeObserver","updateOnContent","clientHeight","reset","overrideMinHeight","minHeight","domElement","innerDomElement","addEventListener","removeEventListener","ref","DEFAULT_CONTEXT","ProductViewContext","useProductViewContext","useContext","useProductQueryFactory","queryType","useAliasProductViewContext","initialQuery","queryProduct","view","undefined","queryView","useProductQuery","options","schemaCheck","rhsmApiTypes","reduxHelpers","useProductInventoryGuestsQuery","useProductInventoryHostsQuery","useProductInventorySubscriptionsQuery","useProductContext","useAliasProductQuery","uomFilter","initialGraphFilters","initialInventoryFilters","initialSubscriptionsInventoryFilters","productContextFilterUom","config","applyUomFilter","useCallback","filterFilters","isOptional","RegExp","filter","productGroup","useAliasProductContext","initialGraphSettings","useProductInventoryHostsConfig","initialInventorySettings","useProductInventorySubscriptionsConfig","initialSubscriptionsInventorySettings","useProductToolbarConfig","initialToolbarFilters","initialToolbarSettings","useQuery","useQueryFactory","useGraphTallyQuery","useInventoryGuestsQuery","useInventoryHostsQuery","useInventorySubscriptionsQuery","useGraphConfig","useInventoryHostsConfig","useInventorySubscriptionsConfig","useToolbarConfig","keyList","exports","a","b","i","shallowEqualDepsList","prevDeps","nextDeps","every","dep","effect","deps","depsEqual","useRef","useEffect"],"sourceRoot":""}