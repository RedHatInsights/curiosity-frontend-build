{"version":3,"file":"js/930.fe07324b01d6788ef974.js","mappings":"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","sources":["webpack:///./src/components/chart/chart.js","webpack:///./src/hooks/useWindow.js","webpack:///./src/components/chart/chartHelpers.js","webpack:///./src/components/chart/chartLegend.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { ChartThemeColor } from '@patternfly/react-charts';\nimport { ChartContext } from './chartContext';\nimport { ChartElements } from './chartElements';\nimport { ChartLegend } from './chartLegend';\nimport { chartHelpers } from './chartHelpers';\nimport { useResizeObserver } from '../../hooks/useWindow';\n\n/**\n * Return a chart and elements with a context provider.\n *\n * @param {object} props\n * @param {Node|Function} props.chartLegend\n * @param {Node|Function} props.chartTooltip\n * @param {Array} props.dataSets\n * @param {object} props.padding\n * @param {string} props.themeColor\n * @param {Node|Function} props.xAxisChartLabel\n * @param {Node|Function} props.yAxisChartLabel\n * @param {boolean} props.xAxisFixLabelOverlap\n * @param {number} props.xAxisLabelIncrement\n * @param {Function} props.xAxisTickFormat\n * @param {Function} props.yAxisTickFormat\n * @param {Function} props.xValueFormat\n * @param {Function} props.yValueFormat\n * @returns {Node}\n */\nconst Chart = ({\n  chartLegend,\n  chartTooltip,\n  dataSets,\n  padding,\n  themeColor,\n  xAxisChartLabel,\n  yAxisChartLabel,\n  xAxisFixLabelOverlap,\n  xAxisLabelIncrement,\n  xAxisTickFormat,\n  yAxisTickFormat,\n  xValueFormat,\n  yValueFormat\n}) => {\n  const [context, setContext] = useState();\n  const [dataSetsToggle, setDataSetsToggle] = useState({});\n  const containerRef = useRef(null);\n  const tooltipRef = useRef(null);\n  const { width: chartWidth } = useResizeObserver(containerRef);\n\n  useEffect(() => {\n    /**\n     * Aggregate chart related settings.\n     *\n     * @returns {{isMultiYAxis: boolean, padding: object, chartDomain: {domain: {y: Array}}, tooltipDataSetLookUp: {},\n     *     xAxisProps: object, themeColor: string, maxY: (object|number), hasData: boolean, maxX: number,\n     *     yAxisProps: Array, chartElementsProps: {elementsById: object, stackedElements: Array,\n     *     stackedElementsById: object, elements: Array}}}\n     */\n    const updateChartSettings = () => {\n      const toggledDataSets = dataSets.filter(({ id }) => !dataSetsToggle[id]);\n\n      const tooltipDataSetLookUp = chartHelpers.generateTooltipData({\n        content: chartTooltip,\n        dataSets: toggledDataSets\n      });\n\n      const { maxX, maxY } = chartHelpers.generateMaxXY({ dataSets: toggledDataSets });\n      const { individualMaxY } = chartHelpers.generateMaxXY({ dataSets });\n      const { xAxisProps, yAxisProps } = chartHelpers.generateAxisProps({\n        dataSets,\n        individualMaxY,\n        maxX,\n        maxY,\n        xAxisChartLabel,\n        yAxisChartLabel,\n        xAxisFixLabelOverlap,\n        xAxisLabelIncrement,\n        xAxisTickFormat,\n        yAxisTickFormat\n      });\n\n      const isMultiYAxis = yAxisProps.length > 1;\n      const chartElementsProps = chartHelpers.generateElementsProps({\n        dataSets: toggledDataSets,\n        maxX,\n        maxY: (isMultiYAxis && individualMaxY) || maxY,\n        xValueFormat,\n        yValueFormat\n      });\n      const { domain, padding: domainPadding } = chartHelpers.generateDomains({\n        maxY: (isMultiYAxis && individualMaxY) || maxY,\n        padding\n      });\n      const hasData = !!xAxisProps.tickValues;\n      const updatedPadding = { bottom: 0, left: 0, right: 0, top: 0, ...padding, ...domainPadding };\n\n      return {\n        xAxisProps,\n        yAxisProps,\n        chartDomain: { domain },\n        chartElementsProps,\n        hasData,\n        isMultiYAxis,\n        maxX,\n        maxY: (isMultiYAxis && individualMaxY) || maxY,\n        padding: updatedPadding,\n        themeColor,\n        tooltipDataSetLookUp\n      };\n    };\n\n    const chartSettings = updateChartSettings();\n    const updatedSettings = {\n      chartContainerRef: () => containerRef,\n      chartSettings: { ...chartSettings, chartLegend, chartWidth, dataSets },\n      chartTooltipRef: () => tooltipRef,\n      dataSetsToggle: [dataSetsToggle, setDataSetsToggle]\n    };\n\n    setContext(updatedSettings);\n  }, [\n    chartLegend,\n    chartTooltip,\n    chartWidth,\n    dataSets,\n    dataSetsToggle,\n    padding,\n    setContext,\n    themeColor,\n    xAxisChartLabel,\n    yAxisChartLabel,\n    xAxisFixLabelOverlap,\n    xAxisLabelIncrement,\n    yAxisTickFormat,\n    xAxisTickFormat,\n    xValueFormat,\n    yValueFormat\n  ]);\n\n  return (\n    <ChartContext.Provider value={context}>\n      <div\n        id=\"curiosity-chartarea\"\n        className=\"curiosity-chartarea uxui-curiosity__modal uxui-curiosity__modal--loading\"\n        ref={containerRef}\n      >\n        {chartWidth > 0 && (\n          <React.Fragment>\n            <ChartElements />\n            <ChartLegend />\n          </React.Fragment>\n        )}\n      </div>\n    </ChartContext.Provider>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{chartTooltip: Node|Function, xValueFormat: Function, padding: {top: number, left: number, bottom: number,\n *     right: number}, xAxisTickFormat: Function, themeColor: string, chartLegend: Node|Function,\n *     yAxisTickFormat: Function, dataSets: Array, xAxisFixLabelOverlap: boolean, xAxisLabelIncrement: number,\n *     yValueFormat: Function}}\n */\nChart.propTypes = {\n  chartLegend: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  chartTooltip: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  dataSets: PropTypes.arrayOf(\n    PropTypes.shape({\n      data: PropTypes.arrayOf(\n        PropTypes.shape({\n          x: PropTypes.number.isRequired,\n          y: PropTypes.number,\n          xAxisLabel: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        })\n      ),\n      animate: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n      chartType: PropTypes.oneOf(['area', 'line', 'threshold']),\n      fill: PropTypes.string,\n      stroke: PropTypes.string,\n      strokeWidth: PropTypes.number,\n      strokeDasharray: PropTypes.string,\n      themeColor: PropTypes.string,\n      themeVariant: PropTypes.string,\n      id: PropTypes.string.isRequired,\n      interpolation: PropTypes.string,\n      style: PropTypes.object,\n      isStacked: PropTypes.bool,\n      xAxisChartLabel: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n      yAxisChartLabel: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n      xAxisUseDataSet: PropTypes.bool,\n      yAxisUseDataSet: PropTypes.bool\n    })\n  ),\n  padding: PropTypes.shape({\n    bottom: PropTypes.number,\n    left: PropTypes.number,\n    right: PropTypes.number,\n    top: PropTypes.number\n  }),\n  themeColor: PropTypes.oneOf(Object.values(ChartThemeColor)),\n  xAxisChartLabel: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  yAxisChartLabel: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  xAxisFixLabelOverlap: PropTypes.bool,\n  xAxisLabelIncrement: PropTypes.number,\n  xAxisTickFormat: PropTypes.func,\n  yAxisTickFormat: PropTypes.func,\n  xValueFormat: PropTypes.func,\n  yValueFormat: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{chartTooltip: Node|Function, xValueFormat: Function, padding: {top: number, left: number, bottom: number,\n *     right: number}, xAxisTickFormat: Function, themeColor: string, chartLegend: Node|Function,\n *     yAxisTickFormat: Function, dataSets: Array, xAxisFixLabelOverlap: boolean, xAxisLabelIncrement: number,\n *     yValueFormat: Function}}\n */\nChart.defaultProps = {\n  chartLegend: null,\n  chartTooltip: null,\n  dataSets: [],\n  padding: {\n    bottom: 75,\n    left: 55,\n    right: 55,\n    top: 50\n  },\n  themeColor: 'blue',\n  xAxisChartLabel: null,\n  yAxisChartLabel: null,\n  xAxisFixLabelOverlap: true,\n  xAxisLabelIncrement: 1,\n  xAxisTickFormat: null,\n  yAxisTickFormat: null,\n  xValueFormat: null,\n  yValueFormat: null\n};\n\nexport { Chart as default, Chart };\n","import { useEffect, useState } from 'react';\nimport { helpers } from '../common';\n\n/**\n * Apply a resize observer to an element.\n *\n * @param {*} target\n * @returns {{width: number, height: number}}\n */\nconst useResizeObserver = target => {\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n\n  useEffect(() => {\n    const isElementResize = target && window.ResizeObserver && true;\n    const element = target?.current;\n    let removeObserver = helpers.noop;\n\n    if (element) {\n      const handler = () => {\n        const { clientHeight = 0, clientWidth = 0, innerHeight = 0, innerWidth = 0 } = element || {};\n\n        setDimensions({\n          width: isElementResize ? clientWidth : innerWidth,\n          height: isElementResize ? clientHeight : innerHeight\n        });\n      };\n\n      if (isElementResize) {\n        const resizeObserver = new window.ResizeObserver(handler);\n        resizeObserver.observe(element);\n        removeObserver = () => resizeObserver.unobserve(element);\n      } else {\n        handler();\n        window.addEventListener('resize', handler);\n        removeObserver = () => window.removeEventListener('resize', handler);\n      }\n    }\n\n    return () => {\n      removeObserver();\n    };\n  }, [target]);\n\n  return dimensions;\n};\n\nconst windowHooks = {\n  useResizeObserver\n};\n\nexport { windowHooks as default, windowHooks, useResizeObserver };\n","import React from 'react';\nimport _cloneDeep from 'lodash/cloneDeep';\nimport { helpers } from '../../common';\n\n/**\n * Generate max X and Y values from datasets.\n *\n * @param {object} params\n * @param {Array} params.dataSets\n * @returns {{individualMaxY: object, maxY: number, maxX: number}}\n */\nconst generateMaxXY = ({ dataSets = [] } = {}) => {\n  const individualDataSetsMaxY = {};\n  let combinedDataSetMaxX = 0;\n  let combinedDataSetsMaxY = 0;\n\n  dataSets\n    .filter(({ isStacked }) => isStacked === true)\n    .forEach(({ data }) => {\n      if (Array.isArray(data)) {\n        combinedDataSetsMaxY += Math.max(...data.map(value => value?.y ?? 0));\n      }\n    });\n\n  dataSets.forEach(({ id, data }) => {\n    let dataSetMaxY = 0;\n\n    if (Array.isArray(data)) {\n      combinedDataSetMaxX = data.length > combinedDataSetMaxX ? data.length : combinedDataSetMaxX;\n\n      dataSetMaxY = Math.max(...data.map(value => value?.y ?? 0));\n      combinedDataSetsMaxY = dataSetMaxY > combinedDataSetsMaxY ? dataSetMaxY : combinedDataSetsMaxY;\n    }\n\n    if (id) {\n      individualDataSetsMaxY[id] = dataSetMaxY;\n    }\n  });\n\n  return {\n    maxX: combinedDataSetMaxX,\n    maxY: combinedDataSetsMaxY,\n    individualMaxY: individualDataSetsMaxY\n  };\n};\n\n/**\n * Generate Y axis domain ranges from dataSets, ignore X axis.\n *\n * @param {object} params\n * @param {number|object} params.maxY\n * @param {object} params.padding\n * @returns {{ domain: { y: Array }, padding: {object} }}\n */\nconst generateDomains = ({ maxY, padding = {} } = {}) => {\n  const updatedChartDomain = {};\n  const updatedPadding = { ...padding };\n  const generatedDomain = {};\n\n  if (Object.values(maxY).length) {\n    generatedDomain.y = [0, 1.25];\n  } else if (maxY >= 0.1) {\n    const floored = Math.pow(10, Math.floor(Math.log10(maxY || 10)));\n    generatedDomain.y = [0, Math.ceil((maxY + 1) / floored) * floored];\n  } else if (maxY < 0.1) {\n    generatedDomain.y = [0, maxY + maxY / 4 || 10];\n  } else {\n    generatedDomain.y = [0, 10];\n  }\n\n  if (maxY < 0.01) {\n    updatedPadding.left += generatedDomain.y.toString().length;\n    updatedPadding.right += generatedDomain.y.toString().length;\n  }\n\n  if (Object.keys(generatedDomain).length) {\n    updatedChartDomain.domain = generatedDomain;\n  }\n\n  return {\n    ...updatedChartDomain,\n    padding: updatedPadding\n  };\n};\n\n/**\n * Generate chart element props.\n *\n * @param {object} params\n * @param {Array} params.dataSets\n * @param {number} params.maxX\n * @param {number} params.maxY\n * @param {Function} params.xValueFormat\n * @param {Function} params.yValueFormat\n * @returns {{elementsById: object, stackedElements: Array, stackedElementsById: object, elements: Array}}\n */\nconst generateElementsProps = ({ dataSets = [], maxX, maxY, xValueFormat, yValueFormat }) => {\n  const elements = [];\n  const stackedElements = [];\n  const elementsById = {};\n  const stackedElementsById = {};\n\n  dataSets.forEach(dataSet => {\n    const { animate, chartType, data, fill, id, isStacked, interpolation, stroke, strokeDasharray, strokeWidth } =\n      dataSet;\n\n    if (data?.length) {\n      const dataColorStroke = {\n        data: {}\n      };\n\n      if (fill && chartType !== 'line' && chartType !== 'threshold') {\n        dataColorStroke.data.fill = fill;\n      }\n\n      if (stroke) {\n        dataColorStroke.data.stroke = stroke;\n      }\n\n      if (strokeDasharray) {\n        dataColorStroke.data.strokeDasharray = strokeDasharray;\n      }\n\n      if (strokeWidth) {\n        dataColorStroke.data.strokeWidth = strokeWidth;\n      }\n\n      const defaultProps = {};\n\n      if (animate) {\n        defaultProps.animate = animate;\n      }\n\n      if (interpolation) {\n        defaultProps.interpolation = interpolation;\n      }\n\n      const chartElementProps = {\n        ...defaultProps,\n        key: `chart-${dataSet.id}-${chartType || ''}`,\n        name: `chart-${dataSet.id}-${chartType || ''}`,\n        data: dataSet.data,\n        style: { ...(dataSet.style || {}), ...dataColorStroke },\n        themeColor: dataSet.themeColor,\n        themeVariant: dataSet.themeVariant,\n        x:\n          (xValueFormat &&\n            (datum => {\n              const xValue = xValueFormat({ datum, maxX });\n              return xValue === undefined || Number.isNaN(xValue) ? 0 : xValue;\n            })) ||\n          undefined,\n        y: datum => {\n          let yValue;\n\n          if (yValueFormat) {\n            yValue = yValueFormat({\n              datum,\n              isMultiAxis: typeof maxY !== 'number',\n              maxY: typeof maxY === 'number' ? maxY : maxY?.[dataSet.id]\n            });\n          } else {\n            yValue = typeof maxY === 'number' ? datum.y : datum.y / maxY?.[dataSet.id]; // eslint-disable-line\n          }\n\n          return yValue === undefined || Number.isNaN(yValue) ? 0 : yValue;\n        }\n      };\n\n      const props = { ...chartElementProps };\n      const updatedProps = { chartType, props };\n\n      if (isStacked) {\n        stackedElementsById[id] = updatedProps;\n        stackedElements.push(updatedProps);\n      } else {\n        elementsById[id] = updatedProps;\n        elements.push(updatedProps);\n      }\n    }\n  });\n\n  return {\n    elements,\n    elementsById,\n    stackedElements,\n    stackedElementsById\n  };\n};\n\n/**\n * Preprocess datasets for tooltips.\n *\n * @param {object} params\n * @param {Node|Function} params.content\n * @param {Array} params.dataSets\n * @returns {{}}\n */\nconst generateTooltipData = ({ content = helpers.noop, dataSets = [] } = {}) => {\n  const tooltipDataSetLookUp = {};\n\n  if (content && Array.isArray(dataSets?.[0]?.data)) {\n    dataSets[0].data.forEach((dataSet, index) => {\n      const itemsByKey = {};\n\n      dataSets.forEach(data => {\n        if (data?.data[index]) {\n          itemsByKey[data.id] = {\n            color: data.stroke || data.fill || data.color || '',\n            chartType: data.chartType,\n            data: _cloneDeep(data.data[index])\n          };\n        }\n      });\n\n      const mockDatum = {\n        datum: { x: dataSet.x, y: dataSet.y, index, itemsByKey }\n      };\n\n      tooltipDataSetLookUp[dataSet.x] = {\n        x: dataSet.x,\n        y: null,\n        itemsByKey,\n        tooltip:\n          (React.isValidElement(content) && React.cloneElement(content, { ...mockDatum })) || content({ ...mockDatum })\n      };\n    });\n  }\n\n  return tooltipDataSetLookUp;\n};\n\n/**\n * Generate X axis props, ticks, tick formatting.\n *\n * @param {object} params\n * @param {object} params.dataSet\n * @param {number} params.maxX\n * @param {number} params.xAxisLabelIncrement\n * @param {object} params.xAxisPropDefaults\n * @param {Function} params.xAxisTickFormat\n * @returns {{tickFormat: (function(*)), tickValues: *}}\n */\nconst generateXAxisProps = ({\n  dataSet = {},\n  maxX,\n  xAxisLabelIncrement,\n  xAxisPropDefaults = {},\n  xAxisTickFormat\n} = {}) => {\n  const { data = [], xAxisChartLabel } = dataSet;\n  const axisProps = {\n    ...xAxisPropDefaults,\n    tickValues: data.reduce(\n      (acc, current, index) => (index % xAxisLabelIncrement === 0 ? acc.concat(current.x) : acc),\n      []\n    ),\n    tickFormat: tick => data[tick]?.xAxisLabel || tick\n  };\n\n  if (typeof xAxisChartLabel === 'function') {\n    axisProps.label = xAxisChartLabel({ ...dataSet, xAxisChartLabel: undefined });\n  } else {\n    axisProps.label = xAxisChartLabel;\n  }\n\n  if (typeof xAxisTickFormat === 'function') {\n    axisProps.tickFormat = tick => {\n      const tickIndex = axisProps.tickValues.indexOf(tick);\n      const previousItem = { ...data[axisProps.tickValues[tickIndex - 1]] };\n      const nextItem = { ...data[axisProps.tickValues[tickIndex + 1]] };\n      const item = { ...data[tick] };\n\n      return xAxisTickFormat({ tick, previousItem, item, nextItem, maxX });\n    };\n  }\n\n  return axisProps;\n};\n\n/**\n * Generate Y axis props, ticks, tick formatting.\n *\n * @param {object} params\n * @param {Array} params.dataSets\n * @param {number|object} params.maxY\n * @param {object} params.yAxisPropDefaults\n * @param {Function} params.yAxisTickFormat\n * @returns {Array}\n */\nconst generateYAxisProps = ({ dataSets = [], maxY, yAxisPropDefaults = {}, yAxisTickFormat } = {}) => {\n  const axisProps = [];\n  const isMultiAxis = dataSets.length > 1;\n\n  dataSets.forEach(({ yAxisChartLabel, id, stroke, strokeWidth, ...dataSet } = {}, index) => {\n    const updatedAxisProps = {\n      style: { axis: {}, tickLabels: {} },\n      tickFormat: tick => tick\n    };\n\n    if (isMultiAxis && stroke) {\n      updatedAxisProps.style.axis.stroke = stroke;\n    }\n\n    if (isMultiAxis && strokeWidth) {\n      updatedAxisProps.style.axis.strokeWidth = strokeWidth;\n    }\n\n    if (typeof yAxisChartLabel === 'function') {\n      updatedAxisProps.label = yAxisChartLabel({ id, stroke, strokeWidth, ...dataSet });\n    } else {\n      updatedAxisProps.label = yAxisChartLabel;\n    }\n\n    if (typeof yAxisTickFormat === 'function') {\n      const updatedMaxY = (typeof maxY === 'number' && maxY) || maxY?.[id];\n\n      updatedAxisProps.tickFormat = tick => {\n        const normalizedTick = (isMultiAxis && tick * updatedMaxY) || tick;\n\n        return yAxisTickFormat({\n          tick: normalizedTick,\n          isMultiAxis,\n          maxY: updatedMaxY\n        });\n      };\n    }\n\n    axisProps.push({\n      ...yAxisPropDefaults,\n      ...updatedAxisProps,\n      orientation: (index === 0 && 'left') || 'right'\n    });\n  });\n\n  return axisProps;\n};\n\n/**\n * Generate x,y props.\n *\n * @param {object} params\n * @param {Array} params.dataSets\n * @param {object} params.individualMaxY\n * @param {number} params.maxX\n * @param {number} params.maxY\n * @param {Node|Function} params.xAxisChartLabel\n * @param {Node|Function} params.yAxisChartLabel\n * @param {boolean} params.xAxisFixLabelOverlap\n * @param {number} params.xAxisLabelIncrement\n * @param {Function} params.xAxisTickFormat\n * @param {Function} params.yAxisTickFormat\n * @returns {{xAxisProps: object, yAxisProps: Array}}\n */\nconst generateAxisProps = ({\n  dataSets = [],\n  individualMaxY = {},\n  maxX,\n  maxY,\n  xAxisChartLabel,\n  yAxisChartLabel,\n  xAxisFixLabelOverlap = true,\n  xAxisLabelIncrement = 1,\n  xAxisTickFormat,\n  yAxisTickFormat\n} = {}) => {\n  const xAxisPropDefaults = {\n    fixLabelOverlap: xAxisFixLabelOverlap\n  };\n\n  const yAxisPropDefaults = {\n    dependentAxis: true,\n    showGrid: true\n  };\n\n  let yAxisDataSets = [];\n  let xAxisDataSet;\n\n  dataSets.forEach(dataSet => {\n    if (dataSet.yAxisUseDataSet) {\n      yAxisDataSets.push({\n        yAxisChartLabel,\n        ...dataSet\n      });\n    }\n    if (dataSet.xAxisUseDataSet) {\n      xAxisDataSet = {\n        xAxisChartLabel,\n        ...dataSet\n      };\n    }\n  });\n\n  if (!yAxisDataSets.length) {\n    yAxisDataSets.push({\n      yAxisChartLabel,\n      ...dataSets?.[0]\n    });\n  } else {\n    yAxisDataSets = yAxisDataSets.slice(0, 2);\n  }\n\n  if (!xAxisDataSet) {\n    xAxisDataSet = {\n      xAxisChartLabel,\n      ...dataSets?.[0]\n    };\n  }\n\n  const updatedMaxY = (yAxisDataSets.length > 1 && individualMaxY) || maxY;\n\n  return {\n    xAxisProps: generateXAxisProps({\n      dataSet: xAxisDataSet,\n      maxX,\n      xAxisLabelIncrement,\n      xAxisPropDefaults,\n      xAxisTickFormat\n    }),\n    yAxisProps: generateYAxisProps({ dataSets: yAxisDataSets, maxY: updatedMaxY, yAxisPropDefaults, yAxisTickFormat })\n  };\n};\n\nconst chartHelpers = {\n  generateAxisProps,\n  generateDomains,\n  generateElementsProps,\n  generateMaxXY,\n  generateTooltipData,\n  generateXAxisProps,\n  generateYAxisProps\n};\n\nexport {\n  chartHelpers as default,\n  chartHelpers,\n  generateAxisProps,\n  generateDomains,\n  generateElementsProps,\n  generateMaxXY,\n  generateTooltipData,\n  generateXAxisProps,\n  generateYAxisProps\n};\n","import React from 'react';\nimport _cloneDeep from 'lodash/cloneDeep';\nimport { useChartContext, useToggleData } from './chartContext';\n\n/**\n * Wrapper for rendering an HTML based legend.\n *\n * @returns {Node}\n */\nconst ChartLegend = () => {\n  const { getIsToggled, onHide, onRevert, onToggle } = useToggleData();\n  const { chartSettings = {} } = useChartContext();\n  const { chartLegend, dataSets, padding = {}, xAxisProps = {} } = chartSettings;\n\n  if (!chartLegend) {\n    return null;\n  }\n\n  const legendProps = {\n    datum: { dataSets: _cloneDeep(dataSets) },\n    chart: {\n      hide: onHide,\n      revert: onRevert,\n      toggle: onToggle,\n      isToggled: getIsToggled\n    }\n  };\n\n  return (\n    <div\n      className={`curiosity-chartarea__legend${(xAxisProps?.label && '-axis-label-active') || ''}`}\n      style={{\n        marginLeft: (padding?.left && `${padding.left}px`) || 0,\n        marginRight: (padding?.right && `${padding.right}px`) || 0\n      }}\n    >\n      {(React.isValidElement(chartLegend) && React.cloneElement(chartLegend, { ...legendProps })) ||\n        chartLegend({ ...legendProps })}\n    </div>\n  );\n};\n\n/**\n * Prop types.\n */\nChartLegend.propTypes = {};\n\n/**\n * Default props.\n */\nChartLegend.defaultProps = {};\n\nexport { ChartLegend as default, ChartLegend };\n"],"names":["Chart","chartLegend","chartTooltip","dataSets","padding","themeColor","xAxisChartLabel","yAxisChartLabel","xAxisFixLabelOverlap","xAxisLabelIncrement","xAxisTickFormat","yAxisTickFormat","xValueFormat","yValueFormat","useState","context","setContext","dataSetsToggle","setDataSetsToggle","containerRef","useRef","tooltipRef","chartWidth","target","width","height","dimensions","setDimensions","useEffect","isElementResize","window","ResizeObserver","element","current","removeObserver","helpers","handler","clientHeight","clientWidth","innerHeight","innerWidth","resizeObserver","observe","unobserve","addEventListener","removeEventListener","useResizeObserver","toggledDataSets","tooltipDataSetLookUp","maxX","maxY","individualMaxY","xAxisProps","yAxisProps","isMultiYAxis","chartElementsProps","domain","domainPadding","chartSettings","filter","id","chartHelpers","content","length","chartDomain","hasData","tickValues","bottom","left","right","top","updatedSettings","chartContainerRef","chartTooltipRef","ChartContext","value","className","ref","ChartElements","ChartLegend","defaultProps","generateMaxXY","individualDataSetsMaxY","combinedDataSetMaxX","combinedDataSetsMaxY","isStacked","forEach","data","Array","isArray","Math","max","map","y","dataSetMaxY","generateDomains","updatedChartDomain","updatedPadding","generatedDomain","Object","values","floored","pow","floor","log10","ceil","toString","keys","generateElementsProps","elements","stackedElements","elementsById","stackedElementsById","dataSet","animate","chartType","fill","interpolation","stroke","strokeDasharray","strokeWidth","dataColorStroke","chartElementProps","key","name","style","themeVariant","x","datum","xValue","undefined","Number","isNaN","yValue","isMultiAxis","updatedProps","props","push","generateTooltipData","index","itemsByKey","color","_cloneDeep","mockDatum","tooltip","React","generateXAxisProps","xAxisPropDefaults","axisProps","reduce","acc","concat","tickFormat","tick","xAxisLabel","label","tickIndex","indexOf","previousItem","nextItem","item","generateYAxisProps","yAxisPropDefaults","updatedAxisProps","axis","tickLabels","updatedMaxY","orientation","generateAxisProps","xAxisDataSet","fixLabelOverlap","dependentAxis","showGrid","yAxisDataSets","yAxisUseDataSet","xAxisUseDataSet","slice","useToggleData","getIsToggled","onHide","onRevert","onToggle","useChartContext","legendProps","chart","hide","revert","toggle","isToggled","marginLeft","marginRight"],"sourceRoot":""}