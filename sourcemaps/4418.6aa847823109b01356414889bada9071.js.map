{"version":3,"file":"js/4418.1649171123755.9bd90bbc9c63c400670f.js","mappings":"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","sources":["webpack:///./src/components/chart/chartIcon.js","webpack:///./src/components/graphCard/graphCardChartLegend.js","webpack:///./src/components/productView/productViewContext.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { EyeIcon, EyeSlashIcon, InfinityIcon, SquareIcon, IconSize } from '@patternfly/react-icons';\n\n/**\n * Emulate pf icon sizing for custom SVGs\n *\n * @param {string} size\n * @returns {string} em measurement\n */\nconst getSize = size => {\n  switch (size) {\n    case 'md':\n      return '1.5em';\n    case 'lg':\n      return '2em';\n    case 'xl':\n      return '3em';\n    case 'sm':\n    default:\n      return '1em';\n  }\n};\n\n/**\n * Render an icon for use outside of Victory charts.\n *\n * @param {object} props\n * @param {string} props.fill\n * @param {string} props.symbol\n * @param {string} props.size\n * @param {string} props.title\n * @returns {Node}\n */\nconst ChartIcon = ({ fill, symbol, size, title }) => {\n  const svgProps = {};\n  const iconProps = { size, title };\n  const emSvgSize = getSize(size);\n\n  if (title) {\n    svgProps['aria-labelledby'] = title;\n  } else {\n    svgProps['aria-hidden'] = true;\n  }\n\n  if (fill) {\n    iconProps.color = fill;\n  }\n\n  const setIcon = () => {\n    switch (symbol) {\n      case 'dash':\n        return (\n          <span\n            style={{\n              width: emSvgSize,\n              height: `${Number.parseFloat(emSvgSize) / 2}em`\n            }}\n          >\n            <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 38 10\" role=\"img\" {...svgProps}>\n              <rect y=\"5\" width=\"10\" height=\"10\" fill={fill} />\n              <rect x=\"14\" y=\"5\" width=\"10\" height=\"10\" fill={fill} />\n              <rect x=\"28\" y=\"5\" width=\"10\" height=\"10\" fill={fill} />\n            </svg>\n          </span>\n        );\n      case 'threshold':\n        return (\n          <span style={{ width: `${Number.parseFloat(emSvgSize) * 2}em`, height: emSvgSize }}>\n            <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 18 10\" role=\"img\" {...svgProps}>\n              <line\n                x1={0}\n                y1={(Number.parseFloat(emSvgSize) * 16) / 2}\n                x2={Number.parseFloat(emSvgSize) * 16 * 3}\n                y2={(Number.parseFloat(emSvgSize) * 16) / 2}\n                stroke={fill}\n                strokeWidth={3}\n                strokeDasharray=\"4,3\"\n              />\n            </svg>\n          </span>\n        );\n      case 'eye':\n        return <EyeIcon {...iconProps} />;\n      case 'eyeSlash':\n        return <EyeSlashIcon {...iconProps} />;\n      case 'infinity':\n        return <InfinityIcon {...iconProps} />;\n      case 'square':\n      default:\n        return <SquareIcon {...iconProps} />;\n    }\n  };\n\n  return <span className={`curiosity-chartarea__icon curiosity-chartarea__icon-${symbol}`}>{setIcon()}</span>;\n};\n\nChartIcon.propTypes = {\n  fill: PropTypes.string,\n  size: PropTypes.oneOf([...Object.keys(IconSize)]),\n  symbol: PropTypes.oneOf(['dash', 'eye', 'eyeSlash', 'infinity', 'square', 'threshold']),\n  title: PropTypes.string\n};\n\nChartIcon.defaultProps = {\n  fill: null,\n  size: 'sm',\n  symbol: 'square',\n  title: null\n};\n\nexport { ChartIcon as default, ChartIcon };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { useMount } from 'react-use';\nimport { useProduct } from '../productView/productViewContext';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { ChartIcon } from '../chart/chartIcon';\n\n/**\n * A custom chart legend.\n *\n * @fires onClick\n * @param {object} props\n * @param {object} props.chart\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useDispatch\n * @param {Function} props.useProduct\n * @param {Function} props.useSelectors\n * @returns {Node}\n */\nconst GraphCardChartLegend = ({\n  chart,\n  datum,\n  t,\n  useDispatch: useAliasDispatch,\n  useSelectors: useAliasSelectors,\n  useProduct: useAliasProduct\n}) => {\n  const { productLabel, viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n  const legendItems = useAliasSelectors(\n    datum.dataSets.map(\n      ({ id }) =>\n        ({ graph }) =>\n          graph.legend?.[`${viewId}-${id}`]\n    )\n  );\n\n  useMount(() => {\n    datum.dataSets.forEach(({ id }, index) => {\n      const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n\n      if (checkIsToggled) {\n        chart.hide(id);\n      }\n    });\n  });\n\n  /**\n   * Toggle legend item and chart.\n   *\n   * @event onClick\n   * @param {string} id\n   */\n  const onClick = id => {\n    const updatedToggle = chart.toggle(id);\n\n    dispatch({\n      type: reduxTypes.graph.SET_GRAPH_LEGEND,\n      id: `${viewId}-${id}`,\n      value: updatedToggle\n    });\n  };\n\n  return (\n    <React.Fragment>\n      {datum.dataSets.map(({ id, isThreshold, stroke: color, data = [] }, index) => {\n        const isDisabled =\n          !data.find(({ y, hasData }) => (y >= 0 && hasData === true) || (y >= 0 && isThreshold === true)) || false;\n\n        const labelContent = t(\n          [`curiosity-graph.label_${(isThreshold && 'threshold') || id}`, 'curiosity-graph.label_no'],\n          {\n            product: productLabel,\n            context: productLabel\n          }\n        );\n\n        const tooltipContent = t(\n          `curiosity-graph.legendTooltip${(isThreshold && '_threshold') || ''}_${id}`,\n          {\n            product: productLabel,\n            context: productLabel\n          },\n          [<span style={{ whiteSpace: 'nowrap' }} />]\n        );\n\n        const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n\n        const button = (\n          <Button\n            onClick={() => onClick(id)}\n            onKeyPress={() => onClick(id)}\n            className=\"curiosity-usage-graph__legend-item\"\n            tabIndex={0}\n            key={`curiosity-button-${id}`}\n            variant=\"link\"\n            component=\"a\"\n            isDisabled={isDisabled}\n            icon={\n              ((isDisabled || checkIsToggled) && <ChartIcon symbol=\"eyeSlash\" />) || (\n                <ChartIcon\n                  symbol={(isThreshold && 'dash') || 'square'}\n                  style={{ visibility: (isDisabled && 'hidden') || (checkIsToggled && 'hidden') || 'visible' }}\n                  fill={color}\n                />\n              )\n            }\n          >\n            {labelContent}\n          </Button>\n        );\n\n        if (tooltipContent) {\n          return (\n            <Tooltip\n              key={`curiosity-tooltip-${id}`}\n              content={<p>{tooltipContent}</p>}\n              position={TooltipPosition.top}\n              enableFlip\n              distance={5}\n            >\n              {button}\n            </Tooltip>\n          );\n        }\n\n        return button;\n      })}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, t: Function, useDispatch: Function, useSelectors: Function, chart: object}}\n */\nGraphCardChartLegend.propTypes = {\n  chart: PropTypes.shape({\n    hide: PropTypes.func,\n    toggle: PropTypes.func,\n    isToggled: PropTypes.func\n  }),\n  datum: PropTypes.shape({\n    dataSets: PropTypes.arrayOf(\n      PropTypes.shape({\n        stroke: PropTypes.string.isRequired,\n        id: PropTypes.string.isRequired,\n        isThreshold: PropTypes.bool\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useDispatch: PropTypes.func,\n  useSelectors: PropTypes.func,\n  useProduct: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: object, useProduct: Function, t: Function, useDispatch: Function, useSelectors: Function, chart: object}}\n */\nGraphCardChartLegend.defaultProps = {\n  chart: {\n    hide: helpers.noop,\n    toggle: helpers.noop,\n    isToggled: helpers.noop\n  },\n  datum: {\n    dataSets: []\n  },\n  t: translate,\n  useDispatch: storeHooks.reactRedux.useDispatch,\n  useSelectors: storeHooks.reactRedux.useSelectors,\n  useProduct\n};\n\nexport { GraphCardChartLegend as default, GraphCardChartLegend };\n","import React, { useCallback, useContext } from 'react';\nimport { reduxHelpers } from '../../redux/common';\nimport { storeHooks } from '../../redux/hooks';\nimport { RHSM_API_QUERY_TYPES, rhsmApiTypes } from '../../types/rhsmApiTypes';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Route context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{}, helpers.noop];\n\nconst ProductViewContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated product view context.\n *\n * @returns {React.Context<{}>}\n */\nconst useProductViewContext = () => useContext(ProductViewContext);\n\n/**\n * Return a query object from initial product config and Redux store.\n *\n * @param {string} queryType An identifier used to pull from both config and Redux, they should named the same.\n * @param {object} options\n * @param {string} options.overrideId A custom identifier, used for scenarios like the Guest inventory IDs\n * @param {object} options.useProductViewContext\n * @returns {object}\n */\nconst useProductQueryFactory = (\n  queryType,\n  { overrideId, useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}\n) => {\n  const { [queryType]: initialQuery, productId, viewId } = useAliasProductViewContext();\n  const queryOverride = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[overrideId], undefined);\n  const queryProduct = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[productId], undefined);\n  const queryView = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[viewId], undefined);\n\n  return {\n    ...initialQuery,\n    ...queryOverride,\n    ...queryProduct,\n    ...queryView\n  };\n};\n\n/**\n * Return a base product query\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductQuery = ({ queryType = 'query', options } = {}) => useProductQueryFactory(queryType, options);\n\n/**\n * Return the graph query based off of tally and capacity.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductGraphTallyQuery = ({\n  queryType = 'graphTallyQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_REPORT_CAPACITY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return the inventory query for guests. Use fallback/defaults for guests offset, limit.\n *\n * @param {object} options\n * @param {number} options.defaultLimit\n * @param {number} options.defaultOffset\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryGuestsQuery = ({\n  defaultLimit = 100,\n  defaultOffset = 0,\n  queryType = 'inventoryGuestsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_GUESTS_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      [RHSM_API_QUERY_SET_TYPES.LIMIT]: defaultLimit,\n      [RHSM_API_QUERY_SET_TYPES.OFFSET]: defaultOffset,\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for hosts.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryHostsQuery = ({\n  queryType = 'inventoryHostsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for subscriptions.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventorySubscriptionsQuery = ({\n  queryType = 'inventorySubscriptionsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Get a filtered product configuration context.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductViewContext\n * @returns {object}\n */\nconst useProductContext = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductViewContext: useAliasProductViewContext = useProductViewContext\n} = {}) => {\n  const { [RHSM_API_QUERY_TYPES.UOM]: uomFilter } = useAliasProductQuery();\n  const {\n    initialGraphFilters = [],\n    initialInventoryFilters = [],\n    initialSubscriptionsInventoryFilters = [],\n    productContextFilterUom,\n    ...config\n  } = useAliasProductViewContext();\n\n  const applyUomFilter = useCallback(() => {\n    if (productContextFilterUom === true) {\n      const filterFilters = ({ id, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(uomFilter, 'i').test(id);\n      };\n\n      return {\n        ...config,\n        initialGraphFilters: initialGraphFilters.filter(filterFilters),\n        initialInventoryFilters: initialInventoryFilters.filter(filterFilters),\n        initialSubscriptionsInventoryFilters: initialSubscriptionsInventoryFilters.filter(filterFilters)\n      };\n    }\n\n    return {\n      ...config,\n      initialGraphFilters,\n      initialInventoryFilters,\n      initialSubscriptionsInventoryFilters\n    };\n  }, [\n    config,\n    initialGraphFilters,\n    initialInventoryFilters,\n    initialSubscriptionsInventoryFilters,\n    productContextFilterUom,\n    uomFilter\n  ]);\n\n  return applyUomFilter();\n};\n\n/**\n * Return product identifiers.\n *\n * @param {object} options\n * @param {Function} options.useProductViewContext\n * @returns {{productLabel: string, viewId: string, productId: string, productGroup: string}}\n */\nconst useProduct = ({ useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}) => {\n  const { productGroup, productId, productLabel, viewId } = useAliasProductViewContext();\n  return {\n    productGroup,\n    productId,\n    productLabel,\n    viewId\n  };\n};\n\n/**\n * Return graph configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductGraphConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialGraphFilters, initialGraphSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGraphFilters,\n    settings: initialGraphSettings\n  };\n};\n\n/**\n * Return guests inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryGuestsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { inventoryGuestsQuery = {}, initialGuestsFilters, initialGuestsSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGuestsFilters,\n    initialQuery: inventoryGuestsQuery,\n    settings: initialGuestsSettings\n  };\n};\n\n/**\n * Return hosts inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryHostsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialInventoryFilters, initialInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialInventoryFilters,\n    settings: initialInventorySettings\n  };\n};\n\n/**\n * Return subscriptions inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventorySubscriptionsConfig = ({\n  useProductContext: useAliasProductContext = useProductContext\n} = {}) => {\n  const { initialSubscriptionsInventoryFilters, initialSubscriptionsInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialSubscriptionsInventoryFilters,\n    settings: initialSubscriptionsInventorySettings\n  };\n};\n\n/**\n * Return primary toolbar configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductToolbarConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialToolbarFilters, initialToolbarSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialToolbarFilters,\n    settings: initialToolbarSettings\n  };\n};\n\nconst context = {\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useQuery: useProductQuery,\n  useQueryFactory: useProductQueryFactory,\n  useGraphTallyQuery: useProductGraphTallyQuery,\n  useInventoryGuestsQuery: useProductInventoryGuestsQuery,\n  useInventoryHostsQuery: useProductInventoryHostsQuery,\n  useInventorySubscriptionsQuery: useProductInventorySubscriptionsQuery,\n  useProduct,\n  useGraphConfig: useProductGraphConfig,\n  useInventoryGuestsConfig: useProductInventoryGuestsConfig,\n  useInventoryHostsConfig: useProductInventoryHostsConfig,\n  useInventorySubscriptionsConfig: useProductInventorySubscriptionsConfig,\n  useToolbarConfig: useProductToolbarConfig\n};\n\nexport {\n  context as default,\n  context,\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useProductQuery,\n  useProductQueryFactory,\n  useProductGraphTallyQuery,\n  useProductInventoryGuestsQuery,\n  useProductInventoryHostsQuery,\n  useProductInventorySubscriptionsQuery,\n  useProduct,\n  useProductGraphConfig,\n  useProductInventoryGuestsConfig,\n  useProductInventoryHostsConfig,\n  useProductInventorySubscriptionsConfig,\n  useProductToolbarConfig\n};\n"],"names":["ChartIcon","fill","symbol","size","title","svgProps","iconProps","emSvgSize","getSize","color","className","style","width","height","Number","parseFloat","viewBox","role","y","x","x1","y1","x2","y2","stroke","strokeWidth","strokeDasharray","EyeIcon","EyeSlashIcon","InfinityIcon","SquareIcon","setIcon","defaultProps","GraphCardChartLegend","chart","datum","t","useAliasDispatch","useDispatch","useAliasSelectors","useSelectors","useAliasProduct","useProduct","productLabel","viewId","dispatch","legendItems","dataSets","map","id","graph","legend","useMount","forEach","index","isToggled","hide","onClick","updatedToggle","toggle","type","reduxTypes","value","isThreshold","data","isDisabled","find","hasData","labelContent","product","context","tooltipContent","whiteSpace","checkIsToggled","button","Button","onKeyPress","tabIndex","key","variant","component","icon","visibility","Tooltip","content","position","TooltipPosition","enableFlip","distance","helpers","translate","storeHooks","DEFAULT_CONTEXT","ProductViewContext","React","useProductViewContext","useContext","useProductQueryFactory","queryType","overrideId","useAliasProductViewContext","initialQuery","productId","queryOverride","view","undefined","queryProduct","queryView","useProductQuery","options","useProductGraphTallyQuery","schemaCheck","rhsmApiTypes","reduxHelpers","useProductInventoryGuestsQuery","defaultLimit","defaultOffset","RHSM_API_QUERY_SET_TYPES","useProductInventoryHostsQuery","useProductInventorySubscriptionsQuery","useProductContext","useAliasProductQuery","uomFilter","RHSM_API_QUERY_TYPES","initialGraphFilters","initialInventoryFilters","initialSubscriptionsInventoryFilters","productContextFilterUom","config","applyUomFilter","useCallback","filterFilters","isOptional","RegExp","test","filter","productGroup","useProductGraphConfig","useAliasProductContext","initialGraphSettings","filters","settings","useProductInventoryGuestsConfig","inventoryGuestsQuery","initialGuestsFilters","initialGuestsSettings","useProductInventoryHostsConfig","initialInventorySettings","useProductInventorySubscriptionsConfig","initialSubscriptionsInventorySettings","useProductToolbarConfig","initialToolbarFilters","initialToolbarSettings","useQuery","useQueryFactory","useGraphTallyQuery","useInventoryGuestsQuery","useInventoryHostsQuery","useInventorySubscriptionsQuery","useGraphConfig","useInventoryGuestsConfig","useInventoryHostsConfig","useInventorySubscriptionsConfig","useToolbarConfig"],"sourceRoot":""}