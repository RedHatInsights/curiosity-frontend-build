{"version":3,"file":"js/384.1676913138823.7be4cd4a0cc2bfde81f1.js","mappings":"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","sources":["webpack:///./src/components/form/formState.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport _cloneDeep from 'lodash/cloneDeep';\nimport _isEqual from 'lodash/isEqual';\nimport helpers from '../../common/helpers';\n\n/**\n * Initial component state values.\n *\n * @type {{submitCount: number, isValid: null, isUpdating: boolean, isSubmitting: boolean, isValidating: boolean}}\n */\nconst initialState = {\n  isUpdating: false,\n  isSubmitting: false,\n  isValid: null,\n  isValidating: false,\n  submitCount: 0\n};\n\n/**\n * Maintain a form's state/context.\n *\n * @augments React.Component\n * @fires onEvent\n * @fires onEventCustom\n * @fires onReset\n * @fires onSubmit\n */\nclass FormState extends React.Component {\n  /**\n   * Infer a field value is \"checked\" from a boolean value.\n   *\n   * @param {object} params\n   * @param {boolean} params.setValuesAssumeBoolIsChecked\n   * @param {object} params.setValues\n   * @returns {{}}\n   */\n  static checkedSetValues({ setValuesAssumeBoolIsChecked, setValues }) {\n    const checked = {};\n\n    if (setValuesAssumeBoolIsChecked) {\n      Object.keys(setValues).forEach(key => {\n        if (typeof setValues[key] === 'boolean') {\n          checked[key] = setValues[key];\n        }\n      });\n    }\n\n    return checked;\n  }\n\n  /**\n   * Check if \"is a promise\".\n   *\n   * @param {*} obj\n   * @returns {boolean}\n   */\n  static isPromise(obj) {\n    return Object.prototype.toString.call(obj) === '[object Promise]';\n  }\n\n  state = {\n    ...initialState\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.touched = {};\n    this.checked = FormState.checkedSetValues(props);\n\n    this.refValues =\n      props.resetUsingSetValues === true || props.setValuesOnUpdate === true ? _cloneDeep(props.setValues) : null;\n\n    this.errors = {};\n    this.values = _cloneDeep(props.setValues);\n  }\n\n  componentDidMount() {\n    const { validateOnMount } = this.props;\n\n    if (validateOnMount === true) {\n      this.validateOnMount();\n    }\n  }\n\n  componentDidUpdate() {\n    const { refValues } = this;\n    const { setValuesOnUpdate, setValues } = this.props;\n\n    if (setValuesOnUpdate === true && !_isEqual(refValues, setValues)) {\n      this.updateComponentValues();\n    }\n  }\n\n  /**\n   * Apply form values with a custom event.\n   *\n   * @event onEventCustom\n   * @param {Array|object} custom\n   */\n  onEventCustom = custom => {\n    const eventArray = (Array.isArray(custom) && custom) || (custom && [custom]);\n\n    if (!eventArray.length) {\n      return;\n    }\n\n    eventArray\n      .filter(event => 'name' in event && ('value' in event || 'checked' in event))\n      .forEach(event => this.onEvent({ target: { ...event }, persist: helpers.noop, type: 'custom' }));\n  };\n\n  /**\n   * Generic \"on event\" for handling returned event objects.\n   *\n   * @event onEvent\n   * @param {object} event\n   */\n  onEvent = event => {\n    const { touched, values } = this;\n    const { id, name, value, checked } = event.options ? { ...event } : event.target;\n\n    event.persist();\n\n    const targetName = name || id || 'generated form state target, add name or id attr to field';\n\n    this.touched = { ...touched, [targetName]: true };\n    this.values = { ...values, [targetName]: value };\n\n    if (checked !== undefined) {\n      this.checked = { ...this.checked, [targetName]: checked };\n    }\n\n    this.setState(\n      {\n        isUpdating: true,\n        isValidating: true\n      },\n      () =>\n        this.validate(event).then(updatedErrors => {\n          const setUpdateErrors = { ...((updatedErrors && updatedErrors[0]) || updatedErrors || {}) };\n          const checkIsValid = !Object.values(setUpdateErrors).filter(val => val === true).length;\n\n          this.errors = setUpdateErrors;\n\n          this.setState({\n            isUpdating: false,\n            isValid: checkIsValid,\n            isValidating: false\n          });\n        })\n    );\n  };\n\n  /**\n   * Reset FormState's form state. Apply prop onReset function.\n   *\n   * @event onReset\n   * @param {object} event\n   */\n  onReset = event => {\n    const { refValues, values } = this;\n    const { setValuesAssumeBoolIsChecked, onReset, resetUsingSetValues } = this.props;\n\n    event.persist();\n\n    const isResetWithSetValues = refValues && resetUsingSetValues === true;\n    const updatedValues = (isResetWithSetValues && _cloneDeep(refValues)) || {};\n    const updatedChecked =\n      (isResetWithSetValues && FormState.checkedSetValues(setValuesAssumeBoolIsChecked, updatedValues)) || {};\n\n    this.values = updatedValues;\n    this.checked = updatedChecked;\n    this.errors = {};\n    this.touched = {};\n\n    this.setState({\n      ...initialState\n    });\n\n    if (isResetWithSetValues) {\n      onReset({ event, ..._cloneDeep({ values: updatedValues, prevValues: values }) });\n    } else {\n      // Resetting the values, potentially, will throw the controlled vs uncontrolled messaging.\n      onReset({ event, values: {}, ..._cloneDeep({ prevValues: values }) });\n    }\n  };\n\n  /**\n   * Validate form, then submit.\n   *\n   * @event onSubmit\n   * @param {object} event\n   */\n  onSubmit = event => {\n    const { submitCount } = this.state;\n\n    event.persist();\n    event.preventDefault();\n\n    this.setState(\n      {\n        submitCount: submitCount + 1,\n        isSubmitting: true,\n        isUpdating: true,\n        isValidating: true\n      },\n      () =>\n        this.validate(event).then(updatedErrors => {\n          const setUpdateErrors = { ...((updatedErrors && updatedErrors[0]) || updatedErrors || {}) };\n          const checkIsValid = !Object.values(setUpdateErrors).filter(val => val === true).length;\n\n          this.errors = setUpdateErrors;\n          this.touched = {};\n\n          this.setState(\n            {\n              isValid: checkIsValid,\n              isValidating: false\n            },\n            () =>\n              checkIsValid &&\n              this.submit(event).then(() => {\n                this.setState({\n                  isSubmitting: false,\n                  isUpdating: false\n                });\n              })\n          );\n        })\n    );\n  };\n\n  /**\n   * Handle submitted form, check and return Promise, or emulate for consistency.\n   *\n   * @param {object} event\n   * @returns {Promise}\n   */\n  submit(event = { type: 'submit' }) {\n    const { checked, errors, values, touched } = this;\n    const { onSubmit } = this.props;\n\n    const checkPromise = onSubmit({\n      event,\n      ..._cloneDeep({ ...this.state, checked, errors, values, touched })\n    });\n\n    if (FormState.isPromise(checkPromise)) {\n      return checkPromise;\n    }\n\n    return {\n      then: callback => callback()\n    };\n  }\n\n  /**\n   * Handle validated form data, check and return Promise, or emulate for consistency.\n   *\n   * @param {object} event\n   * @returns {Promise}\n   */\n  validate(event = { type: 'validate' }) {\n    const { checked, errors, values, touched } = this;\n    const { validate } = this.props;\n\n    const checkPromise = validate({\n      event,\n      ..._cloneDeep({ ...this.state, checked, errors, values, touched })\n    });\n\n    if (FormState.isPromise(checkPromise)) {\n      return checkPromise;\n    }\n\n    return {\n      then: callback => callback(checkPromise)\n    };\n  }\n\n  /**\n   * Shortcut, activate validation on component mount.\n   *\n   * @param {object} event\n   */\n  validateOnMount(event = { type: 'mount' }) {\n    this.validateOnUpdate(event);\n  }\n\n  /**\n   * Validate on component update.\n   *\n   * @param {object} event\n   */\n  validateOnUpdate(event = { type: 'update' }) {\n    this.setState(\n      {\n        isUpdating: true,\n        isValidating: true\n      },\n      () =>\n        this.validate(event).then(updatedErrors => {\n          const setUpdateErrors = { ...((updatedErrors && updatedErrors[0]) || updatedErrors || {}) };\n          const checkIsValid = !Object.values(setUpdateErrors).filter(val => val === true).length;\n\n          this.errors = setUpdateErrors;\n\n          this.setState({\n            isUpdating: false,\n            isValidating: false,\n            isValid: checkIsValid\n          });\n        })\n    );\n  }\n\n  /**\n   * On component update, update state.\n   */\n  updateComponentValues() {\n    const { setValues, setValuesAssumeBoolIsChecked, validateOnUpdate } = this.props;\n\n    this.setState(\n      {\n        isUpdating: true\n      },\n      () => {\n        this.checked = FormState.checkedSetValues(setValuesAssumeBoolIsChecked, setValues);\n        this.refValues = _cloneDeep(setValues);\n        this.values = _cloneDeep(setValues);\n\n        if (validateOnUpdate) {\n          this.validateOnUpdate();\n        } else {\n          this.setState({\n            isUpdating: false\n          });\n        }\n      }\n    );\n  }\n\n  /**\n   * Pass child components, integrate and apply form context.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { checked, errors, values, touched } = this;\n    const { children } = this.props;\n\n    return (\n      <React.Fragment>\n        {children({\n          handleOnEventCustom: this.onEventCustom,\n          handleOnEvent: this.onEvent,\n          handleOnReset: this.onReset,\n          handleOnSubmit: this.onSubmit,\n          ..._cloneDeep({ ...this.state, checked, errors, values, touched })\n        })}\n      </React.Fragment>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{setValuesOnUpdate: boolean, validateOnMount: boolean, children: Function,\n *     setValues: object, onSubmit: Function, resetUsingSetValues: boolean,\n *     setValuesAssumeBoolIsChecked: boolean, onReset: Function, validate: Function,\n *     validateOnUpdate: boolean}}\n */\nFormState.propTypes = {\n  children: PropTypes.func.isRequired,\n  onReset: PropTypes.func,\n  onSubmit: PropTypes.func,\n  resetUsingSetValues: PropTypes.bool,\n  setValues: PropTypes.object,\n  setValuesOnUpdate: PropTypes.bool,\n  setValuesAssumeBoolIsChecked: PropTypes.bool,\n  validate: PropTypes.func,\n  validateOnMount: PropTypes.bool,\n  validateOnUpdate: PropTypes.bool\n};\n\n/**\n * Default props.\n *\n * @type {{setValuesOnUpdate: boolean, validateOnMount: boolean, setValues: {},\n *     onSubmit: Function, resetUsingSetValues: boolean, setValuesAssumeBoolIsChecked: boolean,\n *     onReset: Function, validate: Function, validateOnUpdate: boolean}}\n */\nFormState.defaultProps = {\n  onReset: helpers.noop,\n  onSubmit: helpers.noop,\n  resetUsingSetValues: true,\n  setValues: {},\n  setValuesOnUpdate: false,\n  setValuesAssumeBoolIsChecked: true,\n  validate: helpers.noop,\n  validateOnMount: false,\n  validateOnUpdate: false\n};\n\nexport { FormState as default, FormState };\n"],"names":["initialState","isUpdating","isSubmitting","isValid","isValidating","submitCount","FormState","props","state","onEventCustom","custom","eventArray","Array","isArray","length","filter","event","forEach","onEvent","target","persist","helpers","type","touched","values","options","id","name","value","checked","targetName","undefined","setState","validate","then","updatedErrors","setUpdateErrors","checkIsValid","Object","val","errors","onReset","refValues","setValuesAssumeBoolIsChecked","resetUsingSetValues","isResetWithSetValues","updatedValues","_cloneDeep","updatedChecked","checkedSetValues","prevValues","onSubmit","preventDefault","submit","setValuesOnUpdate","setValues","this","validateOnMount","_isEqual","updateComponentValues","checkPromise","isPromise","callback","validateOnUpdate","children","handleOnEventCustom","handleOnEvent","handleOnReset","handleOnSubmit","keys","key","obj","prototype","toString","call","React","defaultProps"],"sourceRoot":""}