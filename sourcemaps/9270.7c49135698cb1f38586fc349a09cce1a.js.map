{"version":3,"file":"js/9270.1658938366845.f02215c9613c31d403e1.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardChart.deprecated.js","webpack:///./src/components/graphCard/graphCardChartLegend.js","webpack:///./src/components/graphCard/graphCardChartTooltip.js","webpack:///./src/components/graphCard/graphCardHelpers.js","webpack:///./src/components/productView/productViewContext.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { chart_color_green_300 as chartColorGreenDark } from '@patternfly/react-tokens';\nimport { useProductGraphConfig, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { graphCardHelpers } from './graphCardHelpers';\nimport { Chart } from '../chart/chart';\nimport GraphCardChartLegend from './graphCardChartLegend';\nimport GraphCardChartTooltip from './graphCardChartTooltip';\nimport { RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\n\n/**\n * A chart/graph.\n *\n * @param {object} props\n * @param {object} props.graphData\n * @param {Function} props.useProductGraphConfig\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardChart = ({\n  graphData,\n  useProductGraphConfig: useAliasProductGraphConfig,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { filters } = useAliasProductGraphConfig();\n  const query = useAliasProductGraphTallyQuery();\n  const { [RHSM_API_QUERY_TYPES.GRANULARITY]: granularity } = query;\n\n  const chartAreaProps = {\n    xAxisLabelIncrement: graphCardHelpers.getChartXAxisLabelIncrement(granularity),\n    xAxisTickFormat: ({ item, previousItem, tick }) =>\n      graphCardHelpers.xAxisTickFormat({\n        tick,\n        date: item.date,\n        previousDate: previousItem.date,\n        granularity\n      }),\n    yAxisTickFormat: graphCardHelpers.yAxisTickFormat\n  };\n\n  const filteredGraphData = data => {\n    const filtered = key => {\n      const tempFiltered = {\n        data: data[key],\n        id: key,\n        strokeWidth: 2,\n        isStacked: !/^threshold/.test(key),\n        isThreshold: /^threshold/.test(key)\n      };\n\n      if (/^threshold/.test(key)) {\n        tempFiltered.stroke = chartColorGreenDark.value;\n        tempFiltered.strokeDasharray = '4,3';\n        tempFiltered.strokeWidth = 3;\n      }\n\n      return tempFiltered;\n    };\n\n    if (filters?.length) {\n      return filters.map(value => Object.assign(filtered(value.id), value));\n    }\n\n    return Object.keys(data).map(key => filtered(key));\n  };\n\n  return (\n    <Chart\n      key={`chart_${JSON.stringify(query)}`}\n      {...chartAreaProps}\n      dataSets={filteredGraphData(graphData)}\n      chartLegend={({ chart, datum }) => <GraphCardChartLegend chart={chart} datum={datum} />}\n      chartTooltip={({ datum }) => <GraphCardChartTooltip datum={datum} />}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, useProductGraphConfig: Function, graphData: object}}\n */\nGraphCardChart.propTypes = {\n  graphData: PropTypes.object,\n  useProductGraphConfig: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, useProductGraphConfig: Function, graphData: object}}\n */\nGraphCardChart.defaultProps = {\n  graphData: {},\n  useProductGraphConfig,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChart as default, GraphCardChart };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { useMount } from 'react-use';\nimport { useProduct } from '../productView/productViewContext';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { ChartIcon } from '../chart/chartIcon';\n\n/**\n * A custom chart legend.\n *\n * @fires onClick\n * @param {object} props\n * @param {object} props.chart\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useDispatch\n * @param {Function} props.useProduct\n * @param {Function} props.useSelectors\n * @returns {Node}\n */\nconst GraphCardChartLegend = ({\n  chart,\n  datum,\n  t,\n  useDispatch: useAliasDispatch,\n  useSelectors: useAliasSelectors,\n  useProduct: useAliasProduct\n}) => {\n  const { productLabel, viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n  const legendItems = useAliasSelectors(\n    datum.dataSets.map(\n      ({ id }) =>\n        ({ graph }) =>\n          graph.legend?.[`${viewId}-${id}`]\n    )\n  );\n\n  useMount(() => {\n    datum.dataSets.forEach(({ id }, index) => {\n      const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n\n      if (checkIsToggled) {\n        chart.hide(id);\n      }\n    });\n  });\n\n  /**\n   * Toggle legend item and chart.\n   *\n   * @event onClick\n   * @param {string} id\n   */\n  const onClick = id => {\n    const updatedToggle = chart.toggle(id);\n\n    dispatch({\n      type: reduxTypes.graph.SET_GRAPH_LEGEND,\n      id: `${viewId}-${id}`,\n      value: updatedToggle\n    });\n  };\n\n  return (\n    <React.Fragment>\n      {datum.dataSets.map(({ id, isThreshold, stroke: color, data = [] }, index) => {\n        const isDisabled =\n          !data.find(({ y, hasData }) => (y >= 0 && hasData === true) || (y >= 0 && isThreshold === true)) || false;\n\n        const labelContent = t(\n          [`curiosity-graph.label_${(isThreshold && 'threshold') || id}`, 'curiosity-graph.label_no'],\n          {\n            product: productLabel,\n            context: productLabel\n          }\n        );\n\n        const tooltipContent = t(\n          `curiosity-graph.legendTooltip${(isThreshold && '_threshold') || ''}_${id}`,\n          {\n            product: productLabel,\n            context: productLabel\n          },\n          [<span style={{ whiteSpace: 'nowrap' }} />]\n        );\n\n        const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n\n        const button = (\n          <Button\n            onClick={() => onClick(id)}\n            onKeyPress={() => onClick(id)}\n            className=\"curiosity-usage-graph__legend-item\"\n            tabIndex={0}\n            key={`curiosity-button-${id}`}\n            variant=\"link\"\n            component=\"a\"\n            isDisabled={isDisabled}\n            icon={\n              ((isDisabled || checkIsToggled) && <ChartIcon symbol=\"eyeSlash\" />) || (\n                <ChartIcon\n                  symbol={(isThreshold && 'dash') || 'square'}\n                  style={{ visibility: (isDisabled && 'hidden') || (checkIsToggled && 'hidden') || 'visible' }}\n                  fill={color}\n                />\n              )\n            }\n          >\n            {labelContent}\n          </Button>\n        );\n\n        if (tooltipContent) {\n          return (\n            <Tooltip\n              key={`curiosity-tooltip-${id}`}\n              content={<p>{tooltipContent}</p>}\n              position={TooltipPosition.top}\n              enableFlip\n              distance={5}\n            >\n              {button}\n            </Tooltip>\n          );\n        }\n\n        return button;\n      })}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, t: Function, useDispatch: Function, useSelectors: Function, chart: object}}\n */\nGraphCardChartLegend.propTypes = {\n  chart: PropTypes.shape({\n    hide: PropTypes.func,\n    toggle: PropTypes.func,\n    isToggled: PropTypes.func\n  }),\n  datum: PropTypes.shape({\n    dataSets: PropTypes.arrayOf(\n      PropTypes.shape({\n        stroke: PropTypes.string.isRequired,\n        id: PropTypes.string.isRequired,\n        isThreshold: PropTypes.bool\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useDispatch: PropTypes.func,\n  useSelectors: PropTypes.func,\n  useProduct: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: object, useProduct: Function, t: Function, useDispatch: Function, useSelectors: Function, chart: object}}\n */\nGraphCardChartLegend.defaultProps = {\n  chart: {\n    hide: helpers.noop,\n    toggle: helpers.noop,\n    isToggled: helpers.noop\n  },\n  datum: {\n    dataSets: []\n  },\n  t: translate,\n  useDispatch: storeHooks.reactRedux.useDispatch,\n  useSelectors: storeHooks.reactRedux.useSelectors,\n  useProduct\n};\n\nexport { GraphCardChartLegend as default, GraphCardChartLegend };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { getTooltipDate } from './graphCardHelpers';\nimport { translate } from '../i18n/i18n';\nimport { ChartIcon } from '../chart/chartIcon';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * A custom chart tooltip.\n *\n * @param {object} props\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useProduct\n * @returns {Node}\n */\nconst GraphCardChartTooltip = ({\n  datum,\n  t,\n  useProduct: useAliasProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productLabel } = useAliasProduct();\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n\n  let header = null;\n  const data = [];\n  const { itemsByKey = {} } = datum || {};\n\n  Object.keys(itemsByKey)\n    .reverse()\n    .forEach((key, index) => {\n      if (index === 0) {\n        header = getTooltipDate({\n          date: itemsByKey[key]?.data.date,\n          granularity\n        });\n      }\n\n      const tempDataFacet = {\n        color: itemsByKey[key]?.color\n      };\n\n      if (itemsByKey[key]?.chartType === 'threshold') {\n        let thresholdStringValue = itemsByKey[key]?.data.y ?? t('curiosity-graph.label_noData');\n\n        if (itemsByKey[key]?.data.hasInfinite) {\n          if (tempDataFacet.color) {\n            thresholdStringValue = (\n              <ChartIcon\n                symbol=\"infinity\"\n                fill=\"#ffffff\"\n                title={t('curiosity-graph.label_threshold', { context: 'infinite' })}\n              />\n            );\n          } else {\n            thresholdStringValue = t('curiosity-graph.label_threshold', { context: 'infinite' });\n          }\n        }\n\n        tempDataFacet.label = t('curiosity-graph.label_threshold');\n        tempDataFacet.value = thresholdStringValue;\n      } else {\n        const dataFactsValue =\n          (itemsByKey[key]?.data.hasData === false && t('curiosity-graph.label_noData')) ||\n          itemsByKey[key]?.data.y ||\n          0;\n\n        tempDataFacet.label = t('curiosity-graph.label', { context: key, product: productLabel });\n        tempDataFacet.value = dataFactsValue;\n      }\n\n      tempDataFacet.chartType = itemsByKey[key]?.chartType;\n      data.push(tempDataFacet);\n    });\n\n  return (\n    <div className=\"curiosity-usage-graph__tooltip\">\n      <table summary={t('curiosity-graph.tooltipSummary')}>\n        {(data.length && header && (\n          <thead>\n            <tr>\n              <th colSpan={2}>{header}</th>\n            </tr>\n          </thead>\n        )) ||\n          null}\n        {(data.length && (\n          <tbody>\n            {data.map(dataFacet => {\n              const updatedDataFacetValue =\n                (typeof dataFacet.value === 'number' &&\n                  !Number.isInteger(dataFacet.value) &&\n                  helpers\n                    .numberDisplay(dataFacet.value)\n                    ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: true })\n                    ?.toUpperCase()) ||\n                dataFacet.value;\n\n              return (\n                <tr key={`tooltip-${dataFacet.label}`}>\n                  <th>\n                    {dataFacet.chartType === 'threshold' && (\n                      <ChartIcon size=\"sm\" symbol=\"dash\" fill={dataFacet.color || 'transparent'} />\n                    )}\n                    {dataFacet.chartType !== 'threshold' && (\n                      <ChartIcon size=\"sm\" fill={dataFacet.color || 'transparent'} />\n                    )}{' '}\n                    {dataFacet.label}\n                  </th>\n                  <td>{updatedDataFacetValue}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        )) ||\n          null}\n      </table>\n      {(!data.length && t('curiosity-graph.label_noData', { context: 'error' })) || null}\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.propTypes = {\n  datum: PropTypes.shape({\n    itemsByKey: PropTypes.objectOf(\n      PropTypes.shape({\n        chartType: PropTypes.string,\n        color: PropTypes.string,\n        data: PropTypes.shape({\n          date: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),\n          hasData: PropTypes.bool,\n          hasInfinite: PropTypes.bool,\n          y: PropTypes.number\n        })\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.defaultProps = {\n  datum: {},\n  t: translate,\n  useProduct,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChartTooltip as default, GraphCardChartTooltip };\n","import moment from 'moment';\nimport { chart_color_green_300 as chartColorGreenDark } from '@patternfly/react-tokens';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers, helpers } from '../../common';\n\n/**\n * Update chart/graph filters with base settings with styling.\n *\n * @param {Array} filters\n * @returns {{standaloneFilters: Array, groupedFilters: Array}}\n */\nconst generateChartSettings = (filters = []) => {\n  const standaloneFilters = [];\n  const groupedFilters = [];\n\n  filters.forEach(({ id, isStandalone = false, isThreshold = false, ...settings }) => {\n    if (!id) {\n      return;\n    }\n\n    const baseFilterSettings = {\n      id,\n      isStacked: !isThreshold,\n      isStandalone,\n      isThreshold,\n      strokeWidth: 2\n    };\n\n    if (isThreshold) {\n      baseFilterSettings.stroke = chartColorGreenDark.value;\n      baseFilterSettings.strokeDasharray = '4,3';\n      baseFilterSettings.strokeWidth = 3;\n    }\n\n    if (isStandalone) {\n      standaloneFilters.push({\n        ...baseFilterSettings,\n        ...settings\n      });\n    } else {\n      groupedFilters.push({\n        ...baseFilterSettings,\n        ...settings\n      });\n    }\n  });\n\n  return {\n    standaloneFilters,\n    groupedFilters\n  };\n};\n\n/**\n * Returns x axis ticks/intervals array for the xAxisTickInterval\n *\n * @param {string} granularity See enum of RHSM_API_QUERY_GRANULARITY_TYPES\n * @returns {number}\n */\nconst getChartXAxisLabelIncrement = granularity => {\n  switch (granularity) {\n    case GRANULARITY_TYPES.DAILY:\n      return 5;\n    case GRANULARITY_TYPES.WEEKLY:\n    case GRANULARITY_TYPES.MONTHLY:\n      return 2;\n    case GRANULARITY_TYPES.QUARTERLY:\n    default:\n      return 1;\n  }\n};\n\n/**\n * Return a formatted date string.\n *\n * @param {object} params\n * @param {Date} params.date\n * @param {string} params.granularity See enum of RHSM_API_QUERY_GRANULARITY_TYPES\n * @returns {string}\n */\nconst getTooltipDate = ({ date, granularity } = {}) => {\n  const momentDate = moment.utc(date);\n\n  switch (granularity) {\n    case GRANULARITY_TYPES.QUARTERLY:\n      return `${momentDate.format(dateHelpers.timestampQuarterFormats.yearShort)} - ${momentDate\n        .add(1, 'quarter')\n        .format(dateHelpers.timestampQuarterFormats.yearShort)}`;\n\n    case GRANULARITY_TYPES.MONTHLY:\n      return momentDate.format(dateHelpers.timestampMonthFormats.yearLong);\n\n    case GRANULARITY_TYPES.WEEKLY:\n      return `${momentDate.format(dateHelpers.timestampDayFormats.short)} - ${momentDate\n        .add(1, 'week')\n        .format(dateHelpers.timestampDayFormats.yearShort)}`;\n\n    case GRANULARITY_TYPES.DAILY:\n    default:\n      return momentDate.format(dateHelpers.timestampDayFormats.long);\n  }\n};\n\n/**\n * Format x axis ticks.\n *\n * @param {object} params\n * @param {Function} params.callback\n * @param {Date} params.date\n * @param {string} params.granularity See enum of RHSM_API_QUERY_GRANULARITY_TYPES\n * @param {number|string} params.tick\n * @param {Date} params.previousDate\n * @returns {string|undefined}\n */\nconst xAxisTickFormat = ({ callback, date, granularity, tick, previousDate } = {}) => {\n  if (!date || !granularity) {\n    return undefined;\n  }\n\n  if (callback) {\n    return callback({ callback, date, granularity, tick, previousDate });\n  }\n\n  const momentDate = moment.utc(date);\n  const isNewYear =\n    tick !== 0 && Number.parseInt(momentDate.year(), 10) !== Number.parseInt(moment.utc(previousDate).year(), 10);\n  let formattedDate;\n\n  switch (granularity) {\n    case GRANULARITY_TYPES.QUARTERLY:\n      formattedDate = isNewYear\n        ? momentDate.format(dateHelpers.timestampQuarterFormats.yearShort)\n        : momentDate.format(dateHelpers.timestampQuarterFormats.short);\n\n      formattedDate = formattedDate.replace(/\\s/, '\\n');\n      break;\n    case GRANULARITY_TYPES.MONTHLY:\n      formattedDate = isNewYear\n        ? momentDate.format(dateHelpers.timestampMonthFormats.yearShort)\n        : momentDate.format(dateHelpers.timestampMonthFormats.short);\n\n      formattedDate = formattedDate.replace(/\\s/, '\\n');\n      break;\n    case GRANULARITY_TYPES.WEEKLY:\n    case GRANULARITY_TYPES.DAILY:\n    default:\n      formattedDate = isNewYear\n        ? momentDate.format(dateHelpers.timestampDayFormats.yearShort)\n        : momentDate.format(dateHelpers.timestampDayFormats.short);\n\n      formattedDate = formattedDate.replace(/\\s(\\d{4})$/, '\\n$1');\n      break;\n  }\n\n  return formattedDate;\n};\n\n/**\n * Format y axis ticks.\n *\n * @param {object} params\n * @param {Function} params.callback\n * @param {number|string} params.tick\n * @returns {string}\n */\nconst yAxisTickFormat = ({ callback, tick } = {}) => {\n  if (callback) {\n    return callback({ tick });\n  }\n\n  return helpers\n    .numberDisplay(tick)\n    ?.format({\n      average: true,\n      mantissa: 1,\n      trimMantissa: true,\n      lowPrecision: false\n    })\n    ?.toUpperCase();\n};\n\n/**\n * Generate base chart component props.\n *\n * @param {object} params\n * @param {object} params.settings\n * @param {string} params.granularity\n * @returns {object}\n */\nconst generateExtendedChartSettings = ({ settings, granularity } = {}) => ({\n  ...settings,\n  xAxisLabelIncrement: getChartXAxisLabelIncrement(granularity),\n  xAxisTickFormat: ({ item, previousItem, tick }) =>\n    xAxisTickFormat({\n      callback: settings?.xAxisTickFormat,\n      tick,\n      date: item.date,\n      previousDate: previousItem.date,\n      granularity\n    }),\n  yAxisTickFormat: ({ tick }) =>\n    yAxisTickFormat({\n      callback: settings?.yAxisTickFormat,\n      tick\n    })\n});\n\nconst graphCardHelpers = {\n  generateChartSettings,\n  generateExtendedChartSettings,\n  getChartXAxisLabelIncrement,\n  getTooltipDate,\n  xAxisTickFormat,\n  yAxisTickFormat\n};\n\nexport {\n  graphCardHelpers as default,\n  graphCardHelpers,\n  generateChartSettings,\n  generateExtendedChartSettings,\n  getChartXAxisLabelIncrement,\n  getTooltipDate,\n  xAxisTickFormat,\n  yAxisTickFormat\n};\n","import React, { useCallback, useContext } from 'react';\nimport { reduxHelpers } from '../../redux/common';\nimport { storeHooks } from '../../redux/hooks';\nimport { RHSM_API_QUERY_TYPES, rhsmApiTypes } from '../../types/rhsmApiTypes';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Route context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{}, helpers.noop];\n\nconst ProductViewContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated product view context.\n *\n * @returns {React.Context<{}>}\n */\nconst useProductViewContext = () => useContext(ProductViewContext);\n\n/**\n * Return a query object from initial product config and Redux store.\n *\n * @param {string} queryType An identifier used to pull from both config and Redux, they should named the same.\n * @param {object} options\n * @param {string} options.overrideId A custom identifier, used for scenarios like the Guest inventory IDs\n * @param {object} options.useProductViewContext\n * @returns {object}\n */\nconst useProductQueryFactory = (\n  queryType,\n  { overrideId, useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}\n) => {\n  const { [queryType]: initialQuery, productId, viewId } = useAliasProductViewContext();\n  const queryOverride = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[overrideId], undefined);\n  const queryProduct = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[productId], undefined);\n  const queryView = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[viewId], undefined);\n\n  return {\n    ...initialQuery,\n    ...queryOverride,\n    ...queryProduct,\n    ...queryView\n  };\n};\n\n/**\n * Return a base product query\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductQuery = ({ queryType = 'query', options } = {}) => useProductQueryFactory(queryType, options);\n\n/**\n * Return the graph query based off of tally and capacity.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductGraphTallyQuery = ({\n  queryType = 'graphTallyQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_REPORT_CAPACITY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return the inventory query for guests. Use fallback/defaults for guests offset, limit.\n *\n * @param {object} options\n * @param {number} options.defaultLimit\n * @param {number} options.defaultOffset\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryGuestsQuery = ({\n  defaultLimit = 100,\n  defaultOffset = 0,\n  queryType = 'inventoryGuestsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_GUESTS_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      [RHSM_API_QUERY_SET_TYPES.LIMIT]: defaultLimit,\n      [RHSM_API_QUERY_SET_TYPES.OFFSET]: defaultOffset,\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for hosts.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryHostsQuery = ({\n  queryType = 'inventoryHostsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for subscriptions.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventorySubscriptionsQuery = ({\n  queryType = 'inventorySubscriptionsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Get a filtered product configuration context.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductViewContext\n * @returns {object}\n */\nconst useProductContext = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductViewContext: useAliasProductViewContext = useProductViewContext\n} = {}) => {\n  const { [RHSM_API_QUERY_TYPES.UOM]: uomFilter } = useAliasProductQuery();\n  const {\n    initialGraphFilters = [],\n    initialInventoryFilters = [],\n    initialSubscriptionsInventoryFilters = [],\n    productContextFilterUom,\n    ...config\n  } = useAliasProductViewContext();\n\n  const applyUomFilter = useCallback(() => {\n    if (productContextFilterUom === true) {\n      const filterFilters = ({ id, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(uomFilter, 'i').test(id);\n      };\n\n      return {\n        ...config,\n        initialGraphFilters: initialGraphFilters.filter(filterFilters),\n        initialInventoryFilters: initialInventoryFilters.filter(filterFilters),\n        initialSubscriptionsInventoryFilters: initialSubscriptionsInventoryFilters.filter(filterFilters)\n      };\n    }\n\n    return {\n      ...config,\n      initialGraphFilters,\n      initialInventoryFilters,\n      initialSubscriptionsInventoryFilters\n    };\n  }, [\n    config,\n    initialGraphFilters,\n    initialInventoryFilters,\n    initialSubscriptionsInventoryFilters,\n    productContextFilterUom,\n    uomFilter\n  ]);\n\n  return applyUomFilter();\n};\n\n/**\n * Return product identifiers.\n *\n * @param {object} options\n * @param {Function} options.useProductViewContext\n * @returns {{productLabel: string, viewId: string, productId: string, productGroup: string}}\n */\nconst useProduct = ({ useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}) => {\n  const { productGroup, productId, productLabel, viewId } = useAliasProductViewContext();\n  return {\n    productGroup,\n    productId,\n    productLabel,\n    viewId\n  };\n};\n\n/**\n * Return graph configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductGraphConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialGraphFilters, initialGraphSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGraphFilters,\n    settings: initialGraphSettings\n  };\n};\n\n/**\n * Return guests inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryGuestsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { inventoryGuestsQuery = {}, initialGuestsFilters, initialGuestsSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGuestsFilters,\n    initialQuery: inventoryGuestsQuery,\n    settings: initialGuestsSettings\n  };\n};\n\n/**\n * Return hosts inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryHostsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialInventoryFilters, initialInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialInventoryFilters,\n    settings: initialInventorySettings\n  };\n};\n\n/**\n * Return subscriptions inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventorySubscriptionsConfig = ({\n  useProductContext: useAliasProductContext = useProductContext\n} = {}) => {\n  const { initialSubscriptionsInventoryFilters, initialSubscriptionsInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialSubscriptionsInventoryFilters,\n    settings: initialSubscriptionsInventorySettings\n  };\n};\n\n/**\n * Return primary toolbar configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductToolbarConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const {\n    initialToolbarFilters,\n    initialToolbarSettings = {},\n    initialSecondaryToolbarFilters\n  } = useAliasProductContext();\n  return {\n    filters: initialToolbarFilters,\n    secondaryFilters: initialSecondaryToolbarFilters,\n    settings: initialToolbarSettings\n  };\n};\n\nconst context = {\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useQuery: useProductQuery,\n  useQueryFactory: useProductQueryFactory,\n  useGraphTallyQuery: useProductGraphTallyQuery,\n  useInventoryGuestsQuery: useProductInventoryGuestsQuery,\n  useInventoryHostsQuery: useProductInventoryHostsQuery,\n  useInventorySubscriptionsQuery: useProductInventorySubscriptionsQuery,\n  useProduct,\n  useGraphConfig: useProductGraphConfig,\n  useInventoryGuestsConfig: useProductInventoryGuestsConfig,\n  useInventoryHostsConfig: useProductInventoryHostsConfig,\n  useInventorySubscriptionsConfig: useProductInventorySubscriptionsConfig,\n  useToolbarConfig: useProductToolbarConfig\n};\n\nexport {\n  context as default,\n  context,\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useProductQuery,\n  useProductQueryFactory,\n  useProductGraphTallyQuery,\n  useProductInventoryGuestsQuery,\n  useProductInventoryHostsQuery,\n  useProductInventorySubscriptionsQuery,\n  useProduct,\n  useProductGraphConfig,\n  useProductInventoryGuestsConfig,\n  useProductInventoryHostsConfig,\n  useProductInventorySubscriptionsConfig,\n  useProductToolbarConfig\n};\n"],"names":["GraphCardChart","data","filtered","graphData","useAliasProductGraphConfig","useProductGraphConfig","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","filters","query","granularity","RHSM_API_QUERY_TYPES","chartAreaProps","xAxisLabelIncrement","graphCardHelpers","xAxisTickFormat","item","previousItem","tick","date","previousDate","yAxisTickFormat","Chart","key","JSON","stringify","dataSets","tempFiltered","id","strokeWidth","isStacked","test","isThreshold","stroke","chartColorGreenDark","strokeDasharray","length","map","value","Object","assign","keys","chartLegend","chart","datum","chartTooltip","defaultProps","GraphCardChartLegend","t","useAliasDispatch","useDispatch","useAliasSelectors","useSelectors","useAliasProduct","useProduct","productLabel","viewId","dispatch","legendItems","graph","legend","useMount","forEach","index","isToggled","hide","onClick","updatedToggle","toggle","type","reduxTypes","color","isDisabled","find","y","hasData","labelContent","product","context","tooltipContent","style","whiteSpace","checkIsToggled","button","Button","onKeyPress","className","tabIndex","variant","component","icon","ChartIcon","symbol","visibility","fill","Tooltip","content","position","TooltipPosition","enableFlip","distance","helpers","translate","storeHooks","GraphCardChartTooltip","RHSM_API_QUERY_SET_TYPES","header","itemsByKey","reverse","getTooltipDate","tempDataFacet","chartType","thresholdStringValue","hasInfinite","title","label","dataFactsValue","push","summary","colSpan","dataFacet","updatedDataFacetValue","Number","isInteger","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","size","generateChartSettings","standaloneFilters","groupedFilters","isStandalone","settings","baseFilterSettings","getChartXAxisLabelIncrement","GRANULARITY_TYPES","momentDate","moment","dateHelpers","add","callback","formattedDate","isNewYear","parseInt","year","replace","generateExtendedChartSettings","DEFAULT_CONTEXT","ProductViewContext","React","useProductViewContext","useContext","useProductQueryFactory","queryType","overrideId","useAliasProductViewContext","initialQuery","productId","queryOverride","view","undefined","queryProduct","queryView","useProductQuery","options","schemaCheck","rhsmApiTypes","reduxHelpers","useProductInventoryGuestsQuery","defaultLimit","defaultOffset","useProductInventoryHostsQuery","useProductInventorySubscriptionsQuery","useProductContext","useAliasProductQuery","uomFilter","initialGraphFilters","initialInventoryFilters","initialSubscriptionsInventoryFilters","productContextFilterUom","config","applyUomFilter","useCallback","filterFilters","isOptional","RegExp","filter","productGroup","useAliasProductContext","initialGraphSettings","useProductInventoryGuestsConfig","inventoryGuestsQuery","initialGuestsFilters","initialGuestsSettings","useProductInventoryHostsConfig","initialInventorySettings","useProductInventorySubscriptionsConfig","initialSubscriptionsInventorySettings","useProductToolbarConfig","initialToolbarFilters","initialToolbarSettings","initialSecondaryToolbarFilters","secondaryFilters","useQuery","useQueryFactory","useGraphTallyQuery","useInventoryGuestsQuery","useInventoryHostsQuery","useInventorySubscriptionsQuery","useGraphConfig","useInventoryGuestsConfig","useInventoryHostsConfig","useInventorySubscriptionsConfig","useToolbarConfig"],"sourceRoot":""}