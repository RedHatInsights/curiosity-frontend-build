{"version":3,"file":"js/1014.278f0652277a1a0c4292.js","mappings":"6PAeMA,G,SAAmB,SAAC,GAAyE,IAAvEC,EAAuE,EAAvEA,cAAsCC,EAAiC,EAAxDC,sBAAwD,GACnEC,EAAAA,EAAAA,UAAS,IAD0D,eAC1FC,EAD0F,KACjFC,EADiF,KAEzFC,EAAaL,IAAbK,SAaR,OAXAC,EAAAA,EAAAA,YAAU,WACRF,EAAW,CACTC,UAAU,kBACLA,GADG,IAENE,cAAc,EACdC,YAAQC,EACRC,QAASX,QAGZ,CAACA,EAAeM,EAAUD,IAG3B,kBAAC,EAAAO,iBAAA,SAAD,CAA2BC,MAAOT,GAChC,kBAAC,EAAAU,eAAD,SAwBNf,EAAiBgB,aAAe,CAC9Bf,cAAe,GACfE,sBAAAA,EAAAA","sources":["webpack:///./src/components/graphCard/graphCardMetrics.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { GraphCardChart } from './graphCardChart';\nimport { useProductGraphConfig } from '../productView/productViewContext';\nimport { GraphCardContext } from './graphCardContext';\nimport { rhsmConstants } from '../../services/rhsm/rhsmConstants';\n\n/**\n * Display a single graph metric.\n *\n * @param {object} props\n * @param {Array} props.metricFilters\n * @param {Function} props.useProductGraphConfig\n * @returns {Node}\n */\nconst GraphCardMetrics = ({ metricFilters, useProductGraphConfig: useAliasProductGraphConfig }) => {\n  const [context, setContext] = useState({});\n  const { settings } = useAliasProductGraphConfig();\n\n  useEffect(() => {\n    setContext({\n      settings: {\n        ...settings,\n        isStandalone: false,\n        metric: undefined,\n        metrics: metricFilters\n      }\n    });\n  }, [metricFilters, settings, setContext]);\n\n  return (\n    <GraphCardContext.Provider value={context}>\n      <GraphCardChart />\n    </GraphCardContext.Provider>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphConfig: Function, metricFilters: Array}}\n */\nGraphCardMetrics.propTypes = {\n  metricFilters: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.oneOf([...Object.values(rhsmConstants.RHSM_API_PATH_METRIC_TYPES)])\n    })\n  ),\n  useProductGraphConfig: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphConfig: Function, metricFilters: Array}}\n */\nGraphCardMetrics.defaultProps = {\n  metricFilters: [],\n  useProductGraphConfig\n};\n\nexport { GraphCardMetrics as default, GraphCardMetrics };\n"],"names":["GraphCardMetrics","metricFilters","useAliasProductGraphConfig","useProductGraphConfig","useState","context","setContext","settings","useEffect","isStandalone","metric","undefined","metrics","GraphCardContext","value","GraphCardChart","defaultProps"],"sourceRoot":""}