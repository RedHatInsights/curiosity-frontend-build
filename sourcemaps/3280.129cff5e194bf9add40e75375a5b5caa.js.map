{"version":3,"file":"js/3280.1666622753178.17aeaa5a486ebac97d69.js","mappings":"0eAiBMA,EAAyB,WAGpB,+DAAP,CAAC,EAAM,IAFTC,gBAAiBC,OAER,MAF+BD,EAAAA,gBAE/B,MADTE,0BAA2BC,OAClB,MADmDD,EAAAA,0BACnD,EACT,EAKID,IAJuCG,EAD3C,EACGC,EAAAA,GAAAA,kBAC2BC,EAF9B,EAEGD,EAAAA,GAAAA,KAC2BE,EAH9B,EAGGF,EAAAA,GAAAA,KAC6BG,EAJhC,EAIGH,EAAAA,GAAAA,OAEH,EAA4DF,IAAhBM,EAA5C,EAASJ,EAAAA,GAAAA,aAET,OAAO,EAAP,aACGA,EAAAA,GAAAA,iBAAwCD,IAD3C,SAEGC,EAAAA,GAAAA,YAAmCI,IAFtC,SAGGJ,EAAAA,GAAAA,IAA2BC,IAH9B,SAIGD,EAAAA,GAAAA,IAA2BE,IAJ9B,SAKGF,EAAAA,GAAAA,MAA6BG,GALhC,CAOD,EAWKE,EAAuB,WAIlB,6DAAP,CAAC,EAAM,IAHTC,2BAA4BC,OAGnB,MAHqDD,EAAAA,YAGrD,MAFTE,eAAgBC,OAEP,MAF6BD,EAAAA,YAE7B,MADTE,iBAAkBC,OACT,MADiCD,EAAAA,YACjC,EACHE,EAAkBL,IAClBM,EAAcJ,IACdK,EAAgBH,IAEtB,OAAO,SAAAI,GACL,OAAQA,GACN,KAAKf,EAAAA,GAAAA,iBACHY,IACA,MACF,KAAKZ,EAAAA,GAAAA,IACHa,IACA,MACF,KAAKb,EAAAA,GAAAA,MACHc,IAKL,CACF,EAaKE,EAA0B,WAMrB,6DAAP,CAAC,EAAM,IALTrB,gBAAiBC,OAKR,MAL+BD,EAAAA,gBAK/B,MAJTsB,0BAA2BC,OAIlB,MAJmDD,EAAAA,YAInD,MAHTX,2BAA4BC,OAGnB,MAHqDD,EAAAA,YAGrD,MAFTE,eAAgBC,OAEP,MAF6BD,EAAAA,YAE7B,MADTE,iBAAkBC,OACT,MADiCD,EAAAA,YACjC,EACT,EAIId,IAHuCG,EAD3C,EACGC,EAAAA,GAAAA,kBAC2BC,EAF9B,EAEGD,EAAAA,GAAAA,KAC6BG,EAHhC,EAGGH,EAAAA,GAAAA,OAEGY,EAAkBL,IAClBM,EAAcJ,IACdK,EAAgBH,IAChBQ,EAAyBD,IAE/B,OAAO,SAAAE,GAC0B,iBAApBrB,GACTa,IAGiB,iBAARX,GACTY,IAGmB,iBAAVV,GACTW,IAGEM,GACFD,GAEH,CACF,EAUKE,EAA4B,WAGvB,6DAAP,CAAC,EAAM,IAFTC,gBAAAA,OAES,MAFSC,EAAAA,oBAET,MADTC,wBAAyBC,OAChB,MAD+CD,EAAAA,wBAC/C,EACT,EAAkCC,IAAlC,IAAQC,iBAAAA,OAAR,MAA2B,GAA3B,EAEA,OAAOA,EAAiBC,KAAI,YAAY,IAATC,EAAS,EAATA,GACVC,EAAoBP,EAAgBQ,MACrD,gBAAUC,EAAV,EAAGC,MAAH,OAAoCJ,IAAOG,CAA3C,IADME,UAIR,OAAO,kBAACJ,EAAD,CAAiBK,IAAG,iBAAYN,GAAMO,UAAU,EAAOC,SAAUC,EAAAA,eAAAA,OACzE,GACF,EAEKC,EAAU,CACdjC,qBAAAA,EACAW,wBAAAA,EACAtB,uBAAAA,EACA2B,0BAAAA,E","sources":["webpack:///./src/components/toolbar/toolbarContext.js"],"sourcesContent":["import React from 'react';\nimport { useProductQuery, useProductGraphTallyQuery, useProductToolbarConfig } from '../productView/productViewContext';\nimport { RHSM_API_QUERY_SET_TYPES as RHSM_API_QUERY_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { useOnSelect as useSelectCategoryOnSelect, toolbarFieldOptions } from './toolbarFieldSelectCategory';\nimport { useOnSelect as useBillingProviderOnSelect } from './toolbarFieldBillingProvider';\nimport { useOnSelect as useSlaOnSelect } from './toolbarFieldSla';\nimport { useOnSelect as useUsageOnSelect } from './toolbarFieldUsage';\nimport { SelectPosition } from '../form/select';\n\n/**\n * Return current values for categories/queries.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductGraphTallyQuery\n * @returns {object}\n */\nconst useToolbarFieldQueries = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery\n} = {}) => {\n  const {\n    [RHSM_API_QUERY_TYPES.BILLING_PROVIDER]: billingProvider,\n    [RHSM_API_QUERY_TYPES.SLA]: sla,\n    [RHSM_API_QUERY_TYPES.UOM]: uom,\n    [RHSM_API_QUERY_TYPES.USAGE]: usage\n  } = useAliasProductQuery();\n  const { [RHSM_API_QUERY_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n\n  return {\n    [RHSM_API_QUERY_TYPES.BILLING_PROVIDER]: billingProvider,\n    [RHSM_API_QUERY_TYPES.GRANULARITY]: granularity,\n    [RHSM_API_QUERY_TYPES.SLA]: sla,\n    [RHSM_API_QUERY_TYPES.UOM]: uom,\n    [RHSM_API_QUERY_TYPES.USAGE]: usage\n  };\n};\n\n/**\n * Clear a specific toolbar category.\n *\n * @param {object} options\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClear = ({\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect\n} = {}) => {\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n\n  return field => {\n    switch (field) {\n      case RHSM_API_QUERY_TYPES.BILLING_PROVIDER:\n        billingOnSelect();\n        break;\n      case RHSM_API_QUERY_TYPES.SLA:\n        slaOnSelect();\n        break;\n      case RHSM_API_QUERY_TYPES.USAGE:\n        usageOnSelect();\n        break;\n      default:\n        break;\n    }\n  };\n};\n\n/**\n * Clear all available toolbar categories.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useSelectCategoryOnSelect\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClearAll = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useSelectCategoryOnSelect: useAliasSelectCategoryOnSelect = useSelectCategoryOnSelect,\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect\n} = {}) => {\n  const {\n    [RHSM_API_QUERY_TYPES.BILLING_PROVIDER]: billingProvider,\n    [RHSM_API_QUERY_TYPES.SLA]: sla,\n    [RHSM_API_QUERY_TYPES.USAGE]: usage\n  } = useAliasProductQuery();\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n  const selectCategoryOnSelect = useAliasSelectCategoryOnSelect();\n\n  return hardFilterReset => {\n    if (typeof billingProvider === 'string') {\n      billingOnSelect();\n    }\n\n    if (typeof sla === 'string') {\n      slaOnSelect();\n    }\n\n    if (typeof usage === 'string') {\n      usageOnSelect();\n    }\n\n    if (hardFilterReset) {\n      selectCategoryOnSelect();\n    }\n  };\n};\n\n/**\n * Return list of secondary toolbar fields for display.\n *\n * @param {object} options\n * @param {Array} options.categoryOptions\n * @param {Function} options.useProductToolbarConfig\n * @returns {Array}\n */\nconst useToolbarSecondaryFields = ({\n  categoryOptions = toolbarFieldOptions,\n  useProductToolbarConfig: useAliasProductToolbarConfig = useProductToolbarConfig\n} = {}) => {\n  const { secondaryFilters = [] } = useAliasProductToolbarConfig();\n\n  return secondaryFilters.map(({ id }) => {\n    const { component: OptionComponent } = categoryOptions.find(\n      ({ value: categoryOptionValue }) => id === categoryOptionValue\n    );\n\n    return <OptionComponent key={`option-${id}`} isFilter={false} position={SelectPosition.right} />;\n  });\n};\n\nconst context = {\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFieldQueries,\n  useToolbarSecondaryFields\n};\n\nexport {\n  context as default,\n  context,\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFieldQueries,\n  useToolbarSecondaryFields\n};\n"],"names":["useToolbarFieldQueries","useProductQuery","useAliasProductQuery","useProductGraphTallyQuery","useAliasProductGraphTallyQuery","billingProvider","RHSM_API_QUERY_TYPES","sla","uom","usage","granularity","useToolbarFieldClear","useBillingProviderOnSelect","useAliasBillingProviderOnSelect","useSlaOnSelect","useAliasSlaOnSelect","useUsageOnSelect","useAliasUsageOnSelect","billingOnSelect","slaOnSelect","usageOnSelect","field","useToolbarFieldClearAll","useSelectCategoryOnSelect","useAliasSelectCategoryOnSelect","selectCategoryOnSelect","hardFilterReset","useToolbarSecondaryFields","categoryOptions","toolbarFieldOptions","useProductToolbarConfig","useAliasProductToolbarConfig","secondaryFilters","map","id","OptionComponent","find","categoryOptionValue","value","component","key","isFilter","position","SelectPosition","context"],"sourceRoot":""}