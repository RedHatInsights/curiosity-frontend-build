{"version":3,"file":"js/5394.8758599843bfeaf74b08.js","mappings":"mVAUMA,EAAkB,CAAC,CAAEC,SAAU,CAAEC,cAAc,EAAOC,QAAS,GAAIC,YAAQC,I,SAAeC,EAAAA,MAE1FC,EAAmBC,IAAAA,cAAoBR,GAOvCS,EAAsB,kBAAMC,EAAAA,EAAAA,YAAWH,IAUvCI,EAAmB,WAGd,6DAAP,GAAO,IAFTC,YAAaC,OAEJ,MAFuBC,EAAAA,GAAAA,WAAAA,YAEvB,MADTC,0BAA2BC,OAClB,MADmDD,EAAAA,0BACnD,EACHE,EAAQD,IACRE,EAAWL,IAEjB,OAAO,SAAAV,GAAO,OAAIgB,EAAAA,GAAAA,KAAAA,cAAgChB,EAASc,EAAzCE,CAAgDD,KAY9DE,EAAqB,WAIhB,6DAAP,GAAO,IAHTX,oBAAqBY,OAGZ,MAHuCZ,EAGvC,MAFTa,aAAcC,OAEL,MAFyBT,EAAAA,GAAAA,WAAAA,aAEzB,MADTU,WAAYC,OACH,MADqBD,EAAAA,WACrB,IACaC,IAAdC,EADC,EACDA,UADC,EAEiBL,IAFjB,IAEDpB,SAAAA,OAFC,MAEU,GAFV,IAGgBA,EAAjBE,QAAAA,OAHC,MAGS,GAHT,EAIHwB,EAAO,GAEPC,EAAkBL,EACtBpB,EAAQ0B,KAAI,gBAAOC,EAAP,EAAGC,GAAH,OAAsB,qCAAGC,MAAkBC,aAArB,aAAe,YAAiBP,EAAjB,YAA8BI,QAC/E,IAGEI,GAAY,EACZC,GAAc,EACdC,EAAa,EAEXC,EAAWT,EAAgBC,KAAI,SAACzB,EAAQkC,GAAU,UACLlC,GAAU,GAAnDmC,EAD8C,EAC9CA,QAASC,EADqC,EACrCA,UAAWC,EAD0B,EAC1BA,MAAOC,EADmB,EACnBA,aACZH,IAAWG,KAGhCR,GAAY,GAGVM,IACFL,GAAc,GAGZM,IACFL,GAAc,GAGhB,IAAMO,GAAgB,kBACjBxC,EAAQmC,IADM,IAEjBX,MAAMvB,MAAAA,GAAA,UAAAA,EAAQuB,YAAR,eAAcA,OAAQ,GAC5BiB,MAAMxC,MAAAA,GAAA,UAAAA,EAAQuB,YAAR,eAAciB,OAAQ,KAI9B,OAFAjB,EAAKxB,EAAQmC,GAAOP,IAAMY,EAEnBA,KAGHE,EAAW,CACflB,KAAAA,EACAU,SAAAA,EACAI,OAAO,EACPD,WAAW,EACXD,SAAS,GAWX,OARIH,IAAeC,EAASS,OAC1BD,EAASJ,OAAQ,EACRP,EACTW,EAASN,SAAU,EACVJ,IACTU,EAASL,WAAY,GAGhBK,GAGHE,EAAU,CACdxC,iBAAAA,EACAP,gBAAAA,EACAW,iBAAAA,EACAF,oBAAAA,EACAW,mBAAAA","sources":["webpack:///./src/components/graphCard/graphCardContext.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Chart context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{ settings: { isStandalone: false, metrics: [], metric: undefined } }, helpers.noop];\n\nconst GraphCardContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated graph card context.\n *\n * @returns {React.Context<{}>}\n */\nconst useGraphCardContext = () => useContext(GraphCardContext);\n\n/**\n * Use Redux RHSM Actions, getGraphTally.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProductGraphTallyQuery\n * @returns {Function}\n */\nconst useGetGraphTally = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery\n} = {}) => {\n  const query = useAliasProductGraphTallyQuery();\n  const dispatch = useAliasDispatch();\n\n  return metrics => reduxActions.rhsm.getGraphTally(metrics, query)(dispatch);\n};\n\n/**\n * Get multiple metrics from store.\n *\n * @param {object} options\n * @param {Function} options.useGraphCardContext\n * @param {Function} options.useSelectors\n * @param {Function} options.useProduct\n * @returns {{data: object, pending: boolean, fulfilled: boolean, dataSets: Array, error: boolean}}\n */\nconst useMetricsSelector = ({\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useSelectors: useAliasSelectors = storeHooks.reactRedux.useSelectors,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n  const data = {};\n\n  const metricResponses = useAliasSelectors(\n    metrics.map(({ id: metricId }) => ({ graph }) => graph.tally?.[`${productId}_${metricId}`]),\n    []\n  );\n\n  let isPending = false;\n  let isFulfilled = false;\n  let errorCount = 0;\n\n  const dataSets = metricResponses.map((metric, index) => {\n    const { pending, fulfilled, error, cancelled } = metric || {};\n    const updatedPending = pending || cancelled || false;\n\n    if (updatedPending) {\n      isPending = true;\n    }\n\n    if (fulfilled) {\n      isFulfilled = true;\n    }\n\n    if (error) {\n      errorCount += 1;\n    }\n\n    const updatedMetric = {\n      ...metrics[index],\n      data: metric?.data?.data || [],\n      meta: metric?.data?.meta || {}\n    };\n    data[metrics[index].id] = updatedMetric;\n\n    return updatedMetric;\n  });\n\n  const response = {\n    data,\n    dataSets,\n    error: false,\n    fulfilled: false,\n    pending: false\n  };\n\n  if (errorCount === dataSets.length) {\n    response.error = true;\n  } else if (isPending) {\n    response.pending = true;\n  } else if (isFulfilled) {\n    response.fulfilled = true;\n  }\n\n  return response;\n};\n\nconst context = {\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetGraphTally,\n  useGraphCardContext,\n  useMetricsSelector\n};\n\nexport {\n  context as default,\n  context,\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetGraphTally,\n  useGraphCardContext,\n  useMetricsSelector\n};\n"],"names":["DEFAULT_CONTEXT","settings","isStandalone","metrics","metric","undefined","helpers","GraphCardContext","React","useGraphCardContext","useContext","useGetGraphTally","useDispatch","useAliasDispatch","storeHooks","useProductGraphTallyQuery","useAliasProductGraphTallyQuery","query","dispatch","reduxActions","useMetricsSelector","useAliasGraphCardContext","useSelectors","useAliasSelectors","useProduct","useAliasProduct","productId","data","metricResponses","map","metricId","id","graph","tally","isPending","isFulfilled","errorCount","dataSets","index","pending","fulfilled","error","cancelled","updatedMetric","meta","response","length","context"],"sourceRoot":""}