{"version":3,"file":"js/9407.1678226299833.b9bdca48d2ab9853f2da.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardContext.js","webpack:///./src/components/graphCard/graphCardMetricTotals.js"],"sourcesContent":["import React, { useContext, useMemo } from 'react';\nimport { useShallowCompareEffect } from 'react-use';\nimport { ToolbarItem } from '@patternfly/react-core';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphConfig, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldSelectCategory';\nimport { helpers } from '../../common/helpers';\nimport { graphCardHelpers } from './graphCardHelpers';\n\n/**\n * @memberof GraphCard\n * @module GraphCardContext\n */\n\n/**\n * Chart context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{ settings: { metrics: [] } }, helpers.noop];\n\nconst GraphCardContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated graph card context.\n *\n * @returns {React.Context<{}>}\n */\nconst useGraphCardContext = () => useContext(GraphCardContext);\n\n/**\n * Parse filters settings for context.\n *\n * @param {object} options\n * @param {Function} options.useProduct\n * @param {Function} options.useProductGraphConfig\n * @returns {{standaloneFiltersSettings: Array<{ settings: object }>, groupedFiltersSettings: { settings: object }}}\n */\nconst useParseFiltersSettings = ({\n  useProduct: useAliasProduct = useProduct,\n  useProductGraphConfig: useAliasProductGraphConfig = useProductGraphConfig\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const { filters = [], settings = {} } = useAliasProductGraphConfig();\n\n  return useMemo(\n    () =>\n      graphCardHelpers.generateChartSettings({\n        filters,\n        settings,\n        productId\n      }),\n    [filters, settings, productId]\n  );\n};\n\n/**\n * Transform multiple metrics from store for chart/graph consumption.\n *\n * @param {object} options\n * @param {Function} options.useGraphCardContext\n * @param {Function} options.useSelectorsResponse\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: Array, errorId: {},\n *     id: {}, list: Array}, cancelled: boolean, dataSets: Array, message: null, error: boolean}}\n */\nconst useMetricsSelector = ({\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  const {\n    error,\n    fulfilled,\n    pending,\n    data = [],\n    ...response\n  } = useAliasSelectorsResponse(\n    metrics.map(\n      ({ id: metricId, isCapacity }) =>\n        ({ graph }) =>\n          isCapacity ? graph.capacity?.[metricId] : graph.tally?.[metricId]\n    )\n  );\n\n  /**\n   * Apply graph config settings to metric data.\n   */\n  const dataById = {};\n  const dataByList = data?.map((metricData, index) => {\n    const updatedMetricData = {\n      ...metrics[index],\n      ...metricData\n    };\n    dataById[metrics[index].id] = updatedMetricData;\n    return updatedMetricData;\n  });\n\n  return {\n    ...response,\n    data: dataById,\n    dataSets: dataByList,\n    error,\n    fulfilled,\n    pending\n  };\n};\n\n/**\n * Get graph metrics from Tally or Capacity.\n *\n * @param {object} params\n * @param {Function} params.getGraphMetrics\n * @param {Function} params.useDispatch\n * @param {Function} params.useGraphCardContext\n * @param {Function} params.useMetricsSelector\n * @param {Function} params.useProduct\n * @param {Function} params.useProductGraphTallyQuery\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: Array, errorId: {},\n *     id: {}, list: Array}, cancelled: boolean, dataSets: Array, message: null, error: boolean}}\n */\nconst useGetMetrics = ({\n  getGraphMetrics = reduxActions.rhsm.getGraphMetrics,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector = useMetricsSelector,\n  useProduct: useAliasProduct = useProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductGraphTallyQuery();\n  const dispatch = useAliasDispatch();\n  const response = useAliasMetricsSelector();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  useShallowCompareEffect(() => {\n    const updatedMetrics = metrics.map(({ metric: metricId, isCapacity, query: metricQuery }) => ({\n      id: productId,\n      metric: metricId,\n      isCapacity,\n      query: metricQuery\n    }));\n    getGraphMetrics(updatedMetrics, query)(dispatch);\n  }, [metrics, productId, query]);\n\n  return response;\n};\n\n/**\n * FixMe: the pending condition for \"content\" will block subsequent responses from this hook, this is expected.\n * This current limitation means if we decide to apply the same action to multiple cards the \"content\" will\n * not display for all of them.\n */\n/**\n * Return a component list for a configurable graphCard action toolbar.\n * Allow the \"content\" prop to receive graph data for display via callback.\n *\n * @param {object} params\n * @param {Array} params.categoryOptions\n * @param {Function} params.useMetricsSelector\n * @param {Function} params.useGraphCardContext\n * @returns {Array}\n */\nconst useGraphCardActions = ({\n  categoryOptions = toolbarFieldOptions,\n  useMetricsSelector: useAliasMetricsSelector = useMetricsSelector,\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext\n} = {}) => {\n  const { pending, dataSets } = useAliasMetricsSelector();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { actions } = settings;\n\n  return useMemo(\n    () =>\n      actions?.map(({ id, content, ...actionProps }) => {\n        const option = categoryOptions.find(({ value: categoryOptionValue }) => id === categoryOptionValue);\n        const { component: OptionComponent } = option || {};\n\n        return (\n          (OptionComponent && (\n            <ToolbarItem key={`option-${id}`}>\n              <OptionComponent isFilter={false} {...actionProps} />\n            </ToolbarItem>\n          )) ||\n          (content && !pending && dataSets.length && (\n            <ToolbarItem key={id || helpers.generateId()}>\n              {typeof content === 'function' ? content({ data: dataSets }) : content}\n            </ToolbarItem>\n          )) ||\n          null\n        );\n      }),\n    [actions, categoryOptions, dataSets, pending]\n  );\n};\n\nconst context = {\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardActions,\n  useGraphCardContext,\n  useMetricsSelector,\n  useParseFiltersSettings\n};\n\nexport {\n  context as default,\n  context,\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardActions,\n  useGraphCardContext,\n  useMetricsSelector,\n  useParseFiltersSettings\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter, CardHeader, CardTitle, Title } from '@patternfly/react-core';\nimport moment from 'moment';\nimport _camelCase from 'lodash/camelCase';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useMetricsSelector } from './graphCardContext';\nimport { Loader, SkeletonSize } from '../loader/loader';\nimport { dateHelpers, helpers } from '../../common';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldRangedMonthly';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * @memberof GraphCard\n * @module GraphCardMetricTotals\n */\n\n/**\n * Display totals for a single metric.\n *\n * @param {object} props\n * @param {React.ReactNode} props.children\n * @param {Function} props.t\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {React.ReactNode}\n */\nconst GraphCardMetricTotals = ({\n  children,\n  t,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate } = useAliasProductGraphTallyQuery();\n  const { pending, error, fulfilled, dataSets = [] } = useAliasMetricsSelector();\n  const { data = [], id: chartId, metric: metricId, meta = {} } = dataSets[0] || {};\n  const { date: lastDate, hasData: lastHasData, y: lastValue } = data[data.length - 1] || {};\n\n  const {\n    date: currentDate,\n    hasData: currentHasData,\n    y: currentValue\n  } = data.find(({ isCurrentDate }) => isCurrentDate === true) || {};\n\n  const { totalMonthlyDate: monthlyDate, totalMonthlyHasData: monthlyHasData, totalMonthlyValue: monthlyValue } = meta;\n\n  const { title: selectedMonth, isCurrent } =\n    toolbarFieldOptions.find(\n      option => option.title === startDate || option.value.startDate.toISOString() === startDate\n    ) || {};\n\n  const dailyDate = isCurrent ? currentDate : lastDate;\n  const dailyHasData = isCurrent ? currentHasData : lastHasData;\n  const dailyValue = isCurrent ? currentValue : lastValue;\n\n  return (\n    <div data-test={`graphMetricTotals-${_camelCase(metricId)}`} className=\"curiosity-usage-graph__totals\">\n      <div>\n        <div className=\"curiosity-usage-graph__totals-column\">\n          <Card\n            isPlain\n            data-test=\"graphDailyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardHeader>\n              <CardTitle>\n                <Title headingLevel=\"h2\" size=\"md\">\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t('curiosity-graph.cardHeadingMetric', {\n                      context: ['dailyTotal', chartId],\n                      month: selectedMonth\n                    })}\n                </Title>\n              </CardTitle>\n            </CardHeader>\n            <CardBody>\n              <div>\n                {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg, height: '60px' }} />}\n                {fulfilled &&\n                  t(\n                    'curiosity-graph.cardBodyMetric',\n                    {\n                      context: ['total', dailyHasData && chartId],\n                      total: helpers\n                        .numberDisplay(dailyValue)\n                        ?.format({\n                          average: true,\n                          mantissa: 5,\n                          trimMantissa: true,\n                          lowPrecision: false\n                        })\n                        ?.toUpperCase()\n                    },\n                    [<strong title={dailyValue} aria-label={dailyValue} />]\n                  )}\n              </div>\n            </CardBody>\n            <CardFooter>\n              <div>\n                {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                {fulfilled &&\n                  dailyDate &&\n                  t('curiosity-graph.cardFooterMetric', {\n                    date: moment.utc(dailyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                  })}\n              </div>\n            </CardFooter>\n          </Card>\n          <Card\n            isPlain\n            data-test=\"graphMonthlyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardHeader>\n              <CardTitle>\n                <Title headingLevel=\"h2\" size=\"md\">\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t('curiosity-graph.cardHeadingMetric', {\n                      context: ['monthlyTotal', chartId],\n                      month: selectedMonth\n                    })}\n                </Title>\n              </CardTitle>\n            </CardHeader>\n            <CardBody>\n              <div>\n                {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg, height: '60px' }} />}\n                {fulfilled &&\n                  t(\n                    'curiosity-graph.cardBodyMetric',\n                    {\n                      context: ['total', monthlyHasData && chartId],\n                      total: helpers\n                        .numberDisplay(monthlyValue)\n                        ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: false })\n                        ?.toUpperCase()\n                    },\n                    [<strong title={monthlyValue} aria-label={monthlyValue} />]\n                  )}\n              </div>\n            </CardBody>\n            <CardFooter>\n              <div>\n                {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                {fulfilled &&\n                  monthlyDate &&\n                  t('curiosity-graph.cardFooterMetric', {\n                    date: moment.utc(monthlyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                  })}\n              </div>\n            </CardFooter>\n          </Card>\n        </div>\n      </div>\n      <div>\n        <div className=\"curiosity-usage-graph__totals-graph-column\">{children}</div>\n      </div>\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: React.ReactNode, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.propTypes = {\n  children: PropTypes.node,\n  t: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: React.ReactNode, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.defaultProps = {\n  children: null,\n  t: translate,\n  useMetricsSelector,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardMetricTotals as default, GraphCardMetricTotals };\n"],"names":["DEFAULT_CONTEXT","settings","metrics","helpers","GraphCardContext","React","useGraphCardContext","useContext","useParseFiltersSettings","_ref","arguments","length","undefined","_ref$useProduct","useProduct","useAliasProduct","_ref$useProductGraphC","useProductGraphConfig","useAliasProductGraphConfig","_useAliasProduct","productId","_useAliasProductGraph","_useAliasProductGraph2","filters","_useAliasProductGraph3","useMemo","graphCardHelpers","useMetricsSelector","_ref2","_ref2$useGraphCardCon","useAliasGraphCardContext","_ref2$useSelectorsRes","useSelectorsResponse","useAliasSelectorsResponse","storeHooks","_useAliasGraphCardCon","_useAliasGraphCardCon2","_settings$metrics","_useAliasSelectorsRes","map","_ref3","metricId","id","isCapacity","_ref4","_graph$capacity","_graph$tally","graph","capacity","tally","error","fulfilled","pending","_useAliasSelectorsRes2","data","response","_objectWithoutProperties","_excluded","dataById","dataByList","metricData","index","updatedMetricData","_objectSpread","dataSets","useGetMetrics","_ref5","_ref5$getGraphMetrics","getGraphMetrics","reduxActions","_ref5$useDispatch","useDispatch","useAliasDispatch","_ref5$useGraphCardCon","_ref5$useMetricsSelec","useAliasMetricsSelector","_ref5$useProduct","_ref5$useProductGraph","useProductGraphTallyQuery","useAliasProductGraphTallyQuery","_useAliasProduct2","query","dispatch","_useAliasGraphCardCon3","_useAliasGraphCardCon4","_settings$metrics2","useShallowCompareEffect","updatedMetrics","_ref6","metric","metricQuery","useGraphCardActions","_ref7","_ref7$categoryOptions","categoryOptions","toolbarFieldOptions","_ref7$useMetricsSelec","_ref7$useGraphCardCon","_useAliasMetricsSelec","_useAliasGraphCardCon5","_useAliasGraphCardCon6","actions","_ref8","content","actionProps","_excluded2","OptionComponent","find","_ref9","categoryOptionValue","value","component","ToolbarItem","key","concat","Object","assign","isFilter","context","GraphCardMetricTotals","_helpers$numberDispla","_helpers$numberDispla2","_helpers$numberDispla3","_helpers$numberDispla4","children","t","startDate","RHSM_API_QUERY_SET_TYPES","_useAliasMetricsSelec2","_ref2$data","chartId","_ref2$meta","meta","lastDate","date","lastHasData","hasData","lastValue","y","isCurrentDate","currentDate","currentHasData","currentValue","monthlyDate","totalMonthlyDate","monthlyHasData","totalMonthlyHasData","monthlyValue","totalMonthlyValue","option","title","toISOString","selectedMonth","isCurrent","dailyDate","dailyHasData","dailyValue","_camelCase","className","Card","isPlain","CardHeader","CardTitle","Title","headingLevel","size","Loader","variant","skeletonProps","SkeletonSize","month","CardBody","height","total","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","CardFooter","moment","dateHelpers","defaultProps","translate"],"sourceRoot":""}