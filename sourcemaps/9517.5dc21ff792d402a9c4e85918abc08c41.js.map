{"version":3,"file":"js/9517.e65f1bcefaa7130a7e2a.js","mappings":"4SA0BMA,EAA0B,SAAC,GAK3B,IAJJC,EAII,EAJJA,EACaC,EAGT,EAHJC,YACYC,EAER,EAFJC,WAC+BC,EAC3B,EADJC,8BAEQC,EAAWJ,IAAXI,OACqCC,EAAiBH,IAArDI,EAAAA,GAAAA,cACHC,EAAWT,IASXU,EAAW,SAAAC,GAAW,OAC1BF,EAAS,CACP,CACEG,KAAMC,EAAAA,GAAAA,MAAAA,+BACNP,OAAAA,IAHK,QAMLM,KAAMC,EAAAA,GAAAA,MAAAA,qCAAsDL,EAAAA,GAAAA,cAC5DF,OAAAA,GACCE,EAAAA,GAAAA,cAAoCG,MAAAA,OAAA,EAAAA,EAAaG,SAAU,SA+B5DC,EAAYC,GAAAA,CAAUN,EAAU,KAqBtC,OACE,kBAAC,EAAAO,WAAD,KACE,kBAAC,EAAAC,UAAD,CACE,aAAYnB,EAAE,uCAAwC,CAAEoB,QAAS,gBACjEC,UAAU,gCACVC,YAAY,SACZC,UAAW,IACXC,QAjDU,WACO,KAAjBhB,GAAwBA,GAI5BE,EAAS,CACP,CACEG,KAAMC,EAAAA,GAAAA,MAAAA,+BACNP,OAAAA,IAHK,QAMLM,KAAMC,EAAAA,GAAAA,MAAAA,qCAAsDL,EAAAA,GAAAA,cAC5DF,OAAAA,GACCE,EAAAA,GAAAA,aAAoC,SAqCrCgB,QArBU,SAAAC,GACd,OAAQA,EAAMC,SACZ,KAAK,GACHhB,EAASe,EAAME,OACf,MACF,KAAK,GACH,MACF,QACEZ,EAAUU,EAAME,SAchBA,MAAOpB,EACPqB,YAAa7B,EAAE,uCAAwC,CAAEoB,QAAS,gBAClE,YAAU,8BAuBlBrB,EAAwB+B,aAAe,CACrC9B,EAAG+B,EAAAA,UACH7B,YAAa8B,EAAAA,GAAAA,WAAAA,YACb5B,WAAAA,EAAAA,WACAE,8BAAAA,EAAAA","sources":["webpack:///./src/components/toolbar/toolbarFieldDisplayName.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { InputGroup } from '@patternfly/react-core';\nimport _debounce from 'lodash/debounce';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductInventoryHostsQuery } from '../productView/productViewContext';\nimport { TextInput } from '../form/textInput';\nimport { RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * ToDo: evaluate the debounce milliseconds, currently based off platforms default 800 ms\n */\n/**\n * Display a display name input field for search.\n *\n * @fires onSubmit\n * @fires onClear\n * @fires onKeyUp\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useDispatch\n * @param {Function} props.useProduct\n * @param {Function} props.useProductInventoryHostsQuery\n * @returns {Node}\n */\nconst ToolbarFieldDisplayName = ({\n  t,\n  useDispatch: useAliasDispatch,\n  useProduct: useAliasProduct,\n  useProductInventoryHostsQuery: useAliasProductInventoryHostsQuery\n}) => {\n  const { viewId } = useAliasProduct();\n  const { [RHSM_API_QUERY_TYPES.DISPLAY_NAME]: currentValue } = useAliasProductInventoryHostsQuery();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On submit, dispatch type.\n   *\n   * @event onSubmit\n   * @param {string} submitValue\n   * @returns {void}\n   */\n  const onSubmit = submitValue =>\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.DISPLAY_NAME],\n        viewId,\n        [RHSM_API_QUERY_TYPES.DISPLAY_NAME]: submitValue?.trim() || null\n      }\n    ]);\n\n  /**\n   * On clear, dispatch type.\n   *\n   * @event onClear\n   * @returns {void}\n   */\n  const onClear = () => {\n    if (currentValue === '' || !currentValue) {\n      return;\n    }\n\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.DISPLAY_NAME],\n        viewId,\n        [RHSM_API_QUERY_TYPES.DISPLAY_NAME]: null\n      }\n    ]);\n  };\n\n  /**\n   * Set up submit debounce event to allow for bypass.\n   */\n  const debounced = _debounce(onSubmit, 700);\n\n  /**\n   * On enter submit value, on type submit value, and on esc ignore (clear value at component level).\n   *\n   * @event onKeyUp\n   * @param {object} event\n   */\n  const onKeyUp = event => {\n    switch (event.keyCode) {\n      case 13:\n        onSubmit(event.value);\n        break;\n      case 27:\n        break;\n      default:\n        debounced(event.value);\n        break;\n    }\n  };\n\n  return (\n    <InputGroup>\n      <TextInput\n        aria-label={t('curiosity-toolbar.placeholder_filter', { context: 'displayName' })}\n        className=\"curiosity-input__display-name\"\n        iconVariant=\"search\"\n        maxLength={255}\n        onClear={onClear}\n        onKeyUp={onKeyUp}\n        value={currentValue}\n        placeholder={t('curiosity-toolbar.placeholder_filter', { context: 'displayName' })}\n        data-test=\"toolbarFieldDisplayName\"\n      />\n    </InputGroup>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProduct: Function, t: translate, useDispatch: Function, useProductInventoryHostsQuery: Function}}\n */\nToolbarFieldDisplayName.propTypes = {\n  t: PropTypes.func,\n  useDispatch: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductInventoryHostsQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProduct: Function, t: translate, useDispatch: Function, useProductInventoryHostsQuery: Function}}\n */\nToolbarFieldDisplayName.defaultProps = {\n  t: translate,\n  useDispatch: storeHooks.reactRedux.useDispatch,\n  useProduct,\n  useProductInventoryHostsQuery\n};\n\nexport { ToolbarFieldDisplayName as default, ToolbarFieldDisplayName };\n"],"names":["ToolbarFieldDisplayName","t","useAliasDispatch","useDispatch","useAliasProduct","useProduct","useAliasProductInventoryHostsQuery","useProductInventoryHostsQuery","viewId","currentValue","RHSM_API_QUERY_TYPES","dispatch","onSubmit","submitValue","type","reduxTypes","trim","debounced","_debounce","InputGroup","TextInput","context","className","iconVariant","maxLength","onClear","onKeyUp","event","keyCode","value","placeholder","defaultProps","translate","storeHooks"],"sourceRoot":""}