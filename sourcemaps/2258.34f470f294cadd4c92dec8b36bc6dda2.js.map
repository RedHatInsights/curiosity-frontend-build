{"version":3,"file":"js/2258.29500e701d683b0fd587.js","mappings":"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","sources":["webpack:///./src/components/toolbar/toolbarFieldGroupVariant.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Toolbar as PfToolbar, ToolbarContent, ToolbarItem, ToolbarItemVariant } from '@patternfly/react-core';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport { translate } from '../i18n/i18n';\nimport { routerContext } from '../router';\n\n/**\n * A toolbar product configuration select filter requiring a toolbar component parent.\n *\n * @memberof Toolbar\n * @module ToolbarFieldGroupVariant\n */\n\n/**\n * Generate select field options from config. Sorted by title string.\n *\n * @param {object} options\n * @param {Function} options.t\n * @param {Function} options.useRouteDetail\n * @returns {Function}\n */\nconst useToolbarFieldOptions = ({\n  t = translate,\n  useRouteDetail: useAliasRouteDetail = routerContext.useRouteDetail\n} = {}) => {\n  const { availableVariants, firstMatch } = useAliasRouteDetail();\n  const options = [];\n\n  availableVariants?.forEach(variant => {\n    options.push({\n      title: t('curiosity-toolbar.label', { context: ['groupVariant', variant] }),\n      value: variant,\n      selected: variant === firstMatch?.productId\n    });\n  });\n\n  return options.sort(({ title: titleA }, { title: titleB }) => titleA.localeCompare(titleB));\n};\n\n/**\n * On select update.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productGroup } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.app.SET_PRODUCT_VARIANT_QUERY_RESET_ALL,\n        productGroup\n      },\n      {\n        type: reduxTypes.app.SET_PRODUCT_VARIANT,\n        variant: value,\n        productGroup\n      }\n    ]);\n  };\n};\n\n/**\n * Display a product configuration field with generated options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {boolean} props.isStandalone\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProduct\n * @param {Function} props.useSelector\n * @param {Function} props.useToolbarFieldOptions\n * @returns {React.ReactNode}\n */\nconst ToolbarFieldGroupVariant = ({\n  isFilter,\n  isStandalone,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProduct: useAliasProduct,\n  useSelector: useAliasSelector,\n  useToolbarFieldOptions: useAliasToolbarFieldOptions\n}) => {\n  const { productGroup } = useAliasProduct();\n  const updatedValue = useAliasSelector(({ view }) => view?.product?.variant?.[productGroup], null);\n  const onSelect = useAliasOnSelect();\n  const options = useAliasToolbarFieldOptions();\n  const updatedOptions = options.map(option => ({\n    ...option,\n    selected: (updatedValue && option.value === updatedValue) || option?.selected\n  }));\n\n  if (options?.length <= 1) {\n    return null;\n  }\n\n  const element = (\n    <ToolbarContent>\n      <ToolbarItem variant={ToolbarItemVariant.label}>\n        {t('curiosity-toolbar.label', { context: ['groupVariant'] })}{' '}\n      </ToolbarItem>\n      <Select\n        aria-label={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'groupVariant'] })}\n        onSelect={onSelect}\n        options={updatedOptions}\n        selectedOptions={updatedValue}\n        placeholder={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'groupVariant'] })}\n        position={position}\n        data-test=\"toolbarFieldGroupVariant\"\n      />\n    </ToolbarContent>\n  );\n\n  return (\n    (isStandalone && (\n      <PfToolbar\n        id=\"curiosity-toolbar\"\n        className=\"curiosity-toolbar pf-m-toggle-group-container ins-c-primary-toolbar\"\n        collapseListedFiltersBreakpoint=\"sm\"\n      >\n        {element}\n      </PfToolbar>\n    )) ||\n    element\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, useProduct: Function, t: Function, useSelector: Function, isFilter: boolean,\n *     isStandalone: boolean, position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldGroupVariant.propTypes = {\n  isFilter: PropTypes.bool,\n  isStandalone: PropTypes.bool,\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProduct: PropTypes.func,\n  useSelector: PropTypes.func,\n  useToolbarFieldOptions: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, useProduct: Function, t: translate, useSelector: Function, isFilter: boolean,\n *     isStandalone: boolean, position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldGroupVariant.defaultProps = {\n  isFilter: false,\n  isStandalone: false,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProduct,\n  useSelector: storeHooks.reactRedux.useSelector,\n  useToolbarFieldOptions\n};\n\nexport { ToolbarFieldGroupVariant as default, ToolbarFieldGroupVariant, useOnSelect, useToolbarFieldOptions };\n"],"names":["useToolbarFieldOptions","_ref","arguments","length","undefined","_ref$t","t","translate","_ref$useRouteDetail","useRouteDetail","_useAliasRouteDetail","routerContext","availableVariants","firstMatch","options","forEach","variant","push","title","context","value","selected","productId","sort","_ref2","_ref3","titleA","titleB","localeCompare","useOnSelect","_ref4","_ref4$useDispatch","useDispatch","useAliasDispatch","storeHooks","_ref4$useProduct","useProduct","productGroup","dispatch","_ref5$value","type","reduxTypes","ToolbarFieldGroupVariant","_ref6","isFilter","isStandalone","position","useAliasOnSelect","useAliasProduct","useAliasSelector","useSelector","useAliasToolbarFieldOptions","updatedValue","_ref7","_view$product","_view$product$variant","view","product","onSelect","updatedOptions","map","option","_objectSpread","element","React","ToolbarContent","ToolbarItem","ToolbarItemVariant","Select","selectedOptions","placeholder","PfToolbar","id","className","collapseListedFiltersBreakpoint","defaultProps","SelectPosition"],"sourceRoot":""}