{"version":3,"file":"js/3597.1678116800351.f6caba71698dd1a1c3d8.js","mappings":"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","sources":["webpack:///./src/components/toolbar/toolbarFieldCategory.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductGraphConfig, useProductToolbarQuery } from '../productView/productViewContext';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { Select, SelectPosition } from '../form/select';\nimport { graphCardHelpers } from '../graphCard/graphCardHelpers';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A standalone Category select filter.\n *\n * @memberof Toolbar\n * @module ToolbarFieldCategory\n */\n\n/**\n * Generate select field options from config\n *\n * @param {object} options\n * @param {Function} options.useProductGraphConfig\n * @returns {Function}\n */\nconst useToolbarFieldOptions = ({ useProductGraphConfig: useAliasProductGraphConfig = useProductGraphConfig } = {}) => {\n  const { filters } = useAliasProductGraphConfig();\n  const options = [];\n\n  if (Array.isArray(filters)) {\n    const updatedFilters = filters\n      ?.map(({ metric, query }) => {\n        const category = query?.[RHSM_API_QUERY_SET_TYPES.CATEGORY];\n\n        if (category !== undefined) {\n          return {\n            title: translate('curiosity-toolbar.label', {\n              context: ['category', (category === '' && 'none') || category]\n            }),\n            value: category,\n            metaData: {\n              metric,\n              query\n            },\n            selected: false\n          };\n        }\n\n        return undefined;\n      })\n      .filter(value => value !== undefined);\n\n    if (updatedFilters?.length) {\n      options.push(...updatedFilters);\n    }\n  }\n\n  return options;\n};\n\n/**\n * On select update.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId, viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null, selected = {} } = {}) => {\n    let updatedGraphLegendValue = value;\n\n    if (selected?.metaData?.metric) {\n      updatedGraphLegendValue = graphCardHelpers.generateChartIds({\n        metric: selected.metaData.metric,\n        productId,\n        query: { [RHSM_API_QUERY_SET_TYPES.CATEGORY]: value }\n      });\n    }\n\n    dispatch([\n      {\n        type: reduxTypes.graph.SET_GRAPH_LEGEND,\n        id: `${viewId}-inverted`,\n        value: updatedGraphLegendValue\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY,\n        viewId,\n        filter: RHSM_API_QUERY_SET_TYPES.CATEGORY,\n        value\n      }\n    ]);\n  };\n};\n\n/**\n * Display a category field with generated options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductToolbarQuery\n * @param {Function} props.useToolbarFieldOptions\n * @returns {React.ReactNode}\n */\nconst ToolbarFieldCategory = ({\n  isFilter,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductToolbarQuery: useAliasProductToolbarQuery,\n  useToolbarFieldOptions: useAliasToolbarFieldOptions\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.CATEGORY]: updatedValue } = useAliasProductToolbarQuery();\n  const onSelect = useAliasOnSelect();\n  const options = useAliasToolbarFieldOptions();\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'category'] })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'category'] })}\n      position={position}\n      // variant={SelectVariant.checkbox}\n      data-test=\"toolbarFieldCategory\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, useProductToolbarQuery: Function, isFilter: boolean,\n *     position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldCategory.propTypes = {\n  isFilter: PropTypes.bool,\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductToolbarQuery: PropTypes.func,\n  useToolbarFieldOptions: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: translate, useProductToolbarQuery: Function, isFilter: boolean,\n *     position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldCategory.defaultProps = {\n  isFilter: false,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductToolbarQuery,\n  useToolbarFieldOptions\n};\n\nexport { ToolbarFieldCategory as default, ToolbarFieldCategory, useOnSelect, useToolbarFieldOptions };\n"],"names":["useToolbarFieldOptions","_ref","arguments","length","undefined","_ref$useProductGraphC","useProductGraphConfig","useAliasProductGraphConfig","_useAliasProductGraph","filters","options","Array","isArray","updatedFilters","map","_ref2","metric","query","category","RHSM_API_QUERY_SET_TYPES","title","translate","context","value","metaData","selected","filter","push","apply","_toConsumableArray","useOnSelect","_ref3","_ref3$useDispatch","useDispatch","useAliasDispatch","storeHooks","_ref3$useProduct","useProduct","useAliasProduct","_useAliasProduct","productId","viewId","dispatch","_selected$metaData","_ref4","_ref4$value","_ref4$selected","updatedGraphLegendValue","graphCardHelpers","_defineProperty","type","reduxTypes","id","concat","ToolbarFieldCategory","_ref5","isFilter","position","t","useAliasOnSelect","useAliasProductToolbarQuery","useProductToolbarQuery","useAliasToolbarFieldOptions","updatedValue","onSelect","updatedOptions","option","_objectSpread","React","Select","selectedOptions","placeholder","defaultProps","SelectPosition"],"sourceRoot":""}