{"version":3,"file":"js/7493.91001c7f034748339898.js","mappings":"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","sources":["webpack:///./src/components/inventorySubscriptions/inventorySubscriptions.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport _isEqual from 'lodash/isEqual';\nimport { SortByDirection, TableVariant } from '@patternfly/react-table';\nimport { Bullseye, Card, CardActions, CardBody, CardFooter, CardHeader } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport _camelCase from 'lodash/camelCase';\nimport { helpers } from '../../common';\nimport { connect, reduxActions, reduxSelectors, reduxTypes, store } from '../../redux';\nimport Table from '../table/table';\nimport { Loader } from '../loader/loader';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { inventoryListHelpers } from '../inventoryList/inventoryListHelpers';\nimport Pagination from '../pagination/pagination';\nimport { paginationHelpers } from '../pagination/paginationHelpers';\nimport {\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES as SORT_TYPES,\n  RHSM_API_QUERY_TYPES\n} from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A subscriptions system inventory component.\n *\n * @augments React.Component\n * @fires onColumnSort\n * @fires onPage\n * @fires onUpdateInventoryData\n */\nclass InventorySubscriptions extends React.Component {\n  componentDidMount() {\n    this.onUpdateInventoryData();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { productId, query } = this.props;\n\n    if (productId !== prevProps.productId || !_isEqual(query, prevProps.query)) {\n      this.onUpdateInventoryData();\n    }\n  }\n\n  /**\n   * On column sort update state.\n   *\n   * @event onColumnSort\n   * @param {object} data pass-through inventory data.\n   * @param {object} sortParams\n   * @param {string} sortParams.direction\n   * @param {string} sortParams.id column identifier\n   */\n  onColumnSort = (data, { direction, id }) => {\n    const { productId } = this.props;\n    const updatedSortColumn = Object.values(SORT_TYPES).find(value => _camelCase(value) === id);\n    let updatedDirection;\n\n    if (!updatedSortColumn) {\n      if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n        console.warn(`Sorting can only be performed on select fields, confirm field ${id} is allowed.`);\n      }\n      return;\n    }\n\n    switch (direction) {\n      case SortByDirection.desc:\n        updatedDirection = SORT_DIRECTION_TYPES.DESCENDING;\n        break;\n      default:\n        updatedDirection = SORT_DIRECTION_TYPES.ASCENDING;\n        break;\n    }\n\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.DIRECTION],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.DIRECTION]: updatedDirection\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.SORT],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.SORT]: updatedSortColumn\n      }\n    ]);\n  };\n\n  /**\n   * On paging and on perPage events.\n   *\n   * @event onPage\n   * @param {object} params\n   * @param {number} params.offset\n   * @param {number} params.perPage\n   */\n  onPage = ({ offset, perPage }) => {\n    const { productId } = this.props;\n\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.OFFSET],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.OFFSET]: offset\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.LIMIT],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.LIMIT]: perPage\n      }\n    ]);\n  };\n\n  /**\n   * Call the RHSM APIs, apply filters.\n   *\n   * @event onUpdateInventoryData\n   */\n  onUpdateInventoryData = () => {\n    const { getSubscriptionsInventory, isDisabled, productId, query } = this.props;\n\n    if (!isDisabled && productId) {\n      getSubscriptionsInventory(productId, query);\n    }\n  };\n\n  /**\n   * Render an inventory table.\n   *\n   * @returns {Node}\n   */\n  renderTable() {\n    const { filterInventoryData, listData, query, session } = this.props;\n    let updatedColumnHeaders = [];\n\n    const updatedRows = listData.map(({ ...cellData }) => {\n      const { columnHeaders, cells } = inventoryListHelpers.parseRowCellsListData({\n        filters: inventoryListHelpers.parseInventoryFilters({\n          filters: filterInventoryData,\n          onSort: this.onColumnSort,\n          query\n        }),\n        cellData,\n        session\n      });\n\n      updatedColumnHeaders = columnHeaders;\n\n      return {\n        cells\n      };\n    });\n\n    return (\n      <Table\n        borders\n        variant={TableVariant.compact}\n        className=\"curiosity-inventory-list\"\n        columnHeaders={updatedColumnHeaders}\n        rows={updatedRows}\n      />\n    );\n  }\n\n  /**\n   * Render an inventory card.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const {\n      error,\n      filterInventoryData,\n      fulfilled,\n      isDisabled,\n      itemCount,\n      listData,\n      pending,\n      perPageDefault,\n      query,\n      t\n    } = this.props;\n\n    if (isDisabled) {\n      return (\n        <Card className=\"curiosity-inventory-card__disabled\">\n          <CardBody>\n            <Bullseye>{t('curiosity-inventory.tab', { context: 'disabled' })}</Bullseye>\n          </CardBody>\n        </Card>\n      );\n    }\n\n    const updatedPerPage = query[RHSM_API_QUERY_TYPES.LIMIT] || perPageDefault;\n    const updatedOffset = query[RHSM_API_QUERY_TYPES.OFFSET];\n    const isLastPage = paginationHelpers.isLastPage(updatedOffset, updatedPerPage, itemCount);\n\n    // Set an updated key to force refresh minHeight\n    const minHeightContentRefreshKey =\n      (fulfilled === true && itemCount < updatedPerPage && `bodyMinHeight-${updatedPerPage}-resize`) ||\n      (fulfilled === true && isLastPage && `bodyMinHeight-${updatedPerPage}-resize`) ||\n      (error === true && `bodyMinHeight-${updatedPerPage}-resize`) ||\n      `bodyMinHeight-${updatedPerPage}`;\n\n    return (\n      <Card className=\"curiosity-inventory-card\">\n        <MinHeight key=\"headerMinHeight\" updateOnContent>\n          <CardHeader className={(error && 'hidden') || ''} aria-hidden={error || false}>\n            <CardActions className={(!itemCount && 'transparent') || ''} aria-hidden={!itemCount || false}>\n              <Pagination\n                isCompact\n                isDisabled={pending || error}\n                itemCount={itemCount}\n                offset={updatedOffset}\n                onPage={this.onPage}\n                onPerPage={this.onPage}\n                perPage={updatedPerPage}\n              />\n            </CardActions>\n          </CardHeader>\n        </MinHeight>\n        <MinHeight key={minHeightContentRefreshKey} updateOnContent>\n          <CardBody>\n            <div className={(error && 'blur') || (pending && 'fadein') || ''}>\n              {pending && (\n                <Loader\n                  variant=\"table\"\n                  tableProps={{\n                    className: 'curiosity-inventory-list',\n                    colCount: filterInventoryData?.length || (listData?.[0] && Object.keys(listData[0]).length) || 1,\n                    colWidth:\n                      (filterInventoryData?.length && filterInventoryData.map(({ cellWidth }) => cellWidth)) || [],\n                    rowCount: listData?.length || updatedPerPage,\n                    variant: TableVariant.compact\n                  }}\n                />\n              )}\n              {!pending && this.renderTable()}\n            </div>\n          </CardBody>\n        </MinHeight>\n        <MinHeight key=\"footerMinHeight\" updateOnContent>\n          <CardFooter\n            className={(error && 'hidden') || (!itemCount && 'transparent') || ''}\n            aria-hidden={error || !itemCount || false}\n          >\n            <TableToolbar isFooter>\n              <Pagination\n                dropDirection=\"up\"\n                isDisabled={pending || error}\n                itemCount={itemCount}\n                offset={updatedOffset}\n                onPage={this.onPage}\n                onPerPage={this.onPage}\n                perPage={updatedPerPage}\n              />\n            </TableToolbar>\n          </CardFooter>\n        </MinHeight>\n      </Card>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{productId: string, listData: Array, session: object, pending: boolean, query: object,\n *     fulfilled: boolean, error: boolean, getSubscriptionsInventory: Function, itemCount: number,\n *     t: Function, filterInventoryData: Array, perPageDefault: number, isDisabled: boolean}}\n */\nInventorySubscriptions.propTypes = {\n  error: PropTypes.bool,\n  fulfilled: PropTypes.bool,\n  filterInventoryData: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      header: PropTypes.oneOfType([\n        PropTypes.shape({\n          title: PropTypes.node.isRequired\n        }),\n        PropTypes.func,\n        PropTypes.node\n      ]),\n      cell: PropTypes.oneOfType([\n        PropTypes.shape({\n          title: PropTypes.node.isRequired\n        }),\n        PropTypes.func,\n        PropTypes.node\n      ])\n    }).isRequired\n  ),\n  getSubscriptionsInventory: PropTypes.func,\n  isDisabled: PropTypes.bool,\n  itemCount: PropTypes.number,\n  listData: PropTypes.array,\n  pending: PropTypes.bool,\n  productId: PropTypes.string.isRequired,\n  perPageDefault: PropTypes.number,\n  query: PropTypes.object.isRequired,\n  session: PropTypes.object,\n  t: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, filterInventoryData: Array, listData: Array, session: object, pending: boolean,\n *     fulfilled: boolean, perPageDefault: number, isDisabled: boolean, error: boolean,\n *     getSubscriptionsInventory: Function, itemCount: number}}\n */\nInventorySubscriptions.defaultProps = {\n  error: false,\n  fulfilled: false,\n  filterInventoryData: [],\n  getSubscriptionsInventory: helpers.noop,\n  isDisabled: helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS,\n  itemCount: 0,\n  listData: [],\n  pending: false,\n  perPageDefault: 10,\n  session: {},\n  t: translate\n};\n\n/**\n * Apply actions to props.\n *\n * @param {Function} dispatch\n * @returns {object}\n */\nconst mapDispatchToProps = dispatch => ({\n  getSubscriptionsInventory: (id, query) => dispatch(reduxActions.rhsm.getSubscriptionsInventory(id, query))\n});\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.subscriptionsList.makeSubscriptionsList();\n\nconst ConnectedInventorySubscriptions = connect(makeMapStateToProps, mapDispatchToProps)(InventorySubscriptions);\n\nexport { ConnectedInventorySubscriptions as default, ConnectedInventorySubscriptions, InventorySubscriptions };\n"],"names":["InventorySubscriptions","onColumnSort","data","updatedDirection","direction","id","productId","props","updatedSortColumn","Object","values","SORT_TYPES","find","value","_camelCase","SortByDirection","SORT_DIRECTION_TYPES","store","type","reduxTypes","RHSM_API_QUERY_TYPES","viewId","helpers","console","warn","onPage","offset","perPage","onUpdateInventoryData","getSubscriptionsInventory","isDisabled","query","this","prevProps","_isEqual","filterInventoryData","listData","session","updatedColumnHeaders","updatedRows","map","cellData","inventoryListHelpers","filters","onSort","columnHeaders","cells","borders","variant","TableVariant","className","rows","error","fulfilled","itemCount","pending","perPageDefault","t","Card","CardBody","Bullseye","context","updatedPerPage","updatedOffset","isLastPage","paginationHelpers","minHeightContentRefreshKey","MinHeight","key","updateOnContent","CardHeader","CardActions","isCompact","onPerPage","Loader","tableProps","colCount","length","keys","colWidth","cellWidth","rowCount","renderTable","CardFooter","isFooter","dropDirection","React","defaultProps","translate","makeMapStateToProps","reduxSelectors","ConnectedInventorySubscriptions","connect","dispatch","reduxActions"],"sourceRoot":""}