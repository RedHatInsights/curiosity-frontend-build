{"version":3,"file":"js/5925.e803708c6578acdefc22.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCard.js","webpack:///./src/components/graphCard/graphCardMetricTotals.js","webpack:///./src/components/minHeight/minHeight.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { helpers } from '../../common';\nimport { GraphCardMetricTotals } from './graphCardMetricTotals';\nimport { GraphCardChart } from './graphCardChart';\nimport { GraphCardContext, useParseFiltersSettings } from './graphCardContext';\n\n/**\n * Configurable graph, chart, cards. Consumes Charts.\n *\n * @see Charts\n * @memberof Components\n * @module GraphCard\n * @property {module} GraphCardChart\n * @property {module} GraphCardChartLegend\n * @property {module} GraphCardChartTitleTooltip\n * @property {module} GraphCardChartTooltip\n * @property {module} GraphCardContext\n * @property {module} GraphCardHelpers\n * @property {module} GraphCardMetricTotals\n */\n\n/**\n * Set up graph cards. Expand filters with base graph settings.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useParseFiltersSettings\n * @returns {React.ReactNode}\n */\nconst GraphCard = ({ isDisabled, useParseFiltersSettings: useAliasParseFiltersSettings }) => {\n  const { filtersSettings } = useAliasParseFiltersSettings();\n\n  if (isDisabled || !filtersSettings?.length) {\n    return null;\n  }\n\n  return filtersSettings?.map(filterSetting => (\n    <GraphCardContext.Provider key={`graphCard-${filterSetting?.settings?.metrics?.[0]?.id}`} value={filterSetting}>\n      <GraphCardMetricTotals>\n        <GraphCardChart />\n      </GraphCardMetricTotals>\n    </GraphCardContext.Provider>\n  ));\n};\n\n/**\n * Prop types.\n *\n * @type {{useParseFiltersSettings: Function, isDisabled: boolean}}\n */\nGraphCard.propTypes = {\n  isDisabled: PropTypes.bool,\n  useParseFiltersSettings: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useParseFiltersSettings: Function, isDisabled: boolean}}\n */\nGraphCard.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_GRAPH,\n  useParseFiltersSettings\n};\n\nexport { GraphCard as default, GraphCard };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter, CardHeader, CardTitle, Title } from '@patternfly/react-core';\nimport _camelCase from 'lodash/camelCase';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useGraphCardContext, useMetricsSelector } from './graphCardContext';\nimport { Loader, SkeletonSize } from '../loader/loader';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldRangedMonthly';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { graphCardHelpers } from './graphCardHelpers';\nimport { helpers } from '../../common';\n\n/**\n * @memberof GraphCard\n * @module GraphCardMetricTotals\n */\n\n/**\n * Display totals for a single metric.\n *\n * @param {object} props\n * @param {React.ReactNode} props.children\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {React.ReactNode}\n */\nconst GraphCardMetricTotals = ({\n  children,\n  useGraphCardContext: useAliasGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const query = useAliasProductGraphTallyQuery();\n  const { pending, error, fulfilled, dataSets: dataByList = [] } = useAliasMetricsSelector();\n\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate } = query;\n  const { isCurrent: isSelectedMonthCurrent } =\n    toolbarFieldOptions.find(\n      option => option.title === startDate || option.value.startDate.toISOString() === startDate\n    ) || {};\n\n  if (settings?.isMetricDisplay && settings?.cards?.length) {\n    const metricDisplayPassedData = helpers.setImmutableData(\n      {\n        dataSets: dataByList.map(dataSet => {\n          const { id: chartId, metric: metricId } = dataSet || {};\n          return {\n            ...dataSet,\n            display: {\n              ...graphCardHelpers.getDailyMonthlyTotals({ dataSet, isCurrent: isSelectedMonthCurrent }),\n              ...graphCardHelpers.getRemainingCapacity({\n                ...graphCardHelpers.getPrepaidTallyCapacity({ data: dataByList }),\n                isCurrent: isSelectedMonthCurrent\n              }),\n              ...graphCardHelpers.getRemainingOverage({\n                ...graphCardHelpers.getPrepaidTallyCapacity({ data: dataByList }),\n                isCurrent: isSelectedMonthCurrent\n              }),\n              chartId,\n              metricId\n            }\n          };\n        })\n      },\n      { isClone: true }\n    );\n\n    return (\n      <div\n        data-test={`graphMetricTotals-${settings?.groupMetric?.map(metricId => _camelCase(metricId))?.join('-')}`}\n        data-test-data={JSON.stringify(metricDisplayPassedData)}\n        className=\"curiosity-usage-graph__totals\"\n      >\n        <div>\n          <div className=\"curiosity-usage-graph__totals-column\">\n            {settings?.cards?.map(({ key, header, body, footer }, index) => (\n              <Card\n                key={key || helpers.generateHash({ metricDisplayPassedData, index })}\n                isPlain\n                data-test={`graphMetricTotalsCard-${index}`}\n                className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n              >\n                <CardHeader>\n                  <CardTitle>\n                    <Title headingLevel=\"h2\" size=\"md\">\n                      {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                      {fulfilled && ((typeof header === 'function' && header(metricDisplayPassedData)) || header)}\n                    </Title>\n                  </CardTitle>\n                </CardHeader>\n                <CardBody>\n                  <div>\n                    {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg, height: '60px' }} />}\n                    {fulfilled && ((typeof body === 'function' && body(metricDisplayPassedData)) || body)}\n                  </div>\n                </CardBody>\n                <CardFooter>\n                  <div>\n                    {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                    {fulfilled && ((typeof footer === 'function' && footer(metricDisplayPassedData)) || footer)}\n                  </div>\n                </CardFooter>\n              </Card>\n            ))}\n          </div>\n        </div>\n        <div>\n          <div className=\"curiosity-usage-graph__totals-graph-column\">{children}</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div data-test=\"graphStandalone\" className=\"curiosity-usage-graph__standalone\">\n      {children}\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, children: React.ReactNode, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.propTypes = {\n  children: PropTypes.node,\n  useGraphCardContext: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, children: React.ReactNode, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.defaultProps = {\n  children: null,\n  useGraphCardContext,\n  useMetricsSelector,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardMetricTotals as default, GraphCardMetricTotals };\n","import React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useResizeObserver } from '../../hooks/useWindow';\n\n/**\n * Normalize component height on page loads and updates.\n *\n * @memberof Components\n * @module MinHeight\n */\n\n/**\n * Set a min-height to prevent page jump component.\n *\n * @param {object} props\n * @param {React.ReactNode} props.children\n * @param {boolean} props.isOnLoad\n * @param {number} props.minHeight\n * @param {Function} props.useResizeObserver\n * @returns {React.ReactNode}\n */\nconst MinHeight = ({ children, isOnLoad, minHeight, useResizeObserver: useAliasResizeObserver }) => {\n  const [tracking, setTracking] = useState({ containerWidth: undefined, isLoaded: false });\n  const containerRef = useRef(null);\n  const innerContainerRef = useRef(null);\n  const { height: containerHeight, width: containerWidth } = useAliasResizeObserver(containerRef);\n\n  useEffect(() => {\n    if (!isOnLoad || (isOnLoad && !tracking.isLoaded)) {\n      const { current: domElement = {} } = containerRef;\n      const { current: innerDomElement = {} } = innerContainerRef;\n\n      if (domElement?.style) {\n        let updatedHeight = innerDomElement?.clientHeight || 0;\n\n        if (minHeight > containerHeight) {\n          updatedHeight = minHeight;\n        }\n\n        domElement.style.minHeight = `${updatedHeight}px`;\n        setTracking(() => ({\n          containerWidth,\n          isLoaded: isOnLoad,\n          updatedHeight\n        }));\n      }\n    }\n  }, [containerHeight, containerWidth, containerRef, innerContainerRef, isOnLoad, minHeight, tracking.isLoaded]);\n\n  return (\n    <div className=\"curiosity-minheight\" ref={containerRef}>\n      <div className=\"curiosity-minheight__inner\" ref={innerContainerRef}>\n        {children}\n      </div>\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{minHeight: number, useResizeObserver: Function, children: React.ReactNode, isOnLoad: boolean}}\n */\nMinHeight.propTypes = {\n  children: PropTypes.node.isRequired,\n  minHeight: PropTypes.number,\n  isOnLoad: PropTypes.bool,\n  useResizeObserver: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{minHeight: number, useResizeObserver: Function, isOnLoad: boolean}}\n */\nMinHeight.defaultProps = {\n  isOnLoad: false,\n  minHeight: 0,\n  useResizeObserver\n};\n\nexport { MinHeight as default, MinHeight };\n"],"names":["GraphCard","_ref","isDisabled","useParseFiltersSettings","useAliasParseFiltersSettings","filtersSettings","length","map","filterSetting","_filterSetting$settin","_filterSetting$settin2","_filterSetting$settin3","React","GraphCardContext","key","concat","settings","metrics","id","value","GraphCardMetricTotals","GraphCardChart","propTypes","PropTypes","defaultProps","helpers","_settings$cards","children","useGraphCardContext","useAliasGraphCardContext","useMetricsSelector","useAliasMetricsSelector","useProductGraphTallyQuery","useAliasProductGraphTallyQuery","query","pending","error","fulfilled","dataSets","dataByList","RHSM_API_QUERY_SET_TYPES","startDate","isCurrent","isSelectedMonthCurrent","toolbarFieldOptions","option","title","toISOString","isMetricDisplay","cards","_settings$groupMetric","_settings$groupMetric2","_settings$cards2","metricDisplayPassedData","dataSet","chartId","metric","metricId","display","graphCardHelpers","data","isClone","groupMetric","_camelCase","join","JSON","stringify","className","_ref2","index","header","body","footer","Card","isPlain","CardHeader","CardTitle","Title","headingLevel","size","Loader","variant","skeletonProps","SkeletonSize","CardBody","height","CardFooter","MinHeight","isOnLoad","minHeight","useResizeObserver","useAliasResizeObserver","tracking","setTracking","useState","containerWidth","undefined","isLoaded","containerRef","useRef","innerContainerRef","containerHeight","width","useEffect","current","domElement","innerDomElement","style","updatedHeight","clientHeight","ref"],"sourceRoot":""}