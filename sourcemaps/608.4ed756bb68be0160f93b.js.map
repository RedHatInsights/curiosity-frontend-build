{"version":3,"file":"js/608.f66158305a87382e340f.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCard.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardTitle, CardHeader, CardActions, CardBody, Title } from '@patternfly/react-core';\nimport { chart_color_green_300 as chartColorGreenDark } from '@patternfly/react-tokens';\nimport _isEqual from 'lodash/isEqual';\nimport { connect, reduxActions, reduxSelectors } from '../../redux';\nimport { helpers } from '../../common';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { graphCardHelpers } from './graphCardHelpers';\nimport GraphCardChartTooltip from './graphCardChartTooltip';\nimport GraphCardChartLegend from './graphCardChartLegend';\nimport { Chart } from '../chart/chart';\nimport { Loader } from '../loader/loader';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A chart/graph card.\n *\n * @augments React.Component\n * @fires onUpdateGraphData\n */\nclass GraphCard extends React.Component {\n  componentDidMount() {\n    this.onUpdateGraphData();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { productId, query } = this.props;\n\n    if (productId !== prevProps.productId || !_isEqual(query, prevProps.query)) {\n      this.onUpdateGraphData();\n    }\n  }\n\n  /**\n   * Call the RHSM APIs, apply filters.\n   *\n   * @event onUpdateGraphData\n   */\n  onUpdateGraphData = () => {\n    const { getGraphReportsCapacity, isDisabled, productId, query } = this.props;\n    const graphGranularity = this.getQueryGranularity();\n    const { [RHSM_API_QUERY_TYPES.START_DATE]: startDate, [RHSM_API_QUERY_TYPES.END_DATE]: endDate } = query;\n\n    if (!isDisabled && graphGranularity && startDate && endDate && productId) {\n      getGraphReportsCapacity(productId, query);\n    }\n  };\n\n  getQueryGranularity() {\n    const { query } = this.props;\n    return query?.[RHSM_API_QUERY_TYPES.GRANULARITY];\n  }\n\n  /**\n   * Apply props to chart/graph.\n   *\n   * @returns {Node}\n   */\n  renderChart() {\n    const { filterGraphData, graphData, productLabel, query, viewId } = this.props;\n    const graphGranularity = this.getQueryGranularity();\n\n    const chartAreaProps = {\n      xAxisLabelIncrement: graphCardHelpers.getChartXAxisLabelIncrement(graphGranularity),\n      xAxisTickFormat: ({ item, previousItem, tick }) =>\n        graphCardHelpers.xAxisTickFormat({\n          tick,\n          date: item.date,\n          previousDate: previousItem.date,\n          granularity: graphGranularity\n        }),\n      yAxisTickFormat: graphCardHelpers.yAxisTickFormat\n    };\n\n    const filteredGraphData = data => {\n      const filtered = key => {\n        const tempFiltered = {\n          data: data[key],\n          id: key,\n          strokeWidth: 2,\n          isStacked: !/^threshold/.test(key),\n          isThreshold: /^threshold/.test(key)\n        };\n\n        if (/^threshold/.test(key)) {\n          tempFiltered.stroke = chartColorGreenDark.value;\n          tempFiltered.strokeDasharray = '4,3';\n          tempFiltered.strokeWidth = 3;\n        }\n\n        return tempFiltered;\n      };\n\n      if (filterGraphData.length) {\n        return filterGraphData.map(value => Object.assign(filtered(value.id), value));\n      }\n\n      return Object.keys(data).map(key => filtered(key));\n    };\n\n    return (\n      <Chart\n        key={`chart_${JSON.stringify(query)}`}\n        {...chartAreaProps}\n        dataSets={filteredGraphData(graphData)}\n        chartLegend={({ chart, datum }) => (\n          <GraphCardChartLegend chart={chart} datum={datum} productLabel={productLabel} viewId={viewId} />\n        )}\n        chartTooltip={({ datum }) => (\n          <GraphCardChartTooltip datum={datum} granularity={graphGranularity} productLabel={productLabel} />\n        )}\n      />\n    );\n  }\n\n  /**\n   * ToDo: Evaluate applying a minHeight attr to the MinHeight component graphCard setup\n   * Appears there may be a minor page shift when compared to the prior hard-set min-height\n   * of 410px\n   */\n  /**\n   * Render a chart/graph card with chart/graph.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { cardTitle, children, error, graphData, meta, isDisabled, pending, settings } = this.props;\n\n    if (isDisabled) {\n      return null;\n    }\n\n    let actionDisplay = null;\n\n    // Apply actionDisplay callback, return node\n    if (typeof settings?.actionDisplay === 'function') {\n      actionDisplay = settings.actionDisplay({ data: { ...graphData }, meta: { ...meta } });\n    }\n\n    return (\n      <Card className=\"curiosity-usage-graph\">\n        <MinHeight key=\"headerMinHeight\">\n          <CardHeader>\n            <CardTitle>\n              <Title headingLevel=\"h2\" size=\"lg\">\n                {cardTitle}\n              </Title>\n            </CardTitle>\n            <CardActions className={(error && 'blur') || ''}>\n              <React.Fragment key=\"actionDisplay\">{actionDisplay}</React.Fragment>\n              {children}\n            </CardActions>\n          </CardHeader>\n        </MinHeight>\n        <MinHeight key=\"bodyMinHeight\">\n          <CardBody>\n            <div className={(error && 'blur') || (pending && 'fadein') || ''}>\n              {pending && <Loader variant=\"graph\" />}\n              {!pending && this.renderChart()}\n            </div>\n          </CardBody>\n        </MinHeight>\n      </Card>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{productLabel: string, settings: object, productId: string, query: object, pending: boolean,\n *     error: boolean, cardTitle: Node, filterGraphData: Array, getGraphReportsCapacity: Function,\n *     viewId: string, t: Function, children: Node, graphData: object, isDisabled: boolean,\n *     meta: object}}\n */\nGraphCard.propTypes = {\n  cardTitle: PropTypes.node,\n  children: PropTypes.node,\n  error: PropTypes.bool,\n  filterGraphData: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      fill: PropTypes.string,\n      stroke: PropTypes.string\n    })\n  ),\n  getGraphReportsCapacity: PropTypes.func,\n  graphData: PropTypes.object,\n  meta: PropTypes.object,\n  query: PropTypes.shape({\n    [RHSM_API_QUERY_TYPES.GRANULARITY]: PropTypes.oneOf([...Object.values(GRANULARITY_TYPES)]).isRequired,\n    [RHSM_API_QUERY_TYPES.START_DATE]: PropTypes.string.isRequired,\n    [RHSM_API_QUERY_TYPES.END_DATE]: PropTypes.string.isRequired\n  }).isRequired,\n  isDisabled: PropTypes.bool,\n  pending: PropTypes.bool,\n  productId: PropTypes.string.isRequired,\n  productLabel: PropTypes.string,\n  settings: PropTypes.shape({\n    actionDisplay: PropTypes.func\n  }),\n  t: PropTypes.func,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{productLabel: string, settings: object, pending: boolean, error: boolean, cardTitle: Node,\n *     filterGraphData: Array, getGraphReportsCapacity: Function, viewId: string, t: translate,\n *     children: Node, graphData: object, isDisabled: boolean, meta: object}}\n */\nGraphCard.defaultProps = {\n  cardTitle: null,\n  children: null,\n  error: false,\n  filterGraphData: [],\n  getGraphReportsCapacity: helpers.noop,\n  graphData: {},\n  meta: {},\n  isDisabled: helpers.UI_DISABLED_GRAPH,\n  pending: false,\n  productLabel: '',\n  settings: {},\n  t: translate,\n  viewId: 'graphCard'\n};\n\n/**\n * Apply actions to props.\n *\n * @param {Function} dispatch\n * @returns {object}\n */\nconst mapDispatchToProps = dispatch => ({\n  getGraphReportsCapacity: (id, query) => dispatch(reduxActions.rhsm.getGraphReportsCapacity(id, query))\n});\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.graphCard.makeGraphCard();\n\nconst ConnectedGraphCard = connect(makeMapStateToProps, mapDispatchToProps)(GraphCard);\n\nexport { ConnectedGraphCard as default, ConnectedGraphCard, GraphCard };\n"],"names":["GraphCard","onUpdateGraphData","props","getGraphReportsCapacity","isDisabled","productId","query","graphGranularity","getQueryGranularity","startDate","RHSM_API_QUERY_TYPES","endDate","this","prevProps","_isEqual","data","filtered","filterGraphData","graphData","productLabel","viewId","chartAreaProps","xAxisLabelIncrement","graphCardHelpers","xAxisTickFormat","item","previousItem","tick","date","previousDate","granularity","yAxisTickFormat","Chart","key","JSON","stringify","dataSets","tempFiltered","id","strokeWidth","isStacked","test","isThreshold","stroke","chartColorGreenDark","strokeDasharray","length","map","value","Object","assign","keys","chartLegend","chart","datum","chartTooltip","cardTitle","children","error","meta","pending","settings","actionDisplay","Card","className","MinHeight","CardHeader","CardTitle","Title","headingLevel","size","CardActions","CardBody","Loader","variant","renderChart","React","defaultProps","helpers","t","translate","makeMapStateToProps","reduxSelectors","ConnectedGraphCard","connect","dispatch","reduxActions"],"sourceRoot":""}