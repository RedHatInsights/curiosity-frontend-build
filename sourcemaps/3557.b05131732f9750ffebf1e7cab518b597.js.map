{"version":3,"file":"js/3557.1676926314151.f7cbe53b2753da61f281.js","mappings":"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","sources":["webpack:///./src/components/bannerMessages/bannerMessages.js","webpack:///./src/components/bannerMessages/bannerMessagesContext.js","webpack:///./src/components/graphCard/graphCard.js","webpack:///./src/components/graphCard/graphCardMetricTotals.js","webpack:///./src/components/inventoryCard/inventoryCardHosts.js","webpack:///./src/components/inventoryCardSubscriptions/inventoryCardSubscriptions.js","webpack:///./src/components/inventoryCardSubscriptions/inventoryCardSubscriptionsContext.js","webpack:///./src/components/inventoryTabs/inventoryTab.js","webpack:///./src/components/inventoryTabs/inventoryTabs.js","webpack:///./src/components/productView/productView.js","webpack:///./src/components/tabs/tabs.js","webpack:///./src/components/toolbar/toolbar.js","webpack:///./src/components/toolbar/toolbarContext.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, AlertActionCloseButton, AlertVariant, Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { useShallowCompareEffect } from 'react-use';\nimport { useGetAppMessages } from './bannerMessagesContext';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Render banner messages.\n *\n * @param {object} props\n * @param {Array} props.messages\n * @param {Function} props.useGetAppMessages\n * @returns {React.ReactNode}\n */\nconst BannerMessages = ({ messages, useGetAppMessages: useAliasGetAppMessages }) => {\n  const [hideAlerts, setHideAlerts] = useState({});\n  const [alerts, setAlerts] = useState([]);\n  const { data: appMessages } = useAliasGetAppMessages();\n\n  useShallowCompareEffect(() => {\n    const updatedMessages = [];\n\n    if (messages.length) {\n      Object.entries(appMessages).forEach(([key, value]) => {\n        if (hideAlerts[key] !== true && value === true) {\n          const message = messages.find(({ id }) => id === key);\n\n          if (message) {\n            updatedMessages.push({\n              key,\n              ...message\n            });\n          }\n        }\n      });\n    }\n\n    setAlerts(\n      updatedMessages.map(({ key, message, title, variant = AlertVariant.info }) => {\n        const actionClose = <AlertActionCloseButton onClose={() => setHideAlerts({ ...hideAlerts, [key]: true })} />;\n\n        return (\n          <Alert actionClose={actionClose} key={key} title={title} variant={variant}>\n            {message}\n          </Alert>\n        );\n      })\n    );\n  }, [appMessages, hideAlerts, messages]);\n\n  if (alerts?.length) {\n    return <div className=\"curiosity-banner-messages\">{alerts}</div>;\n  }\n\n  return null;\n};\n\n/**\n * Prop types.\n *\n * @type {{useGetAppMessages: Function, messages: Array}}\n */\nBannerMessages.propTypes = {\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.node.isRequired,\n      message: PropTypes.node.isRequired,\n      variant: PropTypes.oneOf([...Object.values(AlertVariant)])\n    })\n  ),\n  useGetAppMessages: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGetAppMessages: Function, messages: Array}}\n */\nBannerMessages.defaultProps = {\n  messages: [\n    {\n      id: 'cloudigradeMismatch',\n      title: translate('curiosity-banner.dataMismatchTitle'),\n      message: translate(\n        'curiosity-banner.dataMismatchMessage',\n        {\n          context: helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS !== '' && 'cloudigradeMismatch',\n          appName: helpers.UI_DISPLAY_NAME\n        },\n        [\n          <Button\n            isInline\n            component=\"a\"\n            variant=\"link\"\n            icon={<ExternalLinkAltIcon />}\n            iconPosition=\"right\"\n            target=\"_blank\"\n            href={helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS}\n          />\n        ]\n      )\n    }\n  ],\n  useGetAppMessages\n};\n\nexport { BannerMessages as default, BannerMessages };\n","import { useShallowCompareEffect } from 'react-use';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { dateHelpers } from '../../common';\nimport {\n  rhsmConstants,\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\n\n/**\n * ToDo: useGetAppMessages is setup to work with existing Tally response, pre-metrics\n * Banner messages scans the returned Tally listing for the HAS_CLOUDIGRADE_MISMATCH. In the future\n * this may need to be updated to pull from the \"meta\" object part of the Tally response.\n */\n/**\n * Get app messages.\n *\n * @param {object} options\n * @param {Function} options.getMessageReports\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useProductQuery\n * @param {Function} options.useSelectorsResponse\n * @returns {object}\n */\nconst useGetAppMessages = ({\n  getMessageReports = reduxActions.rhsm.getMessageReports,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductQuery();\n  const dispatch = useAliasDispatch();\n  const { error, fulfilled, pending, data } = useAliasSelectorsResponse({\n    id: 'messages',\n    selector: ({ messages }) => messages?.report?.[productId]\n  });\n\n  useShallowCompareEffect(() => {\n    if (productId) {\n      const { startDate, endDate } = dateHelpers.getRangedDateTime('CURRENT');\n      const updatedQuery = {\n        ...query,\n        [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY,\n        [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate.toISOString(),\n        [RHSM_API_QUERY_SET_TYPES.END_DATE]: endDate.toISOString()\n      };\n\n      getMessageReports(productId, updatedQuery)(dispatch);\n    }\n  }, [productId, query]);\n\n  const updatedData = {\n    cloudigradeMismatch: false\n  };\n\n  if (fulfilled) {\n    const { messages = {} } = data || {};\n\n    updatedData.cloudigradeMismatch =\n      messages?.data\n        ?.reverse()\n        ?.find(\n          ({ [rhsmConstants.RHSM_API_RESPONSE_TALLY_CAPACITY_META_TYPES.HAS_CLOUDIGRADE_MISMATCH]: mismatch }) =>\n            mismatch === true\n        ) !== undefined;\n  }\n\n  return {\n    error,\n    fulfilled,\n    pending,\n    data: {\n      ...updatedData\n    }\n  };\n};\n\nconst context = {\n  useGetAppMessages\n};\n\nexport { context as default, context, useGetAppMessages };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { helpers } from '../../common';\nimport { GraphCardMetricTotals } from './graphCardMetricTotals';\nimport { GraphCardChart } from './graphCardChart';\nimport { GraphCardContext, useParseFiltersSettings } from './graphCardContext';\n\n/**\n * Set up graph cards. Expand filters with base graph settings.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useParseFiltersSettings\n * @returns {Node}\n */\nconst GraphCard = ({ isDisabled, useParseFiltersSettings: useAliasParseFiltersSettings }) => {\n  const { groupedFiltersSettings, standaloneFiltersSettings } = useAliasParseFiltersSettings();\n\n  if (isDisabled) {\n    return null;\n  }\n\n  return (\n    <React.Fragment>\n      {(groupedFiltersSettings?.settings?.metrics?.length && (\n        <GraphCardContext.Provider\n          key={`graphCard_grouped-${groupedFiltersSettings?.settings?.metrics?.[0]?.id}`}\n          value={groupedFiltersSettings}\n        >\n          <GraphCardChart />\n        </GraphCardContext.Provider>\n      )) ||\n        null}\n      {standaloneFiltersSettings?.map(filtersSettings => (\n        <GraphCardContext.Provider\n          key={`graphCard_standalone-${filtersSettings?.settings?.metric?.id}`}\n          value={filtersSettings}\n        >\n          <GraphCardMetricTotals>\n            <GraphCardChart />\n          </GraphCardMetricTotals>\n        </GraphCardContext.Provider>\n      ))}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useParseFiltersSettings: Function, isDisabled: boolean}}\n */\nGraphCard.propTypes = {\n  isDisabled: PropTypes.bool,\n  useParseFiltersSettings: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useParseFiltersSettings: Function, isDisabled: boolean}}\n */\nGraphCard.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_GRAPH,\n  useParseFiltersSettings\n};\n\nexport { GraphCard as default, GraphCard };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter, CardHeader, CardTitle, Title } from '@patternfly/react-core';\nimport moment from 'moment';\nimport _camelCase from 'lodash/camelCase';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useMetricsSelector } from './graphCardContext';\nimport { Loader, SkeletonSize } from '../loader/loader';\nimport { dateHelpers, helpers } from '../../common';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldRangedMonthly';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Display totals for a single metric.\n *\n * @param {object} props\n * @param {Node} props.children\n * @param {Function} props.t\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardMetricTotals = ({\n  children,\n  t,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate } = useAliasProductGraphTallyQuery();\n  const { pending, error, fulfilled, dataSets = [] } = useAliasMetricsSelector();\n  const { data = [], id, metric: metricId, meta = {} } = dataSets[0] || {};\n  const { date: lastDate, hasData: lastHasData, y: lastValue } = data[data.length - 1] || {};\n  const {\n    date: currentDate,\n    hasData: currentHasData,\n    y: currentValue\n  } = data.find(({ isCurrentDate }) => isCurrentDate === true) || {};\n\n  const { totalMonthlyDate: monthlyDate, totalMonthlyHasData: monthlyHasData, totalMonthlyValue: monthlyValue } = meta;\n\n  const { title: selectedMonth, isCurrent } =\n    toolbarFieldOptions.find(\n      option => option.title === startDate || option.value.startDate.toISOString() === startDate\n    ) || {};\n\n  const dailyDate = isCurrent ? currentDate : lastDate;\n  const dailyHasData = isCurrent ? currentHasData : lastHasData;\n  const dailyValue = isCurrent ? currentValue : lastValue;\n\n  return (\n    <div data-test={`graphMetricTotals-${_camelCase(metricId)}`} className=\"curiosity-usage-graph__totals\">\n      <div>\n        <div className=\"curiosity-usage-graph__totals-column\">\n          <Card\n            isPlain\n            data-test=\"graphDailyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardHeader>\n              <CardTitle>\n                <Title headingLevel=\"h2\" size=\"md\">\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t('curiosity-graph.cardHeadingMetric', {\n                      context: ['dailyTotal', id],\n                      month: selectedMonth\n                    })}\n                </Title>\n              </CardTitle>\n            </CardHeader>\n            <CardBody>\n              <div>\n                {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg, height: '60px' }} />}\n                {fulfilled &&\n                  t(\n                    'curiosity-graph.cardBodyMetric',\n                    {\n                      context: ['total', dailyHasData && id],\n                      total: helpers\n                        .numberDisplay(dailyValue)\n                        ?.format({\n                          average: true,\n                          mantissa: 5,\n                          trimMantissa: true,\n                          lowPrecision: false\n                        })\n                        ?.toUpperCase()\n                    },\n                    [<strong title={dailyValue} aria-label={dailyValue} />]\n                  )}\n              </div>\n            </CardBody>\n            <CardFooter>\n              <div>\n                {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                {fulfilled &&\n                  dailyDate &&\n                  t('curiosity-graph.cardFooterMetric', {\n                    date: moment.utc(dailyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                  })}\n              </div>\n            </CardFooter>\n          </Card>\n          <Card\n            isPlain\n            data-test=\"graphMonthlyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardHeader>\n              <CardTitle>\n                <Title headingLevel=\"h2\" size=\"md\">\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t('curiosity-graph.cardHeadingMetric', {\n                      context: ['monthlyTotal', id],\n                      month: selectedMonth\n                    })}\n                </Title>\n              </CardTitle>\n            </CardHeader>\n            <CardBody>\n              <div>\n                {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg, height: '60px' }} />}\n                {fulfilled &&\n                  t(\n                    'curiosity-graph.cardBodyMetric',\n                    {\n                      context: ['total', monthlyHasData && id],\n                      total: helpers\n                        .numberDisplay(monthlyValue)\n                        ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: false })\n                        ?.toUpperCase()\n                    },\n                    [<strong title={monthlyValue} aria-label={monthlyValue} />]\n                  )}\n              </div>\n            </CardBody>\n            <CardFooter>\n              <div>\n                {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                {fulfilled &&\n                  monthlyDate &&\n                  t('curiosity-graph.cardFooterMetric', {\n                    date: moment.utc(monthlyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                  })}\n              </div>\n            </CardFooter>\n          </Card>\n        </div>\n      </div>\n      <div>\n        <div className=\"curiosity-usage-graph__totals-graph-column\">{children}</div>\n      </div>\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.propTypes = {\n  children: PropTypes.node,\n  t: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.defaultProps = {\n  children: null,\n  t: translate,\n  useMetricsSelector,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardMetricTotals as default, GraphCardMetricTotals };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useGetHostsInventory, useOnColumnSortHosts } from './inventoryCardContext';\nimport InventoryCard from './inventoryCard';\nimport { helpers } from '../../common';\n\n/**\n * A hosts' system inventory component.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useGetInventory\n * @param {Function} props.useOnColumnSort\n * @returns {React.ReactNode}\n */\nconst InventoryCardHosts = ({ ...props }) => <InventoryCard {...props} />;\n\n/**\n * Prop types.\n *\n * @type {{isDisabled: boolean, useGetInventory: Function, useOnColumnSort: Function}}\n */\nInventoryCardHosts.propTypes = {\n  isDisabled: PropTypes.bool,\n  useGetInventory: PropTypes.func,\n  useOnColumnSort: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{isDisabled: boolean, useGetInventory: Function, useOnColumnSort: Function}}\n */\nInventoryCardHosts.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_TABLE_HOSTS,\n  useGetInventory: useGetHostsInventory,\n  useOnColumnSort: useOnColumnSortHosts\n};\n\nexport { InventoryCardHosts as default, InventoryCardHosts };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  useProductInventorySubscriptionsConfig,\n  useProductInventorySubscriptionsQuery\n} from '../productView/productViewContext';\nimport {\n  useGetSubscriptionsInventory,\n  useOnPageSubscriptions,\n  useOnColumnSortSubscriptions\n} from './inventoryCardSubscriptionsContext';\nimport InventoryCard from '../inventoryCard/inventoryCard';\nimport { helpers } from '../../common';\n\n/**\n * A subscriptions' system inventory component.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useGetInventory\n * @param {Function} props.useOnPage\n * @param {Function} props.useOnColumnSort\n * @param {Function} props.useProductInventoryConfig\n * @param {Function} props.useProductInventoryQuery\n * @fires onColumnSort\n * @fires onPage\n * @fires onUpdateInventoryData\n * @returns {Node}\n */\nconst InventoryCardSubscriptions = ({ ...props }) => <InventoryCard cardActions={null} {...props} />;\n\n/**\n * Prop types.\n *\n * @type {{useOnPage: Function, isDisabled: boolean, useProductInventoryConfig: Function, useGetInventory: Function,\n *     useOnColumnSort: Function, useProductInventoryQuery: Function}}\n */\nInventoryCardSubscriptions.propTypes = {\n  isDisabled: PropTypes.bool,\n  useGetInventory: PropTypes.func,\n  useOnPage: PropTypes.func,\n  useOnColumnSort: PropTypes.func,\n  useProductInventoryConfig: PropTypes.func,\n  useProductInventoryQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnPage: Function, isDisabled: boolean, useProductInventoryConfig: Function, useGetInventory: Function,\n *     useOnColumnSort: Function, useProductInventoryQuery: Function}}\n */\nInventoryCardSubscriptions.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS,\n  useGetInventory: useGetSubscriptionsInventory,\n  useOnPage: useOnPageSubscriptions,\n  useOnColumnSort: useOnColumnSortSubscriptions,\n  useProductInventoryConfig: useProductInventorySubscriptionsConfig,\n  useProductInventoryQuery: useProductInventorySubscriptionsQuery\n};\n\nexport { InventoryCardSubscriptions as default, InventoryCardSubscriptions };\n","import { useShallowCompareEffect } from 'react-use';\nimport _camelCase from 'lodash/camelCase';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { reduxActions, reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductInventorySubscriptionsQuery } from '../productView/productViewContext';\nimport {\n  RHSM_API_QUERY_INVENTORY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_INVENTORY_SUBSCRIPTIONS_SORT_TYPES as SORT_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * Combined Redux RHSM Actions, getSubscriptionsInventory, and inventory selector response.\n *\n * @param {object} options\n * @param {boolean} options.isDisabled\n * @param {Function} options.getInventory\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useProductInventoryQuery\n * @param {Function} options.useSelectorsResponse\n * @returns {Function}\n */\nconst useGetSubscriptionsInventory = ({\n  isDisabled = false,\n  getInventory = reduxActions.rhsm.getSubscriptionsInventory,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventorySubscriptionsQuery,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductInventoryQuery();\n  const dispatch = useAliasDispatch();\n  const { cancelled, pending, data, ...response } = useAliasSelectorsResponse(\n    ({ inventory }) => inventory?.subscriptionsInventory?.[productId]\n  );\n\n  useShallowCompareEffect(() => {\n    if (!isDisabled) {\n      getInventory(productId, query)(dispatch);\n    }\n  }, [dispatch, isDisabled, productId, query]);\n\n  return {\n    ...response,\n    pending: pending || cancelled || false,\n    data: (data?.length === 1 && data[0]) || data || {}\n  };\n};\n\n/**\n * An onPage callback for subscriptions inventory.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnPageSubscriptions = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for subscriptions inventory.\n   *\n   * @event onPage\n   * @param {object} params\n   * @param {number} params.offset\n   * @param {number} params.perPage\n   * @returns {void}\n   */\n  return ({ offset, perPage }) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.OFFSET],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.OFFSET]: offset\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.LIMIT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.LIMIT]: perPage\n      }\n    ]);\n  };\n};\n\n/**\n * An onColumnSort callback for subscriptions inventory.\n *\n * @param {object} options\n * @param {object} options.sortColumns\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnColumnSortSubscriptions = ({\n  sortColumns = SORT_TYPES,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for subscriptions inventory.\n   *\n   * @event onColumnSort\n   * @param {*} _data\n   * @param {object} params\n   * @param {string} params.direction\n   * @param {string} params.id\n   * @returns {void}\n   */\n  return (_data, { direction, id }) => {\n    const updatedSortColumn = Object.values(sortColumns).find(value => value === id || _camelCase(value) === id);\n    let updatedDirection;\n\n    if (!updatedSortColumn) {\n      if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n        console.warn(`Sorting can only be performed on select fields, confirm field ${id} is allowed.`);\n      }\n      return;\n    }\n\n    switch (direction) {\n      case SortByDirection.desc:\n        updatedDirection = SORT_DIRECTION_TYPES.DESCENDING;\n        break;\n      default:\n        updatedDirection = SORT_DIRECTION_TYPES.ASCENDING;\n        break;\n    }\n\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.DIRECTION],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.DIRECTION]: updatedDirection\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.SORT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.SORT]: updatedSortColumn\n      }\n    ]);\n  };\n};\n\nconst context = {\n  useGetSubscriptionsInventory,\n  useOnPageSubscriptions,\n  useOnColumnSortSubscriptions\n};\n\nexport {\n  context as default,\n  context,\n  useGetSubscriptionsInventory,\n  useOnPageSubscriptions,\n  useOnColumnSortSubscriptions\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * A tab pass-through component for passing props to InventoryTabs.\n *\n * @param {object} props\n * @param {boolean} props.active\n * @param {React.ReactNode} props.children\n * @param {string} props.title\n * @returns {React.ReactNode}\n */\n// eslint-disable-next-line no-unused-vars\nconst InventoryTab = ({ active, children, title }) => children;\n\n/**\n * Prop types.\n *\n * @type {{children: React.ReactNode, className: string}}\n */\nInventoryTab.propTypes = {\n  children: PropTypes.node.isRequired,\n  active: PropTypes.bool,\n  title: PropTypes.node.isRequired\n};\n\n/**\n * Default props.\n *\n * @type {{className: string}}\n */\nInventoryTab.defaultProps = {\n  active: false\n};\n\nexport { InventoryTab as default, InventoryTab };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Title } from '@patternfly/react-core';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct } from '../productView/productViewContext';\nimport { Tabs } from '../tabs/tabs';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { InventoryTab } from './inventoryTab';\n\n/**\n * Update tab state.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnTab = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ index } = {}) => {\n    dispatch({\n      type: reduxTypes.inventory.SET_INVENTORY_TAB,\n      tabs: {\n        [productId]: index\n      }\n    });\n  };\n};\n\n/**\n * An inventory tabs component.\n * Render inventory tabs using Inventory tab passed props only.\n *\n * @fires onTab\n * @param {object} props\n * @param {number} props.activeTab\n * @param {React.ReactNode} props.children\n * @param {number} props.defaultActiveTab\n * @param {boolean} props.isDisabled\n * @param {Function} props.t\n * @param {Function} props.useOnTab\n * @param {Function} props.useProduct\n * @param {Function} props.useSelector\n * @returns {React.ReactNode|null}\n */\nconst InventoryTabs = ({\n  activeTab,\n  children,\n  defaultActiveTab,\n  isDisabled,\n  t,\n  useOnTab: useAliasOnTab,\n  useProduct: useAliasProduct,\n  useSelector: useAliasSelector\n}) => {\n  const { productId } = useAliasProduct();\n  const updatedActiveTab = useAliasSelector(({ inventory }) => inventory.tabs?.[productId], activeTab);\n  const onTab = useAliasOnTab();\n\n  if (isDisabled) {\n    return null;\n  }\n\n  const updatedChildren = React.Children.toArray(children).map((child, index) => {\n    const { props: childProps = {} } = child;\n\n    return {\n      active: childProps.active || false,\n      content: childProps.children || child,\n      title: childProps.title || t('curiosity-inventory.tabSubHeading', { count: index })\n    };\n  });\n\n  return (\n    <React.Fragment>\n      <Title headingLevel=\"h2\" className=\"sr-only\">\n        {t('curiosity-inventory.tabHeading', { count: updatedChildren.length })}\n      </Title>\n      <Tabs activeTab={updatedActiveTab} defaultActiveTab={defaultActiveTab} onTab={onTab} tabs={updatedChildren} />\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnTab: Function, useProduct: Function, t: Function, children: React.ReactNode,\n *     useSelector: Function, defaultActiveTab: number, isDisabled: boolean, activeTab: number}}\n */\nInventoryTabs.propTypes = {\n  activeTab: PropTypes.number,\n  children: PropTypes.node.isRequired,\n  defaultActiveTab: PropTypes.number,\n  isDisabled: PropTypes.bool,\n  t: PropTypes.func,\n  useOnTab: PropTypes.func,\n  useProduct: PropTypes.func,\n  useSelector: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnTab: Function, useProduct: Function, t: translate, useSelector: Function,\n *     defaultActiveTab: number, isDisabled: boolean, activeTab: number}}\n */\nInventoryTabs.defaultProps = {\n  activeTab: 0,\n  defaultActiveTab: 0,\n  isDisabled: helpers.UI_DISABLED_TABLE,\n  t: translate,\n  useOnTab,\n  useProduct,\n  useSelector: storeHooks.reactRedux.useSelector\n};\n\nexport { InventoryTabs as default, InventoryTabs, InventoryTab, useOnTab };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useRouteDetail } from '../../hooks/useRouter';\nimport { ProductViewContext } from './productViewContext';\nimport { PageLayout, PageHeader, PageSection, PageToolbar, PageMessages, PageColumns } from '../pageLayout/pageLayout';\nimport { GraphCard } from '../graphCard/graphCard';\nimport { Toolbar } from '../toolbar/toolbar';\nimport { InventoryCard } from '../inventoryCard/inventoryCard';\nimport { InventoryCardHosts } from '../inventoryCard/inventoryCardHosts';\nimport { helpers } from '../../common';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport { InventoryCardSubscriptions } from '../inventoryCardSubscriptions/inventoryCardSubscriptions';\nimport { RHSM_INTERNAL_PRODUCT_DISPLAY_TYPES as DISPLAY_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Display product columns.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useRouteDetail\n * @returns {Node}\n */\nconst ProductView = ({ t, useRouteDetail: useAliasRouteDetail }) => {\n  const { productParameter: routeProductLabel, productConfig } = useAliasRouteDetail();\n\n  const renderProduct = config => {\n    const { initialInventoryFilters, initialSubscriptionsInventoryFilters, productDisplay, productId, viewId } = config;\n\n    if (!productId || !viewId) {\n      return null;\n    }\n\n    return (\n      <ProductViewContext.Provider value={config} key={`product_${productId}`}>\n        <PageMessages>{productDisplay !== DISPLAY_TYPES.HOURLY && <BannerMessages />}</PageMessages>\n        <PageToolbar>\n          <Toolbar />\n        </PageToolbar>\n        <PageSection>\n          <GraphCard />\n        </PageSection>\n        <PageSection className={(productDisplay === DISPLAY_TYPES.HOURLY && 'curiosity-page-section__tabs') || ''}>\n          <InventoryTabs\n            isDisabled={\n              (!initialInventoryFilters && !initialSubscriptionsInventoryFilters) || helpers.UI_DISABLED_TABLE\n            }\n          >\n            {!helpers.UI_DISABLED_TABLE_HOSTS &&\n              productDisplay !== DISPLAY_TYPES.HOURLY &&\n              productDisplay !== DISPLAY_TYPES.CAPACITY &&\n              initialInventoryFilters && (\n                <InventoryTab\n                  key={`inventory_hosts_${productId}`}\n                  title={t('curiosity-inventory.tabHosts', { context: [productId] })}\n                >\n                  <InventoryCardHosts />\n                </InventoryTab>\n              )}\n            {!helpers.UI_DISABLED_TABLE_INSTANCES &&\n              productDisplay !== DISPLAY_TYPES.DUAL_AXES &&\n              productDisplay !== DISPLAY_TYPES.LEGACY &&\n              productDisplay !== DISPLAY_TYPES.PARTIAL &&\n              initialInventoryFilters && (\n                <InventoryTab\n                  key={`inventory_instances_${productId}`}\n                  title={t('curiosity-inventory.tabInstances', { context: [productId] })}\n                >\n                  <InventoryCard />\n                </InventoryTab>\n              )}\n            {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && initialSubscriptionsInventoryFilters && (\n              <InventoryTab\n                key={`inventory_subs_${productId}`}\n                title={t('curiosity-inventory.tabSubscriptions', { context: [productId] })}\n              >\n                <InventoryCardSubscriptions />\n              </InventoryTab>\n            )}\n          </InventoryTabs>\n        </PageSection>\n      </ProductViewContext.Provider>\n    );\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader productLabel={routeProductLabel}>\n        {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: routeProductLabel })}\n      </PageHeader>\n      <PageColumns>{productConfig.map(config => renderProduct(config))}</PageColumns>\n    </PageLayout>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: translate, useRouteDetail: Function}}\n */\nProductView.propTypes = {\n  t: PropTypes.func,\n  useRouteDetail: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, useRouteDetail: Function}}\n */\nProductView.defaultProps = {\n  t: translate,\n  useRouteDetail\n};\n\nexport { ProductView as default, ProductView };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tabs as PfTabs, Tab, TabTitleText, Grid, GridItem } from '@patternfly/react-core';\nimport _isEqualWith from 'lodash/isEqualWith';\nimport { helpers } from '../../common';\n\n/**\n * FixMe: PF tabs misinterprets \"isElementInView\" when tab title nodes are loaded dynamically\n * It appears the use of isElementInView within PF tabs is trying to be predicative in using\n * \"getBoundingClientRect\" but produces questionable results in scenarios where content is\n * async created. isElementInView assumes some form of the content will always be there\n * instead of scenarios where someone tries to dynamically apply components. It may be good to\n * review using a window.setTimeout(() => handleScrollButtons()) in componentDidMount.\n *\n * Our temporary solution is to simply hide the buttons with a manual set flag affecting the\n * CSS class. This will most likely cause long-term issues.\n */\n/**\n * ToDo: Insights frontend components uses a custom tabs layout, investigate related CSS classes\n * Originally we applied the CSS classes, but they appeared to provide nothing. Since Insights\n * rolled its own tabs we're hesitant to apply said classes without understanding what they provide.\n */\n/**\n * A set of tabs.\n *\n * @augments React.Component\n * @fires onTab\n */\nclass Tabs extends React.Component {\n  state = {\n    updatedActiveTab: null,\n    updatedTabs: null\n  };\n\n  componentDidMount() {\n    const { updatedTabs } = this.state;\n\n    if (updatedTabs === null) {\n      this.setTabData();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { tabs } = this.props;\n    const customizer = (valueA, valueB) => {\n      if (typeof valueA === 'function' && typeof valueB === 'function') {\n        return valueA.toString() === valueB.toString();\n      }\n\n      return undefined;\n    };\n\n    if (!_isEqualWith(prevProps.tabs, tabs, customizer)) {\n      this.setTabData();\n    }\n  }\n\n  /**\n   * On tab selected\n   *\n   * @event onTab\n   * @param {object} params\n   * @param {number} params.index\n   */\n  onTab = ({ index }) => {\n    const { onTab } = this.props;\n\n    this.setState(\n      {\n        updatedActiveTab: index\n      },\n      () => onTab({ index })\n    );\n  };\n\n  /**\n   * Convert tab objects into the required PF Tab format.\n   */\n  setTabData() {\n    const { activeTab, defaultActiveTab, tabs } = this.props;\n    let updatedActiveTab = defaultActiveTab;\n\n    const updatedTabs = tabs.map(({ active, content, title }, index) => {\n      updatedActiveTab = active ? index : updatedActiveTab;\n\n      return (\n        <Tab key={title} eventKey={index} title={<TabTitleText>{title}</TabTitleText>}>\n          {content}\n        </Tab>\n      );\n    });\n\n    if (typeof activeTab === 'number') {\n      updatedActiveTab = activeTab;\n    }\n\n    this.setState({\n      updatedActiveTab,\n      updatedTabs\n    });\n  }\n\n  /**\n   * Apply props to tabs.\n   *\n   * @returns {Node}\n   */\n  renderTabs() {\n    const { updatedActiveTab, updatedTabs } = this.state;\n    const { className, hasOverflowScroll } = this.props;\n\n    return (\n      <PfTabs\n        className={`curiosity-tabs${(!hasOverflowScroll && '__no-scroll') || ''} ${className || ''}`}\n        activeKey={updatedActiveTab}\n        onSelect={(event, index) => this.onTab({ event, index })}\n        mountOnEnter\n        unmountOnExit\n        inset={{\n          default: 'insetNone',\n          md: 'insetLg'\n        }}\n      >\n        {updatedTabs}\n      </PfTabs>\n    );\n  }\n\n  /**\n   * Render tabs.\n   *\n   * @returns {Node}\n   */\n  render() {\n    return (\n      <Grid className=\"curiosity-tabs-container\">\n        <GridItem span={12}>{this.renderTabs()}</GridItem>\n      </Grid>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{tabs: Array, hasOverflowScroll: boolean, onTab: Function, className: string,\n *     defaultActiveTab: number, activeTab: number}}\n */\nTabs.propTypes = {\n  activeTab: PropTypes.number,\n  className: PropTypes.string,\n  defaultActiveTab: PropTypes.number,\n  hasOverflowScroll: PropTypes.bool,\n  onTab: PropTypes.func,\n  tabs: PropTypes.arrayOf(\n    PropTypes.shape({\n      active: PropTypes.bool,\n      content: PropTypes.node.isRequired,\n      title: PropTypes.node.isRequired\n    })\n  )\n};\n\n/**\n * Default props.\n *\n * @type {{tabs: Array, hasOverflowScroll: boolean, onTab: Function, className: string,\n *     defaultActiveTab: number, activeTab: number}}\n */\nTabs.defaultProps = {\n  activeTab: null,\n  className: '',\n  defaultActiveTab: 0,\n  hasOverflowScroll: false,\n  onTab: helpers.noop,\n  tabs: []\n};\n\nexport { Tabs as default, Tabs };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Toolbar as PfToolbar,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup\n} from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport { useProductToolbarQuery } from '../productView/productViewContext';\nimport { useToolbarFieldClear, useToolbarFieldClearAll, useToolbarFields } from './toolbarContext';\nimport { ToolbarFieldSelectCategory, useSelectCategoryOptions } from './toolbarFieldSelectCategory';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Application filter toolbar.\n *\n * @fires onClearFilter\n * @fires onClearAll\n * @param {object} props\n * @param {boolean} props.hardFilterReset On clearing all fields allow the category to reset as well.\n * @param {boolean} props.isDisabled\n * @param {Function} props.t\n * @param {Function} props.useProductToolbarQuery\n * @param {Function} props.useSelectCategoryOptions\n * @param {Function} props.useToolbarFieldClear\n * @param {Function} props.useToolbarFieldClearAll\n * @param {Function} props.useToolbarFields\n * @returns {Node}\n */\nconst Toolbar = ({\n  hardFilterReset,\n  isDisabled,\n  t,\n  useProductToolbarQuery: useAliasProductToolbarQuery,\n  useSelectCategoryOptions: useAliasSelectCategoryOptions,\n  useToolbarFieldClear: useAliasToolbarFieldClear,\n  useToolbarFieldClearAll: useAliasToolbarFieldClearAll,\n  useToolbarFields: useAliasToolbarFields\n}) => {\n  const toolbarFieldQueries = useAliasProductToolbarQuery();\n  const { currentCategory, options } = useAliasSelectCategoryOptions();\n  const clearField = useAliasToolbarFieldClear();\n  const clearAllFields = useAliasToolbarFieldClearAll();\n  const { itemFields, secondaryFields } = useAliasToolbarFields();\n\n  if (isDisabled || (!options?.length && !secondaryFields?.length)) {\n    return null;\n  }\n\n  /**\n   * Clear a specific value\n   *\n   * @event onClearFilter\n   * @param {object} params\n   * @param {*} params.value\n   * @returns {void}\n   */\n  const onClearFilter = ({ value }) => clearField(value);\n\n  /**\n   * Clear all active filters.\n   *\n   * @event onClearAll\n   * @returns {void}\n   */\n  const onClearAll = () => clearAllFields(hardFilterReset);\n\n  /**\n   * Set selected options for chip display.\n   *\n   * @param {object} params\n   * @param {*} params.value\n   * @returns {Array}\n   */\n  const setSelectedOptions = ({ value: filterName } = {}) => {\n    const filterValue = toolbarFieldQueries?.[filterName];\n    return (\n      (typeof filterValue === 'string' && [\n        t('curiosity-toolbar.label', { context: [filterName, (filterValue === '' && 'none') || filterValue] })\n      ]) ||\n      []\n    );\n  };\n\n  return (\n    <PfToolbar\n      id=\"curiosity-toolbar\"\n      className=\"curiosity-toolbar pf-m-toggle-group-container ins-c-primary-toolbar\"\n      collapseListedFiltersBreakpoint=\"sm\"\n      clearAllFilters={onClearAll}\n      clearFiltersButtonText={t('curiosity-toolbar.clearFilters')}\n    >\n      <ToolbarContent>\n        <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"md\">\n          <ToolbarGroup variant=\"filter-group\">\n            {options.length > 1 && (\n              <ToolbarItem>\n                <ToolbarFieldSelectCategory />\n              </ToolbarItem>\n            )}\n            {options.map(({ title, value: filterName, component: OptionComponent, isClearable }) => {\n              const chipProps = { categoryName: title };\n\n              if (isClearable !== false) {\n                chipProps.chips = setSelectedOptions({ value: filterName });\n                chipProps.deleteChip = () => onClearFilter({ value: filterName });\n              }\n\n              return (\n                <ToolbarFilter\n                  key={filterName}\n                  showToolbarItem={currentCategory === filterName || options.length === 1}\n                  {...chipProps}\n                >\n                  <OptionComponent isFilter />\n                </ToolbarFilter>\n              );\n            })}\n          </ToolbarGroup>\n        </ToolbarToggleGroup>\n        <ToolbarGroup key=\"itemFields\">{itemFields}</ToolbarGroup>\n        <ToolbarGroup key=\"secondaryFields\" alignment={{ default: 'alignRight' }}>\n          {secondaryFields}\n        </ToolbarGroup>\n      </ToolbarContent>\n    </PfToolbar>\n  );\n};\n\n/**\n * Prop types\n *\n * @type {{useToolbarFieldClear: Function, t: Function, useSelectCategoryOptions: Function, hardFilterReset: boolean,\n *     useToolbarFields: Function, useProductToolbarQuery: Function, isDisabled: boolean,\n *     useToolbarFieldClearAll: Function}}\n */\nToolbar.propTypes = {\n  hardFilterReset: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  t: PropTypes.func,\n  useProductToolbarQuery: PropTypes.func,\n  useSelectCategoryOptions: PropTypes.func,\n  useToolbarFieldClear: PropTypes.func,\n  useToolbarFieldClearAll: PropTypes.func,\n  useToolbarFields: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useToolbarFieldClear: Function, t: Function, useSelectCategoryOptions: Function, hardFilterReset: boolean,\n *     useToolbarFields: Function, useProductToolbarQuery: Function, isDisabled: boolean,\n *     useToolbarFieldClearAll: Function}}\n */\nToolbar.defaultProps = {\n  hardFilterReset: false,\n  isDisabled: helpers.UI_DISABLED_TOOLBAR,\n  t: translate,\n  useProductToolbarQuery,\n  useSelectCategoryOptions,\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFields\n};\n\nexport { Toolbar as default, Toolbar };\n","import React, { useMemo } from 'react';\nimport { ToolbarItem } from '@patternfly/react-core';\nimport { useProductQuery, useProductToolbarConfig } from '../productView/productViewContext';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { useOnSelect as useSelectCategoryOnSelect, toolbarFieldOptions } from './toolbarFieldSelectCategory';\nimport { useOnSelect as useArchitectureOnSelect } from './toolbarFieldArchitecture';\nimport { useOnSelect as useBillingProviderOnSelect } from './toolbarFieldBillingProvider';\nimport { useOnSelect as useCategoryOnSelect } from './toolbarFieldCategory';\nimport { useOnSelect as useSlaOnSelect } from './toolbarFieldSla';\nimport { useOnSelect as useUsageOnSelect } from './toolbarFieldUsage';\nimport { useOnSelect as useVariantOnSelect } from './toolbarFieldVariant';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Clear a specific toolbar category using a select component's OnSelect hook.\n *\n * @param {object} options\n * @param {Function} options.useArchitectureOnSelect\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useCategoryOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @param {Function} options.useVariantOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClear = ({\n  useArchitectureOnSelect: useAliasArchitectureOnSelect = useArchitectureOnSelect,\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useCategoryOnSelect: useAliasCategoryOnSelect = useCategoryOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect,\n  useVariantOnSelect: useAliasVariantOnSelect = useVariantOnSelect\n} = {}) => {\n  const architectureOnSelect = useAliasArchitectureOnSelect();\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const categoryOnSelect = useAliasCategoryOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n  const variantOnSelect = useAliasVariantOnSelect();\n\n  return field => {\n    switch (field) {\n      case RHSM_API_QUERY_SET_TYPES.ARCHITECTURE:\n        architectureOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER:\n        billingOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.CATEGORY:\n        categoryOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.SLA:\n        slaOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.USAGE:\n        usageOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.VARIANT:\n        variantOnSelect();\n        break;\n      default:\n        break;\n    }\n  };\n};\n\n/**\n * Clear all available toolbar categories.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useArchitectureOnSelect\n * @param {Function} options.useSelectCategoryOnSelect\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useCategoryOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @param {Function} options.useVariantOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClearAll = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useArchitectureOnSelect: useAliasArchitectureOnSelect = useArchitectureOnSelect,\n  useSelectCategoryOnSelect: useAliasSelectCategoryOnSelect = useSelectCategoryOnSelect,\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useCategoryOnSelect: useAliasCategoryOnSelect = useCategoryOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect,\n  useVariantOnSelect: useAliasVariantOnSelect = useVariantOnSelect\n} = {}) => {\n  const {\n    [RHSM_API_QUERY_SET_TYPES.ARCHITECTURE]: architecture,\n    [RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER]: billingProvider,\n    [RHSM_API_QUERY_SET_TYPES.CATEGORY]: category,\n    [RHSM_API_QUERY_SET_TYPES.SLA]: sla,\n    [RHSM_API_QUERY_SET_TYPES.USAGE]: usage,\n    [RHSM_API_QUERY_SET_TYPES.VARIANT]: variant\n  } = useAliasProductQuery();\n  const architectureOnSelect = useAliasArchitectureOnSelect();\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const categoryOnSelect = useAliasCategoryOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n  const selectCategoryOnSelect = useAliasSelectCategoryOnSelect();\n  const variantOnSelect = useAliasVariantOnSelect();\n\n  return hardFilterReset => {\n    if (typeof architecture === 'string') {\n      architectureOnSelect();\n    }\n\n    if (typeof billingProvider === 'string') {\n      billingOnSelect();\n    }\n\n    if (typeof category === 'string') {\n      categoryOnSelect();\n    }\n\n    if (typeof sla === 'string') {\n      slaOnSelect();\n    }\n\n    if (typeof usage === 'string') {\n      usageOnSelect();\n    }\n\n    if (typeof variant === 'string') {\n      variantOnSelect();\n    }\n\n    if (hardFilterReset) {\n      selectCategoryOnSelect();\n    }\n  };\n};\n\n/**\n * Return lists of item and secondary toolbar fields for display.\n *\n * @param {object} options\n * @param {Array} options.categoryOptions\n * @param {Function} options.useProductToolbarConfig\n * @returns {Array}\n */\nconst useToolbarFields = ({\n  categoryOptions = toolbarFieldOptions,\n  useProductToolbarConfig: useAliasProductToolbarConfig = useProductToolbarConfig\n} = {}) => {\n  const { filters = [] } = useAliasProductToolbarConfig();\n\n  return useMemo(() => {\n    const setFilter = ({ id, content, ...filterProps }) => {\n      const option = categoryOptions.find(({ value: categoryOptionValue }) => id === categoryOptionValue);\n      const { component: OptionComponent } = option || {};\n\n      return (\n        (OptionComponent && (\n          <ToolbarItem key={`option-${id}`}>\n            <OptionComponent isFilter={false} {...filterProps} />\n          </ToolbarItem>\n        )) || (\n          <ToolbarItem key={id || helpers.generateId()}>\n            {typeof content === 'function' ? content() : content}\n          </ToolbarItem>\n        ) ||\n        null\n      );\n    };\n\n    return {\n      itemFields: filters.filter(({ isItem }) => isItem === true).map(setFilter),\n      secondaryFields: filters.filter(({ isSecondary }) => isSecondary === true).map(setFilter)\n    };\n  }, [categoryOptions, filters]);\n};\n\nconst context = {\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFields\n};\n\nexport { context as default, context, useToolbarFieldClear, useToolbarFieldClearAll, useToolbarFields };\n"],"names":["BannerMessages","messages","useAliasGetAppMessages","useGetAppMessages","useState","hideAlerts","setHideAlerts","alerts","setAlerts","appMessages","data","useShallowCompareEffect","updatedMessages","length","Object","entries","forEach","key","value","message","find","id","push","map","title","variant","AlertVariant","actionClose","AlertActionCloseButton","onClose","Alert","className","defaultProps","translate","context","helpers","appName","Button","isInline","component","icon","ExternalLinkAltIcon","iconPosition","target","href","getMessageReports","reduxActions","useDispatch","useAliasDispatch","storeHooks","useProduct","useAliasProduct","useProductQuery","useAliasProductQuery","useSelectorsResponse","useAliasSelectorsResponse","productId","query","dispatch","selector","report","error","fulfilled","pending","dateHelpers","startDate","endDate","updatedQuery","RHSM_API_QUERY_SET_TYPES","GRANULARITY_TYPES","toISOString","updatedData","cloudigradeMismatch","undefined","reverse","rhsmConstants","GraphCard","isDisabled","useAliasParseFiltersSettings","useParseFiltersSettings","groupedFiltersSettings","standaloneFiltersSettings","settings","metrics","GraphCardContext","GraphCardChart","filtersSettings","metric","GraphCardMetricTotals","children","t","useAliasMetricsSelector","useMetricsSelector","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","dataSets","metricId","meta","lastDate","date","lastHasData","hasData","lastValue","y","isCurrentDate","currentDate","currentHasData","currentValue","monthlyDate","totalMonthlyDate","monthlyHasData","totalMonthlyHasData","monthlyValue","totalMonthlyValue","toolbarFieldOptions","option","selectedMonth","isCurrent","dailyDate","dailyHasData","dailyValue","_camelCase","Card","isPlain","CardHeader","CardTitle","Title","headingLevel","size","Loader","skeletonProps","SkeletonSize","month","CardBody","height","total","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","CardFooter","moment","InventoryCardHosts","props","useGetInventory","useGetHostsInventory","useOnColumnSort","useOnColumnSortHosts","InventoryCardSubscriptions","cardActions","useGetSubscriptionsInventory","useOnPage","useOnPageSubscriptions","useOnColumnSortSubscriptions","useProductInventoryConfig","useProductInventorySubscriptionsConfig","useProductInventoryQuery","useProductInventorySubscriptionsQuery","getInventory","useAliasProductInventoryQuery","inventory","subscriptionsInventory","cancelled","response","offset","perPage","type","reduxTypes","viewId","sortColumns","SORT_TYPES","_data","updatedDirection","direction","updatedSortColumn","values","SortByDirection","SORT_DIRECTION_TYPES","console","warn","InventoryTab","active","propTypes","PropTypes","useOnTab","index","tabs","InventoryTabs","activeTab","defaultActiveTab","useAliasOnTab","useAliasSelector","useSelector","updatedActiveTab","onTab","updatedChildren","React","child","childProps","content","count","Tabs","ProductView","useAliasRouteDetail","useRouteDetail","routeProductLabel","productParameter","productConfig","PageLayout","PageHeader","productLabel","PageColumns","config","initialInventoryFilters","initialSubscriptionsInventoryFilters","productDisplay","ProductViewContext","PageMessages","DISPLAY_TYPES","PageToolbar","Toolbar","PageSection","InventoryCard","renderProduct","state","updatedTabs","setState","this","setTabData","prevProps","_isEqualWith","valueA","valueB","toString","Tab","eventKey","TabTitleText","hasOverflowScroll","activeKey","onSelect","event","mountOnEnter","unmountOnExit","inset","default","md","Grid","GridItem","span","renderTabs","hardFilterReset","useAliasProductToolbarQuery","useProductToolbarQuery","useAliasSelectCategoryOptions","useSelectCategoryOptions","useAliasToolbarFieldClear","useToolbarFieldClear","useAliasToolbarFieldClearAll","useToolbarFieldClearAll","useAliasToolbarFields","useToolbarFields","toolbarFieldQueries","currentCategory","options","clearField","clearAllFields","itemFields","secondaryFields","collapseListedFiltersBreakpoint","clearAllFilters","clearFiltersButtonText","ToolbarContent","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarGroup","ToolbarItem","ToolbarFieldSelectCategory","filterName","OptionComponent","chipProps","categoryName","isClearable","chips","filterValue","setSelectedOptions","deleteChip","ToolbarFilter","showToolbarItem","isFilter","alignment","useArchitectureOnSelect","useAliasArchitectureOnSelect","useBillingProviderOnSelect","useAliasBillingProviderOnSelect","useCategoryOnSelect","useAliasCategoryOnSelect","useSlaOnSelect","useAliasSlaOnSelect","useUsageOnSelect","useAliasUsageOnSelect","useVariantOnSelect","useAliasVariantOnSelect","architectureOnSelect","billingOnSelect","categoryOnSelect","slaOnSelect","usageOnSelect","variantOnSelect","field","useSelectCategoryOnSelect","useAliasSelectCategoryOnSelect","architecture","billingProvider","category","sla","usage","selectCategoryOnSelect","categoryOptions","useProductToolbarConfig","useAliasProductToolbarConfig","filters","useMemo","setFilter","filterProps","categoryOptionValue","filter","isItem","isSecondary"],"sourceRoot":""}