{"version":3,"file":"js/4944.1645497754172.221447f8361ae814d3ce.js","mappings":"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","sources":["webpack:///./src/components/bannerMessages/bannerMessages.js","webpack:///./src/components/graphCard/graphCard.js","webpack:///./src/components/graphCard/graphCardMetric.js","webpack:///./src/components/graphCard/graphCardMetricTotals.js","webpack:///./src/components/graphCard/graphCardMetrics.js","webpack:///./src/components/productView/productView.js","webpack:///./src/components/productView/productViewOpenShiftDedicated.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, AlertActionCloseButton, AlertVariant, Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { useShallowCompareEffect } from 'react-use';\nimport { apiQueries, storeHooks } from '../../redux';\nimport { translate } from '../i18n/i18n';\nimport { dateHelpers, helpers } from '../../common';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { useRouteDetail } from '../../hooks/useRouter';\n\n/**\n * Render banner messages.\n *\n * @param {object} props\n * @param {Array} props.messages\n * @param {Function} props.useRouteDetail\n * @param {Function} props.useAppMessages\n * @returns {Node}\n */\nconst BannerMessages = ({ messages, useRouteDetail: useAliasRouteDetail, useAppMessages: useAliasAppMessages }) => {\n  const [hideAlerts, setHideAlerts] = useState({});\n  const [alerts, setAlerts] = useState([]);\n  const { pathParameter: productId, productConfig } = useAliasRouteDetail() || {};\n  const isProductConfig = productConfig?.length === 1 && productConfig?.[0];\n  const { query } = apiQueries.parseRhsmQuery(productConfig?.[0]?.query || {});\n  const { appMessages } = useAliasAppMessages();\n\n  useShallowCompareEffect(() => {\n    if (productId && isProductConfig) {\n      const { startDate, endDate } = dateHelpers.getRangedDateTime('CURRENT');\n      const updatedGraphQuery = {\n        ...query,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString(),\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      };\n\n      storeHooks.rhsmActions.useGetMessageReports(productId, updatedGraphQuery);\n    }\n  }, [productId, isProductConfig, query]);\n\n  useShallowCompareEffect(() => {\n    const updatedMessages = [];\n\n    if (messages.length) {\n      Object.entries(appMessages).forEach(([key, value]) => {\n        if (hideAlerts[key] !== true && value === true) {\n          const message = messages.find(({ id }) => id === key);\n\n          if (message) {\n            updatedMessages.push({\n              key,\n              ...message\n            });\n          }\n        }\n      });\n    }\n\n    setAlerts(\n      updatedMessages.map(({ key, message, title, variant = AlertVariant.info }) => {\n        const actionClose = <AlertActionCloseButton onClose={() => setHideAlerts({ ...hideAlerts, [key]: true })} />;\n\n        return (\n          <Alert actionClose={actionClose} key={key} title={title} variant={variant}>\n            {message}\n          </Alert>\n        );\n      })\n    );\n  }, [appMessages, hideAlerts, messages]);\n\n  if (alerts?.length) {\n    return <div className=\"curiosity-banner-messages\">{alerts}</div>;\n  }\n\n  return null;\n};\n\n/**\n * Prop types.\n *\n * @type {{useAppMessages: Function, messages: Array, useRouteDetail: Function}}\n */\nBannerMessages.propTypes = {\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.node.isRequired,\n      message: PropTypes.node.isRequired,\n      variant: PropTypes.oneOf([...Object.values(AlertVariant)])\n    })\n  ),\n  useAppMessages: PropTypes.func,\n  useRouteDetail: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useAppMessages: Function, messages: Array, useRouteDetail: Function}}\n */\nBannerMessages.defaultProps = {\n  messages: [\n    {\n      id: 'cloudigradeMismatch',\n      title: translate('curiosity-banner.dataMismatchTitle'),\n      message: translate(\n        'curiosity-banner.dataMismatchMessage',\n        {\n          context: helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS !== '' && 'cloudigradeMismatch',\n          appName: helpers.UI_DISPLAY_NAME\n        },\n        [\n          <Button\n            isInline\n            component=\"a\"\n            variant=\"link\"\n            icon={<ExternalLinkAltIcon />}\n            iconPosition=\"right\"\n            target=\"_blank\"\n            href={helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS}\n          />\n        ]\n      )\n    }\n  ],\n  useAppMessages: storeHooks.rhsmSelectors.useAppMessages,\n  useRouteDetail\n};\n\nexport { BannerMessages as default, BannerMessages };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProductGraphConfig } from '../productView/productViewContext';\nimport { helpers } from '../../common';\nimport { GraphCardMetrics } from './graphCardMetrics';\nimport { GraphCardMetric } from './graphCardMetric';\nimport { graphCardHelpers } from './graphCardHelpers';\n\n/**\n * Set up graph cards. Expand filters with base graph settings.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useProductGraphConfig\n * @returns {Node}\n */\nconst GraphCard = ({ isDisabled, useProductGraphConfig: useAliasProductGraphConfig }) => {\n  const { filters } = useAliasProductGraphConfig();\n  const { groupedFilters, standaloneFilters } = graphCardHelpers.generateChartSettings(filters);\n\n  if (isDisabled) {\n    return null;\n  }\n\n  return (\n    <React.Fragment>\n      {(groupedFilters?.length && <GraphCardMetrics metricFilters={groupedFilters} />) || null}\n      {standaloneFilters.map(metricFilter => (\n        <GraphCardMetric key={`graphCard_${metricFilter.id}`} metricFilter={metricFilter} />\n      ))}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphConfig: Function, isDisabled: boolean}}\n */\nGraphCard.propTypes = {\n  isDisabled: PropTypes.bool,\n  useProductGraphConfig: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphConfig: Function, isDisabled: boolean}}\n */\nGraphCard.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_GRAPH,\n  useProductGraphConfig\n};\n\nexport { GraphCard as default, GraphCard };\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { GraphCardChart } from './graphCardChart';\nimport { useProductGraphConfig } from '../productView/productViewContext';\nimport { GraphCardContext } from './graphCardContext';\nimport { rhsmConstants } from '../../services/rhsm/rhsmConstants';\nimport { GraphCardMetricTotals } from './graphCardMetricTotals';\n\n/**\n * Display a single graph metric.\n *\n * @param {object} props\n * @param {object} props.metricFilter\n * @param {Function} props.useProductGraphConfig\n * @returns {Node}\n */\nconst GraphCardMetric = ({ metricFilter, useProductGraphConfig: useAliasProductGraphConfig }) => {\n  const [context, setContext] = useState({});\n  const { settings } = useAliasProductGraphConfig();\n\n  useEffect(() => {\n    setContext({\n      settings: {\n        padding: {\n          bottom: 75,\n          left: 75,\n          right: 45,\n          top: 45\n        },\n        ...settings,\n        isStandalone: true,\n        metric: metricFilter,\n        metrics: [metricFilter]\n      }\n    });\n  }, [metricFilter, settings, setContext]);\n\n  return (\n    <GraphCardContext.Provider value={context}>\n      <GraphCardMetricTotals>\n        <GraphCardChart />\n      </GraphCardMetricTotals>\n    </GraphCardContext.Provider>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphConfig: Function, metricFilter: object}}\n */\nGraphCardMetric.propTypes = {\n  metricFilter: PropTypes.shape({\n    id: PropTypes.oneOf([...Object.values(rhsmConstants.RHSM_API_PATH_METRIC_TYPES)])\n  }),\n  useProductGraphConfig: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphConfig: Function, metricFilter: object}}\n */\nGraphCardMetric.defaultProps = {\n  metricFilter: {},\n  useProductGraphConfig\n};\n\nexport { GraphCardMetric as default, GraphCardMetric };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter, CardTitle, Flex, FlexItem } from '@patternfly/react-core';\nimport moment from 'moment';\nimport _camelCase from 'lodash/camelCase';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useMetricsSelector } from './graphCardContext';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { Loader, SkeletonSize } from '../loader/loader';\nimport { dateHelpers, helpers } from '../../common';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldRangedMonthly';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Display totals for a single metric.\n *\n * @param {object} props\n * @param {Node} props.children\n * @param {Function} props.t\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardMetricTotals = ({\n  children,\n  t,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate } = useAliasProductGraphTallyQuery();\n  const { pending, error, fulfilled, dataSets = [] } = useAliasMetricsSelector();\n  const { data = [], id: metricId, meta = {} } = dataSets[0] || {};\n  const { date: lastDate, hasData: lastHasData, y: lastValue } = data[data.length - 1] || {};\n  const {\n    date: currentDate,\n    hasData: currentHasData,\n    y: currentValue\n  } = data.find(({ isCurrentDate }) => isCurrentDate === true) || {};\n\n  const { totalMonthlyDate: monthlyDate, totalMonthlyHasData: monthlyHasData, totalMonthlyValue: monthlyValue } = meta;\n\n  const { title: selectedMonth, isCurrent } =\n    toolbarFieldOptions.find(\n      option => option.title === startDate || option.value.startDate.toISOString() === startDate\n    ) || {};\n\n  const dailyDate = isCurrent ? currentDate : lastDate;\n  const dailyHasData = isCurrent ? currentHasData : lastHasData;\n  const dailyValue = isCurrent ? currentValue : lastValue;\n\n  return (\n    <Flex data-test={`graphMetricTotals-${_camelCase(metricId)}`} className=\"curiosity-usage-graph__totals\">\n      <Flex flex={{ default: 'flex_1' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-column\">\n          <Card\n            data-test=\"graphDailyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric_dailyTotal', {\n                context: metricId,\n                month: selectedMonth\n              })}\n            </CardTitle>\n            <MinHeight key=\"currentBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric_total',\n                      {\n                        context: (dailyHasData && metricId) || '',\n                        total: helpers\n                          .numberDisplay(dailyValue)\n                          ?.format({\n                            average: true,\n                            mantissa: 5,\n                            trimMantissa: true,\n                            lowPrecision: false\n                          })\n                          ?.toUpperCase()\n                      },\n                      [<strong title={dailyValue} aria-label={dailyValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"currentFooter\">\n              <CardFooter>\n                <div className={(!dailyHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    dailyDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(dailyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n          <Card\n            data-test=\"graphMonthlyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric_monthlyTotal', {\n                context: metricId,\n                month: selectedMonth\n              })}\n            </CardTitle>\n            <MinHeight key=\"totalMonthlyBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric_total',\n                      {\n                        context: (monthlyHasData && metricId) || '',\n                        total: helpers\n                          .numberDisplay(monthlyValue)\n                          ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: false })\n                          ?.toUpperCase()\n                      },\n                      [<strong title={monthlyValue} aria-label={monthlyValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"totalMonthlyFooter\">\n              <CardFooter>\n                <div className={(!monthlyHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    monthlyDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(monthlyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n        </FlexItem>\n      </Flex>\n      <Flex flex={{ default: 'flex_3' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-graph-column\">{children}</FlexItem>\n      </Flex>\n    </Flex>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.propTypes = {\n  children: PropTypes.node,\n  t: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.defaultProps = {\n  children: null,\n  t: translate,\n  useMetricsSelector,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardMetricTotals as default, GraphCardMetricTotals };\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { GraphCardChart } from './graphCardChart';\nimport { useProductGraphConfig } from '../productView/productViewContext';\nimport { GraphCardContext } from './graphCardContext';\nimport { rhsmConstants } from '../../services/rhsm/rhsmConstants';\n\n/**\n * Display a single graph metric.\n *\n * @param {object} props\n * @param {Array} props.metricFilters\n * @param {Function} props.useProductGraphConfig\n * @returns {Node}\n */\nconst GraphCardMetrics = ({ metricFilters, useProductGraphConfig: useAliasProductGraphConfig }) => {\n  const [context, setContext] = useState({});\n  const { settings } = useAliasProductGraphConfig();\n\n  useEffect(() => {\n    setContext({\n      settings: {\n        ...settings,\n        isStandalone: false,\n        metric: undefined,\n        metrics: metricFilters\n      }\n    });\n  }, [metricFilters, settings, setContext]);\n\n  return (\n    <GraphCardContext.Provider value={context}>\n      <GraphCardChart />\n    </GraphCardContext.Provider>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphConfig: Function, metricFilters: Array}}\n */\nGraphCardMetrics.propTypes = {\n  metricFilters: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.oneOf([...Object.values(rhsmConstants.RHSM_API_PATH_METRIC_TYPES)])\n    })\n  ),\n  useProductGraphConfig: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphConfig: Function, metricFilters: Array}}\n */\nGraphCardMetrics.defaultProps = {\n  metricFilters: [],\n  useProductGraphConfig\n};\n\nexport { GraphCardMetrics as default, GraphCardMetrics };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport { useRouteDetail } from '../../hooks/useRouter';\nimport { ProductViewContext } from './productViewContext';\nimport { PageLayout, PageHeader, PageSection, PageToolbar, PageMessages, PageColumns } from '../pageLayout/pageLayout';\nimport { apiQueries } from '../../redux';\nimport { ConnectedGraphCard as ConnectedGraphCardDeprecated } from '../graphCard/graphCard.deprecated';\nimport { GraphCard } from '../graphCard/graphCard';\nimport { Toolbar } from '../toolbar/toolbar';\nimport { ConnectedInventoryList as ConnectedInventoryListDeprecated } from '../inventoryCard/inventoryList.deprecated';\nimport { ConnectedInventoryCard } from '../inventoryCard/inventoryCard';\nimport { helpers } from '../../common';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport { SelectPosition } from '../form/select';\nimport { ToolbarFieldGranularity } from '../toolbar/toolbarFieldGranularity';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport { InventoryCardSubscriptions } from '../inventoryCardSubscriptions/inventoryCardSubscriptions';\nimport { RHSM_API_PATH_PRODUCT_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * ToDo: base for default product layouts, add additional props for various toolbars\n * Next steps include...\n * Consider being able to pass customized toolbars for GraphCard and the\n * various Inventory displays. Have to evaluate how to handle the global toolbar, one\n * consideration is creating optional widgets with self-contained state update ability\n * based off of context/props/etc.\n *\n * Moving existing products to this layout, or maintaining them \"as is\", then renaming and\n * relocating them to this directory if they've been customized beyond a basic layout.\n */\n/**\n * Display product columns.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Node|boolean} props.toolbarGraph\n * @param {boolean} props.toolbarGraphDescription\n * @param {Function} props.useRouteDetail\n * @returns {Node}\n */\nconst ProductView = ({ t, toolbarGraph, toolbarGraphDescription, useRouteDetail: useAliasRouteDetail }) => {\n  const { pathParameter: routeProductId, productParameter: routeProductLabel, productConfig } = useAliasRouteDetail();\n\n  const renderProduct = config => {\n    const {\n      graphTallyQuery,\n      inventoryHostsQuery,\n      inventorySubscriptionsQuery,\n      query,\n      initialGuestsFilters,\n      initialInventoryFilters,\n      initialInventorySettings,\n      initialSubscriptionsInventoryFilters,\n      productId,\n      viewId\n    } = config;\n\n    if (!productId || !viewId) {\n      return null;\n    }\n\n    const { graphTallyQuery: initialGraphTallyQuery, inventoryHostsQuery: initialInventoryHostsQuery } =\n      apiQueries.parseRhsmQuery(query, { graphTallyQuery, inventoryHostsQuery, inventorySubscriptionsQuery });\n\n    let graphCardTooltip = null;\n\n    if (toolbarGraphDescription) {\n      graphCardTooltip = (\n        <Tooltip\n          content={<p>{t('curiosity-graph.cardHeadingDescription', { context: productId })}</p>}\n          position={TooltipPosition.top}\n          enableFlip={false}\n          distance={5}\n          entryDelay={100}\n          exitDelay={0}\n        >\n          <sup className=\"curiosity-icon__info\">\n            <InfoCircleIcon />\n          </sup>\n        </Tooltip>\n      );\n    }\n\n    const graphCardTitle = (\n      <React.Fragment>\n        {t('curiosity-graph.cardHeading', { context: productId })}\n        {graphCardTooltip}\n      </React.Fragment>\n    );\n\n    return (\n      <ProductViewContext.Provider value={config} key={`product_${productId}`}>\n        <PageToolbar>\n          <Toolbar />\n        </PageToolbar>\n        <PageSection>\n          {productId !== RHSM_API_PATH_PRODUCT_TYPES.RHOSAK && (\n            <ConnectedGraphCardDeprecated\n              key={`graph_${productId}`}\n              query={initialGraphTallyQuery}\n              productId={productId}\n              viewId={viewId}\n              cardTitle={graphCardTitle}\n            >\n              {(React.isValidElement(toolbarGraph) && toolbarGraph) ||\n                (toolbarGraph !== false && <ToolbarFieldGranularity position={SelectPosition.right} />)}\n            </ConnectedGraphCardDeprecated>\n          )}\n          {productId === RHSM_API_PATH_PRODUCT_TYPES.RHOSAK && <GraphCard />}\n        </PageSection>\n        <PageSection\n          className={(productId === RHSM_API_PATH_PRODUCT_TYPES.RHOSAK && 'curiosity-page-section__tabs') || ''}\n        >\n          <InventoryTabs\n            key={`inventory_${productId}`}\n            productId={productId}\n            isDisabled={\n              (!initialInventoryFilters && !initialSubscriptionsInventoryFilters) || helpers.UI_DISABLED_TABLE\n            }\n          >\n            {!helpers.UI_DISABLED_TABLE_HOSTS &&\n              productId !== RHSM_API_PATH_PRODUCT_TYPES.RHOSAK &&\n              initialInventoryFilters && (\n                <InventoryTab\n                  key={`inventory_hosts_${productId}`}\n                  title={t('curiosity-inventory.tabHosts', { context: ['noInstances', productId] })}\n                >\n                  <ConnectedInventoryListDeprecated\n                    key={`inv_${productId}`}\n                    filterGuestsData={initialGuestsFilters}\n                    filterInventoryData={initialInventoryFilters}\n                    productId={productId}\n                    settings={initialInventorySettings}\n                    query={initialInventoryHostsQuery}\n                    viewId={viewId}\n                  />\n                </InventoryTab>\n              )}\n            {!helpers.UI_DISABLED_TABLE_INSTANCES &&\n              productId === RHSM_API_PATH_PRODUCT_TYPES.RHOSAK &&\n              initialInventoryFilters && (\n                <InventoryTab\n                  key={`inventory_instances_${productId}`}\n                  title={t('curiosity-inventory.tabInstances', { context: ['noInstances', productId] })}\n                >\n                  <ConnectedInventoryCard />\n                </InventoryTab>\n              )}\n            {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && initialSubscriptionsInventoryFilters && (\n              <InventoryTab\n                key={`inventory_subs_${productId}`}\n                title={t('curiosity-inventory.tabSubscriptions', { context: productId })}\n              >\n                <InventoryCardSubscriptions />\n              </InventoryTab>\n            )}\n          </InventoryTabs>\n        </PageSection>\n      </ProductViewContext.Provider>\n    );\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader productLabel={routeProductLabel}>\n        {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: routeProductLabel })}\n      </PageHeader>\n      <PageMessages>{routeProductId !== RHSM_API_PATH_PRODUCT_TYPES.RHOSAK && <BannerMessages />}</PageMessages>\n      <PageColumns>{productConfig.map(config => renderProduct(config))}</PageColumns>\n    </PageLayout>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), toolbarGraphDescription: boolean, useRouteDetail: Function}}\n */\nProductView.propTypes = {\n  t: PropTypes.func,\n  toolbarGraph: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n  toolbarGraphDescription: PropTypes.bool,\n  useRouteDetail: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), toolbarGraphDescription: boolean, useRouteDetail: Function}}\n */\nProductView.defaultProps = {\n  t: translate,\n  toolbarGraph: null,\n  toolbarGraphDescription: false,\n  useRouteDetail\n};\n\nexport { ProductView as default, ProductView };\n","import React from 'react';\nimport { ProductView } from './productView';\nimport { SelectPosition } from '../form/select';\nimport { ToolbarFieldRangedMonthly } from '../toolbar/toolbarFieldRangedMonthly';\n\n/**\n * An OpenShift Dedicated configured view.\n *\n * @returns {Node}\n */\nconst ProductViewOpenShiftDedicated = () => (\n  <ProductView toolbarGraph={<ToolbarFieldRangedMonthly position={SelectPosition.right} />} toolbarGraphDescription />\n);\n\n/**\n * Prop types.\n *\n * @type {{}}\n */\nProductViewOpenShiftDedicated.propTypes = {};\n\n/**\n * Default props.\n *\n * @type {{}}\n */\nProductViewOpenShiftDedicated.defaultProps = {};\n\nexport { ProductViewOpenShiftDedicated as default, ProductViewOpenShiftDedicated };\n"],"names":["BannerMessages","messages","useAliasRouteDetail","useRouteDetail","useAliasAppMessages","useAppMessages","useState","hideAlerts","setHideAlerts","alerts","setAlerts","productId","pathParameter","productConfig","isProductConfig","length","query","apiQueries","appMessages","useShallowCompareEffect","dateHelpers","startDate","endDate","updatedGraphQuery","RHSM_API_QUERY_TYPES","GRANULARITY_TYPES","toISOString","storeHooks","updatedMessages","Object","entries","forEach","key","value","message","find","id","push","map","title","variant","AlertVariant","actionClose","AlertActionCloseButton","onClose","Alert","className","defaultProps","translate","context","helpers","appName","Button","isInline","component","icon","ExternalLinkAltIcon","iconPosition","target","href","GraphCard","isDisabled","filters","useAliasProductGraphConfig","useProductGraphConfig","graphCardHelpers","groupedFilters","standaloneFilters","GraphCardMetrics","metricFilters","metricFilter","GraphCardMetric","setContext","settings","useEffect","padding","bottom","left","right","top","isStandalone","metric","metrics","GraphCardContext","GraphCardMetricTotals","GraphCardChart","children","t","useAliasMetricsSelector","useMetricsSelector","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","RHSM_API_QUERY_SET_TYPES","pending","error","fulfilled","dataSets","data","metricId","meta","lastDate","date","lastHasData","hasData","lastValue","y","isCurrentDate","currentDate","currentHasData","currentValue","monthlyDate","totalMonthlyDate","monthlyHasData","totalMonthlyHasData","monthlyValue","totalMonthlyValue","toolbarFieldOptions","option","selectedMonth","isCurrent","dailyDate","dailyHasData","dailyValue","Flex","_camelCase","flex","default","direction","alignSelf","FlexItem","Card","CardTitle","month","MinHeight","CardBody","Loader","skeletonProps","size","SkeletonSize","total","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","CardFooter","moment","undefined","ProductView","toolbarGraph","toolbarGraphDescription","routeProductId","routeProductLabel","productParameter","PageLayout","PageHeader","productLabel","PageMessages","RHSM_API_PATH_PRODUCT_TYPES","PageColumns","config","graphTallyQuery","inventoryHostsQuery","inventorySubscriptionsQuery","initialGuestsFilters","initialInventoryFilters","initialInventorySettings","initialSubscriptionsInventoryFilters","viewId","initialGraphTallyQuery","initialInventoryHostsQuery","graphCardTooltip","Tooltip","content","position","TooltipPosition","enableFlip","distance","entryDelay","exitDelay","graphCardTitle","ProductViewContext","PageToolbar","Toolbar","PageSection","ConnectedGraphCard","cardTitle","React","ToolbarFieldGranularity","SelectPosition","InventoryTab","ConnectedInventoryList","filterGuestsData","filterInventoryData","ConnectedInventoryCard","InventoryCardSubscriptions","renderProduct","ProductViewOpenShiftDedicated","ToolbarFieldRangedMonthly"],"sourceRoot":""}