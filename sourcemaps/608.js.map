{"version":3,"file":"js/608.1667512169656.55dd5beade07634c82a9.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCard.js","webpack:///./src/components/graphCard/graphCardChart.js","webpack:///./src/components/graphCard/graphCardChartTitleTooltip.js","webpack:///./src/components/graphCard/graphCardContext.js","webpack:///./src/components/graphCard/graphCardMetricTotals.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProductGraphConfig } from '../productView/productViewContext';\nimport { helpers } from '../../common';\nimport { GraphCardMetricTotals } from './graphCardMetricTotals';\nimport { GraphCardChart } from './graphCardChart';\nimport { GraphCardContext } from './graphCardContext';\nimport { graphCardHelpers } from './graphCardHelpers';\n\n/**\n * Set up graph cards. Expand filters with base graph settings.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useProductGraphConfig\n * @returns {Node}\n */\nconst GraphCard = ({ isDisabled, useProductGraphConfig: useAliasProductGraphConfig }) => {\n  const { filters, settings } = useAliasProductGraphConfig();\n  const { groupedFiltersSettings, standaloneFiltersSettings } = graphCardHelpers.generateChartSettings(\n    filters,\n    settings\n  );\n\n  if (isDisabled) {\n    return null;\n  }\n\n  return (\n    <React.Fragment>\n      {(groupedFiltersSettings && (\n        <GraphCardContext.Provider value={groupedFiltersSettings}>\n          <GraphCardChart />\n        </GraphCardContext.Provider>\n      )) ||\n        null}\n      {standaloneFiltersSettings?.map(filtersSettings => (\n        <GraphCardContext.Provider key={`graphCard_${filtersSettings?.settings?.metric?.id}`} value={filtersSettings}>\n          <GraphCardMetricTotals>\n            <GraphCardChart />\n          </GraphCardMetricTotals>\n        </GraphCardContext.Provider>\n      ))}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphConfig: Function, isDisabled: boolean}}\n */\nGraphCard.propTypes = {\n  isDisabled: PropTypes.bool,\n  useProductGraphConfig: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphConfig: Function, isDisabled: boolean}}\n */\nGraphCard.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_GRAPH,\n  useProductGraphConfig\n};\n\nexport { GraphCard as default, GraphCard };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardActions, CardBody, CardHeader, CardTitle, Title } from '@patternfly/react-core';\nimport { useShallowCompareEffect } from 'react-use';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useGraphCardContext, useGetGraphTally, useMetricsSelector } from './graphCardContext';\nimport { graphCardHelpers } from './graphCardHelpers';\nimport { Chart } from '../chart/chart';\nimport { GraphCardChartLegend } from './graphCardChartLegend';\nimport { GraphCardChartTooltip } from './graphCardChartTooltip';\nimport { GraphCardChartTitleTooltip } from './graphCardChartTitleTooltip';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { Loader } from '../loader/loader';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A chart/graph card.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useGetGraphTally\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProduct\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardChart = ({\n  t,\n  useGetGraphTally: useAliasGetGraphTally,\n  useGraphCardContext: useAliasGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProduct: useAliasProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productId } = useAliasProduct();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { actionDisplay, metric, metrics = [] } = settings;\n\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n  const { pending, error, data = {}, dataSets = [] } = useAliasMetricsSelector();\n  const getGraphTally = useAliasGetGraphTally();\n\n  useShallowCompareEffect(() => {\n    getGraphTally(metrics.map(({ id: metricId }) => ({ id: productId, metric: metricId })));\n  }, [metrics, productId, getGraphTally]);\n\n  const standaloneMetricId = (metric?.id && `_${metric?.id}`) || '';\n  let updatedActionDisplay = null;\n\n  if (typeof actionDisplay === 'function') {\n    updatedActionDisplay = actionDisplay({ data: { ...data } });\n  }\n\n  return (\n    <Card className=\"curiosity-usage-graph\">\n      <MinHeight key=\"headerMinHeight\">\n        <CardHeader>\n          <CardTitle>\n            <Title headingLevel=\"h2\" size=\"lg\">\n              {t(`curiosity-graph.cardHeading${standaloneMetricId}`, { context: productId })}\n              <GraphCardChartTitleTooltip />\n            </Title>\n          </CardTitle>\n          {updatedActionDisplay && (\n            <CardActions className={(error && 'blur') || ''}>{updatedActionDisplay}</CardActions>\n          )}\n        </CardHeader>\n      </MinHeight>\n      <MinHeight key=\"bodyMinHeight\">\n        <CardBody>\n          <div className={(error && 'blur') || (pending && 'fadein') || ''}>\n            {pending && <Loader variant=\"graph\" />}\n            {!pending && (\n              <Chart\n                {...graphCardHelpers.generateExtendedChartSettings({ settings, granularity })}\n                dataSets={dataSets}\n                chartLegend={({ chart, datum }) => <GraphCardChartLegend chart={chart} datum={datum} />}\n                chartTooltip={({ datum }) => <GraphCardChartTooltip datum={datum} />}\n              />\n            )}\n          </div>\n        </CardBody>\n      </MinHeight>\n    </Card>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, useProductGraphTallyQuery: Function,\n *     useMetricsSelector: Function, useGetGraphTally: Function}}\n */\nGraphCardChart.propTypes = {\n  t: PropTypes.func,\n  useGetGraphTally: PropTypes.func,\n  useGraphCardContext: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, useProductGraphTallyQuery: Function,\n *     useMetricsSelector: Function, useGetGraphTally: Function}}\n */\nGraphCardChart.defaultProps = {\n  t: translate,\n  useGetGraphTally,\n  useGraphCardContext,\n  useMetricsSelector,\n  useProduct,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChart as default, GraphCardChart };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { useProduct } from '../productView/productViewContext';\nimport { useGraphCardContext } from './graphCardContext';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Graph card title tooltip.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useProduct\n * @returns {Node}\n */\nconst GraphCardChartTitleTooltip = ({\n  t,\n  useGraphCardContext: useAliasGraphCardContext,\n  useProduct: useAliasProduct\n}) => {\n  const { productId } = useAliasProduct();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { isCardTitleDescription, metric } = settings;\n  const standaloneMetricId = (metric?.id && `_${metric?.id}`) || '';\n\n  if (!isCardTitleDescription) {\n    return null;\n  }\n\n  return (\n    <Tooltip\n      content={<p>{t(`curiosity-graph.cardHeadingDescription${standaloneMetricId}`, { context: productId })}</p>}\n      position={TooltipPosition.top}\n      enableFlip={false}\n      distance={5}\n      entryDelay={100}\n      exitDelay={0}\n    >\n      <span className=\"curiosity-icon__question\">\n        <OutlinedQuestionCircleIcon />\n      </span>\n    </Tooltip>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, t: Function}}\n */\nGraphCardChartTitleTooltip.propTypes = {\n  t: PropTypes.func,\n  useProduct: PropTypes.func,\n  useGraphCardContext: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, t: Function}}\n */\nGraphCardChartTitleTooltip.defaultProps = {\n  t: translate,\n  useProduct,\n  useGraphCardContext\n};\n\nexport { GraphCardChartTitleTooltip as default, GraphCardChartTitleTooltip };\n","import React, { useContext } from 'react';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Chart context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{ settings: { isStandalone: false, metrics: [], metric: undefined } }, helpers.noop];\n\nconst GraphCardContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated graph card context.\n *\n * @returns {React.Context<{}>}\n */\nconst useGraphCardContext = () => useContext(GraphCardContext);\n\n/**\n * Use Redux RHSM Actions, getGraphTally.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProductGraphTallyQuery\n * @returns {Function}\n */\nconst useGetGraphTally = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery\n} = {}) => {\n  const query = useAliasProductGraphTallyQuery();\n  const dispatch = useAliasDispatch();\n\n  return metrics => reduxActions.rhsm.getGraphTally(metrics, query)(dispatch);\n};\n\n/**\n * Get multiple metrics from store.\n *\n * @param {object} options\n * @param {Function} options.useGraphCardContext\n * @param {Function} options.useSelectors\n * @param {Function} options.useProduct\n * @returns {{data: object, pending: boolean, fulfilled: boolean, dataSets: Array, error: boolean}}\n */\nconst useMetricsSelector = ({\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useSelectors: useAliasSelectors = storeHooks.reactRedux.useSelectors,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n  const data = {};\n\n  const metricResponses = useAliasSelectors(\n    metrics.map(\n      ({ id: metricId }) =>\n        ({ graph }) =>\n          graph.tally?.[`${productId}_${metricId}`]\n    ),\n    []\n  );\n\n  let isPending = false;\n  let isFulfilled = false;\n  let errorCount = 0;\n\n  const dataSets = metricResponses.map((metric, index) => {\n    const { pending, fulfilled, error, cancelled } = metric || {};\n    const updatedPending = pending || cancelled || false;\n\n    if (updatedPending) {\n      isPending = true;\n    }\n\n    if (fulfilled) {\n      isFulfilled = true;\n    }\n\n    if (error) {\n      errorCount += 1;\n    }\n\n    const updatedMetric = {\n      ...metrics[index],\n      data: metric?.data?.data || [],\n      meta: metric?.data?.meta || {}\n    };\n    data[metrics[index].id] = updatedMetric;\n\n    return updatedMetric;\n  });\n\n  const response = {\n    data,\n    dataSets,\n    error: false,\n    fulfilled: false,\n    pending: false\n  };\n\n  if (errorCount === dataSets.length) {\n    response.error = true;\n  } else if (isPending) {\n    response.pending = true;\n  } else if (isFulfilled) {\n    response.fulfilled = true;\n  }\n\n  return response;\n};\n\nconst context = {\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetGraphTally,\n  useGraphCardContext,\n  useMetricsSelector\n};\n\nexport {\n  context as default,\n  context,\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetGraphTally,\n  useGraphCardContext,\n  useMetricsSelector\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter, CardTitle, Flex, FlexItem } from '@patternfly/react-core';\nimport moment from 'moment';\nimport _camelCase from 'lodash/camelCase';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useMetricsSelector } from './graphCardContext';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { Loader, SkeletonSize } from '../loader/loader';\nimport { dateHelpers, helpers } from '../../common';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldRangedMonthly';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Display totals for a single metric.\n *\n * @param {object} props\n * @param {Node} props.children\n * @param {Function} props.t\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardMetricTotals = ({\n  children,\n  t,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate } = useAliasProductGraphTallyQuery();\n  const { pending, error, fulfilled, dataSets = [] } = useAliasMetricsSelector();\n  const { data = [], id: metricId, meta = {} } = dataSets[0] || {};\n  const { date: lastDate, hasData: lastHasData, y: lastValue } = data[data.length - 1] || {};\n  const {\n    date: currentDate,\n    hasData: currentHasData,\n    y: currentValue\n  } = data.find(({ isCurrentDate }) => isCurrentDate === true) || {};\n\n  const { totalMonthlyDate: monthlyDate, totalMonthlyHasData: monthlyHasData, totalMonthlyValue: monthlyValue } = meta;\n\n  const { title: selectedMonth, isCurrent } =\n    toolbarFieldOptions.find(\n      option => option.title === startDate || option.value.startDate.toISOString() === startDate\n    ) || {};\n\n  const dailyDate = isCurrent ? currentDate : lastDate;\n  const dailyHasData = isCurrent ? currentHasData : lastHasData;\n  const dailyValue = isCurrent ? currentValue : lastValue;\n\n  return (\n    <Flex data-test={`graphMetricTotals-${_camelCase(metricId)}`} className=\"curiosity-usage-graph__totals\">\n      <Flex flex={{ default: 'flex_1' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-column\">\n          <Card\n            data-test=\"graphDailyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric_dailyTotal', {\n                context: metricId,\n                month: selectedMonth\n              })}\n            </CardTitle>\n            <MinHeight key=\"currentBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric_total',\n                      {\n                        context: (dailyHasData && metricId) || '',\n                        total: helpers\n                          .numberDisplay(dailyValue)\n                          ?.format({\n                            average: true,\n                            mantissa: 5,\n                            trimMantissa: true,\n                            lowPrecision: false\n                          })\n                          ?.toUpperCase()\n                      },\n                      [<strong title={dailyValue} aria-label={dailyValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"currentFooter\">\n              <CardFooter>\n                <div className={(!dailyHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    dailyDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(dailyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n          <Card\n            data-test=\"graphMonthlyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric_monthlyTotal', {\n                context: metricId,\n                month: selectedMonth\n              })}\n            </CardTitle>\n            <MinHeight key=\"totalMonthlyBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric_total',\n                      {\n                        context: (monthlyHasData && metricId) || '',\n                        total: helpers\n                          .numberDisplay(monthlyValue)\n                          ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: false })\n                          ?.toUpperCase()\n                      },\n                      [<strong title={monthlyValue} aria-label={monthlyValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"totalMonthlyFooter\">\n              <CardFooter>\n                <div className={(!monthlyHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    monthlyDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(monthlyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n        </FlexItem>\n      </Flex>\n      <Flex flex={{ default: 'flex_3' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-graph-column\">{children}</FlexItem>\n      </Flex>\n    </Flex>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.propTypes = {\n  children: PropTypes.node,\n  t: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.defaultProps = {\n  children: null,\n  t: translate,\n  useMetricsSelector,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardMetricTotals as default, GraphCardMetricTotals };\n"],"names":["GraphCard","isDisabled","useAliasProductGraphConfig","useProductGraphConfig","filters","settings","graphCardHelpers","groupedFiltersSettings","standaloneFiltersSettings","GraphCardContext","value","GraphCardChart","map","filtersSettings","key","metric","id","GraphCardMetricTotals","defaultProps","helpers","t","useAliasGetGraphTally","useGetGraphTally","useAliasGraphCardContext","useGraphCardContext","useAliasMetricsSelector","useMetricsSelector","useAliasProduct","useProduct","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","productId","actionDisplay","metrics","granularity","RHSM_API_QUERY_SET_TYPES","pending","error","data","dataSets","getGraphTally","useShallowCompareEffect","metricId","standaloneMetricId","updatedActionDisplay","Card","className","MinHeight","CardHeader","CardTitle","Title","headingLevel","size","context","GraphCardChartTitleTooltip","CardActions","CardBody","Loader","variant","Chart","chartLegend","chart","datum","GraphCardChartLegend","chartTooltip","GraphCardChartTooltip","translate","isCardTitleDescription","Tooltip","content","position","TooltipPosition","enableFlip","distance","entryDelay","exitDelay","OutlinedQuestionCircleIcon","DEFAULT_CONTEXT","isStandalone","undefined","React","useContext","useDispatch","useAliasDispatch","storeHooks","query","dispatch","reduxActions","useSelectors","useAliasSelectors","metricResponses","graph","tally","isPending","isFulfilled","errorCount","index","fulfilled","cancelled","updatedMetric","meta","response","length","children","startDate","lastDate","date","lastHasData","hasData","lastValue","y","find","isCurrentDate","currentDate","currentHasData","currentValue","monthlyDate","totalMonthlyDate","monthlyHasData","totalMonthlyHasData","monthlyValue","totalMonthlyValue","toolbarFieldOptions","option","title","toISOString","selectedMonth","isCurrent","dailyDate","dailyHasData","dailyValue","Flex","_camelCase","flex","default","direction","alignSelf","FlexItem","month","skeletonProps","SkeletonSize","total","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","CardFooter","moment","dateHelpers"],"sourceRoot":""}