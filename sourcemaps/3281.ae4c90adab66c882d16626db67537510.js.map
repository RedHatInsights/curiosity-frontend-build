{"version":3,"file":"js/3281.4daf54bb9ac7bbabb96e.js","mappings":"6NAkBMA,EAAa,WAGR,6DAAP,GAAO,IAFTA,WAAYC,OAEH,MAFqBC,EAAAA,WAErB,MADTC,YAAaC,OACJ,MADuBC,EAAAA,GAAAA,WAAAA,YACvB,EACHC,EAAUL,IACVM,EAAWH,IAEjB,yBACKE,GADL,IAEEE,KAAM,SAACC,EAAcC,GACnB,IAAMC,EAAoC,iBAAjBF,GAA6BA,IAAiBA,MAAAA,OAAtD,EAAsDA,EAAcG,UADjD,EAEQC,EAAAA,cAAAA,eAA6B,CAAEF,SAAAA,EAAUG,GAAIH,IAAjFI,EAF4B,EAE5BA,iBAAkBD,EAFU,EAEVA,GAAIE,EAFM,EAENA,UAFM,EAGXC,OAAOC,SAAxBC,EAH4B,EAG5BA,KAAMC,EAHsB,EAGtBA,OAEd,OAAIL,EACKR,EAASc,EAAAA,GAAAA,SAAAA,UAAgCP,IAG3CR,EAAQE,KAAKQ,GAAcL,GAAY,GAAJ,OAAOA,GAAP,OAAkBS,GAAlB,OAA2BD,IAAWV,EAAcC,OAOlGY,EAAAA,YACAC,EAAAA,UACAC,EAAAA,eACAC,EAAAA","sources":["webpack:///./src/hooks/useRouter.js"],"sourcesContent":["import { useHistory as useHistoryRRD, useLocation, useParams, useRouteMatch } from 'react-router-dom';\nimport { useRouteDetail } from '../components/router/routerContext';\nimport { routerHelpers } from '../components/router/routerHelpers';\nimport { reduxActions, storeHooks } from '../redux';\n\n/**\n * ToDo: reevaluate this alternative pattern of passing library hooks as options\n * We did this as a test to see if its more convenient for unit testing instead of\n * having to spy or mock entire resources.\n */\n/**\n * Pass useHistory methods. Proxy useHistory push with Platform specific navigation update.\n *\n * @param {object} options\n * @param {Function} options.useHistory\n * @param {Function} options.useDispatch\n * @returns {object<history>}\n */\nconst useHistory = ({\n  useHistory: useAliasHistory = useHistoryRRD,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch\n} = {}) => {\n  const history = useAliasHistory();\n  const dispatch = useAliasDispatch();\n\n  return {\n    ...history,\n    push: (pathLocation, historyState) => {\n      const pathName = (typeof pathLocation === 'string' && pathLocation) || pathLocation?.pathname;\n      const { productParameter, id, routeHref } = routerHelpers.getRouteConfig({ pathName, id: pathName });\n      const { hash, search } = window.location;\n\n      if (productParameter) {\n        return dispatch(reduxActions.platform.setAppNav(id));\n      }\n\n      return history.push(routeHref || (pathName && `${pathName}${search}${hash}`) || pathLocation, historyState);\n    }\n  };\n};\n\nconst routerHooks = {\n  useHistory,\n  useLocation,\n  useParams,\n  useRouteDetail,\n  useRouteMatch\n};\n\nexport { routerHooks as default, routerHooks, useHistory, useLocation, useParams, useRouteDetail, useRouteMatch };\n"],"names":["useHistory","useAliasHistory","useHistoryRRD","useDispatch","useAliasDispatch","storeHooks","history","dispatch","push","pathLocation","historyState","pathName","pathname","routerHelpers","id","productParameter","routeHref","window","location","hash","search","reduxActions","useLocation","useParams","useRouteDetail","useRouteMatch"],"sourceRoot":""}