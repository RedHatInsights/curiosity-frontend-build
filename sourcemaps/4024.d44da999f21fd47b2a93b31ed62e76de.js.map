{"version":3,"file":"js/4024.1649706586605.a6075e6296a9c7820663.js","mappings":"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","sources":["webpack:///./src/components/chart/chartIcon.js","webpack:///./src/components/graphCard/graphCardChartTooltip.js","webpack:///./src/components/graphCard/graphCardHelpers.js","webpack:///./src/components/productView/productViewContext.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { EyeIcon, EyeSlashIcon, InfinityIcon, SquareIcon, IconSize } from '@patternfly/react-icons';\n\n/**\n * Emulate pf icon sizing for custom SVGs\n *\n * @param {string} size\n * @returns {string} em measurement\n */\nconst getSize = size => {\n  switch (size) {\n    case 'md':\n      return '1.5em';\n    case 'lg':\n      return '2em';\n    case 'xl':\n      return '3em';\n    case 'sm':\n    default:\n      return '1em';\n  }\n};\n\n/**\n * Render an icon for use outside of Victory charts.\n *\n * @param {object} props\n * @param {string} props.fill\n * @param {string} props.symbol\n * @param {string} props.size\n * @param {string} props.title\n * @returns {Node}\n */\nconst ChartIcon = ({ fill, symbol, size, title }) => {\n  const svgProps = {};\n  const iconProps = { size, title };\n  const emSvgSize = getSize(size);\n\n  if (title) {\n    svgProps['aria-labelledby'] = title;\n  } else {\n    svgProps['aria-hidden'] = true;\n  }\n\n  if (fill) {\n    iconProps.color = fill;\n  }\n\n  const setIcon = () => {\n    switch (symbol) {\n      case 'dash':\n        return (\n          <span\n            style={{\n              width: emSvgSize,\n              height: `${Number.parseFloat(emSvgSize) / 2}em`\n            }}\n          >\n            <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 38 10\" role=\"img\" {...svgProps}>\n              <rect y=\"5\" width=\"10\" height=\"10\" fill={fill} />\n              <rect x=\"14\" y=\"5\" width=\"10\" height=\"10\" fill={fill} />\n              <rect x=\"28\" y=\"5\" width=\"10\" height=\"10\" fill={fill} />\n            </svg>\n          </span>\n        );\n      case 'threshold':\n        return (\n          <span style={{ width: `${Number.parseFloat(emSvgSize) * 2}em`, height: emSvgSize }}>\n            <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 18 10\" role=\"img\" {...svgProps}>\n              <line\n                x1={0}\n                y1={(Number.parseFloat(emSvgSize) * 16) / 2}\n                x2={Number.parseFloat(emSvgSize) * 16 * 3}\n                y2={(Number.parseFloat(emSvgSize) * 16) / 2}\n                stroke={fill}\n                strokeWidth={3}\n                strokeDasharray=\"4,3\"\n              />\n            </svg>\n          </span>\n        );\n      case 'eye':\n        return <EyeIcon {...iconProps} />;\n      case 'eyeSlash':\n        return <EyeSlashIcon {...iconProps} />;\n      case 'infinity':\n        return <InfinityIcon {...iconProps} />;\n      case 'square':\n      default:\n        return <SquareIcon {...iconProps} />;\n    }\n  };\n\n  return <span className={`curiosity-chartarea__icon curiosity-chartarea__icon-${symbol}`}>{setIcon()}</span>;\n};\n\nChartIcon.propTypes = {\n  fill: PropTypes.string,\n  size: PropTypes.oneOf([...Object.keys(IconSize)]),\n  symbol: PropTypes.oneOf(['dash', 'eye', 'eyeSlash', 'infinity', 'square', 'threshold']),\n  title: PropTypes.string\n};\n\nChartIcon.defaultProps = {\n  fill: null,\n  size: 'sm',\n  symbol: 'square',\n  title: null\n};\n\nexport { ChartIcon as default, ChartIcon };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { getTooltipDate } from './graphCardHelpers';\nimport { translate } from '../i18n/i18n';\nimport { ChartIcon } from '../chart/chartIcon';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * A custom chart tooltip.\n *\n * @param {object} props\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useProduct\n * @returns {Node}\n */\nconst GraphCardChartTooltip = ({\n  datum,\n  t,\n  useProduct: useAliasProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productLabel } = useAliasProduct();\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n\n  let header = null;\n  const data = [];\n  const { itemsByKey = {} } = datum || {};\n\n  Object.keys(itemsByKey)\n    .reverse()\n    .forEach((key, index) => {\n      if (index === 0) {\n        header = getTooltipDate({\n          date: itemsByKey[key]?.data.date,\n          granularity\n        });\n      }\n\n      const tempDataFacet = {\n        color: itemsByKey[key]?.color\n      };\n\n      if (itemsByKey[key]?.chartType === 'threshold') {\n        let thresholdStringValue = itemsByKey[key]?.data.y ?? t('curiosity-graph.label_noData');\n\n        if (itemsByKey[key]?.data.hasInfinite) {\n          if (tempDataFacet.color) {\n            thresholdStringValue = (\n              <ChartIcon\n                symbol=\"infinity\"\n                fill=\"#ffffff\"\n                title={t('curiosity-graph.label_threshold', { context: 'infinite' })}\n              />\n            );\n          } else {\n            thresholdStringValue = t('curiosity-graph.label_threshold', { context: 'infinite' });\n          }\n        }\n\n        tempDataFacet.label = t('curiosity-graph.label_threshold');\n        tempDataFacet.value = thresholdStringValue;\n      } else {\n        const dataFactsValue =\n          (itemsByKey[key]?.data.hasData === false && t('curiosity-graph.label_noData')) ||\n          itemsByKey[key]?.data.y ||\n          0;\n\n        tempDataFacet.label = t('curiosity-graph.label', { context: key, product: productLabel });\n        tempDataFacet.value = dataFactsValue;\n      }\n\n      tempDataFacet.chartType = itemsByKey[key]?.chartType;\n      data.push(tempDataFacet);\n    });\n\n  return (\n    <div className=\"curiosity-usage-graph__tooltip\">\n      <table summary={t('curiosity-graph.tooltipSummary')}>\n        {(data.length && header && (\n          <thead>\n            <tr>\n              <th colSpan={2}>{header}</th>\n            </tr>\n          </thead>\n        )) ||\n          null}\n        {(data.length && (\n          <tbody>\n            {data.map(dataFacet => {\n              const updatedDataFacetValue =\n                (typeof dataFacet.value === 'number' &&\n                  !Number.isInteger(dataFacet.value) &&\n                  helpers\n                    .numberDisplay(dataFacet.value)\n                    ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: true })\n                    ?.toUpperCase()) ||\n                dataFacet.value;\n\n              return (\n                <tr key={`tooltip-${dataFacet.label}`}>\n                  <th>\n                    {dataFacet.chartType === 'threshold' && (\n                      <ChartIcon size=\"sm\" symbol=\"dash\" fill={dataFacet.color || 'transparent'} />\n                    )}\n                    {dataFacet.chartType !== 'threshold' && (\n                      <ChartIcon size=\"sm\" fill={dataFacet.color || 'transparent'} />\n                    )}{' '}\n                    {dataFacet.label}\n                  </th>\n                  <td>{updatedDataFacetValue}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        )) ||\n          null}\n      </table>\n      {(!data.length && t('curiosity-graph.label_noData', { context: 'error' })) || null}\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.propTypes = {\n  datum: PropTypes.shape({\n    itemsByKey: PropTypes.objectOf(\n      PropTypes.shape({\n        chartType: PropTypes.string,\n        color: PropTypes.string,\n        data: PropTypes.shape({\n          date: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),\n          hasData: PropTypes.bool,\n          hasInfinite: PropTypes.bool,\n          y: PropTypes.number\n        })\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.defaultProps = {\n  datum: {},\n  t: translate,\n  useProduct,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChartTooltip as default, GraphCardChartTooltip };\n","import moment from 'moment';\nimport { chart_color_green_300 as chartColorGreenDark } from '@patternfly/react-tokens';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers, helpers } from '../../common';\n\n/**\n * Update chart/graph filters with base settings with styling.\n *\n * @param {Array} filters\n * @returns {{standaloneFilters: Array, groupedFilters: Array}}\n */\nconst generateChartSettings = (filters = []) => {\n  const standaloneFilters = [];\n  const groupedFilters = [];\n\n  filters.forEach(({ id, isStandalone = false, isThreshold = false, ...settings }) => {\n    if (!id) {\n      return;\n    }\n\n    const baseFilterSettings = {\n      id,\n      isStacked: !isThreshold,\n      isStandalone,\n      isThreshold,\n      strokeWidth: 2\n    };\n\n    if (isThreshold) {\n      baseFilterSettings.stroke = chartColorGreenDark.value;\n      baseFilterSettings.strokeDasharray = '4,3';\n      baseFilterSettings.strokeWidth = 3;\n    }\n\n    if (isStandalone) {\n      standaloneFilters.push({\n        ...baseFilterSettings,\n        ...settings\n      });\n    } else {\n      groupedFilters.push({\n        ...baseFilterSettings,\n        ...settings\n      });\n    }\n  });\n\n  return {\n    standaloneFilters,\n    groupedFilters\n  };\n};\n\n/**\n * Returns x axis ticks/intervals array for the xAxisTickInterval\n *\n * @param {string} granularity See enum of RHSM_API_QUERY_GRANULARITY_TYPES\n * @returns {number}\n */\nconst getChartXAxisLabelIncrement = granularity => {\n  switch (granularity) {\n    case GRANULARITY_TYPES.DAILY:\n      return 5;\n    case GRANULARITY_TYPES.WEEKLY:\n    case GRANULARITY_TYPES.MONTHLY:\n      return 2;\n    case GRANULARITY_TYPES.QUARTERLY:\n    default:\n      return 1;\n  }\n};\n\n/**\n * Return a formatted date string.\n *\n * @param {object} params\n * @param {Date} params.date\n * @param {string} params.granularity See enum of RHSM_API_QUERY_GRANULARITY_TYPES\n * @returns {string}\n */\nconst getTooltipDate = ({ date, granularity } = {}) => {\n  const momentDate = moment.utc(date);\n\n  switch (granularity) {\n    case GRANULARITY_TYPES.QUARTERLY:\n      return `${momentDate.format(dateHelpers.timestampQuarterFormats.yearShort)} - ${momentDate\n        .add(1, 'quarter')\n        .format(dateHelpers.timestampQuarterFormats.yearShort)}`;\n\n    case GRANULARITY_TYPES.MONTHLY:\n      return momentDate.format(dateHelpers.timestampMonthFormats.yearLong);\n\n    case GRANULARITY_TYPES.WEEKLY:\n      return `${momentDate.format(dateHelpers.timestampDayFormats.short)} - ${momentDate\n        .add(1, 'week')\n        .format(dateHelpers.timestampDayFormats.yearShort)}`;\n\n    case GRANULARITY_TYPES.DAILY:\n    default:\n      return momentDate.format(dateHelpers.timestampDayFormats.long);\n  }\n};\n\n/**\n * Format x axis ticks.\n *\n * @param {object} params\n * @param {Function} params.callback\n * @param {Date} params.date\n * @param {string} params.granularity See enum of RHSM_API_QUERY_GRANULARITY_TYPES\n * @param {number|string} params.tick\n * @param {Date} params.previousDate\n * @returns {string|undefined}\n */\nconst xAxisTickFormat = ({ callback, date, granularity, tick, previousDate } = {}) => {\n  if (!date || !granularity) {\n    return undefined;\n  }\n\n  if (callback) {\n    return callback({ callback, date, granularity, tick, previousDate });\n  }\n\n  const momentDate = moment.utc(date);\n  const isNewYear =\n    tick !== 0 && Number.parseInt(momentDate.year(), 10) !== Number.parseInt(moment.utc(previousDate).year(), 10);\n  let formattedDate;\n\n  switch (granularity) {\n    case GRANULARITY_TYPES.QUARTERLY:\n      formattedDate = isNewYear\n        ? momentDate.format(dateHelpers.timestampQuarterFormats.yearShort)\n        : momentDate.format(dateHelpers.timestampQuarterFormats.short);\n\n      formattedDate = formattedDate.replace(/\\s/, '\\n');\n      break;\n    case GRANULARITY_TYPES.MONTHLY:\n      formattedDate = isNewYear\n        ? momentDate.format(dateHelpers.timestampMonthFormats.yearShort)\n        : momentDate.format(dateHelpers.timestampMonthFormats.short);\n\n      formattedDate = formattedDate.replace(/\\s/, '\\n');\n      break;\n    case GRANULARITY_TYPES.WEEKLY:\n    case GRANULARITY_TYPES.DAILY:\n    default:\n      formattedDate = isNewYear\n        ? momentDate.format(dateHelpers.timestampDayFormats.yearShort)\n        : momentDate.format(dateHelpers.timestampDayFormats.short);\n\n      formattedDate = formattedDate.replace(/\\s(\\d{4})$/, '\\n$1');\n      break;\n  }\n\n  return formattedDate;\n};\n\n/**\n * Format y axis ticks.\n *\n * @param {object} params\n * @param {Function} params.callback\n * @param {number|string} params.tick\n * @returns {string}\n */\nconst yAxisTickFormat = ({ callback, tick } = {}) => {\n  if (callback) {\n    return callback({ tick });\n  }\n\n  return helpers\n    .numberDisplay(tick)\n    ?.format({\n      average: true,\n      mantissa: 1,\n      trimMantissa: true,\n      lowPrecision: false\n    })\n    ?.toUpperCase();\n};\n\n/**\n * Generate base chart component props.\n *\n * @param {object} params\n * @param {object} params.settings\n * @param {string} params.granularity\n * @returns {object}\n */\nconst generateExtendedChartSettings = ({ settings, granularity } = {}) => ({\n  ...settings,\n  xAxisLabelIncrement: getChartXAxisLabelIncrement(granularity),\n  xAxisTickFormat: ({ item, previousItem, tick }) =>\n    xAxisTickFormat({\n      callback: settings?.xAxisTickFormat,\n      tick,\n      date: item.date,\n      previousDate: previousItem.date,\n      granularity\n    }),\n  yAxisTickFormat: ({ tick }) =>\n    yAxisTickFormat({\n      callback: settings?.yAxisTickFormat,\n      tick\n    })\n});\n\nconst graphCardHelpers = {\n  generateChartSettings,\n  generateExtendedChartSettings,\n  getChartXAxisLabelIncrement,\n  getTooltipDate,\n  xAxisTickFormat,\n  yAxisTickFormat\n};\n\nexport {\n  graphCardHelpers as default,\n  graphCardHelpers,\n  generateChartSettings,\n  generateExtendedChartSettings,\n  getChartXAxisLabelIncrement,\n  getTooltipDate,\n  xAxisTickFormat,\n  yAxisTickFormat\n};\n","import React, { useCallback, useContext } from 'react';\nimport { reduxHelpers } from '../../redux/common';\nimport { storeHooks } from '../../redux/hooks';\nimport { RHSM_API_QUERY_TYPES, rhsmApiTypes } from '../../types/rhsmApiTypes';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Route context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{}, helpers.noop];\n\nconst ProductViewContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated product view context.\n *\n * @returns {React.Context<{}>}\n */\nconst useProductViewContext = () => useContext(ProductViewContext);\n\n/**\n * Return a query object from initial product config and Redux store.\n *\n * @param {string} queryType An identifier used to pull from both config and Redux, they should named the same.\n * @param {object} options\n * @param {string} options.overrideId A custom identifier, used for scenarios like the Guest inventory IDs\n * @param {object} options.useProductViewContext\n * @returns {object}\n */\nconst useProductQueryFactory = (\n  queryType,\n  { overrideId, useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}\n) => {\n  const { [queryType]: initialQuery, productId, viewId } = useAliasProductViewContext();\n  const queryOverride = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[overrideId], undefined);\n  const queryProduct = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[productId], undefined);\n  const queryView = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[viewId], undefined);\n\n  return {\n    ...initialQuery,\n    ...queryOverride,\n    ...queryProduct,\n    ...queryView\n  };\n};\n\n/**\n * Return a base product query\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductQuery = ({ queryType = 'query', options } = {}) => useProductQueryFactory(queryType, options);\n\n/**\n * Return the graph query based off of tally and capacity.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductGraphTallyQuery = ({\n  queryType = 'graphTallyQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_REPORT_CAPACITY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return the inventory query for guests. Use fallback/defaults for guests offset, limit.\n *\n * @param {object} options\n * @param {number} options.defaultLimit\n * @param {number} options.defaultOffset\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryGuestsQuery = ({\n  defaultLimit = 100,\n  defaultOffset = 0,\n  queryType = 'inventoryGuestsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_GUESTS_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      [RHSM_API_QUERY_SET_TYPES.LIMIT]: defaultLimit,\n      [RHSM_API_QUERY_SET_TYPES.OFFSET]: defaultOffset,\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for hosts.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryHostsQuery = ({\n  queryType = 'inventoryHostsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for subscriptions.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventorySubscriptionsQuery = ({\n  queryType = 'inventorySubscriptionsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Get a filtered product configuration context.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductViewContext\n * @returns {object}\n */\nconst useProductContext = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductViewContext: useAliasProductViewContext = useProductViewContext\n} = {}) => {\n  const { [RHSM_API_QUERY_TYPES.UOM]: uomFilter } = useAliasProductQuery();\n  const {\n    initialGraphFilters = [],\n    initialInventoryFilters = [],\n    initialSubscriptionsInventoryFilters = [],\n    productContextFilterUom,\n    ...config\n  } = useAliasProductViewContext();\n\n  const applyUomFilter = useCallback(() => {\n    if (productContextFilterUom === true) {\n      const filterFilters = ({ id, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(uomFilter, 'i').test(id);\n      };\n\n      return {\n        ...config,\n        initialGraphFilters: initialGraphFilters.filter(filterFilters),\n        initialInventoryFilters: initialInventoryFilters.filter(filterFilters),\n        initialSubscriptionsInventoryFilters: initialSubscriptionsInventoryFilters.filter(filterFilters)\n      };\n    }\n\n    return {\n      ...config,\n      initialGraphFilters,\n      initialInventoryFilters,\n      initialSubscriptionsInventoryFilters\n    };\n  }, [\n    config,\n    initialGraphFilters,\n    initialInventoryFilters,\n    initialSubscriptionsInventoryFilters,\n    productContextFilterUom,\n    uomFilter\n  ]);\n\n  return applyUomFilter();\n};\n\n/**\n * Return product identifiers.\n *\n * @param {object} options\n * @param {Function} options.useProductViewContext\n * @returns {{productLabel: string, viewId: string, productId: string, productGroup: string}}\n */\nconst useProduct = ({ useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}) => {\n  const { productGroup, productId, productLabel, viewId } = useAliasProductViewContext();\n  return {\n    productGroup,\n    productId,\n    productLabel,\n    viewId\n  };\n};\n\n/**\n * Return graph configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductGraphConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialGraphFilters, initialGraphSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGraphFilters,\n    settings: initialGraphSettings\n  };\n};\n\n/**\n * Return guests inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryGuestsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { inventoryGuestsQuery = {}, initialGuestsFilters, initialGuestsSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGuestsFilters,\n    initialQuery: inventoryGuestsQuery,\n    settings: initialGuestsSettings\n  };\n};\n\n/**\n * Return hosts inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryHostsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialInventoryFilters, initialInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialInventoryFilters,\n    settings: initialInventorySettings\n  };\n};\n\n/**\n * Return subscriptions inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventorySubscriptionsConfig = ({\n  useProductContext: useAliasProductContext = useProductContext\n} = {}) => {\n  const { initialSubscriptionsInventoryFilters, initialSubscriptionsInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialSubscriptionsInventoryFilters,\n    settings: initialSubscriptionsInventorySettings\n  };\n};\n\n/**\n * Return primary toolbar configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductToolbarConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialToolbarFilters, initialToolbarSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialToolbarFilters,\n    settings: initialToolbarSettings\n  };\n};\n\nconst context = {\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useQuery: useProductQuery,\n  useQueryFactory: useProductQueryFactory,\n  useGraphTallyQuery: useProductGraphTallyQuery,\n  useInventoryGuestsQuery: useProductInventoryGuestsQuery,\n  useInventoryHostsQuery: useProductInventoryHostsQuery,\n  useInventorySubscriptionsQuery: useProductInventorySubscriptionsQuery,\n  useProduct,\n  useGraphConfig: useProductGraphConfig,\n  useInventoryGuestsConfig: useProductInventoryGuestsConfig,\n  useInventoryHostsConfig: useProductInventoryHostsConfig,\n  useInventorySubscriptionsConfig: useProductInventorySubscriptionsConfig,\n  useToolbarConfig: useProductToolbarConfig\n};\n\nexport {\n  context as default,\n  context,\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useProductQuery,\n  useProductQueryFactory,\n  useProductGraphTallyQuery,\n  useProductInventoryGuestsQuery,\n  useProductInventoryHostsQuery,\n  useProductInventorySubscriptionsQuery,\n  useProduct,\n  useProductGraphConfig,\n  useProductInventoryGuestsConfig,\n  useProductInventoryHostsConfig,\n  useProductInventorySubscriptionsConfig,\n  useProductToolbarConfig\n};\n"],"names":["ChartIcon","fill","symbol","size","title","svgProps","iconProps","emSvgSize","getSize","color","className","style","width","height","Number","parseFloat","viewBox","role","y","x","x1","y1","x2","y2","stroke","strokeWidth","strokeDasharray","EyeIcon","EyeSlashIcon","InfinityIcon","SquareIcon","setIcon","defaultProps","GraphCardChartTooltip","datum","t","useAliasProduct","useProduct","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","productLabel","granularity","RHSM_API_QUERY_SET_TYPES","header","data","itemsByKey","Object","keys","reverse","forEach","key","index","getTooltipDate","date","tempDataFacet","chartType","thresholdStringValue","hasInfinite","context","label","value","dataFactsValue","hasData","product","push","summary","length","colSpan","map","dataFacet","updatedDataFacetValue","isInteger","helpers","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","translate","generateChartSettings","filters","standaloneFilters","groupedFilters","id","isStandalone","isThreshold","settings","baseFilterSettings","isStacked","chartColorGreenDark","getChartXAxisLabelIncrement","GRANULARITY_TYPES","momentDate","moment","dateHelpers","add","xAxisTickFormat","callback","tick","previousDate","formattedDate","isNewYear","parseInt","year","replace","yAxisTickFormat","generateExtendedChartSettings","xAxisLabelIncrement","item","previousItem","graphCardHelpers","DEFAULT_CONTEXT","ProductViewContext","React","useProductViewContext","useContext","useProductQueryFactory","queryType","overrideId","useAliasProductViewContext","initialQuery","productId","viewId","queryOverride","storeHooks","view","undefined","queryProduct","queryView","useProductQuery","options","schemaCheck","rhsmApiTypes","reduxHelpers","useProductInventoryGuestsQuery","defaultLimit","defaultOffset","useProductInventoryHostsQuery","useProductInventorySubscriptionsQuery","useProductContext","useAliasProductQuery","uomFilter","RHSM_API_QUERY_TYPES","initialGraphFilters","initialInventoryFilters","initialSubscriptionsInventoryFilters","productContextFilterUom","config","applyUomFilter","useCallback","filterFilters","isOptional","RegExp","test","filter","productGroup","useProductGraphConfig","useAliasProductContext","initialGraphSettings","useProductInventoryGuestsConfig","inventoryGuestsQuery","initialGuestsFilters","initialGuestsSettings","useProductInventoryHostsConfig","initialInventorySettings","useProductInventorySubscriptionsConfig","initialSubscriptionsInventorySettings","useProductToolbarConfig","initialToolbarFilters","initialToolbarSettings","useQuery","useQueryFactory","useGraphTallyQuery","useInventoryGuestsQuery","useInventoryHostsQuery","useInventorySubscriptionsQuery","useGraphConfig","useInventoryGuestsConfig","useInventoryHostsConfig","useInventorySubscriptionsConfig","useToolbarConfig"],"sourceRoot":""}