{"version":3,"file":"js/1799.1643662791925.2ffec8357d21e0fda301.js","mappings":"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","sources":["webpack:///./src/components/chart/chartIcon.js","webpack:///./src/components/graphCard/graphCardChart.js","webpack:///./src/components/graphCard/graphCardChartLegend.js","webpack:///./src/components/graphCard/graphCardChartTitleTooltip.js","webpack:///./src/components/graphCard/graphCardChartTooltip.js","webpack:///./src/components/graphCard/graphCardContext.js","webpack:///./src/components/graphCard/graphCardHelpers.js","webpack:///./src/components/minHeight/minHeight.js","webpack:///./node_modules/fast-shallow-equal/index.js","webpack:///./node_modules/react-use/esm/useShallowCompareEffect.js","webpack:///./node_modules/react-use/esm/useCustomCompareEffect.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { EyeIcon, EyeSlashIcon, InfinityIcon, SquareIcon, IconSize } from '@patternfly/react-icons';\n\n/**\n * Emulate pf icon sizing for custom SVGs\n *\n * @param {string} size\n * @returns {string} em measurement\n */\nconst getSize = size => {\n  switch (size) {\n    case 'md':\n      return '1.5em';\n    case 'lg':\n      return '2em';\n    case 'xl':\n      return '3em';\n    case 'sm':\n    default:\n      return '1em';\n  }\n};\n\n/**\n * Render an icon for use outside of Victory charts.\n *\n * @param {object} props\n * @param {string} props.fill\n * @param {string} props.symbol\n * @param {string} props.size\n * @param {string} props.title\n * @returns {Node}\n */\nconst ChartIcon = ({ fill, symbol, size, title }) => {\n  const svgProps = {};\n  const iconProps = { size, title };\n  const emSvgSize = getSize(size);\n\n  if (title) {\n    svgProps['aria-labelledby'] = title;\n  } else {\n    svgProps['aria-hidden'] = true;\n  }\n\n  if (fill) {\n    iconProps.color = fill;\n  }\n\n  const setIcon = () => {\n    switch (symbol) {\n      case 'dash':\n        return (\n          <span\n            style={{\n              width: emSvgSize,\n              height: `${Number.parseFloat(emSvgSize) / 2}em`\n            }}\n          >\n            <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 38 10\" role=\"img\" {...svgProps}>\n              <rect y=\"5\" width=\"10\" height=\"10\" fill={fill} />\n              <rect x=\"14\" y=\"5\" width=\"10\" height=\"10\" fill={fill} />\n              <rect x=\"28\" y=\"5\" width=\"10\" height=\"10\" fill={fill} />\n            </svg>\n          </span>\n        );\n      case 'threshold':\n        return (\n          <span style={{ width: `${Number.parseFloat(emSvgSize) * 2}em`, height: emSvgSize }}>\n            <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 18 10\" role=\"img\" {...svgProps}>\n              <line\n                x1={0}\n                y1={(Number.parseFloat(emSvgSize) * 16) / 2}\n                x2={Number.parseFloat(emSvgSize) * 16 * 3}\n                y2={(Number.parseFloat(emSvgSize) * 16) / 2}\n                stroke={fill}\n                strokeWidth={3}\n                strokeDasharray=\"4,3\"\n              />\n            </svg>\n          </span>\n        );\n      case 'eye':\n        return <EyeIcon {...iconProps} />;\n      case 'eyeSlash':\n        return <EyeSlashIcon {...iconProps} />;\n      case 'infinity':\n        return <InfinityIcon {...iconProps} />;\n      case 'square':\n      default:\n        return <SquareIcon {...iconProps} />;\n    }\n  };\n\n  return <span className={`curiosity-chartarea__icon curiosity-chartarea__icon-${symbol}`}>{setIcon()}</span>;\n};\n\nChartIcon.propTypes = {\n  fill: PropTypes.string,\n  size: PropTypes.oneOf([...Object.keys(IconSize)]),\n  symbol: PropTypes.oneOf(['dash', 'eye', 'eyeSlash', 'infinity', 'square', 'threshold']),\n  title: PropTypes.string\n};\n\nChartIcon.defaultProps = {\n  fill: null,\n  size: 'sm',\n  symbol: 'square',\n  title: null\n};\n\nexport { ChartIcon as default, ChartIcon };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardActions, CardBody, CardHeader, CardTitle, Title } from '@patternfly/react-core';\nimport { useShallowCompareEffect } from 'react-use';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useGraphCardContext, useGetGraphTally, useMetricsSelector } from './graphCardContext';\nimport { graphCardHelpers } from './graphCardHelpers';\nimport { Chart } from '../chart/chart';\nimport { GraphCardChartLegend } from './graphCardChartLegend';\nimport { GraphCardChartTooltip } from './graphCardChartTooltip';\nimport { GraphCardChartTitleTooltip } from './graphCardChartTitleTooltip';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { Loader } from '../loader/loader';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A chart/graph card.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useGetGraphTally\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProduct\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardChart = ({\n  t,\n  useGetGraphTally: useAliasGetGraphTally,\n  useGraphCardContext: useAliasGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProduct: useAliasProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productId } = useAliasProduct();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { actionDisplay, metric, metrics = [] } = settings;\n\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n  const { pending, error, data = {}, dataSets = [] } = useAliasMetricsSelector();\n  const getGraphTally = useAliasGetGraphTally();\n\n  useShallowCompareEffect(() => {\n    getGraphTally(metrics.map(({ id: metricId }) => ({ id: productId, metric: metricId })));\n  }, [metrics, productId, getGraphTally]);\n\n  const standaloneMetricId = (metric?.id && `_${metric?.id}`) || '';\n  let updatedActionDisplay = null;\n\n  if (typeof actionDisplay === 'function') {\n    updatedActionDisplay = actionDisplay({ data: { ...data } });\n  }\n\n  return (\n    <Card className=\"curiosity-usage-graph\">\n      <MinHeight key=\"headerMinHeight\">\n        <CardHeader>\n          <CardTitle>\n            <Title headingLevel=\"h2\" size=\"lg\">\n              {t(`curiosity-graph.cardHeading${standaloneMetricId}`, { context: productId })}\n              <GraphCardChartTitleTooltip />\n            </Title>\n          </CardTitle>\n          {updatedActionDisplay && (\n            <CardActions className={(error && 'blur') || ''}>{updatedActionDisplay}</CardActions>\n          )}\n        </CardHeader>\n      </MinHeight>\n      <MinHeight key=\"bodyMinHeight\">\n        <CardBody>\n          <div className={(error && 'blur') || (pending && 'fadein') || ''}>\n            {pending && <Loader variant=\"graph\" />}\n            {!pending && (\n              <Chart\n                {...graphCardHelpers.generateExtendedChartSettings({ settings, granularity })}\n                dataSets={dataSets}\n                chartLegend={({ chart, datum }) => <GraphCardChartLegend chart={chart} datum={datum} />}\n                chartTooltip={({ datum }) => <GraphCardChartTooltip datum={datum} />}\n              />\n            )}\n          </div>\n        </CardBody>\n      </MinHeight>\n    </Card>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, useProductGraphTallyQuery: Function,\n *     useMetricsSelector: Function, useGetGraphTally: Function}}\n */\nGraphCardChart.propTypes = {\n  t: PropTypes.func,\n  useGetGraphTally: PropTypes.func,\n  useGraphCardContext: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, useProductGraphTallyQuery: Function,\n *     useMetricsSelector: Function, useGetGraphTally: Function}}\n */\nGraphCardChart.defaultProps = {\n  t: translate,\n  useGetGraphTally,\n  useGraphCardContext,\n  useMetricsSelector,\n  useProduct,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChart as default, GraphCardChart };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { useMount } from 'react-use';\nimport { useProduct } from '../productView/productViewContext';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { ChartIcon } from '../chart/chartIcon';\n\n/**\n * A custom chart legend.\n *\n * @fires onClick\n * @param {object} props\n * @param {object} props.chart\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useDispatch\n * @param {Function} props.useProduct\n * @param {Function} props.useSelectors\n * @returns {Node}\n */\nconst GraphCardChartLegend = ({\n  chart,\n  datum,\n  t,\n  useDispatch: useAliasDispatch,\n  useSelectors: useAliasSelectors,\n  useProduct: useAliasProduct\n}) => {\n  const { productLabel, viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n  const legendItems = useAliasSelectors(\n    datum.dataSets.map(\n      ({ id }) =>\n        ({ graph }) =>\n          graph.legend?.[`${viewId}-${id}`]\n    )\n  );\n\n  useMount(() => {\n    datum.dataSets.forEach(({ id }, index) => {\n      const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n\n      if (checkIsToggled) {\n        chart.hide(id);\n      }\n    });\n  });\n\n  /**\n   * Toggle legend item and chart.\n   *\n   * @event onClick\n   * @param {string} id\n   */\n  const onClick = id => {\n    const updatedToggle = chart.toggle(id);\n\n    dispatch({\n      type: reduxTypes.graph.SET_GRAPH_LEGEND,\n      id: `${viewId}-${id}`,\n      value: updatedToggle\n    });\n  };\n\n  return (\n    <React.Fragment>\n      {datum.dataSets.map(({ id, isThreshold, stroke: color, data = [] }, index) => {\n        const isDisabled =\n          !data.find(({ y, hasData }) => (y >= 0 && hasData === true) || (y >= 0 && isThreshold === true)) || false;\n\n        const labelContent = t(\n          [`curiosity-graph.label_${(isThreshold && 'threshold') || id}`, 'curiosity-graph.label_no'],\n          {\n            product: productLabel,\n            context: productLabel\n          }\n        );\n\n        const tooltipContent = t(\n          `curiosity-graph.legendTooltip${(isThreshold && '_threshold') || ''}_${id}`,\n          {\n            product: productLabel,\n            context: productLabel\n          },\n          [<span style={{ whiteSpace: 'nowrap' }} />]\n        );\n\n        const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n\n        const button = (\n          <Button\n            onClick={() => onClick(id)}\n            onKeyPress={() => onClick(id)}\n            className=\"curiosity-usage-graph__legend-item\"\n            tabIndex={0}\n            key={`curiosity-button-${id}`}\n            variant=\"link\"\n            component=\"a\"\n            isDisabled={isDisabled}\n            icon={\n              ((isDisabled || checkIsToggled) && <ChartIcon symbol=\"eyeSlash\" />) || (\n                <ChartIcon\n                  symbol={(isThreshold && 'dash') || 'square'}\n                  style={{ visibility: (isDisabled && 'hidden') || (checkIsToggled && 'hidden') || 'visible' }}\n                  fill={color}\n                />\n              )\n            }\n          >\n            {labelContent}\n          </Button>\n        );\n\n        if (tooltipContent) {\n          return (\n            <Tooltip\n              key={`curiosity-tooltip-${id}`}\n              content={<p>{tooltipContent}</p>}\n              position={TooltipPosition.top}\n              enableFlip\n              distance={5}\n            >\n              {button}\n            </Tooltip>\n          );\n        }\n\n        return button;\n      })}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, t: Function, useDispatch: Function, useSelectors: Function, chart: object}}\n */\nGraphCardChartLegend.propTypes = {\n  chart: PropTypes.shape({\n    hide: PropTypes.func,\n    toggle: PropTypes.func,\n    isToggled: PropTypes.func\n  }),\n  datum: PropTypes.shape({\n    dataSets: PropTypes.arrayOf(\n      PropTypes.shape({\n        stroke: PropTypes.string.isRequired,\n        id: PropTypes.string.isRequired,\n        isThreshold: PropTypes.bool\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useDispatch: PropTypes.func,\n  useSelectors: PropTypes.func,\n  useProduct: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: object, useProduct: Function, t: Function, useDispatch: Function, useSelectors: Function, chart: object}}\n */\nGraphCardChartLegend.defaultProps = {\n  chart: {\n    hide: helpers.noop,\n    toggle: helpers.noop,\n    isToggled: helpers.noop\n  },\n  datum: {\n    dataSets: []\n  },\n  t: translate,\n  useDispatch: storeHooks.reactRedux.useDispatch,\n  useSelectors: storeHooks.reactRedux.useSelectors,\n  useProduct\n};\n\nexport { GraphCardChartLegend as default, GraphCardChartLegend };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { useProduct } from '../productView/productViewContext';\nimport { useGraphCardContext } from './graphCardContext';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Graph card title tooltip.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useProduct\n * @returns {Node}\n */\nconst GraphCardChartTitleTooltip = ({\n  t,\n  useGraphCardContext: useAliasGraphCardContext,\n  useProduct: useAliasProduct\n}) => {\n  const { productId } = useAliasProduct();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { isCardTitleDescription, metric } = settings;\n  const standaloneMetricId = (metric?.id && `_${metric?.id}`) || '';\n\n  if (!isCardTitleDescription) {\n    return null;\n  }\n\n  return (\n    <Tooltip\n      content={<p>{t(`curiosity-graph.cardHeadingDescription${standaloneMetricId}`, { context: productId })}</p>}\n      position={TooltipPosition.top}\n      enableFlip={false}\n      distance={5}\n      entryDelay={100}\n      exitDelay={0}\n    >\n      <span className=\"curiosity-icon__question\">\n        <OutlinedQuestionCircleIcon />\n      </span>\n    </Tooltip>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, t: Function}}\n */\nGraphCardChartTitleTooltip.propTypes = {\n  t: PropTypes.func,\n  useProduct: PropTypes.func,\n  useGraphCardContext: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, t: Function}}\n */\nGraphCardChartTitleTooltip.defaultProps = {\n  t: translate,\n  useProduct,\n  useGraphCardContext\n};\n\nexport { GraphCardChartTitleTooltip as default, GraphCardChartTitleTooltip };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { getTooltipDate } from './graphCardHelpers';\nimport { translate } from '../i18n/i18n';\nimport { ChartIcon } from '../chart/chartIcon';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * A custom chart tooltip.\n *\n * @param {object} props\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useProduct\n * @returns {Node}\n */\nconst GraphCardChartTooltip = ({\n  datum,\n  t,\n  useProduct: useAliasProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productLabel } = useAliasProduct();\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n\n  let header = null;\n  const data = [];\n  const { itemsByKey = {} } = datum || {};\n\n  Object.keys(itemsByKey)\n    .reverse()\n    .forEach((key, index) => {\n      if (index === 0) {\n        header = getTooltipDate({\n          date: itemsByKey[key]?.data.date,\n          granularity\n        });\n      }\n\n      const tempDataFacet = {\n        color: itemsByKey[key]?.color\n      };\n\n      if (itemsByKey[key]?.chartType === 'threshold') {\n        let thresholdStringValue = itemsByKey[key]?.data.y ?? t('curiosity-graph.label_noData');\n\n        if (itemsByKey[key]?.data.hasInfinite) {\n          if (tempDataFacet.color) {\n            thresholdStringValue = (\n              <ChartIcon\n                symbol=\"infinity\"\n                fill=\"#ffffff\"\n                title={t('curiosity-graph.label_threshold', { context: 'infinite' })}\n              />\n            );\n          } else {\n            thresholdStringValue = t('curiosity-graph.label_threshold', { context: 'infinite' });\n          }\n        }\n\n        tempDataFacet.label = t('curiosity-graph.label_threshold');\n        tempDataFacet.value = thresholdStringValue;\n      } else {\n        const dataFactsValue =\n          (itemsByKey[key]?.data.hasData === false && t('curiosity-graph.label_noData')) ||\n          itemsByKey[key]?.data.y ||\n          0;\n\n        tempDataFacet.label = t('curiosity-graph.label', { context: key, product: productLabel });\n        tempDataFacet.value = dataFactsValue;\n      }\n\n      tempDataFacet.chartType = itemsByKey[key]?.chartType;\n      data.push(tempDataFacet);\n    });\n\n  return (\n    <div className=\"curiosity-usage-graph__tooltip\">\n      <table summary={t('curiosity-graph.tooltipSummary')}>\n        {(data.length && header && (\n          <thead>\n            <tr>\n              <th colSpan={2}>{header}</th>\n            </tr>\n          </thead>\n        )) ||\n          null}\n        {(data.length && (\n          <tbody>\n            {data.map(dataFacet => {\n              const updatedDataFacetValue =\n                (typeof dataFacet.value === 'number' &&\n                  !Number.isInteger(dataFacet.value) &&\n                  helpers\n                    .numberDisplay(dataFacet.value)\n                    ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: true })\n                    ?.toUpperCase()) ||\n                dataFacet.value;\n\n              return (\n                <tr key={`tooltip-${dataFacet.label}`}>\n                  <th>\n                    {dataFacet.chartType === 'threshold' && (\n                      <ChartIcon size=\"sm\" symbol=\"dash\" fill={dataFacet.color || 'transparent'} />\n                    )}\n                    {dataFacet.chartType !== 'threshold' && (\n                      <ChartIcon size=\"sm\" fill={dataFacet.color || 'transparent'} />\n                    )}{' '}\n                    {dataFacet.label}\n                  </th>\n                  <td>{updatedDataFacetValue}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        )) ||\n          null}\n      </table>\n      {(!data.length && t('curiosity-graph.label_noData', { context: 'error' })) || null}\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.propTypes = {\n  datum: PropTypes.shape({\n    itemsByKey: PropTypes.objectOf(\n      PropTypes.shape({\n        chartType: PropTypes.string,\n        color: PropTypes.string,\n        data: PropTypes.shape({\n          date: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),\n          hasData: PropTypes.bool,\n          hasInfinite: PropTypes.bool,\n          y: PropTypes.number\n        })\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.defaultProps = {\n  datum: {},\n  t: translate,\n  useProduct,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChartTooltip as default, GraphCardChartTooltip };\n","import React, { useContext } from 'react';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Chart context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{ settings: { isStandalone: false, metrics: [], metric: undefined } }, helpers.noop];\n\nconst GraphCardContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated graph card context.\n *\n * @returns {React.Context<{}>}\n */\nconst useGraphCardContext = () => useContext(GraphCardContext);\n\n/**\n * Use Redux RHSM Actions, getGraphTally.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProductGraphTallyQuery\n * @returns {Function}\n */\nconst useGetGraphTally = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery\n} = {}) => {\n  const query = useAliasProductGraphTallyQuery();\n  const dispatch = useAliasDispatch();\n\n  return metrics => reduxActions.rhsm.getGraphTally(metrics, query)(dispatch);\n};\n\n/**\n * Get multiple metrics from store.\n *\n * @param {object} options\n * @param {Function} options.useGraphCardContext\n * @param {Function} options.useSelectors\n * @param {Function} options.useProduct\n * @returns {{data: object, pending: boolean, fulfilled: boolean, dataSets: Array, error: boolean}}\n */\nconst useMetricsSelector = ({\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useSelectors: useAliasSelectors = storeHooks.reactRedux.useSelectors,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n  const data = {};\n\n  const metricResponses = useAliasSelectors(\n    metrics.map(\n      ({ id: metricId }) =>\n        ({ graph }) =>\n          graph.tally?.[`${productId}_${metricId}`]\n    ),\n    []\n  );\n\n  let isPending = false;\n  let isFulfilled = false;\n  let errorCount = 0;\n\n  const dataSets = metricResponses.map((metric, index) => {\n    const { pending, fulfilled, error, cancelled } = metric || {};\n    const updatedPending = pending || cancelled || false;\n\n    if (updatedPending) {\n      isPending = true;\n    }\n\n    if (fulfilled) {\n      isFulfilled = true;\n    }\n\n    if (error) {\n      errorCount += 1;\n    }\n\n    const updatedMetric = {\n      ...metrics[index],\n      data: metric?.data?.data || [],\n      meta: metric?.data?.meta || {}\n    };\n    data[metrics[index].id] = updatedMetric;\n\n    return updatedMetric;\n  });\n\n  const response = {\n    data,\n    dataSets,\n    error: false,\n    fulfilled: false,\n    pending: false\n  };\n\n  if (errorCount === dataSets.length) {\n    response.error = true;\n  } else if (isPending) {\n    response.pending = true;\n  } else if (isFulfilled) {\n    response.fulfilled = true;\n  }\n\n  return response;\n};\n\nconst context = {\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetGraphTally,\n  useGraphCardContext,\n  useMetricsSelector\n};\n\nexport {\n  context as default,\n  context,\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetGraphTally,\n  useGraphCardContext,\n  useMetricsSelector\n};\n","import moment from 'moment';\nimport { chart_color_green_300 as chartColorGreenDark } from '@patternfly/react-tokens';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers, helpers } from '../../common';\n\n/**\n * Update chart/graph filters with base settings with styling.\n *\n * @param {Array} filters\n * @returns {{standaloneFilters: Array, groupedFilters: Array}}\n */\nconst generateChartSettings = (filters = []) => {\n  const standaloneFilters = [];\n  const groupedFilters = [];\n\n  filters.forEach(({ id, isStandalone = false, isThreshold = false, ...settings }) => {\n    if (!id) {\n      return;\n    }\n\n    const baseFilterSettings = {\n      id,\n      isStacked: !isThreshold,\n      isStandalone,\n      isThreshold,\n      strokeWidth: 2\n    };\n\n    if (isThreshold) {\n      baseFilterSettings.stroke = chartColorGreenDark.value;\n      baseFilterSettings.strokeDasharray = '4,3';\n      baseFilterSettings.strokeWidth = 3;\n    }\n\n    if (isStandalone) {\n      standaloneFilters.push({\n        ...baseFilterSettings,\n        ...settings\n      });\n    } else {\n      groupedFilters.push({\n        ...baseFilterSettings,\n        ...settings\n      });\n    }\n  });\n\n  return {\n    standaloneFilters,\n    groupedFilters\n  };\n};\n\n/**\n * Returns x axis ticks/intervals array for the xAxisTickInterval\n *\n * @param {string} granularity See enum of RHSM_API_QUERY_GRANULARITY_TYPES\n * @returns {number}\n */\nconst getChartXAxisLabelIncrement = granularity => {\n  switch (granularity) {\n    case GRANULARITY_TYPES.DAILY:\n      return 5;\n    case GRANULARITY_TYPES.WEEKLY:\n    case GRANULARITY_TYPES.MONTHLY:\n      return 2;\n    case GRANULARITY_TYPES.QUARTERLY:\n    default:\n      return 1;\n  }\n};\n\n/**\n * Return a formatted date string.\n *\n * @param {object} params\n * @param {Date} params.date\n * @param {string} params.granularity See enum of RHSM_API_QUERY_GRANULARITY_TYPES\n * @returns {string}\n */\nconst getTooltipDate = ({ date, granularity } = {}) => {\n  const momentDate = moment.utc(date);\n\n  switch (granularity) {\n    case GRANULARITY_TYPES.QUARTERLY:\n      return `${momentDate.format(dateHelpers.timestampQuarterFormats.yearShort)} - ${momentDate\n        .add(1, 'quarter')\n        .format(dateHelpers.timestampQuarterFormats.yearShort)}`;\n\n    case GRANULARITY_TYPES.MONTHLY:\n      return momentDate.format(dateHelpers.timestampMonthFormats.yearLong);\n\n    case GRANULARITY_TYPES.WEEKLY:\n      return `${momentDate.format(dateHelpers.timestampDayFormats.short)} - ${momentDate\n        .add(1, 'week')\n        .format(dateHelpers.timestampDayFormats.yearShort)}`;\n\n    case GRANULARITY_TYPES.DAILY:\n    default:\n      return momentDate.format(dateHelpers.timestampDayFormats.long);\n  }\n};\n\n/**\n * Format x axis ticks.\n *\n * @param {object} params\n * @param {Function} params.callback\n * @param {Date} params.date\n * @param {string} params.granularity See enum of RHSM_API_QUERY_GRANULARITY_TYPES\n * @param {number|string} params.tick\n * @param {Date} params.previousDate\n * @returns {string|undefined}\n */\nconst xAxisTickFormat = ({ callback, date, granularity, tick, previousDate } = {}) => {\n  if (!date || !granularity) {\n    return undefined;\n  }\n\n  if (callback) {\n    return callback({ callback, date, granularity, tick, previousDate });\n  }\n\n  const momentDate = moment.utc(date);\n  const isNewYear =\n    tick !== 0 && Number.parseInt(momentDate.year(), 10) !== Number.parseInt(moment.utc(previousDate).year(), 10);\n  let formattedDate;\n\n  switch (granularity) {\n    case GRANULARITY_TYPES.QUARTERLY:\n      formattedDate = isNewYear\n        ? momentDate.format(dateHelpers.timestampQuarterFormats.yearShort)\n        : momentDate.format(dateHelpers.timestampQuarterFormats.short);\n\n      formattedDate = formattedDate.replace(/\\s/, '\\n');\n      break;\n    case GRANULARITY_TYPES.MONTHLY:\n      formattedDate = isNewYear\n        ? momentDate.format(dateHelpers.timestampMonthFormats.yearShort)\n        : momentDate.format(dateHelpers.timestampMonthFormats.short);\n\n      formattedDate = formattedDate.replace(/\\s/, '\\n');\n      break;\n    case GRANULARITY_TYPES.WEEKLY:\n    case GRANULARITY_TYPES.DAILY:\n    default:\n      formattedDate = isNewYear\n        ? momentDate.format(dateHelpers.timestampDayFormats.yearShort)\n        : momentDate.format(dateHelpers.timestampDayFormats.short);\n\n      formattedDate = formattedDate.replace(/\\s(\\d{4})$/, '\\n$1');\n      break;\n  }\n\n  return formattedDate;\n};\n\n/**\n * Format y axis ticks.\n *\n * @param {object} params\n * @param {Function} params.callback\n * @param {number|string} params.tick\n * @returns {string}\n */\nconst yAxisTickFormat = ({ callback, tick } = {}) => {\n  if (callback) {\n    return callback({ tick });\n  }\n\n  return helpers\n    .numberDisplay(tick)\n    ?.format({\n      average: true,\n      mantissa: 1,\n      trimMantissa: true,\n      lowPrecision: false\n    })\n    ?.toUpperCase();\n};\n\n/**\n * Generate base chart component props.\n *\n * @param {object} params\n * @param {object} params.settings\n * @param {string} params.granularity\n * @returns {object}\n */\nconst generateExtendedChartSettings = ({ settings, granularity } = {}) => ({\n  ...settings,\n  xAxisLabelIncrement: getChartXAxisLabelIncrement(granularity),\n  xAxisTickFormat: ({ item, previousItem, tick }) =>\n    xAxisTickFormat({\n      callback: settings?.xAxisTickFormat,\n      tick,\n      date: item.date,\n      previousDate: previousItem.date,\n      granularity\n    }),\n  yAxisTickFormat: ({ tick }) =>\n    yAxisTickFormat({\n      callback: settings?.yAxisTickFormat,\n      tick\n    })\n});\n\nconst graphCardHelpers = {\n  generateChartSettings,\n  generateExtendedChartSettings,\n  getChartXAxisLabelIncrement,\n  getTooltipDate,\n  xAxisTickFormat,\n  yAxisTickFormat\n};\n\nexport {\n  graphCardHelpers as default,\n  graphCardHelpers,\n  generateChartSettings,\n  generateExtendedChartSettings,\n  getChartXAxisLabelIncrement,\n  getTooltipDate,\n  xAxisTickFormat,\n  yAxisTickFormat\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { helpers } from '../../common';\n\n/**\n * Set a min-height to prevent page jump component.\n *\n * @augments React.Component\n * @fires onResizeContainer\n */\nclass MinHeight extends React.Component {\n  containerRef = React.createRef();\n\n  innerContainerRef = React.createRef();\n\n  updatedContainerWidth = 0;\n\n  resizeObserver = helpers.noop;\n\n  componentDidMount() {\n    const { updateOnResize } = this.props;\n    window.setTimeout(() => {\n      this.setMinHeight();\n    });\n\n    if (updateOnResize) {\n      this.setResizeObserver();\n    }\n  }\n\n  componentDidUpdate() {\n    const { updateOnContent } = this.props;\n\n    if (updateOnContent) {\n      window.setTimeout(() => {\n        this.setMinHeight();\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.resizeObserver();\n  }\n\n  /**\n   * On resize adjust graph display.\n   *\n   * @event onResizeContainer\n   */\n  onResizeContainer = () => {\n    const { updatedContainerWidth } = this;\n    const { updateOnResize } = this.props;\n    const clientWidth = this.containerRef?.current?.clientWidth || 0;\n\n    if (updateOnResize && clientWidth !== updatedContainerWidth) {\n      this.updatedContainerWidth = clientWidth;\n      this.setMinHeight(true);\n    }\n  };\n\n  /**\n   * Set minHeight on mount or update.\n   *\n   * @param {boolean} reset\n   */\n  setMinHeight(reset = false) {\n    const { minHeight: overrideMinHeight } = this.props;\n    const { current: domElement = {} } = this.containerRef;\n    const { current: innerDomElement = {} } = this.innerContainerRef;\n\n    if (domElement?.style) {\n      let clientHeight;\n\n      if (reset) {\n        clientHeight = innerDomElement?.clientHeight || 0;\n      } else {\n        clientHeight = domElement?.clientHeight || 0;\n      }\n\n      if (overrideMinHeight > clientHeight) {\n        clientHeight = overrideMinHeight;\n      }\n\n      domElement.style.minHeight = `${clientHeight}px`;\n    }\n  }\n\n  /**\n   * Set ResizeObserver for scenarios when min-height needs to be updated.\n   */\n  setResizeObserver() {\n    window.addEventListener('resize', this.onResizeContainer);\n    this.resizeObserver = () => window.removeEventListener('resize', this.onResizeContainer);\n  }\n\n  /**\n   * Render a min-height div with children.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { children } = this.props;\n\n    return (\n      <div className=\"curiosity-minheight\" ref={this.containerRef}>\n        <div ref={this.innerContainerRef}>{children}</div>\n      </div>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{minHeight: number, children: Node, updateOnContent: boolean, updateOnResize: boolean}}\n */\nMinHeight.propTypes = {\n  updateOnContent: PropTypes.bool,\n  updateOnResize: PropTypes.bool,\n  children: PropTypes.node.isRequired,\n  minHeight: PropTypes.number\n};\n\n/**\n * Default props.\n *\n * @type {{minHeight: number, updateOnContent: boolean, updateOnResize: boolean}}\n */\nMinHeight.defaultProps = {\n  updateOnContent: false,\n  updateOnResize: true,\n  minHeight: 0\n};\n\nexport { MinHeight as default, MinHeight };\n","var keyList = Object.keys;\n\nexports.equal = function equal (a, b) {\n  if (a === b) return true;\n  if (!(a instanceof Object) || !(b instanceof Object)) return false;\n\n  var keys = keyList(a);\n  var length = keys.length;\n\n  for (var i = 0; i < length; i++)\n    if (!(keys[i] in b)) return false;\n\n  for (var i = 0; i < length; i++)\n    if (a[keys[i]] !== b[keys[i]]) return false;\n\n  return length === keyList(b).length;\n};\n","import { equal as isShallowEqual } from 'fast-shallow-equal';\nimport useCustomCompareEffect from './useCustomCompareEffect';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar shallowEqualDepsList = function (prevDeps, nextDeps) {\n    return prevDeps.every(function (dep, index) { return isShallowEqual(dep, nextDeps[index]); });\n};\nvar useShallowCompareEffect = function (effect, deps) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useShallowCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useShallowCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n    }\n    useCustomCompareEffect(effect, deps, shallowEqualDepsList);\n};\nexport default useShallowCompareEffect;\n","import { useEffect, useRef } from 'react';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar useCustomCompareEffect = function (effect, deps, depsEqual) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useCustomCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useCustomCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n        if (typeof depsEqual !== 'function') {\n            console.warn('`useCustomCompareEffect` should be used with depsEqual callback for comparing deps list');\n        }\n    }\n    var ref = useRef(undefined);\n    if (!ref.current || !depsEqual(deps, ref.current)) {\n        ref.current = deps;\n    }\n    useEffect(effect, ref.current);\n};\nexport default useCustomCompareEffect;\n"],"names":["ChartIcon","fill","symbol","size","title","svgProps","iconProps","emSvgSize","getSize","color","className","style","width","height","Number","parseFloat","viewBox","role","y","x","x1","y1","x2","y2","stroke","strokeWidth","strokeDasharray","EyeIcon","EyeSlashIcon","InfinityIcon","SquareIcon","setIcon","defaultProps","GraphCardChart","t","useAliasGetGraphTally","useGetGraphTally","useAliasGraphCardContext","useGraphCardContext","useAliasMetricsSelector","useMetricsSelector","useAliasProduct","useProduct","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","productId","settings","actionDisplay","metric","metrics","granularity","RHSM_API_QUERY_SET_TYPES","pending","error","data","dataSets","getGraphTally","useShallowCompareEffect","map","metricId","id","standaloneMetricId","updatedActionDisplay","Card","MinHeight","key","CardHeader","CardTitle","Title","headingLevel","context","GraphCardChartTitleTooltip","CardActions","CardBody","Loader","variant","Chart","graphCardHelpers","chartLegend","chart","datum","GraphCardChartLegend","chartTooltip","GraphCardChartTooltip","translate","useAliasDispatch","useDispatch","useAliasSelectors","useSelectors","productLabel","viewId","dispatch","legendItems","graph","legend","useMount","forEach","index","isToggled","hide","onClick","updatedToggle","toggle","type","reduxTypes","value","isThreshold","isDisabled","find","hasData","labelContent","product","tooltipContent","whiteSpace","checkIsToggled","button","Button","onKeyPress","tabIndex","component","icon","visibility","Tooltip","content","position","TooltipPosition","enableFlip","distance","helpers","storeHooks","isCardTitleDescription","entryDelay","exitDelay","OutlinedQuestionCircleIcon","header","itemsByKey","Object","keys","reverse","getTooltipDate","date","tempDataFacet","chartType","thresholdStringValue","hasInfinite","label","dataFactsValue","push","summary","length","colSpan","dataFacet","updatedDataFacetValue","isInteger","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","DEFAULT_CONTEXT","isStandalone","undefined","GraphCardContext","React","useContext","query","reduxActions","metricResponses","tally","isPending","isFulfilled","errorCount","fulfilled","cancelled","updatedMetric","meta","response","generateChartSettings","filters","standaloneFilters","groupedFilters","baseFilterSettings","isStacked","chartColorGreenDark","getChartXAxisLabelIncrement","GRANULARITY_TYPES","momentDate","moment","dateHelpers","add","xAxisTickFormat","callback","tick","previousDate","formattedDate","isNewYear","parseInt","year","replace","yAxisTickFormat","generateExtendedChartSettings","xAxisLabelIncrement","item","previousItem","containerRef","innerContainerRef","updatedContainerWidth","resizeObserver","onResizeContainer","updateOnResize","props","clientWidth","current","setMinHeight","this","window","setTimeout","setResizeObserver","updateOnContent","clientHeight","reset","overrideMinHeight","minHeight","domElement","innerDomElement","addEventListener","removeEventListener","children","ref","keyList","exports","a","b","i","shallowEqualDepsList","prevDeps","nextDeps","every","dep","effect","deps","depsEqual","useRef","useEffect"],"sourceRoot":""}