{"version":3,"file":"js/5473.1643138654621.c01d5d10891cb359d33b.js","mappings":"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","sources":["webpack:///./src/components/inventoryCard/inventoryCardHelpers.js","webpack:///./src/components/inventoryGuests/guestsList.deprecated.js"],"sourcesContent":["import React from 'react';\nimport { cellWidth as PfCellWidth, SortByDirection, wrappable } from '@patternfly/react-table';\nimport _camelCase from 'lodash/camelCase';\nimport { translate } from '../i18n/i18n';\nimport {\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_TYPES\n} from '../../types/rhsmApiTypes';\nimport { helpers } from '../../common';\n\n/**\n * Apply sort filter to filters.\n *\n * @param {object} params\n * @param {{ onSort: Function, sortActive: boolean, sortDirection: string, isSortDefault: boolean,\n *     sortDefaultInitialDirection: string }} params.filter\n * @param {Function} params.onSort\n * @param {object} params.query\n * @returns {object}\n */\nconst applySortFilters = ({ filter = {}, onSort, query = {} }) => {\n  const { id, sortId } = filter;\n  const updatedId = sortId || id;\n  const updatedFilter = { ...filter };\n  const hasSort = updatedFilter.onSort || onSort;\n\n  if (!updatedFilter.onSort && onSort) {\n    updatedFilter.onSort = onSort;\n  }\n\n  // set fallback for the active sorted column based on query\n  if (\n    hasSort &&\n    typeof updatedFilter.sortActive !== 'boolean' &&\n    query?.[RHSM_API_QUERY_TYPES.SORT] &&\n    (query?.[RHSM_API_QUERY_TYPES.SORT] === updatedId || _camelCase(query?.[RHSM_API_QUERY_TYPES.SORT]) === updatedId)\n  ) {\n    updatedFilter.sortActive = true;\n  }\n\n  // set sort direction\n  if (hasSort && !updatedFilter.sortDirection && query?.[RHSM_API_QUERY_TYPES.DIRECTION]) {\n    switch (query?.[RHSM_API_QUERY_TYPES.DIRECTION]) {\n      case SORT_DIRECTION_TYPES.DESCENDING:\n        updatedFilter.sortDirection = SortByDirection.desc;\n        break;\n      default:\n        updatedFilter.sortDirection = SortByDirection.asc;\n        break;\n    }\n  }\n\n  if (\n    hasSort &&\n    !updatedFilter.sortActive &&\n    !query?.[RHSM_API_QUERY_TYPES.SORT] &&\n    updatedFilter.isSortDefault === true\n  ) {\n    updatedFilter.sortActive = true;\n\n    if (updatedFilter.sortDefaultInitialDirection) {\n      updatedFilter.sortDirection = updatedFilter.sortDefaultInitialDirection;\n    }\n  }\n\n  return updatedFilter;\n};\n\nconst applyWrappableFilters = ({ filter = {} }) => {\n  const updatedFilter = { ...filter };\n\n  if (Array.isArray(updatedFilter.transforms)) {\n    updatedFilter.transforms.push(wrappable);\n  } else {\n    updatedFilter.transforms = [wrappable];\n  }\n\n  return updatedFilter;\n};\n\n/**\n * Apply additional properties to filters.\n *\n * @param {object} params\n * @param {Array} params.filters\n * @param {Function} params.onSort\n * @param {object} params.query\n * @returns {Array}\n */\nconst parseInventoryFilters = ({ filters = [], onSort, query = {} }) =>\n  [...filters].map(filter => {\n    const updatedFilter = { ...filter };\n\n    if (updatedFilter.isSortable) {\n      Object.assign(updatedFilter, applySortFilters({ filter: updatedFilter, onSort, query }));\n    }\n\n    if (updatedFilter.isWrappable) {\n      Object.assign(updatedFilter, applyWrappableFilters({ filter: updatedFilter }));\n    }\n\n    return updatedFilter;\n  });\n\n/**\n * Parse and return formatted/filtered table cells, and apply table filters.\n *\n * @param {object} params\n * @param {Array} params.filters\n * @param {object} params.cellData\n * @param {object} params.session\n * @returns {{columnHeaders: Array, cells: Array, data: object}}\n */\nconst parseRowCellsListData = ({ filters = [], cellData = {}, session = {} }) => {\n  const updatedColumnHeaders = [];\n  const updatedCells = [];\n  const allCells = {};\n\n  // Apply basic translation and value\n  Object.entries(cellData).forEach(([key, value]) => {\n    allCells[key] = {\n      title: translate('curiosity-inventory.header', { context: key }),\n      value\n    };\n\n    updatedColumnHeaders.push(allCells[key].title);\n    updatedCells.push(value);\n  });\n\n  // Apply filters to header and cell values\n  if (filters?.length) {\n    updatedColumnHeaders.length = 0;\n    updatedCells.length = 0;\n\n    filters.forEach(({ id, cell, cellWidth, header, onSort, sortId, sortActive, sortDirection, transforms }) => {\n      let headerUpdated;\n      let cellUpdated;\n\n      if (allCells[id]) {\n        headerUpdated = allCells[id]?.title ?? id;\n        cellUpdated = allCells[id]?.value ?? '';\n      } else if (id) {\n        headerUpdated = translate('curiosity-inventory.header', { context: id });\n        cellUpdated = '';\n      }\n\n      // set table header cell filter params\n      if (header) {\n        headerUpdated = (typeof header === 'function' && header({ ...allCells })) || header;\n      }\n\n      if (\n        typeof headerUpdated === 'string' ||\n        typeof headerUpdated === 'number' ||\n        React.isValidElement(headerUpdated)\n      ) {\n        headerUpdated = {\n          title: headerUpdated\n        };\n      }\n\n      if (headerUpdated) {\n        headerUpdated.transforms = [];\n\n        if (Array.isArray(transforms)) {\n          headerUpdated.transforms = headerUpdated.transforms.concat([...transforms]);\n        }\n\n        if (typeof cellWidth === 'number') {\n          headerUpdated.transforms.push(PfCellWidth(cellWidth));\n        }\n      }\n\n      if (typeof onSort === 'function') {\n        headerUpdated = {\n          ...headerUpdated,\n          onSort: obj => onSort({ ...allCells }, { ...obj, id: sortId || id }),\n          sortActive,\n          sortDirection\n        };\n      }\n\n      // set table row cell filter params\n      if (cell) {\n        cellUpdated = typeof cell === 'function' ? cell({ ...allCells }, { ...session }) : cell;\n      }\n\n      if (typeof cellUpdated === 'string' || typeof cellUpdated === 'number' || React.isValidElement(cellUpdated)) {\n        cellUpdated = {\n          title: cellUpdated\n        };\n      } else if (!cellUpdated?.title) {\n        if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n          console.error(\n            `PF table throws an error when cell values don't conform to what it is expecting, or align exactly to column headers.\n            \\n\\nSee cell ID=${id} with VALUE=${cellUpdated}`\n          );\n        }\n\n        cellUpdated = {\n          title: ''\n        };\n      }\n\n      updatedColumnHeaders.push(headerUpdated);\n      updatedCells.push(cellUpdated);\n    });\n  }\n\n  return {\n    columnHeaders: updatedColumnHeaders,\n    cells: updatedCells,\n    data: { ...allCells }\n  };\n};\n\nconst inventoryCardHelpers = {\n  applySortFilters,\n  applyWrappableFilters,\n  parseInventoryFilters,\n  parseRowCellsListData\n};\n\nexport {\n  inventoryCardHelpers as default,\n  inventoryCardHelpers,\n  applySortFilters,\n  applyWrappableFilters,\n  parseInventoryFilters,\n  parseRowCellsListData\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TableVariant } from '@patternfly/react-table';\nimport { helpers } from '../../common';\nimport { apiQueries, connect, reduxActions, reduxSelectors } from '../../redux';\nimport { Loader } from '../loader/loader';\nimport { inventoryCardHelpers } from '../inventoryCard/inventoryCardHelpers';\nimport { RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { Table } from '../table/table';\n\n/**\n * ToDo: Consider removing the query prop entirely.\n * The current API doesn't allow setting more than \"offset\" and \"limit\"\n */\n/**\n * ToDo: Review moving the \"onScroll\" layout into a standalone component.\n */\n/**\n * A system inventory guests component.\n *\n * @augments React.Component\n * @fires onUpdateGuestsData\n * @fires onScroll\n */\nclass GuestsList extends React.Component {\n  state = { currentPage: 0, limit: 100, previousData: [] };\n\n  componentDidMount() {\n    this.onUpdateGuestsData();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { currentPage } = this.state;\n\n    if (currentPage !== prevState.currentPage) {\n      this.onUpdateGuestsData();\n    }\n  }\n\n  /**\n   * Call the RHSM APIs, apply filters.\n   *\n   * @event onUpdateGuestsData\n   */\n  onUpdateGuestsData = () => {\n    const { currentPage, limit } = this.state;\n    const { getHostsInventoryGuests, query, id } = this.props;\n\n    if (id) {\n      const updatedQuery = {\n        ...query,\n        [RHSM_API_QUERY_TYPES.LIMIT]: limit,\n        [RHSM_API_QUERY_TYPES.OFFSET]: currentPage * limit || 0\n      };\n\n      const { inventoryGuestsQuery } = apiQueries.parseRhsmQuery(updatedQuery);\n      getHostsInventoryGuests(id, inventoryGuestsQuery);\n    }\n  };\n\n  /**\n   * Update page state.\n   *\n   * @event onScroll\n   * @param {object} event\n   */\n  onScroll = event => {\n    const { target } = event;\n    const { currentPage, limit, previousData } = this.state;\n    const { numberOfGuests, pending, listData } = this.props;\n\n    const bottom = target.scrollHeight - target.scrollTop === target.clientHeight;\n\n    if (numberOfGuests > (currentPage + 1) * limit && bottom && !pending) {\n      const newPage = currentPage + 1;\n      const updatedData = [...previousData, ...(listData || [])];\n\n      this.setState({\n        previousData: updatedData,\n        currentPage: newPage\n      });\n    }\n  };\n\n  renderLoader() {\n    const { currentPage } = this.state;\n    const { filterGuestsData, listData, pending } = this.props;\n\n    if (currentPage > 0 && pending) {\n      const scrollLoader = (\n        <Loader\n          variant=\"table\"\n          tableProps={{\n            borders: false,\n            colCount: filterGuestsData?.length || (listData?.[0] && Object.keys(listData[0]).length) || 1,\n            colWidth: (filterGuestsData?.length && filterGuestsData.map(({ cellWidth }) => cellWidth)) || [],\n            rowCount: 0,\n            variant: TableVariant.compact\n          }}\n        />\n      );\n\n      return <div className=\"curiosity-table-scroll-loader__custom\">{scrollLoader}</div>;\n    }\n\n    return null;\n  }\n\n  /**\n   * ToDo: Consider moving the \"meaning of life\" into the default props on iteration.\n   * For everyone else... move the 42 into default props, possibly the 275.\n   */\n  /**\n   * Render a guests table.\n   *\n   * @returns {Node}\n   */\n  renderTable() {\n    const { previousData } = this.state;\n    const { filterGuestsData, listData, numberOfGuests, session } = this.props;\n    let updatedColumnHeaders = [];\n\n    const updatedRows = [...previousData, ...(listData || [])].map(({ ...cellData }) => {\n      const { columnHeaders, cells } = inventoryCardHelpers.parseRowCellsListData({\n        filters: filterGuestsData,\n        cellData,\n        session\n      });\n\n      updatedColumnHeaders = columnHeaders;\n\n      return {\n        cells\n      };\n    });\n\n    // Include the table header\n    let updatedHeight = (numberOfGuests + 1) * 42;\n    updatedHeight = (updatedHeight < 275 && updatedHeight) || 275;\n\n    return (\n      <div className=\"curiosity-table-scroll\" style={{ height: `${updatedHeight}px` }}>\n        <div\n          className={`curiosity-table-scroll-list${(updatedHeight < 275 && '__no-scroll') || ''}`}\n          onScroll={this.onScroll}\n        >\n          {this.renderLoader()}\n          {(updatedRows.length && (\n            <Table\n              borders={false}\n              variant={TableVariant.compact}\n              className=\"curiosity-guests-list\"\n              columnHeaders={updatedColumnHeaders}\n              rows={updatedRows}\n            />\n          )) ||\n            null}\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * Render a guest list table.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { currentPage } = this.state;\n    const { error, filterGuestsData, listData, numberOfGuests, pending, perPageDefault } = this.props;\n\n    return (\n      <div className={`fadein ${(error && 'blur') || ''}`}>\n        {pending && currentPage === 0 && (\n          <Loader\n            variant=\"table\"\n            tableProps={{\n              borders: false,\n              className: 'curiosity-guests-list',\n              colCount: filterGuestsData?.length || (listData?.[0] && Object.keys(listData[0]).length) || 1,\n              colWidth: (filterGuestsData?.length && filterGuestsData.map(({ cellWidth }) => cellWidth)) || [],\n              rowCount: numberOfGuests < perPageDefault ? numberOfGuests : perPageDefault,\n              variant: TableVariant.compact\n            }}\n          />\n        )}\n        {((!pending && currentPage === 0) || currentPage > 0) && this.renderTable()}\n      </div>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{listData: Array, getHostsInventoryGuests: Function, session: object, filterGuestsData: object,\n *     pending: boolean, query: object, numberOfGuests: number, perPageDefault: number, id: string,\n *     error: boolean}}\n */\nGuestsList.propTypes = {\n  error: PropTypes.bool,\n  filterGuestsData: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      header: PropTypes.oneOfType([\n        PropTypes.shape({\n          title: PropTypes.node.isRequired\n        }),\n        PropTypes.func,\n        PropTypes.node\n      ]),\n      cell: PropTypes.oneOfType([\n        PropTypes.shape({\n          title: PropTypes.node.isRequired\n        }),\n        PropTypes.func,\n        PropTypes.node\n      ])\n    }).isRequired\n  ),\n  getHostsInventoryGuests: PropTypes.func,\n  listData: PropTypes.array,\n  id: PropTypes.string.isRequired,\n  numberOfGuests: PropTypes.number.isRequired,\n  pending: PropTypes.bool,\n  perPageDefault: PropTypes.number,\n  query: PropTypes.object,\n  session: PropTypes.object\n};\n\n/**\n * Default props.\n *\n * @type {{listData: Array, getHostsInventoryGuests: Function, session: object, filterGuestsData: Array,\n *     pending: boolean, query: object, perPageDefault: number, error: boolean}}\n */\nGuestsList.defaultProps = {\n  error: false,\n  filterGuestsData: [],\n  getHostsInventoryGuests: helpers.noop,\n  listData: [],\n  pending: false,\n  perPageDefault: 5,\n  query: {},\n  session: {}\n};\n\n/**\n * Apply actions to props.\n *\n * @param {Function} dispatch\n * @returns {object}\n */\nconst mapDispatchToProps = dispatch => ({\n  getHostsInventoryGuests: (id, query) => dispatch(reduxActions.rhsm.getHostsInventoryGuests(id, query))\n});\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.guestsList.makeGuestsList();\n\nconst ConnectedGuestsList = connect(makeMapStateToProps, mapDispatchToProps)(GuestsList);\n\nexport { ConnectedGuestsList as default, ConnectedGuestsList, GuestsList };\n"],"names":["applySortFilters","filter","onSort","query","id","updatedId","sortId","updatedFilter","hasSort","sortActive","RHSM_API_QUERY_TYPES","_camelCase","sortDirection","SORT_DIRECTION_TYPES","SortByDirection","isSortDefault","sortDefaultInitialDirection","applyWrappableFilters","Array","isArray","transforms","push","wrappable","parseInventoryFilters","filters","map","isSortable","Object","assign","isWrappable","parseRowCellsListData","cellData","session","updatedColumnHeaders","updatedCells","allCells","entries","forEach","key","value","title","translate","context","length","headerUpdated","cellUpdated","cell","cellWidth","header","React","concat","PfCellWidth","obj","helpers","console","error","columnHeaders","cells","data","inventoryCardHelpers","GuestsList","state","currentPage","limit","previousData","onUpdateGuestsData","props","getHostsInventoryGuests","updatedQuery","apiQueries","inventoryGuestsQuery","onScroll","event","target","numberOfGuests","pending","listData","bottom","scrollHeight","scrollTop","clientHeight","newPage","updatedData","setState","this","prevProps","prevState","filterGuestsData","scrollLoader","Loader","variant","tableProps","borders","colCount","keys","colWidth","rowCount","TableVariant","className","updatedRows","updatedHeight","style","height","renderLoader","Table","rows","perPageDefault","renderTable","defaultProps","makeMapStateToProps","reduxSelectors","ConnectedGuestsList","connect","dispatch","reduxActions"],"sourceRoot":""}