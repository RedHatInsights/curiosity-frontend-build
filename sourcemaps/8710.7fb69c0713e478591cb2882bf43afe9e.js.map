{"version":3,"file":"js/8710.e803708c6578acdefc22.js","mappings":"mSAsBA,MAAMA,UAAkBC,IAAAA,UAAgBC,cAAA,SAAAC,YAAAC,EAAAA,EAAAA,GAAA,aAC9B,CACNC,aAAc,QAGhBD,EAAAA,EAAAA,GAAA,gBAMUE,IACR,MAAM,QAAEC,EAAO,QAAEC,EAAO,KAAEC,GAASC,KAAKC,OAClC,cAAEC,EAAa,QAAEC,GAAYP,EAC7BQ,EAAc,IAAKR,GAEzBE,GAAQO,EAAAA,EAAAA,iBAAgBT,GAAO,IAEf,KAAZO,IACW,WAATJ,GAA6C,KAAxBG,EAAcI,MACrCT,GAAQQ,EAAAA,EAAAA,iBAAgBD,IAExBJ,KAAKO,SAAS,CAAEZ,aAAc,KAAM,KAClCE,GACEQ,EAAAA,EAAAA,iBAAgB,IAAKD,EAAkBF,cAAe,IAAKE,EAAYF,cAAeI,MAAO,MAC9F,IAGP,KAGFZ,EAAAA,EAAAA,GAAA,kBAMYE,IACV,MAAM,QAAEC,EAAO,UAAEW,EAAS,KAAET,GAASC,KAAKC,OACpC,cAAEC,GAAkBN,EACpBQ,EAAc,IAAKR,GAEzBY,GAAUH,EAAAA,EAAAA,iBAAgBT,GAAO,IAEpB,WAATG,GAA6C,KAAxBG,EAAcI,OAIvCG,YAAW,KACmB,KAAxBP,EAAcI,OAChBT,GAAQQ,EAAAA,EAAAA,iBAAgBD,GAC1B,GACA,KAGJV,EAAAA,EAAAA,GAAA,iBAOW,CAACY,EAAOV,KACjB,MAAM,SAAEc,GAAaV,KAAKC,MACpBG,EAAc,IAAKR,GAEzBI,KAAKO,SAAS,CAAEZ,aAAcW,IAAS,KACrCI,GAASL,EAAAA,EAAAA,iBAAgBD,GAAa,GACtC,GACH,CAODO,SAAS,IAAAC,EACP,MAAM,aAAEjB,GAAiBK,KAAKa,OACxB,UACJC,EAAS,GACTC,EAAE,WACFC,EAAU,KACVC,EAAI,SACJP,EAAQ,QACRb,EAAO,QACPC,EAAO,UACPU,EAAS,WACTU,EAAU,KACVnB,EAAI,MACJO,KACGL,GACDD,KAAKC,MACHkB,EAAcF,GAAQG,EAAAA,QAAAA,aACtBC,EAAYN,GAAMI,EAExB,OACE5B,IAAAA,cAAC+B,EAAAA,WAAWC,EAAAA,EAAAA,GAAA,CACVR,GAAIM,EACJJ,KAAME,EACNL,UAAS,wBAAAU,OAA0BV,GACnCE,WAAYA,IAAc,EAC1BN,SAAUV,KAAKU,SACfZ,QAASE,KAAKF,QACdU,UAAWR,KAAKQ,UAChBU,WAAYA,IAAc,EAC1BnB,KAAMA,EACNO,MAA4B,QAAvBM,EAAEjB,QAAAA,EAAgBW,SAAK,IAAAM,EAAAA,EAAI,IAC5BX,GAGV,EAUFX,EAAUmC,UAAY,CACpBX,UAAWY,IAAAA,OACXX,GAAIW,IAAAA,OACJV,WAAYU,IAAAA,KACZR,WAAYQ,IAAAA,KACZT,KAAMS,IAAAA,OACNhB,SAAUgB,IAAAA,KACV7B,QAAS6B,IAAAA,KACT5B,QAAS4B,IAAAA,KACTlB,UAAWkB,IAAAA,KACX3B,KAAM2B,IAAAA,OACNpB,MAAOoB,IAAAA,QAUTpC,EAAUqC,aAAe,CACvBb,UAAW,GACXC,GAAI,KACJC,YAAY,EACZE,YAAY,EACZD,KAAM,KACNP,SAAUU,EAAAA,QAAAA,KACVvB,QAASuB,EAAAA,QAAAA,KACTtB,QAASsB,EAAAA,QAAAA,KACTZ,UAAWY,EAAAA,QAAAA,KACXrB,KAAM,OACNO,MAAO,G","sources":["webpack:///./src/components/form/textInput.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TextInput as PfTextInput } from '@patternfly/react-core';\nimport { createMockEvent } from './formHelpers';\nimport { helpers } from '../../common';\n\n/**\n * Text input with state.\n *\n * @memberof Form\n * @module TextInput\n */\n\n/**\n * A wrapper for Patternfly TextInput. Provides restructured event data,\n * and an onClear event for the search type.\n *\n * @augments React.Component\n * @fires onKeyUp\n * @fires onMouseUp\n * @fires onChange\n */\nclass TextInput extends React.Component {\n  state = {\n    updatedValue: null\n  };\n\n  /**\n   * onKeyUp event, provide additional functionality for onClear event.\n   *\n   * @event onKeyUp\n   * @param {object} event\n   */\n  onKeyUp = event => {\n    const { onClear, onKeyUp, type } = this.props;\n    const { currentTarget, keyCode } = event;\n    const clonedEvent = { ...event };\n\n    onKeyUp(createMockEvent(event, true));\n\n    if (keyCode === 27) {\n      if (type === 'search' && currentTarget.value === '') {\n        onClear(createMockEvent(clonedEvent));\n      } else {\n        this.setState({ updatedValue: '' }, () => {\n          onClear(\n            createMockEvent({ ...clonedEvent, ...{ currentTarget: { ...clonedEvent.currentTarget, value: '' } } })\n          );\n        });\n      }\n    }\n  };\n\n  /**\n   * onMouseUp event, provide additional functionality for onClear event.\n   *\n   * @event onMouseUp\n   * @param {object} event\n   */\n  onMouseUp = event => {\n    const { onClear, onMouseUp, type } = this.props;\n    const { currentTarget } = event;\n    const clonedEvent = { ...event };\n\n    onMouseUp(createMockEvent(event, true));\n\n    if (type !== 'search' || currentTarget.value === '') {\n      return;\n    }\n\n    setTimeout(() => {\n      if (currentTarget.value === '') {\n        onClear(createMockEvent(clonedEvent));\n      }\n    });\n  };\n\n  /**\n   * onChange event, provide restructured event.\n   *\n   * @event onChange\n   * @param {string} value\n   * @param {object} event\n   */\n  onChange = (value, event) => {\n    const { onChange } = this.props;\n    const clonedEvent = { ...event };\n\n    this.setState({ updatedValue: value }, () => {\n      onChange(createMockEvent(clonedEvent));\n    });\n  };\n\n  /**\n   * Render a text input.\n   *\n   * @returns {React.ReactNode}\n   */\n  render() {\n    const { updatedValue } = this.state;\n    const {\n      className,\n      id,\n      isDisabled,\n      name,\n      onChange,\n      onClear,\n      onKeyUp,\n      onMouseUp,\n      isReadOnly,\n      type,\n      value,\n      ...props\n    } = this.props;\n    const updatedName = name || helpers.generateId();\n    const updatedId = id || updatedName;\n\n    return (\n      <PfTextInput\n        id={updatedId}\n        name={updatedName}\n        className={`curiosity-text-input ${className}`}\n        isDisabled={isDisabled || false}\n        onChange={this.onChange}\n        onKeyUp={this.onKeyUp}\n        onMouseUp={this.onMouseUp}\n        isReadOnly={isReadOnly || false}\n        type={type}\n        value={updatedValue ?? value ?? ''}\n        {...props}\n      />\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{onKeyUp: Function, isReadOnly: boolean, onChange: Function, onClear: Function,\n *     name: string, className: string, id: string, isDisabled: boolean, onMouseUp: Function,\n *     type: string, value: string}}\n */\nTextInput.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  isDisabled: PropTypes.bool,\n  isReadOnly: PropTypes.bool,\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  onClear: PropTypes.func,\n  onKeyUp: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  type: PropTypes.string,\n  value: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{onKeyUp: Function, isReadOnly: boolean, onChange: Function, onClear: Function,\n *     name: string, className: string, id: string, isDisabled: boolean, onMouseUp: Function,\n *     type: string, value: string}}\n */\nTextInput.defaultProps = {\n  className: '',\n  id: null,\n  isDisabled: false,\n  isReadOnly: false,\n  name: null,\n  onChange: helpers.noop,\n  onClear: helpers.noop,\n  onKeyUp: helpers.noop,\n  onMouseUp: helpers.noop,\n  type: 'text',\n  value: ''\n};\n\nexport { TextInput as default, TextInput };\n"],"names":["TextInput","React","constructor","arguments","_defineProperty","updatedValue","event","onClear","onKeyUp","type","this","props","currentTarget","keyCode","clonedEvent","createMockEvent","value","setState","onMouseUp","setTimeout","onChange","render","_ref","state","className","id","isDisabled","name","isReadOnly","updatedName","helpers","updatedId","PfTextInput","_extends","concat","propTypes","PropTypes","defaultProps"],"sourceRoot":""}