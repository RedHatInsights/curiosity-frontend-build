{"version":3,"file":"js/4418.bed63129c882b62060e3.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardChartLegend.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { connect, store, reduxTypes } from '../../redux';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { ChartIcon } from '../chart/chartIcon';\n\n/**\n * A custom chart legend.\n *\n * @augments React.Component\n * @fires onClick\n */\nclass GraphCardChartLegend extends React.Component {\n  componentDidMount() {\n    const { chart, datum, legend, viewId } = this.props;\n    datum.dataSets.forEach(({ id }) => {\n      const checkIsToggled = legend[`${viewId}-${id}`] || chart.isToggled(id);\n\n      if (checkIsToggled) {\n        chart.hide(id);\n      }\n    });\n  }\n\n  /**\n   * Toggle legend item and chart.\n   *\n   * @event onClick\n   * @param {string} id\n   */\n  onClick = id => {\n    const { chart, viewId } = this.props;\n    const updatedToggle = chart.toggle(id);\n\n    store.dispatch({\n      type: reduxTypes.graph.SET_GRAPH_LEGEND,\n      legend: {\n        [`${viewId}-${id}`]: updatedToggle\n      }\n    });\n  };\n\n  /**\n   * Return a legend item.\n   *\n   * @param {object} options\n   * @param {string} options.chartId\n   * @param {string} options.color\n   * @param {boolean} options.isDisabled\n   * @param {boolean} options.isThreshold\n   * @param {string} options.labelContent\n   * @param {string} options.tooltipContent\n   * @returns {Node}\n   */\n  renderLegendItem({ chartId, color, isDisabled, isThreshold, labelContent, tooltipContent }) {\n    const { chart, legend, viewId } = this.props;\n    const checkIsToggled = legend[`${viewId}-${chartId}`] || chart.isToggled(chartId);\n\n    const button = (\n      <Button\n        onClick={() => this.onClick(chartId)}\n        onKeyPress={() => this.onClick(chartId)}\n        className=\"curiosity-usage-graph__legend-item\"\n        tabIndex={0}\n        key={`curiosity-button-${chartId}`}\n        variant=\"link\"\n        component=\"a\"\n        isDisabled={isDisabled}\n        icon={\n          ((isDisabled || checkIsToggled) && <ChartIcon symbol=\"eyeSlash\" />) || (\n            <ChartIcon\n              symbol={(isThreshold && 'dash') || 'square'}\n              style={{ visibility: (isDisabled && 'hidden') || (checkIsToggled && 'hidden') || 'visible' }}\n              fill={color}\n            />\n          )\n        }\n      >\n        {labelContent}\n      </Button>\n    );\n\n    if (tooltipContent) {\n      return (\n        <Tooltip\n          key={`curiosity-tooltip-${chartId}`}\n          content={<p>{tooltipContent}</p>}\n          position={TooltipPosition.top}\n          enableFlip\n          distance={5}\n        >\n          {button}\n        </Tooltip>\n      );\n    }\n\n    return button;\n  }\n\n  /**\n   * Render a graph legend.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { datum, productLabel, t } = this.props;\n\n    return (\n      <React.Fragment>\n        {datum.dataSets.map(({ id, isThreshold, stroke, data = [] }) => {\n          const isDisabled =\n            !data.find(({ y, hasData }) => (y >= 0 && hasData === true) || (y >= 0 && isThreshold === true)) || false;\n\n          const labelContent =\n            (isThreshold &&\n              t('curiosity-graph.label_threshold', {\n                product: productLabel,\n                context: [id, productLabel]\n              })) ||\n            t([`curiosity-graph.${id}Label`, `curiosity-graph.noLabel`], {\n              product: productLabel,\n              context: productLabel\n            });\n\n          const tooltipContent =\n            (isThreshold &&\n              t('curiosity-graph.legendTooltip_threshold', {\n                product: productLabel,\n                context: [id, productLabel]\n              })) ||\n            t(`curiosity-graph.${id}LegendTooltip`, { product: productLabel, context: productLabel });\n\n          return this.renderLegendItem({\n            chartId: id,\n            color: stroke,\n            labelContent,\n            isDisabled,\n            isThreshold,\n            tooltipContent\n          });\n        })}\n      </React.Fragment>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{datum: object, productLabel: string, viewId: string, t: Function, legend: object,\n *     chart: object}}\n */\nGraphCardChartLegend.propTypes = {\n  chart: PropTypes.shape({\n    hide: PropTypes.func,\n    toggle: PropTypes.func,\n    isToggled: PropTypes.func\n  }),\n  datum: PropTypes.shape({\n    dataSets: PropTypes.arrayOf(\n      PropTypes.shape({\n        stroke: PropTypes.string.isRequired,\n        id: PropTypes.string.isRequired,\n        isThreshold: PropTypes.bool\n      })\n    )\n  }),\n  legend: PropTypes.objectOf(PropTypes.bool),\n  productLabel: PropTypes.string,\n  t: PropTypes.func,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{datum: object, productLabel: string, viewId: string, t: translate, legend: object,\n *     chart: object}}\n */\nGraphCardChartLegend.defaultProps = {\n  chart: {\n    hide: helpers.noop,\n    toggle: helpers.noop,\n    isToggled: helpers.noop\n  },\n  datum: {\n    dataSets: []\n  },\n  legend: {},\n  productLabel: '',\n  t: translate,\n  viewId: 'graphCardLegend'\n};\n\nconst mapStateToProps = ({ graph }) => ({ legend: graph.legend });\n\nconst ConnectedGraphCardChartLegend = connect(mapStateToProps)(GraphCardChartLegend);\n\nexport { ConnectedGraphCardChartLegend as default, ConnectedGraphCardChartLegend, GraphCardChartLegend };\n"],"names":["GraphCardChartLegend","onClick","id","props","chart","viewId","updatedToggle","toggle","store","type","reduxTypes","legend","this","datum","dataSets","forEach","isToggled","hide","chartId","color","isDisabled","isThreshold","labelContent","tooltipContent","checkIsToggled","button","Button","onKeyPress","className","tabIndex","key","variant","component","icon","ChartIcon","symbol","style","visibility","fill","Tooltip","content","position","TooltipPosition","enableFlip","distance","productLabel","t","map","stroke","data","find","y","hasData","product","context","renderLegendItem","React","defaultProps","helpers","translate","ConnectedGraphCardChartLegend","connect","graph"],"sourceRoot":""}