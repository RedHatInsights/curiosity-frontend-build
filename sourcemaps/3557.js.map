{"version":3,"file":"js/3557.1669659120996.9d3d80ef91b8cdb89ed3.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/info-circle-icon.js","webpack:///./src/components/bannerMessages/bannerMessages.js","webpack:///./src/components/bannerMessages/bannerMessagesContext.js","webpack:///./src/components/graphCard/graphCard.deprecated.js","webpack:///./src/components/graphCard/graphCard.js","webpack:///./src/components/graphCard/graphCardChart.deprecated.js","webpack:///./src/components/graphCard/graphCardMetricTotals.js","webpack:///./src/components/inventoryCard/inventoryCardHosts.js","webpack:///./src/components/inventoryCardSubscriptions/inventoryCardSubscriptions.js","webpack:///./src/components/inventoryCardSubscriptions/inventoryCardSubscriptionsContext.js","webpack:///./src/components/inventoryTabs/inventoryTab.js","webpack:///./src/components/inventoryTabs/inventoryTabs.js","webpack:///./src/components/productView/productView.js","webpack:///./src/components/tabs/tabs.js","webpack:///./src/components/toolbar/toolbar.js","webpack:///./src/components/toolbar/toolbarContext.js"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.InfoCircleIconConfig = {\n  name: 'InfoCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.InfoCircleIcon = require('../createIcon').createIcon(exports.InfoCircleIconConfig);\nexports[\"default\"] = exports.InfoCircleIcon;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, AlertActionCloseButton, AlertVariant, Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { useShallowCompareEffect } from 'react-use';\nimport { useGetAppMessages } from './bannerMessagesContext';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Render banner messages.\n *\n * @param {object} props\n * @param {Array} props.messages\n * @param {Function} props.useGetAppMessages\n * @returns {React.ReactNode}\n */\nconst BannerMessages = ({ messages, useGetAppMessages: useAliasGetAppMessages }) => {\n  const [hideAlerts, setHideAlerts] = useState({});\n  const [alerts, setAlerts] = useState([]);\n  const { data: appMessages } = useAliasGetAppMessages();\n\n  useShallowCompareEffect(() => {\n    const updatedMessages = [];\n\n    if (messages.length) {\n      Object.entries(appMessages).forEach(([key, value]) => {\n        if (hideAlerts[key] !== true && value === true) {\n          const message = messages.find(({ id }) => id === key);\n\n          if (message) {\n            updatedMessages.push({\n              key,\n              ...message\n            });\n          }\n        }\n      });\n    }\n\n    setAlerts(\n      updatedMessages.map(({ key, message, title, variant = AlertVariant.info }) => {\n        const actionClose = <AlertActionCloseButton onClose={() => setHideAlerts({ ...hideAlerts, [key]: true })} />;\n\n        return (\n          <Alert actionClose={actionClose} key={key} title={title} variant={variant}>\n            {message}\n          </Alert>\n        );\n      })\n    );\n  }, [appMessages, hideAlerts, messages]);\n\n  if (alerts?.length) {\n    return <div className=\"curiosity-banner-messages\">{alerts}</div>;\n  }\n\n  return null;\n};\n\n/**\n * Prop types.\n *\n * @type {{useGetAppMessages: Function, messages: Array}}\n */\nBannerMessages.propTypes = {\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.node.isRequired,\n      message: PropTypes.node.isRequired,\n      variant: PropTypes.oneOf([...Object.values(AlertVariant)])\n    })\n  ),\n  useGetAppMessages: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGetAppMessages: Function, messages: Array}}\n */\nBannerMessages.defaultProps = {\n  messages: [\n    {\n      id: 'cloudigradeMismatch',\n      title: translate('curiosity-banner.dataMismatchTitle'),\n      message: translate(\n        'curiosity-banner.dataMismatchMessage',\n        {\n          context: helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS !== '' && 'cloudigradeMismatch',\n          appName: helpers.UI_DISPLAY_NAME\n        },\n        [\n          <Button\n            isInline\n            component=\"a\"\n            variant=\"link\"\n            icon={<ExternalLinkAltIcon />}\n            iconPosition=\"right\"\n            target=\"_blank\"\n            href={helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS}\n          />\n        ]\n      )\n    }\n  ],\n  useGetAppMessages\n};\n\nexport { BannerMessages as default, BannerMessages };\n","import { useShallowCompareEffect } from 'react-use';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { dateHelpers } from '../../common';\nimport {\n  rhsmConstants,\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\n\n/**\n * ToDo: useGetAppMessages is setup to work with existing Tally response, pre-metrics\n * Banner messages scans the returned Tally listing for the HAS_CLOUDIGRADE_MISMATCH. In the future\n * this may need to be updated to pull from the \"meta\" object part of the Tally response.\n */\n/**\n * Get app messages.\n *\n * @param {object} options\n * @param {Function} options.getMessageReports\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useProductQuery\n * @param {Function} options.useSelectorsResponse\n * @returns {object}\n */\nconst useGetAppMessages = ({\n  getMessageReports = reduxActions.rhsm.getMessageReports,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductQuery();\n  const dispatch = useAliasDispatch();\n  const { error, fulfilled, pending, data } = useAliasSelectorsResponse({\n    id: 'messages',\n    selector: ({ messages }) => messages?.report?.[productId]\n  });\n\n  useShallowCompareEffect(() => {\n    if (productId) {\n      const { startDate, endDate } = dateHelpers.getRangedDateTime('CURRENT');\n      const updatedQuery = {\n        ...query,\n        [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY,\n        [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate.toISOString(),\n        [RHSM_API_QUERY_SET_TYPES.END_DATE]: endDate.toISOString()\n      };\n\n      getMessageReports(productId, updatedQuery)(dispatch);\n    }\n  }, [productId, query]);\n\n  const updatedData = {\n    cloudigradeMismatch: false\n  };\n\n  if (fulfilled) {\n    const { messages = {} } = data || {};\n\n    updatedData.cloudigradeMismatch =\n      messages?.data\n        ?.reverse()\n        ?.find(\n          ({ [rhsmConstants.RHSM_API_RESPONSE_TALLY_META_TYPES.HAS_CLOUDIGRADE_MISMATCH]: mismatch }) =>\n            mismatch === true\n        ) !== undefined;\n  }\n\n  return {\n    error,\n    fulfilled,\n    pending,\n    data: {\n      ...updatedData\n    }\n  };\n};\n\nconst context = {\n  useGetAppMessages\n};\n\nexport { context as default, context, useGetAppMessages };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardTitle, CardHeader, CardActions, CardBody, Title } from '@patternfly/react-core';\nimport { useShallowCompareEffect } from 'react-use';\nimport { connect, reduxActions, reduxSelectors } from '../../redux';\nimport { useProduct, useProductGraphConfig, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { helpers } from '../../common';\nimport { RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { Loader } from '../loader/loader';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { GraphCardChart } from './graphCardChart.deprecated';\n\n/**\n * A chart/graph card.\n *\n * @param {object} props\n * @param {Node} props.cardTitle\n * @param {Node} props.children\n * @param {boolean} props.error\n * @param {Function} props.getGraphReportsCapacity\n * @param {object} props.graphData\n * @param {object} props.meta\n * @param {boolean} props.isDisabled\n * @param {boolean} props.pending\n * @param {Function} props.useProduct\n * @param {Function} props.useProductGraphConfig\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCard = ({\n  cardTitle,\n  children,\n  error,\n  getGraphReportsCapacity,\n  graphData,\n  meta,\n  isDisabled,\n  pending,\n  useProduct: useAliasProduct,\n  useProductGraphConfig: useAliasProductGraphConfig,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productId } = useAliasProduct();\n  const { settings } = useAliasProductGraphConfig();\n  const query = useAliasProductGraphTallyQuery();\n\n  useShallowCompareEffect(() => {\n    const {\n      [RHSM_API_QUERY_TYPES.START_DATE]: startDate,\n      [RHSM_API_QUERY_TYPES.END_DATE]: endDate,\n      [RHSM_API_QUERY_TYPES.GRANULARITY]: granularity\n    } = query;\n\n    if (!isDisabled && granularity && startDate && endDate && productId) {\n      getGraphReportsCapacity(productId, query);\n    }\n  }, [getGraphReportsCapacity, isDisabled, productId, query]);\n\n  if (isDisabled) {\n    return null;\n  }\n\n  let actionDisplay = null;\n\n  if (typeof settings?.actionDisplay === 'function') {\n    actionDisplay = settings.actionDisplay({ data: { ...graphData }, meta: { ...meta } });\n  }\n\n  return (\n    <Card className=\"curiosity-usage-graph\">\n      <MinHeight key=\"headerMinHeight\">\n        <CardHeader>\n          <CardTitle>\n            <Title headingLevel=\"h2\" size=\"lg\">\n              {cardTitle}\n            </Title>\n          </CardTitle>\n          <CardActions className={(error && 'blur') || ''}>\n            <React.Fragment key=\"actionDisplay\">{actionDisplay}</React.Fragment>\n            {children}\n          </CardActions>\n        </CardHeader>\n      </MinHeight>\n      <MinHeight key=\"bodyMinHeight\">\n        <CardBody>\n          <div className={(error && 'blur') || (pending && 'fadein') || ''}>\n            {pending && <Loader variant=\"graph\" />}\n            {!pending && <GraphCardChart graphData={graphData} />}\n          </div>\n        </CardBody>\n      </MinHeight>\n    </Card>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{getGraphReportsCapacity: Function, useProduct: Function, useProductGraphTallyQuery: Function,\n *     useProductGraphConfig: Function, children: Node, meta: object, pending: boolean, graphData: object,\n *     isDisabled: boolean, error: boolean, cardTitle: Node}}\n */\nGraphCard.propTypes = {\n  cardTitle: PropTypes.node,\n  children: PropTypes.node,\n  error: PropTypes.bool,\n  getGraphReportsCapacity: PropTypes.func,\n  graphData: PropTypes.object,\n  isDisabled: PropTypes.bool,\n  meta: PropTypes.object,\n  pending: PropTypes.bool,\n  useProduct: PropTypes.func,\n  useProductGraphConfig: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{getGraphReportsCapacity: Function, useProduct: Function, useProductGraphTallyQuery: Function,\n *     useProductGraphConfig: Function, children: Node, meta: object, pending: boolean, graphData: object,\n *     isDisabled: boolean, error: boolean, cardTitle: Node}}\n */\nGraphCard.defaultProps = {\n  cardTitle: null,\n  children: null,\n  error: false,\n  getGraphReportsCapacity: helpers.noop,\n  graphData: {},\n  isDisabled: helpers.UI_DISABLED_GRAPH,\n  meta: {},\n  pending: false,\n  useProduct,\n  useProductGraphConfig,\n  useProductGraphTallyQuery\n};\n\n/**\n * Apply actions to props.\n *\n * @param {Function} dispatch\n * @returns {object}\n */\nconst mapDispatchToProps = dispatch => ({\n  getGraphReportsCapacity: (id, query) => dispatch(reduxActions.rhsm.getGraphReportsCapacity(id, query))\n});\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.graphCard.makeGraphCard();\n\nconst ConnectedGraphCard = connect(makeMapStateToProps, mapDispatchToProps)(GraphCard);\n\nexport { ConnectedGraphCard as default, ConnectedGraphCard, GraphCard };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductGraphConfig } from '../productView/productViewContext';\nimport { helpers } from '../../common';\nimport { GraphCardMetricTotals } from './graphCardMetricTotals';\nimport { GraphCardChart } from './graphCardChart';\nimport { GraphCardContext } from './graphCardContext';\nimport { graphCardHelpers } from './graphCardHelpers';\n\n/**\n * Set up graph cards. Expand filters with base graph settings.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useProduct\n * @param {Function} props.useProductGraphConfig\n * @returns {Node}\n */\nconst GraphCard = ({ isDisabled, useProduct: useAliasProduct, useProductGraphConfig: useAliasProductGraphConfig }) => {\n  const { productId } = useAliasProduct();\n  const { filters, settings } = useAliasProductGraphConfig();\n  const { groupedFiltersSettings, standaloneFiltersSettings } = graphCardHelpers.generateChartSettings({\n    filters,\n    settings,\n    productId\n  });\n\n  if (isDisabled) {\n    return null;\n  }\n\n  return (\n    <React.Fragment>\n      {(groupedFiltersSettings && (\n        <GraphCardContext.Provider value={groupedFiltersSettings}>\n          <GraphCardChart />\n        </GraphCardContext.Provider>\n      )) ||\n        null}\n      {standaloneFiltersSettings?.map(filtersSettings => (\n        <GraphCardContext.Provider key={`graphCard_${filtersSettings?.settings?.metric?.id}`} value={filtersSettings}>\n          <GraphCardMetricTotals>\n            <GraphCardChart />\n          </GraphCardMetricTotals>\n        </GraphCardContext.Provider>\n      ))}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProduct: Function, useProductGraphConfig: Function, isDisabled: boolean}}\n */\nGraphCard.propTypes = {\n  isDisabled: PropTypes.bool,\n  useProduct: PropTypes.func,\n  useProductGraphConfig: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProduct: Function, useProductGraphConfig: Function, isDisabled: boolean}}\n */\nGraphCard.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_GRAPH,\n  useProduct,\n  useProductGraphConfig\n};\n\nexport { GraphCard as default, GraphCard };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { chart_color_green_300 as chartColorGreenDark } from '@patternfly/react-tokens';\nimport { useProductGraphConfig, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { graphCardHelpers } from './graphCardHelpers';\nimport { Chart } from '../chart/chart';\nimport GraphCardChartLegend from './graphCardChartLegend';\nimport GraphCardChartTooltip from './graphCardChartTooltip';\nimport { RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\n\n/**\n * A chart/graph.\n *\n * @param {object} props\n * @param {object} props.graphData\n * @param {Function} props.useProductGraphConfig\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardChart = ({\n  graphData,\n  useProductGraphConfig: useAliasProductGraphConfig,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { filters } = useAliasProductGraphConfig();\n  const query = useAliasProductGraphTallyQuery();\n  const { [RHSM_API_QUERY_TYPES.GRANULARITY]: granularity } = query;\n\n  const chartAreaProps = {\n    xAxisLabelIncrement: graphCardHelpers.getChartXAxisLabelIncrement(granularity),\n    xAxisTickFormat: ({ item, previousItem, tick }) =>\n      graphCardHelpers.xAxisTickFormat({\n        tick,\n        date: item.date,\n        previousDate: previousItem.date,\n        granularity\n      }),\n    yAxisTickFormat: graphCardHelpers.yAxisTickFormat\n  };\n\n  const filteredGraphData = data => {\n    const filtered = key => {\n      const tempFiltered = {\n        data: data[key],\n        id: key,\n        strokeWidth: 2,\n        isStacked: !/^threshold/.test(key),\n        isThreshold: /^threshold/.test(key)\n      };\n\n      if (/^threshold/.test(key)) {\n        tempFiltered.stroke = chartColorGreenDark.value;\n        tempFiltered.strokeDasharray = '4,3';\n        tempFiltered.strokeWidth = 3;\n      }\n\n      return tempFiltered;\n    };\n\n    if (filters?.length) {\n      return filters.map(value => Object.assign(filtered(value.id), value));\n    }\n\n    return Object.keys(data).map(key => filtered(key));\n  };\n\n  return (\n    <Chart\n      key={`chart_${JSON.stringify(query)}`}\n      {...chartAreaProps}\n      dataSets={filteredGraphData(graphData)}\n      chartLegend={({ chart, datum }) => <GraphCardChartLegend chart={chart} datum={datum} />}\n      chartTooltip={({ datum }) => <GraphCardChartTooltip datum={datum} />}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, useProductGraphConfig: Function, graphData: object}}\n */\nGraphCardChart.propTypes = {\n  graphData: PropTypes.object,\n  useProductGraphConfig: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, useProductGraphConfig: Function, graphData: object}}\n */\nGraphCardChart.defaultProps = {\n  graphData: {},\n  useProductGraphConfig,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChart as default, GraphCardChart };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter, CardTitle, Flex, FlexItem } from '@patternfly/react-core';\nimport moment from 'moment';\nimport _camelCase from 'lodash/camelCase';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useMetricsSelector } from './graphCardContext';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { Loader, SkeletonSize } from '../loader/loader';\nimport { dateHelpers, helpers } from '../../common';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldRangedMonthly';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Display totals for a single metric.\n *\n * @param {object} props\n * @param {Node} props.children\n * @param {Function} props.t\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardMetricTotals = ({\n  children,\n  t,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate } = useAliasProductGraphTallyQuery();\n  const { pending, error, fulfilled, dataSets = [] } = useAliasMetricsSelector();\n  const { data = [], id, metric: metricId, meta = {} } = dataSets[0] || {};\n  const { date: lastDate, hasData: lastHasData, y: lastValue } = data[data.length - 1] || {};\n  const {\n    date: currentDate,\n    hasData: currentHasData,\n    y: currentValue\n  } = data.find(({ isCurrentDate }) => isCurrentDate === true) || {};\n\n  const { totalMonthlyDate: monthlyDate, totalMonthlyHasData: monthlyHasData, totalMonthlyValue: monthlyValue } = meta;\n\n  const { title: selectedMonth, isCurrent } =\n    toolbarFieldOptions.find(\n      option => option.title === startDate || option.value.startDate.toISOString() === startDate\n    ) || {};\n\n  const dailyDate = isCurrent ? currentDate : lastDate;\n  const dailyHasData = isCurrent ? currentHasData : lastHasData;\n  const dailyValue = isCurrent ? currentValue : lastValue;\n\n  return (\n    <Flex data-test={`graphMetricTotals-${_camelCase(metricId)}`} className=\"curiosity-usage-graph__totals\">\n      <Flex flex={{ default: 'flex_1' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-column\">\n          <Card\n            data-test=\"graphDailyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric', {\n                context: ['dailyTotal', id],\n                month: selectedMonth\n              })}\n            </CardTitle>\n            <MinHeight key=\"currentBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric',\n                      {\n                        context: ['total', dailyHasData && id],\n                        total: helpers\n                          .numberDisplay(dailyValue)\n                          ?.format({\n                            average: true,\n                            mantissa: 5,\n                            trimMantissa: true,\n                            lowPrecision: false\n                          })\n                          ?.toUpperCase()\n                      },\n                      [<strong title={dailyValue} aria-label={dailyValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"currentFooter\">\n              <CardFooter>\n                <div className={(!dailyHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    dailyDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(dailyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n          <Card\n            data-test=\"graphMonthlyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric', {\n                context: ['monthlyTotal', id],\n                month: selectedMonth\n              })}\n            </CardTitle>\n            <MinHeight key=\"totalMonthlyBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric',\n                      {\n                        context: ['total', monthlyHasData && id],\n                        total: helpers\n                          .numberDisplay(monthlyValue)\n                          ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: false })\n                          ?.toUpperCase()\n                      },\n                      [<strong title={monthlyValue} aria-label={monthlyValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"totalMonthlyFooter\">\n              <CardFooter>\n                <div className={(!monthlyHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    monthlyDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(monthlyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n        </FlexItem>\n      </Flex>\n      <Flex flex={{ default: 'flex_3' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-graph-column\">{children}</FlexItem>\n      </Flex>\n    </Flex>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.propTypes = {\n  children: PropTypes.node,\n  t: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.defaultProps = {\n  children: null,\n  t: translate,\n  useMetricsSelector,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardMetricTotals as default, GraphCardMetricTotals };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useGetHostsInventory, useOnColumnSortHosts } from './inventoryCardContext';\nimport InventoryCard from './inventoryCard';\nimport { helpers } from '../../common';\n\n/**\n * A hosts' system inventory component.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useGetInventory\n * @param {Function} props.useOnColumnSort\n * @returns {React.ReactNode}\n */\nconst InventoryCardHosts = ({ ...props }) => <InventoryCard {...props} />;\n\n/**\n * Prop types.\n *\n * @type {{isDisabled: boolean, useGetInventory: Function, useOnColumnSort: Function}}\n */\nInventoryCardHosts.propTypes = {\n  isDisabled: PropTypes.bool,\n  useGetInventory: PropTypes.func,\n  useOnColumnSort: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{isDisabled: boolean, useGetInventory: Function, useOnColumnSort: Function}}\n */\nInventoryCardHosts.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_TABLE_HOSTS,\n  useGetInventory: useGetHostsInventory,\n  useOnColumnSort: useOnColumnSortHosts\n};\n\nexport { InventoryCardHosts as default, InventoryCardHosts };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  useProductInventorySubscriptionsConfig,\n  useProductInventorySubscriptionsQuery\n} from '../productView/productViewContext';\nimport {\n  useGetSubscriptionsInventory,\n  useOnPageSubscriptions,\n  useOnColumnSortSubscriptions\n} from './inventoryCardSubscriptionsContext';\nimport InventoryCard from '../inventoryCard/inventoryCard';\nimport { helpers } from '../../common';\n\n/**\n * A subscriptions' system inventory component.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useGetInventory\n * @param {Function} props.useOnPage\n * @param {Function} props.useOnColumnSort\n * @param {Function} props.useProductInventoryConfig\n * @param {Function} props.useProductInventoryQuery\n * @fires onColumnSort\n * @fires onPage\n * @fires onUpdateInventoryData\n * @returns {Node}\n */\nconst InventoryCardSubscriptions = ({ ...props }) => <InventoryCard cardActions={null} {...props} />;\n\n/**\n * Prop types.\n *\n * @type {{useOnPage: Function, isDisabled: boolean, useProductInventoryConfig: Function, useGetInventory: Function,\n *     useOnColumnSort: Function, useProductInventoryQuery: Function}}\n */\nInventoryCardSubscriptions.propTypes = {\n  isDisabled: PropTypes.bool,\n  useGetInventory: PropTypes.func,\n  useOnPage: PropTypes.func,\n  useOnColumnSort: PropTypes.func,\n  useProductInventoryConfig: PropTypes.func,\n  useProductInventoryQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnPage: Function, isDisabled: boolean, useProductInventoryConfig: Function, useGetInventory: Function,\n *     useOnColumnSort: Function, useProductInventoryQuery: Function}}\n */\nInventoryCardSubscriptions.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS,\n  useGetInventory: useGetSubscriptionsInventory,\n  useOnPage: useOnPageSubscriptions,\n  useOnColumnSort: useOnColumnSortSubscriptions,\n  useProductInventoryConfig: useProductInventorySubscriptionsConfig,\n  useProductInventoryQuery: useProductInventorySubscriptionsQuery\n};\n\nexport { InventoryCardSubscriptions as default, InventoryCardSubscriptions };\n","import { useShallowCompareEffect } from 'react-use';\nimport _camelCase from 'lodash/camelCase';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { reduxActions, reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductInventorySubscriptionsQuery } from '../productView/productViewContext';\nimport {\n  RHSM_API_QUERY_INVENTORY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_INVENTORY_SUBSCRIPTIONS_SORT_TYPES as SORT_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * Combined Redux RHSM Actions, getSubscriptionsInventory, and inventory selector response.\n *\n * @param {object} options\n * @param {boolean} options.isDisabled\n * @param {Function} options.getInventory\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useProductInventoryQuery\n * @param {Function} options.useSelectorsResponse\n * @returns {Function}\n */\nconst useGetSubscriptionsInventory = ({\n  isDisabled = false,\n  getInventory = reduxActions.rhsm.getSubscriptionsInventory,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventorySubscriptionsQuery,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductInventoryQuery();\n  const dispatch = useAliasDispatch();\n  const { error, cancelled, fulfilled, pending, data } = useAliasSelectorsResponse(\n    ({ inventory }) => inventory?.subscriptionsInventory?.[productId]\n  );\n\n  useShallowCompareEffect(() => {\n    if (!isDisabled) {\n      getInventory(productId, query)(dispatch);\n    }\n  }, [dispatch, isDisabled, productId, query]);\n\n  return {\n    error,\n    fulfilled,\n    pending: pending || cancelled || false,\n    data: (data?.length === 1 && data[0]) || data || {}\n  };\n};\n\n/**\n * An onPage callback for subscriptions inventory.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnPageSubscriptions = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for subscriptions inventory.\n   *\n   * @event onPage\n   * @param {object} params\n   * @param {number} params.offset\n   * @param {number} params.perPage\n   * @returns {void}\n   */\n  return ({ offset, perPage }) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.OFFSET],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.OFFSET]: offset\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.LIMIT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.LIMIT]: perPage\n      }\n    ]);\n  };\n};\n\n/**\n * An onColumnSort callback for subscriptions inventory.\n *\n * @param {object} options\n * @param {object} options.sortColumns\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnColumnSortSubscriptions = ({\n  sortColumns = SORT_TYPES,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for subscriptions inventory.\n   *\n   * @event onColumnSort\n   * @param {*} _data\n   * @param {object} params\n   * @param {string} params.direction\n   * @param {string} params.id\n   * @returns {void}\n   */\n  return (_data, { direction, id }) => {\n    const updatedSortColumn = Object.values(sortColumns).find(value => value === id || _camelCase(value) === id);\n    let updatedDirection;\n\n    if (!updatedSortColumn) {\n      if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n        console.warn(`Sorting can only be performed on select fields, confirm field ${id} is allowed.`);\n      }\n      return;\n    }\n\n    switch (direction) {\n      case SortByDirection.desc:\n        updatedDirection = SORT_DIRECTION_TYPES.DESCENDING;\n        break;\n      default:\n        updatedDirection = SORT_DIRECTION_TYPES.ASCENDING;\n        break;\n    }\n\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.DIRECTION],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.DIRECTION]: updatedDirection\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.SORT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.SORT]: updatedSortColumn\n      }\n    ]);\n  };\n};\n\nconst context = {\n  useGetSubscriptionsInventory,\n  useOnPageSubscriptions,\n  useOnColumnSortSubscriptions\n};\n\nexport {\n  context as default,\n  context,\n  useGetSubscriptionsInventory,\n  useOnPageSubscriptions,\n  useOnColumnSortSubscriptions\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * A tab pass-through component for passing props to InventoryTabs.\n *\n * @param {object} props\n * @param {boolean} props.active\n * @param {React.ReactNode} props.children\n * @param {string} props.title\n * @returns {React.ReactNode}\n */\n// eslint-disable-next-line no-unused-vars\nconst InventoryTab = ({ active, children, title }) => children;\n\n/**\n * Prop types.\n *\n * @type {{children: React.ReactNode, className: string}}\n */\nInventoryTab.propTypes = {\n  children: PropTypes.node.isRequired,\n  active: PropTypes.bool,\n  title: PropTypes.node.isRequired\n};\n\n/**\n * Default props.\n *\n * @type {{className: string}}\n */\nInventoryTab.defaultProps = {\n  active: false\n};\n\nexport { InventoryTab as default, InventoryTab };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Title } from '@patternfly/react-core';\nimport { connect, reduxTypes, store } from '../../redux';\nimport { Tabs } from '../tabs/tabs';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { InventoryTab } from './inventoryTab';\n\n/**\n * A system inventory tabs component.\n *\n * @augments React.Component\n * @fires onTab\n */\nclass InventoryTabs extends React.Component {\n  /**\n   * On tab update state.\n   *\n   * @event onTab\n   * @param {object} params\n   * @param {string} params.index tab index\n   */\n  onTab = ({ index }) => {\n    const { productId } = this.props;\n\n    store.dispatch({\n      type: reduxTypes.inventory.SET_INVENTORY_TAB,\n      tabs: {\n        [productId]: index\n      }\n    });\n  };\n\n  /**\n   * Render inventory tabs using Inventory tab passed props only. A parallel outcome can be\n   * achieved by passing an array of objects through a prop.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { activeTab, children, defaultActiveTab, isDisabled, t } = this.props;\n\n    if (isDisabled) {\n      return null;\n    }\n\n    const updatedChildren = React.Children.toArray(children).map((child, index) => {\n      const { props = {} } = child;\n\n      return {\n        active: props.active || false,\n        content: props.children || child,\n        title: props.title || t('curiosity-inventory.tabSubHeading', { count: index })\n      };\n    });\n\n    return (\n      <React.Fragment>\n        <Title headingLevel=\"h2\" className=\"sr-only\">\n          {t('curiosity-inventory.tabHeading', { count: updatedChildren.length })}\n        </Title>\n        <Tabs activeTab={activeTab} defaultActiveTab={defaultActiveTab} onTab={this.onTab} tabs={updatedChildren} />\n      </React.Fragment>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{productId: string, t: Function, children: Node, defaultActiveTab: number, isDisabled: boolean,\n *     activeTab: number}}\n */\nInventoryTabs.propTypes = {\n  activeTab: PropTypes.number,\n  children: PropTypes.node.isRequired,\n  defaultActiveTab: PropTypes.number,\n  isDisabled: PropTypes.bool,\n  productId: PropTypes.string.isRequired,\n  t: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, defaultActiveTab: number, isDisabled: boolean, activeTab: number}}\n */\nInventoryTabs.defaultProps = {\n  activeTab: 0,\n  defaultActiveTab: 0,\n  isDisabled: helpers.UI_DISABLED_TABLE,\n  t: translate\n};\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst mapStateToProps = ({ inventory }, { productId }) => ({ activeTab: inventory.tabs?.[productId] });\n\nconst ConnectedInventoryTabs = connect(mapStateToProps)(InventoryTabs);\n\nexport { ConnectedInventoryTabs as default, ConnectedInventoryTabs, InventoryTabs, InventoryTab };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport { useRouteDetail } from '../../hooks/useRouter';\nimport { ProductViewContext } from './productViewContext';\nimport { PageLayout, PageHeader, PageSection, PageToolbar, PageMessages, PageColumns } from '../pageLayout/pageLayout';\nimport { apiQueries } from '../../redux';\nimport { ConnectedGraphCard as ConnectedGraphCardDeprecated } from '../graphCard/graphCard.deprecated';\nimport { GraphCard } from '../graphCard/graphCard';\nimport { Toolbar } from '../toolbar/toolbar';\nimport { ConnectedInventoryList as ConnectedInventoryListDeprecated } from '../inventoryCard/inventoryList.deprecated';\nimport { InventoryCard } from '../inventoryCard/inventoryCard';\nimport { InventoryCardHosts } from '../inventoryCard/inventoryCardHosts';\nimport { helpers } from '../../common';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport { SelectPosition } from '../form/select';\nimport { ToolbarFieldGranularity } from '../toolbar/toolbarFieldGranularity';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport { InventoryCardSubscriptions } from '../inventoryCardSubscriptions/inventoryCardSubscriptions';\nimport { RHSM_INTERNAL_PRODUCT_DISPLAY_TYPES as DISPLAY_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Display product columns.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Node|boolean} props.toolbarGraph\n * @param {boolean} props.toolbarGraphDescription\n * @param {Function} props.useRouteDetail\n * @returns {Node}\n */\nconst ProductView = ({ t, toolbarGraph, toolbarGraphDescription, useRouteDetail: useAliasRouteDetail }) => {\n  const { productParameter: routeProductLabel, productConfig } = useAliasRouteDetail();\n\n  const renderProduct = config => {\n    const {\n      graphTallyQuery,\n      inventoryHostsQuery,\n      inventorySubscriptionsQuery,\n      query,\n      initialGuestsFilters,\n      initialInventoryFilters,\n      initialInventorySettings,\n      initialSubscriptionsInventoryFilters,\n      productDisplay,\n      productId,\n      viewId\n    } = config;\n\n    if (!productId || !viewId) {\n      return null;\n    }\n\n    const { graphTallyQuery: initialGraphTallyQuery, inventoryHostsQuery: initialInventoryHostsQuery } =\n      apiQueries.parseRhsmQuery(query, { graphTallyQuery, inventoryHostsQuery, inventorySubscriptionsQuery });\n\n    let graphCardTooltip = null;\n\n    if (toolbarGraphDescription) {\n      graphCardTooltip = (\n        <Tooltip\n          content={<p>{t('curiosity-graph.cardHeadingDescription', { context: productId })}</p>}\n          position={TooltipPosition.top}\n          enableFlip={false}\n          distance={5}\n          entryDelay={100}\n          exitDelay={0}\n        >\n          <sup className=\"curiosity-icon__info\">\n            <InfoCircleIcon />\n          </sup>\n        </Tooltip>\n      );\n    }\n\n    const graphCardTitle = (\n      <React.Fragment>\n        {t('curiosity-graph.cardHeading', { context: productId })}\n        {graphCardTooltip}\n      </React.Fragment>\n    );\n\n    return (\n      <ProductViewContext.Provider value={config} key={`product_${productId}`}>\n        <PageMessages>{productDisplay !== DISPLAY_TYPES.HOURLY && <BannerMessages />}</PageMessages>\n        <PageToolbar>\n          <Toolbar />\n        </PageToolbar>\n        <PageSection>\n          {productDisplay === DISPLAY_TYPES.LEGACY && (\n            <ConnectedGraphCardDeprecated\n              key={`graph_${productId}`}\n              query={initialGraphTallyQuery}\n              productId={productId}\n              viewId={viewId}\n              cardTitle={graphCardTitle}\n            >\n              {(React.isValidElement(toolbarGraph) && toolbarGraph) ||\n                (toolbarGraph !== false && <ToolbarFieldGranularity position={SelectPosition.right} />)}\n            </ConnectedGraphCardDeprecated>\n          )}\n          {productDisplay !== DISPLAY_TYPES.LEGACY && <GraphCard />}\n        </PageSection>\n        <PageSection className={(productDisplay === DISPLAY_TYPES.HOURLY && 'curiosity-page-section__tabs') || ''}>\n          <InventoryTabs\n            key={`inventory_${productId}`}\n            productId={productId}\n            isDisabled={\n              (!initialInventoryFilters && !initialSubscriptionsInventoryFilters) || helpers.UI_DISABLED_TABLE\n            }\n          >\n            {!helpers.UI_DISABLED_TABLE_HOSTS && productDisplay === DISPLAY_TYPES.LEGACY && initialInventoryFilters && (\n              <InventoryTab\n                key={`inventory_deprecated-hosts_${productId}`}\n                title={t('curiosity-inventory.tabHosts', { context: [productId] })}\n              >\n                <ConnectedInventoryListDeprecated\n                  key={`inv_${productId}`}\n                  filterGuestsData={initialGuestsFilters}\n                  filterInventoryData={initialInventoryFilters}\n                  productId={productId}\n                  settings={initialInventorySettings}\n                  query={initialInventoryHostsQuery}\n                  viewId={viewId}\n                />\n              </InventoryTab>\n            )}\n            {!helpers.UI_DISABLED_TABLE_HOSTS &&\n              productDisplay !== DISPLAY_TYPES.LEGACY &&\n              productDisplay !== DISPLAY_TYPES.HOURLY &&\n              initialInventoryFilters && (\n                <InventoryTab\n                  key={`inventory_hosts_${productId}`}\n                  title={t('curiosity-inventory.tabHosts', { context: [productId] })}\n                >\n                  <InventoryCardHosts />\n                </InventoryTab>\n              )}\n            {!helpers.UI_DISABLED_TABLE_INSTANCES &&\n              productDisplay === DISPLAY_TYPES.HOURLY &&\n              initialInventoryFilters && (\n                <InventoryTab\n                  key={`inventory_instances_${productId}`}\n                  title={t('curiosity-inventory.tabInstances', { context: [productId] })}\n                >\n                  <InventoryCard />\n                </InventoryTab>\n              )}\n            {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && initialSubscriptionsInventoryFilters && (\n              <InventoryTab\n                key={`inventory_subs_${productId}`}\n                title={t('curiosity-inventory.tabSubscriptions', { context: [productId] })}\n              >\n                <InventoryCardSubscriptions />\n              </InventoryTab>\n            )}\n          </InventoryTabs>\n        </PageSection>\n      </ProductViewContext.Provider>\n    );\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader productLabel={routeProductLabel}>\n        {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: routeProductLabel })}\n      </PageHeader>\n      <PageColumns>{productConfig.map(config => renderProduct(config))}</PageColumns>\n    </PageLayout>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), toolbarGraphDescription: boolean, useRouteDetail: Function}}\n */\nProductView.propTypes = {\n  t: PropTypes.func,\n  toolbarGraph: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n  toolbarGraphDescription: PropTypes.bool,\n  useRouteDetail: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), toolbarGraphDescription: boolean, useRouteDetail: Function}}\n */\nProductView.defaultProps = {\n  t: translate,\n  toolbarGraph: null,\n  toolbarGraphDescription: false,\n  useRouteDetail\n};\n\nexport { ProductView as default, ProductView };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tabs as PfTabs, Tab, TabTitleText, Grid, GridItem } from '@patternfly/react-core';\nimport _isEqualWith from 'lodash/isEqualWith';\nimport { helpers } from '../../common';\n\n/**\n * FixMe: PF tabs misinterprets \"isElementInView\" when tab title nodes are loaded dynamically\n * It appears the use of isElementInView within PF tabs is trying to be predicative in using\n * \"getBoundingClientRect\" but produces questionable results in scenarios where content is\n * async created. isElementInView assumes some form of the content will always be there\n * instead of scenarios where someone tries to dynamically apply components. It may be good to\n * review using a window.setTimeout(() => handleScrollButtons()) in componentDidMount.\n *\n * Our temporary solution is to simply hide the buttons with a manual set flag affecting the\n * CSS class. This will most likely cause long-term issues.\n */\n/**\n * ToDo: Insights frontend components uses a custom tabs layout, investigate related CSS classes\n * Originally we applied the CSS classes, but they appeared to provide nothing. Since Insights\n * rolled its own tabs we're hesitant to apply said classes without understanding what they provide.\n */\n/**\n * A set of tabs.\n *\n * @augments React.Component\n * @fires onTab\n */\nclass Tabs extends React.Component {\n  state = {\n    updatedActiveTab: null,\n    updatedTabs: null\n  };\n\n  componentDidMount() {\n    const { updatedTabs } = this.state;\n\n    if (updatedTabs === null) {\n      this.setTabData();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { tabs } = this.props;\n    const customizer = (valueA, valueB) => {\n      if (typeof valueA === 'function' && typeof valueB === 'function') {\n        return valueA.toString() === valueB.toString();\n      }\n\n      return undefined;\n    };\n\n    if (!_isEqualWith(prevProps.tabs, tabs, customizer)) {\n      this.setTabData();\n    }\n  }\n\n  /**\n   * On tab selected\n   *\n   * @event onTab\n   * @param {object} params\n   * @param {number} params.index\n   */\n  onTab = ({ index }) => {\n    const { onTab } = this.props;\n\n    this.setState(\n      {\n        updatedActiveTab: index\n      },\n      () => onTab({ index })\n    );\n  };\n\n  /**\n   * Convert tab objects into the required PF Tab format.\n   */\n  setTabData() {\n    const { activeTab, defaultActiveTab, tabs } = this.props;\n    let updatedActiveTab = defaultActiveTab;\n\n    const updatedTabs = tabs.map(({ active, content, title }, index) => {\n      updatedActiveTab = active ? index : updatedActiveTab;\n\n      return (\n        <Tab key={title} eventKey={index} title={<TabTitleText>{title}</TabTitleText>}>\n          {content}\n        </Tab>\n      );\n    });\n\n    if (typeof activeTab === 'number') {\n      updatedActiveTab = activeTab;\n    }\n\n    this.setState({\n      updatedActiveTab,\n      updatedTabs\n    });\n  }\n\n  /**\n   * Apply props to tabs.\n   *\n   * @returns {Node}\n   */\n  renderTabs() {\n    const { updatedActiveTab, updatedTabs } = this.state;\n    const { className, hasOverflowScroll } = this.props;\n\n    return (\n      <PfTabs\n        className={`curiosity-tabs${(!hasOverflowScroll && '__no-scroll') || ''} ${className || ''}`}\n        activeKey={updatedActiveTab}\n        onSelect={(event, index) => this.onTab({ event, index })}\n        mountOnEnter\n        unmountOnExit\n        inset={{\n          default: 'insetNone',\n          md: 'insetLg'\n        }}\n      >\n        {updatedTabs}\n      </PfTabs>\n    );\n  }\n\n  /**\n   * Render tabs.\n   *\n   * @returns {Node}\n   */\n  render() {\n    return (\n      <Grid className=\"curiosity-tabs-container\">\n        <GridItem span={12}>{this.renderTabs()}</GridItem>\n      </Grid>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{tabs: Array, hasOverflowScroll: boolean, onTab: Function, className: string,\n *     defaultActiveTab: number, activeTab: number}}\n */\nTabs.propTypes = {\n  activeTab: PropTypes.number,\n  className: PropTypes.string,\n  defaultActiveTab: PropTypes.number,\n  hasOverflowScroll: PropTypes.bool,\n  onTab: PropTypes.func,\n  tabs: PropTypes.arrayOf(\n    PropTypes.shape({\n      active: PropTypes.bool,\n      content: PropTypes.node.isRequired,\n      title: PropTypes.node.isRequired\n    })\n  )\n};\n\n/**\n * Default props.\n *\n * @type {{tabs: Array, hasOverflowScroll: boolean, onTab: Function, className: string,\n *     defaultActiveTab: number, activeTab: number}}\n */\nTabs.defaultProps = {\n  activeTab: null,\n  className: '',\n  defaultActiveTab: 0,\n  hasOverflowScroll: false,\n  onTab: helpers.noop,\n  tabs: []\n};\n\nexport { Tabs as default, Tabs };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Toolbar as PfToolbar,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup\n} from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport {\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFieldQueries,\n  useToolbarSecondaryFields\n} from './toolbarContext';\nimport { ToolbarFieldSelectCategory, useSelectCategoryOptions } from './toolbarFieldSelectCategory';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Application filter toolbar.\n *\n * @fires onClearFilter\n * @fires onClearAll\n * @param {object} props\n * @param {boolean} props.hardFilterReset On clearing all fields allow the category to reset as well.\n * @param {boolean} props.isDisabled\n * @param {Function} props.t\n * @param {Function} props.useSelectCategoryOptions\n * @param {Function} props.useToolbarFieldClear\n * @param {Function} props.useToolbarFieldClearAll\n * @param {Function} props.useToolbarFieldQueries\n * @param {Function} props.useToolbarSecondaryFields\n * @returns {Node}\n */\nconst Toolbar = ({\n  hardFilterReset,\n  isDisabled,\n  t,\n  useSelectCategoryOptions: useAliasSelectCategoryOptions,\n  useToolbarFieldClear: useAliasToolbarFieldClear,\n  useToolbarFieldClearAll: useAliasToolbarFieldClearAll,\n  useToolbarFieldQueries: useAliasToolbarFieldQueries,\n  useToolbarSecondaryFields: useAliasToolbarSecondaryFields\n}) => {\n  const { currentCategory, options } = useAliasSelectCategoryOptions();\n  const toolbarFieldQueries = useAliasToolbarFieldQueries();\n  const clearField = useAliasToolbarFieldClear();\n  const clearAllFields = useAliasToolbarFieldClearAll();\n  const secondaryFields = useAliasToolbarSecondaryFields();\n\n  if (isDisabled || (!options?.length && !secondaryFields?.length)) {\n    return null;\n  }\n\n  /**\n   * Clear a specific value\n   *\n   * @event onClearFilter\n   * @param {object} params\n   * @param {*} params.value\n   * @returns {void}\n   */\n  const onClearFilter = ({ value }) => clearField(value);\n\n  /**\n   * Clear all active filters.\n   *\n   * @event onClearAll\n   * @returns {void}\n   */\n  const onClearAll = () => clearAllFields(hardFilterReset);\n\n  /**\n   * Set selected options for chip display.\n   *\n   * @param {object} params\n   * @param {Array} params.options\n   * @param {*} params.value\n   * @returns {Array}\n   */\n  const setSelectedOptions = ({ options: filterOptions, value }) => {\n    const query = filterOptions.find(({ value: optionValue }) => optionValue === toolbarFieldQueries?.[value]);\n    return (query?.title && [query?.title]) || [];\n  };\n\n  return (\n    <PfToolbar\n      id=\"curiosity-toolbar\"\n      className=\"curiosity-toolbar pf-m-toggle-group-container ins-c-primary-toolbar\"\n      collapseListedFiltersBreakpoint=\"sm\"\n      clearAllFilters={onClearAll}\n      clearFiltersButtonText={t('curiosity-toolbar.clearFilters')}\n    >\n      <ToolbarContent>\n        <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"md\">\n          <ToolbarGroup variant=\"filter-group\">\n            {options.length > 1 && (\n              <ToolbarItem>\n                <ToolbarFieldSelectCategory />\n              </ToolbarItem>\n            )}\n            {options.map(({ title, value, component: OptionComponent, isClearable, options: filterOptions }) => {\n              const chipProps = { categoryName: title };\n\n              if (isClearable !== false) {\n                chipProps.chips = setSelectedOptions({ options: filterOptions, value });\n                chipProps.deleteChip = () => onClearFilter({ options: filterOptions, value });\n              }\n\n              return (\n                <ToolbarFilter\n                  key={value}\n                  showToolbarItem={currentCategory === value || options.length === 1}\n                  {...chipProps}\n                >\n                  <OptionComponent isFilter />\n                </ToolbarFilter>\n              );\n            })}\n          </ToolbarGroup>\n        </ToolbarToggleGroup>\n        <ToolbarGroup alignment={{ default: 'alignRight' }}>{secondaryFields}</ToolbarGroup>\n      </ToolbarContent>\n    </PfToolbar>\n  );\n};\n\n/**\n * Prop types\n *\n * @type {{useToolbarFieldClear: Function, t: Function, useSelectCategoryOptions: Function, hardFilterReset: boolean,\n *     useToolbarSecondaryFields: Function, isDisabled: boolean, useToolbarFieldClearAll: Function, useToolbarFieldQueries: Function}}\n */\nToolbar.propTypes = {\n  hardFilterReset: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  t: PropTypes.func,\n  useSelectCategoryOptions: PropTypes.func,\n  useToolbarFieldClear: PropTypes.func,\n  useToolbarFieldClearAll: PropTypes.func,\n  useToolbarFieldQueries: PropTypes.func,\n  useToolbarSecondaryFields: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useToolbarFieldClear: Function, t: Function, useSelectCategoryOptions: Function, hardFilterReset: boolean,\n *     useToolbarSecondaryFields: Function, isDisabled: boolean, useToolbarFieldClearAll: Function, useToolbarFieldQueries: Function}}\n */\nToolbar.defaultProps = {\n  hardFilterReset: false,\n  isDisabled: helpers.UI_DISABLED_TOOLBAR,\n  t: translate,\n  useSelectCategoryOptions,\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFieldQueries,\n  useToolbarSecondaryFields\n};\n\nexport { Toolbar as default, Toolbar };\n","import React from 'react';\nimport { ToolbarItem } from '@patternfly/react-core';\nimport { useProductQuery, useProductGraphTallyQuery, useProductToolbarConfig } from '../productView/productViewContext';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { useOnSelect as useSelectCategoryOnSelect, toolbarFieldOptions } from './toolbarFieldSelectCategory';\nimport { useOnSelect as useBillingProviderOnSelect } from './toolbarFieldBillingProvider';\nimport { useOnSelect as useSlaOnSelect } from './toolbarFieldSla';\nimport { useOnSelect as useUsageOnSelect } from './toolbarFieldUsage';\nimport { SelectPosition } from '../form/select';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Return current values for categories/queries.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductGraphTallyQuery\n * @returns {object}\n */\nconst useToolbarFieldQueries = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery\n} = {}) => {\n  const {\n    [RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER]: billingProvider,\n    [RHSM_API_QUERY_SET_TYPES.SLA]: sla,\n    [RHSM_API_QUERY_SET_TYPES.UOM]: uom,\n    [RHSM_API_QUERY_SET_TYPES.USAGE]: usage\n  } = useAliasProductQuery();\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n\n  return {\n    [RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER]: billingProvider,\n    [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity,\n    [RHSM_API_QUERY_SET_TYPES.SLA]: sla,\n    [RHSM_API_QUERY_SET_TYPES.UOM]: uom,\n    [RHSM_API_QUERY_SET_TYPES.USAGE]: usage\n  };\n};\n\n/**\n * Clear a specific toolbar category.\n *\n * @param {object} options\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClear = ({\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect\n} = {}) => {\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n\n  return field => {\n    switch (field) {\n      case RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER:\n        billingOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.SLA:\n        slaOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.USAGE:\n        usageOnSelect();\n        break;\n      default:\n        break;\n    }\n  };\n};\n\n/**\n * Clear all available toolbar categories.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useSelectCategoryOnSelect\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClearAll = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useSelectCategoryOnSelect: useAliasSelectCategoryOnSelect = useSelectCategoryOnSelect,\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect\n} = {}) => {\n  const {\n    [RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER]: billingProvider,\n    [RHSM_API_QUERY_SET_TYPES.SLA]: sla,\n    [RHSM_API_QUERY_SET_TYPES.USAGE]: usage\n  } = useAliasProductQuery();\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n  const selectCategoryOnSelect = useAliasSelectCategoryOnSelect();\n\n  return hardFilterReset => {\n    if (typeof billingProvider === 'string') {\n      billingOnSelect();\n    }\n\n    if (typeof sla === 'string') {\n      slaOnSelect();\n    }\n\n    if (typeof usage === 'string') {\n      usageOnSelect();\n    }\n\n    if (hardFilterReset) {\n      selectCategoryOnSelect();\n    }\n  };\n};\n\n/**\n * Return list of secondary toolbar fields for display.\n *\n * @param {object} options\n * @param {Array} options.categoryOptions\n * @param {Function} options.useProductToolbarConfig\n * @returns {Array}\n */\nconst useToolbarSecondaryFields = ({\n  categoryOptions = toolbarFieldOptions,\n  useProductToolbarConfig: useAliasProductToolbarConfig = useProductToolbarConfig\n} = {}) => {\n  const { secondaryFilters = [] } = useAliasProductToolbarConfig();\n\n  return secondaryFilters.map(({ id, content }) => {\n    const option = categoryOptions.find(({ value: categoryOptionValue }) => id === categoryOptionValue);\n    const { component: OptionComponent } = option || {};\n\n    return (\n      (OptionComponent && (\n        <ToolbarItem key={`option-${id}`}>\n          <OptionComponent isFilter={false} position={SelectPosition.right} />\n        </ToolbarItem>\n      )) || <ToolbarItem key={helpers.generateId()}>{content}</ToolbarItem> ||\n      null\n    );\n  });\n};\n\nconst context = {\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFieldQueries,\n  useToolbarSecondaryFields\n};\n\nexport {\n  context as default,\n  context,\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFieldQueries,\n  useToolbarSecondaryFields\n};\n"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","BannerMessages","messages","useAliasGetAppMessages","useGetAppMessages","useState","hideAlerts","setHideAlerts","alerts","setAlerts","appMessages","data","useShallowCompareEffect","updatedMessages","length","Object","entries","forEach","key","value","message","find","id","push","map","title","variant","AlertVariant","actionClose","AlertActionCloseButton","onClose","Alert","className","defaultProps","translate","context","helpers","appName","Button","isInline","component","icon","ExternalLinkAltIcon","iconPosition","target","href","getMessageReports","reduxActions","useDispatch","useAliasDispatch","storeHooks","useProduct","useAliasProduct","useProductQuery","useAliasProductQuery","useSelectorsResponse","useAliasSelectorsResponse","productId","query","dispatch","selector","report","error","fulfilled","pending","dateHelpers","startDate","endDate","updatedQuery","RHSM_API_QUERY_SET_TYPES","GRANULARITY_TYPES","toISOString","updatedData","cloudigradeMismatch","undefined","reverse","rhsmConstants","GraphCard","cardTitle","children","getGraphReportsCapacity","graphData","meta","isDisabled","useAliasProductGraphConfig","useProductGraphConfig","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","settings","RHSM_API_QUERY_TYPES","granularity","actionDisplay","Card","MinHeight","CardHeader","CardTitle","Title","headingLevel","size","CardActions","CardBody","Loader","GraphCardChart","makeMapStateToProps","reduxSelectors","ConnectedGraphCard","connect","filters","graphCardHelpers","groupedFiltersSettings","standaloneFiltersSettings","GraphCardContext","filtersSettings","metric","GraphCardMetricTotals","filtered","chartAreaProps","xAxisLabelIncrement","xAxisTickFormat","item","previousItem","tick","date","previousDate","yAxisTickFormat","Chart","JSON","stringify","dataSets","tempFiltered","strokeWidth","isStacked","test","isThreshold","stroke","chartColorGreenDark","strokeDasharray","assign","keys","chartLegend","chart","datum","chartTooltip","t","useAliasMetricsSelector","useMetricsSelector","metricId","lastDate","lastHasData","hasData","lastValue","y","isCurrentDate","currentDate","currentHasData","currentValue","monthlyDate","totalMonthlyDate","monthlyHasData","totalMonthlyHasData","monthlyValue","totalMonthlyValue","toolbarFieldOptions","option","selectedMonth","isCurrent","dailyDate","dailyHasData","dailyValue","Flex","_camelCase","flex","default","direction","alignSelf","FlexItem","month","skeletonProps","SkeletonSize","total","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","CardFooter","moment","InventoryCardHosts","props","useGetInventory","useGetHostsInventory","useOnColumnSort","useOnColumnSortHosts","InventoryCardSubscriptions","cardActions","useGetSubscriptionsInventory","useOnPage","useOnPageSubscriptions","useOnColumnSortSubscriptions","useProductInventoryConfig","useProductInventorySubscriptionsConfig","useProductInventoryQuery","useProductInventorySubscriptionsQuery","getInventory","useAliasProductInventoryQuery","inventory","subscriptionsInventory","cancelled","offset","perPage","type","reduxTypes","viewId","sortColumns","SORT_TYPES","_data","updatedDirection","updatedSortColumn","values","SortByDirection","SORT_DIRECTION_TYPES","console","warn","InventoryTab","active","propTypes","PropTypes","InventoryTabs","onTab","index","store","tabs","this","activeTab","defaultActiveTab","updatedChildren","React","child","content","count","Tabs","ConnectedInventoryTabs","ProductView","toolbarGraph","toolbarGraphDescription","useAliasRouteDetail","useRouteDetail","routeProductLabel","productParameter","productConfig","PageLayout","PageHeader","productLabel","PageColumns","config","graphTallyQuery","inventoryHostsQuery","inventorySubscriptionsQuery","initialGuestsFilters","initialInventoryFilters","initialInventorySettings","initialSubscriptionsInventoryFilters","productDisplay","apiQueries","initialGraphTallyQuery","initialInventoryHostsQuery","graphCardTooltip","Tooltip","position","TooltipPosition","enableFlip","distance","entryDelay","exitDelay","graphCardTitle","ProductViewContext","PageMessages","DISPLAY_TYPES","PageToolbar","Toolbar","PageSection","ToolbarFieldGranularity","SelectPosition","ConnectedInventoryList","filterGuestsData","filterInventoryData","InventoryCard","renderProduct","state","updatedActiveTab","updatedTabs","setState","setTabData","prevProps","_isEqualWith","valueA","valueB","toString","Tab","eventKey","TabTitleText","hasOverflowScroll","activeKey","onSelect","event","mountOnEnter","unmountOnExit","inset","md","Grid","GridItem","span","renderTabs","hardFilterReset","useAliasSelectCategoryOptions","useSelectCategoryOptions","useAliasToolbarFieldClear","useToolbarFieldClear","useAliasToolbarFieldClearAll","useToolbarFieldClearAll","useAliasToolbarFieldQueries","useToolbarFieldQueries","useAliasToolbarSecondaryFields","useToolbarSecondaryFields","currentCategory","options","toolbarFieldQueries","clearField","clearAllFields","secondaryFields","collapseListedFiltersBreakpoint","clearAllFilters","clearFiltersButtonText","ToolbarContent","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarGroup","ToolbarItem","ToolbarFieldSelectCategory","OptionComponent","isClearable","filterOptions","chipProps","categoryName","chips","setSelectedOptions","deleteChip","ToolbarFilter","showToolbarItem","isFilter","alignment","billingProvider","sla","uom","usage","useBillingProviderOnSelect","useAliasBillingProviderOnSelect","useSlaOnSelect","useAliasSlaOnSelect","useUsageOnSelect","useAliasUsageOnSelect","billingOnSelect","slaOnSelect","usageOnSelect","field","useSelectCategoryOnSelect","useAliasSelectCategoryOnSelect","selectCategoryOnSelect","categoryOptions","useProductToolbarConfig","useAliasProductToolbarConfig","secondaryFilters","categoryOptionValue"],"sourceRoot":""}