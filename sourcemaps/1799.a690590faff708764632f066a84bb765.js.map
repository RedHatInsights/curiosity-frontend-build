{"version":3,"file":"js/1799.29500e701d683b0fd587.js","mappings":"oXAyCMA,EAAiB,SAAHC,GAMd,IALJC,EAACD,EAADC,EACeC,EAAkBF,EAAjCG,cACqBC,EAAwBJ,EAA7CK,oBACqBC,EAAwBN,EAA7CO,oBAC2BC,EAA8BR,EAAzDS,0BAEMC,EAAuBN,IACuBO,EAA1BL,IAAlBM,SAAAA,OAAQ,IAAAD,EAAG,CAAC,EAACA,EACbE,EAAaD,EAAbC,SAEwCC,EAAgBN,IAAvDO,EAAAA,GAAAA,aACTC,EAA0Cd,IAAlCe,EAAOD,EAAPC,QAASC,EAAKF,EAALE,MAAKC,EAAAH,EAAEI,SAAAA,OAAQ,IAAAD,EAAG,GAAEA,EAErC,OACEE,IAAAA,cAACC,EAAAA,KAAI,CAACC,SAAO,EAACC,UAAU,yBACtBH,IAAAA,cAACI,EAAAA,WAAU,KACTJ,IAAAA,cAACK,EAAAA,UAAS,KACRL,IAAAA,cAACM,EAAAA,MAAK,CAACC,aAAa,KAAKC,KAAK,MAC3B5B,EAAE,8BAA+B,CAAE6B,QAASjB,IAC7CQ,IAAAA,cAACU,EAAAA,2BAA0B,QAG9BrB,GACCW,IAAAA,cAACW,EAAAA,YAAW,CAACR,UAAYN,EAAS,OAAW,IAC3CG,IAAAA,cAACY,EAAAA,QAAO,CAACC,gCAAgC,MACvCb,IAAAA,cAACc,EAAAA,eAAc,KACbd,IAAAA,cAACe,EAAAA,aAAY,CAACC,UAAW,CAAEC,QAAS,eAAiB5B,OAM/DW,IAAAA,cAACkB,EAAAA,UAAS,CAACC,IAAI,iBACbnB,IAAAA,cAACoB,EAAAA,SAAQ,KACPpB,IAAAA,cAAA,OAAKG,WAAYN,EAAS,OAAYD,GAAW,WAAa,IAC3DA,GAAWI,IAAAA,cAACqB,EAAAA,OAAM,CAACC,QAAQ,WAC1B1B,GACAI,IAAAA,cAACuB,EAAAA,MAAKC,OAAAC,OAAA,GACAC,EAAAA,iBAAAA,8BAA+C,CAAEnC,SAAAA,EAAUE,YAAAA,IAAc,CAC7EM,SAAUA,EACV4B,YAAa,SAAAC,GAAA,IAAGC,EAAKD,EAALC,MAAOC,EAAKF,EAALE,MAAK,OAAO9B,IAAAA,cAAC+B,EAAAA,qBAAoB,CAACF,MAAOA,EAAOC,MAAOA,GAAS,EACvFE,aAAc,SAAAC,GAAA,IAAGH,EAAKG,EAALH,MAAK,OAAO9B,IAAAA,cAACkC,EAAAA,sBAAqB,CAACJ,MAAOA,GAAS,QAQpF,EAsBApD,EAAeyD,aAAe,CAC5BvD,EAAGwD,EAAAA,UACHtD,cAAAA,EAAAA,cACAE,oBAAAA,EAAAA,oBACAE,oBAAAA,EAAAA,oBACAE,0BAAAA,EAAAA,0B,oPCnFI2C,EAAuB,SAAHpD,GAQpB,IAPJkD,EAAKlD,EAALkD,MACAC,EAAKnD,EAALmD,MACAlD,EAACD,EAADC,EACayD,EAAgB1D,EAA7B2D,YACqBrD,EAAwBN,EAA7CO,oBACcqD,EAAiB5D,EAA/B6D,aACYC,EAAe9D,EAA3B+D,WAEoDpD,EAA1BL,IAAlBM,SAAAA,OAAQ,IAAAD,EAAG,CAAC,EAACA,EACrBqD,EAAiCF,IAAzBG,EAAYD,EAAZC,aAAcC,EAAMF,EAANE,OACdC,EAA0BvD,EAA1BuD,sBAEFC,EAAWV,IACjBW,EAA6CT,EAAkB,CAC7D,SAAAX,GAAA,IAAAqB,EAAQ,OAAmB,QAAnBA,EAAArB,EAALsB,MAAkBC,cAAM,IAAAF,OAAA,EAAZA,EAAA,GAAAG,OAAkBP,EAAM,aAAY,GAAAO,QAAAC,EAAAA,EAAAA,GAChDvB,EAAM/B,SAASuD,KAChB,SAAArB,GAAA,IAAGsB,EAAEtB,EAAFsB,GAAE,OACH,SAAAC,GAAA,IAAAC,EAAQ,OACM,QADNA,EAAAD,EAALN,MACKC,cAAM,IAAAM,OAAA,EAAZA,EAAA,GAAAL,OAAkBP,EAAM,KAAAO,OAAIG,GAAK,QAEvCG,GAAAC,EAAAA,EAAAA,GAAAX,GAPKY,EAAkBF,EAAA,GAAKG,EAAWH,EAAAI,MAAA,IASzCC,EAAAA,EAAAA,IAAS,WACPjC,EAAM/B,SAASiE,SAAQ,SAAAC,EAA0BC,GAAU,IAAjCX,EAAEU,EAAFV,GAAIY,EAAeF,EAAfE,gBACxBP,GAAsBO,EACnB,IAAIC,OAAOR,GAAoBS,KAAKd,IACvC1B,EAAMyC,KAAKf,KAGUM,aAAW,EAAXA,EAAcK,KAAUrC,EAAM0C,UAAUhB,KAG7D1B,EAAMyC,KAAKf,EAGjB,GACF,IAQA,IAAMiB,EAAU,SAAAjB,GACd,IAAMkB,EAAgB5C,EAAM6C,OAAOnB,GAEnCR,EAAS,CACP4B,KAAMC,EAAAA,GAAAA,MAAAA,iBACNrB,GAAI,GAAFH,OAAKP,EAAM,KAAAO,OAAIG,GACjBsB,MAAOJ,GAEX,EAEA,OACEzE,IAAAA,cAACA,IAAAA,SAAc,KACZ8B,EAAM/B,SAASuD,KAAI,SAAAwB,EAAgDZ,GAAU,IAAvDX,EAAEuB,EAAFvB,GAAIwB,EAAWD,EAAXC,YAAqBC,EAAKF,EAAbG,OAAMC,EAAAJ,EAASK,KAC/CC,SADmD,IAAAF,EAAG,GAAEA,GAEtDG,MAAK,SAAAC,GAAA,IAAGC,EAACD,EAADC,EAAGC,EAAOF,EAAPE,QAAO,OAAQD,GAAK,IAAiB,IAAZC,GAAsBD,GAAK,IAAqB,IAAhBR,CAAqB,MAAK,EAEhGU,EAAe7G,EAAE,CAAC,wBAAyB,4BAA6B,CAC5E8G,QAAS9C,EACTnC,QAAS8C,IAGLoC,EAAiB/G,EAAE,gCAEvB,CACE8G,QAAS9C,EACTnC,QAAS8C,GAEX,CAACvD,IAAAA,cAAA,QAAM4F,MAAO,CAAEC,WAAY,cAGxBC,GAAiBjC,aAAW,EAAXA,EAAcK,KAAUrC,EAAM0C,UAAUhB,GACzDwC,EAAoB,CAAC,EAEtBjD,IACHiD,EAAkBvB,QAAU,kBAAMA,EAAQjB,EAAG,EAC7CwC,EAAkBC,WAAa,kBAAMxB,EAAQjB,EAAG,GAGlD,IAAM0C,EACJjG,IAAAA,cAACkG,EAAAA,OAAM1E,OAAAC,OAAA,GACDsE,EAAiB,CACrB5F,UAAU,qCACVgG,SAAU,EACVhF,IAAG,oBAAAiC,OAAsBG,GACzBjC,QAAQ,OACR8E,UAAU,IACVhB,WAAYtC,QAAAA,EAAyBsC,EACrCiB,MACIjB,GAAcU,IAAmB9F,IAAAA,cAACsG,EAAAA,UAAS,CAACC,OAAO,cACnDvG,IAAAA,cAACsG,EAAAA,UAAS,CACRC,OAASxB,EAAe,OAAW,SACnCa,MAAO,CAAEY,WAAapB,GAA4BU,EAAd,SAA6C,WACjFW,KAAMzB,MAKXS,GAIL,OAAIE,EAEA3F,IAAAA,cAAC0G,EAAAA,QAAO,CACNvF,IAAG,qBAAAiC,OAAuBG,GAC1BoD,QAAS3G,IAAAA,cAAA,SAAI2F,GACbiB,SAAUC,EAAAA,gBAAAA,IACVC,YAAU,EACVC,SAAU,GAEV/G,IAAAA,cAAA,QAAMG,UAAU,oEAAoE8F,IAKnFA,CACT,IAGN,EAqCAlE,EAAqBI,aAAe,CAClCN,MAAO,CACLyC,KAAM0C,EAAAA,GAAAA,KACNtC,OAAQsC,EAAAA,GAAAA,KACRzC,UAAWyC,EAAAA,GAAAA,MAEblF,MAAO,CACL/B,SAAU,IAEZnB,EAAGwD,EAAAA,UACHE,YAAa2E,EAAAA,GAAAA,WAAAA,YACb/H,oBAAAA,EAAAA,oBACAwD,WAAAA,EAAAA,WACAF,aAAcyE,EAAAA,GAAAA,WAAAA,a,yLC7LVvG,EAA6B,SAAH/B,GAA6D,IAAvDC,EAACD,EAADC,EACgBU,GAA1BL,EAD0DN,EAA7CO,uBAC/BK,SAAAA,OAAQ,IAAAD,EAAG,CAAC,EAACA,EACb4H,EAAqC3H,EAArC2H,uBAAwB1H,EAAaD,EAAbC,SAEhC,OAAK0H,EAKHlH,IAAAA,cAAC0G,EAAAA,QAAO,CACNC,QAAS3G,IAAAA,cAAA,SAAIpB,EAAE,yCAA0C,CAAE6B,QAASjB,KACpEoH,SAAUC,EAAAA,gBAAAA,IACVC,YAAY,EACZC,SAAU,EACVI,WAAY,IACZC,UAAW,GAEXpH,IAAAA,cAAA,QAAMG,UAAU,4BACdH,IAAAA,cAACqH,EAAAA,2BAA0B,QAbxB,IAiBX,EAiBA3G,EAA2ByB,aAAe,CACxCvD,EAAGwD,EAAAA,UACHlD,oBAAAA,EAAAA,oB,oNCrCIgD,EAAwB,SAAHvD,GAKrB,IAJJmD,EAAKnD,EAALmD,MACAlD,EAACD,EAADC,EACY6D,EAAe9D,EAA3B+D,WAC2BvD,EAA8BR,EAAzDS,0BAEQwD,EAAiBH,IAAjBG,aACwCnD,EAAgBN,IAAvDO,EAAAA,GAAAA,aAEL4H,EAAS,KACPnC,EAAO,GAC0BoC,GAAXzF,GAAS,CAAC,GAA9B0F,WAAAA,OAAU,IAAAD,EAAG,CAAC,EAACA,EAgDvB,OA9CA/F,OAAOiG,KAAKD,GACTE,UACA1D,SAAQ,SAAC7C,EAAK+C,GAAU,IAAAyD,EAAAC,EAAAC,EACNC,EAAH,IAAV5D,IACFoD,GAASS,EAAAA,EAAAA,gBAAe,CACtBC,KAAqB,QAAjBF,EAAEN,EAAWrG,UAAI,IAAA2G,OAAA,EAAfA,EAAiB3C,KAAK6C,KAC5BvI,YAAAA,KAIJ,IAAMwI,EAAgB,CACpBjD,MAAsB,QAAjB2C,EAAEH,EAAWrG,UAAI,IAAAwG,OAAA,EAAfA,EAAiB3C,OAG1B,IAAmB,QAAf4C,EAAAJ,EAAWrG,UAAI,IAAAyG,OAAA,EAAfA,EAAiBM,aAAcC,EAAAA,iBAAAA,UAA4B,KAAAC,EAAAC,EAAAC,EAAAC,EACzDC,EAA8C,QAA1BJ,EAAkB,QAAlBC,EAAGb,EAAWrG,UAAI,IAAAkH,OAAA,EAAfA,EAAiBlD,KAAKI,SAAC,IAAA6C,EAAAA,EAAIxJ,EAAE,wBAAyB,CAAE6B,QAAS,YAGzE,QAAf6H,EAAAd,EAAWrG,UAAI,IAAAmH,GAAfA,EAAiBnD,KAAKsD,aAA8B,QAAnBF,EAAIf,EAAWrG,UAAI,IAAAoH,GAAfA,EAAiBpD,KAAKuD,uBAC7DF,EAAuB5J,EAAE,wBAAyB,CAAE6B,QAAS,CAAC,YAAa,aAAe,CACxFwH,EAAcjD,OACZhF,IAAAA,cAACsG,EAAAA,UAAS,CACRC,OAAO,WACPE,KAAK,UACLkC,MAAO/J,EAAE,wBAAyB,CAAE6B,QAAS,CAAC,YAAa,mBAMnEwH,EAAcW,MAAQhK,EAAE,wBAAyB,CAAE6B,QAAS,CAAC,eAC7DwH,EAAcpD,MAAQ2D,CACxB,KAAO,KAAAK,EAAAC,EACCC,GAC+B,KAAnB,QAAfF,EAAArB,EAAWrG,UAAI,IAAA0H,OAAA,EAAfA,EAAiB1D,KAAKK,UAAqB5G,EAAE,wBAAyB,CAAE6B,QAAS,aACnE,QAD8EqI,EAC7FtB,EAAWrG,UAAI,IAAA2H,OAAA,EAAfA,EAAiB3D,KAAKI,IACtB,EAEF0C,EAAcW,MAAQhK,EAAE,wBAAyB,CAAE6B,QAASU,EAAKuE,QAAS9C,IAC1EqF,EAAcpD,MAAQkE,CACxB,CAEAd,EAAcC,UAA2B,QAAlBL,EAAGL,EAAWrG,UAAI,IAAA0G,OAAA,EAAfA,EAAiBK,UAC3C/C,EAAK6D,KAAKf,EACZ,IAGAjI,IAAAA,cAAA,OAAKG,UAAU,kCACbH,IAAAA,cAAA,SAAOiJ,QAASrK,EAAE,mCACduG,EAAK+D,QAAU5B,GACftH,IAAAA,cAAA,aACEA,IAAAA,cAAA,UACEA,IAAAA,cAAA,MAAImJ,QAAS,GAAI7B,MAIrB,KACAnC,EAAK+D,QACLlJ,IAAAA,cAAA,aACGmF,EAAK7B,KAAI,SAAA8F,GAAa,IAAAC,EAAAC,EACfC,EACwB,iBAApBH,EAAUvE,QACf2E,OAAOC,UAAUL,EAAUvE,SAEK,QAFCwE,EAClCrC,EAAAA,GAAAA,cACiBoC,EAAUvE,cAAM,IAAAwE,GACiD,QADjDC,EADjCD,EAEIK,OAAO,CAAEC,SAAS,EAAMC,SAAU,EAAGC,cAAc,EAAMC,cAAc,WAAO,IAAAR,OADjD,EADjCA,EAGIS,gBACNX,EAAUvE,MAEZ,OACE7E,IAAAA,cAAA,MAAImB,IAAG,WAAAiC,OAAagG,EAAUR,QAC5B5I,IAAAA,cAAA,UACGoJ,EAAUlB,YAAcC,EAAAA,iBAAAA,WACvBnI,IAAAA,cAACsG,EAAAA,UAAS,CAAC9F,KAAK,KAAK+F,OAAO,OAAOE,KAAM2C,EAAUpE,OAAS,gBAE7DoE,EAAUlB,YAAcC,EAAAA,iBAAAA,WACvBnI,IAAAA,cAACsG,EAAAA,UAAS,CAAC9F,KAAK,KAAKiG,KAAM2C,EAAUpE,OAAS,gBAC7C,IACFoE,EAAUR,OAEb5I,IAAAA,cAAA,UAAKuJ,GAGX,MAGF,OAEDpE,EAAK+D,QAAUtK,EAAE,wBAAyB,CAAE6B,QAAS,CAAC,SAAU,YAAgB,KAGzF,EAiCAyB,EAAsBC,aAAe,CACnCL,MAAO,CAAC,EACRlD,EAAGwD,EAAAA,UACHM,WAAAA,EAAAA,WACAtD,0BAAAA,EAAAA,0B,6iBClJI4K,EAAkB,CAAC,CAAEzK,SAAU,CAAE0K,QAAS,KAAQjD,EAAAA,EAAAA,MAElDkD,EAAmBlK,IAAAA,cAAoBgK,GAOvC9K,EAAsB,WAAH,OAASiL,EAAAA,EAAAA,YAAWD,EAAiB,EAUxDE,EAA0B,WAGrB,IAAAzL,EAAA0L,UAAAnB,OAAA,QAAAoB,IAAAD,UAAA,GAAAA,UAAA,GAAP,CAAC,EAACE,EAAA5L,EAFJ+D,WAAYD,OAAe,IAAA8H,EAAG7H,EAAAA,WAAU6H,EAAAC,EAAA7L,EACxC8L,sBAAuBC,OAA0B,IAAAF,EAAGC,EAAAA,sBAAqBD,EAEjEG,EAAclI,IAAdkI,UACRC,EAAwCF,IAA4BG,EAAAD,EAA5DE,QAAAA,OAAO,IAAAD,EAAG,GAAEA,EAAAE,EAAAH,EAAErL,SAAAA,OAAQ,IAAAwL,EAAG,CAAC,EAACA,EAEnC,OAAOC,EAAAA,EAAAA,UACL,kBACEtJ,EAAAA,iBAAAA,sBAAuC,CACrCoJ,QAAAA,EACAvL,SAAAA,EACAoL,UAAAA,GACA,GACJ,CAACG,EAASvL,EAAUoL,GAExB,EAWMM,EAAqB,WAGhB,IAAArJ,EAAAyI,UAAAnB,OAAA,QAAAoB,IAAAD,UAAA,GAAAA,UAAA,GAAP,CAAC,EAACa,EAAAtJ,EAFJ1C,oBAAqBD,OAAwB,IAAAiM,EAAGhM,EAAmBgM,EAAAC,EAAAvJ,EACnEwJ,qBAAsBC,OAAyB,IAAAF,EAAGlE,EAAAA,GAAAA,WAAAA,qBAA0CkE,EAExC7L,EAA1BL,IAAlBM,SACR+L,QADgB,IAAAhM,EAAG,CAAC,EAACA,GACb2K,QAAAA,OAAO,IAAAqB,EAAG,GAAEA,EAEpBC,EAMIF,EACFpB,EAAQ3G,KACN,SAAArB,GAAA,IAAOuJ,EAAQvJ,EAAZsB,GAAckI,EAAUxJ,EAAVwJ,WAAU,OACzB,SAAAjI,GAAA,IAAAkI,EAAAC,EAAGzI,EAAKM,EAALN,MAAK,OACNuI,EAA2B,QAAjBC,EAAGxI,EAAM0I,gBAAQ,IAAAF,OAAA,EAAdA,EAAiBF,GAAuB,QAAdG,EAAGzI,EAAM2I,aAAK,IAAAF,OAAA,EAAXA,EAAcH,EAAS,MATvE3L,EAAK0L,EAAL1L,MACAiM,EAASP,EAATO,UACAlM,EAAO2L,EAAP3L,QAAOmM,EAAAR,EACPpG,KAAAA,OAAI,IAAA4G,EAAG,GAAEA,EACNC,GAAQC,EAAAA,EAAAA,GAAAV,EAAAW,GAYPC,EAAW,CAAC,EACZC,EAAajH,aAAI,EAAJA,EAAM7B,KAAI,SAAC+I,EAAYnI,GACxC,IAAMoI,GAAiBC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAClBtC,EAAQ/F,IACRmI,GAGL,OADAF,EAASlC,EAAQ/F,GAAOX,IAAM+I,EACvBA,CACT,IAEA,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKP,GAAQ,IACX7G,KAAMgH,EACNpM,SAAUqM,EACVvM,MAAAA,EACAiM,UAAAA,EACAlM,QAAAA,GAEJ,EAeMd,EAAgB,WAOX,IAAAmF,EAAAoG,UAAAnB,OAAA,QAAAoB,IAAAD,UAAA,GAAAA,UAAA,GAAP,CAAC,EAACmC,EAAAvI,EANJwI,gBAAAA,OAAe,IAAAD,EAAGE,EAAAA,GAAAA,KAAAA,gBAAiCF,EAAAG,EAAA1I,EACnD3B,YAAaD,OAAgB,IAAAsK,EAAG1F,EAAAA,GAAAA,WAAAA,YAAiC0F,EAAAC,EAAA3I,EACjE/E,oBAAqBD,OAAwB,IAAA2N,EAAG1N,EAAmB0N,EAAAC,EAAA5I,EACnEgH,mBAAoB6B,OAAuB,IAAAD,EAAG5B,EAAkB4B,EAAAE,EAAA9I,EAChEvB,WAAYD,OAAe,IAAAsK,EAAGrK,EAAAA,WAAUqK,EAAAC,EAAA/I,EACxC7E,0BAA2BD,OAA8B,IAAA6N,EAAG5N,EAAAA,0BAAyB4N,EAE7ErC,EAAclI,IAAdkI,UACFsC,EAAQ9N,IACR4D,EAAWV,IACX2J,EAAWc,IACmCI,EAA1BjO,IAAlBM,SACR4N,QADgB,IAAAD,EAAG,CAAC,EAACA,GACbjD,QAAAA,OAAO,IAAAkD,EAAG,GAAEA,EAYpB,OAVAC,EAAAA,EAAAA,IAAwB,WACtB,IAAMC,EAAiBpD,EAAQ3G,KAAI,SAAAwB,GAAA,IAAW0G,EAAQ1G,EAAhBwI,OAAkB7B,EAAU3G,EAAV2G,WAAmB8B,EAAWzI,EAAlBmI,MAAK,MAAqB,CAC5F1J,GAAIoH,EACJ2C,OAAQ9B,EACRC,WAAAA,EACAwB,MAAOM,EACR,IACDd,EAAgBY,EAAgBJ,EAAhCR,CAAuC1J,EACzC,GAAG,CAACkH,EAASU,EAAWsC,IAEjBjB,CACT,EAiBMhN,EAAsB,WAIjB,IAAAsG,EAAA+E,UAAAnB,OAAA,QAAAoB,IAAAD,UAAA,GAAAA,UAAA,GAAP,CAAC,EAACmD,EAAAlI,EAHJmI,gBAAAA,OAAe,IAAAD,EAAGE,EAAAA,oBAAmBF,EAAAG,EAAArI,EACrC2F,mBAAoB6B,OAAuB,IAAAa,EAAG1C,EAAkB0C,EAAAC,EAAAtI,EAChEpG,oBAAqBD,OAAwB,IAAA2O,EAAG1O,EAAmB0O,EAEnEC,EAA8Bf,IAAtBlN,EAAOiO,EAAPjO,QAASG,EAAQ8N,EAAR9N,SACmC+N,EAA1B7O,IAAlBM,SACAwO,QADQ,IAAAD,EAAG,CAAC,EAACA,GACbC,QAER,OAAO/C,EAAAA,EAAAA,UACL,kBACE+C,aAAO,EAAPA,EAASzK,KAAI,SAAA0K,GAAqC,IAAlCzK,EAAEyK,EAAFzK,GAAIoD,EAAOqH,EAAPrH,QAAYsH,GAAWhC,EAAAA,EAAAA,GAAA+B,EAAAE,GAEtBC,GADJV,EAAgBpI,MAAK,SAAA+I,GAAA,IAAUC,EAAmBD,EAA1BvJ,MAAK,OAA4BtB,IAAO8K,CAAmB,KACjD,CAAC,GAA1CjI,UAER,OACG+H,GACCnO,IAAAA,cAACsO,EAAAA,YAAW,CAACnN,IAAG,UAAAiC,OAAYG,IAC1BvD,IAAAA,cAACmO,EAAe3M,OAAAC,OAAA,CAAC8M,UAAU,GAAWN,MAGzCtH,IAAY/G,GAAWG,EAASmJ,QAC/BlJ,IAAAA,cAACsO,EAAAA,YAAW,CAACnN,IAAKoC,GAAMyD,EAAAA,EAAAA,cACF,mBAAZL,EAAyBA,EAAQ,CAAExB,KAAMpF,IAAc4G,IAGnE,IAEJ,GAAE,GACJ,CAACoH,EAASN,EAAiB1N,EAAUH,GAEzC,EAEMa,EAAU,CACdyJ,iBAAAA,EACAF,gBAAAA,EACAlL,cAAAA,EACAE,oBAAAA,EACAE,oBAAAA,EACA+L,mBAAAA,EACAb,wBAAAA,E","sources":["webpack:///./src/components/graphCard/graphCardChart.js","webpack:///./src/components/graphCard/graphCardChartLegend.js","webpack:///./src/components/graphCard/graphCardChartTitleTooltip.js","webpack:///./src/components/graphCard/graphCardChartTooltip.js","webpack:///./src/components/graphCard/graphCardContext.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Card,\n  CardActions,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  Title,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup\n} from '@patternfly/react-core';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useGraphCardActions, useGraphCardContext, useGetMetrics } from './graphCardContext';\nimport { graphCardHelpers } from './graphCardHelpers';\nimport { Chart } from '../chart/chart';\nimport { GraphCardChartLegend } from './graphCardChartLegend';\nimport { GraphCardChartTooltip } from './graphCardChartTooltip';\nimport { GraphCardChartTitleTooltip } from './graphCardChartTitleTooltip';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { Loader } from '../loader/loader';\nimport { translate } from '../i18n/i18n';\n\n/**\n * @memberof GraphCard\n * @module GraphCardChart\n */\n\n/**\n * A chart/graph card.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useGetMetrics\n * @param {Function} props.useGraphCardActions\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {React.ReactNode}\n */\nconst GraphCardChart = ({\n  t,\n  useGetMetrics: useAliasGetMetrics,\n  useGraphCardActions: useAliasGraphCardActions,\n  useGraphCardContext: useAliasGraphCardContext,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const updatedActionDisplay = useAliasGraphCardActions();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { stringId } = settings;\n\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n  const { pending, error, dataSets = [] } = useAliasGetMetrics();\n\n  return (\n    <Card isPlain className=\"curiosity-usage-graph\">\n      <CardHeader>\n        <CardTitle>\n          <Title headingLevel=\"h2\" size=\"lg\">\n            {t('curiosity-graph.cardHeading', { context: stringId })}\n            <GraphCardChartTitleTooltip />\n          </Title>\n        </CardTitle>\n        {updatedActionDisplay && (\n          <CardActions className={(error && 'blur') || ''}>\n            <Toolbar collapseListedFiltersBreakpoint=\"sm\">\n              <ToolbarContent>\n                <ToolbarGroup alignment={{ default: 'alignRight' }}>{updatedActionDisplay}</ToolbarGroup>\n              </ToolbarContent>\n            </Toolbar>\n          </CardActions>\n        )}\n      </CardHeader>\n      <MinHeight key=\"bodyMinHeight\">\n        <CardBody>\n          <div className={(error && 'blur') || (pending && 'fadein') || ''}>\n            {pending && <Loader variant=\"graph\" />}\n            {!pending && (\n              <Chart\n                {...graphCardHelpers.generateExtendedChartSettings({ settings, granularity })}\n                dataSets={dataSets}\n                chartLegend={({ chart, datum }) => <GraphCardChartLegend chart={chart} datum={datum} />}\n                chartTooltip={({ datum }) => <GraphCardChartTooltip datum={datum} />}\n              />\n            )}\n          </div>\n        </CardBody>\n      </MinHeight>\n    </Card>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useGraphCardContext: Function, useProductGraphTallyQuery: Function, t: Function,\n *     useGetMetrics: Function, useGraphCardActions: Function}}\n */\nGraphCardChart.propTypes = {\n  t: PropTypes.func,\n  useGetMetrics: PropTypes.func,\n  useGraphCardActions: PropTypes.func,\n  useGraphCardContext: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGraphCardContext: Function, useProductGraphTallyQuery: Function, t: translate,\n *     useGetMetrics: Function, useGraphCardActions: Function}}\n */\nGraphCardChart.defaultProps = {\n  t: translate,\n  useGetMetrics,\n  useGraphCardActions,\n  useGraphCardContext,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChart as default, GraphCardChart };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { useMount } from 'react-use';\nimport { useProduct } from '../productView/productViewContext';\nimport { useGraphCardContext } from './graphCardContext';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { ChartIcon } from '../chart/chartIcon';\n\n/**\n * @memberof GraphCard\n * @module GraphCardChartLegend\n */\n\n/**\n * FixMe: PF button disabled borks events on immediate parent nodes, such as tooltip wrappers\n * PF is using \"pointer-events: none\" styling when disabled is activated. This\n * currently affects events on immediate parent nodes.\n */\n/**\n * A custom chart legend.\n *\n * @fires onClick\n * @param {object} props\n * @param {object} props.chart\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useDispatch\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useProduct\n * @param {Function} props.useSelectors\n * @returns {React.ReactNode}\n */\nconst GraphCardChartLegend = ({\n  chart,\n  datum,\n  t,\n  useDispatch: useAliasDispatch,\n  useGraphCardContext: useAliasGraphCardContext,\n  useSelectors: useAliasSelectors,\n  useProduct: useAliasProduct\n}) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const { productLabel, viewId } = useAliasProduct();\n  const { isDisabledLegendClick } = settings;\n\n  const dispatch = useAliasDispatch();\n  const [invertedLegendItem, ...legendItems] = useAliasSelectors([\n    ({ graph }) => graph.legend?.[`${viewId}-inverted`],\n    ...datum.dataSets.map(\n      ({ id }) =>\n        ({ graph }) =>\n          graph.legend?.[`${viewId}-${id}`]\n    )\n  ]);\n\n  useMount(() => {\n    datum.dataSets.forEach(({ id, isToolbarFilter }, index) => {\n      if (invertedLegendItem && isToolbarFilter) {\n        if (!new RegExp(invertedLegendItem).test(id)) {\n          chart.hide(id);\n        }\n      } else {\n        const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n\n        if (checkIsToggled) {\n          chart.hide(id);\n        }\n      }\n    });\n  });\n\n  /**\n   * Toggle legend item and chart.\n   *\n   * @event onClick\n   * @param {string} id\n   */\n  const onClick = id => {\n    const updatedToggle = chart.toggle(id);\n\n    dispatch({\n      type: reduxTypes.graph.SET_GRAPH_LEGEND,\n      id: `${viewId}-${id}`,\n      value: updatedToggle\n    });\n  };\n\n  return (\n    <React.Fragment>\n      {datum.dataSets.map(({ id, isThreshold, stroke: color, data = [] }, index) => {\n        const isDisabled =\n          !data.find(({ y, hasData }) => (y >= 0 && hasData === true) || (y >= 0 && isThreshold === true)) || false;\n\n        const labelContent = t([`curiosity-graph.label`, 'curiosity-graph.label_no'], {\n          product: productLabel,\n          context: id\n        });\n\n        const tooltipContent = t(\n          `curiosity-graph.legendTooltip`,\n          {\n            product: productLabel,\n            context: id\n          },\n          [<span style={{ whiteSpace: 'nowrap' }} />]\n        );\n\n        const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n        const buttonActionProps = {};\n\n        if (!isDisabledLegendClick) {\n          buttonActionProps.onClick = () => onClick(id);\n          buttonActionProps.onKeyPress = () => onClick(id);\n        }\n\n        const button = (\n          <Button\n            {...buttonActionProps}\n            className=\"curiosity-usage-graph__legend-item\"\n            tabIndex={0}\n            key={`curiosity-button-${id}`}\n            variant=\"link\"\n            component=\"a\"\n            isDisabled={isDisabledLegendClick ?? isDisabled}\n            icon={\n              ((isDisabled || checkIsToggled) && <ChartIcon symbol=\"eyeSlash\" />) || (\n                <ChartIcon\n                  symbol={(isThreshold && 'dash') || 'square'}\n                  style={{ visibility: (isDisabled && 'hidden') || (checkIsToggled && 'hidden') || 'visible' }}\n                  fill={color}\n                />\n              )\n            }\n          >\n            {labelContent}\n          </Button>\n        );\n\n        if (tooltipContent) {\n          return (\n            <Tooltip\n              key={`curiosity-tooltip-${id}`}\n              content={<p>{tooltipContent}</p>}\n              position={TooltipPosition.top}\n              enableFlip\n              distance={5}\n            >\n              <span className=\"pf-c-button pf-m-link curiosity-usage-graph__legend-item-wrapper\">{button}</span>\n            </Tooltip>\n          );\n        }\n\n        return button;\n      })}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, t: Function, useGraphCardContext: Function, useDispatch: Function,\n *     useSelectors: Function, chart: object}}\n */\nGraphCardChartLegend.propTypes = {\n  chart: PropTypes.shape({\n    hide: PropTypes.func,\n    toggle: PropTypes.func,\n    isToggled: PropTypes.func\n  }),\n  datum: PropTypes.shape({\n    dataSets: PropTypes.arrayOf(\n      PropTypes.shape({\n        data: PropTypes.array,\n        id: PropTypes.string.isRequired,\n        isThreshold: PropTypes.bool,\n        stroke: PropTypes.string.isRequired\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useDispatch: PropTypes.func,\n  useGraphCardContext: PropTypes.func,\n  useProduct: PropTypes.func,\n  useSelectors: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: {dataSets: Array}, useProduct: Function, t: Function, useGraphCardContext: Function, useDispatch: Function,\n *     useSelectors: Function, chart: {hide: Function, toggle: Function, isToggled: Function}}}\n */\nGraphCardChartLegend.defaultProps = {\n  chart: {\n    hide: helpers.noop,\n    toggle: helpers.noop,\n    isToggled: helpers.noop\n  },\n  datum: {\n    dataSets: []\n  },\n  t: translate,\n  useDispatch: storeHooks.reactRedux.useDispatch,\n  useGraphCardContext,\n  useProduct,\n  useSelectors: storeHooks.reactRedux.useSelectors\n};\n\nexport { GraphCardChartLegend as default, GraphCardChartLegend };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { useGraphCardContext } from './graphCardContext';\nimport { translate } from '../i18n/i18n';\n\n/**\n * @memberof GraphCard\n * @module GraphCardChartTitleTooltip\n */\n\n/**\n * Graph card title tooltip.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useGraphCardContext\n * @returns {React.ReactNode}\n */\nconst GraphCardChartTitleTooltip = ({ t, useGraphCardContext: useAliasGraphCardContext }) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const { isCardTitleDescription, stringId } = settings;\n\n  if (!isCardTitleDescription) {\n    return null;\n  }\n\n  return (\n    <Tooltip\n      content={<p>{t(`curiosity-graph.cardHeadingDescription`, { context: stringId })}</p>}\n      position={TooltipPosition.top}\n      enableFlip={false}\n      distance={5}\n      entryDelay={100}\n      exitDelay={0}\n    >\n      <span className=\"curiosity-icon__question\">\n        <OutlinedQuestionCircleIcon />\n      </span>\n    </Tooltip>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useGraphCardContext: Function, t: Function}}\n */\nGraphCardChartTitleTooltip.propTypes = {\n  t: PropTypes.func,\n  useGraphCardContext: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGraphCardContext: Function, t: Function}}\n */\nGraphCardChartTitleTooltip.defaultProps = {\n  t: translate,\n  useGraphCardContext\n};\n\nexport { GraphCardChartTitleTooltip as default, GraphCardChartTitleTooltip };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { getTooltipDate } from './graphCardHelpers';\nimport { translate } from '../i18n/i18n';\nimport { ChartTypeVariant } from '../chart/chart';\nimport { ChartIcon } from '../chart/chartIcon';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * @memberof GraphCard\n * @module GraphCardChartTooltip\n */\n\n/**\n * A custom chart tooltip.\n *\n * @param {object} props\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useProduct\n * @returns {React.ReactNode}\n */\nconst GraphCardChartTooltip = ({\n  datum,\n  t,\n  useProduct: useAliasProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productLabel } = useAliasProduct();\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n\n  let header = null;\n  const data = [];\n  const { itemsByKey = {} } = datum || {};\n\n  Object.keys(itemsByKey)\n    .reverse()\n    .forEach((key, index) => {\n      if (index === 0) {\n        header = getTooltipDate({\n          date: itemsByKey[key]?.data.date,\n          granularity\n        });\n      }\n\n      const tempDataFacet = {\n        color: itemsByKey[key]?.color\n      };\n\n      if (itemsByKey[key]?.chartType === ChartTypeVariant.threshold) {\n        let thresholdStringValue = itemsByKey[key]?.data.y ?? t('curiosity-graph.label', { context: 'noData' });\n\n        // ToDo: Remove hasInfinite check once deprecated graphCard components are removed\n        if (itemsByKey[key]?.data.hasInfinite || itemsByKey[key]?.data.hasInfiniteQuantity) {\n          thresholdStringValue = t('curiosity-graph.label', { context: ['threshold', 'infinite'] }, [\n            tempDataFacet.color && (\n              <ChartIcon\n                symbol=\"infinity\"\n                fill=\"#ffffff\"\n                title={t('curiosity-graph.label', { context: ['threshold', 'infinite'] })}\n              />\n            )\n          ]);\n        }\n\n        tempDataFacet.label = t('curiosity-graph.label', { context: ['threshold'] });\n        tempDataFacet.value = thresholdStringValue;\n      } else {\n        const dataFactsValue =\n          (itemsByKey[key]?.data.hasData === false && t('curiosity-graph.label', { context: 'noData' })) ||\n          itemsByKey[key]?.data.y ||\n          0;\n\n        tempDataFacet.label = t(`curiosity-graph.label`, { context: key, product: productLabel });\n        tempDataFacet.value = dataFactsValue;\n      }\n\n      tempDataFacet.chartType = itemsByKey[key]?.chartType;\n      data.push(tempDataFacet);\n    });\n\n  return (\n    <div className=\"curiosity-usage-graph__tooltip\">\n      <table summary={t('curiosity-graph.tooltipSummary')}>\n        {(data.length && header && (\n          <thead>\n            <tr>\n              <th colSpan={2}>{header}</th>\n            </tr>\n          </thead>\n        )) ||\n          null}\n        {(data.length && (\n          <tbody>\n            {data.map(dataFacet => {\n              const updatedDataFacetValue =\n                (typeof dataFacet.value === 'number' &&\n                  !Number.isInteger(dataFacet.value) &&\n                  helpers\n                    .numberDisplay(dataFacet.value)\n                    ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: true })\n                    ?.toUpperCase()) ||\n                dataFacet.value;\n\n              return (\n                <tr key={`tooltip-${dataFacet.label}`}>\n                  <th>\n                    {dataFacet.chartType === ChartTypeVariant.threshold && (\n                      <ChartIcon size=\"sm\" symbol=\"dash\" fill={dataFacet.color || 'transparent'} />\n                    )}\n                    {dataFacet.chartType !== ChartTypeVariant.threshold && (\n                      <ChartIcon size=\"sm\" fill={dataFacet.color || 'transparent'} />\n                    )}{' '}\n                    {dataFacet.label}\n                  </th>\n                  <td>{updatedDataFacetValue}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        )) ||\n          null}\n      </table>\n      {(!data.length && t('curiosity-graph.label', { context: ['noData', 'error'] })) || null}\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.propTypes = {\n  datum: PropTypes.shape({\n    itemsByKey: PropTypes.objectOf(\n      PropTypes.shape({\n        chartType: PropTypes.string,\n        color: PropTypes.string,\n        data: PropTypes.shape({\n          date: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),\n          hasData: PropTypes.bool,\n          hasInfinite: PropTypes.bool,\n          hasInfiniteQuantity: PropTypes.bool,\n          y: PropTypes.number\n        })\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.defaultProps = {\n  datum: {},\n  t: translate,\n  useProduct,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChartTooltip as default, GraphCardChartTooltip };\n","import React, { useContext, useMemo } from 'react';\nimport { useShallowCompareEffect } from 'react-use';\nimport { ToolbarItem } from '@patternfly/react-core';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphConfig, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldSelectCategory';\nimport { helpers } from '../../common/helpers';\nimport { graphCardHelpers } from './graphCardHelpers';\n\n/**\n * @memberof GraphCard\n * @module GraphCardContext\n */\n\n/**\n * Chart context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{ settings: { metrics: [] } }, helpers.noop];\n\nconst GraphCardContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated graph card context.\n *\n * @returns {React.Context<{}>}\n */\nconst useGraphCardContext = () => useContext(GraphCardContext);\n\n/**\n * Parse filters settings for context.\n *\n * @param {object} options\n * @param {Function} options.useProduct\n * @param {Function} options.useProductGraphConfig\n * @returns {{standaloneFiltersSettings: Array<{ settings: object }>, groupedFiltersSettings: { settings: object }}}\n */\nconst useParseFiltersSettings = ({\n  useProduct: useAliasProduct = useProduct,\n  useProductGraphConfig: useAliasProductGraphConfig = useProductGraphConfig\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const { filters = [], settings = {} } = useAliasProductGraphConfig();\n\n  return useMemo(\n    () =>\n      graphCardHelpers.generateChartSettings({\n        filters,\n        settings,\n        productId\n      }),\n    [filters, settings, productId]\n  );\n};\n\n/**\n * Transform multiple metrics from store for chart/graph consumption.\n *\n * @param {object} options\n * @param {Function} options.useGraphCardContext\n * @param {Function} options.useSelectorsResponse\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: Array, errorId: {},\n *     id: {}, list: Array}, cancelled: boolean, dataSets: Array, message: null, error: boolean}}\n */\nconst useMetricsSelector = ({\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  const {\n    error,\n    fulfilled,\n    pending,\n    data = [],\n    ...response\n  } = useAliasSelectorsResponse(\n    metrics.map(\n      ({ id: metricId, isCapacity }) =>\n        ({ graph }) =>\n          isCapacity ? graph.capacity?.[metricId] : graph.tally?.[metricId]\n    )\n  );\n\n  /**\n   * Apply graph config settings to metric data.\n   */\n  const dataById = {};\n  const dataByList = data?.map((metricData, index) => {\n    const updatedMetricData = {\n      ...metrics[index],\n      ...metricData\n    };\n    dataById[metrics[index].id] = updatedMetricData;\n    return updatedMetricData;\n  });\n\n  return {\n    ...response,\n    data: dataById,\n    dataSets: dataByList,\n    error,\n    fulfilled,\n    pending\n  };\n};\n\n/**\n * Get graph metrics from Tally or Capacity.\n *\n * @param {object} params\n * @param {Function} params.getGraphMetrics\n * @param {Function} params.useDispatch\n * @param {Function} params.useGraphCardContext\n * @param {Function} params.useMetricsSelector\n * @param {Function} params.useProduct\n * @param {Function} params.useProductGraphTallyQuery\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: Array, errorId: {},\n *     id: {}, list: Array}, cancelled: boolean, dataSets: Array, message: null, error: boolean}}\n */\nconst useGetMetrics = ({\n  getGraphMetrics = reduxActions.rhsm.getGraphMetrics,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector = useMetricsSelector,\n  useProduct: useAliasProduct = useProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductGraphTallyQuery();\n  const dispatch = useAliasDispatch();\n  const response = useAliasMetricsSelector();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  useShallowCompareEffect(() => {\n    const updatedMetrics = metrics.map(({ metric: metricId, isCapacity, query: metricQuery }) => ({\n      id: productId,\n      metric: metricId,\n      isCapacity,\n      query: metricQuery\n    }));\n    getGraphMetrics(updatedMetrics, query)(dispatch);\n  }, [metrics, productId, query]);\n\n  return response;\n};\n\n/**\n * FixMe: the pending condition for \"content\" will block subsequent responses from this hook, this is expected.\n * This current limitation means if we decide to apply the same action to multiple cards the \"content\" will\n * not display for all of them.\n */\n/**\n * Return a component list for a configurable graphCard action toolbar.\n * Allow the \"content\" prop to receive graph data for display via callback.\n *\n * @param {object} params\n * @param {Array} params.categoryOptions\n * @param {Function} params.useMetricsSelector\n * @param {Function} params.useGraphCardContext\n * @returns {Array}\n */\nconst useGraphCardActions = ({\n  categoryOptions = toolbarFieldOptions,\n  useMetricsSelector: useAliasMetricsSelector = useMetricsSelector,\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext\n} = {}) => {\n  const { pending, dataSets } = useAliasMetricsSelector();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { actions } = settings;\n\n  return useMemo(\n    () =>\n      actions?.map(({ id, content, ...actionProps }) => {\n        const option = categoryOptions.find(({ value: categoryOptionValue }) => id === categoryOptionValue);\n        const { component: OptionComponent } = option || {};\n\n        return (\n          (OptionComponent && (\n            <ToolbarItem key={`option-${id}`}>\n              <OptionComponent isFilter={false} {...actionProps} />\n            </ToolbarItem>\n          )) ||\n          (content && !pending && dataSets.length && (\n            <ToolbarItem key={id || helpers.generateId()}>\n              {typeof content === 'function' ? content({ data: dataSets }) : content}\n            </ToolbarItem>\n          )) ||\n          null\n        );\n      }),\n    [actions, categoryOptions, dataSets, pending]\n  );\n};\n\nconst context = {\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardActions,\n  useGraphCardContext,\n  useMetricsSelector,\n  useParseFiltersSettings\n};\n\nexport {\n  context as default,\n  context,\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardActions,\n  useGraphCardContext,\n  useMetricsSelector,\n  useParseFiltersSettings\n};\n"],"names":["GraphCardChart","_ref","t","useAliasGetMetrics","useGetMetrics","useAliasGraphCardActions","useGraphCardActions","useAliasGraphCardContext","useGraphCardContext","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","updatedActionDisplay","_useAliasGraphCardCon2","settings","stringId","granularity","RHSM_API_QUERY_SET_TYPES","_useAliasGetMetrics","pending","error","_useAliasGetMetrics$d","dataSets","React","Card","isPlain","className","CardHeader","CardTitle","Title","headingLevel","size","context","GraphCardChartTitleTooltip","CardActions","Toolbar","collapseListedFiltersBreakpoint","ToolbarContent","ToolbarGroup","alignment","default","MinHeight","key","CardBody","Loader","variant","Chart","Object","assign","graphCardHelpers","chartLegend","_ref2","chart","datum","GraphCardChartLegend","chartTooltip","_ref3","GraphCardChartTooltip","defaultProps","translate","useAliasDispatch","useDispatch","useAliasSelectors","useSelectors","useAliasProduct","useProduct","_useAliasProduct","productLabel","viewId","isDisabledLegendClick","dispatch","_useAliasSelectors","_graph$legend","graph","legend","concat","_toConsumableArray","map","id","_ref4","_graph$legend2","_useAliasSelectors2","_toArray","invertedLegendItem","legendItems","slice","useMount","forEach","_ref5","index","isToolbarFilter","RegExp","test","hide","isToggled","onClick","updatedToggle","toggle","type","reduxTypes","value","_ref6","isThreshold","color","stroke","_ref6$data","data","isDisabled","find","_ref7","y","hasData","labelContent","product","tooltipContent","style","whiteSpace","checkIsToggled","buttonActionProps","onKeyPress","button","Button","tabIndex","component","icon","ChartIcon","symbol","visibility","fill","Tooltip","content","position","TooltipPosition","enableFlip","distance","helpers","storeHooks","isCardTitleDescription","entryDelay","exitDelay","OutlinedQuestionCircleIcon","header","_ref2$itemsByKey","itemsByKey","keys","reverse","_itemsByKey$key2","_itemsByKey$key3","_itemsByKey$key9","_itemsByKey$key","getTooltipDate","date","tempDataFacet","chartType","ChartTypeVariant","_itemsByKey$key$data$","_itemsByKey$key4","_itemsByKey$key5","_itemsByKey$key6","thresholdStringValue","hasInfinite","hasInfiniteQuantity","title","label","_itemsByKey$key7","_itemsByKey$key8","dataFactsValue","push","summary","length","colSpan","dataFacet","_helpers$numberDispla","_helpers$numberDispla2","updatedDataFacetValue","Number","isInteger","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","DEFAULT_CONTEXT","metrics","GraphCardContext","useContext","useParseFiltersSettings","arguments","undefined","_ref$useProduct","_ref$useProductGraphC","useProductGraphConfig","useAliasProductGraphConfig","productId","_useAliasProductGraph","_useAliasProductGraph2","filters","_useAliasProductGraph3","useMemo","useMetricsSelector","_ref2$useGraphCardCon","_ref2$useSelectorsRes","useSelectorsResponse","useAliasSelectorsResponse","_settings$metrics","_useAliasSelectorsRes","metricId","isCapacity","_graph$capacity","_graph$tally","capacity","tally","fulfilled","_useAliasSelectorsRes2","response","_objectWithoutProperties","_excluded","dataById","dataByList","metricData","updatedMetricData","_objectSpread","_ref5$getGraphMetrics","getGraphMetrics","reduxActions","_ref5$useDispatch","_ref5$useGraphCardCon","_ref5$useMetricsSelec","useAliasMetricsSelector","_ref5$useProduct","_ref5$useProductGraph","query","_useAliasGraphCardCon4","_settings$metrics2","useShallowCompareEffect","updatedMetrics","metric","metricQuery","_ref7$categoryOptions","categoryOptions","toolbarFieldOptions","_ref7$useMetricsSelec","_ref7$useGraphCardCon","_useAliasMetricsSelec","_useAliasGraphCardCon6","actions","_ref8","actionProps","_excluded2","OptionComponent","_ref9","categoryOptionValue","ToolbarItem","isFilter"],"sourceRoot":""}