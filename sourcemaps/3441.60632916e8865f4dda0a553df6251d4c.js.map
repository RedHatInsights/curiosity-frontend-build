{"version":3,"file":"js/3441.e2e0e01ee40332a98db0.js","mappings":"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","sources":["webpack:///./src/components/inventoryCard/inventoryCardHelpers.js","webpack:///./src/components/inventoryCardInstances/inventoryCardInstancesContext.js","webpack:///./src/components/inventoryGuests/inventoryGuests.js","webpack:///./src/components/inventoryGuests/inventoryGuestsContext.js"],"sourcesContent":["import React from 'react';\nimport { translate } from '../i18n/i18n';\nimport { RHSM_API_QUERY_SET_TYPES, RHSM_API_RESPONSE_META_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { tableHelpers } from '../table/table';\n\n/**\n * @memberof InventoryCard\n * @module InventoryCardHelpers\n */\n\n/**\n * Normalize inventory filters, settings into a consistent format.\n *\n * @param {object} params\n * @param {Array} params.filters\n * @param {Array} params.guestFilters\n * @param {object} params.settings\n * @param {string} params.productId\n * @returns {{settings: {}, columnCountAndWidths: {count: number, widths: Array}, filters: Array}}\n */\nconst normalizeInventorySettings = ({ filters = [], guestFilters = [], settings = {}, productId } = {}) => {\n  const updatedFilters = [];\n  const columnCountAndWidths = { count: filters.length, widths: [] };\n\n  filters.forEach(({ metric, header, cell, width, ...rest }) => {\n    let updatedHeader;\n    let updatedCell;\n    let updatedWidth;\n\n    if (typeof header === 'function' && header) {\n      updatedHeader = header;\n    } else if (header) {\n      updatedHeader = () => header;\n    } else {\n      updatedHeader = () =>\n        translate([`curiosity-inventory.header`, `curiosity-inventory.guestsHeader`], {\n          context: [metric, productId]\n        });\n    }\n\n    if (typeof cell === 'function' && cell) {\n      updatedCell = cell;\n    } else if (cell) {\n      updatedCell = () => cell;\n    } else {\n      updatedCell = ({ [metric]: displayValue }) => displayValue;\n    }\n\n    if (typeof width === 'number' && !Number.isNaN(width)) {\n      updatedWidth = width;\n    }\n\n    columnCountAndWidths.widths.push(updatedWidth);\n\n    updatedFilters.push({\n      label: updatedHeader,\n      metric,\n      width,\n      ...rest,\n      header: updatedHeader,\n      cell: updatedCell\n    });\n  });\n\n  return {\n    isGuestFiltersDisabled: !guestFilters || !guestFilters?.length,\n    columnCountAndWidths,\n    filters: updatedFilters,\n    settings\n  };\n};\n\n// ToDo: evaluate moving isWrap logic under the table component helpers\n// ToDo: evaluate a fallback \"perPageDefault = 10\" defined here\n/**\n * Parse an inventory API response against available filters, query parameters, and session values.\n *\n * @param {object} params\n * @param {object} params.data\n * @param {Array} params.filters\n * @param {React.ReactNode} params.GuestComponent\n * @param {boolean} params.isGuestFiltersDisabled\n * @param {object} params.query\n * @param {object} params.session\n * @param {object} params.settings\n * @returns {{dataSetColumnHeaders: Array, resultsPerPage: number, resultsOffset: number, dataSetRows: Array, resultsCount: number}}\n */\nconst parseInventoryResponse = ({\n  data = {},\n  filters = [],\n  GuestComponent,\n  isGuestFiltersDisabled = true,\n  query = {},\n  session = {},\n  settings = {}\n} = {}) => {\n  const { data: listData = [], meta = {} } = data;\n  const resultsCount = meta[RHSM_API_RESPONSE_META_TYPES.COUNT];\n  const {\n    [RHSM_API_QUERY_SET_TYPES.OFFSET]: resultsOffset,\n    [RHSM_API_QUERY_SET_TYPES.LIMIT]: resultsPerPage,\n    [RHSM_API_QUERY_SET_TYPES.SORT]: sortColumn,\n    [RHSM_API_QUERY_SET_TYPES.DIRECTION]: sortDirection\n  } = query;\n\n  const dataSetColumnHeaders = [];\n  const dataSetRows = [];\n  const columnData = {};\n\n  listData.forEach(rowData => {\n    const dataSetRow = [];\n    let expandedContent;\n\n    filters.forEach(({ metric, label, cell, ...rest }) => {\n      const updatedCell = cell({ ...rowData }, { ...session }, { ...meta });\n      const updatedLabel = label({ columnData: [] }, { ...session }, { ...meta });\n      dataSetRow.push({ metric, ...rest, dataLabel: updatedLabel, content: updatedCell });\n\n      columnData[metric] ??= [];\n      columnData[metric].push(updatedCell);\n    });\n\n    if (typeof settings?.guestContent === 'function') {\n      const guestContentResults = settings.guestContent({ ...rowData }, { ...session }, { ...meta });\n      const { id: guestId, numberOfGuests } = guestContentResults || {};\n\n      if (isGuestFiltersDisabled === false && guestId && numberOfGuests && GuestComponent) {\n        expandedContent = () => (\n          <GuestComponent key={`guests-${guestId}`} id={guestId} numberOfGuests={numberOfGuests} />\n        );\n      }\n    }\n\n    dataSetRows.push({ cells: dataSetRow, row: rowData, expandedContent });\n  });\n\n  filters.forEach(({ metric, header, ...rest }) => {\n    const updatedHeader = header({ columnData: columnData[metric] }, { ...session }, { ...meta });\n    const updatedRest = { ...rest };\n\n    if (updatedRest.isSort === true && sortDirection && sortColumn === metric) {\n      updatedRest.isSortActive = true;\n      updatedRest.sortDirection = sortDirection;\n    }\n\n    if (updatedRest.isWrap === true) {\n      updatedRest.modifier = tableHelpers.WrapModifierVariant.wrap;\n    }\n\n    dataSetColumnHeaders.push({ metric, ...updatedRest, content: updatedHeader });\n  });\n\n  return {\n    dataSetColumnHeaders,\n    dataSetRows,\n    resultsCount,\n    resultsOffset,\n    resultsPerPage\n  };\n};\n\nconst inventoryCardHelpers = {\n  normalizeInventorySettings,\n  parseInventoryResponse\n};\n\nexport { inventoryCardHelpers as default, inventoryCardHelpers, normalizeInventorySettings, parseInventoryResponse };\n","import React, { useMemo } from 'react';\nimport { useShallowCompareEffect } from 'react-use';\nimport { ToolbarItem } from '@patternfly/react-core';\nimport { reduxActions, reduxTypes, storeHooks } from '../../redux';\nimport { useSession } from '../authentication/authenticationContext';\nimport {\n  useProduct,\n  useProductInventoryGuestsConfig,\n  useProductInventoryHostsConfig,\n  useProductInventoryHostsQuery\n} from '../productView/productViewContext';\nimport {\n  RHSM_API_QUERY_INVENTORY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_INVENTORY_SORT_TYPES as SORT_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\nimport { inventoryCardHelpers } from '../inventoryCard/inventoryCardHelpers';\nimport { tableHelpers } from '../table/table';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldSelectCategory';\nimport { InventoryGuests } from '../inventoryGuests/inventoryGuests'; // eslint-disable-line\n\n/**\n * @memberof InventoryCardInstances\n * @module InventoryCardInstancesContext\n */\n\n/**\n * Parse filters settings for context.\n *\n * @param {object} options\n * @param {boolean} options.isDisabled\n * @param {Function} options.useProduct\n * @param {Function} options.useProductConfig\n * @returns {{settings: {}, columnCountAndWidths: {count: number, widths: Array}, filters: Array}}\n */\nconst useParseInstancesFiltersSettings = ({\n  isDisabled = false,\n  useProduct: useAliasProduct = useProduct,\n  useProductConfig: useAliasProductConfig = useProductInventoryHostsConfig,\n  useProductGuestsConfig: useAliasProductGuestsConfig = useProductInventoryGuestsConfig\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const { filters = [], settings = {} } = useAliasProductConfig();\n  const { filters: guestFilters = [] } = useAliasProductGuestsConfig();\n\n  return useMemo(() => {\n    if (isDisabled) {\n      return undefined;\n    }\n    return inventoryCardHelpers.normalizeInventorySettings({\n      filters,\n      guestFilters,\n      settings,\n      productId\n    });\n  }, [filters, guestFilters, isDisabled, settings, productId]);\n};\n\n/**\n * Parse selector response for consuming components.\n *\n * @param {object} options\n * @param {string} options.storeRef\n * @param {Function} options.useParseFiltersSettings\n * @param {Function} options.useProduct\n * @param {Function} options.useProductInventoryQuery\n * @param {Function} options.useSelectorsResponse\n * @param {Function} options.useSession\n * @returns {{pending: boolean, fulfilled: boolean, error: boolean, resultsColumnCountAndWidths: {count: number,\n *     widths: Array}, dataSetColumnHeaders: Array, resultsPerPage: number, resultsOffset: number, dataSetRows: Array,\n *     resultsCount: number}}\n */\nconst useSelectorInstances = ({\n  storeRef = 'instancesInventory',\n  useParseFiltersSettings: useAliasParseFiltersSettings = useParseInstancesFiltersSettings,\n  useProduct: useAliasProduct = useProduct,\n  useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventoryHostsQuery,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse,\n  useSession: useAliasSession = useSession\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const session = useAliasSession();\n  const query = useAliasProductInventoryQuery();\n  const { columnCountAndWidths, filters, isGuestFiltersDisabled, settings } = useAliasParseFiltersSettings();\n  const response = useAliasSelectorsResponse(({ inventory }) => inventory?.[storeRef]?.[productId]);\n\n  const { pending, cancelled, data, ...restResponse } = response;\n  const updatedPending = pending || cancelled || false;\n  let parsedData;\n\n  if (response?.fulfilled) {\n    const updatedData = (data?.length === 1 && data[0]) || data || {};\n    parsedData = inventoryCardHelpers.parseInventoryResponse({\n      data: updatedData,\n      filters,\n      GuestComponent: InventoryGuests,\n      isGuestFiltersDisabled,\n      query,\n      session,\n      settings\n    });\n  }\n\n  return {\n    ...restResponse,\n    pending: updatedPending,\n    resultsColumnCountAndWidths: columnCountAndWidths,\n    ...parsedData\n  };\n};\n\n/**\n * Combine service call, Redux, and inventory selector response.\n *\n * @param {object} options\n * @param {boolean} options.isDisabled\n * @param {Function} options.getInventory\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useProductInventoryQuery\n * @param {Function} options.useSelector\n * @returns {{pending: boolean, fulfilled: boolean, error: boolean, resultsColumnCountAndWidths: {count: number,\n *     widths: Array}, dataSetColumnHeaders: Array, resultsPerPage: number, resultsOffset: number, dataSetRows: Array,\n *     resultsCount: number}}\n */\nconst useGetInstancesInventory = ({\n  isDisabled = false,\n  getInventory = reduxActions.rhsm.getInstancesInventory,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventoryHostsQuery,\n  useSelector: useAliasSelector = useSelectorInstances\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductInventoryQuery();\n  const dispatch = useAliasDispatch();\n  const response = useAliasSelector();\n\n  useShallowCompareEffect(() => {\n    if (!isDisabled) {\n      getInventory(productId, query)(dispatch);\n    }\n  }, [isDisabled, productId, query]);\n\n  return response;\n};\n\n/**\n * Return a component list for a configurable inventoryCard action toolbar.\n * Allow the \"content\" prop to receive inventory data for display via callback.\n *\n * @param {object} options\n * @param {Array} options.categoryOptions\n * @param {Function} options.useSelector\n * @param {Function} options.useProductConfig\n * @returns {Array}\n */\nconst useInventoryCardActionsInstances = ({\n  categoryOptions = toolbarFieldOptions,\n  useSelector: useAliasSelector = useSelectorInstances,\n  useProductConfig: useAliasProductConfig = useProductInventoryHostsConfig\n} = {}) => {\n  const results = useAliasSelector();\n  const { pending, resultsCount } = results;\n  const { settings = {} } = useAliasProductConfig();\n  const { actions } = settings;\n\n  return useMemo(\n    () =>\n      actions?.map(({ id, content, ...actionProps }) => {\n        const option = categoryOptions.find(({ value: categoryOptionValue }) => id === categoryOptionValue);\n        const { component: OptionComponent } = option || {};\n\n        return (\n          (OptionComponent && (\n            <ToolbarItem key={`option-${id}`}>\n              <OptionComponent isFilter={false} {...actionProps} />\n            </ToolbarItem>\n          )) ||\n          (content && !pending && resultsCount && (\n            <ToolbarItem key={id || helpers.generateId()}>\n              {typeof content === 'function' ? content({ data: results }) : content}\n            </ToolbarItem>\n          )) ||\n          null\n        );\n      }),\n    [actions, categoryOptions, results, resultsCount, pending]\n  );\n};\n\n/**\n * An onPage callback for inventory.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnPageInstances = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for inventory.\n   *\n   * @event onPage\n   * @param {object} params\n   * @param {number} params.offset\n   * @param {number} params.perPage\n   * @returns {void}\n   */\n  return ({ offset, perPage }) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.OFFSET],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.OFFSET]: offset\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.LIMIT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.LIMIT]: perPage\n      }\n    ]);\n  };\n};\n\n/**\n * An onColumnSort callback for inventory.\n *\n * @param {object} options\n * @param {object} options.sortColumns\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnColumnSortInstances = ({\n  sortColumns = SORT_TYPES,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for inventory.\n   *\n   * @event onColumnSort\n   * @param {object} params\n   * @param {string} params.direction\n   * @param {object} params.data\n   * @returns {void}\n   */\n  return ({ direction, data = {} }) => {\n    const { metric: id } = data;\n    const updatedSortColumn = Object.values(sortColumns).find(value => value === id);\n    let updatedDirection;\n\n    if (!updatedSortColumn) {\n      if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n        console.warn(`Sorting can only be performed on select fields, confirm field ${id} is allowed.`);\n      }\n      return;\n    }\n\n    switch (direction) {\n      case tableHelpers.SortByDirectionVariant.desc:\n        updatedDirection = SORT_DIRECTION_TYPES.DESCENDING;\n        break;\n      default:\n        updatedDirection = SORT_DIRECTION_TYPES.ASCENDING;\n        break;\n    }\n\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.DIRECTION],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.DIRECTION]: updatedDirection\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.SORT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.SORT]: updatedSortColumn\n      }\n    ]);\n  };\n};\n\nconst context = {\n  useGetInstancesInventory,\n  useInventoryCardActionsInstances,\n  useOnPageInstances,\n  useOnColumnSortInstances,\n  useParseInstancesFiltersSettings,\n  useSelectorInstances\n};\n\nexport {\n  context as default,\n  context,\n  useGetInstancesInventory,\n  useInventoryCardActionsInstances,\n  useOnPageInstances,\n  useOnColumnSortInstances,\n  useParseInstancesFiltersSettings,\n  useSelectorInstances\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Loader } from '../loader/loader';\nimport { Table, TableVariant } from '../table/table';\nimport { useGetGuestsInventory, useOnScroll } from './inventoryGuestsContext'; // eslint-disable-line\n\n/**\n * Guests inventory table wrapper.\n *\n * @memberof Components\n * @module InventoryGuests\n * @property {module} InventoryGuestsContext\n */\n\n/**\n * A system inventory guests component.\n *\n * @param {object} props\n * @param {number} props.defaultPerPage\n * @param {string} props.id\n * @param {number} props.numberOfGuests\n * @param {Function} props.useGetInventory\n * @param {Function} props.useOnScroll\n * @fires onScroll\n * @returns {React.ReactNode}\n */\nconst InventoryGuests = ({\n  defaultPerPage,\n  id,\n  numberOfGuests,\n  useGetInventory: useAliasGetInventory,\n  useOnScroll: useAliasOnScroll\n}) => {\n  const {\n    pending,\n    dataSetColumnHeaders = [],\n    dataSetRows = [],\n    resultsColumnCountAndWidths = { count: 1, widths: [] },\n    resultsOffset\n  } = useAliasGetInventory(id);\n\n  const onScroll = useAliasOnScroll({ id, numberOfGuests });\n\n  // ToDo: Review having the height be a calc value\n  // Include the table header\n  let updatedHeight = (numberOfGuests + 1) * 42;\n  updatedHeight = (updatedHeight < 275 && updatedHeight) || 275;\n\n  return (\n    <div className=\"fadein\">\n      <div className=\"curiosity-table-scroll\" style={{ height: `${updatedHeight}px` }}>\n        <div\n          className={`curiosity-table-scroll-list${(updatedHeight < 275 && '__no-scroll') || ''}`}\n          onScroll={onScroll}\n        >\n          {pending && (\n            <div className=\"curiosity-table-scroll-loader__custom\">\n              <Loader\n                variant=\"table\"\n                tableProps={{\n                  borders: false,\n                  className: 'curiosity-guests-list',\n                  colCount: resultsColumnCountAndWidths.count,\n                  colWidth: resultsColumnCountAndWidths.widths,\n                  rowCount: (resultsOffset === 0 && numberOfGuests < defaultPerPage && numberOfGuests) || 1,\n                  variant: TableVariant.compact,\n                  isHeader: false\n                }}\n              />\n            </div>\n          )}\n          {(dataSetRows?.length && (\n            <Table\n              isBorders={false}\n              isHeader\n              className=\"curiosity-guests-list\"\n              columnHeaders={dataSetColumnHeaders}\n              rows={dataSetRows}\n            />\n          )) ||\n            null}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{numberOfGuests: number, id: string, useOnScroll: Function, useGetInventory: Function,\n *     defaultPerPage: number}}\n */\nInventoryGuests.propTypes = {\n  defaultPerPage: PropTypes.number,\n  id: PropTypes.string.isRequired,\n  numberOfGuests: PropTypes.number.isRequired,\n  useGetInventory: PropTypes.func,\n  useOnScroll: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnScroll: Function, useGetInventory: Function, defaultPerPage: number}}\n */\nInventoryGuests.defaultProps = {\n  defaultPerPage: 5,\n  useGetInventory: useGetGuestsInventory,\n  useOnScroll\n};\n\nexport { InventoryGuests as default, InventoryGuests };\n","import { useUnmount, useShallowCompareEffect } from 'react-use';\nimport { reduxActions, reduxTypes, storeHooks } from '../../redux';\nimport { useProductInventoryGuestsQuery, useProductInventoryGuestsConfig } from '../productView/productViewContext';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { useSession } from '../authentication/authenticationContext';\nimport { useParseInstancesFiltersSettings } from '../inventoryCardInstances/inventoryCardInstancesContext'; // eslint-disable-line\nimport { inventoryCardHelpers } from '../inventoryCard/inventoryCardHelpers';\n\n/**\n * @memberof InventoryGuests\n * @module InventoryGuestsContext\n */\n\n/**\n * Parse filters settings for context.\n * See @module InventoryCardInstancesContext\n *\n * @param {object} options\n * @param {boolean} options.isDisabled\n * @param {Function} options.useParseFiltersSettings\n * @param {Function} options.useProductConfig\n * @returns {{settings: {}, columnCountAndWidths: {count: number, widths: Array}, filters: Array}}\n */\nconst useParseGuestsFiltersSettings = ({\n  isDisabled = false,\n  useParseFiltersSettings: useAliasParseFiltersSettings = useParseInstancesFiltersSettings,\n  useProductConfig: useAliasProductConfig = useProductInventoryGuestsConfig\n} = {}) => useAliasParseFiltersSettings({ isDisabled, useProductConfig: useAliasProductConfig });\n\n/**\n * Parse selector response for consuming components.\n *\n * @param {string} id\n * @param {object} options\n * @param {string} options.storeRef\n * @param {Function} options.useParseFiltersSettings\n * @param {Function} options.useProductInventoryQuery\n * @param {Function} options.useSelectorsResponse\n * @param {Function} options.useSession\n * @returns {{pending: boolean, fulfilled: boolean, error: boolean, resultsColumnCountAndWidths: {count: number,\n *     widths: Array}, dataSetColumnHeaders: Array, resultsPerPage: number, resultsOffset: number, dataSetRows: Array,\n *     resultsCount: number}}\n */\nconst useSelectorGuests = (\n  id,\n  {\n    storeRef = 'instancesGuests',\n    useParseFiltersSettings: useAliasParseFiltersSettings = useParseGuestsFiltersSettings,\n    useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventoryGuestsQuery,\n    useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse,\n    useSession: useAliasSession = useSession\n  } = {}\n) => {\n  const session = useAliasSession();\n  const query = useAliasProductInventoryQuery({ options: { overrideId: id } });\n  const { columnCountAndWidths, filters, settings } = useAliasParseFiltersSettings();\n  const response = useAliasSelectorsResponse(({ inventory }) => inventory?.[storeRef]?.[id]);\n  const { pending, cancelled, data, ...restResponse } = response;\n  const updatedPending = pending || cancelled || false;\n  let parsedData;\n\n  if (response?.fulfilled) {\n    const updatedData = (data?.length === 1 && data[0]) || data || {};\n    parsedData = inventoryCardHelpers.parseInventoryResponse({\n      data: updatedData,\n      filters,\n      query,\n      session,\n      settings\n    });\n  }\n\n  return {\n    ...restResponse,\n    pending: updatedPending,\n    resultsColumnCountAndWidths: columnCountAndWidths,\n    ...parsedData\n  };\n};\n\n/**\n * Combine service call, Redux, and inventory selector response.\n *\n * @param {string} id\n * @param {object} options\n * @param {Function} options.getInventory\n * @param {Function} options.useDispatch\n * @param {Function} options.useProductInventoryQuery\n * @param {Function} options.useSelector\n * @returns {{pending: boolean, fulfilled: boolean, error: boolean, resultsColumnCountAndWidths: {count: number,\n *     widths: Array}, dataSetColumnHeaders: Array, resultsPerPage: number, resultsOffset: number, dataSetRows: Array,\n *     resultsCount: number}}\n */\nconst useGetGuestsInventory = (\n  id,\n  {\n    getInventory = reduxActions.rhsm.getInstancesInventoryGuests,\n    useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n    useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventoryGuestsQuery,\n    useSelector: useAliasSelector = useSelectorGuests\n  } = {}\n) => {\n  const query = useAliasProductInventoryQuery({ options: { overrideId: id } });\n  const dispatch = useAliasDispatch();\n  const response = useAliasSelector(id);\n\n  useShallowCompareEffect(() => {\n    getInventory(id, query)(dispatch);\n  }, [id, query]);\n\n  return response;\n};\n\n/**\n * Use paging as onScroll event for guests inventory.\n *\n * @param {object} params\n * @param {string} params.id\n * @param {number} params.numberOfGuests\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useSelector\n * @param {Function} options.useProductInventoryQuery\n * @returns {Function}\n */\nconst useOnScroll = (\n  { id, numberOfGuests } = {},\n  {\n    useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n    useSelector: useAliasSelector = useSelectorGuests,\n    useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventoryGuestsQuery\n  } = {}\n) => {\n  const dispatch = useAliasDispatch();\n  const { pending } = useAliasSelector(id);\n  const { [RHSM_API_QUERY_SET_TYPES.LIMIT]: limit, [RHSM_API_QUERY_SET_TYPES.OFFSET]: currentPage } =\n    useAliasProductInventoryQuery({ options: { overrideId: id } });\n\n  /**\n   * Reset paging in scenarios where inventory is filtered, or guests is collapsed.\n   */\n  useUnmount(() => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_GUESTS_LIST,\n        viewId: id\n      },\n      {\n        type: reduxTypes.inventory.CLEAR_INVENTORY_GUESTS,\n        id\n      }\n    ]);\n  });\n\n  /**\n   * On scroll, dispatch type.\n   *\n   * @event onScroll\n   * @param {object} event\n   * @returns {void}\n   */\n  return event => {\n    const { target } = event;\n    const bottom = target.scrollHeight - target.scrollTop === target.clientHeight;\n\n    if (numberOfGuests > currentPage + limit && bottom && !pending) {\n      dispatch([\n        {\n          type: reduxTypes.query.SET_QUERY_RHSM_GUESTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.OFFSET],\n          viewId: id,\n          [RHSM_API_QUERY_SET_TYPES.OFFSET]: currentPage + limit\n        },\n        {\n          type: reduxTypes.query.SET_QUERY_RHSM_GUESTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.LIMIT],\n          viewId: id,\n          [RHSM_API_QUERY_SET_TYPES.LIMIT]: limit\n        }\n      ]);\n    }\n  };\n};\n\nconst context = {\n  useGetGuestsInventory,\n  useOnScroll\n};\n\nexport { context as default, context, useGetGuestsInventory, useOnScroll };\n"],"names":["normalizeInventorySettings","filters","guestFilters","settings","productId","arguments","length","undefined","updatedFilters","columnCountAndWidths","count","widths","forEach","_ref","updatedHeader","updatedCell","updatedWidth","metric","header","cell","width","rest","translate","context","_ref2","displayValue","Number","isNaN","push","label","isGuestFiltersDisabled","parseInventoryResponse","data","GuestComponent","query","session","listData","meta","resultsCount","RHSM_API_RESPONSE_META_TYPES","RHSM_API_QUERY_SET_TYPES","resultsOffset","resultsPerPage","sortColumn","sortDirection","dataSetColumnHeaders","dataSetRows","columnData","rowData","dataSetRow","expandedContent","_ref3","_columnData$metric","updatedLabel","dataLabel","content","guestContent","guestContentResults","id","guestId","numberOfGuests","React","key","concat","cells","row","_ref4","updatedRest","isSort","isSortActive","isWrap","modifier","tableHelpers","inventoryCardHelpers","useParseInstancesFiltersSettings","isDisabled","useProduct","useAliasProduct","useProductConfig","useAliasProductConfig","useProductInventoryHostsConfig","useProductGuestsConfig","useAliasProductGuestsConfig","useProductInventoryGuestsConfig","useMemo","useSelectorInstances","storeRef","useParseFiltersSettings","useAliasParseFiltersSettings","useProductInventoryQuery","useAliasProductInventoryQuery","useProductInventoryHostsQuery","useSelectorsResponse","useAliasSelectorsResponse","storeHooks","useSession","useAliasSession","response","_inventory$storeRef","inventory","pending","cancelled","restResponse","updatedPending","parsedData","fulfilled","updatedData","InventoryGuests","resultsColumnCountAndWidths","useGetInstancesInventory","getInventory","reduxActions","useDispatch","useAliasDispatch","useSelector","useAliasSelector","dispatch","useShallowCompareEffect","useInventoryCardActionsInstances","categoryOptions","toolbarFieldOptions","results","actions","map","actionProps","option","find","value","categoryOptionValue","component","OptionComponent","ToolbarItem","_extends","isFilter","helpers","useOnPageInstances","offset","perPage","type","reduxTypes","viewId","useOnColumnSortInstances","sortColumns","SORT_TYPES","_ref5","direction","updatedSortColumn","Object","values","updatedDirection","SORT_DIRECTION_TYPES","console","warn","defaultPerPage","useGetInventory","useAliasGetInventory","useOnScroll","useAliasOnScroll","onScroll","updatedHeight","className","style","height","Loader","variant","tableProps","borders","colCount","colWidth","rowCount","TableVariant","isHeader","Table","isBorders","columnHeaders","rows","propTypes","PropTypes","defaultProps","useGetGuestsInventory","useParseGuestsFiltersSettings","useSelectorGuests","useProductInventoryGuestsQuery","options","overrideId","limit","currentPage","useUnmount","event","target","bottom","scrollHeight","scrollTop","clientHeight"],"sourceRoot":""}