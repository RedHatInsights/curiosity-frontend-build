{"version":3,"file":"js/136.6244cfa2ed4fad7b2e4d.js","mappings":"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","sources":["webpack:///./src/components/toolbar/toolbarFieldSelectCategory.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport { useShallowCompareEffect } from 'react-use';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductToolbarConfig } from '../productView/productViewContext';\nimport { Select } from '../form/select';\nimport { RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\nimport { ToolbarFieldGranularity, toolbarFieldOptions as granularityOptions } from './toolbarFieldGranularity';\nimport { ToolbarFieldRangedMonthly, toolbarFieldOptions as rangedMonthlyOptions } from './toolbarFieldRangedMonthly';\nimport { ToolbarFieldSla, toolbarFieldOptions as slaOptions } from './toolbarFieldSla';\nimport { ToolbarFieldUom, toolbarFieldOptions as uomOptions } from './toolbarFieldUom';\nimport { ToolbarFieldUsage, toolbarFieldOptions as usageOptions } from './toolbarFieldUsage';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = [\n  {\n    title: translate('curiosity-toolbar.category', { context: RHSM_API_QUERY_TYPES.GRANULARITY }),\n    value: RHSM_API_QUERY_TYPES.GRANULARITY,\n    component: <ToolbarFieldGranularity key=\"selectCategory_granularity\" isFilter />,\n    options: granularityOptions,\n    isClearable: false\n  },\n  {\n    title: translate('curiosity-toolbar.category', { context: 'rangedMonthly' }),\n    value: 'rangedMonthly',\n    component: <ToolbarFieldRangedMonthly key=\"selectCategory_rangedMonthly\" isFilter />,\n    options: rangedMonthlyOptions,\n    isClearable: false\n  },\n  {\n    title: translate('curiosity-toolbar.category', { context: RHSM_API_QUERY_TYPES.UOM }),\n    value: RHSM_API_QUERY_TYPES.UOM,\n    component: <ToolbarFieldUom key=\"selectCategory_uom\" isFilter />,\n    options: uomOptions,\n    isClearable: false\n  },\n  {\n    title: translate('curiosity-toolbar.category', { context: RHSM_API_QUERY_TYPES.SLA }),\n    value: RHSM_API_QUERY_TYPES.SLA,\n    component: <ToolbarFieldSla key=\"selectCategory_sla\" isFilter />,\n    options: slaOptions,\n    isClearable: true\n  },\n  {\n    title: translate('curiosity-toolbar.category', { context: RHSM_API_QUERY_TYPES.USAGE }),\n    value: RHSM_API_QUERY_TYPES.USAGE,\n    component: <ToolbarFieldUsage key=\"selectCategory_usage\" isFilter />,\n    options: usageOptions,\n    isClearable: true\n  }\n].map(option => ({\n  ...option,\n  selected: false\n}));\n\n/**\n * On select update category.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.toolbar.SET_FILTER_TYPE,\n        viewId,\n        currentFilter: value\n      }\n    ]);\n  };\n};\n\n/**\n * Return filtered category options, current, and initial value.\n *\n * @param {object} options\n * @param {Array} options.categoryOptions\n * @param {Function} options.useProduct\n * @param {Function} options.useProductToolbarConfig\n * @param {Function} options.useSelector\n * @returns {object}\n */\nconst useSelectCategoryOptions = ({\n  categoryOptions = toolbarFieldOptions,\n  useProduct: useAliasProduct = useProduct,\n  useProductToolbarConfig: useAliasProductToolbarConfig = useProductToolbarConfig,\n  useSelector: useAliasSelector = storeHooks.reactRedux.useSelector\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const { currentFilter: updatedValue } = useAliasSelector(({ toolbar }) => toolbar.filters?.[viewId], {});\n  const { filters = [] } = useAliasProductToolbarConfig();\n\n  let initialValue;\n\n  const updatedOptions = filters.map(({ id, selected }) => {\n    const option = categoryOptions.find(({ value }) => id === value);\n\n    if (updatedValue === undefined && selected) {\n      initialValue = option.value;\n    }\n\n    return {\n      ...option,\n      selected: (updatedValue === undefined && selected) || updatedValue === option.value\n    };\n  });\n\n  return {\n    currentCategory: updatedValue,\n    initialCategory: initialValue,\n    options: updatedOptions\n  };\n};\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useSelectCategoryOptions\n * @returns {Node}\n */\nconst ToolbarFieldSelectCategory = ({\n  t,\n  useOnSelect: useAliasOnSelect,\n  useSelectCategoryOptions: useAliasSelectCategoryOptions\n}) => {\n  const { currentCategory: updatedValue, initialCategory: initialValue, options } = useAliasSelectCategoryOptions();\n  const onSelect = useAliasOnSelect();\n\n  useShallowCompareEffect(() => {\n    if (initialValue) {\n      onSelect({ value: initialValue });\n    }\n  }, [initialValue, onSelect]);\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder_filter')}\n      onSelect={onSelect}\n      options={options}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder_filter')}\n      toggleIcon={<FilterIcon />}\n      data-test=\"toolbarFieldCategory\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, useSelectCategoryOptions: Function}}\n */\nToolbarFieldSelectCategory.propTypes = {\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useSelectCategoryOptions: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, useSelectCategoryOptions: Function}}\n */\nToolbarFieldSelectCategory.defaultProps = {\n  t: translate,\n  useOnSelect,\n  useSelectCategoryOptions\n};\n\nexport {\n  ToolbarFieldSelectCategory as default,\n  ToolbarFieldSelectCategory,\n  toolbarFieldOptions,\n  useOnSelect,\n  useSelectCategoryOptions\n};\n"],"names":["toolbarFieldOptions","title","translate","context","RHSM_API_QUERY_TYPES","value","component","ToolbarFieldGranularity","key","isFilter","options","granularityOptions","isClearable","ToolbarFieldRangedMonthly","rangedMonthlyOptions","ToolbarFieldUom","uomOptions","ToolbarFieldSla","slaOptions","ToolbarFieldUsage","usageOptions","map","option","selected","useOnSelect","useDispatch","useAliasDispatch","storeHooks","useProduct","useAliasProduct","viewId","dispatch","type","reduxTypes","currentFilter","useSelectCategoryOptions","initialValue","categoryOptions","useProductToolbarConfig","useAliasProductToolbarConfig","useSelector","useAliasSelector","toolbar","filters","updatedValue","updatedOptions","id","find","undefined","currentCategory","initialCategory","ToolbarFieldSelectCategory","t","useAliasOnSelect","useAliasSelectCategoryOptions","onSelect","useShallowCompareEffect","Select","selectedOptions","placeholder","toggleIcon","FilterIcon","defaultProps"],"sourceRoot":""}