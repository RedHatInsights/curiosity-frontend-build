{"version":3,"file":"js/3557.d11ae1a26c4021530ba6.js","mappings":"sTAqBMA,EAAiB,SAAHC,GAGd,IAFeC,EAAsBD,EAAzCE,kBACyBC,EAA4BH,EAArDI,wBAEMC,EAAiBJ,IACjBK,EAAuBH,IAE7B,OAAIE,SAAAA,EAAgBE,OAEhBC,IAAAA,cAAA,OAAKC,UAAU,6BACbD,IAAAA,cAACE,EAAAA,WAAU,CAACC,cAAY,GACrBN,aAAc,EAAdA,EAAgBO,KAAI,SAAAC,GAAyD,IAAtDC,EAAED,EAAFC,GAAIC,EAAOF,EAAPE,QAASC,EAAKH,EAALG,MAAKC,EAAAJ,EAAEK,QAAAA,OAAO,IAAAD,EAAGE,EAAAA,aAAAA,KAAiBF,EAC/DG,EAAcZ,IAAAA,cAACa,EAAAA,uBAAsB,CAACC,QAAS,kBAAMhB,EAAqBQ,GAAME,EAAM,IAE5F,OACER,IAAAA,cAACe,EAAAA,MAAK,CAACH,YAAaA,EAAaI,IAAKV,GAAME,EAAOA,MAAOA,EAAOE,QAASA,EAASO,UAAQ,GACxFV,EAGP,MAMD,IACT,EAiBAhB,EAAe2B,aAAe,CAC5BxB,kBAAAA,EAAAA,kBACAE,wBAAAA,EAAAA,wB,2RChDIF,EAAoB,WAGf,IAAAF,EAAA2B,UAAApB,OAAA,QAAAqB,IAAAD,UAAA,GAAAA,UAAA,GAAP,CAAC,EAACE,EAAA7B,EAFJ8B,WAAYC,OAAe,IAAAF,EAAGC,EAAAA,WAAUD,EAAAG,EAAAhC,EACxCiC,YAAaC,OAAgB,IAAAF,EAAGG,EAAAA,GAAAA,WAAAA,YAAiCH,EAEzDI,EAAcL,IAAdK,UACR,OAAOF,GAAiB,SAAArB,GAAA,IAAAwB,EAAGC,EAAQzB,EAARyB,SAAQ,OAAOA,SAAwB,QAAhBD,EAARC,EAAUjC,sBAAc,IAAAgC,OAAhB,EAARA,EAA2BD,EAAU,GAAE,GACnF,EAWMhC,EAA0B,WAIrB,IAAAmC,EAAAZ,UAAApB,OAAA,QAAAqB,IAAAD,UAAA,GAAAA,UAAA,GAAP,CAAC,EAACa,EAAAD,EAHJE,YAAaC,OAAgB,IAAAF,EAAGL,EAAAA,GAAAA,WAAAA,YAAiCK,EAAAG,EAAAJ,EACjET,WAAYC,OAAe,IAAAY,EAAGb,EAAAA,WAAUa,EAAAC,EAAAL,EACxCrC,kBAAmBD,OAAsB,IAAA2C,EAAG1C,EAAiB0C,EAEvDC,EAAWH,IACTN,EAAcL,IAAdK,UACF/B,EAAiBJ,IAQvB,OAAO6C,EAAAA,EAAAA,cACL,SAAAC,GACE,GAAIX,GAAaY,MAAMC,QAAQ5C,IAAmBA,EAAeE,OAAQ,CACvE,IAAM2C,EAAmB7C,EAAe8C,QAAO,SAAAC,GAAA,IAAGtC,EAAEsC,EAAFtC,GAAIE,EAAKoC,EAALpC,MAAK,OAAOF,IAAOiC,GAAW/B,IAAU+B,CAAO,IAErGF,EAAS,CACPQ,KAAMC,EAAAA,GAAAA,QAAAA,oBACNC,OAAQnB,EACR/B,eAAgB6C,GAAoB,IAExC,CACF,GACA,CAAC7C,EAAgBwC,EAAUT,GAE/B,EAWMoB,EAAuB,WAIlB,IAAAC,EAAA9B,UAAApB,OAAA,QAAAqB,IAAAD,UAAA,GAAAA,UAAA,GAAP,CAAC,EAAC+B,EAAAD,EAHJhB,YAAaC,OAAgB,IAAAgB,EAAGvB,EAAAA,GAAAA,WAAAA,YAAiCuB,EAAAC,EAAAF,EACjE3B,WAAYC,OAAe,IAAA4B,EAAG7B,EAAAA,WAAU6B,EAAAC,EAAAH,EACxCvD,kBAAmBD,OAAsB,IAAA2D,EAAG1D,EAAiB0D,EAEvDf,EAAWH,IACTN,EAAcL,IAAdK,UACF/B,EAAiBJ,IAQvB,OAAO6C,EAAAA,EAAAA,cACL,SAAAR,GACE,GAAIF,EAAW,CACb,IAAMyB,EAAmBb,MAAMC,QAAQX,IAAaA,GAAa,CAACA,GAElEO,EAAS,CACPQ,KAAMC,EAAAA,GAAAA,QAAAA,oBACNC,OAAQnB,EACR/B,eAAgB,GAAFyD,QAAAC,EAAAA,EAAAA,GACR1D,GAAkB,KAAE0D,EAAAA,EAAAA,GACrBF,EACAjD,KAAI,SAAAoD,GACH,OAAIA,SAAAA,EAAOlD,IAAMkD,SAAAA,EAAOhD,OAASgD,SAAAA,EAAOjD,SAAWiD,SAAAA,EAAO9C,QACjD8C,EAGY,iBAAVA,GAAuC,iBAAVA,EAC/B,CACLlD,GAAIkD,EACJhD,MAAOgD,QAHX,CAQF,IACCb,QAAO,SAAAa,GAAK,YAAcpC,IAAVoC,CAAmB,OAG5C,MAAWC,EAAAA,EAAAA,UACTC,QAAQC,KACN,gKAGN,GACA,CAAC9D,EAAgBwC,EAAUT,GAE/B,EAEMgC,EAAU,CACdlE,kBAAAA,EACAE,wBAAAA,EACAoD,qBAAAA,E,wKCrGIa,EAAY,SAAHrE,GAA8E,IAAxEsE,EAAUtE,EAAVsE,WACXC,GAAoBC,EADwDxE,EAArDyE,2BACvBF,gBAER,OAAID,GAAeC,UAAAA,EAAiBhE,OAC3B,KAGFgE,aAAe,EAAfA,EAAiB3D,KAAI,SAAA8D,GAAa,IAAAC,EAAAC,EAAAC,EAAA,OACvCrE,IAAAA,cAACsE,EAAAA,iBAAAA,SAAyB,CAACtD,IAAG,aAAAsC,OAAeY,SAAuB,QAAVC,EAAbD,EAAeK,gBAAQ,IAAAJ,GAAS,QAATC,EAAvBD,EAAyBK,eAAO,IAAAJ,GAAK,QAALC,EAAhCD,EAAmC,UAAE,IAAAC,OAAxB,EAAbA,EAAuC/D,IAAMkD,MAAOU,GAC/FlE,IAAAA,cAACyE,EAAAA,sBAAqB,KACpBzE,IAAAA,cAAC0E,EAAAA,eAAc,OAES,GAEhC,EAiBAb,EAAU3C,aAAe,CACvB4C,WAAYL,EAAAA,GAAAA,kBACZQ,wBAAAA,EAAAA,wB,mPCrCIQ,EAAwB,SAAHjF,GAKrB,IAAAmF,EAJJC,EAAQpF,EAARoF,SACqBC,EAAwBrF,EAA7CsF,oBACoBC,EAAuBvF,EAA3CwF,mBAC2BC,EAA8BzF,EAAzD0F,0BAEoDC,EAA1BN,IAAlBN,SAAAA,OAAQ,IAAAY,EAAG,CAAC,EAACA,EAC0BC,EAAcH,IAApDI,EAAAA,GAAAA,YACTC,EAAqDP,IAA7CQ,EAAOD,EAAPC,QAASC,EAAKF,EAALE,MAAOC,EAASH,EAATG,UAASC,EAAAJ,EAAEK,SACnCtF,QAD2C,IAAAqF,EAAG,GAAEA,GACmC,IAAM,CAAC,EAACE,EAAAvF,EAAnFwF,KAAAA,OAAI,IAAAD,EAAG,GAAEA,EAAME,EAAYzF,EAAhBC,GAA0ByF,EAAa1F,EAArB2F,OAAMC,EAAA5F,EAAiB6F,KAAAA,OAAI,IAAAD,EAAG,CAAC,EAACA,EACrElE,EAA+D8D,EAAKA,EAAK9F,OAAS,IAAM,CAAC,EAA3EoG,EAAQpE,EAAdqE,KAAyBC,EAAWtE,EAApBuE,QAAyBC,EAASxE,EAAZyE,EAE9C5D,EAIIiD,EAAKY,MAAK,SAAAxD,GAAgB,OAAyB,IAAzBA,EAAbyD,aAA0C,KAAK,CAAC,EAHzDC,EAAW/D,EAAjBwD,KACSQ,EAAchE,EAAvB0D,QACGO,EAAYjE,EAAf4D,EAGwBM,EAAsFZ,EAAxGa,iBAAoDC,EAAoDd,EAAzEe,oBAAwDC,EAAiBhB,EAApCiB,kBAE5EC,EACEC,EAAAA,oBAAAA,MACE,SAAAC,GAAM,OAAIA,EAAO9G,QAAU4E,GAAakC,EAAO9D,MAAM4B,UAAUmC,gBAAkBnC,CAAS,KACvF,CAAC,EAHOoC,EAAaJ,EAApB5G,MAAsBiH,EAASL,EAATK,UAKxBC,EAAYD,EAAYd,EAAcR,EACtCwB,EAAeF,EAAYb,EAAiBP,EAC5CuB,EAAaH,EAAYZ,EAAeN,EAE9C,GAAIhC,SAAAA,EAAUsD,iBAAVtD,MAA6BA,GAAe,QAAPI,EAARJ,EAAUuD,aAAK,IAAAnD,GAAfA,EAAiB5E,OAAQ,KAAAgI,EAAAC,EAAAC,EAClDC,EAA0BzE,EAAAA,GAAAA,iBAAyB,CACvD0E,QAASrC,EACT4B,UAAAA,EACAC,aAAAA,EACAC,WAAAA,EACAQ,SAAUrC,EACVsC,eAAa9E,EAAAA,EAAAA,GAAMgB,EAAS+D,aAC5BxB,YAAAA,EACAE,eAAAA,EACAE,aAAAA,EACAqB,cAAef,IAGjB,OACExH,IAAAA,cAAA,OACE,iCAAAsD,OAAgCiB,SAAqB,QAAbwD,EAARxD,EAAU+D,mBAAW,IAAAP,GAAuC,QAAvCC,EAArBD,EAAuB3H,KAAI,SAAAgI,GAAQ,OAAII,IAAWJ,EAAS,WAAC,IAAAJ,OAApD,EAARA,EAA8DS,KAAK,MACnG,iBAAgBC,KAAKC,UAAUT,GAC/BjI,UAAU,iCAEVD,IAAAA,cAAA,WACEA,IAAAA,cAAA,OAAKC,UAAU,wCACZsE,SAAe,QAAP0D,EAAR1D,EAAUuD,aAAK,IAAAG,OAAP,EAARA,EAAiB7H,KAAI,SAAAwI,EAAgCC,GAAK,IAAlC7H,EAAG4H,EAAH5H,IAAK8H,EAAMF,EAANE,OAAQC,EAAIH,EAAJG,KAAMC,EAAMJ,EAANI,OAAM,OAChDhJ,IAAAA,cAACiJ,EAAAA,KAAI,CACHjI,IAAKA,GAAOyC,EAAAA,GAAAA,aAAqB,CAAEyE,wBAAAA,EAAyBW,MAAAA,IAC5DK,SAAO,EACP,qCAAA5F,OAAoCuF,GACpC5I,UAAS,6CAAAqD,OAAgDkC,EAAS,OAAW,KAE7ExF,IAAAA,cAACmJ,EAAAA,WAAU,KACTnJ,IAAAA,cAACoJ,EAAAA,UAAS,KACRpJ,IAAAA,cAACqJ,EAAAA,MAAK,CAACC,aAAa,KAAKC,KAAK,MAC3BhE,GAAWvF,IAAAA,cAACwJ,EAAAA,OAAM,CAAC9I,QAAQ,WAAW+I,cAAe,CAAEF,KAAMG,EAAAA,aAAAA,MAC7DjE,IAAiC,mBAAXqD,GAAyBA,EAAOZ,IAA6BY,MAI1F9I,IAAAA,cAAC2J,EAAAA,SAAQ,KACP3J,IAAAA,cAAA,WACGuF,GAAWvF,IAAAA,cAACwJ,EAAAA,OAAM,CAAC9I,QAAQ,WAAW+I,cAAe,CAAEF,KAAMG,EAAAA,aAAAA,GAAiBE,OAAQ,UACtFnE,IAA+B,mBAATsD,GAAuBA,EAAKb,IAA6Ba,KAGpF/I,IAAAA,cAAC6J,EAAAA,WAAU,KACT7J,IAAAA,cAAA,WACGuF,GAAWvF,IAAAA,cAACwJ,EAAAA,OAAM,CAAC9I,QAAQ,WAAW+I,cAAe,CAAEF,KAAMG,EAAAA,aAAAA,MAC7DjE,IAAiC,mBAAXuD,GAAyBA,EAAOd,IAA6Bc,KAGnF,MAIbhJ,IAAAA,cAAA,WACEA,IAAAA,cAAA,OAAKC,UAAU,8CAA8C2E,IAIrE,CAEA,OAAOA,CACT,EAmBAH,EAAsBvD,aAAe,CACnC0D,SAAU,KACVE,oBAAAA,EAAAA,oBACAE,mBAAAA,EAAAA,mBACAE,0BAAAA,EAAAA,0B,iLCvHI4E,EAAqB,SAAHtK,GAAA,IAASuK,EAAKC,OAAAC,OAAA,KAAAC,EAAAA,EAAAA,GAAA1K,GAAAA,IAAA,OAAOQ,IAAAA,cAACmK,EAAAA,QAAkBJ,EAAS,EAkBzED,EAAmB5I,aAAe,CAChC4C,WAAYL,EAAAA,GAAAA,wBACZ2G,gBAAiBC,EAAAA,qBACjBC,gBAAiBC,EAAAA,qB,oMCPbC,EAA6B,SAAHhL,GAAA,IAASuK,EAAKC,OAAAC,OAAA,KAAAC,EAAAA,EAAAA,GAAA1K,GAAAA,IAAA,OAAOQ,IAAAA,cAACmK,EAAAA,QAAaH,OAAAC,OAAA,CAACQ,YAAa,MAAUV,GAAS,EAuBpGS,EAA2BtJ,aAAe,CACxC4C,WAAYL,EAAAA,GAAAA,gCACZ2G,gBAAiBM,EAAAA,6BACjBC,UAAWC,EAAAA,uBACXN,gBAAiBO,EAAAA,6BACjBC,0BAA2BC,EAAAA,uCAC3BC,yBAA0BC,EAAAA,sC,4YClCtBP,EAA+B,WAO1B,IAAAlL,EAAA2B,UAAApB,OAAA,QAAAqB,IAAAD,UAAA,GAAAA,UAAA,GAAP,CAAC,EAAC+J,EAAA1L,EANJsE,WAAAA,OAAU,IAAAoH,GAAQA,EAAAC,EAAA3L,EAClB4L,aAAAA,OAAY,IAAAD,EAAGE,EAAAA,GAAAA,KAAAA,0BAA2CF,EAAAG,EAAA9L,EAC1DyC,YAAaC,OAAgB,IAAAoJ,EAAG3J,EAAAA,GAAAA,WAAAA,YAAiC2J,EAAAjK,EAAA7B,EACjE8B,WAAYC,OAAe,IAAAF,EAAGC,EAAAA,WAAUD,EAAAkK,EAAA/L,EACxCwL,yBAA0BQ,OAA6B,IAAAD,EAAGN,EAAAA,sCAAqCM,EAAAE,EAAAjM,EAC/FkM,qBAAsBC,OAAyB,IAAAF,EAAG9J,EAAAA,GAAAA,WAAAA,qBAA0C8J,EAEpF7J,EAAcL,IAAdK,UACFgK,EAAQJ,IACRnJ,EAAWH,IACjB2J,EAAkDF,GAChD,SAAAtL,GAAA,IAAAyL,EAAGC,EAAS1L,EAAT0L,UAAS,OAAOA,SAAiC,QAAxBD,EAATC,EAAWC,8BAAsB,IAAAF,OAAxB,EAATA,EAAoClK,EAAU,IAD3DqK,EAASJ,EAATI,UAAW1G,EAAOsG,EAAPtG,QAASM,EAAIgG,EAAJhG,KAASqG,GAAQC,EAAAA,EAAAA,GAAAN,EAAAO,GAU7C,OANAC,EAAAA,EAAAA,IAAwB,WACjBvI,GACHsH,EAAaxJ,EAAWgK,EAAxBR,CAA+B/I,EAEnC,GAAG,CAACA,EAAUyB,EAAYlC,EAAWgK,KAErCU,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKJ,GAAQ,IACX3G,QAASA,GAAW0G,IAAa,EACjCpG,KAAwB,KAAjBA,aAAI,EAAJA,EAAM9F,SAAgB8F,EAAK,IAAOA,GAAQ,CAAC,GAEtD,EAUM+E,EAAyB,WAGpB,IAAA7I,EAAAZ,UAAApB,OAAA,QAAAqB,IAAAD,UAAA,GAAAA,UAAA,GAAP,CAAC,EAACa,EAAAD,EAFJE,YAAaC,OAAgB,IAAAF,EAAGL,EAAAA,GAAAA,WAAAA,YAAiCK,EAAAG,EAAAJ,EACjET,WAEQM,QAFmB,IAAAO,EAAGb,EAAAA,WAAUa,KAEhCP,UACFS,EAAWH,IAWjB,OAAO,SAAAU,GAAyB,IAAtB2J,EAAM3J,EAAN2J,OAAQC,EAAO5J,EAAP4J,QAChBnK,EAAS,EAAAoK,EAAAA,EAAAA,GAAA,CAEL5J,KAAMC,EAAAA,GAAAA,MAAAA,6CAA8DuC,EAAAA,GAAAA,QACpEtC,OAAQnB,GACPyD,EAAAA,GAAAA,OAAkCkH,IAAME,EAAAA,EAAAA,GAAA,CAGzC5J,KAAMC,EAAAA,GAAAA,MAAAA,6CAA8DuC,EAAAA,GAAAA,OACpEtC,OAAQnB,GACPyD,EAAAA,GAAAA,MAAiCmH,IAGxC,CACF,EAWM3B,EAA+B,WAI1B,IAAAjC,EAAAzH,UAAApB,OAAA,QAAAqB,IAAAD,UAAA,GAAAA,UAAA,GAAP,CAAC,EAACuL,EAAA9D,EAHJ+D,YAAAA,OAAW,IAAAD,EAAGE,EAAAA,GAAUF,EAAAG,EAAAjE,EACxB3G,YAAaC,OAAgB,IAAA2K,EAAGlL,EAAAA,GAAAA,WAAAA,YAAiCkL,EAAAC,EAAAlE,EACjEtH,WAEQM,QAFmB,IAAAkL,EAAGxL,EAAAA,WAAUwL,KAEhClL,UACFS,EAAWH,IAYjB,OAAO,SAAC6K,EAAKC,GAAwB,IAE/BC,EAFWC,EAASF,EAATE,UAAW5M,EAAE0M,EAAF1M,GACpB6M,EAAoBnD,OAAOoD,OAAOT,GAAalG,MAAK,SAAAjD,GAAK,OAAIA,IAAUlD,GAAMkI,IAAWhF,KAAWlD,CAAE,IAGtG6M,GASDF,EAFIC,IACDG,EAAAA,gBAAAA,KACgBC,EAAAA,GAAAA,WAGAA,EAAAA,GAAAA,UAIvBjL,EAAS,EAAAoK,EAAAA,EAAAA,GAAA,CAEL5J,KAAMC,EAAAA,GAAAA,MAAAA,6CAA8DuC,EAAAA,GAAAA,WACpEtC,OAAQnB,GACPyD,EAAAA,GAAAA,UAAqC4H,IAAgBR,EAAAA,EAAAA,GAAA,CAGtD5J,KAAMC,EAAAA,GAAAA,MAAAA,6CAA8DuC,EAAAA,GAAAA,MACpEtC,OAAQnB,GACPyD,EAAAA,GAAAA,KAAgC8H,OAxB/B1J,EAAAA,GAAAA,UAAoBA,EAAAA,GAAAA,cACtBC,QAAQC,KAAK,iEAADL,OAAkEhD,EAAE,gBA0BtF,CACF,EAEMsD,EAAU,CACd8G,6BAAAA,EACAE,uBAAAA,EACAC,6BAAAA,E,wIChJI0C,EAAe,SAAH/N,GAAYA,EAANgO,OAAN,IAAc5I,EAAQpF,EAARoF,SAAe,OAAApF,EAALgB,MAAYoE,CAAQ,EAO9D2I,EAAaE,UAAY,CACvB7I,SAAU8I,IAAAA,KAAAA,WACVF,OAAQE,IAAAA,KACRlN,MAAOkN,IAAAA,KAAAA,YAQTH,EAAarM,aAAe,CAC1BsM,QAAQ,E,oSCVJG,EAAW,WAGN,IAAAnO,EAAA2B,UAAApB,OAAA,QAAAqB,IAAAD,UAAA,GAAAA,UAAA,GAAP,CAAC,EAACmK,EAAA9L,EAFJyC,YAAaC,OAAgB,IAAAoJ,EAAG3J,EAAAA,GAAAA,WAAAA,YAAiC2J,EAAAjK,EAAA7B,EACjE8B,WAEQM,QAFmB,IAAAP,EAAGC,EAAAA,WAAUD,KAEhCO,UACFS,EAAWH,IAEjB,OAAO,WAAoB,IAAjB2G,GAAiB1H,UAAApB,OAAA,QAAAqB,IAAAD,UAAA,GAAAA,UAAA,GAAP,CAAC,GAAX0H,MACRxG,EAAS,CACPQ,KAAMC,EAAAA,GAAAA,UAAAA,kBACN8K,MAAInB,EAAAA,EAAAA,GAAA,GACD7K,EAAYiH,IAGnB,CACF,EAkBMgF,EAAgB,SAAH9L,GASb,IARJ+L,EAAS/L,EAAT+L,UACAlJ,EAAQ7C,EAAR6C,SACAmJ,EAAgBhM,EAAhBgM,iBACAjK,EAAU/B,EAAV+B,WACAkK,EAACjM,EAADiM,EACUC,EAAalM,EAAvB4L,SACYpM,EAAeQ,EAA3BT,WACaI,EAAgBK,EAA7BN,YAEQG,EAAcL,IAAdK,UACFsM,EAAmBxM,GAAiB,SAAAkB,GAAA,IAAAuL,EAAY,OAAqB,QAArBA,EAAAvL,EAATmJ,UAA0B6B,YAAI,IAAAO,OAAA,EAAdA,EAAiBvM,EAAU,GAAEkM,GACpFM,EAAQH,IAEd,GAAInK,EACF,OAAO,KAGT,IAAMuK,EAAkBrO,IAAAA,SAAAA,QAAuB4E,GAAUxE,KAAI,SAACkO,EAAOzF,GACnE,IAAA0F,EAAmCD,EAA3BvE,MAAOyE,OAAU,IAAAD,EAAG,CAAC,EAACA,EAE9B,MAAO,CACLf,OAAQgB,EAAWhB,SAAU,EAC7BiB,QAASD,EAAW5J,UAAY0J,EAChC9N,MAAOgO,EAAWhO,OAASwN,EAAE,oCAAqC,CAAEU,MAAO7F,IAE/E,IAEA,OACE7I,IAAAA,cAACA,IAAAA,SAAc,KACbA,IAAAA,cAACqJ,EAAAA,MAAK,CAACC,aAAa,KAAKrJ,UAAU,WAChC+N,EAAE,iCAAkC,CAAEU,MAAOL,EAAgBtO,UAEhEC,IAAAA,cAAC2O,EAAAA,KAAI,CAACb,UAAWI,EAAkBH,iBAAkBA,EAAkBK,MAAOA,EAAOR,KAAMS,IAGjG,EAyBAR,EAAc3M,aAAe,CAC3B4M,UAAW,EACXC,iBAAkB,EAClBjK,WAAYL,EAAAA,GAAAA,kBACZuK,EAAGY,EAAAA,UACHjB,SAAAA,EACArM,WAAAA,EAAAA,WACAG,YAAaE,EAAAA,GAAAA,WAAAA,Y,6QC5FTkN,EAAc,SAAHrP,GAAmD,IAA7CwO,EAACxO,EAADwO,EACrBc,GAAwCC,EADmBvP,EAAnCwP,kBAChBC,EAAYH,EAAZG,aAAcC,EAAaJ,EAAbI,cAEhBC,GAAgB7M,EAAAA,EAAAA,cAAY,WA+DhC,OAAO4M,aAAa,EAAbA,EAAe9O,KAAI,SAAAgP,GAAM,OA9DhB,SAAAA,GACd,IAAQC,EACND,EADMC,wBAAyBC,EAC/BF,EAD+BE,qCAAsCC,EACrEH,EADqEG,eAAgB3N,EACrFwN,EADqFxN,UAAWmB,EAChGqM,EADgGrM,OAGlG,OAAKnB,GAAcmB,EAKjB/C,IAAAA,cAACwP,EAAAA,mBAAAA,SAA2B,CAAChM,MAAO4L,EAAQpO,IAAG,WAAAsC,OAAa1B,IAC1D5B,IAAAA,cAACyP,EAAAA,aAAY,KACXzP,IAAAA,cAACT,EAAAA,QAAc,OAEjBS,IAAAA,cAAC0P,EAAAA,YAAW,KACV1P,IAAAA,cAAC2P,EAAAA,QAAO,OAEV3P,IAAAA,cAAC4P,EAAAA,YAAW,KACV5P,IAAAA,cAAC6D,EAAAA,UAAS,OAEZ7D,IAAAA,cAAC4P,EAAAA,YAAW,CAAC3P,UAAYsP,IAAmBM,EAAAA,GAAAA,OAAwB,+BAAmC,IACrG7P,IAAAA,cAAC6N,EAAAA,QAAa,CACZ/J,YACIuL,IAA4BC,GAAyC7L,EAAAA,GAAAA,oBAGvEA,EAAAA,GAAAA,yBACA8L,IAAmBM,EAAAA,GAAAA,QACnBN,IAAmBM,EAAAA,GAAAA,UACnBR,GACErP,IAAAA,cAACuN,EAAAA,aAAY,CACXvM,IAAG,mBAAAsC,OAAqB1B,GACxBpB,MAAOwN,EAAE,+BAAgC,CAAEpK,QAAS,CAAChC,MAErD5B,IAAAA,cAAC8J,EAAAA,mBAAkB,QAGvBrG,EAAAA,GAAAA,6BACA8L,IAAmBM,EAAAA,GAAAA,WACnBN,IAAmBM,EAAAA,GAAAA,QACnBN,IAAmBM,EAAAA,GAAAA,SACnBR,GACErP,IAAAA,cAACuN,EAAAA,aAAY,CACXvM,IAAG,uBAAAsC,OAAyB1B,GAC5BpB,MAAOwN,EAAE,mCAAoC,CAAEpK,QAAS,CAAChC,MAEzD5B,IAAAA,cAACmK,EAAAA,cAAa,QAGlB1G,EAAAA,GAAAA,iCAA2C6L,GAC3CtP,IAAAA,cAACuN,EAAAA,aAAY,CACXvM,IAAG,kBAAAsC,OAAoB1B,GACvBpB,MAAOwN,EAAE,uCAAwC,CAAEpK,QAAS,CAAChC,MAE7D5B,IAAAA,cAACwK,EAAAA,2BAA0B,UAhD9B,IAuDX,CAEoCsF,CAAQV,EAAO,GACrD,GAAG,CAACF,EAAelB,IAEnB,OACGiB,GACCjP,IAAAA,cAAC+P,EAAAA,WAAU,KACT/P,IAAAA,cAACgQ,EAAAA,WAAU,CAACC,aAAchB,GACvBjB,EAAE,uBAAwB,CAAEkC,QAASzM,EAAAA,GAAAA,gBAAyBG,QAASqL,KAE1EjP,IAAAA,cAACmQ,EAAAA,YAAW,KAAEhB,OAGlB,IAEJ,EAiBAN,EAAY3N,aAAe,CACzB8M,EAAGY,EAAAA,UACHI,eAAgBoB,EAAAA,cAAAA,e,6MCpGZzB,EAAI,SAAA0B,IAAAC,EAAAA,EAAAA,GAAA3B,EAAA0B,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAA7B,GAAA,SAAAA,IAAA,IAAA8B,GAAAC,EAAAA,EAAAA,GAAA,KAAA/B,GAAA,QAAAgC,EAAAxP,UAAApB,OAAA6Q,EAAA,IAAApO,MAAAmO,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAA1P,UAAA0P,GA6CP,OA7COJ,EAAAF,EAAAO,KAAAC,MAAAR,EAAA,OAAAjN,OAAAsN,KACRI,MAAQ,CACN9C,iBAAkB,KAClB+C,YAAa,MA0BfR,EAOArC,MAAQ,SAAA5O,GAAe,IAAZqJ,EAAKrJ,EAALqJ,MACDuF,EAAUqC,EAAK1G,MAAfqE,MAERqC,EAAKS,SACH,CACEhD,iBAAkBrF,IAEpB,kBAAMuF,EAAM,CAAEvF,MAAAA,GAAQ,GAE1B,EAAC4H,CAAA,CAkEA,OAlEAU,EAAAA,EAAAA,GAAAxC,EAAA,EAAA3N,IAAA,oBAAAwC,MAvCD,WAGsB,OAFI4N,KAAKJ,MAArBC,aAGNG,KAAKC,YAET,GAAC,CAAArQ,IAAA,qBAAAwC,MAED,SAAmB8N,GACjB,IAAQ1D,EAASwD,KAAKrH,MAAd6D,KASH2D,IAAaD,EAAU1D,KAAMA,GARf,SAAC4D,EAAQC,GAC1B,GAAsB,mBAAXD,GAA2C,mBAAXC,EACzC,OAAOD,EAAOE,aAAeD,EAAOC,UAIxC,KAGEN,KAAKC,YAET,GAAC,CAAArQ,IAAA,aAAAwC,MAuBD,WACE,IAAAmO,EAA8CP,KAAKrH,MAA3C+D,EAAS6D,EAAT7D,UAAWC,EAAgB4D,EAAhB5D,iBAAkBH,EAAI+D,EAAJ/D,KACjCM,EAAmBH,EAEjBkD,EAAcrD,EAAKxN,KAAI,SAAAC,EAA6BwI,GAAU,IAApC2E,EAAMnN,EAANmN,OAAQiB,EAAOpO,EAAPoO,QAASjO,EAAKH,EAALG,MAG/C,OAFA0N,EAAmBV,EAAS3E,EAAQqF,EAGlClO,IAAAA,cAAC4R,EAAAA,IAAG,CAAC5Q,IAAKR,EAAOqR,SAAUhJ,EAAOrI,MAAOR,IAAAA,cAAC8R,EAAAA,aAAY,KAAEtR,IACrDiO,EAGP,IAEyB,iBAAdX,IACTI,EAAmBJ,GAGrBsD,KAAKF,SAAS,CACZhD,iBAAAA,EACA+C,YAAAA,GAEJ,GAEA,CAAAjQ,IAAA,aAAAwC,MAKA,WAAa,IAAAuO,EAAA,KACXC,EAA0CZ,KAAKJ,MAAvC9C,EAAgB8D,EAAhB9D,iBAAkB+C,EAAWe,EAAXf,YAC1BgB,EAAyCb,KAAKrH,MAAtC9J,EAASgS,EAAThS,UAAWiS,EAAiBD,EAAjBC,kBAEnB,OACElS,IAAAA,cAACmS,EAAAA,KAAM,CACLlS,UAAS,iBAAAqD,OAAqB4O,EAAuC,GAAlB,cAAoB,KAAA5O,OAAIrD,GAAa,IACxFmS,UAAWlE,EACXmE,SAAU,SAACC,EAAOzJ,GAAK,OAAKkJ,EAAK3D,MAAM,CAAEkE,MAAAA,EAAOzJ,MAAAA,GAAQ,EACxD0J,cAAY,EACZC,eAAa,EACbC,MAAO,CACLC,QAAS,YACTC,GAAI,YAGL1B,EAGP,GAEA,CAAAjQ,IAAA,SAAAwC,MAKA,WACE,OACExD,IAAAA,cAAC4S,EAAAA,KAAI,CAAC3S,UAAU,4BACdD,IAAAA,cAAC6S,EAAAA,SAAQ,CAACC,KAAM,IAAK1B,KAAK2B,cAGhC,KAACpE,CAAA,CA/GO,CAAS3O,IAAAA,WA6InB2O,EAAKzN,aAAe,CAClB4M,UAAW,KACX7N,UAAW,GACX8N,iBAAkB,EAClBmE,mBAAmB,EACnB9D,MAAO3K,EAAAA,GAAAA,KACPmK,KAAM,G,kNCjIF+B,EAAU,SAAHnQ,GAUP,IATJwT,EAAexT,EAAfwT,gBACAlP,EAAUtE,EAAVsE,WACAmP,EAAsBzT,EAAtByT,uBACAjF,EAACxO,EAADwO,EACwBkF,EAA2B1T,EAAnD2T,uBAC0BC,EAA6B5T,EAAvD6T,yBACsBC,EAAyB9T,EAA/C+T,qBACyBC,EAA4BhU,EAArDiU,wBACkBC,EAAqBlU,EAAvCmU,iBAEMC,EAAsBV,IAC5BW,EAAqCT,IAA7BU,EAAeD,EAAfC,gBAAiBC,EAAOF,EAAPE,QACnBC,EAAaV,IACbW,EAAiBT,IACvBU,EAAwCR,IAAhCS,EAAUD,EAAVC,WAAYC,EAAeF,EAAfE,gBAEpB,OAAItQ,KAAemP,GAA2Bc,SAAAA,EAAShU,QAAWqU,SAAAA,EAAiBrU,QAI9EkT,GAA2Bc,SAAAA,EAAShU,QAAWqU,SAAAA,EAAiBrU,OAwCnEC,IAAAA,cAACqU,EAAAA,QAAS,CACR/T,GAAG,oBACHL,UAAU,sEACVqU,gCAAgC,KAChCC,gBAxBe,WAAH,OAASN,EAAejB,EAAgB,EAyBpDwB,uBAAwBxG,EAAE,oCAExBiF,GAA0BjT,IAAAA,cAACyU,EAAAA,yBAAwB,MACrDzU,IAAAA,cAAC0U,EAAAA,eAAc,KACb1U,IAAAA,cAAC2U,EAAAA,mBAAkB,CAACC,WAAY5U,IAAAA,cAAC6U,EAAAA,WAAU,MAAKC,WAAW,MACzD9U,IAAAA,cAAC+U,EAAAA,aAAY,CAACrU,QAAQ,gBACnBqT,EAAQhU,OAAS,GAChBC,IAAAA,cAACgV,EAAAA,YAAW,KACVhV,IAAAA,cAACiV,EAAAA,2BAA0B,OAG9BlB,EAAQ3T,KAAI,SAAAwC,GAA2E,IAAxEpC,EAAKoC,EAALpC,MAAc0U,EAAUtS,EAAjBY,MAA8B2R,EAAevS,EAA1BwS,UAClCC,EAAY,CAAEC,aAAc9U,GAOlC,OALoB,IAH2DoC,EAAX2S,cAIlEF,EAAUG,MA/BG,WAAgC,IAAtBN,GAAsB/T,UAAApB,OAAA,QAAAqB,IAAAD,UAAA,GAAAA,UAAA,GAAP,CAAC,GAAvBqC,MACtBiS,EAAc7B,aAAmB,EAAnBA,EAAsBsB,GAC1C,MAC0B,iBAAhBO,GAA4B,CAClCzH,EAAE,0BAA2B,CAAEpK,QAAS,CAACsR,EAA6B,KAAhBO,EAAsB,OAAWA,OAEzF,EAEJ,CAuBgCC,CAAmB,CAAElS,MAAO0R,IAC9CG,EAAUM,WAAa,kBAjDA3B,EAiD6BkB,EAAa,GAIjElV,IAAAA,cAAC4V,EAAAA,cAAa5L,OAAAC,OAAA,CACZjJ,IAAKkU,EACLW,gBAAiB/B,IAAoBoB,GAAiC,IAAnBnB,EAAQhU,QACvDsV,GAEJrV,IAAAA,cAACmV,EAAe,CAACW,UAAQ,IAG/B,MAGJ9V,IAAAA,cAAC+U,EAAAA,aAAY,CAAC/T,IAAI,cAAcmT,GAChCnU,IAAAA,cAAC+U,EAAAA,aAAY,CAAC/T,IAAI,kBAAkB+U,UAAW,CAAErD,QAAS,eACvD0B,KA7EApU,IAAAA,cAACyU,EAAAA,yBAAwB,CAACuB,cAAY,IAJtC,IAsFX,EA4BArG,EAAQzO,aAAe,CACrB8R,iBAAiB,EACjBlP,WAAYL,EAAAA,GAAAA,oBACZwP,uBAAwBxP,EAAAA,GAAAA,kCACxBuK,EAAGY,EAAAA,UACHuE,uBAAAA,EAAAA,uBACAE,yBAAAA,EAAAA,yBACAE,qBAAAA,EAAAA,qBACAE,wBAAAA,EAAAA,wBACAE,iBAAAA,EAAAA,iB,mYCtKIJ,EAAuB,WAMlB,IAAA/T,EAAA2B,UAAApB,OAAA,QAAAqB,IAAAD,UAAA,GAAAA,UAAA,GAAP,CAAC,EAAC8U,EAAAzW,EALJ0W,2BAA4BC,OAA+B,IAAAF,EAAGC,EAAAA,YAA0BD,EAAAG,EAAA5W,EACxF6W,oBAAqBC,OAAwB,IAAAF,EAAGC,EAAAA,YAAmBD,EAAAG,EAAA/W,EACnEgX,eAAgBC,OAAmB,IAAAF,EAAGC,EAAAA,YAAcD,EAAAG,EAAAlX,EACpDmX,iBAAkBC,OAAqB,IAAAF,EAAGC,EAAAA,YAAgBD,EAAAG,EAAArX,EAC1DsX,mBAAoBC,OAAuB,IAAAF,EAAGC,EAAAA,YAAkBD,EAE1DG,EAAkBb,IAClBc,EAAmBX,IACnBY,EAAcT,IACdU,EAAgBP,IAChBQ,EAAkBL,IAExB,OAAO,SAAAM,GACL,OAAQA,GACN,KAAKhS,EAAAA,GAAAA,iBACH2R,IACA,MACF,KAAK3R,EAAAA,GAAAA,SACH4R,IACA,MACF,KAAK5R,EAAAA,GAAAA,IACH6R,IACA,MACF,KAAK7R,EAAAA,GAAAA,MACH8R,IACA,MACF,KAAK9R,EAAAA,GAAAA,QACH+R,IAKN,CACF,EAeM3D,EAA0B,WAQrB,IAAApT,EAAAc,UAAApB,OAAA,QAAAqB,IAAAD,UAAA,GAAAA,UAAA,GAAP,CAAC,EAACmW,EAAAjX,EAPJkX,gBAAiBC,OAAoB,IAAAF,EAAGC,EAAAA,gBAAeD,EAAAG,EAAApX,EACvDqX,0BAA2BC,OAA8B,IAAAF,EAAGC,EAAAA,YAAyBD,EAAAG,EAAAvX,EACrF6V,2BAA4BC,OAA+B,IAAAyB,EAAG1B,EAAAA,YAA0B0B,EAAAC,EAAAxX,EACxFgW,oBAAqBC,OAAwB,IAAAuB,EAAGxB,EAAAA,YAAmBwB,EAAAC,EAAAzX,EACnEmW,eAAgBC,OAAmB,IAAAqB,EAAGtB,EAAAA,YAAcsB,EAAAC,EAAA1X,EACpDsW,iBAAkBC,OAAqB,IAAAmB,EAAGpB,EAAAA,YAAgBoB,EAAAC,EAAA3X,EAC1DyW,mBAAoBC,OAAuB,IAAAiB,EAAGlB,EAAAA,YAAkBkB,EAEhEC,EAMIT,IAL2CU,EAAeD,EAA3D5S,EAAAA,GAAAA,kBACoC8S,EAAQF,EAA5C5S,EAAAA,GAAAA,UAC+B+S,EAAGH,EAAlC5S,EAAAA,GAAAA,KACiCgT,EAAKJ,EAAtC5S,EAAAA,GAAAA,OACmC3E,EAAOuX,EAA1C5S,EAAAA,GAAAA,SAEG2R,EAAkBb,IAClBc,EAAmBX,IACnBY,EAAcT,IACdU,EAAgBP,IAChB0B,EAAyBX,IACzBP,EAAkBL,IAExB,OAAO,SAAA/D,GAC0B,iBAApBkF,GACTlB,IAGsB,iBAAbmB,GACTlB,IAGiB,iBAARmB,GACTlB,IAGmB,iBAAVmB,GACTlB,IAGqB,iBAAZzW,GACT0W,IAGEpE,GACFsF,GAEJ,CACF,EAUM3E,EAAmB,WAGd,IAAA5R,EAAAZ,UAAApB,OAAA,QAAAqB,IAAAD,UAAA,GAAAA,UAAA,GAAP,CAAC,EAACoX,EAAAxW,EAFJyW,gBAAAA,OAAe,IAAAD,EAAGlR,EAAAA,oBAAmBkR,EAAAE,EAAA1W,EACrC2W,wBAEuDC,QAFF,IAAAF,EAAGC,EAAAA,wBAAuBD,KAEvEG,QAAAA,OAAO,IAAAD,EAAG,GAAEA,EAEpB,OAAOE,EAAAA,EAAAA,UAAQ,WACb,IAAMC,EAAY,SAAHlW,GAAwC,IAAlCtC,EAAEsC,EAAFtC,GAAImO,EAAO7L,EAAP6L,QAAYsK,GAAW5M,EAAAA,EAAAA,GAAAvJ,EAAAwJ,GAE3B+I,GADJqD,EAAgB/R,MAAK,SAAAxD,GAAA,IAAU+V,EAAmB/V,EAA1BO,MAAK,OAA4BlD,IAAO0Y,CAAmB,KACjD,CAAC,GAA1C5D,UAER,OACGD,GACCnV,IAAAA,cAACgV,EAAAA,YAAW,CAAChU,IAAG,UAAAsC,OAAYhD,IAC1BN,IAAAA,cAACmV,EAAenL,OAAAC,OAAA,CAAC6L,UAAU,GAAWiD,MAGxC/Y,IAAAA,cAACgV,EAAAA,YAAW,CAAChU,IAAKV,GAAMmD,EAAAA,EAAAA,cACF,mBAAZgL,EAAyBA,IAAYA,IAGjD,IAEJ,EAEA,MAAO,CACL0F,WAAYyE,EAAQjW,QAAO,SAAAiG,GAAS,OAAkB,IAAlBA,EAANqQ,MAA4B,IAAE7Y,IAAI0Y,GAChE1E,gBAAiBwE,EAAQjW,QAAO,SAAAqK,GAAc,OAAuB,IAAvBA,EAAXkM,WAAsC,IAAE9Y,IAAI0Y,GAEnF,GAAG,CAACN,EAAiBI,GACvB,EAEMhV,EAAU,CACd2P,qBAAAA,EACAE,wBAAAA,EACAE,iBAAAA,E,oSCnJIwF,EAAyB,WAAiF,IAALC,GAAKjY,UAAApB,OAAA,QAAAqB,IAAAD,UAAA,GAAAA,UAAA,GAAP,CAAC,GAAxE6N,eAChCF,QADmE,IAAAsK,EAAGhJ,EAAAA,cAAAA,eAA4BgJ,KAC1FC,EAAiBvK,EAAjBuK,kBAAmBC,EAAUxK,EAAVwK,WACrBvF,EAAU,GAMhB,OAJAsF,SAAAA,EAAmBE,SAAQ,SAAA7Y,GACzBqT,EAAQyF,KAAK,CAAEhZ,MAAOE,EAAS8C,MAAO9C,EAAS+Y,SAAU/Y,KAAY4Y,aAAU,EAAVA,EAAY1X,YACnF,IAEOmS,CACT,EAUM2F,EAAc,WAGT,IAAArZ,EAAAc,UAAApB,OAAA,QAAAqB,IAAAD,UAAA,GAAAA,UAAA,GAAP,CAAC,EAACwY,EAAAtZ,EAFJ4B,YAAaC,OAAgB,IAAAyX,EAAGhY,EAAAA,GAAAA,WAAAA,YAAiCgY,EAAAC,EAAAvZ,EACjEiB,WAEQ2N,QAFmB,IAAA2K,EAAGtY,EAAAA,WAAUsY,KAEhC3K,aACF5M,EAAWH,IAEjB,OAAO,WAA2B,IAAL2X,GAAK1Y,UAAApB,OAAA,QAAAqB,IAAAD,UAAA,GAAAA,UAAA,GAAP,CAAC,GAAlBqC,MAAAA,OAAK,IAAAqW,EAAG,KAAIA,EACpBxX,EAAS,CACP,CACEQ,KAAMC,EAAAA,GAAAA,IAAAA,oCACNmM,aAAAA,GAEF,CACEpM,KAAMC,EAAAA,GAAAA,IAAAA,oBACNpC,QAAS8C,EACTyL,aAAAA,IAGN,CACF,EAiBMwF,EAA2B,SAAH7R,GASxB,IARJkT,EAAQlT,EAARkT,SACAE,EAAYpT,EAAZoT,aACA8D,EAAQlX,EAARkX,SACA9L,EAACpL,EAADoL,EACa+L,EAAgBnX,EAA7B8W,YACYnY,EAAeqB,EAA3BtB,WACaI,EAAgBkB,EAA7BnB,YACwBuY,EAA2BpX,EAAnDuW,uBAEQlK,EAAiB1N,IAAjB0N,aACFgL,EAAevY,GAAiB,SAAAuB,GAAA,IAAAiX,EAAAC,EAAGC,EAAInX,EAAJmX,KAAI,OAAOA,SAAa,QAATF,EAAJE,EAAMC,eAAO,IAAAH,GAAS,QAATC,EAAbD,EAAexZ,eAAO,IAAAyZ,OAAlB,EAAJA,EAAyBlL,EAAa,GAAE,MACtFoD,EAAW0H,IACXhG,EAAUiG,IACVM,EAAiBvG,EAAQ3T,KAAI,SAAAkH,GAAM,OAAAgF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACpChF,GAAM,IACTmS,SAAWQ,GAAgB3S,EAAO9D,QAAUyW,IAAiB3S,aAAM,EAANA,EAAQmS,WAAQ,IAG/E,IAAI1F,aAAO,EAAPA,EAAShU,SAAU,EACrB,OAAO,KAGT,IAAMwa,EACJva,IAAAA,cAAC0U,EAAAA,eAAc,KACb1U,IAAAA,cAACgV,EAAAA,YAAW,CAACtU,QAAS8Z,EAAAA,mBAAAA,OACnBxM,EAAE,0BAA2B,CAAEpK,QAAS,CAAC,kBAAoB,KAEhE5D,IAAAA,cAACya,EAAAA,OAAM,CACL,aAAYzM,EAAE,gCAAiC,CAAEpK,QAAS,CAACkS,GAAY,SAAU,kBACjFzD,SAAUA,EACV0B,QAASuG,EACTI,gBAAiBT,EACjBU,YAAa3M,EAAE,gCAAiC,CAAEpK,QAAS,CAACkS,GAAY,SAAU,kBAClFgE,SAAUA,EACV,YAAU,8BAKhB,OACG9D,GACChW,IAAAA,cAACqU,EAAAA,QAAS,CACR/T,GAAG,oBACHL,UAAU,sEACVqU,gCAAgC,MAE/BiG,IAGLA,CAEJ,EAyBA9F,EAAyBvT,aAAe,CACtC4U,UAAU,EACVE,cAAc,EACd8D,SAAUc,EAAAA,eAAAA,KACV5M,EAAGY,EAAAA,UACH8K,YAAAA,EACApY,WAAAA,EAAAA,WACAG,YAAaE,EAAAA,GAAAA,WAAAA,YACbwX,uBAAAA,E","sources":["webpack:///./src/components/bannerMessages/bannerMessages.js","webpack:///./src/components/bannerMessages/bannerMessagesContext.js","webpack:///./src/components/graphCard/graphCard.js","webpack:///./src/components/graphCard/graphCardMetricTotals.js","webpack:///./src/components/inventoryCard/inventoryCardHosts.js","webpack:///./src/components/inventoryCardSubscriptions/inventoryCardSubscriptions.js","webpack:///./src/components/inventoryCardSubscriptions/inventoryCardSubscriptionsContext.js","webpack:///./src/components/inventoryTabs/inventoryTab.js","webpack:///./src/components/inventoryTabs/inventoryTabs.js","webpack:///./src/components/productView/productView.js","webpack:///./src/components/tabs/tabs.js","webpack:///./src/components/toolbar/toolbar.js","webpack:///./src/components/toolbar/toolbarContext.js","webpack:///./src/components/toolbar/toolbarFieldGroupVariant.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, AlertActionCloseButton, AlertGroup, AlertVariant } from '@patternfly/react-core';\nimport { useBannerMessages, useRemoveBannerMessages } from './bannerMessagesContext';\n\n/**\n * Banner alert messages for a product view.\n *\n * @memberof Components\n * @module BannerMessages\n * @property {module} BannerMessagesContext\n */\n\n/**\n * Render banner messages.\n *\n * @param {object} props\n * @param {Function} props.useBannerMessages\n * @param {Function} props.useRemoveBannerMessages\n * @returns {React.ReactNode}\n */\nconst BannerMessages = ({\n  useBannerMessages: useAliasBannerMessages,\n  useRemoveBannerMessages: useAliasRemoveBannerMessages\n}) => {\n  const bannerMessages = useAliasBannerMessages();\n  const removeBannerMessages = useAliasRemoveBannerMessages();\n\n  if (bannerMessages?.length) {\n    return (\n      <div className=\"curiosity-banner-messages\">\n        <AlertGroup isLiveRegion>\n          {bannerMessages?.map(({ id, message, title, variant = AlertVariant.info }) => {\n            const actionClose = <AlertActionCloseButton onClose={() => removeBannerMessages(id || title)} />;\n\n            return (\n              <Alert actionClose={actionClose} key={id || title} title={title} variant={variant} isInline>\n                {message}\n              </Alert>\n            );\n          })}\n        </AlertGroup>\n      </div>\n    );\n  }\n\n  return null;\n};\n\n/**\n * Prop types.\n *\n * @type {{useBannerMessages: Function, useRemoveBannerMessages: Function}}\n */\nBannerMessages.propTypes = {\n  useBannerMessages: PropTypes.func,\n  useRemoveBannerMessages: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useBannerMessages: Function, useRemoveBannerMessages: Function}}\n */\nBannerMessages.defaultProps = {\n  useBannerMessages,\n  useRemoveBannerMessages\n};\n\nexport { BannerMessages as default, BannerMessages };\n","import { useCallback } from 'react';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct } from '../productView/productViewContext';\nimport { helpers } from '../../common/helpers';\n\n/**\n * @memberof BannerMessages\n * @module BannerMessagesContext\n */\n\n/**\n * Retrieve, set and remove application banner messages from state.\n *\n * @param {object} options\n * @param {Function} options.useProduct\n * @param {Function} options.useSelector\n * @returns {{ bannerMessages: Array, setBannerMessages: Function, removeBannerMessages: Function }}\n */\nconst useBannerMessages = ({\n  useProduct: useAliasProduct = useProduct,\n  useSelector: useAliasSelector = storeHooks.reactRedux.useSelector\n} = {}) => {\n  const { productId } = useAliasProduct();\n  return useAliasSelector(({ messages }) => messages?.bannerMessages?.[productId], []);\n};\n\n/**\n * Provide a callback for removing application banner messages from state.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useBannerMessages\n * @returns {Function}\n */\nconst useRemoveBannerMessages = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useBannerMessages: useAliasBannerMessages = useBannerMessages\n} = {}) => {\n  const dispatch = useAliasDispatch();\n  const { productId } = useAliasProduct();\n  const bannerMessages = useAliasBannerMessages();\n\n  /**\n   * Remove a banner message from state.\n   *\n   * @callback removeBannerMessages\n   * @param {string} idTitle\n   */\n  return useCallback(\n    idTitle => {\n      if (productId && Array.isArray(bannerMessages) && bannerMessages.length) {\n        const filteredMessages = bannerMessages.filter(({ id, title }) => id !== idTitle && title !== idTitle);\n\n        dispatch({\n          type: reduxTypes.message.SET_BANNER_MESSAGES,\n          viewId: productId,\n          bannerMessages: filteredMessages || []\n        });\n      }\n    },\n    [bannerMessages, dispatch, productId]\n  );\n};\n\n/**\n * Provide a callback for setting application banner messages from state.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useBannerMessages\n * @returns {Function}\n */\nconst useSetBannerMessages = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useBannerMessages: useAliasBannerMessages = useBannerMessages\n} = {}) => {\n  const dispatch = useAliasDispatch();\n  const { productId } = useAliasProduct();\n  const bannerMessages = useAliasBannerMessages();\n\n  /**\n   * Set application messages for banner display\n   *\n   * @callback setBannerMessages\n   * @param {Array<{ id: string, message: string, title: string, variant: string }>|{ id: string, message: string, title: string, variant: string }} messages\n   */\n  return useCallback(\n    messages => {\n      if (productId) {\n        const updatedMessages = (Array.isArray(messages) && messages) || [messages];\n\n        dispatch({\n          type: reduxTypes.message.SET_BANNER_MESSAGES,\n          viewId: productId,\n          bannerMessages: [\n            ...(bannerMessages || []),\n            ...updatedMessages\n              .map(value => {\n                if (value?.id || value?.title || value?.message || value?.variant) {\n                  return value;\n                }\n\n                if (typeof value === 'string' || typeof value === 'number') {\n                  return {\n                    id: value,\n                    title: value\n                  };\n                }\n\n                return undefined;\n              })\n              .filter(value => value !== undefined)\n          ]\n        });\n      } else if (helpers.DEV_MODE) {\n        console.warn(\n          'Banner messages currently require the use of \"product id\". Product context is unavailable, try moving your banner message \"set\" lower in the component order.'\n        );\n      }\n    },\n    [bannerMessages, dispatch, productId]\n  );\n};\n\nconst context = {\n  useBannerMessages,\n  useRemoveBannerMessages,\n  useSetBannerMessages\n};\n\nexport { context as default, context, useBannerMessages, useRemoveBannerMessages, useSetBannerMessages };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { helpers } from '../../common';\nimport { GraphCardMetricTotals } from './graphCardMetricTotals';\nimport { GraphCardChart } from './graphCardChart';\nimport { GraphCardContext, useParseFiltersSettings } from './graphCardContext';\n\n/**\n * Configurable graph, chart, cards. Consumes Charts.\n *\n * @see Charts\n * @memberof Components\n * @module GraphCard\n * @property {module} GraphCardChart\n * @property {module} GraphCardChartLegend\n * @property {module} GraphCardChartTitleTooltip\n * @property {module} GraphCardChartTooltip\n * @property {module} GraphCardContext\n * @property {module} GraphCardHelpers\n * @property {module} GraphCardMetricTotals\n */\n\n/**\n * Set up graph cards. Expand filters with base graph settings.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useParseFiltersSettings\n * @returns {React.ReactNode}\n */\nconst GraphCard = ({ isDisabled, useParseFiltersSettings: useAliasParseFiltersSettings }) => {\n  const { filtersSettings } = useAliasParseFiltersSettings();\n\n  if (isDisabled || !filtersSettings?.length) {\n    return null;\n  }\n\n  return filtersSettings?.map(filterSetting => (\n    <GraphCardContext.Provider key={`graphCard-${filterSetting?.settings?.metrics?.[0]?.id}`} value={filterSetting}>\n      <GraphCardMetricTotals>\n        <GraphCardChart />\n      </GraphCardMetricTotals>\n    </GraphCardContext.Provider>\n  ));\n};\n\n/**\n * Prop types.\n *\n * @type {{useParseFiltersSettings: Function, isDisabled: boolean}}\n */\nGraphCard.propTypes = {\n  isDisabled: PropTypes.bool,\n  useParseFiltersSettings: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useParseFiltersSettings: Function, isDisabled: boolean}}\n */\nGraphCard.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_GRAPH,\n  useParseFiltersSettings\n};\n\nexport { GraphCard as default, GraphCard };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter, CardHeader, CardTitle, Title } from '@patternfly/react-core';\nimport _camelCase from 'lodash/camelCase';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useGraphCardContext, useMetricsSelector } from './graphCardContext';\nimport { Loader, SkeletonSize } from '../loader/loader';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldRangedMonthly';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * @memberof GraphCard\n * @module GraphCardMetricTotals\n */\n\n/**\n * Display totals for a single metric.\n *\n * @param {object} props\n * @param {React.ReactNode} props.children\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {React.ReactNode}\n */\nconst GraphCardMetricTotals = ({\n  children,\n  useGraphCardContext: useAliasGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate } = useAliasProductGraphTallyQuery();\n  const { pending, error, fulfilled, dataSets = [] } = useAliasMetricsSelector();\n  const { data = [], id: firstChartId, metric: firstMetricId, meta = {} } = dataSets[0] || {};\n  const { date: lastDate, hasData: lastHasData, y: lastValue } = data[data.length - 1] || {};\n\n  const {\n    date: currentDate,\n    hasData: currentHasData,\n    y: currentValue\n  } = data.find(({ isCurrentDate }) => isCurrentDate === true) || {};\n\n  const { totalMonthlyDate: monthlyDate, totalMonthlyHasData: monthlyHasData, totalMonthlyValue: monthlyValue } = meta;\n\n  const { title: selectedMonth, isCurrent } =\n    toolbarFieldOptions.find(\n      option => option.title === startDate || option.value.startDate.toISOString() === startDate\n    ) || {};\n\n  const dailyDate = isCurrent ? currentDate : lastDate;\n  const dailyHasData = isCurrent ? currentHasData : lastHasData;\n  const dailyValue = isCurrent ? currentValue : lastValue;\n\n  if (settings?.isMetricDisplay && settings?.cards?.length) {\n    const metricDisplayPassedData = helpers.setImmutableData({\n      chartId: firstChartId,\n      dailyDate,\n      dailyHasData,\n      dailyValue,\n      metricId: firstMetricId,\n      groupMetricId: [...settings.groupMetric],\n      monthlyDate,\n      monthlyHasData,\n      monthlyValue,\n      selectedValue: selectedMonth\n    });\n\n    return (\n      <div\n        data-test={`graphMetricTotals-${settings?.groupMetric?.map(metricId => _camelCase(metricId))?.join('-')}`}\n        data-test-data={JSON.stringify(metricDisplayPassedData)}\n        className=\"curiosity-usage-graph__totals\"\n      >\n        <div>\n          <div className=\"curiosity-usage-graph__totals-column\">\n            {settings?.cards?.map(({ key, header, body, footer }, index) => (\n              <Card\n                key={key || helpers.generateHash({ metricDisplayPassedData, index })}\n                isPlain\n                data-test={`graphMetricTotalsCard-${index}`}\n                className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n              >\n                <CardHeader>\n                  <CardTitle>\n                    <Title headingLevel=\"h2\" size=\"md\">\n                      {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                      {fulfilled && ((typeof header === 'function' && header(metricDisplayPassedData)) || header)}\n                    </Title>\n                  </CardTitle>\n                </CardHeader>\n                <CardBody>\n                  <div>\n                    {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg, height: '60px' }} />}\n                    {fulfilled && ((typeof body === 'function' && body(metricDisplayPassedData)) || body)}\n                  </div>\n                </CardBody>\n                <CardFooter>\n                  <div>\n                    {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                    {fulfilled && ((typeof footer === 'function' && footer(metricDisplayPassedData)) || footer)}\n                  </div>\n                </CardFooter>\n              </Card>\n            ))}\n          </div>\n        </div>\n        <div>\n          <div className=\"curiosity-usage-graph__totals-graph-column\">{children}</div>\n        </div>\n      </div>\n    );\n  }\n\n  return children;\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, children: React.ReactNode, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.propTypes = {\n  children: PropTypes.node,\n  useGraphCardContext: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, children: React.ReactNode, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.defaultProps = {\n  children: null,\n  useGraphCardContext,\n  useMetricsSelector,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardMetricTotals as default, GraphCardMetricTotals };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useGetHostsInventory, useOnColumnSortHosts } from './inventoryCardContext';\nimport InventoryCard from './inventoryCard';\nimport { helpers } from '../../common';\n\n/**\n * @memberof InventoryCard\n * @module InventoryCardHosts\n */\n\n/**\n * A hosts' system inventory component.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useGetInventory\n * @param {Function} props.useOnColumnSort\n * @returns {React.ReactNode}\n */\nconst InventoryCardHosts = ({ ...props }) => <InventoryCard {...props} />;\n\n/**\n * Prop types.\n *\n * @type {{isDisabled: boolean, useGetInventory: Function, useOnColumnSort: Function}}\n */\nInventoryCardHosts.propTypes = {\n  isDisabled: PropTypes.bool,\n  useGetInventory: PropTypes.func,\n  useOnColumnSort: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{isDisabled: boolean, useGetInventory: Function, useOnColumnSort: Function}}\n */\nInventoryCardHosts.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_TABLE_HOSTS,\n  useGetInventory: useGetHostsInventory,\n  useOnColumnSort: useOnColumnSortHosts\n};\n\nexport { InventoryCardHosts as default, InventoryCardHosts };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  useProductInventorySubscriptionsConfig,\n  useProductInventorySubscriptionsQuery\n} from '../productView/productViewContext';\nimport {\n  useGetSubscriptionsInventory,\n  useOnPageSubscriptions,\n  useOnColumnSortSubscriptions\n} from './inventoryCardSubscriptionsContext';\nimport InventoryCard from '../inventoryCard/inventoryCard';\nimport { helpers } from '../../common';\n\n/**\n * @memberof Components\n * @module InventoryCardSubscriptions\n * @property {module} InventoryCardSubscriptionsContext\n */\n\n/**\n * A subscriptions' system inventory component.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useGetInventory\n * @param {Function} props.useOnPage\n * @param {Function} props.useOnColumnSort\n * @param {Function} props.useProductInventoryConfig\n * @param {Function} props.useProductInventoryQuery\n * @fires onColumnSort\n * @fires onPage\n * @returns {React.ReactNode}\n */\nconst InventoryCardSubscriptions = ({ ...props }) => <InventoryCard cardActions={null} {...props} />;\n\n/**\n * Prop types.\n *\n * @type {{useOnPage: Function, isDisabled: boolean, useProductInventoryConfig: Function, useGetInventory: Function,\n *     useOnColumnSort: Function, useProductInventoryQuery: Function}}\n */\nInventoryCardSubscriptions.propTypes = {\n  isDisabled: PropTypes.bool,\n  useGetInventory: PropTypes.func,\n  useOnPage: PropTypes.func,\n  useOnColumnSort: PropTypes.func,\n  useProductInventoryConfig: PropTypes.func,\n  useProductInventoryQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnPage: Function, isDisabled: boolean, useProductInventoryConfig: Function, useGetInventory: Function,\n *     useOnColumnSort: Function, useProductInventoryQuery: Function}}\n */\nInventoryCardSubscriptions.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS,\n  useGetInventory: useGetSubscriptionsInventory,\n  useOnPage: useOnPageSubscriptions,\n  useOnColumnSort: useOnColumnSortSubscriptions,\n  useProductInventoryConfig: useProductInventorySubscriptionsConfig,\n  useProductInventoryQuery: useProductInventorySubscriptionsQuery\n};\n\nexport { InventoryCardSubscriptions as default, InventoryCardSubscriptions };\n","import { useShallowCompareEffect } from 'react-use';\nimport _camelCase from 'lodash/camelCase';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { reduxActions, reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductInventorySubscriptionsQuery } from '../productView/productViewContext';\nimport {\n  RHSM_API_QUERY_INVENTORY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_INVENTORY_SUBSCRIPTIONS_SORT_TYPES as SORT_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * @memberof InventoryCardSubscriptions\n * @module InventoryCardSubscriptionsContext\n */\n\n/**\n * Combined Redux RHSM Actions, getSubscriptionsInventory, and inventory selector response.\n *\n * @param {object} options\n * @param {boolean} options.isDisabled\n * @param {Function} options.getInventory\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useProductInventoryQuery\n * @param {Function} options.useSelectorsResponse\n * @returns {Function}\n */\nconst useGetSubscriptionsInventory = ({\n  isDisabled = false,\n  getInventory = reduxActions.rhsm.getSubscriptionsInventory,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventorySubscriptionsQuery,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductInventoryQuery();\n  const dispatch = useAliasDispatch();\n  const { cancelled, pending, data, ...response } = useAliasSelectorsResponse(\n    ({ inventory }) => inventory?.subscriptionsInventory?.[productId]\n  );\n\n  useShallowCompareEffect(() => {\n    if (!isDisabled) {\n      getInventory(productId, query)(dispatch);\n    }\n  }, [dispatch, isDisabled, productId, query]);\n\n  return {\n    ...response,\n    pending: pending || cancelled || false,\n    data: (data?.length === 1 && data[0]) || data || {}\n  };\n};\n\n/**\n * An onPage callback for subscriptions inventory.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnPageSubscriptions = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for subscriptions inventory.\n   *\n   * @event onPage\n   * @param {object} params\n   * @param {number} params.offset\n   * @param {number} params.perPage\n   * @returns {void}\n   */\n  return ({ offset, perPage }) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.OFFSET],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.OFFSET]: offset\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.LIMIT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.LIMIT]: perPage\n      }\n    ]);\n  };\n};\n\n/**\n * An onColumnSort callback for subscriptions inventory.\n *\n * @param {object} options\n * @param {object} options.sortColumns\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnColumnSortSubscriptions = ({\n  sortColumns = SORT_TYPES,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for subscriptions inventory.\n   *\n   * @event onColumnSort\n   * @param {*} _data\n   * @param {object} params\n   * @param {string} params.direction\n   * @param {string} params.id\n   * @returns {void}\n   */\n  return (_data, { direction, id }) => {\n    const updatedSortColumn = Object.values(sortColumns).find(value => value === id || _camelCase(value) === id);\n    let updatedDirection;\n\n    if (!updatedSortColumn) {\n      if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n        console.warn(`Sorting can only be performed on select fields, confirm field ${id} is allowed.`);\n      }\n      return;\n    }\n\n    switch (direction) {\n      case SortByDirection.desc:\n        updatedDirection = SORT_DIRECTION_TYPES.DESCENDING;\n        break;\n      default:\n        updatedDirection = SORT_DIRECTION_TYPES.ASCENDING;\n        break;\n    }\n\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.DIRECTION],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.DIRECTION]: updatedDirection\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.SORT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.SORT]: updatedSortColumn\n      }\n    ]);\n  };\n};\n\nconst context = {\n  useGetSubscriptionsInventory,\n  useOnPageSubscriptions,\n  useOnColumnSortSubscriptions\n};\n\nexport {\n  context as default,\n  context,\n  useGetSubscriptionsInventory,\n  useOnPageSubscriptions,\n  useOnColumnSortSubscriptions\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * @memberof InventoryTabs\n * @module InventoryTab\n */\n\n/**\n * A tab pass-through component for passing props to InventoryTabs.\n *\n * @param {object} props\n * @param {boolean} props.active\n * @param {React.ReactNode} props.children\n * @param {string} props.title\n * @returns {React.ReactNode}\n */\n// eslint-disable-next-line no-unused-vars\nconst InventoryTab = ({ active, children, title }) => children;\n\n/**\n * Prop types.\n *\n * @type {{children: React.ReactNode, className: string}}\n */\nInventoryTab.propTypes = {\n  children: PropTypes.node.isRequired,\n  active: PropTypes.bool,\n  title: PropTypes.node.isRequired\n};\n\n/**\n * Default props.\n *\n * @type {{className: string}}\n */\nInventoryTab.defaultProps = {\n  active: false\n};\n\nexport { InventoryTab as default, InventoryTab };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Title } from '@patternfly/react-core';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct } from '../productView/productViewContext';\nimport { Tabs } from '../tabs/tabs';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { InventoryTab } from './inventoryTab';\n\n/**\n * An inventory tabs display with state. Consume Tabs.\n *\n * @see Tabs\n * @memberof Components\n * @module InventoryTabs\n * @property {module} InventoryTab\n */\n\n/**\n * Update tab state.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnTab = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ index } = {}) => {\n    dispatch({\n      type: reduxTypes.inventory.SET_INVENTORY_TAB,\n      tabs: {\n        [productId]: index\n      }\n    });\n  };\n};\n\n/**\n * An inventory tabs component.\n * Render inventory tabs using Inventory tab passed props only.\n *\n * @fires onTab\n * @param {object} props\n * @param {number} props.activeTab\n * @param {React.ReactNode} props.children\n * @param {number} props.defaultActiveTab\n * @param {boolean} props.isDisabled\n * @param {Function} props.t\n * @param {Function} props.useOnTab\n * @param {Function} props.useProduct\n * @param {Function} props.useSelector\n * @returns {React.ReactNode|null}\n */\nconst InventoryTabs = ({\n  activeTab,\n  children,\n  defaultActiveTab,\n  isDisabled,\n  t,\n  useOnTab: useAliasOnTab,\n  useProduct: useAliasProduct,\n  useSelector: useAliasSelector\n}) => {\n  const { productId } = useAliasProduct();\n  const updatedActiveTab = useAliasSelector(({ inventory }) => inventory.tabs?.[productId], activeTab);\n  const onTab = useAliasOnTab();\n\n  if (isDisabled) {\n    return null;\n  }\n\n  const updatedChildren = React.Children.toArray(children).map((child, index) => {\n    const { props: childProps = {} } = child;\n\n    return {\n      active: childProps.active || false,\n      content: childProps.children || child,\n      title: childProps.title || t('curiosity-inventory.tabSubHeading', { count: index })\n    };\n  });\n\n  return (\n    <React.Fragment>\n      <Title headingLevel=\"h2\" className=\"sr-only\">\n        {t('curiosity-inventory.tabHeading', { count: updatedChildren.length })}\n      </Title>\n      <Tabs activeTab={updatedActiveTab} defaultActiveTab={defaultActiveTab} onTab={onTab} tabs={updatedChildren} />\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnTab: Function, useProduct: Function, t: Function, children: React.ReactNode,\n *     useSelector: Function, defaultActiveTab: number, isDisabled: boolean, activeTab: number}}\n */\nInventoryTabs.propTypes = {\n  activeTab: PropTypes.number,\n  children: PropTypes.node.isRequired,\n  defaultActiveTab: PropTypes.number,\n  isDisabled: PropTypes.bool,\n  t: PropTypes.func,\n  useOnTab: PropTypes.func,\n  useProduct: PropTypes.func,\n  useSelector: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnTab: Function, useProduct: Function, t: translate, useSelector: Function,\n *     defaultActiveTab: number, isDisabled: boolean, activeTab: number}}\n */\nInventoryTabs.defaultProps = {\n  activeTab: 0,\n  defaultActiveTab: 0,\n  isDisabled: helpers.UI_DISABLED_TABLE,\n  t: translate,\n  useOnTab,\n  useProduct,\n  useSelector: storeHooks.reactRedux.useSelector\n};\n\nexport { InventoryTabs as default, InventoryTabs, InventoryTab, useOnTab };\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { routerContext } from '../router';\nimport { ProductViewContext } from './productViewContext';\nimport { PageLayout, PageHeader, PageSection, PageToolbar, PageMessages, PageColumns } from '../pageLayout/pageLayout';\nimport { GraphCard } from '../graphCard/graphCard';\nimport { Toolbar } from '../toolbar/toolbar';\nimport { InventoryCard } from '../inventoryCard/inventoryCard';\nimport { InventoryCardHosts } from '../inventoryCard/inventoryCardHosts';\nimport { helpers } from '../../common';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport { InventoryCardSubscriptions } from '../inventoryCardSubscriptions/inventoryCardSubscriptions';\nimport { RHSM_INTERNAL_PRODUCT_DISPLAY_TYPES as DISPLAY_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Primary product display component, and config context provider.\n *\n * @memberof Components\n * @module ProductView\n * @property {module} ProductViewContext\n * @property {module} ProductViewMissing\n */\n\n/**\n * ToDo: review removing the \"useCallback\" once the routing updates are in place\n */\n/**\n * Display products.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useRouteDetail\n * @returns {React.ReactNode}\n */\nconst ProductView = ({ t, useRouteDetail: useAliasRouteDetail }) => {\n  const { productGroup, productConfig } = useAliasRouteDetail();\n\n  const renderProduct = useCallback(() => {\n    const updated = config => {\n      const { initialInventoryFilters, initialSubscriptionsInventoryFilters, productDisplay, productId, viewId } =\n        config;\n\n      if (!productId || !viewId) {\n        return null;\n      }\n\n      return (\n        <ProductViewContext.Provider value={config} key={`product_${productId}`}>\n          <PageMessages>\n            <BannerMessages />\n          </PageMessages>\n          <PageToolbar>\n            <Toolbar />\n          </PageToolbar>\n          <PageSection>\n            <GraphCard />\n          </PageSection>\n          <PageSection className={(productDisplay === DISPLAY_TYPES.HOURLY && 'curiosity-page-section__tabs') || ''}>\n            <InventoryTabs\n              isDisabled={\n                (!initialInventoryFilters && !initialSubscriptionsInventoryFilters) || helpers.UI_DISABLED_TABLE\n              }\n            >\n              {!helpers.UI_DISABLED_TABLE_HOSTS &&\n                productDisplay !== DISPLAY_TYPES.HOURLY &&\n                productDisplay !== DISPLAY_TYPES.CAPACITY &&\n                initialInventoryFilters && (\n                  <InventoryTab\n                    key={`inventory_hosts_${productId}`}\n                    title={t('curiosity-inventory.tabHosts', { context: [productId] })}\n                  >\n                    <InventoryCardHosts />\n                  </InventoryTab>\n                )}\n              {!helpers.UI_DISABLED_TABLE_INSTANCES &&\n                productDisplay !== DISPLAY_TYPES.DUAL_AXES &&\n                productDisplay !== DISPLAY_TYPES.LEGACY &&\n                productDisplay !== DISPLAY_TYPES.PARTIAL &&\n                initialInventoryFilters && (\n                  <InventoryTab\n                    key={`inventory_instances_${productId}`}\n                    title={t('curiosity-inventory.tabInstances', { context: [productId] })}\n                  >\n                    <InventoryCard />\n                  </InventoryTab>\n                )}\n              {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && initialSubscriptionsInventoryFilters && (\n                <InventoryTab\n                  key={`inventory_subs_${productId}`}\n                  title={t('curiosity-inventory.tabSubscriptions', { context: [productId] })}\n                >\n                  <InventoryCardSubscriptions />\n                </InventoryTab>\n              )}\n            </InventoryTabs>\n          </PageSection>\n        </ProductViewContext.Provider>\n      );\n    };\n\n    return productConfig?.map(config => updated(config));\n  }, [productConfig, t]);\n\n  return (\n    (productGroup && (\n      <PageLayout>\n        <PageHeader productLabel={productGroup}>\n          {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: productGroup })}\n        </PageHeader>\n        <PageColumns>{renderProduct()}</PageColumns>\n      </PageLayout>\n    )) ||\n    null\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: translate, useRouteDetail: Function}}\n */\nProductView.propTypes = {\n  t: PropTypes.func,\n  useRouteDetail: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, useRouteDetail: Function}}\n */\nProductView.defaultProps = {\n  t: translate,\n  useRouteDetail: routerContext.useRouteDetail\n};\n\nexport { ProductView as default, ProductView };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tabs as PfTabs, Tab, TabTitleText, Grid, GridItem } from '@patternfly/react-core';\nimport _isEqualWith from 'lodash/isEqualWith';\nimport { helpers } from '../../common';\n\n/**\n * PF tabs with state.\n *\n * @memberof Components\n * @module Tabs\n */\n\n/**\n * FixMe: PF tabs misinterprets \"isElementInView\" when tab title nodes are loaded dynamically\n * It appears the use of isElementInView within PF tabs is trying to be predicative in using\n * \"getBoundingClientRect\" but produces questionable results in scenarios where content is\n * async created. isElementInView assumes some form of the content will always be there\n * instead of scenarios where someone tries to dynamically apply components. It may be good to\n * review using a window.setTimeout(() => handleScrollButtons()) in componentDidMount.\n *\n * Our temporary solution is to simply hide the buttons with a manual set flag affecting the\n * CSS class. This will most likely cause long-term issues.\n */\n/**\n * ToDo: Insights frontend components uses a custom tabs layout, investigate related CSS classes\n * Originally we applied the CSS classes, but they appeared to provide nothing. Since Insights\n * rolled its own tabs we're hesitant to apply said classes without understanding what they provide.\n */\n/**\n * A set of tabs.\n *\n * @augments React.Component\n * @fires onTab\n */\nclass Tabs extends React.Component {\n  state = {\n    updatedActiveTab: null,\n    updatedTabs: null\n  };\n\n  componentDidMount() {\n    const { updatedTabs } = this.state;\n\n    if (updatedTabs === null) {\n      this.setTabData();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { tabs } = this.props;\n    const customizer = (valueA, valueB) => {\n      if (typeof valueA === 'function' && typeof valueB === 'function') {\n        return valueA.toString() === valueB.toString();\n      }\n\n      return undefined;\n    };\n\n    if (!_isEqualWith(prevProps.tabs, tabs, customizer)) {\n      this.setTabData();\n    }\n  }\n\n  /**\n   * On tab selected\n   *\n   * @event onTab\n   * @param {object} params\n   * @param {number} params.index\n   */\n  onTab = ({ index }) => {\n    const { onTab } = this.props;\n\n    this.setState(\n      {\n        updatedActiveTab: index\n      },\n      () => onTab({ index })\n    );\n  };\n\n  /**\n   * Convert tab objects into the required PF Tab format.\n   */\n  setTabData() {\n    const { activeTab, defaultActiveTab, tabs } = this.props;\n    let updatedActiveTab = defaultActiveTab;\n\n    const updatedTabs = tabs.map(({ active, content, title }, index) => {\n      updatedActiveTab = active ? index : updatedActiveTab;\n\n      return (\n        <Tab key={title} eventKey={index} title={<TabTitleText>{title}</TabTitleText>}>\n          {content}\n        </Tab>\n      );\n    });\n\n    if (typeof activeTab === 'number') {\n      updatedActiveTab = activeTab;\n    }\n\n    this.setState({\n      updatedActiveTab,\n      updatedTabs\n    });\n  }\n\n  /**\n   * Apply props to tabs.\n   *\n   * @returns {React.ReactNode}\n   */\n  renderTabs() {\n    const { updatedActiveTab, updatedTabs } = this.state;\n    const { className, hasOverflowScroll } = this.props;\n\n    return (\n      <PfTabs\n        className={`curiosity-tabs${(!hasOverflowScroll && '__no-scroll') || ''} ${className || ''}`}\n        activeKey={updatedActiveTab}\n        onSelect={(event, index) => this.onTab({ event, index })}\n        mountOnEnter\n        unmountOnExit\n        inset={{\n          default: 'insetNone',\n          md: 'insetLg'\n        }}\n      >\n        {updatedTabs}\n      </PfTabs>\n    );\n  }\n\n  /**\n   * Render tabs.\n   *\n   * @returns {React.ReactNode}\n   */\n  render() {\n    return (\n      <Grid className=\"curiosity-tabs-container\">\n        <GridItem span={12}>{this.renderTabs()}</GridItem>\n      </Grid>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{tabs: Array, hasOverflowScroll: boolean, onTab: Function, className: string,\n *     defaultActiveTab: number, activeTab: number}}\n */\nTabs.propTypes = {\n  activeTab: PropTypes.number,\n  className: PropTypes.string,\n  defaultActiveTab: PropTypes.number,\n  hasOverflowScroll: PropTypes.bool,\n  onTab: PropTypes.func,\n  tabs: PropTypes.arrayOf(\n    PropTypes.shape({\n      active: PropTypes.bool,\n      content: PropTypes.node.isRequired,\n      title: PropTypes.node.isRequired\n    })\n  )\n};\n\n/**\n * Default props.\n *\n * @type {{tabs: Array, hasOverflowScroll: boolean, onTab: Function, className: string,\n *     defaultActiveTab: number, activeTab: number}}\n */\nTabs.defaultProps = {\n  activeTab: null,\n  className: '',\n  defaultActiveTab: 0,\n  hasOverflowScroll: false,\n  onTab: helpers.noop,\n  tabs: []\n};\n\nexport { Tabs as default, Tabs };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Toolbar as PfToolbar,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup\n} from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport { useProductToolbarQuery } from '../productView/productViewContext';\nimport { useToolbarFieldClear, useToolbarFieldClearAll, useToolbarFields } from './toolbarContext';\nimport { ToolbarFieldGroupVariant } from './toolbarFieldGroupVariant';\nimport { ToolbarFieldSelectCategory, useSelectCategoryOptions } from './toolbarFieldSelectCategory';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Primary view toolbar.\n *\n * @memberof Components\n * @module Toolbar\n * @property {module} ToolbarContext\n * @property {module} ToolbarFieldBillingProvider\n * @property {module} ToolbarFieldCategory\n * @property {module} ToolbarFieldDisplayName\n * @property {module} ToolbarFieldGranularity\n * @property {module} ToolbarFieldRangedMonthly\n * @property {module} ToolbarFieldSelectCategory\n * @property {module} ToolbarFieldSla\n * @property {module} ToolbarFieldUom\n * @property {module} ToolbarFieldUsage\n * @property {module} ToolbarFieldVariant\n */\n\n/**\n * Application filter toolbar.\n *\n * @fires onClearFilter\n * @fires onClearAll\n * @param {object} props\n * @param {boolean} props.hardFilterReset On clearing all fields allow the category to reset as well.\n * @param {boolean} props.isDisabled\n * @param {boolean} props.isGroupVariantDisabled\n * @param {Function} props.t\n * @param {Function} props.useProductToolbarQuery\n * @param {Function} props.useSelectCategoryOptions\n * @param {Function} props.useToolbarFieldClear\n * @param {Function} props.useToolbarFieldClearAll\n * @param {Function} props.useToolbarFields\n * @returns {React.ReactNode}\n */\nconst Toolbar = ({\n  hardFilterReset,\n  isDisabled,\n  isGroupVariantDisabled,\n  t,\n  useProductToolbarQuery: useAliasProductToolbarQuery,\n  useSelectCategoryOptions: useAliasSelectCategoryOptions,\n  useToolbarFieldClear: useAliasToolbarFieldClear,\n  useToolbarFieldClearAll: useAliasToolbarFieldClearAll,\n  useToolbarFields: useAliasToolbarFields\n}) => {\n  const toolbarFieldQueries = useAliasProductToolbarQuery();\n  const { currentCategory, options } = useAliasSelectCategoryOptions();\n  const clearField = useAliasToolbarFieldClear();\n  const clearAllFields = useAliasToolbarFieldClearAll();\n  const { itemFields, secondaryFields } = useAliasToolbarFields();\n\n  if (isDisabled || (isGroupVariantDisabled && !options?.length && !secondaryFields?.length)) {\n    return null;\n  }\n\n  if (!isGroupVariantDisabled && !options?.length && !secondaryFields?.length) {\n    return <ToolbarFieldGroupVariant isStandalone />;\n  }\n\n  /**\n   * Clear a specific value\n   *\n   * @event onClearFilter\n   * @param {object} params\n   * @param {*} params.value\n   * @returns {void}\n   */\n  const onClearFilter = ({ value }) => clearField(value);\n\n  /**\n   * Clear all active filters.\n   *\n   * @event onClearAll\n   * @returns {void}\n   */\n  const onClearAll = () => clearAllFields(hardFilterReset);\n\n  /**\n   * Set selected options for chip display.\n   *\n   * @param {object} params\n   * @param {*} params.value\n   * @returns {Array}\n   */\n  const setSelectedOptions = ({ value: filterName } = {}) => {\n    const filterValue = toolbarFieldQueries?.[filterName];\n    return (\n      (typeof filterValue === 'string' && [\n        t('curiosity-toolbar.label', { context: [filterName, (filterValue === '' && 'none') || filterValue] })\n      ]) ||\n      []\n    );\n  };\n\n  return (\n    <PfToolbar\n      id=\"curiosity-toolbar\"\n      className=\"curiosity-toolbar pf-m-toggle-group-container ins-c-primary-toolbar\"\n      collapseListedFiltersBreakpoint=\"sm\"\n      clearAllFilters={onClearAll}\n      clearFiltersButtonText={t('curiosity-toolbar.clearFilters')}\n    >\n      {!isGroupVariantDisabled && <ToolbarFieldGroupVariant />}\n      <ToolbarContent>\n        <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"md\">\n          <ToolbarGroup variant=\"filter-group\">\n            {options.length > 1 && (\n              <ToolbarItem>\n                <ToolbarFieldSelectCategory />\n              </ToolbarItem>\n            )}\n            {options.map(({ title, value: filterName, component: OptionComponent, isClearable }) => {\n              const chipProps = { categoryName: title };\n\n              if (isClearable !== false) {\n                chipProps.chips = setSelectedOptions({ value: filterName });\n                chipProps.deleteChip = () => onClearFilter({ value: filterName });\n              }\n\n              return (\n                <ToolbarFilter\n                  key={filterName}\n                  showToolbarItem={currentCategory === filterName || options.length === 1}\n                  {...chipProps}\n                >\n                  <OptionComponent isFilter />\n                </ToolbarFilter>\n              );\n            })}\n          </ToolbarGroup>\n        </ToolbarToggleGroup>\n        <ToolbarGroup key=\"itemFields\">{itemFields}</ToolbarGroup>\n        <ToolbarGroup key=\"secondaryFields\" alignment={{ default: 'alignRight' }}>\n          {secondaryFields}\n        </ToolbarGroup>\n      </ToolbarContent>\n    </PfToolbar>\n  );\n};\n\n/**\n * Prop types\n *\n * @type {{useToolbarFieldClear: Function, t: Function, useSelectCategoryOptions: Function, hardFilterReset: boolean,\n *     useToolbarFields: Function, isGroupVariantDisabled: boolean, useProductToolbarQuery: Function, isDisabled: boolean,\n *     useToolbarFieldClearAll: Function}}\n */\nToolbar.propTypes = {\n  hardFilterReset: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  isGroupVariantDisabled: PropTypes.bool,\n  t: PropTypes.func,\n  useProductToolbarQuery: PropTypes.func,\n  useSelectCategoryOptions: PropTypes.func,\n  useToolbarFieldClear: PropTypes.func,\n  useToolbarFieldClearAll: PropTypes.func,\n  useToolbarFields: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useToolbarFieldClear: Function, t: translate, useSelectCategoryOptions: Function, hardFilterReset: boolean,\n *     useToolbarFields: Function, isGroupVariantDisabled: boolean, useProductToolbarQuery: Function, isDisabled: boolean,\n *     useToolbarFieldClearAll: Function}}\n */\nToolbar.defaultProps = {\n  hardFilterReset: false,\n  isDisabled: helpers.UI_DISABLED_TOOLBAR,\n  isGroupVariantDisabled: helpers.UI_DISABLED_TOOLBAR_GROUP_VARIANT,\n  t: translate,\n  useProductToolbarQuery,\n  useSelectCategoryOptions,\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFields\n};\n\nexport { Toolbar as default, Toolbar };\n","import React, { useMemo } from 'react';\nimport { ToolbarItem } from '@patternfly/react-core';\nimport { useProductQuery, useProductToolbarConfig } from '../productView/productViewContext';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { useOnSelect as useSelectCategoryOnSelect, toolbarFieldOptions } from './toolbarFieldSelectCategory';\nimport { useOnSelect as useBillingProviderOnSelect } from './toolbarFieldBillingProvider';\nimport { useOnSelect as useCategoryOnSelect } from './toolbarFieldCategory';\nimport { useOnSelect as useSlaOnSelect } from './toolbarFieldSla';\nimport { useOnSelect as useUsageOnSelect } from './toolbarFieldUsage';\nimport { useOnSelect as useVariantOnSelect } from './toolbarFieldVariant';\nimport { helpers } from '../../common/helpers';\n\n/**\n * @memberof Toolbar\n * @module ToolbarContext\n */\n\n/**\n * Clear a specific toolbar category using a select component's OnSelect hook.\n *\n * @param {object} options\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useCategoryOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @param {Function} options.useVariantOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClear = ({\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useCategoryOnSelect: useAliasCategoryOnSelect = useCategoryOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect,\n  useVariantOnSelect: useAliasVariantOnSelect = useVariantOnSelect\n} = {}) => {\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const categoryOnSelect = useAliasCategoryOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n  const variantOnSelect = useAliasVariantOnSelect();\n\n  return field => {\n    switch (field) {\n      case RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER:\n        billingOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.CATEGORY:\n        categoryOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.SLA:\n        slaOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.USAGE:\n        usageOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.VARIANT:\n        variantOnSelect();\n        break;\n      default:\n        break;\n    }\n  };\n};\n\n/**\n * Clear all available toolbar categories.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useSelectCategoryOnSelect\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useCategoryOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @param {Function} options.useVariantOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClearAll = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useSelectCategoryOnSelect: useAliasSelectCategoryOnSelect = useSelectCategoryOnSelect,\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useCategoryOnSelect: useAliasCategoryOnSelect = useCategoryOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect,\n  useVariantOnSelect: useAliasVariantOnSelect = useVariantOnSelect\n} = {}) => {\n  const {\n    [RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER]: billingProvider,\n    [RHSM_API_QUERY_SET_TYPES.CATEGORY]: category,\n    [RHSM_API_QUERY_SET_TYPES.SLA]: sla,\n    [RHSM_API_QUERY_SET_TYPES.USAGE]: usage,\n    [RHSM_API_QUERY_SET_TYPES.VARIANT]: variant\n  } = useAliasProductQuery();\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const categoryOnSelect = useAliasCategoryOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n  const selectCategoryOnSelect = useAliasSelectCategoryOnSelect();\n  const variantOnSelect = useAliasVariantOnSelect();\n\n  return hardFilterReset => {\n    if (typeof billingProvider === 'string') {\n      billingOnSelect();\n    }\n\n    if (typeof category === 'string') {\n      categoryOnSelect();\n    }\n\n    if (typeof sla === 'string') {\n      slaOnSelect();\n    }\n\n    if (typeof usage === 'string') {\n      usageOnSelect();\n    }\n\n    if (typeof variant === 'string') {\n      variantOnSelect();\n    }\n\n    if (hardFilterReset) {\n      selectCategoryOnSelect();\n    }\n  };\n};\n\n/**\n * Return lists of item and secondary toolbar fields for display.\n *\n * @param {object} options\n * @param {Array} options.categoryOptions\n * @param {Function} options.useProductToolbarConfig\n * @returns {Array}\n */\nconst useToolbarFields = ({\n  categoryOptions = toolbarFieldOptions,\n  useProductToolbarConfig: useAliasProductToolbarConfig = useProductToolbarConfig\n} = {}) => {\n  const { filters = [] } = useAliasProductToolbarConfig();\n\n  return useMemo(() => {\n    const setFilter = ({ id, content, ...filterProps }) => {\n      const option = categoryOptions.find(({ value: categoryOptionValue }) => id === categoryOptionValue);\n      const { component: OptionComponent } = option || {};\n\n      return (\n        (OptionComponent && (\n          <ToolbarItem key={`option-${id}`}>\n            <OptionComponent isFilter={false} {...filterProps} />\n          </ToolbarItem>\n        )) || (\n          <ToolbarItem key={id || helpers.generateId()}>\n            {typeof content === 'function' ? content() : content}\n          </ToolbarItem>\n        ) ||\n        null\n      );\n    };\n\n    return {\n      itemFields: filters.filter(({ isItem }) => isItem === true).map(setFilter),\n      secondaryFields: filters.filter(({ isSecondary }) => isSecondary === true).map(setFilter)\n    };\n  }, [categoryOptions, filters]);\n};\n\nconst context = {\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFields\n};\n\nexport { context as default, context, useToolbarFieldClear, useToolbarFieldClearAll, useToolbarFields };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Toolbar as PfToolbar, ToolbarContent, ToolbarItem, ToolbarItemVariant } from '@patternfly/react-core';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport { translate } from '../i18n/i18n';\nimport { routerContext } from '../router';\n\n/**\n * A toolbar product configuration select filter requiring a toolbar component parent.\n *\n * @memberof Toolbar\n * @module ToolbarFieldGroupVariant\n */\n\n/**\n * Generate select field options from config\n *\n * @param {object} options\n * @param {Function} options.useRouteDetail\n * @returns {Function}\n */\nconst useToolbarFieldOptions = ({ useRouteDetail: useAliasRouteDetail = routerContext.useRouteDetail } = {}) => {\n  const { availableVariants, firstMatch } = useAliasRouteDetail();\n  const options = [];\n\n  availableVariants?.forEach(variant => {\n    options.push({ title: variant, value: variant, selected: variant === firstMatch?.productId });\n  });\n\n  return options;\n};\n\n/**\n * On select update.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productGroup } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.app.SET_PRODUCT_VARIANT_QUERY_RESET_ALL,\n        productGroup\n      },\n      {\n        type: reduxTypes.app.SET_PRODUCT_VARIANT,\n        variant: value,\n        productGroup\n      }\n    ]);\n  };\n};\n\n/**\n * Display a product configuration field with generated options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {boolean} props.isStandalone\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProduct\n * @param {Function} props.useSelector\n * @param {Function} props.useToolbarFieldOptions\n * @returns {React.ReactNode}\n */\nconst ToolbarFieldGroupVariant = ({\n  isFilter,\n  isStandalone,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProduct: useAliasProduct,\n  useSelector: useAliasSelector,\n  useToolbarFieldOptions: useAliasToolbarFieldOptions\n}) => {\n  const { productGroup } = useAliasProduct();\n  const updatedValue = useAliasSelector(({ view }) => view?.product?.variant?.[productGroup], null);\n  const onSelect = useAliasOnSelect();\n  const options = useAliasToolbarFieldOptions();\n  const updatedOptions = options.map(option => ({\n    ...option,\n    selected: (updatedValue && option.value === updatedValue) || option?.selected\n  }));\n\n  if (options?.length <= 1) {\n    return null;\n  }\n\n  const element = (\n    <ToolbarContent>\n      <ToolbarItem variant={ToolbarItemVariant.label}>\n        {t('curiosity-toolbar.label', { context: ['groupVariant'] })}{' '}\n      </ToolbarItem>\n      <Select\n        aria-label={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'groupVariant'] })}\n        onSelect={onSelect}\n        options={updatedOptions}\n        selectedOptions={updatedValue}\n        placeholder={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'groupVariant'] })}\n        position={position}\n        data-test=\"toolbarFieldGroupVariant\"\n      />\n    </ToolbarContent>\n  );\n\n  return (\n    (isStandalone && (\n      <PfToolbar\n        id=\"curiosity-toolbar\"\n        className=\"curiosity-toolbar pf-m-toggle-group-container ins-c-primary-toolbar\"\n        collapseListedFiltersBreakpoint=\"sm\"\n      >\n        {element}\n      </PfToolbar>\n    )) ||\n    element\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, useProduct: Function, t: Function, useSelector: Function, isFilter: boolean,\n *     isStandalone: boolean, position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldGroupVariant.propTypes = {\n  isFilter: PropTypes.bool,\n  isStandalone: PropTypes.bool,\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProduct: PropTypes.func,\n  useSelector: PropTypes.func,\n  useToolbarFieldOptions: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, useProduct: Function, t: translate, useSelector: Function, isFilter: boolean,\n *     isStandalone: boolean, position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldGroupVariant.defaultProps = {\n  isFilter: false,\n  isStandalone: false,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProduct,\n  useSelector: storeHooks.reactRedux.useSelector,\n  useToolbarFieldOptions\n};\n\nexport { ToolbarFieldGroupVariant as default, ToolbarFieldGroupVariant, useOnSelect, useToolbarFieldOptions };\n"],"names":["BannerMessages","_ref","useAliasBannerMessages","useBannerMessages","useAliasRemoveBannerMessages","useRemoveBannerMessages","bannerMessages","removeBannerMessages","length","React","className","AlertGroup","isLiveRegion","map","_ref2","id","message","title","_ref2$variant","variant","AlertVariant","actionClose","AlertActionCloseButton","onClose","Alert","key","isInline","defaultProps","arguments","undefined","_ref$useProduct","useProduct","useAliasProduct","_ref$useSelector","useSelector","useAliasSelector","storeHooks","productId","_messages$bannerMessa","messages","_ref3","_ref3$useDispatch","useDispatch","useAliasDispatch","_ref3$useProduct","_ref3$useBannerMessag","dispatch","useCallback","idTitle","Array","isArray","filteredMessages","filter","_ref4","type","reduxTypes","viewId","useSetBannerMessages","_ref5","_ref5$useDispatch","_ref5$useProduct","_ref5$useBannerMessag","updatedMessages","concat","_toConsumableArray","value","helpers","console","warn","context","GraphCard","isDisabled","filtersSettings","useAliasParseFiltersSettings","useParseFiltersSettings","filterSetting","_filterSetting$settin","_filterSetting$settin2","_filterSetting$settin3","GraphCardContext","settings","metrics","GraphCardMetricTotals","GraphCardChart","_settings$cards","children","useAliasGraphCardContext","useGraphCardContext","useAliasMetricsSelector","useMetricsSelector","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","_useAliasGraphCardCon2","startDate","RHSM_API_QUERY_SET_TYPES","_useAliasMetricsSelec","pending","error","fulfilled","_useAliasMetricsSelec2","dataSets","_ref2$data","data","firstChartId","firstMetricId","metric","_ref2$meta","meta","lastDate","date","lastHasData","hasData","lastValue","y","find","isCurrentDate","currentDate","currentHasData","currentValue","monthlyDate","totalMonthlyDate","monthlyHasData","totalMonthlyHasData","monthlyValue","totalMonthlyValue","_ref6","toolbarFieldOptions","option","toISOString","selectedMonth","isCurrent","dailyDate","dailyHasData","dailyValue","isMetricDisplay","cards","_settings$groupMetric","_settings$groupMetric2","_settings$cards2","metricDisplayPassedData","chartId","metricId","groupMetricId","groupMetric","selectedValue","_camelCase","join","JSON","stringify","_ref7","index","header","body","footer","Card","isPlain","CardHeader","CardTitle","Title","headingLevel","size","Loader","skeletonProps","SkeletonSize","CardBody","height","CardFooter","InventoryCardHosts","props","Object","assign","_objectDestructuringEmpty","InventoryCard","useGetInventory","useGetHostsInventory","useOnColumnSort","useOnColumnSortHosts","InventoryCardSubscriptions","cardActions","useGetSubscriptionsInventory","useOnPage","useOnPageSubscriptions","useOnColumnSortSubscriptions","useProductInventoryConfig","useProductInventorySubscriptionsConfig","useProductInventoryQuery","useProductInventorySubscriptionsQuery","_ref$isDisabled","_ref$getInventory","getInventory","reduxActions","_ref$useDispatch","_ref$useProductInvent","useAliasProductInventoryQuery","_ref$useSelectorsResp","useSelectorsResponse","useAliasSelectorsResponse","query","_useAliasSelectorsRes","_inventory$subscripti","inventory","subscriptionsInventory","cancelled","response","_objectWithoutProperties","_excluded","useShallowCompareEffect","_objectSpread","offset","perPage","_defineProperty","_ref7$sortColumns","sortColumns","SORT_TYPES","_ref7$useDispatch","_ref7$useProduct","_data","_ref8","updatedDirection","direction","updatedSortColumn","values","SortByDirection","SORT_DIRECTION_TYPES","InventoryTab","active","propTypes","PropTypes","useOnTab","tabs","InventoryTabs","activeTab","defaultActiveTab","t","useAliasOnTab","updatedActiveTab","_inventory$tabs","onTab","updatedChildren","child","_child$props","childProps","content","count","Tabs","translate","ProductView","_useAliasRouteDetail","useAliasRouteDetail","useRouteDetail","productGroup","productConfig","renderProduct","config","initialInventoryFilters","initialSubscriptionsInventoryFilters","productDisplay","ProductViewContext","PageMessages","PageToolbar","Toolbar","PageSection","DISPLAY_TYPES","updated","PageLayout","PageHeader","productLabel","appName","PageColumns","routerContext","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","_key","call","apply","state","updatedTabs","setState","_createClass","this","setTabData","prevProps","_isEqualWith","valueA","valueB","toString","_this$props","Tab","eventKey","TabTitleText","_this2","_this$state","_this$props2","hasOverflowScroll","PfTabs","activeKey","onSelect","event","mountOnEnter","unmountOnExit","inset","default","md","Grid","GridItem","span","renderTabs","hardFilterReset","isGroupVariantDisabled","useAliasProductToolbarQuery","useProductToolbarQuery","useAliasSelectCategoryOptions","useSelectCategoryOptions","useAliasToolbarFieldClear","useToolbarFieldClear","useAliasToolbarFieldClearAll","useToolbarFieldClearAll","useAliasToolbarFields","useToolbarFields","toolbarFieldQueries","_useAliasSelectCatego","currentCategory","options","clearField","clearAllFields","_useAliasToolbarField","itemFields","secondaryFields","PfToolbar","collapseListedFiltersBreakpoint","clearAllFilters","clearFiltersButtonText","ToolbarFieldGroupVariant","ToolbarContent","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarGroup","ToolbarItem","ToolbarFieldSelectCategory","filterName","OptionComponent","component","chipProps","categoryName","isClearable","chips","filterValue","setSelectedOptions","deleteChip","ToolbarFilter","showToolbarItem","isFilter","alignment","isStandalone","_ref$useBillingProvid","useBillingProviderOnSelect","useAliasBillingProviderOnSelect","_ref$useCategoryOnSel","useCategoryOnSelect","useAliasCategoryOnSelect","_ref$useSlaOnSelect","useSlaOnSelect","useAliasSlaOnSelect","_ref$useUsageOnSelect","useUsageOnSelect","useAliasUsageOnSelect","_ref$useVariantOnSele","useVariantOnSelect","useAliasVariantOnSelect","billingOnSelect","categoryOnSelect","slaOnSelect","usageOnSelect","variantOnSelect","field","_ref2$useProductQuery","useProductQuery","useAliasProductQuery","_ref2$useSelectCatego","useSelectCategoryOnSelect","useAliasSelectCategoryOnSelect","_ref2$useBillingProvi","_ref2$useCategoryOnSe","_ref2$useSlaOnSelect","_ref2$useUsageOnSelec","_ref2$useVariantOnSel","_useAliasProductQuery","billingProvider","category","sla","usage","selectCategoryOnSelect","_ref3$categoryOptions","categoryOptions","_ref3$useProductToolb","useProductToolbarConfig","_useAliasProductToolb2","filters","useMemo","setFilter","filterProps","categoryOptionValue","isItem","isSecondary","useToolbarFieldOptions","_ref$useRouteDetail","availableVariants","firstMatch","forEach","push","selected","useOnSelect","_ref2$useDispatch","_ref2$useProduct","_ref3$value","position","useAliasOnSelect","useAliasToolbarFieldOptions","updatedValue","_view$product","_view$product$variant","view","product","updatedOptions","element","ToolbarItemVariant","Select","selectedOptions","placeholder","SelectPosition"],"sourceRoot":""}