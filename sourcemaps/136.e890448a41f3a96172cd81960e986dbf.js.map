{"version":3,"file":"js/136.066c06092a345093f0a8.js","mappings":"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","sources":["webpack:///./src/components/toolbar/toolbarFieldGranularity.js","webpack:///./src/components/toolbar/toolbarFieldSelectCategory.js","webpack:///./src/components/toolbar/toolbarFieldSla.js","webpack:///./src/components/toolbar/toolbarFieldUom.js","webpack:///./src/components/toolbar/toolbarFieldUsage.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.granularity', { context: type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update granularity.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    const { startDate, endDate } = dateHelpers.getRangedDateTime(value);\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: value\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      }\n    ]);\n  };\n};\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {Array} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst ToolbarFieldGranularity = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_TYPES.GRANULARITY]: updatedValue } = useAliasProductGraphTallyQuery();\n  const onSelect = useAliasOnSelect();\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'granularity' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'granularity' })}\n      position={position}\n      data-test=\"toolbarFieldGranularity\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldGranularity.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldGranularity.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductGraphTallyQuery\n};\n\nexport { ToolbarFieldGranularity as default, ToolbarFieldGranularity, toolbarFieldOptions, useOnSelect };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport { useShallowCompareEffect } from 'react-use';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductToolbarConfig } from '../productView/productViewContext';\nimport { Select } from '../form/select';\nimport { RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\nimport { ToolbarFieldGranularity, toolbarFieldOptions as granularityOptions } from './toolbarFieldGranularity';\nimport { ToolbarFieldRangedMonthly, toolbarFieldOptions as rangedMonthlyOptions } from './toolbarFieldRangedMonthly';\nimport { ToolbarFieldSla, toolbarFieldOptions as slaOptions } from './toolbarFieldSla';\nimport { ToolbarFieldUom, toolbarFieldOptions as uomOptions } from './toolbarFieldUom';\nimport { ToolbarFieldUsage, toolbarFieldOptions as usageOptions } from './toolbarFieldUsage';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = [\n  {\n    title: translate('curiosity-toolbar.category', { context: RHSM_API_QUERY_TYPES.GRANULARITY }),\n    value: RHSM_API_QUERY_TYPES.GRANULARITY,\n    component: <ToolbarFieldGranularity key=\"selectCategory_granularity\" isFilter />,\n    options: granularityOptions,\n    isClearable: false\n  },\n  {\n    title: translate('curiosity-toolbar.category', { context: 'rangedMonthly' }),\n    value: 'rangedMonthly',\n    component: <ToolbarFieldRangedMonthly key=\"selectCategory_rangedMonthly\" isFilter />,\n    options: rangedMonthlyOptions,\n    isClearable: false\n  },\n  {\n    title: translate('curiosity-toolbar.category', { context: RHSM_API_QUERY_TYPES.UOM }),\n    value: RHSM_API_QUERY_TYPES.UOM,\n    component: <ToolbarFieldUom key=\"selectCategory_uom\" isFilter />,\n    options: uomOptions,\n    isClearable: false\n  },\n  {\n    title: translate('curiosity-toolbar.category', { context: RHSM_API_QUERY_TYPES.SLA }),\n    value: RHSM_API_QUERY_TYPES.SLA,\n    component: <ToolbarFieldSla key=\"selectCategory_sla\" isFilter />,\n    options: slaOptions,\n    isClearable: true\n  },\n  {\n    title: translate('curiosity-toolbar.category', { context: RHSM_API_QUERY_TYPES.USAGE }),\n    value: RHSM_API_QUERY_TYPES.USAGE,\n    component: <ToolbarFieldUsage key=\"selectCategory_usage\" isFilter />,\n    options: usageOptions,\n    isClearable: true\n  }\n].map(option => ({\n  ...option,\n  selected: false\n}));\n\n/**\n * On select update category.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.toolbar.SET_FILTER_TYPE,\n        viewId,\n        currentFilter: value\n      }\n    ]);\n  };\n};\n\n/**\n * Return filtered category options, current, and initial value.\n *\n * @param {object} options\n * @param {Array} options.categoryOptions\n * @param {Function} options.useProduct\n * @param {Function} options.useProductToolbarConfig\n * @param {Function} options.useSelector\n * @returns {object}\n */\nconst useSelectCategoryOptions = ({\n  categoryOptions = toolbarFieldOptions,\n  useProduct: useAliasProduct = useProduct,\n  useProductToolbarConfig: useAliasProductToolbarConfig = useProductToolbarConfig,\n  useSelector: useAliasSelector = storeHooks.reactRedux.useSelector\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const { currentFilter: updatedValue } = useAliasSelector(({ toolbar }) => toolbar.filters?.[viewId], {});\n  const { filters = [] } = useAliasProductToolbarConfig();\n\n  let initialValue;\n\n  const updatedOptions = filters.map(({ id, selected }) => {\n    const option = categoryOptions.find(({ value }) => id === value);\n\n    if (updatedValue === undefined && selected) {\n      initialValue = option.value;\n    }\n\n    return {\n      ...option,\n      selected: (updatedValue === undefined && selected) || updatedValue === option.value\n    };\n  });\n\n  return {\n    currentCategory: updatedValue,\n    initialCategory: initialValue,\n    options: updatedOptions\n  };\n};\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useSelectCategoryOptions\n * @returns {Node}\n */\nconst ToolbarFieldSelectCategory = ({\n  t,\n  useOnSelect: useAliasOnSelect,\n  useSelectCategoryOptions: useAliasSelectCategoryOptions\n}) => {\n  const { currentCategory: updatedValue, initialCategory: initialValue, options } = useAliasSelectCategoryOptions();\n  const onSelect = useAliasOnSelect();\n\n  useShallowCompareEffect(() => {\n    if (initialValue) {\n      onSelect({ value: initialValue });\n    }\n  }, [initialValue, onSelect]);\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder_filter')}\n      onSelect={onSelect}\n      options={options}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder_filter')}\n      toggleIcon={<FilterIcon />}\n      data-test=\"toolbarFieldCategory\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, useSelectCategoryOptions: Function}}\n */\nToolbarFieldSelectCategory.propTypes = {\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useSelectCategoryOptions: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, useSelectCategoryOptions: Function}}\n */\nToolbarFieldSelectCategory.defaultProps = {\n  t: translate,\n  useOnSelect,\n  useSelectCategoryOptions\n};\n\nexport {\n  ToolbarFieldSelectCategory as default,\n  ToolbarFieldSelectCategory,\n  toolbarFieldOptions,\n  useOnSelect,\n  useSelectCategoryOptions\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_SLA_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.sla', { context: (type === '' && 'none') || type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update sla.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.SLA],\n        viewId,\n        [RHSM_API_QUERY_TYPES.SLA]: value\n      }\n    ]);\n  };\n};\n\n/**\n * Display a sla field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {object} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductQuery\n * @returns {Node}\n */\nconst ToolbarFieldSla = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductQuery: useAliasProductQuery\n}) => {\n  const { [RHSM_API_QUERY_TYPES.SLA]: updatedValue } = useAliasProductQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'sla' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'sla' })}\n      position={position}\n      data-test=\"toolbarFieldSla\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldSla.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldSla.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductQuery\n};\n\nexport { ToolbarFieldSla as default, ToolbarFieldSla, toolbarFieldOptions, useOnSelect };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_UOM_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.uom', { context: type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update uom.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) =>\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.UOM],\n        viewId,\n        [RHSM_API_QUERY_TYPES.UOM]: value\n      }\n    ]);\n};\n\n/**\n * Display a unit of measure (uom) field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {Array} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductQuery\n * @returns {Node}\n */\nconst ToolbarFieldUom = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductQuery: useAliasProductQuery\n}) => {\n  const { [RHSM_API_QUERY_TYPES.UOM]: updatedValue } = useAliasProductQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'uom' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'uom' })}\n      position={position}\n      data-test=\"toolbarFieldUom\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldUom.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldUom.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductQuery\n};\n\nexport { ToolbarFieldUom as default, ToolbarFieldUom, toolbarFieldOptions, useOnSelect };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_USAGE_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.usage', { context: (type === '' && 'unspecified') || type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update usage.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) =>\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.USAGE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.USAGE]: value\n      }\n    ]);\n};\n\n/**\n * Display a usage field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {object} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductQuery\n * @returns {Node}\n */\nconst ToolbarFieldUsage = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductQuery: useAliasProductQuery\n}) => {\n  const { [RHSM_API_QUERY_TYPES.USAGE]: updatedValue } = useAliasProductQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'usage' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'usage' })}\n      position={position}\n      data-test=\"toolbarFieldUsage\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldUsage.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\n\nToolbarFieldUsage.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductQuery\n};\n\nexport { ToolbarFieldUsage as default, ToolbarFieldUsage, toolbarFieldOptions, useOnSelect };\n"],"names":["toolbarFieldOptions","Object","values","FIELD_TYPES","map","type","title","translate","context","value","selected","useOnSelect","useDispatch","useAliasDispatch","storeHooks","useProduct","useAliasProduct","viewId","dispatch","dateHelpers","startDate","endDate","reduxTypes","RHSM_API_QUERY_TYPES","toISOString","ToolbarFieldGranularity","isFilter","options","position","t","useAliasOnSelect","updatedValue","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","onSelect","updatedOptions","option","Select","selectedOptions","placeholder","defaultProps","SelectPosition","component","key","granularityOptions","isClearable","ToolbarFieldRangedMonthly","rangedMonthlyOptions","ToolbarFieldUom","uomOptions","ToolbarFieldSla","slaOptions","ToolbarFieldUsage","usageOptions","currentFilter","useSelectCategoryOptions","initialValue","categoryOptions","useProductToolbarConfig","useAliasProductToolbarConfig","useSelector","useAliasSelector","toolbar","filters","id","find","undefined","currentCategory","initialCategory","ToolbarFieldSelectCategory","useAliasSelectCategoryOptions","useShallowCompareEffect","toggleIcon","FilterIcon","useAliasProductQuery","useProductQuery"],"sourceRoot":""}