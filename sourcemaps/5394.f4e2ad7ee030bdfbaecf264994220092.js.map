{"version":3,"file":"js/5394.91382776c8a444a6b456.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardContext.js","webpack:///./src/components/productView/productViewContext.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Chart context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{ settings: { isStandalone: false, metrics: [], metric: undefined } }, helpers.noop];\n\nconst GraphCardContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated graph card context.\n *\n * @returns {React.Context<{}>}\n */\nconst useGraphCardContext = () => useContext(GraphCardContext);\n\n/**\n * Use Redux RHSM Actions, getGraphTally.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProductGraphTallyQuery\n * @returns {Function}\n */\nconst useGetGraphTally = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery\n} = {}) => {\n  const query = useAliasProductGraphTallyQuery();\n  const dispatch = useAliasDispatch();\n\n  return metrics => reduxActions.rhsm.getGraphTally(metrics, query)(dispatch);\n};\n\n/**\n * Get multiple metrics from store.\n *\n * @param {object} options\n * @param {Function} options.useGraphCardContext\n * @param {Function} options.useSelectors\n * @param {Function} options.useProduct\n * @returns {{data: object, pending: boolean, fulfilled: boolean, dataSets: Array, error: boolean}}\n */\nconst useMetricsSelector = ({\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useSelectors: useAliasSelectors = storeHooks.reactRedux.useSelectors,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n  const data = {};\n\n  const metricResponses = useAliasSelectors(\n    metrics.map(\n      ({ id: metricId }) =>\n        ({ graph }) =>\n          graph.tally?.[`${productId}_${metricId}`]\n    ),\n    []\n  );\n\n  let isPending = false;\n  let isFulfilled = false;\n  let errorCount = 0;\n\n  const dataSets = metricResponses.map((metric, index) => {\n    const { pending, fulfilled, error, cancelled } = metric || {};\n    const updatedPending = pending || cancelled || false;\n\n    if (updatedPending) {\n      isPending = true;\n    }\n\n    if (fulfilled) {\n      isFulfilled = true;\n    }\n\n    if (error) {\n      errorCount += 1;\n    }\n\n    const updatedMetric = {\n      ...metrics[index],\n      data: metric?.data?.data || [],\n      meta: metric?.data?.meta || {}\n    };\n    data[metrics[index].id] = updatedMetric;\n\n    return updatedMetric;\n  });\n\n  const response = {\n    data,\n    dataSets,\n    error: false,\n    fulfilled: false,\n    pending: false\n  };\n\n  if (errorCount === dataSets.length) {\n    response.error = true;\n  } else if (isPending) {\n    response.pending = true;\n  } else if (isFulfilled) {\n    response.fulfilled = true;\n  }\n\n  return response;\n};\n\nconst context = {\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetGraphTally,\n  useGraphCardContext,\n  useMetricsSelector\n};\n\nexport {\n  context as default,\n  context,\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetGraphTally,\n  useGraphCardContext,\n  useMetricsSelector\n};\n","import React, { useCallback, useContext } from 'react';\nimport { reduxHelpers } from '../../redux/common';\nimport { storeHooks } from '../../redux/hooks';\nimport { RHSM_API_QUERY_TYPES, rhsmApiTypes } from '../../types/rhsmApiTypes';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Route context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{}, helpers.noop];\n\nconst ProductViewContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated product view context.\n *\n * @returns {React.Context<{}>}\n */\nconst useProductViewContext = () => useContext(ProductViewContext);\n\n/**\n * Return a query object from initial product config and Redux store.\n *\n * @param {string} queryType An identifier used to pull from both config and Redux, they should named the same.\n * @param {object} options\n * @param {object} options.useProductViewContext\n * @returns {object}\n */\nconst useProductQueryFactory = (\n  queryType,\n  { useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}\n) => {\n  const { [queryType]: initialQuery, productId, viewId } = useAliasProductViewContext();\n  const queryProduct = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[productId], undefined);\n  const queryView = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[viewId], undefined);\n\n  return {\n    ...initialQuery,\n    ...queryProduct,\n    ...queryView\n  };\n};\n\n/**\n * Return a base product query\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductQuery = ({ queryType = 'query', options } = {}) => useProductQueryFactory(queryType, options);\n\n/**\n * Return the graph query based off of tally and capacity.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductGraphTallyQuery = ({\n  queryType = 'graphTallyQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_REPORT_CAPACITY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return the inventory query for guests.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryGuestsQuery = ({\n  queryType = 'inventoryGuestsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_GUESTS_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for hosts.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryHostsQuery = ({\n  queryType = 'inventoryHostsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for subscriptions.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventorySubscriptionsQuery = ({\n  queryType = 'inventorySubscriptionsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Get a filtered product configuration context.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductViewContext\n * @returns {object}\n */\nconst useProductContext = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductViewContext: useAliasProductViewContext = useProductViewContext\n} = {}) => {\n  const { [RHSM_API_QUERY_TYPES.UOM]: uomFilter } = useAliasProductQuery();\n  const {\n    initialGraphFilters = [],\n    initialInventoryFilters = [],\n    initialSubscriptionsInventoryFilters = [],\n    productContextFilterUom,\n    ...config\n  } = useAliasProductViewContext();\n\n  const applyUomFilter = useCallback(() => {\n    if (productContextFilterUom === true) {\n      const filterFilters = ({ id, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(uomFilter, 'i').test(id);\n      };\n\n      return {\n        ...config,\n        initialGraphFilters: initialGraphFilters.filter(filterFilters),\n        initialInventoryFilters: initialInventoryFilters.filter(filterFilters),\n        initialSubscriptionsInventoryFilters: initialSubscriptionsInventoryFilters.filter(filterFilters)\n      };\n    }\n\n    return {\n      ...config,\n      initialGraphFilters,\n      initialInventoryFilters,\n      initialSubscriptionsInventoryFilters\n    };\n  }, [\n    config,\n    initialGraphFilters,\n    initialInventoryFilters,\n    initialSubscriptionsInventoryFilters,\n    productContextFilterUom,\n    uomFilter\n  ]);\n\n  return applyUomFilter();\n};\n\n/**\n * Return product identifiers.\n *\n * @param {object} options\n * @param {Function} options.useProductViewContext\n * @returns {{productLabel: string, viewId: string, productId: string, productGroup: string}}\n */\nconst useProduct = ({ useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}) => {\n  const { productGroup, productId, productLabel, viewId } = useAliasProductViewContext();\n  return {\n    productGroup,\n    productId,\n    productLabel,\n    viewId\n  };\n};\n\n/**\n * Return graph configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductGraphConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialGraphFilters, initialGraphSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGraphFilters,\n    settings: initialGraphSettings\n  };\n};\n\n/**\n * Return hosts inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryHostsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialInventoryFilters, initialInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialInventoryFilters,\n    settings: initialInventorySettings\n  };\n};\n\n/**\n * Return subscriptions inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventorySubscriptionsConfig = ({\n  useProductContext: useAliasProductContext = useProductContext\n} = {}) => {\n  const { initialSubscriptionsInventoryFilters, initialSubscriptionsInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialSubscriptionsInventoryFilters,\n    settings: initialSubscriptionsInventorySettings\n  };\n};\n\n/**\n * Return primary toolbar configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductToolbarConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialToolbarFilters, initialToolbarSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialToolbarFilters,\n    settings: initialToolbarSettings\n  };\n};\n\nconst context = {\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useQuery: useProductQuery,\n  useQueryFactory: useProductQueryFactory,\n  useGraphTallyQuery: useProductGraphTallyQuery,\n  useInventoryGuestsQuery: useProductInventoryGuestsQuery,\n  useInventoryHostsQuery: useProductInventoryHostsQuery,\n  useInventorySubscriptionsQuery: useProductInventorySubscriptionsQuery,\n  useProduct,\n  useGraphConfig: useProductGraphConfig,\n  useInventoryHostsConfig: useProductInventoryHostsConfig,\n  useInventorySubscriptionsConfig: useProductInventorySubscriptionsConfig,\n  useToolbarConfig: useProductToolbarConfig\n};\n\nexport {\n  context as default,\n  context,\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useProductQuery,\n  useProductQueryFactory,\n  useProductGraphTallyQuery,\n  useProductInventoryGuestsQuery,\n  useProductInventoryHostsQuery,\n  useProductInventorySubscriptionsQuery,\n  useProduct,\n  useProductGraphConfig,\n  useProductInventoryHostsConfig,\n  useProductInventorySubscriptionsConfig,\n  useProductToolbarConfig\n};\n"],"names":["DEFAULT_CONTEXT","settings","isStandalone","metrics","metric","undefined","helpers","GraphCardContext","React","useGraphCardContext","useContext","useGetGraphTally","useDispatch","useAliasDispatch","storeHooks","useProductGraphTallyQuery","useAliasProductGraphTallyQuery","query","dispatch","reduxActions","useMetricsSelector","useAliasGraphCardContext","useSelectors","useAliasSelectors","useProduct","useAliasProduct","productId","data","metricResponses","map","metricId","id","graph","tally","isPending","isFulfilled","errorCount","dataSets","index","pending","fulfilled","error","cancelled","updatedMetric","meta","response","length","context","ProductViewContext","useProductViewContext","useProductQueryFactory","queryType","useAliasProductViewContext","initialQuery","viewId","queryProduct","view","queryView","useProductQuery","options","schemaCheck","rhsmApiTypes","reduxHelpers","useProductInventoryGuestsQuery","useProductInventoryHostsQuery","useProductInventorySubscriptionsQuery","useProductContext","useAliasProductQuery","uomFilter","RHSM_API_QUERY_TYPES","initialGraphFilters","initialInventoryFilters","initialSubscriptionsInventoryFilters","productContextFilterUom","config","applyUomFilter","useCallback","filterFilters","isOptional","RegExp","test","filter","productGroup","productLabel","useProductGraphConfig","useAliasProductContext","initialGraphSettings","filters","useProductInventoryHostsConfig","initialInventorySettings","useProductInventorySubscriptionsConfig","initialSubscriptionsInventorySettings","useProductToolbarConfig","initialToolbarFilters","initialToolbarSettings","useQuery","useQueryFactory","useGraphTallyQuery","useInventoryGuestsQuery","useInventoryHostsQuery","useInventorySubscriptionsQuery","useGraphConfig","useInventoryHostsConfig","useInventorySubscriptionsConfig","useToolbarConfig"],"sourceRoot":""}