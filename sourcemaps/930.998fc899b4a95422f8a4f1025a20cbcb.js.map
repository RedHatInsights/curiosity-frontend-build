{"version":3,"file":"js/930.8cf918ad6e3bbd752782.js","mappings":"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","sources":["webpack:///./src/components/chart/chart.js","webpack:///./src/hooks/useWindow.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { ChartThemeColor } from '@patternfly/react-charts';\nimport { ChartContext } from './chartContext';\nimport { ChartElements } from './chartElements';\nimport { ChartLegend } from './chartLegend';\nimport { chartHelpers } from './chartHelpers';\nimport { useResizeObserver } from '../../hooks/useWindow';\n\n/**\n * Return a chart and elements with a context provider.\n *\n * @param {object} props\n * @param {Node|Function} props.chartLegend\n * @param {Node|Function} props.chartTooltip\n * @param {Array} props.dataSets\n * @param {object} props.padding\n * @param {string} props.themeColor\n * @param {Node|Function} props.xAxisChartLabel\n * @param {Node|Function} props.yAxisChartLabel\n * @param {boolean} props.xAxisFixLabelOverlap\n * @param {number} props.xAxisLabelIncrement\n * @param {Function} props.xAxisTickFormat\n * @param {Function} props.yAxisTickFormat\n * @param {Function} props.xValueFormat\n * @param {Function} props.yValueFormat\n * @returns {Node}\n */\nconst Chart = ({\n  chartLegend,\n  chartTooltip,\n  dataSets,\n  padding,\n  themeColor,\n  xAxisChartLabel,\n  yAxisChartLabel,\n  xAxisFixLabelOverlap,\n  xAxisLabelIncrement,\n  xAxisTickFormat,\n  yAxisTickFormat,\n  xValueFormat,\n  yValueFormat\n}) => {\n  const [context, setContext] = useState();\n  const [dataSetsToggle, setDataSetsToggle] = useState({});\n  const containerRef = useRef(null);\n  const tooltipRef = useRef(null);\n  const { width: chartWidth } = useResizeObserver(containerRef);\n\n  useEffect(() => {\n    /**\n     * Aggregate chart related settings.\n     *\n     * @returns {{isMultiYAxis: boolean, padding: object, chartDomain: {domain: {y: Array}}, tooltipDataSetLookUp: {},\n     *     xAxisProps: object, themeColor: string, maxY: (object|number), hasData: boolean, maxX: number,\n     *     yAxisProps: Array, chartElementsProps: {elementsById: object, stackedElements: Array,\n     *     stackedElementsById: object, elements: Array}}}\n     */\n    const updateChartSettings = () => {\n      const toggledDataSets = dataSets.filter(({ id }) => !dataSetsToggle[id]);\n\n      const tooltipDataSetLookUp = chartHelpers.generateTooltipData({\n        content: chartTooltip,\n        dataSets: toggledDataSets\n      });\n\n      const { maxX, maxY } = chartHelpers.generateMaxXY({ dataSets: toggledDataSets });\n      const { individualMaxY } = chartHelpers.generateMaxXY({ dataSets });\n      const { xAxisProps, yAxisProps } = chartHelpers.generateAxisProps({\n        dataSets,\n        individualMaxY,\n        maxX,\n        maxY,\n        xAxisChartLabel,\n        yAxisChartLabel,\n        xAxisFixLabelOverlap,\n        xAxisLabelIncrement,\n        xAxisTickFormat,\n        yAxisTickFormat\n      });\n\n      const isMultiYAxis = yAxisProps.length > 1;\n      const chartElementsProps = chartHelpers.generateElementsProps({\n        dataSets: toggledDataSets,\n        maxX,\n        maxY: (isMultiYAxis && individualMaxY) || maxY,\n        xValueFormat,\n        yValueFormat\n      });\n      const { domain, padding: domainPadding } = chartHelpers.generateDomains({\n        maxY: (isMultiYAxis && individualMaxY) || maxY,\n        padding\n      });\n      const hasData = !!xAxisProps.tickValues;\n      const updatedPadding = { bottom: 0, left: 0, right: 0, top: 0, ...padding, ...domainPadding };\n\n      return {\n        xAxisProps,\n        yAxisProps,\n        chartDomain: { domain },\n        chartElementsProps,\n        hasData,\n        isMultiYAxis,\n        maxX,\n        maxY: (isMultiYAxis && individualMaxY) || maxY,\n        padding: updatedPadding,\n        themeColor,\n        tooltipDataSetLookUp\n      };\n    };\n\n    const chartSettings = updateChartSettings();\n    const updatedSettings = {\n      chartContainerRef: () => containerRef,\n      chartSettings: { ...chartSettings, chartLegend, chartWidth, dataSets },\n      chartTooltipRef: () => tooltipRef,\n      dataSetsToggle: [dataSetsToggle, setDataSetsToggle]\n    };\n\n    setContext(updatedSettings);\n  }, [\n    chartLegend,\n    chartTooltip,\n    chartWidth,\n    dataSets,\n    dataSetsToggle,\n    padding,\n    setContext,\n    themeColor,\n    xAxisChartLabel,\n    yAxisChartLabel,\n    xAxisFixLabelOverlap,\n    xAxisLabelIncrement,\n    yAxisTickFormat,\n    xAxisTickFormat,\n    xValueFormat,\n    yValueFormat\n  ]);\n\n  return (\n    <ChartContext.Provider value={context}>\n      <div\n        id=\"curiosity-chartarea\"\n        className=\"curiosity-chartarea uxui-curiosity__modal uxui-curiosity__modal--loading\"\n        ref={containerRef}\n      >\n        {chartWidth > 0 && (\n          <React.Fragment>\n            <ChartElements />\n            <ChartLegend />\n          </React.Fragment>\n        )}\n      </div>\n    </ChartContext.Provider>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{chartTooltip: Node|Function, xValueFormat: Function, padding: {top: number, left: number, bottom: number,\n *     right: number}, xAxisTickFormat: Function, themeColor: string, chartLegend: Node|Function,\n *     yAxisTickFormat: Function, dataSets: Array, xAxisFixLabelOverlap: boolean, xAxisLabelIncrement: number,\n *     yValueFormat: Function}}\n */\nChart.propTypes = {\n  chartLegend: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  chartTooltip: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  dataSets: PropTypes.arrayOf(\n    PropTypes.shape({\n      data: PropTypes.arrayOf(\n        PropTypes.shape({\n          x: PropTypes.number.isRequired,\n          y: PropTypes.number,\n          xAxisLabel: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        })\n      ),\n      animate: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n      chartType: PropTypes.oneOf(['area', 'line', 'threshold']),\n      fill: PropTypes.string,\n      stroke: PropTypes.string,\n      strokeWidth: PropTypes.number,\n      strokeDasharray: PropTypes.string,\n      themeColor: PropTypes.string,\n      themeVariant: PropTypes.string,\n      id: PropTypes.string.isRequired,\n      interpolation: PropTypes.string,\n      style: PropTypes.object,\n      isStacked: PropTypes.bool,\n      xAxisChartLabel: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n      yAxisChartLabel: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n      xAxisUseDataSet: PropTypes.bool,\n      yAxisUseDataSet: PropTypes.bool\n    })\n  ),\n  padding: PropTypes.shape({\n    bottom: PropTypes.number,\n    left: PropTypes.number,\n    right: PropTypes.number,\n    top: PropTypes.number\n  }),\n  themeColor: PropTypes.oneOf(Object.values(ChartThemeColor)),\n  xAxisChartLabel: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  yAxisChartLabel: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  xAxisFixLabelOverlap: PropTypes.bool,\n  xAxisLabelIncrement: PropTypes.number,\n  xAxisTickFormat: PropTypes.func,\n  yAxisTickFormat: PropTypes.func,\n  xValueFormat: PropTypes.func,\n  yValueFormat: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{chartTooltip: Node|Function, xValueFormat: Function, padding: {top: number, left: number, bottom: number,\n *     right: number}, xAxisTickFormat: Function, themeColor: string, chartLegend: Node|Function,\n *     yAxisTickFormat: Function, dataSets: Array, xAxisFixLabelOverlap: boolean, xAxisLabelIncrement: number,\n *     yValueFormat: Function}}\n */\nChart.defaultProps = {\n  chartLegend: null,\n  chartTooltip: null,\n  dataSets: [],\n  padding: {\n    bottom: 75,\n    left: 55,\n    right: 55,\n    top: 50\n  },\n  themeColor: 'blue',\n  xAxisChartLabel: null,\n  yAxisChartLabel: null,\n  xAxisFixLabelOverlap: true,\n  xAxisLabelIncrement: 1,\n  xAxisTickFormat: null,\n  yAxisTickFormat: null,\n  xValueFormat: null,\n  yValueFormat: null\n};\n\nexport { Chart as default, Chart };\n","import { useEffect, useState } from 'react';\nimport { helpers } from '../common';\n\n/**\n * Apply a resize observer to an element.\n *\n * @param {*} target\n * @returns {{width: number, height: number}}\n */\nconst useResizeObserver = target => {\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n\n  useEffect(() => {\n    const isElementResize = target && window.ResizeObserver && true;\n    const element = target?.current;\n    let removeObserver = helpers.noop;\n\n    if (element) {\n      const handler = () => {\n        const { clientHeight = 0, clientWidth = 0, innerHeight = 0, innerWidth = 0 } = element || {};\n\n        setDimensions({\n          width: isElementResize ? clientWidth : innerWidth,\n          height: isElementResize ? clientHeight : innerHeight\n        });\n      };\n\n      if (isElementResize) {\n        const resizeObserver = new window.ResizeObserver(handler);\n        resizeObserver.observe(element);\n        removeObserver = () => resizeObserver.unobserve(element);\n      } else {\n        handler();\n        window.addEventListener('resize', handler);\n        removeObserver = () => window.removeEventListener('resize', handler);\n      }\n    }\n\n    return () => {\n      removeObserver();\n    };\n  }, [target]);\n\n  return dimensions;\n};\n\nconst windowHooks = {\n  useResizeObserver\n};\n\nexport { windowHooks as default, windowHooks, useResizeObserver };\n"],"names":["Chart","chartLegend","chartTooltip","dataSets","padding","themeColor","xAxisChartLabel","yAxisChartLabel","xAxisFixLabelOverlap","xAxisLabelIncrement","xAxisTickFormat","yAxisTickFormat","xValueFormat","yValueFormat","useState","context","setContext","dataSetsToggle","setDataSetsToggle","containerRef","useRef","tooltipRef","chartWidth","target","width","height","dimensions","setDimensions","useEffect","isElementResize","window","ResizeObserver","element","current","removeObserver","helpers","handler","clientHeight","clientWidth","innerHeight","innerWidth","resizeObserver","observe","unobserve","addEventListener","removeEventListener","useResizeObserver","toggledDataSets","tooltipDataSetLookUp","maxX","maxY","individualMaxY","xAxisProps","yAxisProps","isMultiYAxis","chartElementsProps","domain","domainPadding","chartSettings","filter","id","chartHelpers","content","length","chartDomain","hasData","tickValues","bottom","left","right","top","updatedSettings","chartContainerRef","chartTooltipRef","ChartContext","value","className","ref","ChartElements","ChartLegend","defaultProps"],"sourceRoot":""}