{"version":3,"file":"js/2948.1676002957778.a6f1aa37a02b4c109850.js","mappings":"2YAeMA,EAAyB,WAAuD,6DAAP,CAAC,EAAC,IAA/CC,WAAYC,OAAe,IAAG,EAAAD,EAAAA,WAAU,EACxE,EAAiCC,IAAzBC,EAAoB,EAApBA,qBACFC,EAAU,GAchB,OAZIC,MAAMC,QAAQH,IAChBC,EAAQG,KAAI,MAAZH,GAAO,OACFD,EAAqBK,KAAI,SAAAC,GAAI,MAAK,CACnCC,OAAOC,EAAAA,EAAAA,WAAU,0BAA2B,CAC1CC,QAAS,CAAC,eAA0B,KAATH,EAAe,OAAWA,KAEvDI,MAAOJ,EACPK,UAAU,EACX,MAIEV,CACT,EAUMW,EAAc,WAGT,6DAAP,CAAC,EAAC,IAFJC,YAAaC,OAAgB,IAAG,EAAAC,EAAAA,GAAAA,WAAAA,YAAiC,MACjEjB,WAAYC,OAAe,IAAG,EAAAD,EAAAA,WAAU,EAExC,EAAmBC,IAAXiB,EAAM,EAANA,OACFC,EAAWH,IAEjB,OAAO,WAA2B,6DAAP,CAAC,EAAC,IAAnBJ,MAAAA,OAAK,IAAG,OAAI,EACpBO,EAAS,CACP,CACEX,KAAMY,EAAAA,GAAAA,MAAAA,+BACNF,OAAAA,GAEF,CACEV,KAAMY,EAAAA,GAAAA,MAAAA,UACNF,OAAAA,EACAG,OAAQC,EAAAA,GAAAA,aACRV,MAAAA,IAGN,CACF,EAeMW,EAA2B,SAAH,GAOxB,IANJC,EAAQ,EAARA,SACAC,EAAQ,EAARA,SACAC,EAAC,EAADA,EACaC,EAAgB,EAA7Bb,YACwBc,EAA2B,EAAnDC,uBACwBC,EAA2B,EAAnD/B,uBAEiDgC,EAAiBH,IAAzDN,EAAAA,GAAAA,cACHU,EAAWL,IAEXM,EADUH,IACevB,KAAI,SAAA2B,GAAM,yBAAUA,GAAM,IAAErB,SAAUqB,EAAOtB,QAAUmB,GAAY,IAElG,OACE,kBAAC,EAAAI,OAAM,CACL,aAAYT,EAAE,gCAAiC,CAAEf,QAAS,CAACa,GAAY,SAAU,kBACjFQ,SAAUA,EACV7B,QAAS8B,EACTG,gBAAiBL,EACjBM,YAAaX,EAAE,gCAAiC,CAAEf,QAAS,CAACa,GAAY,SAAU,kBAClFC,SAAUA,EACV,YAAU,4BAGhB,EAuBAF,EAAyBe,aAAe,CACtCd,UAAU,EACVC,SAAUc,EAAAA,eAAAA,KACVb,EAAGhB,EAAAA,UACHI,YAAAA,EACAe,uBAAAA,EAAAA,uBACA9B,uBAAAA,E","sources":["webpack:///./src/components/toolbar/toolbarFieldArchitecture.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductToolbarQuery } from '../productView/productViewContext';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { Select, SelectPosition } from '../form/select';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Generate select field options from config\n *\n * @param {object} options\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useToolbarFieldOptions = ({ useProduct: useAliasProduct = useProduct } = {}) => {\n  const { productArchitectures } = useAliasProduct();\n  const options = [];\n\n  if (Array.isArray(productArchitectures)) {\n    options.push(\n      ...productArchitectures.map(type => ({\n        title: translate('curiosity-toolbar.label', {\n          context: ['architecture', (type === '' && 'none') || type]\n        }),\n        value: type,\n        selected: false\n      }))\n    );\n  }\n\n  return options;\n};\n\n/**\n * On select update.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY,\n        viewId,\n        filter: RHSM_API_QUERY_SET_TYPES.ARCHITECTURE,\n        value\n      }\n    ]);\n  };\n};\n\n/**\n * Display an architecture field with generated options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductToolbarQuery\n * @param {Function} props.useToolbarFieldOptions\n * @returns {Node}\n */\nconst ToolbarFieldArchitecture = ({\n  isFilter,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductToolbarQuery: useAliasProductToolbarQuery,\n  useToolbarFieldOptions: useAliasToolbarFieldOptions\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.ARCHITECTURE]: updatedValue } = useAliasProductToolbarQuery();\n  const onSelect = useAliasOnSelect();\n  const options = useAliasToolbarFieldOptions();\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'architecture'] })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'architecture'] })}\n      position={position}\n      data-test=\"toolbarFieldArchitecture\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, useProductToolbarQuery: Function, isFilter: boolean,\n *     position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldArchitecture.propTypes = {\n  isFilter: PropTypes.bool,\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductToolbarQuery: PropTypes.func,\n  useToolbarFieldOptions: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: translate, useProductToolbarQuery: Function, isFilter: boolean,\n *     position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldArchitecture.defaultProps = {\n  isFilter: false,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductToolbarQuery,\n  useToolbarFieldOptions\n};\n\nexport { ToolbarFieldArchitecture as default, ToolbarFieldArchitecture, useOnSelect, useToolbarFieldOptions };\n"],"names":["useToolbarFieldOptions","useProduct","useAliasProduct","productArchitectures","options","Array","isArray","push","map","type","title","translate","context","value","selected","useOnSelect","useDispatch","useAliasDispatch","storeHooks","viewId","dispatch","reduxTypes","filter","RHSM_API_QUERY_SET_TYPES","ToolbarFieldArchitecture","isFilter","position","t","useAliasOnSelect","useAliasProductToolbarQuery","useProductToolbarQuery","useAliasToolbarFieldOptions","updatedValue","onSelect","updatedOptions","option","Select","selectedOptions","placeholder","defaultProps","SelectPosition"],"sourceRoot":""}