{"version":3,"file":"js/2227.817682d3c178d7873007.js","mappings":"8WA2BMA,E,gMAMJC,QAAU,WAAM,MACNC,EAAoB,EAAKC,MAAzBD,gBACFE,EAAkB,CACtB,CAAEC,KAAMC,EAAAA,GAAAA,QAAAA,mBAAuCC,KAAM,CAAEC,cAAe,IAAIC,MAC1E,CACEJ,KAAMC,EAAAA,GAAAA,MAAAA,gBACNC,KAAM,CACJG,cAAY,eACTC,EAAAA,GAAAA,IAA2B,OADlB,SAETA,EAAAA,GAAAA,MAA6B,MAFpB,MAQdT,GACFE,EAAgBQ,KAAK,CAAEP,KAAMC,EAAAA,GAAAA,QAAAA,gBAAoCC,KAAM,CAAEM,cAAe,QAG1F,EAAKC,YAAYV,GAAiB,I,EASpCW,cAAgB,SAAAC,GAAiB,MAC2B,EAAKb,MAAvDK,EADuB,EACvBA,cAAeK,EADQ,EACRA,cAAeX,EADP,EACOA,gBAGvBe,GADSC,EAAAA,eAAAA,aACyBC,QAAQC,MAAK,qBAAGC,QAAsBL,MAAkB,IAAjGM,MAER,GAAKL,EAAL,CAIA,IAAMM,EAAuB,IAAId,IAAID,GACrCe,EAAoB,OAAQN,GAE5B,IAAMb,EAAkB,CACtB,CAAEC,KAAMC,EAAAA,GAAAA,QAAAA,mBAAuCC,KAAM,CAAEC,cAAee,IACtE,CACElB,KAAMC,EAAAA,GAAAA,MAAAA,gBACNC,KAAM,CACJG,cAAc,UACXO,EAAgB,SAMzB,GAAIf,EAAiB,CACnB,IAAMsB,EAAwBD,EAAqBE,KAAO,GAAKZ,GAAkB,KACjFT,EAAgBQ,KAAK,CAAEP,KAAMC,EAAAA,GAAAA,QAAAA,gBAAoCC,KAAM,CAAEM,cAAeW,KAG1F,EAAKV,YAAYV,GAAiB,K,EASpCsB,iBAAmB,SAAAC,GAAS,IAClBL,EAAUK,EAAVL,MACR,EAAKR,YAAY,CAAET,KAAMC,EAAAA,GAAAA,QAAAA,gBAAoCC,KAAM,CAAEM,cAAeS,M,EAUtFM,SAAW,YAAsB,IAAnBD,EAAmB,EAAnBA,MAAOE,EAAY,EAAZA,MACXrB,EAAkB,EAAKL,MAAvBK,cACAc,EAAUK,EAAVL,MACFC,EAAuB,IAAId,IAAID,GAAesB,IAAID,GAExD,EAAKf,YACH,CACE,CACET,KAAMC,EAAAA,GAAAA,QAAAA,mBACNC,KAAM,CAAEC,cAAee,IAEzB,CACElB,KAAMC,EAAAA,GAAAA,MAAAA,qBAAsCuB,GAC5CtB,MAAM,UAAGsB,EAAQP,MAGrB,I,4CAUJ,SAAYS,GAA4B,IAAnBC,EAAmB,wDAC9BC,EAAWC,KAAK/B,MAAhB8B,OACFE,GAAmBC,MAAMC,QAAQN,IAAYA,GAAY,CAACA,IAAUO,KAAI,gBAAGjC,EAAH,EAAGA,KAAME,EAAT,EAASA,KAAT,eAC5EF,KAAAA,EACA4B,OAAAA,GACG1B,MAGDyB,GACFG,EAAevB,KAAK,CAClBP,KAAMC,EAAAA,GAAAA,MAAAA,+BACN2B,OAAAA,IAIJM,EAAAA,EAAAA,SAAeJ,K,6BASjB,SAAgBN,GAAO,MAIjBW,EAHIC,EAAUP,KAAK/B,MAAfsC,MACFtB,EAAUD,EAAAA,eAAAA,WAA0BW,GACpChB,EAAgBqB,KAAKQ,mBAW3B,OAPEF,EADEX,EACiC,iBAAnBY,MAAAA,OAAP,EAAOA,EAAQZ,KAAuBV,EAAQA,QAAQC,MAAK,qBAAGE,SAAsBmB,MAAAA,OAAL,EAAKA,EAAQZ,OAE5FV,EAAQA,QAAQC,MAAK,qBAAGE,QAAsBT,KAKlD,CAAEM,QAAAA,EAASwB,iBAFa,QAAN,EAAAH,SAAA,eAAQnB,QAAS,CAACmB,EAAOnB,SAAYF,MAAAA,OAAA,EAAAA,EAASyB,WAAY,CAACzB,EAAQyB,WAAc,M,8BAU5G,WAAmB,UACwBV,KAAK/B,MAAtCU,EADS,EACTA,cAAegC,EADN,EACMA,cAEvB,OACEhC,IAAa,UACbgC,EAAczB,MAAK,mBAA+B,IAA/B,EAAGwB,mBADT,aACb,EAAyDE,KAC/B,IAAzBD,EAAcE,SAAd,UAA8BF,EAAc,UAA5C,aAA8B,EAAkBC,M,gCAWrD,YAAkC,WAATjB,EAAS,EAAbiB,GACXE,EAAMd,KAAK/B,MAAX6C,EADwB,EAEKd,KAAKe,gBAAgBpB,GAAlDV,EAFwB,EAExBA,QAASwB,EAFe,EAEfA,gBACX9B,EAAgBqB,KAAKQ,mBAE3B,OACE,kBAAC,EAAAQ,cAAD,CACEC,IAAKtB,EACLuB,MAAOT,EACPU,WAAYnB,KAAKnB,cACjBuC,aAAcN,EAAE,6BAA8B,CAAEO,QAAS1B,IACzD2B,gBAAiB3C,IAAkBgB,GAEnC,kBAAC,EAAA4B,OAAD,CACE,aAAYT,EAAE,6BAA8B,CAAEO,QAAS1B,IACvDD,SAAU,SAAAD,GAAK,OAAI,EAAKC,SAAS,CAAED,MAAAA,EAAOE,MAAAA,KAC1C6B,gBAAiBf,EACjBgB,YAAaX,EAAE,gCAAiC,CAAEO,QAAS1B,IAC3DV,QAASA,EAAQA,a,oBAWzB,WAAS,aACkCe,KAAK/B,MAAtC0C,EADD,EACCA,cAAee,EADhB,EACgBA,WAAYZ,EAD5B,EAC4BA,EAEnC,GAAIY,EACF,OAAO,KAJF,MAOwE1B,KAAKe,kBAAnEY,EAPV,EAOC1C,QAA2C2C,EAP5C,EAO2BnB,gBAElC,OACE,kBAAC,UAAD,CACEG,GAAG,oBACHiB,UAAU,sEACVC,gCAAgC,KAChCC,gBAAiB/B,KAAKjC,QACtBiE,uBAAwBlB,EAAE,mCAE1B,kBAAC,EAAAmB,eAAD,KACE,kBAAC,EAAAC,mBAAD,CAAoBC,WAAY,kBAAC,EAAAC,WAAD,MAAgBC,WAAW,MACzD,kBAAC,EAAAC,aAAD,CAAcC,QAAQ,gBACM,IAAzB5B,EAAcE,QACb,kBAAC,EAAA2B,YAAD,KACE,kBAAC,EAAAjB,OAAD,CACE,aAAYT,EAAE,8BACdpB,SAAUM,KAAKR,iBACfgC,gBAAiBI,EACjBH,YAAaX,EAAE,iCACf7B,QAAS0C,EAAgB1C,QACzBkD,WAAY,kBAAC,EAAAC,WAAD,SAIjBzB,EAAcP,KAAI,gBAAGQ,EAAH,EAAGA,GAAIF,EAAP,EAAOA,SAAP,OAAsB,EAAK+B,mBAAmB,CAAE7B,GAAAA,EAAIF,SAAAA,e,GA3O/DgC,IAAAA,WAoRtB5E,EAAQ6E,aAAe,CACrBpC,MAAO,GACPjC,cAAe,IAAIC,IACnBI,cAAe,KACfgC,cAAe,CACb,CACEC,GAAInC,EAAAA,GAAAA,IACJmE,WAAY,UAEd,CACEhC,GAAInC,EAAAA,GAAAA,MACJmE,WAAY,SACZlC,UAAU,IAGd1C,iBAAiB,EACjB0D,WAAYmB,EAAAA,GAAAA,oBACZ/B,EAAGgC,EAAAA,UACH/C,OAAQ,WAcV,IAKMgD,GAAmBC,EAAAA,EAAAA,KALD,SAAC,EAAD,WAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,KAAiBC,EAA7B,EAAsB5C,MAAqBR,EAA3C,EAA2CA,OAA3C,eAAC,UAAD,QAAC,EACpBkD,EAAQG,eADW,aACnB,EAAkBrD,IADC,IAEtBQ,OAAO,UAAA2C,EAAK3C,aAAL,eAAaR,KAAWoD,MAGRH,CAAyBlF","sources":["webpack:///./src/components/toolbar/toolbar.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Toolbar as PfToolbar,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup\n} from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport { Select } from '../form/select';\nimport { connect, reduxTypes, store } from '../../redux';\nimport { RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { toolbarHelpers } from './toolbarHelpers';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Application filter toolbar.\n *\n * @augments React.Component\n * @fires onClear\n * @fires onClearFilter\n * @fires onCategorySelect\n * @fires onSelect\n */\nclass Toolbar extends React.Component {\n  /**\n   * Clear all filters' state.\n   *\n   * @event onClear\n   */\n  onClear = () => {\n    const { hardFilterReset } = this.props;\n    const dispatchActions = [\n      { type: reduxTypes.toolbar.SET_ACTIVE_FILTERS, data: { activeFilters: new Set() } },\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR,\n        data: {\n          clearFilters: {\n            [RHSM_API_QUERY_TYPES.SLA]: null,\n            [RHSM_API_QUERY_TYPES.USAGE]: null\n          }\n        }\n      }\n    ];\n\n    if (hardFilterReset) {\n      dispatchActions.push({ type: reduxTypes.toolbar.SET_FILTER_TYPE, data: { currentFilter: null } });\n    }\n\n    this.setDispatch(dispatchActions, true);\n  };\n\n  /**\n   * Clear individual filter state.\n   *\n   * @event onClearFilter\n   * @param {string} categoryTitle\n   */\n  onClearFilter = categoryTitle => {\n    const { activeFilters, currentFilter, hardFilterReset } = this.props;\n\n    const categoryOptions = toolbarHelpers.getOptions();\n    const { value: categoryValue } = categoryOptions.options.find(({ title }) => title === categoryTitle) || {};\n\n    if (!categoryValue) {\n      return;\n    }\n\n    const updatedActiveFilters = new Set(activeFilters);\n    updatedActiveFilters.delete(categoryValue);\n\n    const dispatchActions = [\n      { type: reduxTypes.toolbar.SET_ACTIVE_FILTERS, data: { activeFilters: updatedActiveFilters } },\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR,\n        data: {\n          clearFilters: {\n            [categoryValue]: null\n          }\n        }\n      }\n    ];\n\n    if (hardFilterReset) {\n      const updatedCurrentFilter = (updatedActiveFilters.size > 0 && currentFilter) || null;\n      dispatchActions.push({ type: reduxTypes.toolbar.SET_FILTER_TYPE, data: { currentFilter: updatedCurrentFilter } });\n    }\n\n    this.setDispatch(dispatchActions, true);\n  };\n\n  /**\n   * Set Category selection.\n   *\n   * @event onCategorySelect\n   * @param {object} event\n   */\n  onCategorySelect = event => {\n    const { value } = event;\n    this.setDispatch({ type: reduxTypes.toolbar.SET_FILTER_TYPE, data: { currentFilter: value } });\n  };\n\n  /**\n   * Set select filter selection for dispatch.\n   *\n   * @param {object} params\n   * @param {object} params.event\n   * @param {string} params.field\n   */\n  onSelect = ({ event, field }) => {\n    const { activeFilters } = this.props;\n    const { value } = event;\n    const updatedActiveFilters = new Set(activeFilters).add(field);\n\n    this.setDispatch(\n      [\n        {\n          type: reduxTypes.toolbar.SET_ACTIVE_FILTERS,\n          data: { activeFilters: updatedActiveFilters }\n        },\n        {\n          type: reduxTypes.query.SET_QUERY_RHSM_TYPES[field],\n          data: { [field]: value }\n        }\n      ],\n      true\n    );\n  };\n\n  /**\n   * Dispatch a Redux store type.\n   *\n   * @param {Array|object} actions\n   * @param {boolean} resetPage\n   */\n  setDispatch(actions, resetPage = false) {\n    const { viewId } = this.props;\n    const updatedActions = ((Array.isArray(actions) && actions) || [actions]).map(({ type, data }) => ({\n      type,\n      viewId,\n      ...data\n    }));\n\n    if (resetPage) {\n      updatedActions.push({\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      });\n    }\n\n    store.dispatch(updatedActions);\n  }\n\n  /**\n   * Available, and selected select filter options.\n   *\n   * @param {string} field\n   * @returns {{optionsSelected: Array, options: Array }}\n   */\n  setSelectFilter(field) {\n    const { query } = this.props;\n    const options = toolbarHelpers.getOptions(field);\n    const currentFilter = this.getCurrentFilter();\n    let filter;\n\n    if (field) {\n      filter = typeof query?.[field] === 'string' && options.options.find(({ value }) => value === query?.[field]);\n    } else {\n      filter = options.options.find(({ value }) => value === currentFilter);\n    }\n\n    const optionsSelected = (filter?.title && [filter.title]) || (options?.selected && [options.selected]) || [];\n\n    return { options, optionsSelected };\n  }\n\n  /**\n   * Return the currentFilter, fallback to selected\n   *\n   * @returns {string|undefined}\n   */\n  getCurrentFilter() {\n    const { currentFilter, filterOptions } = this.props;\n\n    return (\n      currentFilter ||\n      filterOptions.find(({ selected }) => selected === true)?.id ||\n      (filterOptions.length === 1 && filterOptions[0]?.id)\n    );\n  }\n\n  /**\n   * A select filter node.\n   *\n   * @param {object} params\n   * @param {string} params.id\n   * @returns {object}\n   */\n  renderSelectFilter({ id: field }) {\n    const { t } = this.props;\n    const { options, optionsSelected } = this.setSelectFilter(field);\n    const currentFilter = this.getCurrentFilter();\n\n    return (\n      <ToolbarFilter\n        key={field}\n        chips={optionsSelected}\n        deleteChip={this.onClearFilter}\n        categoryName={t('curiosity-toolbar.category', { context: field })}\n        showToolbarItem={currentFilter === field}\n      >\n        <Select\n          aria-label={t('curiosity-toolbar.category', { context: field })}\n          onSelect={event => this.onSelect({ event, field })}\n          selectedOptions={optionsSelected}\n          placeholder={t('curiosity-toolbar.placeholder', { context: field })}\n          options={options.options}\n        />\n      </ToolbarFilter>\n    );\n  }\n\n  /**\n   * Render a filter toolbar.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { filterOptions, isDisabled, t } = this.props;\n\n    if (isDisabled) {\n      return null;\n    }\n\n    const { options: categoryOptions, optionsSelected: categoryOptionsSelected } = this.setSelectFilter();\n\n    return (\n      <PfToolbar\n        id=\"curiosity-toolbar\"\n        className=\"curiosity-toolbar pf-m-toggle-group-container ins-c-primary-toolbar\"\n        collapseListedFiltersBreakpoint=\"sm\"\n        clearAllFilters={this.onClear}\n        clearFiltersButtonText={t('curiosity-toolbar.clearFilters')}\n      >\n        <ToolbarContent>\n          <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"md\">\n            <ToolbarGroup variant=\"filter-group\">\n              {filterOptions.length !== 1 && (\n                <ToolbarItem>\n                  <Select\n                    aria-label={t('curiosity-toolbar.category')}\n                    onSelect={this.onCategorySelect}\n                    selectedOptions={categoryOptionsSelected}\n                    placeholder={t('curiosity-toolbar.placeholder')}\n                    options={categoryOptions.options}\n                    toggleIcon={<FilterIcon />}\n                  />\n                </ToolbarItem>\n              )}\n              {filterOptions.map(({ id, selected }) => this.renderSelectFilter({ id, selected }))}\n            </ToolbarGroup>\n          </ToolbarToggleGroup>\n        </ToolbarContent>\n      </PfToolbar>\n    );\n  }\n}\n\n/**\n * Prop types\n *\n * @type {{viewId: string, t: Function, activeFilters: Set, hardFilterReset: boolean, query: object,\n *     currentFilter: string, isDisabled: boolean, filterOptions: Array}}\n */\nToolbar.propTypes = {\n  query: PropTypes.shape({\n    [RHSM_API_QUERY_TYPES.SLA]: PropTypes.string,\n    [RHSM_API_QUERY_TYPES.USAGE]: PropTypes.string\n  }),\n  activeFilters: PropTypes.instanceOf(Set),\n  currentFilter: PropTypes.oneOf([RHSM_API_QUERY_TYPES.SLA, RHSM_API_QUERY_TYPES.USAGE]),\n  filterOptions: PropTypes.arrayOf(\n    PropTypes.shape({\n      filterType: PropTypes.oneOf(['select']),\n      id: PropTypes.oneOf([RHSM_API_QUERY_TYPES.SLA, RHSM_API_QUERY_TYPES.USAGE]),\n      selected: PropTypes.bool\n    })\n  ),\n  hardFilterReset: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  t: PropTypes.func,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{viewId: string, t: translate, activeFilters: Set, hardFilterReset: boolean, query: object,\n *     currentFilter: string, isDisabled: boolean, filterOptions: Array}}\n */\nToolbar.defaultProps = {\n  query: {},\n  activeFilters: new Set(),\n  currentFilter: null,\n  filterOptions: [\n    {\n      id: RHSM_API_QUERY_TYPES.SLA,\n      filterType: 'select'\n    },\n    {\n      id: RHSM_API_QUERY_TYPES.USAGE,\n      filterType: 'select',\n      selected: true\n    }\n  ],\n  hardFilterReset: false,\n  isDisabled: helpers.UI_DISABLED_TOOLBAR,\n  t: translate,\n  viewId: 'toolbar'\n};\n\n/**\n * Apply state to props.\n *\n * @param {object} state\n * @param {object} state.toolbar\n * @param {object} state.view\n * @param {object} props\n * @param {string} props.query\n * @param {string} props.viewId\n * @returns {object}\n */\nconst mapStateToProps = ({ toolbar, view }, { query: initialQuery, viewId }) => ({\n  ...toolbar.filters?.[viewId],\n  query: view.query?.[viewId] || initialQuery\n});\n\nconst ConnectedToolbar = connect(mapStateToProps)(Toolbar);\n\nexport { ConnectedToolbar as default, ConnectedToolbar, Toolbar };\n"],"names":["Toolbar","onClear","hardFilterReset","props","dispatchActions","type","reduxTypes","data","activeFilters","Set","clearFilters","RHSM_API_QUERY_TYPES","push","currentFilter","setDispatch","onClearFilter","categoryTitle","categoryValue","toolbarHelpers","options","find","title","value","updatedActiveFilters","updatedCurrentFilter","size","onCategorySelect","event","onSelect","field","add","actions","resetPage","viewId","this","updatedActions","Array","isArray","map","store","filter","query","getCurrentFilter","optionsSelected","selected","filterOptions","id","length","t","setSelectFilter","ToolbarFilter","key","chips","deleteChip","categoryName","context","showToolbarItem","Select","selectedOptions","placeholder","isDisabled","categoryOptions","categoryOptionsSelected","className","collapseListedFiltersBreakpoint","clearAllFilters","clearFiltersButtonText","ToolbarContent","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarGroup","variant","ToolbarItem","renderSelectFilter","React","defaultProps","filterType","helpers","translate","ConnectedToolbar","connect","toolbar","view","initialQuery","filters"],"sourceRoot":""}