{"version":3,"file":"js/939.617750c01e930b8c4f9c.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardChartTitleTooltip.js","webpack:///./src/components/graphCard/graphCardContext.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { useGraphCardContext } from './graphCardContext';\nimport { translate } from '../i18n/i18n';\n\n/**\n * @memberof GraphCard\n * @module GraphCardChartTitleTooltip\n */\n\n/**\n * Graph card title tooltip.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useGraphCardContext\n * @returns {React.ReactNode}\n */\nconst GraphCardChartTitleTooltip = ({ t, useGraphCardContext: useAliasGraphCardContext }) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const { isCardTitleDescription, stringId } = settings;\n\n  if (!isCardTitleDescription) {\n    return null;\n  }\n\n  return (\n    <Tooltip\n      content={<p>{t(`curiosity-graph.cardHeadingDescription`, { context: stringId })}</p>}\n      position={TooltipPosition.top}\n      enableFlip={false}\n      distance={5}\n      entryDelay={100}\n      exitDelay={0}\n    >\n      <span className=\"curiosity-icon__question\">\n        <OutlinedQuestionCircleIcon />\n      </span>\n    </Tooltip>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useGraphCardContext: Function, t: Function}}\n */\nGraphCardChartTitleTooltip.propTypes = {\n  t: PropTypes.func,\n  useGraphCardContext: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGraphCardContext: Function, t: Function}}\n */\nGraphCardChartTitleTooltip.defaultProps = {\n  t: translate,\n  useGraphCardContext\n};\n\nexport { GraphCardChartTitleTooltip as default, GraphCardChartTitleTooltip };\n","import React, { useContext, useMemo } from 'react';\nimport { useShallowCompareEffect } from 'react-use';\nimport { ToolbarItem } from '@patternfly/react-core';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphConfig, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldSelectCategory';\nimport { helpers } from '../../common/helpers';\nimport { graphCardHelpers } from './graphCardHelpers';\n\n/**\n * @memberof GraphCard\n * @module GraphCardContext\n */\n\n/**\n * Chart context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{ settings: { metrics: [] } }, helpers.noop];\n\nconst GraphCardContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated graph card context.\n *\n * @returns {React.Context<{}>}\n */\nconst useGraphCardContext = () => useContext(GraphCardContext);\n\n/**\n * Parse filters settings for context.\n *\n * @param {object} options\n * @param {Function} options.useProduct\n * @param {Function} options.useProductGraphConfig\n * @returns {{standaloneFiltersSettings: Array<{ settings: object }>, groupedFiltersSettings: { settings: object }}}\n */\nconst useParseFiltersSettings = ({\n  useProduct: useAliasProduct = useProduct,\n  useProductGraphConfig: useAliasProductGraphConfig = useProductGraphConfig\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const { filters = [], settings = {} } = useAliasProductGraphConfig();\n\n  return useMemo(\n    () =>\n      graphCardHelpers.generateChartSettings({\n        filters,\n        settings,\n        productId\n      }),\n    [filters, settings, productId]\n  );\n};\n\n/**\n * Transform multiple metrics from store for chart/graph consumption.\n *\n * @param {object} options\n * @param {Function} options.useGraphCardContext\n * @param {Function} options.useSelectorsResponse\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: Array, errorId: {},\n *     id: {}, list: Array}, cancelled: boolean, dataSets: Array, message: null, error: boolean}}\n */\nconst useMetricsSelector = ({\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  const {\n    error,\n    fulfilled,\n    pending,\n    data = [],\n    ...response\n  } = useAliasSelectorsResponse(\n    metrics.map(\n      ({ id: metricId, isCapacity }) =>\n        ({ graph }) =>\n          isCapacity ? graph.capacity?.[metricId] : graph.tally?.[metricId]\n    )\n  );\n\n  /**\n   * Apply graph config settings to metric data.\n   */\n  const dataById = {};\n  const dataByList = data?.map((metricData, index) => {\n    const updatedMetricData = {\n      ...metrics[index],\n      ...metricData\n    };\n    dataById[metrics[index].id] = updatedMetricData;\n    return updatedMetricData;\n  });\n\n  return {\n    ...response,\n    data: dataById,\n    dataSets: dataByList,\n    error,\n    fulfilled,\n    pending\n  };\n};\n\n/**\n * Get graph metrics from Tally or Capacity.\n *\n * @param {object} params\n * @param {Function} params.getGraphMetrics\n * @param {Function} params.useDispatch\n * @param {Function} params.useGraphCardContext\n * @param {Function} params.useMetricsSelector\n * @param {Function} params.useProduct\n * @param {Function} params.useProductGraphTallyQuery\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: Array, errorId: {},\n *     id: {}, list: Array}, cancelled: boolean, dataSets: Array, message: null, error: boolean}}\n */\nconst useGetMetrics = ({\n  getGraphMetrics = reduxActions.rhsm.getGraphMetrics,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector = useMetricsSelector,\n  useProduct: useAliasProduct = useProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductGraphTallyQuery();\n  const dispatch = useAliasDispatch();\n  const response = useAliasMetricsSelector();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  useShallowCompareEffect(() => {\n    const updatedMetrics = metrics.map(({ metric: metricId, isCapacity, query: metricQuery }) => ({\n      id: productId,\n      metric: metricId,\n      isCapacity,\n      query: metricQuery\n    }));\n    getGraphMetrics(updatedMetrics, query)(dispatch);\n  }, [metrics, productId, query]);\n\n  return response;\n};\n\n/**\n * FixMe: the pending condition for \"content\" will block subsequent responses from this hook, this is expected.\n * This current limitation means if we decide to apply the same action to multiple cards the \"content\" will\n * not display for all of them.\n */\n/**\n * Return a component list for a configurable graphCard action toolbar.\n * Allow the \"content\" prop to receive graph data for display via callback.\n *\n * @param {object} params\n * @param {Array} params.categoryOptions\n * @param {Function} params.useMetricsSelector\n * @param {Function} params.useGraphCardContext\n * @returns {Array}\n */\nconst useGraphCardActions = ({\n  categoryOptions = toolbarFieldOptions,\n  useMetricsSelector: useAliasMetricsSelector = useMetricsSelector,\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext\n} = {}) => {\n  const { pending, dataSets } = useAliasMetricsSelector();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { actions } = settings;\n\n  return useMemo(\n    () =>\n      actions?.map(({ id, content, ...actionProps }) => {\n        const option = categoryOptions.find(({ value: categoryOptionValue }) => id === categoryOptionValue);\n        const { component: OptionComponent } = option || {};\n\n        return (\n          (OptionComponent && (\n            <ToolbarItem key={`option-${id}`}>\n              <OptionComponent isFilter={false} {...actionProps} />\n            </ToolbarItem>\n          )) ||\n          (content && !pending && dataSets.length && (\n            <ToolbarItem key={id || helpers.generateId()}>\n              {typeof content === 'function' ? content({ data: dataSets }) : content}\n            </ToolbarItem>\n          )) ||\n          null\n        );\n      }),\n    [actions, categoryOptions, dataSets, pending]\n  );\n};\n\nconst context = {\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardActions,\n  useGraphCardContext,\n  useMetricsSelector,\n  useParseFiltersSettings\n};\n\nexport {\n  context as default,\n  context,\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardActions,\n  useGraphCardContext,\n  useMetricsSelector,\n  useParseFiltersSettings\n};\n"],"names":["GraphCardChartTitleTooltip","_ref","t","useGraphCardContext","useAliasGraphCardContext","settings","isCardTitleDescription","stringId","React","Tooltip","content","context","position","TooltipPosition","enableFlip","distance","entryDelay","exitDelay","className","OutlinedQuestionCircleIcon","propTypes","PropTypes","defaultProps","translate","DEFAULT_CONTEXT","metrics","helpers","GraphCardContext","useContext","useParseFiltersSettings","useProduct","useAliasProduct","useProductGraphConfig","useAliasProductGraphConfig","arguments","length","undefined","productId","filters","useMemo","graphCardHelpers","useMetricsSelector","useSelectorsResponse","useAliasSelectorsResponse","storeHooks","error","fulfilled","pending","data","response","map","id","metricId","isCapacity","_ref2","_graph$capacity","_graph$tally","graph","capacity","tally","dataById","dataByList","metricData","index","updatedMetricData","dataSets","useGetMetrics","getGraphMetrics","reduxActions","useDispatch","useAliasDispatch","useAliasMetricsSelector","useProductGraphTallyQuery","useAliasProductGraphTallyQuery","query","dispatch","useShallowCompareEffect","updatedMetrics","_ref3","metric","metricQuery","useGraphCardActions","categoryOptions","toolbarFieldOptions","actions","_ref4","actionProps","option","find","_ref5","value","categoryOptionValue","component","OptionComponent","ToolbarItem","key","concat","_extends","isFilter"],"sourceRoot":""}