{"version":3,"file":"js/3557.1677791703608.e5bb449772a7ae142405.js","mappings":"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","sources":["webpack:///./src/components/bannerMessages/bannerMessages.js","webpack:///./src/components/bannerMessages/bannerMessagesContext.js","webpack:///./src/components/graphCard/graphCard.js","webpack:///./src/components/graphCard/graphCardMetricTotals.js","webpack:///./src/components/inventoryCard/inventoryCardHosts.js","webpack:///./src/components/inventoryCardSubscriptions/inventoryCardSubscriptions.js","webpack:///./src/components/inventoryCardSubscriptions/inventoryCardSubscriptionsContext.js","webpack:///./src/components/inventoryTabs/inventoryTab.js","webpack:///./src/components/inventoryTabs/inventoryTabs.js","webpack:///./src/components/productView/productView.js","webpack:///./src/components/tabs/tabs.js","webpack:///./src/components/toolbar/toolbar.js","webpack:///./src/components/toolbar/toolbarContext.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, AlertActionCloseButton, AlertVariant, Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { useShallowCompareEffect } from 'react-use';\nimport { useGetAppMessages } from './bannerMessagesContext';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Banner alert messages for a product view.\n *\n * @memberof Components\n * @module BannerMessages\n * @property {module} BannerMessagesContext\n */\n\n/**\n * Render banner messages.\n *\n * @param {object} props\n * @param {Array} props.messages\n * @param {Function} props.useGetAppMessages\n * @returns {React.ReactNode}\n */\nconst BannerMessages = ({ messages, useGetAppMessages: useAliasGetAppMessages }) => {\n  const [hideAlerts, setHideAlerts] = useState({});\n  const [alerts, setAlerts] = useState([]);\n  const { data: appMessages } = useAliasGetAppMessages();\n\n  useShallowCompareEffect(() => {\n    const updatedMessages = [];\n\n    if (messages.length) {\n      Object.entries(appMessages).forEach(([key, value]) => {\n        if (hideAlerts[key] !== true && value === true) {\n          const message = messages.find(({ id }) => id === key);\n\n          if (message) {\n            updatedMessages.push({\n              key,\n              ...message\n            });\n          }\n        }\n      });\n    }\n\n    setAlerts(\n      updatedMessages.map(({ key, message, title, variant = AlertVariant.info }) => {\n        const actionClose = <AlertActionCloseButton onClose={() => setHideAlerts({ ...hideAlerts, [key]: true })} />;\n\n        return (\n          <Alert actionClose={actionClose} key={key} title={title} variant={variant}>\n            {message}\n          </Alert>\n        );\n      })\n    );\n  }, [appMessages, hideAlerts, messages]);\n\n  if (alerts?.length) {\n    return <div className=\"curiosity-banner-messages\">{alerts}</div>;\n  }\n\n  return null;\n};\n\n/**\n * Prop types.\n *\n * @type {{useGetAppMessages: Function, messages: Array}}\n */\nBannerMessages.propTypes = {\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.node.isRequired,\n      message: PropTypes.node.isRequired,\n      variant: PropTypes.oneOf([...Object.values(AlertVariant)])\n    })\n  ),\n  useGetAppMessages: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGetAppMessages: Function, messages: Array}}\n */\nBannerMessages.defaultProps = {\n  messages: [\n    {\n      id: 'cloudigradeMismatch',\n      title: translate('curiosity-banner.dataMismatchTitle'),\n      message: translate(\n        'curiosity-banner.dataMismatchMessage',\n        {\n          context: helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS !== '' && 'cloudigradeMismatch',\n          appName: helpers.UI_DISPLAY_NAME\n        },\n        [\n          <Button\n            isInline\n            component=\"a\"\n            variant=\"link\"\n            icon={<ExternalLinkAltIcon />}\n            iconPosition=\"right\"\n            target=\"_blank\"\n            href={helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS}\n          />\n        ]\n      )\n    }\n  ],\n  useGetAppMessages\n};\n\nexport { BannerMessages as default, BannerMessages };\n","import { useShallowCompareEffect } from 'react-use';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { dateHelpers } from '../../common';\nimport {\n  rhsmConstants,\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\n\n/**\n * @memberof BannerMessages\n * @module BannerMessagesContext\n */\n\n/**\n * ToDo: useGetAppMessages is setup to work with existing Tally response, pre-metrics\n * Banner messages scans the returned Tally listing for the HAS_CLOUDIGRADE_MISMATCH. In the future\n * this may need to be updated to pull from the \"meta\" object part of the Tally response.\n */\n/**\n * Get app messages.\n *\n * @param {object} options\n * @param {Function} options.getMessageReports\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useProductQuery\n * @param {Function} options.useSelectorsResponse\n * @returns {{data: {cloudigradeMismatch: boolean}, pending: boolean, fulfilled: boolean, error: boolean}}\n */\nconst useGetAppMessages = ({\n  getMessageReports = reduxActions.rhsm.getMessageReports,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductQuery();\n  const dispatch = useAliasDispatch();\n  const { error, fulfilled, pending, data } = useAliasSelectorsResponse({\n    id: 'messages',\n    selector: ({ messages }) => messages?.report?.[productId]\n  });\n\n  useShallowCompareEffect(() => {\n    if (productId) {\n      const { startDate, endDate } = dateHelpers.getRangedDateTime('CURRENT');\n      const updatedQuery = {\n        ...query,\n        [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY,\n        [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate.toISOString(),\n        [RHSM_API_QUERY_SET_TYPES.END_DATE]: endDate.toISOString()\n      };\n\n      getMessageReports(productId, updatedQuery)(dispatch);\n    }\n  }, [productId, query]);\n\n  const updatedData = {\n    cloudigradeMismatch: false\n  };\n\n  if (fulfilled) {\n    const { messages = {} } = data || {};\n\n    updatedData.cloudigradeMismatch =\n      messages?.data\n        ?.reverse()\n        ?.find(\n          ({ [rhsmConstants.RHSM_API_RESPONSE_TALLY_CAPACITY_META_TYPES.HAS_CLOUDIGRADE_MISMATCH]: mismatch }) =>\n            mismatch === true\n        ) !== undefined;\n  }\n\n  return {\n    error,\n    fulfilled,\n    pending,\n    data: {\n      ...updatedData\n    }\n  };\n};\n\nconst context = {\n  useGetAppMessages\n};\n\nexport { context as default, context, useGetAppMessages };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { helpers } from '../../common';\nimport { GraphCardMetricTotals } from './graphCardMetricTotals';\nimport { GraphCardChart } from './graphCardChart';\nimport { GraphCardContext, useParseFiltersSettings } from './graphCardContext';\n\n/**\n * Configurable graph, chart, cards. Consumes Charts.\n *\n * @see Charts\n * @memberof Components\n * @module GraphCard\n * @property {module} GraphCardChart\n * @property {module} GraphCardChartLegend\n * @property {module} GraphCardChartTitleTooltip\n * @property {module} GraphCardChartTooltip\n * @property {module} GraphCardContext\n * @property {module} GraphCardHelpers\n * @property {module} GraphCardMetricTotals\n */\n\n/**\n * Set up graph cards. Expand filters with base graph settings.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useParseFiltersSettings\n * @returns {React.ReactNode}\n */\nconst GraphCard = ({ isDisabled, useParseFiltersSettings: useAliasParseFiltersSettings }) => {\n  const { groupedFiltersSettings, standaloneFiltersSettings } = useAliasParseFiltersSettings();\n\n  if (isDisabled) {\n    return null;\n  }\n\n  return (\n    <React.Fragment>\n      {(groupedFiltersSettings?.settings?.metrics?.length && (\n        <GraphCardContext.Provider\n          key={`graphCard_grouped-${groupedFiltersSettings?.settings?.metrics?.[0]?.id}`}\n          value={groupedFiltersSettings}\n        >\n          <GraphCardChart />\n        </GraphCardContext.Provider>\n      )) ||\n        null}\n      {standaloneFiltersSettings?.map(filtersSettings => (\n        <GraphCardContext.Provider\n          key={`graphCard_standalone-${filtersSettings?.settings?.metric?.id}`}\n          value={filtersSettings}\n        >\n          <GraphCardMetricTotals>\n            <GraphCardChart />\n          </GraphCardMetricTotals>\n        </GraphCardContext.Provider>\n      ))}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useParseFiltersSettings: Function, isDisabled: boolean}}\n */\nGraphCard.propTypes = {\n  isDisabled: PropTypes.bool,\n  useParseFiltersSettings: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useParseFiltersSettings: Function, isDisabled: boolean}}\n */\nGraphCard.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_GRAPH,\n  useParseFiltersSettings\n};\n\nexport { GraphCard as default, GraphCard };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter, CardHeader, CardTitle, Title } from '@patternfly/react-core';\nimport moment from 'moment';\nimport _camelCase from 'lodash/camelCase';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useMetricsSelector } from './graphCardContext';\nimport { Loader, SkeletonSize } from '../loader/loader';\nimport { dateHelpers, helpers } from '../../common';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldRangedMonthly';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * @memberof GraphCard\n * @module GraphCardMetricTotals\n */\n\n/**\n * Display totals for a single metric.\n *\n * @param {object} props\n * @param {React.ReactNode} props.children\n * @param {Function} props.t\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {React.ReactNode}\n */\nconst GraphCardMetricTotals = ({\n  children,\n  t,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate } = useAliasProductGraphTallyQuery();\n  const { pending, error, fulfilled, dataSets = [] } = useAliasMetricsSelector();\n  const { data = [], id, metric: metricId, meta = {} } = dataSets[0] || {};\n  const { date: lastDate, hasData: lastHasData, y: lastValue } = data[data.length - 1] || {};\n  const {\n    date: currentDate,\n    hasData: currentHasData,\n    y: currentValue\n  } = data.find(({ isCurrentDate }) => isCurrentDate === true) || {};\n\n  const { totalMonthlyDate: monthlyDate, totalMonthlyHasData: monthlyHasData, totalMonthlyValue: monthlyValue } = meta;\n\n  const { title: selectedMonth, isCurrent } =\n    toolbarFieldOptions.find(\n      option => option.title === startDate || option.value.startDate.toISOString() === startDate\n    ) || {};\n\n  const dailyDate = isCurrent ? currentDate : lastDate;\n  const dailyHasData = isCurrent ? currentHasData : lastHasData;\n  const dailyValue = isCurrent ? currentValue : lastValue;\n\n  return (\n    <div data-test={`graphMetricTotals-${_camelCase(metricId)}`} className=\"curiosity-usage-graph__totals\">\n      <div>\n        <div className=\"curiosity-usage-graph__totals-column\">\n          <Card\n            isPlain\n            data-test=\"graphDailyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardHeader>\n              <CardTitle>\n                <Title headingLevel=\"h2\" size=\"md\">\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t('curiosity-graph.cardHeadingMetric', {\n                      context: ['dailyTotal', id],\n                      month: selectedMonth\n                    })}\n                </Title>\n              </CardTitle>\n            </CardHeader>\n            <CardBody>\n              <div>\n                {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg, height: '60px' }} />}\n                {fulfilled &&\n                  t(\n                    'curiosity-graph.cardBodyMetric',\n                    {\n                      context: ['total', dailyHasData && id],\n                      total: helpers\n                        .numberDisplay(dailyValue)\n                        ?.format({\n                          average: true,\n                          mantissa: 5,\n                          trimMantissa: true,\n                          lowPrecision: false\n                        })\n                        ?.toUpperCase()\n                    },\n                    [<strong title={dailyValue} aria-label={dailyValue} />]\n                  )}\n              </div>\n            </CardBody>\n            <CardFooter>\n              <div>\n                {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                {fulfilled &&\n                  dailyDate &&\n                  t('curiosity-graph.cardFooterMetric', {\n                    date: moment.utc(dailyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                  })}\n              </div>\n            </CardFooter>\n          </Card>\n          <Card\n            isPlain\n            data-test=\"graphMonthlyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardHeader>\n              <CardTitle>\n                <Title headingLevel=\"h2\" size=\"md\">\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t('curiosity-graph.cardHeadingMetric', {\n                      context: ['monthlyTotal', id],\n                      month: selectedMonth\n                    })}\n                </Title>\n              </CardTitle>\n            </CardHeader>\n            <CardBody>\n              <div>\n                {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg, height: '60px' }} />}\n                {fulfilled &&\n                  t(\n                    'curiosity-graph.cardBodyMetric',\n                    {\n                      context: ['total', monthlyHasData && id],\n                      total: helpers\n                        .numberDisplay(monthlyValue)\n                        ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: false })\n                        ?.toUpperCase()\n                    },\n                    [<strong title={monthlyValue} aria-label={monthlyValue} />]\n                  )}\n              </div>\n            </CardBody>\n            <CardFooter>\n              <div>\n                {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                {fulfilled &&\n                  monthlyDate &&\n                  t('curiosity-graph.cardFooterMetric', {\n                    date: moment.utc(monthlyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                  })}\n              </div>\n            </CardFooter>\n          </Card>\n        </div>\n      </div>\n      <div>\n        <div className=\"curiosity-usage-graph__totals-graph-column\">{children}</div>\n      </div>\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: React.ReactNode, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.propTypes = {\n  children: PropTypes.node,\n  t: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: React.ReactNode, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.defaultProps = {\n  children: null,\n  t: translate,\n  useMetricsSelector,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardMetricTotals as default, GraphCardMetricTotals };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useGetHostsInventory, useOnColumnSortHosts } from './inventoryCardContext';\nimport InventoryCard from './inventoryCard';\nimport { helpers } from '../../common';\n\n/**\n * @memberof InventoryCard\n * @module InventoryCardHosts\n */\n\n/**\n * A hosts' system inventory component.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useGetInventory\n * @param {Function} props.useOnColumnSort\n * @returns {React.ReactNode}\n */\nconst InventoryCardHosts = ({ ...props }) => <InventoryCard {...props} />;\n\n/**\n * Prop types.\n *\n * @type {{isDisabled: boolean, useGetInventory: Function, useOnColumnSort: Function}}\n */\nInventoryCardHosts.propTypes = {\n  isDisabled: PropTypes.bool,\n  useGetInventory: PropTypes.func,\n  useOnColumnSort: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{isDisabled: boolean, useGetInventory: Function, useOnColumnSort: Function}}\n */\nInventoryCardHosts.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_TABLE_HOSTS,\n  useGetInventory: useGetHostsInventory,\n  useOnColumnSort: useOnColumnSortHosts\n};\n\nexport { InventoryCardHosts as default, InventoryCardHosts };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  useProductInventorySubscriptionsConfig,\n  useProductInventorySubscriptionsQuery\n} from '../productView/productViewContext';\nimport {\n  useGetSubscriptionsInventory,\n  useOnPageSubscriptions,\n  useOnColumnSortSubscriptions\n} from './inventoryCardSubscriptionsContext';\nimport InventoryCard from '../inventoryCard/inventoryCard';\nimport { helpers } from '../../common';\n\n/**\n * @memberof Components\n * @module InventoryCardSubscriptions\n * @property {module} InventoryCardSubscriptionsContext\n */\n\n/**\n * A subscriptions' system inventory component.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useGetInventory\n * @param {Function} props.useOnPage\n * @param {Function} props.useOnColumnSort\n * @param {Function} props.useProductInventoryConfig\n * @param {Function} props.useProductInventoryQuery\n * @fires onColumnSort\n * @fires onPage\n * @returns {React.ReactNode}\n */\nconst InventoryCardSubscriptions = ({ ...props }) => <InventoryCard cardActions={null} {...props} />;\n\n/**\n * Prop types.\n *\n * @type {{useOnPage: Function, isDisabled: boolean, useProductInventoryConfig: Function, useGetInventory: Function,\n *     useOnColumnSort: Function, useProductInventoryQuery: Function}}\n */\nInventoryCardSubscriptions.propTypes = {\n  isDisabled: PropTypes.bool,\n  useGetInventory: PropTypes.func,\n  useOnPage: PropTypes.func,\n  useOnColumnSort: PropTypes.func,\n  useProductInventoryConfig: PropTypes.func,\n  useProductInventoryQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnPage: Function, isDisabled: boolean, useProductInventoryConfig: Function, useGetInventory: Function,\n *     useOnColumnSort: Function, useProductInventoryQuery: Function}}\n */\nInventoryCardSubscriptions.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS,\n  useGetInventory: useGetSubscriptionsInventory,\n  useOnPage: useOnPageSubscriptions,\n  useOnColumnSort: useOnColumnSortSubscriptions,\n  useProductInventoryConfig: useProductInventorySubscriptionsConfig,\n  useProductInventoryQuery: useProductInventorySubscriptionsQuery\n};\n\nexport { InventoryCardSubscriptions as default, InventoryCardSubscriptions };\n","import { useShallowCompareEffect } from 'react-use';\nimport _camelCase from 'lodash/camelCase';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { reduxActions, reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductInventorySubscriptionsQuery } from '../productView/productViewContext';\nimport {\n  RHSM_API_QUERY_INVENTORY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_INVENTORY_SUBSCRIPTIONS_SORT_TYPES as SORT_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * @memberof InventoryCardSubscriptions\n * @module InventoryCardSubscriptionsContext\n */\n\n/**\n * Combined Redux RHSM Actions, getSubscriptionsInventory, and inventory selector response.\n *\n * @param {object} options\n * @param {boolean} options.isDisabled\n * @param {Function} options.getInventory\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useProductInventoryQuery\n * @param {Function} options.useSelectorsResponse\n * @returns {Function}\n */\nconst useGetSubscriptionsInventory = ({\n  isDisabled = false,\n  getInventory = reduxActions.rhsm.getSubscriptionsInventory,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventorySubscriptionsQuery,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductInventoryQuery();\n  const dispatch = useAliasDispatch();\n  const { cancelled, pending, data, ...response } = useAliasSelectorsResponse(\n    ({ inventory }) => inventory?.subscriptionsInventory?.[productId]\n  );\n\n  useShallowCompareEffect(() => {\n    if (!isDisabled) {\n      getInventory(productId, query)(dispatch);\n    }\n  }, [dispatch, isDisabled, productId, query]);\n\n  return {\n    ...response,\n    pending: pending || cancelled || false,\n    data: (data?.length === 1 && data[0]) || data || {}\n  };\n};\n\n/**\n * An onPage callback for subscriptions inventory.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnPageSubscriptions = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for subscriptions inventory.\n   *\n   * @event onPage\n   * @param {object} params\n   * @param {number} params.offset\n   * @param {number} params.perPage\n   * @returns {void}\n   */\n  return ({ offset, perPage }) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.OFFSET],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.OFFSET]: offset\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.LIMIT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.LIMIT]: perPage\n      }\n    ]);\n  };\n};\n\n/**\n * An onColumnSort callback for subscriptions inventory.\n *\n * @param {object} options\n * @param {object} options.sortColumns\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnColumnSortSubscriptions = ({\n  sortColumns = SORT_TYPES,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for subscriptions inventory.\n   *\n   * @event onColumnSort\n   * @param {*} _data\n   * @param {object} params\n   * @param {string} params.direction\n   * @param {string} params.id\n   * @returns {void}\n   */\n  return (_data, { direction, id }) => {\n    const updatedSortColumn = Object.values(sortColumns).find(value => value === id || _camelCase(value) === id);\n    let updatedDirection;\n\n    if (!updatedSortColumn) {\n      if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n        console.warn(`Sorting can only be performed on select fields, confirm field ${id} is allowed.`);\n      }\n      return;\n    }\n\n    switch (direction) {\n      case SortByDirection.desc:\n        updatedDirection = SORT_DIRECTION_TYPES.DESCENDING;\n        break;\n      default:\n        updatedDirection = SORT_DIRECTION_TYPES.ASCENDING;\n        break;\n    }\n\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.DIRECTION],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.DIRECTION]: updatedDirection\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.SORT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.SORT]: updatedSortColumn\n      }\n    ]);\n  };\n};\n\nconst context = {\n  useGetSubscriptionsInventory,\n  useOnPageSubscriptions,\n  useOnColumnSortSubscriptions\n};\n\nexport {\n  context as default,\n  context,\n  useGetSubscriptionsInventory,\n  useOnPageSubscriptions,\n  useOnColumnSortSubscriptions\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * @memberof InventoryTabs\n * @module InventoryTab\n */\n\n/**\n * A tab pass-through component for passing props to InventoryTabs.\n *\n * @param {object} props\n * @param {boolean} props.active\n * @param {React.ReactNode} props.children\n * @param {string} props.title\n * @returns {React.ReactNode}\n */\n// eslint-disable-next-line no-unused-vars\nconst InventoryTab = ({ active, children, title }) => children;\n\n/**\n * Prop types.\n *\n * @type {{children: React.ReactNode, className: string}}\n */\nInventoryTab.propTypes = {\n  children: PropTypes.node.isRequired,\n  active: PropTypes.bool,\n  title: PropTypes.node.isRequired\n};\n\n/**\n * Default props.\n *\n * @type {{className: string}}\n */\nInventoryTab.defaultProps = {\n  active: false\n};\n\nexport { InventoryTab as default, InventoryTab };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Title } from '@patternfly/react-core';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct } from '../productView/productViewContext';\nimport { Tabs } from '../tabs/tabs';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { InventoryTab } from './inventoryTab';\n\n/**\n * An inventory tabs display with state. Consume Tabs.\n *\n * @see Tabs\n * @memberof Components\n * @module InventoryTabs\n * @property {module} InventoryTab\n */\n\n/**\n * Update tab state.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnTab = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ index } = {}) => {\n    dispatch({\n      type: reduxTypes.inventory.SET_INVENTORY_TAB,\n      tabs: {\n        [productId]: index\n      }\n    });\n  };\n};\n\n/**\n * An inventory tabs component.\n * Render inventory tabs using Inventory tab passed props only.\n *\n * @fires onTab\n * @param {object} props\n * @param {number} props.activeTab\n * @param {React.ReactNode} props.children\n * @param {number} props.defaultActiveTab\n * @param {boolean} props.isDisabled\n * @param {Function} props.t\n * @param {Function} props.useOnTab\n * @param {Function} props.useProduct\n * @param {Function} props.useSelector\n * @returns {React.ReactNode|null}\n */\nconst InventoryTabs = ({\n  activeTab,\n  children,\n  defaultActiveTab,\n  isDisabled,\n  t,\n  useOnTab: useAliasOnTab,\n  useProduct: useAliasProduct,\n  useSelector: useAliasSelector\n}) => {\n  const { productId } = useAliasProduct();\n  const updatedActiveTab = useAliasSelector(({ inventory }) => inventory.tabs?.[productId], activeTab);\n  const onTab = useAliasOnTab();\n\n  if (isDisabled) {\n    return null;\n  }\n\n  const updatedChildren = React.Children.toArray(children).map((child, index) => {\n    const { props: childProps = {} } = child;\n\n    return {\n      active: childProps.active || false,\n      content: childProps.children || child,\n      title: childProps.title || t('curiosity-inventory.tabSubHeading', { count: index })\n    };\n  });\n\n  return (\n    <React.Fragment>\n      <Title headingLevel=\"h2\" className=\"sr-only\">\n        {t('curiosity-inventory.tabHeading', { count: updatedChildren.length })}\n      </Title>\n      <Tabs activeTab={updatedActiveTab} defaultActiveTab={defaultActiveTab} onTab={onTab} tabs={updatedChildren} />\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnTab: Function, useProduct: Function, t: Function, children: React.ReactNode,\n *     useSelector: Function, defaultActiveTab: number, isDisabled: boolean, activeTab: number}}\n */\nInventoryTabs.propTypes = {\n  activeTab: PropTypes.number,\n  children: PropTypes.node.isRequired,\n  defaultActiveTab: PropTypes.number,\n  isDisabled: PropTypes.bool,\n  t: PropTypes.func,\n  useOnTab: PropTypes.func,\n  useProduct: PropTypes.func,\n  useSelector: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnTab: Function, useProduct: Function, t: translate, useSelector: Function,\n *     defaultActiveTab: number, isDisabled: boolean, activeTab: number}}\n */\nInventoryTabs.defaultProps = {\n  activeTab: 0,\n  defaultActiveTab: 0,\n  isDisabled: helpers.UI_DISABLED_TABLE,\n  t: translate,\n  useOnTab,\n  useProduct,\n  useSelector: storeHooks.reactRedux.useSelector\n};\n\nexport { InventoryTabs as default, InventoryTabs, InventoryTab, useOnTab };\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { routerContext } from '../router';\nimport { ProductViewContext } from './productViewContext';\nimport { PageLayout, PageHeader, PageSection, PageToolbar, PageMessages, PageColumns } from '../pageLayout/pageLayout';\nimport { GraphCard } from '../graphCard/graphCard';\nimport { Toolbar } from '../toolbar/toolbar';\nimport { InventoryCard } from '../inventoryCard/inventoryCard';\nimport { InventoryCardHosts } from '../inventoryCard/inventoryCardHosts';\nimport { helpers } from '../../common';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport { InventoryCardSubscriptions } from '../inventoryCardSubscriptions/inventoryCardSubscriptions';\nimport { RHSM_INTERNAL_PRODUCT_DISPLAY_TYPES as DISPLAY_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Primary product display component, and config context provider.\n *\n * @memberof Components\n * @module ProductView\n * @property {module} ProductViewContext\n * @property {module} ProductViewMissing\n */\n\n/**\n * ToDo: review removing the \"useCallback\" once the routing updates are in place\n */\n/**\n * Display products.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useRouteDetail\n * @returns {React.ReactNode}\n */\nconst ProductView = ({ t, useRouteDetail: useAliasRouteDetail }) => {\n  const { productGroup, productConfig } = useAliasRouteDetail();\n\n  const renderProduct = useCallback(() => {\n    const updated = config => {\n      const { initialInventoryFilters, initialSubscriptionsInventoryFilters, productDisplay, productId, viewId } =\n        config;\n\n      if (!productId || !viewId) {\n        return null;\n      }\n\n      return (\n        <ProductViewContext.Provider value={config} key={`product_${productId}`}>\n          <PageMessages>{productDisplay !== DISPLAY_TYPES.HOURLY && <BannerMessages />}</PageMessages>\n          <PageToolbar>\n            <Toolbar />\n          </PageToolbar>\n          <PageSection>\n            <GraphCard />\n          </PageSection>\n          <PageSection className={(productDisplay === DISPLAY_TYPES.HOURLY && 'curiosity-page-section__tabs') || ''}>\n            <InventoryTabs\n              isDisabled={\n                (!initialInventoryFilters && !initialSubscriptionsInventoryFilters) || helpers.UI_DISABLED_TABLE\n              }\n            >\n              {!helpers.UI_DISABLED_TABLE_HOSTS &&\n                productDisplay !== DISPLAY_TYPES.HOURLY &&\n                productDisplay !== DISPLAY_TYPES.CAPACITY &&\n                initialInventoryFilters && (\n                  <InventoryTab\n                    key={`inventory_hosts_${productId}`}\n                    title={t('curiosity-inventory.tabHosts', { context: [productId] })}\n                  >\n                    <InventoryCardHosts />\n                  </InventoryTab>\n                )}\n              {!helpers.UI_DISABLED_TABLE_INSTANCES &&\n                productDisplay !== DISPLAY_TYPES.DUAL_AXES &&\n                productDisplay !== DISPLAY_TYPES.LEGACY &&\n                productDisplay !== DISPLAY_TYPES.PARTIAL &&\n                initialInventoryFilters && (\n                  <InventoryTab\n                    key={`inventory_instances_${productId}`}\n                    title={t('curiosity-inventory.tabInstances', { context: [productId] })}\n                  >\n                    <InventoryCard />\n                  </InventoryTab>\n                )}\n              {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && initialSubscriptionsInventoryFilters && (\n                <InventoryTab\n                  key={`inventory_subs_${productId}`}\n                  title={t('curiosity-inventory.tabSubscriptions', { context: [productId] })}\n                >\n                  <InventoryCardSubscriptions />\n                </InventoryTab>\n              )}\n            </InventoryTabs>\n          </PageSection>\n        </ProductViewContext.Provider>\n      );\n    };\n\n    return productConfig?.map(config => updated(config));\n  }, [productConfig, t]);\n\n  return (\n    (productGroup && (\n      <PageLayout>\n        <PageHeader productLabel={productGroup}>\n          {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: productGroup })}\n        </PageHeader>\n        <PageColumns>{renderProduct()}</PageColumns>\n      </PageLayout>\n    )) ||\n    null\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: translate, useRouteDetail: Function}}\n */\nProductView.propTypes = {\n  t: PropTypes.func,\n  useRouteDetail: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, useRouteDetail: Function}}\n */\nProductView.defaultProps = {\n  t: translate,\n  useRouteDetail: routerContext.useRouteDetail\n};\n\nexport { ProductView as default, ProductView };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tabs as PfTabs, Tab, TabTitleText, Grid, GridItem } from '@patternfly/react-core';\nimport _isEqualWith from 'lodash/isEqualWith';\nimport { helpers } from '../../common';\n\n/**\n * PF tabs with state.\n *\n * @memberof Components\n * @module Tabs\n */\n\n/**\n * FixMe: PF tabs misinterprets \"isElementInView\" when tab title nodes are loaded dynamically\n * It appears the use of isElementInView within PF tabs is trying to be predicative in using\n * \"getBoundingClientRect\" but produces questionable results in scenarios where content is\n * async created. isElementInView assumes some form of the content will always be there\n * instead of scenarios where someone tries to dynamically apply components. It may be good to\n * review using a window.setTimeout(() => handleScrollButtons()) in componentDidMount.\n *\n * Our temporary solution is to simply hide the buttons with a manual set flag affecting the\n * CSS class. This will most likely cause long-term issues.\n */\n/**\n * ToDo: Insights frontend components uses a custom tabs layout, investigate related CSS classes\n * Originally we applied the CSS classes, but they appeared to provide nothing. Since Insights\n * rolled its own tabs we're hesitant to apply said classes without understanding what they provide.\n */\n/**\n * A set of tabs.\n *\n * @augments React.Component\n * @fires onTab\n */\nclass Tabs extends React.Component {\n  state = {\n    updatedActiveTab: null,\n    updatedTabs: null\n  };\n\n  componentDidMount() {\n    const { updatedTabs } = this.state;\n\n    if (updatedTabs === null) {\n      this.setTabData();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { tabs } = this.props;\n    const customizer = (valueA, valueB) => {\n      if (typeof valueA === 'function' && typeof valueB === 'function') {\n        return valueA.toString() === valueB.toString();\n      }\n\n      return undefined;\n    };\n\n    if (!_isEqualWith(prevProps.tabs, tabs, customizer)) {\n      this.setTabData();\n    }\n  }\n\n  /**\n   * On tab selected\n   *\n   * @event onTab\n   * @param {object} params\n   * @param {number} params.index\n   */\n  onTab = ({ index }) => {\n    const { onTab } = this.props;\n\n    this.setState(\n      {\n        updatedActiveTab: index\n      },\n      () => onTab({ index })\n    );\n  };\n\n  /**\n   * Convert tab objects into the required PF Tab format.\n   */\n  setTabData() {\n    const { activeTab, defaultActiveTab, tabs } = this.props;\n    let updatedActiveTab = defaultActiveTab;\n\n    const updatedTabs = tabs.map(({ active, content, title }, index) => {\n      updatedActiveTab = active ? index : updatedActiveTab;\n\n      return (\n        <Tab key={title} eventKey={index} title={<TabTitleText>{title}</TabTitleText>}>\n          {content}\n        </Tab>\n      );\n    });\n\n    if (typeof activeTab === 'number') {\n      updatedActiveTab = activeTab;\n    }\n\n    this.setState({\n      updatedActiveTab,\n      updatedTabs\n    });\n  }\n\n  /**\n   * Apply props to tabs.\n   *\n   * @returns {React.ReactNode}\n   */\n  renderTabs() {\n    const { updatedActiveTab, updatedTabs } = this.state;\n    const { className, hasOverflowScroll } = this.props;\n\n    return (\n      <PfTabs\n        className={`curiosity-tabs${(!hasOverflowScroll && '__no-scroll') || ''} ${className || ''}`}\n        activeKey={updatedActiveTab}\n        onSelect={(event, index) => this.onTab({ event, index })}\n        mountOnEnter\n        unmountOnExit\n        inset={{\n          default: 'insetNone',\n          md: 'insetLg'\n        }}\n      >\n        {updatedTabs}\n      </PfTabs>\n    );\n  }\n\n  /**\n   * Render tabs.\n   *\n   * @returns {React.ReactNode}\n   */\n  render() {\n    return (\n      <Grid className=\"curiosity-tabs-container\">\n        <GridItem span={12}>{this.renderTabs()}</GridItem>\n      </Grid>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{tabs: Array, hasOverflowScroll: boolean, onTab: Function, className: string,\n *     defaultActiveTab: number, activeTab: number}}\n */\nTabs.propTypes = {\n  activeTab: PropTypes.number,\n  className: PropTypes.string,\n  defaultActiveTab: PropTypes.number,\n  hasOverflowScroll: PropTypes.bool,\n  onTab: PropTypes.func,\n  tabs: PropTypes.arrayOf(\n    PropTypes.shape({\n      active: PropTypes.bool,\n      content: PropTypes.node.isRequired,\n      title: PropTypes.node.isRequired\n    })\n  )\n};\n\n/**\n * Default props.\n *\n * @type {{tabs: Array, hasOverflowScroll: boolean, onTab: Function, className: string,\n *     defaultActiveTab: number, activeTab: number}}\n */\nTabs.defaultProps = {\n  activeTab: null,\n  className: '',\n  defaultActiveTab: 0,\n  hasOverflowScroll: false,\n  onTab: helpers.noop,\n  tabs: []\n};\n\nexport { Tabs as default, Tabs };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Toolbar as PfToolbar,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup\n} from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport { useProductToolbarQuery } from '../productView/productViewContext';\nimport { useToolbarFieldClear, useToolbarFieldClearAll, useToolbarFields } from './toolbarContext';\nimport { ToolbarFieldSelectCategory, useSelectCategoryOptions } from './toolbarFieldSelectCategory';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Primary view toolbar.\n *\n * @memberof Components\n * @module Toolbar\n * @property {module} ToolbarContext\n * @property {module} ToolbarFieldArchitecture\n * @property {module} ToolbarFieldBillingProvider\n * @property {module} ToolbarFieldCategory\n * @property {module} ToolbarFieldDisplayName\n * @property {module} ToolbarFieldGranularity\n * @property {module} ToolbarFieldRangedMonthly\n * @property {module} ToolbarFieldSelectCategory\n * @property {module} ToolbarFieldSla\n * @property {module} ToolbarFieldUom\n * @property {module} ToolbarFieldUsage\n * @property {module} ToolbarFieldVariant\n */\n\n/**\n * Application filter toolbar.\n *\n * @fires onClearFilter\n * @fires onClearAll\n * @param {object} props\n * @param {boolean} props.hardFilterReset On clearing all fields allow the category to reset as well.\n * @param {boolean} props.isDisabled\n * @param {Function} props.t\n * @param {Function} props.useProductToolbarQuery\n * @param {Function} props.useSelectCategoryOptions\n * @param {Function} props.useToolbarFieldClear\n * @param {Function} props.useToolbarFieldClearAll\n * @param {Function} props.useToolbarFields\n * @returns {React.ReactNode}\n */\nconst Toolbar = ({\n  hardFilterReset,\n  isDisabled,\n  t,\n  useProductToolbarQuery: useAliasProductToolbarQuery,\n  useSelectCategoryOptions: useAliasSelectCategoryOptions,\n  useToolbarFieldClear: useAliasToolbarFieldClear,\n  useToolbarFieldClearAll: useAliasToolbarFieldClearAll,\n  useToolbarFields: useAliasToolbarFields\n}) => {\n  const toolbarFieldQueries = useAliasProductToolbarQuery();\n  const { currentCategory, options } = useAliasSelectCategoryOptions();\n  const clearField = useAliasToolbarFieldClear();\n  const clearAllFields = useAliasToolbarFieldClearAll();\n  const { itemFields, secondaryFields } = useAliasToolbarFields();\n\n  if (isDisabled || (!options?.length && !secondaryFields?.length)) {\n    return null;\n  }\n\n  /**\n   * Clear a specific value\n   *\n   * @event onClearFilter\n   * @param {object} params\n   * @param {*} params.value\n   * @returns {void}\n   */\n  const onClearFilter = ({ value }) => clearField(value);\n\n  /**\n   * Clear all active filters.\n   *\n   * @event onClearAll\n   * @returns {void}\n   */\n  const onClearAll = () => clearAllFields(hardFilterReset);\n\n  /**\n   * Set selected options for chip display.\n   *\n   * @param {object} params\n   * @param {*} params.value\n   * @returns {Array}\n   */\n  const setSelectedOptions = ({ value: filterName } = {}) => {\n    const filterValue = toolbarFieldQueries?.[filterName];\n    return (\n      (typeof filterValue === 'string' && [\n        t('curiosity-toolbar.label', { context: [filterName, (filterValue === '' && 'none') || filterValue] })\n      ]) ||\n      []\n    );\n  };\n\n  return (\n    <PfToolbar\n      id=\"curiosity-toolbar\"\n      className=\"curiosity-toolbar pf-m-toggle-group-container ins-c-primary-toolbar\"\n      collapseListedFiltersBreakpoint=\"sm\"\n      clearAllFilters={onClearAll}\n      clearFiltersButtonText={t('curiosity-toolbar.clearFilters')}\n    >\n      <ToolbarContent>\n        <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"md\">\n          <ToolbarGroup variant=\"filter-group\">\n            {options.length > 1 && (\n              <ToolbarItem>\n                <ToolbarFieldSelectCategory />\n              </ToolbarItem>\n            )}\n            {options.map(({ title, value: filterName, component: OptionComponent, isClearable }) => {\n              const chipProps = { categoryName: title };\n\n              if (isClearable !== false) {\n                chipProps.chips = setSelectedOptions({ value: filterName });\n                chipProps.deleteChip = () => onClearFilter({ value: filterName });\n              }\n\n              return (\n                <ToolbarFilter\n                  key={filterName}\n                  showToolbarItem={currentCategory === filterName || options.length === 1}\n                  {...chipProps}\n                >\n                  <OptionComponent isFilter />\n                </ToolbarFilter>\n              );\n            })}\n          </ToolbarGroup>\n        </ToolbarToggleGroup>\n        <ToolbarGroup key=\"itemFields\">{itemFields}</ToolbarGroup>\n        <ToolbarGroup key=\"secondaryFields\" alignment={{ default: 'alignRight' }}>\n          {secondaryFields}\n        </ToolbarGroup>\n      </ToolbarContent>\n    </PfToolbar>\n  );\n};\n\n/**\n * Prop types\n *\n * @type {{useToolbarFieldClear: Function, t: Function, useSelectCategoryOptions: Function, hardFilterReset: boolean,\n *     useToolbarFields: Function, useProductToolbarQuery: Function, isDisabled: boolean,\n *     useToolbarFieldClearAll: Function}}\n */\nToolbar.propTypes = {\n  hardFilterReset: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  t: PropTypes.func,\n  useProductToolbarQuery: PropTypes.func,\n  useSelectCategoryOptions: PropTypes.func,\n  useToolbarFieldClear: PropTypes.func,\n  useToolbarFieldClearAll: PropTypes.func,\n  useToolbarFields: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useToolbarFieldClear: Function, t: Function, useSelectCategoryOptions: Function, hardFilterReset: boolean,\n *     useToolbarFields: Function, useProductToolbarQuery: Function, isDisabled: boolean,\n *     useToolbarFieldClearAll: Function}}\n */\nToolbar.defaultProps = {\n  hardFilterReset: false,\n  isDisabled: helpers.UI_DISABLED_TOOLBAR,\n  t: translate,\n  useProductToolbarQuery,\n  useSelectCategoryOptions,\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFields\n};\n\nexport { Toolbar as default, Toolbar };\n","import React, { useMemo } from 'react';\nimport { ToolbarItem } from '@patternfly/react-core';\nimport { useProductQuery, useProductToolbarConfig } from '../productView/productViewContext';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { useOnSelect as useSelectCategoryOnSelect, toolbarFieldOptions } from './toolbarFieldSelectCategory';\nimport { useOnSelect as useArchitectureOnSelect } from './toolbarFieldArchitecture';\nimport { useOnSelect as useBillingProviderOnSelect } from './toolbarFieldBillingProvider';\nimport { useOnSelect as useCategoryOnSelect } from './toolbarFieldCategory';\nimport { useOnSelect as useSlaOnSelect } from './toolbarFieldSla';\nimport { useOnSelect as useUsageOnSelect } from './toolbarFieldUsage';\nimport { useOnSelect as useVariantOnSelect } from './toolbarFieldVariant';\nimport { helpers } from '../../common/helpers';\n\n/**\n * @memberof Toolbar\n * @module ToolbarContext\n */\n\n/**\n * Clear a specific toolbar category using a select component's OnSelect hook.\n *\n * @param {object} options\n * @param {Function} options.useArchitectureOnSelect\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useCategoryOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @param {Function} options.useVariantOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClear = ({\n  useArchitectureOnSelect: useAliasArchitectureOnSelect = useArchitectureOnSelect,\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useCategoryOnSelect: useAliasCategoryOnSelect = useCategoryOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect,\n  useVariantOnSelect: useAliasVariantOnSelect = useVariantOnSelect\n} = {}) => {\n  const architectureOnSelect = useAliasArchitectureOnSelect();\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const categoryOnSelect = useAliasCategoryOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n  const variantOnSelect = useAliasVariantOnSelect();\n\n  return field => {\n    switch (field) {\n      case RHSM_API_QUERY_SET_TYPES.ARCHITECTURE:\n        architectureOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER:\n        billingOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.CATEGORY:\n        categoryOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.SLA:\n        slaOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.USAGE:\n        usageOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.VARIANT:\n        variantOnSelect();\n        break;\n      default:\n        break;\n    }\n  };\n};\n\n/**\n * Clear all available toolbar categories.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useArchitectureOnSelect\n * @param {Function} options.useSelectCategoryOnSelect\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useCategoryOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @param {Function} options.useVariantOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClearAll = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useArchitectureOnSelect: useAliasArchitectureOnSelect = useArchitectureOnSelect,\n  useSelectCategoryOnSelect: useAliasSelectCategoryOnSelect = useSelectCategoryOnSelect,\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useCategoryOnSelect: useAliasCategoryOnSelect = useCategoryOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect,\n  useVariantOnSelect: useAliasVariantOnSelect = useVariantOnSelect\n} = {}) => {\n  const {\n    [RHSM_API_QUERY_SET_TYPES.ARCHITECTURE]: architecture,\n    [RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER]: billingProvider,\n    [RHSM_API_QUERY_SET_TYPES.CATEGORY]: category,\n    [RHSM_API_QUERY_SET_TYPES.SLA]: sla,\n    [RHSM_API_QUERY_SET_TYPES.USAGE]: usage,\n    [RHSM_API_QUERY_SET_TYPES.VARIANT]: variant\n  } = useAliasProductQuery();\n  const architectureOnSelect = useAliasArchitectureOnSelect();\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const categoryOnSelect = useAliasCategoryOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n  const selectCategoryOnSelect = useAliasSelectCategoryOnSelect();\n  const variantOnSelect = useAliasVariantOnSelect();\n\n  return hardFilterReset => {\n    if (typeof architecture === 'string') {\n      architectureOnSelect();\n    }\n\n    if (typeof billingProvider === 'string') {\n      billingOnSelect();\n    }\n\n    if (typeof category === 'string') {\n      categoryOnSelect();\n    }\n\n    if (typeof sla === 'string') {\n      slaOnSelect();\n    }\n\n    if (typeof usage === 'string') {\n      usageOnSelect();\n    }\n\n    if (typeof variant === 'string') {\n      variantOnSelect();\n    }\n\n    if (hardFilterReset) {\n      selectCategoryOnSelect();\n    }\n  };\n};\n\n/**\n * Return lists of item and secondary toolbar fields for display.\n *\n * @param {object} options\n * @param {Array} options.categoryOptions\n * @param {Function} options.useProductToolbarConfig\n * @returns {Array}\n */\nconst useToolbarFields = ({\n  categoryOptions = toolbarFieldOptions,\n  useProductToolbarConfig: useAliasProductToolbarConfig = useProductToolbarConfig\n} = {}) => {\n  const { filters = [] } = useAliasProductToolbarConfig();\n\n  return useMemo(() => {\n    const setFilter = ({ id, content, ...filterProps }) => {\n      const option = categoryOptions.find(({ value: categoryOptionValue }) => id === categoryOptionValue);\n      const { component: OptionComponent } = option || {};\n\n      return (\n        (OptionComponent && (\n          <ToolbarItem key={`option-${id}`}>\n            <OptionComponent isFilter={false} {...filterProps} />\n          </ToolbarItem>\n        )) || (\n          <ToolbarItem key={id || helpers.generateId()}>\n            {typeof content === 'function' ? content() : content}\n          </ToolbarItem>\n        ) ||\n        null\n      );\n    };\n\n    return {\n      itemFields: filters.filter(({ isItem }) => isItem === true).map(setFilter),\n      secondaryFields: filters.filter(({ isSecondary }) => isSecondary === true).map(setFilter)\n    };\n  }, [categoryOptions, filters]);\n};\n\nconst context = {\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFields\n};\n\nexport { context as default, context, useToolbarFieldClear, useToolbarFieldClearAll, useToolbarFields };\n"],"names":["BannerMessages","_ref","messages","useAliasGetAppMessages","useGetAppMessages","_useState","useState","_useState2","_slicedToArray","hideAlerts","setHideAlerts","_useState3","_useState4","alerts","setAlerts","appMessages","data","useShallowCompareEffect","updatedMessages","length","Object","entries","forEach","_ref2","_ref3","key","value","message","find","_ref4","id","push","_objectSpread","map","_ref5","title","_ref5$variant","variant","AlertVariant","actionClose","React","AlertActionCloseButton","onClose","_defineProperty","Alert","className","defaultProps","translate","context","helpers","appName","Button","isInline","component","icon","ExternalLinkAltIcon","iconPosition","target","href","arguments","undefined","_ref$getMessageReport","getMessageReports","reduxActions","_ref$useDispatch","useDispatch","useAliasDispatch","storeHooks","_ref$useProduct","useProduct","useAliasProduct","_ref$useProductQuery","useProductQuery","useAliasProductQuery","_ref$useSelectorsResp","useSelectorsResponse","useAliasSelectorsResponse","_useAliasProduct","productId","query","dispatch","_useAliasSelectorsRes","selector","_messages$report","report","error","fulfilled","pending","_objectSpread2","_dateHelpers$getRange","dateHelpers","startDate","endDate","updatedQuery","RHSM_API_QUERY_SET_TYPES","GRANULARITY_TYPES","toISOString","updatedData","cloudigradeMismatch","_messages$data","_messages$data$revers","_ref3$messages","reverse","rhsmConstants","GraphCard","_groupedFiltersSettin","_groupedFiltersSettin2","_groupedFiltersSettin3","_groupedFiltersSettin4","_groupedFiltersSettin5","isDisabled","_useAliasParseFilters","useAliasParseFiltersSettings","useParseFiltersSettings","groupedFiltersSettings","standaloneFiltersSettings","settings","metrics","GraphCardContext","concat","GraphCardChart","filtersSettings","_filtersSettings$sett","_filtersSettings$sett2","metric","GraphCardMetricTotals","_helpers$numberDispla","_helpers$numberDispla2","_helpers$numberDispla3","_helpers$numberDispla4","children","t","useAliasMetricsSelector","useMetricsSelector","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","_useAliasMetricsSelec","_useAliasMetricsSelec2","dataSets","_ref2$data","metricId","_ref2$meta","meta","lastDate","date","lastHasData","hasData","lastValue","y","isCurrentDate","currentDate","currentHasData","currentValue","monthlyDate","totalMonthlyDate","monthlyHasData","totalMonthlyHasData","monthlyValue","totalMonthlyValue","_ref6","toolbarFieldOptions","option","selectedMonth","isCurrent","dailyDate","dailyHasData","dailyValue","_camelCase","Card","isPlain","CardHeader","CardTitle","Title","headingLevel","size","Loader","skeletonProps","SkeletonSize","month","CardBody","height","total","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","CardFooter","moment","InventoryCardHosts","props","assign","InventoryCard","useGetInventory","useGetHostsInventory","useOnColumnSort","useOnColumnSortHosts","InventoryCardSubscriptions","cardActions","useGetSubscriptionsInventory","useOnPage","useOnPageSubscriptions","useOnColumnSortSubscriptions","useProductInventoryConfig","useProductInventorySubscriptionsConfig","useProductInventoryQuery","useProductInventorySubscriptionsQuery","_ref$isDisabled","_ref$getInventory","getInventory","_ref$useProductInvent","useAliasProductInventoryQuery","_inventory$subscripti","inventory","subscriptionsInventory","cancelled","response","_objectWithoutProperties","_excluded","_ref3$useDispatch","_ref3$useProduct","_useAliasProduct2","offset","perPage","type","reduxTypes","viewId","_ref7","_ref7$sortColumns","sortColumns","SORT_TYPES","_ref7$useDispatch","_ref7$useProduct","_useAliasProduct3","_data","_ref8","updatedDirection","direction","updatedSortColumn","values","SortByDirection","SORT_DIRECTION_TYPES","console","warn","InventoryTab","active","propTypes","PropTypes","useOnTab","index","tabs","InventoryTabs","activeTab","defaultActiveTab","useAliasOnTab","useAliasSelector","useSelector","updatedActiveTab","_inventory$tabs","onTab","updatedChildren","child","_child$props","childProps","content","count","Tabs","ProductView","_useAliasRouteDetail","useAliasRouteDetail","useRouteDetail","productGroup","productConfig","renderProduct","useCallback","config","initialInventoryFilters","initialSubscriptionsInventoryFilters","productDisplay","ProductViewContext","PageMessages","DISPLAY_TYPES","PageToolbar","Toolbar","PageSection","updated","PageLayout","PageHeader","productLabel","PageColumns","routerContext","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","apply","state","updatedTabs","setState","_createClass","this","setTabData","prevProps","_isEqualWith","valueA","valueB","toString","_this$props","Tab","eventKey","TabTitleText","_this2","_this$state","_this$props2","hasOverflowScroll","PfTabs","activeKey","onSelect","event","mountOnEnter","unmountOnExit","inset","default","md","Grid","GridItem","span","renderTabs","hardFilterReset","useAliasProductToolbarQuery","useProductToolbarQuery","useAliasSelectCategoryOptions","useSelectCategoryOptions","useAliasToolbarFieldClear","useToolbarFieldClear","useAliasToolbarFieldClearAll","useToolbarFieldClearAll","useAliasToolbarFields","useToolbarFields","toolbarFieldQueries","_useAliasSelectCatego","currentCategory","options","clearField","clearAllFields","_useAliasToolbarField","itemFields","secondaryFields","PfToolbar","collapseListedFiltersBreakpoint","clearAllFilters","clearFiltersButtonText","ToolbarContent","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarGroup","ToolbarItem","ToolbarFieldSelectCategory","filterName","OptionComponent","chipProps","categoryName","isClearable","chips","filterValue","setSelectedOptions","deleteChip","ToolbarFilter","showToolbarItem","isFilter","alignment","_ref$useArchitectureO","useArchitectureOnSelect","useAliasArchitectureOnSelect","_ref$useBillingProvid","useBillingProviderOnSelect","useAliasBillingProviderOnSelect","_ref$useCategoryOnSel","useCategoryOnSelect","useAliasCategoryOnSelect","_ref$useSlaOnSelect","useSlaOnSelect","useAliasSlaOnSelect","_ref$useUsageOnSelect","useUsageOnSelect","useAliasUsageOnSelect","_ref$useVariantOnSele","useVariantOnSelect","useAliasVariantOnSelect","architectureOnSelect","billingOnSelect","categoryOnSelect","slaOnSelect","usageOnSelect","variantOnSelect","field","_ref2$useProductQuery","_ref2$useArchitecture","_ref2$useSelectCatego","useSelectCategoryOnSelect","useAliasSelectCategoryOnSelect","_ref2$useBillingProvi","_ref2$useCategoryOnSe","_ref2$useSlaOnSelect","_ref2$useUsageOnSelec","_ref2$useVariantOnSel","_useAliasProductQuery","architecture","billingProvider","category","sla","usage","selectCategoryOnSelect","_ref3$categoryOptions","categoryOptions","_ref3$useProductToolb","useProductToolbarConfig","useAliasProductToolbarConfig","_useAliasProductToolb","_useAliasProductToolb2","filters","useMemo","setFilter","filterProps","categoryOptionValue","filter","isItem","isSecondary"],"sourceRoot":""}