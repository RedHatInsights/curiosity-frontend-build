{"version":3,"file":"js/353.29500e701d683b0fd587.js","mappings":"mPAqBMA,EAAY,SAAHC,GAAqF,IAA/EC,EAAQD,EAARC,SAAUC,EAAQF,EAARE,SAAUC,EAASH,EAATG,UAA8BC,EAAsBJ,EAAzCK,kBAClDC,GAAgCC,EAAAA,EAAAA,UAAS,CAAEC,oBAAgBC,EAAWC,UAAU,IAAQC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAAjFO,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GACtBI,GAAeC,EAAAA,EAAAA,QAAO,MACtBC,GAAoBD,EAAAA,EAAAA,QAAO,MACjCE,EAA2Dd,EAAuBW,GAAlEI,EAAeD,EAAvBE,OAAgCZ,EAAcU,EAArBG,MAwBjC,OAtBAC,EAAAA,EAAAA,YAAU,WACR,IAAKpB,GAAaA,IAAaW,EAASH,SAAW,CACjD,IAAAa,EAAqCR,EAA7BS,QAASC,OAAU,IAAAF,EAAG,CAAC,EAACA,EAChCG,EAA0CT,EAAlCO,QAASG,OAAe,IAAAD,EAAG,CAAC,EAACA,EAErC,GAAID,SAAAA,EAAYG,MAAO,CACrB,IAAIC,GAAgBF,aAAe,EAAfA,EAAiBG,eAAgB,EAEjD3B,EAAYgB,IACdU,EAAgB1B,GAGlBsB,EAAWG,MAAMzB,UAAY,GAAH4B,OAAMF,EAAa,MAC7Cf,GAAY,iBAAO,CACjBN,eAAAA,EACAE,SAAUR,EACV2B,cAAAA,EACD,GACH,CACF,CACF,GAAG,CAACV,EAAiBX,EAAgBO,EAAcE,EAAmBf,EAAUC,EAAWU,EAASH,WAGlGsB,IAAAA,cAAA,OAAKC,UAAU,sBAAsBC,IAAKnB,GACxCiB,IAAAA,cAAA,OAAKC,UAAU,6BAA6BC,IAAKjB,GAC9ChB,GAIT,EAmBAF,EAAUoC,aAAe,CACvBjC,UAAU,EACVC,UAAW,EACXE,kBAAAA,EAAAA,G","sources":["webpack:///./src/components/minHeight/minHeight.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useResizeObserver } from '../../hooks/useWindow';\n\n/**\n * Normalize component height on page loads and updates.\n *\n * @memberof Components\n * @module MinHeight\n */\n\n/**\n * Set a min-height to prevent page jump component.\n *\n * @param {object} props\n * @param {React.ReactNode} props.children\n * @param {boolean} props.isOnLoad\n * @param {number} props.minHeight\n * @param {Function} props.useResizeObserver\n * @returns {React.ReactNode}\n */\nconst MinHeight = ({ children, isOnLoad, minHeight, useResizeObserver: useAliasResizeObserver }) => {\n  const [tracking, setTracking] = useState({ containerWidth: undefined, isLoaded: false });\n  const containerRef = useRef(null);\n  const innerContainerRef = useRef(null);\n  const { height: containerHeight, width: containerWidth } = useAliasResizeObserver(containerRef);\n\n  useEffect(() => {\n    if (!isOnLoad || (isOnLoad && !tracking.isLoaded)) {\n      const { current: domElement = {} } = containerRef;\n      const { current: innerDomElement = {} } = innerContainerRef;\n\n      if (domElement?.style) {\n        let updatedHeight = innerDomElement?.clientHeight || 0;\n\n        if (minHeight > containerHeight) {\n          updatedHeight = minHeight;\n        }\n\n        domElement.style.minHeight = `${updatedHeight}px`;\n        setTracking(() => ({\n          containerWidth,\n          isLoaded: isOnLoad,\n          updatedHeight\n        }));\n      }\n    }\n  }, [containerHeight, containerWidth, containerRef, innerContainerRef, isOnLoad, minHeight, tracking.isLoaded]);\n\n  return (\n    <div className=\"curiosity-minheight\" ref={containerRef}>\n      <div className=\"curiosity-minheight__inner\" ref={innerContainerRef}>\n        {children}\n      </div>\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{minHeight: number, useResizeObserver: Function, children: React.ReactNode, isOnLoad: boolean}}\n */\nMinHeight.propTypes = {\n  children: PropTypes.node.isRequired,\n  minHeight: PropTypes.number,\n  isOnLoad: PropTypes.bool,\n  useResizeObserver: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{minHeight: number, useResizeObserver: Function, isOnLoad: boolean}}\n */\nMinHeight.defaultProps = {\n  isOnLoad: false,\n  minHeight: 0,\n  useResizeObserver\n};\n\nexport { MinHeight as default, MinHeight };\n"],"names":["MinHeight","_ref","children","isOnLoad","minHeight","useAliasResizeObserver","useResizeObserver","_useState","useState","containerWidth","undefined","isLoaded","_useState2","_slicedToArray","tracking","setTracking","containerRef","useRef","innerContainerRef","_useAliasResizeObserv","containerHeight","height","width","useEffect","_containerRef$current","current","domElement","_innerContainerRef$cu","innerDomElement","style","updatedHeight","clientHeight","concat","React","className","ref","defaultProps"],"sourceRoot":""}