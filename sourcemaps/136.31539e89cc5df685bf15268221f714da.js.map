{"version":3,"file":"js/136.1670343053621.95293a13975a001f4e1a.js","mappings":"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","sources":["webpack:///./src/components/form/select.js","webpack:///./src/components/toolbar/toolbarFieldArchitecture.js","webpack:///./src/components/toolbar/toolbarFieldBillingProvider.js","webpack:///./src/components/toolbar/toolbarFieldGranularity.js","webpack:///./src/components/toolbar/toolbarFieldRangedMonthly.js","webpack:///./src/components/toolbar/toolbarFieldSelectCategory.js","webpack:///./src/components/toolbar/toolbarFieldSla.js","webpack:///./src/components/toolbar/toolbarFieldUom.js","webpack:///./src/components/toolbar/toolbarFieldUsage.js","webpack:///./src/components/toolbar/toolbarFieldVariant.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  DropdownDirection,\n  DropdownPosition,\n  Select as PfSelect,\n  SelectOption as PfSelectOption,\n  SelectVariant\n} from '@patternfly/react-core';\nimport _cloneDeep from 'lodash/cloneDeep';\nimport _isEqual from 'lodash/isEqual';\nimport _findIndex from 'lodash/findIndex';\nimport _isPlainObject from 'lodash/isPlainObject';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Pass direction as select component variant option.\n *\n * @type {DropdownDirection}\n */\nconst SelectDirection = DropdownDirection;\n\n/**\n * Pass position as select component variant option.\n *\n * @type {DropdownPosition}\n */\nconst SelectPosition = DropdownPosition;\n\n/**\n * FixMe: PF isFlipEnabled busts left/right positioning, we now disable it by default\n * We caught this adjustment through our component code test snapshots. PF positioning for left/right has issues in general on\n * Select (Dropdown used to use the same styling, and functioned correctly, we'd need to reevaluate it now). We patched Select\n * with a minor styling adjustment for position from Dropdown, this worked until isFlipEnabled became defaulted to true.\n * Evaluate on next PF patch.\n */\n/**\n * A wrapper for Patternfly Select. Provides restructured event data for onSelect callback.\n *\n * @augments React.Component\n * @fires onSelect\n * @fires onToggle\n */\nclass Select extends React.Component {\n  state = { isExpanded: false, options: null, selected: null };\n\n  selectField = React.createRef();\n\n  componentDidMount() {\n    const { options } = this.state;\n\n    if (options === null) {\n      this.formatOptions();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { options, selectedOptions } = this.props;\n\n    if (!_isEqual(prevProps.options, options) || !_isEqual(prevProps.selectedOptions, selectedOptions)) {\n      this.formatOptions();\n    }\n  }\n\n  /**\n   * Emulate select event object, apply to provided onSelect prop.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @param {string} titleSelection\n   */\n  onSelect = (event, titleSelection) => {\n    const { options } = this.state;\n    const { id, name, onSelect, variant } = this.props;\n\n    const updatedOptions = options;\n    const optionsIndex = updatedOptions.findIndex(option => option.title === titleSelection);\n    updatedOptions[optionsIndex].selected =\n      variant === SelectVariant.single ? true : !updatedOptions[optionsIndex].selected;\n\n    if (variant === SelectVariant.single) {\n      updatedOptions.forEach((option, index) => {\n        if (optionsIndex !== index) {\n          updatedOptions[index].selected = false;\n        }\n      });\n    }\n\n    const updateSelected =\n      variant === SelectVariant.single\n        ? titleSelection\n        : updatedOptions.filter(opt => opt.selected === true).map(opt => opt.title);\n\n    this.setState(\n      {\n        options: updatedOptions,\n        selected: updateSelected\n      },\n      () => {\n        const mockUpdatedOptions = _cloneDeep(updatedOptions);\n\n        const mockTarget = {\n          id,\n          name: name || id,\n          value: mockUpdatedOptions[optionsIndex].value,\n          selected:\n            (variant === SelectVariant.single && mockUpdatedOptions[optionsIndex]) || _cloneDeep(updateSelected),\n          selectedIndex: optionsIndex,\n          type: `select-${(variant === SelectVariant.single && 'one') || 'multiple'}`,\n          options: mockUpdatedOptions\n        };\n\n        if (variant === SelectVariant.checkbox) {\n          mockTarget.checked = mockUpdatedOptions[optionsIndex].selected;\n        }\n\n        const mockEvent = {\n          ...mockTarget,\n          target: { ...mockTarget },\n          currentTarget: { ...mockTarget },\n          persist: helpers.noop\n        };\n\n        onSelect({ ...mockEvent }, optionsIndex, mockUpdatedOptions);\n\n        if (variant === SelectVariant.single) {\n          this.setState({\n            isExpanded: false\n          });\n        }\n      }\n    );\n  };\n\n  /**\n   * Patternfly Select's open/closed state.\n   *\n   * @event onToggle\n   * @param {boolean} expanded\n   */\n  onToggle = expanded => {\n    this.setState({\n      isExpanded: expanded\n    });\n  };\n\n  // FixMe: attributes filtered on PF select component. allow data- attributes\n  /**\n   * Format options into a consumable array of objects format.\n   * Note: It is understood that for line 151'ish around \"updatedOptions\" we dump all values regardless\n   * of whether they are plain objects, or not, into updatedOptions. This has been done for speed only,\n   * one less check to perform.\n   */\n  formatOptions() {\n    const { current: domElement = {} } = this.selectField;\n    const { options, selectedOptions, variant } = this.props;\n    const dataAttributes = Object.entries(this.props).filter(([key]) => /^data-/i.test(key));\n    const updatedOptions = _isPlainObject(options)\n      ? Object.entries(options).map(([key, value]) => ({ ...value, title: key, value }))\n      : _cloneDeep(options);\n\n    const activateOptions =\n      (selectedOptions && typeof selectedOptions === 'string') || typeof selectedOptions === 'number'\n        ? [selectedOptions]\n        : selectedOptions;\n\n    updatedOptions.forEach((option, index) => {\n      let convertedOption = option;\n\n      if (typeof convertedOption === 'string') {\n        convertedOption = {\n          title: option,\n          value: option\n        };\n\n        updatedOptions[index] = convertedOption;\n      }\n\n      convertedOption.text = convertedOption.text || convertedOption.title;\n      convertedOption.textContent = convertedOption.textContent || convertedOption.title;\n      convertedOption.label = convertedOption.label || convertedOption.title;\n\n      if (activateOptions) {\n        let isSelected;\n\n        if (_isPlainObject(convertedOption.value)) {\n          isSelected = _findIndex(activateOptions, convertedOption.value) > -1;\n\n          if (!isSelected) {\n            const tempSearch = activateOptions.find(activeOption =>\n              Object.values(convertedOption.value).includes(activeOption)\n            );\n            isSelected = !!tempSearch;\n          }\n        } else {\n          isSelected = activateOptions.includes(convertedOption.value);\n        }\n\n        if (!isSelected) {\n          isSelected = activateOptions.includes(convertedOption.title);\n        }\n\n        updatedOptions[index].selected = isSelected;\n      }\n    });\n\n    let updateSelected;\n\n    if (variant === SelectVariant.single) {\n      updateSelected = (updatedOptions.find(opt => opt.selected === true) || {}).title;\n    } else {\n      updateSelected = updatedOptions.filter(opt => opt.selected === true).map(opt => opt.title);\n    }\n\n    if (domElement?.parentRef?.current) {\n      dataAttributes.forEach(([key, value]) => domElement?.parentRef?.current.setAttribute(key, value));\n    }\n\n    this.setState({\n      options: updatedOptions,\n      selected: updateSelected\n    });\n  }\n\n  /**\n   * Render a select/dropdown list.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { options, selected, isExpanded } = this.state;\n    const {\n      ariaLabel,\n      className,\n      direction,\n      isDisabled,\n      isFlipEnabled,\n      isToggleText,\n      maxHeight,\n      placeholder,\n      position,\n      toggleIcon,\n      variant\n    } = this.props;\n\n    const pfSelectOptions = {\n      direction,\n      isFlipEnabled,\n      maxHeight\n    };\n\n    // FixMe: investigate \"isDisabled\", PFReact quirks?\n    if (!options || !options.length || isDisabled) {\n      pfSelectOptions.isDisabled = true;\n    }\n\n    /**\n     * FixMe: PFReact quirks around PfSelect, requires children\n     * \"Null\" is a typical fallback we use across the board on a multitude of React apps.\n     * In this case \"null\" is a fallback for scenarios where an \"undefined\" list is passed\n     * during initial mount. Converted to an empty list/array \"[]\" to compensate.\n     */\n    /**\n     * Note: PFReact missing select border on compile\n     * Related https://github.com/patternfly/patternfly-react/issues/5650 and\n     * https://github.com/cssnano/cssnano/issues/1051\n     */\n    return (\n      <div className=\"curiosity-select\">\n        <PfSelect\n          menuAppendTo=\"parent\"\n          className={`curiosity-select-pf${(!isToggleText && '__no-toggle-text') || ''} ${\n            (position === DropdownPosition.right && 'curiosity-select-pf__position-right') || ''\n          } ${className}`}\n          variant={variant}\n          aria-label={ariaLabel}\n          onToggle={this.onToggle}\n          onSelect={this.onSelect}\n          selections={selected}\n          isOpen={isExpanded}\n          toggleIcon={toggleIcon}\n          placeholderText={placeholder}\n          ref={this.selectField}\n          {...pfSelectOptions}\n        >\n          {(options &&\n            options.map(option => (\n              <PfSelectOption\n                key={window.btoa(`${option.title}-${option.value}`)}\n                id={window.btoa(`${option.title}-${option.value}`)}\n                value={option.title}\n                data-value={(_isPlainObject(option.value) && JSON.stringify([option.value])) || option.value}\n                data-title={option.title}\n              />\n            ))) ||\n            []}\n        </PfSelect>\n      </div>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{isFlipEnabled: boolean, toggleIcon: React.ReactNode|Function, className: string, ariaLabel: string,\n *     onSelect: Function, isToggleText: boolean, maxHeight: number, name: string, options: Array|object,\n *     selectedOptions: number|string|Array, variant: string, id: string, isDisabled: boolean,\n *     placeholder: string, position: string, direction: string}}\n */\nSelect.propTypes = {\n  ariaLabel: PropTypes.string,\n  className: PropTypes.string,\n  direction: PropTypes.oneOf(Object.values(SelectDirection)),\n  id: PropTypes.string,\n  isDisabled: PropTypes.bool,\n  isFlipEnabled: PropTypes.bool,\n  isToggleText: PropTypes.bool,\n  maxHeight: PropTypes.number,\n  name: PropTypes.string,\n  onSelect: PropTypes.func,\n  options: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.string),\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.any,\n        value: PropTypes.any.isRequired,\n        selected: PropTypes.bool\n      })\n    ),\n    PropTypes.shape({\n      title: PropTypes.any,\n      value: PropTypes.any.isRequired,\n      selected: PropTypes.bool\n    }),\n    PropTypes.object\n  ]),\n  placeholder: PropTypes.string,\n  position: PropTypes.oneOf(Object.values(SelectPosition)),\n  selectedOptions: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]))\n  ]),\n  toggleIcon: PropTypes.element,\n  variant: PropTypes.oneOf([...Object.values(SelectVariant)])\n};\n\n/**\n * Default props.\n *\n * @type {{isFlipEnabled: boolean, toggleIcon: React.ReactNode|Function, className: string, ariaLabel: string,\n *     onSelect: Function, isToggleText: boolean, maxHeight: null, name: null, options: *[], selectedOptions: null,\n *     variant: SelectVariant.single, id: string, isDisabled: boolean, placeholder: string,\n *     position: DropdownPosition.left, direction: DropdownDirection.down}}\n */\nSelect.defaultProps = {\n  ariaLabel: 'Select option',\n  className: '',\n  direction: SelectDirection.down,\n  id: helpers.generateId(),\n  isDisabled: false,\n  isFlipEnabled: false,\n  isToggleText: true,\n  maxHeight: null,\n  name: null,\n  onSelect: helpers.noop,\n  options: [],\n  placeholder: 'Select option',\n  position: SelectPosition.left,\n  selectedOptions: null,\n  toggleIcon: null,\n  variant: SelectVariant.single\n};\n\nexport { Select as default, Select, SelectDirection, SelectPosition };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductToolbarQuery } from '../productView/productViewContext';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { Select, SelectPosition } from '../form/select';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Generate select field options from config\n *\n * @param {object} options\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useToolbarFieldOptions = ({ useProduct: useAliasProduct = useProduct } = {}) => {\n  const { productArchitectures } = useAliasProduct();\n  const options = [];\n\n  if (Array.isArray(productArchitectures)) {\n    options.push(\n      ...productArchitectures.map(type => ({\n        title: translate('curiosity-toolbar.label', {\n          context: ['architecture', (type === '' && 'none') || type]\n        }),\n        value: type,\n        selected: false\n      }))\n    );\n  }\n\n  return options;\n};\n\n/**\n * On select update.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY,\n        viewId,\n        filter: RHSM_API_QUERY_SET_TYPES.ARCHITECTURE,\n        value\n      }\n    ]);\n  };\n};\n\n/**\n * Display an architecture field with generated options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductToolbarQuery\n * @param {Function} props.useToolbarFieldOptions\n * @returns {Node}\n */\nconst ToolbarFieldArchitecture = ({\n  isFilter,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductToolbarQuery: useAliasProductToolbarQuery,\n  useToolbarFieldOptions: useAliasToolbarFieldOptions\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.ARCHITECTURE]: updatedValue } = useAliasProductToolbarQuery();\n  const onSelect = useAliasOnSelect();\n  const options = useAliasToolbarFieldOptions();\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'architecture'] })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'architecture'] })}\n      position={position}\n      data-test=\"toolbarFieldArchitecture\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, useProductToolbarQuery: Function, isFilter: boolean,\n *     position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldArchitecture.propTypes = {\n  isFilter: PropTypes.bool,\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductToolbarQuery: PropTypes.func,\n  useToolbarFieldOptions: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: translate, useProductToolbarQuery: Function, isFilter: boolean,\n *     position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldArchitecture.defaultProps = {\n  isFilter: false,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductToolbarQuery,\n  useToolbarFieldOptions\n};\n\nexport { ToolbarFieldArchitecture as default, ToolbarFieldArchitecture, useOnSelect, useToolbarFieldOptions };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport {\n  RHSM_API_QUERY_BILLING_PROVIDER_TYPES as FIELD_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.label', { context: ['billing_provider', (type === '' && 'none') || type] }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update billing provider.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER]: value\n      }\n    ]);\n  };\n};\n\n/**\n * Display a billing provider field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {object} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductQuery\n * @returns {Node}\n */\nconst ToolbarFieldBillingProvider = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductQuery: useAliasProductQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER]: updatedValue } = useAliasProductQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'billing_provider' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'billing_provider' })}\n      position={position}\n      data-test=\"toolbarFieldBillingProvider\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldBillingProvider.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldBillingProvider.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductQuery\n};\n\nexport { ToolbarFieldBillingProvider as default, ToolbarFieldBillingProvider, toolbarFieldOptions, useOnSelect };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport {\n  RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.label', { context: ['granularity', type] }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update granularity.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    const { startDate, endDate } = dateHelpers.getRangedDateTime(value);\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: value\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.END_DATE]: endDate.toISOString()\n      }\n    ]);\n  };\n};\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {Array} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst ToolbarFieldGranularity = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: updatedValue } = useAliasProductGraphTallyQuery();\n  const onSelect = useAliasOnSelect();\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'granularity' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'granularity' })}\n      position={position}\n      data-test=\"toolbarFieldGranularity\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldGranularity.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldGranularity.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductGraphTallyQuery\n};\n\nexport { ToolbarFieldGranularity as default, ToolbarFieldGranularity, toolbarFieldOptions, useOnSelect };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport {\n  RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = dateHelpers.getRangedMonthDateTime().listDateTimeRanges.map(dateTime => ({\n  ...dateTime,\n  selected: false\n}));\n\n/**\n * On select update granularity.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value } = {}) => {\n    const { startDate, endDate } = value;\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: FIELD_TYPES.DAILY\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate?.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.END_DATE]: endDate?.toISOString()\n      }\n    ]);\n  };\n};\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {Array} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst ToolbarFieldRangedMonthly = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: updatedValue } = useAliasProductGraphTallyQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({\n    ...option,\n    selected: option.title === updatedValue || option.value.startDate.toISOString() === updatedValue\n  }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'rangedMonthly' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'rangedMonthly' })}\n      position={position}\n      maxHeight={250}\n      data-test=\"toolbarFieldRangeGranularity\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldRangedMonthly.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldRangedMonthly.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductGraphTallyQuery\n};\n\nexport { ToolbarFieldRangedMonthly as default, ToolbarFieldRangedMonthly, toolbarFieldOptions, useOnSelect };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport { useShallowCompareEffect } from 'react-use';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductToolbarConfig } from '../productView/productViewContext';\nimport { Select } from '../form/select';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\nimport { ToolbarFieldArchitecture } from './toolbarFieldArchitecture';\nimport {\n  ToolbarFieldBillingProvider,\n  toolbarFieldOptions as billingProviderOptions\n} from './toolbarFieldBillingProvider';\nimport { ToolbarFieldGranularity, toolbarFieldOptions as granularityOptions } from './toolbarFieldGranularity';\nimport { ToolbarFieldRangedMonthly, toolbarFieldOptions as rangedMonthlyOptions } from './toolbarFieldRangedMonthly';\nimport { ToolbarFieldSla, toolbarFieldOptions as slaOptions } from './toolbarFieldSla';\nimport { ToolbarFieldUom, toolbarFieldOptions as uomOptions } from './toolbarFieldUom';\nimport { ToolbarFieldUsage, toolbarFieldOptions as usageOptions } from './toolbarFieldUsage';\nimport { ToolbarFieldVariant } from './toolbarFieldVariant';\n\n/**\n * Select field options. Use function instead of arrow func to help with component\n * display name during testing.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = [\n  {\n    title: translate('curiosity-toolbar.label', { context: ['category', RHSM_API_QUERY_SET_TYPES.GRANULARITY] }),\n    value: RHSM_API_QUERY_SET_TYPES.GRANULARITY,\n    component: function Granularity(props) {\n      return <ToolbarFieldGranularity key=\"selectCategory_granularity\" {...props} />;\n    },\n    options: granularityOptions,\n    isClearable: false\n  },\n  {\n    title: translate('curiosity-toolbar.label', { context: ['category', 'rangedMonthly'] }),\n    value: 'rangedMonthly',\n    component: function RangedMonthly(props) {\n      return <ToolbarFieldRangedMonthly key=\"selectCategory_rangedMonthly\" {...props} />;\n    },\n    options: rangedMonthlyOptions,\n    isClearable: false\n  },\n  {\n    title: translate('curiosity-toolbar.label', { context: ['category', RHSM_API_QUERY_SET_TYPES.UOM] }),\n    value: RHSM_API_QUERY_SET_TYPES.UOM,\n    component: function Uom(props) {\n      return <ToolbarFieldUom key=\"selectCategory_uom\" {...props} />;\n    },\n    options: uomOptions,\n    isClearable: false\n  },\n  {\n    title: translate('curiosity-toolbar.label', { context: ['category', RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER] }),\n    value: RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER,\n    component: function BillingProvider(props) {\n      return <ToolbarFieldBillingProvider key=\"selectCategory_billingProvider\" {...props} />;\n    },\n    options: billingProviderOptions,\n    isClearable: true\n  },\n  {\n    title: translate('curiosity-toolbar.label', { context: ['category', RHSM_API_QUERY_SET_TYPES.SLA] }),\n    value: RHSM_API_QUERY_SET_TYPES.SLA,\n    component: function Sla(props) {\n      return <ToolbarFieldSla key=\"selectCategory_sla\" {...props} />;\n    },\n    options: slaOptions,\n    isClearable: true\n  },\n  {\n    title: translate('curiosity-toolbar.label', { context: ['category', RHSM_API_QUERY_SET_TYPES.USAGE] }),\n    value: RHSM_API_QUERY_SET_TYPES.USAGE,\n    component: function Usage(props) {\n      return <ToolbarFieldUsage key=\"selectCategory_usage\" {...props} />;\n    },\n    options: usageOptions,\n    isClearable: true\n  },\n  {\n    title: translate('curiosity-toolbar.label', { context: ['category', RHSM_API_QUERY_SET_TYPES.VARIANT] }),\n    value: RHSM_API_QUERY_SET_TYPES.VARIANT,\n    component: function Variant(props) {\n      return <ToolbarFieldVariant key=\"selectCategory_variant\" {...props} />;\n    },\n    options: [],\n    isClearable: true\n  },\n  {\n    title: translate('curiosity-toolbar.label', { context: ['category', RHSM_API_QUERY_SET_TYPES.ARCHITECTURE] }),\n    value: RHSM_API_QUERY_SET_TYPES.ARCHITECTURE,\n    component: function Architecture(props) {\n      return <ToolbarFieldArchitecture key=\"selectCategory_architecture\" {...props} />;\n    },\n    options: [],\n    isClearable: true\n  }\n].map(option => ({\n  ...option,\n  selected: false\n}));\n\n/**\n * On select update category.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.toolbar.SET_FILTER_TYPE,\n        viewId,\n        currentFilter: value\n      }\n    ]);\n  };\n};\n\n/**\n * Return filtered category options, current, and initial value.\n *\n * @param {object} options\n * @param {Array} options.categoryOptions\n * @param {Function} options.useProduct\n * @param {Function} options.useProductToolbarConfig\n * @param {Function} options.useSelector\n * @returns {object}\n */\nconst useSelectCategoryOptions = ({\n  categoryOptions = toolbarFieldOptions,\n  useProduct: useAliasProduct = useProduct,\n  useProductToolbarConfig: useAliasProductToolbarConfig = useProductToolbarConfig,\n  useSelector: useAliasSelector = storeHooks.reactRedux.useSelector\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const { currentFilter: updatedValue } = useAliasSelector(({ toolbar }) => toolbar.filters?.[viewId], {});\n  const { filters = [] } = useAliasProductToolbarConfig();\n\n  let initialValue;\n\n  const updatedOptions = filters.map(({ id, selected }) => {\n    const option = categoryOptions.find(({ value }) => id === value);\n\n    if (updatedValue === undefined && selected) {\n      initialValue = option.value;\n    }\n\n    return {\n      ...option,\n      selected: (updatedValue === undefined && selected) || updatedValue === option.value\n    };\n  });\n\n  return {\n    currentCategory: updatedValue,\n    initialCategory: initialValue,\n    options: updatedOptions\n  };\n};\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useSelectCategoryOptions\n * @returns {Node}\n */\nconst ToolbarFieldSelectCategory = ({\n  t,\n  useOnSelect: useAliasOnSelect,\n  useSelectCategoryOptions: useAliasSelectCategoryOptions\n}) => {\n  const { currentCategory: updatedValue, initialCategory: initialValue, options } = useAliasSelectCategoryOptions();\n  const onSelect = useAliasOnSelect();\n\n  useShallowCompareEffect(() => {\n    if (initialValue) {\n      onSelect({ value: initialValue });\n    }\n  }, [initialValue, onSelect]);\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder_filter')}\n      onSelect={onSelect}\n      options={options}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder_filter')}\n      toggleIcon={<FilterIcon />}\n      data-test=\"toolbarFieldCategory\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, useSelectCategoryOptions: Function}}\n */\nToolbarFieldSelectCategory.propTypes = {\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useSelectCategoryOptions: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, useSelectCategoryOptions: Function}}\n */\nToolbarFieldSelectCategory.defaultProps = {\n  t: translate,\n  useOnSelect,\n  useSelectCategoryOptions\n};\n\nexport {\n  ToolbarFieldSelectCategory as default,\n  ToolbarFieldSelectCategory,\n  toolbarFieldOptions,\n  useOnSelect,\n  useSelectCategoryOptions\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_SLA_TYPES as FIELD_TYPES, RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.label', { context: ['sla', (type === '' && 'none') || type] }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update sla.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.SLA],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.SLA]: value\n      }\n    ]);\n  };\n};\n\n/**\n * Display a sla field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {object} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductQuery\n * @returns {Node}\n */\nconst ToolbarFieldSla = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductQuery: useAliasProductQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.SLA]: updatedValue } = useAliasProductQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'sla' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'sla' })}\n      position={position}\n      data-test=\"toolbarFieldSla\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldSla.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldSla.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductQuery\n};\n\nexport { ToolbarFieldSla as default, ToolbarFieldSla, toolbarFieldOptions, useOnSelect };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_UOM_TYPES as FIELD_TYPES, RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.label', { context: ['uom', (type === '' && 'none') || type] }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update uom.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) =>\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.UOM],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.UOM]: value\n      }\n    ]);\n};\n\n/**\n * Display a unit of measure (uom) field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {Array} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductQuery\n * @returns {Node}\n */\nconst ToolbarFieldUom = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductQuery: useAliasProductQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.UOM]: updatedValue } = useAliasProductQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'uom' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'uom' })}\n      position={position}\n      data-test=\"toolbarFieldUom\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldUom.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldUom.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductQuery\n};\n\nexport { ToolbarFieldUom as default, ToolbarFieldUom, toolbarFieldOptions, useOnSelect };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_USAGE_TYPES as FIELD_TYPES, RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.label', { context: ['usage', (type === '' && 'none') || type] }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update usage.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) =>\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.USAGE],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.USAGE]: value\n      }\n    ]);\n};\n\n/**\n * Display a usage field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {object} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductQuery\n * @returns {Node}\n */\nconst ToolbarFieldUsage = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductQuery: useAliasProductQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.USAGE]: updatedValue } = useAliasProductQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'usage' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'usage' })}\n      position={position}\n      data-test=\"toolbarFieldUsage\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldUsage.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\n\nToolbarFieldUsage.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductQuery\n};\n\nexport { ToolbarFieldUsage as default, ToolbarFieldUsage, toolbarFieldOptions, useOnSelect };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductToolbarQuery } from '../productView/productViewContext';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { Select, SelectPosition } from '../form/select';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Generate select field options from config\n *\n * @param {object} options\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useToolbarFieldOptions = ({ useProduct: useAliasProduct = useProduct } = {}) => {\n  const { productVariants } = useAliasProduct();\n  const options = [];\n\n  if (Array.isArray(productVariants)) {\n    options.push(\n      ...productVariants.map(type => ({\n        title: translate('curiosity-toolbar.label', {\n          context: ['variant', (type === '' && 'none') || type]\n        }),\n        value: type,\n        selected: false\n      }))\n    );\n  }\n\n  return options;\n};\n\n/**\n * On select update.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY,\n        viewId,\n        filter: RHSM_API_QUERY_SET_TYPES.VARIANT,\n        value\n      }\n    ]);\n  };\n};\n\n/**\n * Display a variant field with generated options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductToolbarQuery\n * @param {Function} props.useToolbarFieldOptions\n * @returns {Node}\n */\nconst ToolbarFieldVariant = ({\n  isFilter,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductToolbarQuery: useAliasProductToolbarQuery,\n  useToolbarFieldOptions: useAliasToolbarFieldOptions\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.VARIANT]: updatedValue } = useAliasProductToolbarQuery();\n  const onSelect = useAliasOnSelect();\n  const options = useAliasToolbarFieldOptions();\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'variant'] })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'variant'] })}\n      position={position}\n      data-test=\"toolbarFieldVariant\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, useProductToolbarQuery: Function, isFilter: boolean,\n *     position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldVariant.propTypes = {\n  isFilter: PropTypes.bool,\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductToolbarQuery: PropTypes.func,\n  useToolbarFieldOptions: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: translate, useProductToolbarQuery: Function, isFilter: boolean,\n *     position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldVariant.defaultProps = {\n  isFilter: false,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductToolbarQuery,\n  useToolbarFieldOptions\n};\n\nexport { ToolbarFieldVariant as default, ToolbarFieldVariant, useOnSelect, useToolbarFieldOptions };\n"],"names":["SelectDirection","DropdownDirection","SelectPosition","DropdownPosition","Select","state","isExpanded","options","selected","selectField","React","onSelect","event","titleSelection","props","id","name","variant","updatedOptions","optionsIndex","findIndex","option","title","SelectVariant","forEach","index","updateSelected","filter","opt","map","setState","mockUpdatedOptions","_cloneDeep","mockTarget","value","selectedIndex","type","checked","mockEvent","target","currentTarget","persist","helpers","onToggle","expanded","this","formatOptions","prevProps","selectedOptions","_isEqual","current","domElement","dataAttributes","Object","entries","key","test","_isPlainObject","activateOptions","isSelected","convertedOption","text","textContent","label","_findIndex","find","activeOption","values","includes","parentRef","setAttribute","ariaLabel","className","direction","isDisabled","isFlipEnabled","isToggleText","maxHeight","placeholder","position","toggleIcon","pfSelectOptions","length","menuAppendTo","selections","isOpen","placeholderText","ref","window","btoa","JSON","stringify","defaultProps","down","left","useToolbarFieldOptions","useProduct","useAliasProduct","productArchitectures","Array","isArray","push","translate","context","useOnSelect","useDispatch","useAliasDispatch","storeHooks","viewId","dispatch","reduxTypes","RHSM_API_QUERY_SET_TYPES","ToolbarFieldArchitecture","isFilter","t","useAliasOnSelect","useAliasProductToolbarQuery","useProductToolbarQuery","useAliasToolbarFieldOptions","updatedValue","toolbarFieldOptions","FIELD_TYPES","ToolbarFieldBillingProvider","useAliasProductQuery","useProductQuery","dateHelpers","startDate","endDate","toISOString","ToolbarFieldGranularity","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","listDateTimeRanges","dateTime","ToolbarFieldRangedMonthly","component","granularityOptions","isClearable","rangedMonthlyOptions","ToolbarFieldUom","uomOptions","billingProviderOptions","ToolbarFieldSla","slaOptions","ToolbarFieldUsage","usageOptions","ToolbarFieldVariant","currentFilter","useSelectCategoryOptions","initialValue","categoryOptions","useProductToolbarConfig","useAliasProductToolbarConfig","useSelector","useAliasSelector","toolbar","filters","undefined","currentCategory","initialCategory","ToolbarFieldSelectCategory","useAliasSelectCategoryOptions","useShallowCompareEffect","FilterIcon","productVariants"],"sourceRoot":""}