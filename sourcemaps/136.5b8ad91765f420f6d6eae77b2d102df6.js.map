{"version":3,"file":"js/136.1676002957778.a6f1aa37a02b4c109850.js","mappings":"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","sources":["webpack:///./src/components/toolbar/toolbarFieldArchitecture.js","webpack:///./src/components/toolbar/toolbarFieldBillingProvider.js","webpack:///./src/components/toolbar/toolbarFieldCategory.js","webpack:///./src/components/toolbar/toolbarFieldGranularity.js","webpack:///./src/components/toolbar/toolbarFieldRangedMonthly.js","webpack:///./src/components/toolbar/toolbarFieldSelectCategory.js","webpack:///./src/components/toolbar/toolbarFieldSla.js","webpack:///./src/components/toolbar/toolbarFieldUom.js","webpack:///./src/components/toolbar/toolbarFieldUsage.js","webpack:///./src/components/toolbar/toolbarFieldVariant.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductToolbarQuery } from '../productView/productViewContext';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { Select, SelectPosition } from '../form/select';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Generate select field options from config\n *\n * @param {object} options\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useToolbarFieldOptions = ({ useProduct: useAliasProduct = useProduct } = {}) => {\n  const { productArchitectures } = useAliasProduct();\n  const options = [];\n\n  if (Array.isArray(productArchitectures)) {\n    options.push(\n      ...productArchitectures.map(type => ({\n        title: translate('curiosity-toolbar.label', {\n          context: ['architecture', (type === '' && 'none') || type]\n        }),\n        value: type,\n        selected: false\n      }))\n    );\n  }\n\n  return options;\n};\n\n/**\n * On select update.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY,\n        viewId,\n        filter: RHSM_API_QUERY_SET_TYPES.ARCHITECTURE,\n        value\n      }\n    ]);\n  };\n};\n\n/**\n * Display an architecture field with generated options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductToolbarQuery\n * @param {Function} props.useToolbarFieldOptions\n * @returns {Node}\n */\nconst ToolbarFieldArchitecture = ({\n  isFilter,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductToolbarQuery: useAliasProductToolbarQuery,\n  useToolbarFieldOptions: useAliasToolbarFieldOptions\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.ARCHITECTURE]: updatedValue } = useAliasProductToolbarQuery();\n  const onSelect = useAliasOnSelect();\n  const options = useAliasToolbarFieldOptions();\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'architecture'] })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'architecture'] })}\n      position={position}\n      data-test=\"toolbarFieldArchitecture\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, useProductToolbarQuery: Function, isFilter: boolean,\n *     position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldArchitecture.propTypes = {\n  isFilter: PropTypes.bool,\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductToolbarQuery: PropTypes.func,\n  useToolbarFieldOptions: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: translate, useProductToolbarQuery: Function, isFilter: boolean,\n *     position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldArchitecture.defaultProps = {\n  isFilter: false,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductToolbarQuery,\n  useToolbarFieldOptions\n};\n\nexport { ToolbarFieldArchitecture as default, ToolbarFieldArchitecture, useOnSelect, useToolbarFieldOptions };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport {\n  RHSM_API_QUERY_BILLING_PROVIDER_TYPES as FIELD_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.label', { context: ['billing_provider', (type === '' && 'none') || type] }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update billing provider.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER]: value\n      }\n    ]);\n  };\n};\n\n/**\n * Display a billing provider field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {object} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductQuery\n * @returns {Node}\n */\nconst ToolbarFieldBillingProvider = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductQuery: useAliasProductQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER]: updatedValue } = useAliasProductQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'billing_provider' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'billing_provider' })}\n      position={position}\n      data-test=\"toolbarFieldBillingProvider\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldBillingProvider.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldBillingProvider.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductQuery\n};\n\nexport { ToolbarFieldBillingProvider as default, ToolbarFieldBillingProvider, toolbarFieldOptions, useOnSelect };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductGraphConfig, useProductToolbarQuery } from '../productView/productViewContext';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { Select, SelectPosition } from '../form/select';\nimport { graphCardHelpers } from '../graphCard/graphCardHelpers';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Generate select field options from config\n *\n * @param {object} options\n * @param {Function} options.useProductGraphConfig\n * @returns {Function}\n */\nconst useToolbarFieldOptions = ({ useProductGraphConfig: useAliasProductGraphConfig = useProductGraphConfig } = {}) => {\n  const { filters } = useAliasProductGraphConfig();\n  const options = [];\n\n  if (Array.isArray(filters)) {\n    const updatedFilters = filters\n      ?.map(({ metric, query }) => {\n        const category = query?.[RHSM_API_QUERY_SET_TYPES.CATEGORY];\n\n        if (category !== undefined) {\n          return {\n            title: translate('curiosity-toolbar.label', {\n              context: ['category', (category === '' && 'none') || category]\n            }),\n            value: category,\n            metaData: {\n              metric,\n              query\n            },\n            selected: false\n          };\n        }\n\n        return undefined;\n      })\n      .filter(value => value !== undefined);\n\n    if (updatedFilters?.length) {\n      options.push(...updatedFilters);\n    }\n  }\n\n  return options;\n};\n\n/**\n * On select update.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId, viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null, selected = {} } = {}) => {\n    let updatedGraphLegendValue = value;\n\n    if (selected?.metaData?.metric) {\n      updatedGraphLegendValue = graphCardHelpers.generateChartIds({\n        metric: selected.metaData.metric,\n        productId,\n        query: { [RHSM_API_QUERY_SET_TYPES.CATEGORY]: value }\n      });\n    }\n\n    dispatch([\n      {\n        type: reduxTypes.graph.SET_GRAPH_LEGEND,\n        id: `${viewId}-inverted`,\n        value: updatedGraphLegendValue\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY,\n        viewId,\n        filter: RHSM_API_QUERY_SET_TYPES.CATEGORY,\n        value\n      }\n    ]);\n  };\n};\n\n/**\n * Display a category field with generated options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductToolbarQuery\n * @param {Function} props.useToolbarFieldOptions\n * @returns {Node}\n */\nconst ToolbarFieldCategory = ({\n  isFilter,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductToolbarQuery: useAliasProductToolbarQuery,\n  useToolbarFieldOptions: useAliasToolbarFieldOptions\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.CATEGORY]: updatedValue } = useAliasProductToolbarQuery();\n  const onSelect = useAliasOnSelect();\n  const options = useAliasToolbarFieldOptions();\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'category'] })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'category'] })}\n      position={position}\n      // variant={SelectVariant.checkbox}\n      data-test=\"toolbarFieldCategory\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, useProductToolbarQuery: Function, isFilter: boolean,\n *     position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldCategory.propTypes = {\n  isFilter: PropTypes.bool,\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductToolbarQuery: PropTypes.func,\n  useToolbarFieldOptions: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: translate, useProductToolbarQuery: Function, isFilter: boolean,\n *     position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldCategory.defaultProps = {\n  isFilter: false,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductToolbarQuery,\n  useToolbarFieldOptions\n};\n\nexport { ToolbarFieldCategory as default, ToolbarFieldCategory, useOnSelect, useToolbarFieldOptions };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport {\n  RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.label', { context: ['granularity', type] }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update granularity.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    const { startDate, endDate } = dateHelpers.getRangedDateTime(value);\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: value\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.END_DATE]: endDate.toISOString()\n      }\n    ]);\n  };\n};\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {Array} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst ToolbarFieldGranularity = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: updatedValue } = useAliasProductGraphTallyQuery();\n  const onSelect = useAliasOnSelect();\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'granularity' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'granularity' })}\n      position={position}\n      data-test=\"toolbarFieldGranularity\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldGranularity.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldGranularity.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductGraphTallyQuery\n};\n\nexport { ToolbarFieldGranularity as default, ToolbarFieldGranularity, toolbarFieldOptions, useOnSelect };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport {\n  RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = dateHelpers.getRangedMonthDateTime().listDateTimeRanges.map(dateTime => ({\n  ...dateTime,\n  selected: false\n}));\n\n/**\n * On select update granularity.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value } = {}) => {\n    const { startDate, endDate } = value;\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: FIELD_TYPES.DAILY\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate?.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.END_DATE]: endDate?.toISOString()\n      }\n    ]);\n  };\n};\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {Array} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst ToolbarFieldRangedMonthly = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: updatedValue } = useAliasProductGraphTallyQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({\n    ...option,\n    selected: option.title === updatedValue || option.value.startDate.toISOString() === updatedValue\n  }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'rangedMonthly' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'rangedMonthly' })}\n      position={position}\n      maxHeight={250}\n      data-test=\"toolbarFieldRangeGranularity\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldRangedMonthly.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldRangedMonthly.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductGraphTallyQuery\n};\n\nexport { ToolbarFieldRangedMonthly as default, ToolbarFieldRangedMonthly, toolbarFieldOptions, useOnSelect };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport { useShallowCompareEffect } from 'react-use';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductToolbarConfig } from '../productView/productViewContext';\nimport { Select } from '../form/select';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\nimport { ToolbarFieldArchitecture } from './toolbarFieldArchitecture';\nimport {\n  ToolbarFieldBillingProvider,\n  toolbarFieldOptions as billingProviderOptions\n} from './toolbarFieldBillingProvider';\nimport { ToolbarFieldCategory } from './toolbarFieldCategory';\nimport { ToolbarFieldGranularity, toolbarFieldOptions as granularityOptions } from './toolbarFieldGranularity';\nimport { ToolbarFieldRangedMonthly, toolbarFieldOptions as rangedMonthlyOptions } from './toolbarFieldRangedMonthly';\nimport { ToolbarFieldSla, toolbarFieldOptions as slaOptions } from './toolbarFieldSla';\nimport { ToolbarFieldUom, toolbarFieldOptions as uomOptions } from './toolbarFieldUom';\nimport { ToolbarFieldUsage, toolbarFieldOptions as usageOptions } from './toolbarFieldUsage';\nimport { ToolbarFieldVariant } from './toolbarFieldVariant';\n\n/**\n * Select field options. Use function instead of arrow func to help with component\n * display name during testing.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = [\n  {\n    title: translate('curiosity-toolbar.label', { context: ['filter', RHSM_API_QUERY_SET_TYPES.GRANULARITY] }),\n    value: RHSM_API_QUERY_SET_TYPES.GRANULARITY,\n    component: function Granularity(props) {\n      return <ToolbarFieldGranularity key=\"selectCategory_granularity\" {...props} />;\n    },\n    options: granularityOptions,\n    isClearable: false\n  },\n  {\n    title: translate('curiosity-toolbar.label', { context: ['filter', 'rangedMonthly'] }),\n    value: 'rangedMonthly',\n    component: function RangedMonthly(props) {\n      return <ToolbarFieldRangedMonthly key=\"selectCategory_rangedMonthly\" {...props} />;\n    },\n    options: rangedMonthlyOptions,\n    isClearable: false\n  },\n  {\n    title: translate('curiosity-toolbar.label', { context: ['filter', RHSM_API_QUERY_SET_TYPES.UOM] }),\n    value: RHSM_API_QUERY_SET_TYPES.UOM,\n    component: function Uom(props) {\n      return <ToolbarFieldUom key=\"selectCategory_uom\" {...props} />;\n    },\n    options: uomOptions,\n    isClearable: false\n  },\n  {\n    title: translate('curiosity-toolbar.label', { context: ['filter', RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER] }),\n    value: RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER,\n    component: function BillingProvider(props) {\n      return <ToolbarFieldBillingProvider key=\"selectCategory_billingProvider\" {...props} />;\n    },\n    options: billingProviderOptions,\n    isClearable: true\n  },\n  {\n    title: translate('curiosity-toolbar.label', { context: ['filter', RHSM_API_QUERY_SET_TYPES.SLA] }),\n    value: RHSM_API_QUERY_SET_TYPES.SLA,\n    component: function Sla(props) {\n      return <ToolbarFieldSla key=\"selectCategory_sla\" {...props} />;\n    },\n    options: slaOptions,\n    isClearable: true\n  },\n  {\n    title: translate('curiosity-toolbar.label', { context: ['filter', RHSM_API_QUERY_SET_TYPES.USAGE] }),\n    value: RHSM_API_QUERY_SET_TYPES.USAGE,\n    component: function Usage(props) {\n      return <ToolbarFieldUsage key=\"selectCategory_usage\" {...props} />;\n    },\n    options: usageOptions,\n    isClearable: true\n  },\n  {\n    title: translate('curiosity-toolbar.label', { context: ['filter', RHSM_API_QUERY_SET_TYPES.CATEGORY] }),\n    value: RHSM_API_QUERY_SET_TYPES.CATEGORY,\n    component: function Variant(props) {\n      return <ToolbarFieldCategory key=\"selectCategory_category\" {...props} />;\n    },\n    options: [],\n    isClearable: true\n  },\n  {\n    title: translate('curiosity-toolbar.label', { context: ['filter', RHSM_API_QUERY_SET_TYPES.VARIANT] }),\n    value: RHSM_API_QUERY_SET_TYPES.VARIANT,\n    component: function Variant(props) {\n      return <ToolbarFieldVariant key=\"selectCategory_variant\" {...props} />;\n    },\n    options: [],\n    isClearable: true\n  },\n  {\n    title: translate('curiosity-toolbar.label', { context: ['filter', RHSM_API_QUERY_SET_TYPES.ARCHITECTURE] }),\n    value: RHSM_API_QUERY_SET_TYPES.ARCHITECTURE,\n    component: function Architecture(props) {\n      return <ToolbarFieldArchitecture key=\"selectCategory_architecture\" {...props} />;\n    },\n    options: [],\n    isClearable: true\n  }\n].map(option => ({\n  ...option,\n  selected: false\n}));\n\n/**\n * On select update category.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.toolbar.SET_FILTER_TYPE,\n        viewId,\n        currentFilter: value\n      }\n    ]);\n  };\n};\n\n/**\n * Return filtered category options, current, and initial value.\n *\n * @param {object} options\n * @param {Array} options.categoryOptions\n * @param {Function} options.useProduct\n * @param {Function} options.useProductToolbarConfig\n * @param {Function} options.useSelector\n * @returns {object}\n */\nconst useSelectCategoryOptions = ({\n  categoryOptions = toolbarFieldOptions,\n  useProduct: useAliasProduct = useProduct,\n  useProductToolbarConfig: useAliasProductToolbarConfig = useProductToolbarConfig,\n  useSelector: useAliasSelector = storeHooks.reactRedux.useSelector\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const { currentFilter: updatedValue } = useAliasSelector(({ toolbar }) => toolbar.filters?.[viewId], {});\n  const { filters = [] } = useAliasProductToolbarConfig();\n\n  let initialValue;\n\n  const updatedOptions = filters\n    .filter(({ isItem, isSecondary }) => !isItem && !isSecondary)\n    .map(({ id, selected }) => {\n      const option = categoryOptions.find(({ value }) => id === value);\n\n      if (updatedValue === undefined && selected) {\n        initialValue = option.value;\n      }\n\n      return {\n        ...option,\n        selected: (updatedValue === undefined && selected) || updatedValue === option.value\n      };\n    });\n\n  return {\n    currentCategory: updatedValue,\n    initialCategory: initialValue,\n    options: updatedOptions\n  };\n};\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useSelectCategoryOptions\n * @returns {Node}\n */\nconst ToolbarFieldSelectCategory = ({\n  t,\n  useOnSelect: useAliasOnSelect,\n  useSelectCategoryOptions: useAliasSelectCategoryOptions\n}) => {\n  const { currentCategory: updatedValue, initialCategory: initialValue, options } = useAliasSelectCategoryOptions();\n  const onSelect = useAliasOnSelect();\n\n  useShallowCompareEffect(() => {\n    if (initialValue) {\n      onSelect({ value: initialValue });\n    }\n  }, [initialValue, onSelect]);\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: ['filter'] })}\n      onSelect={onSelect}\n      options={options}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder', { context: ['filter'] })}\n      toggleIcon={<FilterIcon />}\n      data-test=\"toolbarFieldCategory\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, useSelectCategoryOptions: Function}}\n */\nToolbarFieldSelectCategory.propTypes = {\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useSelectCategoryOptions: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, useSelectCategoryOptions: Function}}\n */\nToolbarFieldSelectCategory.defaultProps = {\n  t: translate,\n  useOnSelect,\n  useSelectCategoryOptions\n};\n\nexport {\n  ToolbarFieldSelectCategory as default,\n  ToolbarFieldSelectCategory,\n  toolbarFieldOptions,\n  useOnSelect,\n  useSelectCategoryOptions\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_SLA_TYPES as FIELD_TYPES, RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.label', { context: ['sla', (type === '' && 'none') || type] }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update sla.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.SLA],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.SLA]: value\n      }\n    ]);\n  };\n};\n\n/**\n * Display a sla field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {object} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductQuery\n * @returns {Node}\n */\nconst ToolbarFieldSla = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductQuery: useAliasProductQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.SLA]: updatedValue } = useAliasProductQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'sla' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'sla' })}\n      position={position}\n      data-test=\"toolbarFieldSla\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldSla.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldSla.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductQuery\n};\n\nexport { ToolbarFieldSla as default, ToolbarFieldSla, toolbarFieldOptions, useOnSelect };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_UOM_TYPES as FIELD_TYPES, RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.label', { context: ['uom', (type === '' && 'none') || type] }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update uom.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) =>\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.UOM],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.UOM]: value\n      }\n    ]);\n};\n\n/**\n * Display a unit of measure (uom) field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {Array} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductQuery\n * @returns {Node}\n */\nconst ToolbarFieldUom = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductQuery: useAliasProductQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.UOM]: updatedValue } = useAliasProductQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'uom' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'uom' })}\n      position={position}\n      data-test=\"toolbarFieldUom\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldUom.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldUom.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductQuery\n};\n\nexport { ToolbarFieldUom as default, ToolbarFieldUom, toolbarFieldOptions, useOnSelect };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_USAGE_TYPES as FIELD_TYPES, RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.label', { context: ['usage', (type === '' && 'none') || type] }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update usage.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) =>\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.USAGE],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.USAGE]: value\n      }\n    ]);\n};\n\n/**\n * Display a usage field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {object} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductQuery\n * @returns {Node}\n */\nconst ToolbarFieldUsage = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductQuery: useAliasProductQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.USAGE]: updatedValue } = useAliasProductQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'usage' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'usage' })}\n      position={position}\n      data-test=\"toolbarFieldUsage\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldUsage.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\n\nToolbarFieldUsage.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductQuery\n};\n\nexport { ToolbarFieldUsage as default, ToolbarFieldUsage, toolbarFieldOptions, useOnSelect };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductToolbarQuery } from '../productView/productViewContext';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { Select, SelectPosition } from '../form/select';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Generate select field options from config\n *\n * @param {object} options\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useToolbarFieldOptions = ({ useProduct: useAliasProduct = useProduct } = {}) => {\n  const { productVariants } = useAliasProduct();\n  const options = [];\n\n  if (Array.isArray(productVariants)) {\n    options.push(\n      ...productVariants.map(type => ({\n        title: translate('curiosity-toolbar.label', {\n          context: ['variant', (type === '' && 'none') || type]\n        }),\n        value: type,\n        selected: false\n      }))\n    );\n  }\n\n  return options;\n};\n\n/**\n * On select update.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY,\n        viewId,\n        filter: RHSM_API_QUERY_SET_TYPES.VARIANT,\n        value\n      }\n    ]);\n  };\n};\n\n/**\n * Display a variant field with generated options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductToolbarQuery\n * @param {Function} props.useToolbarFieldOptions\n * @returns {Node}\n */\nconst ToolbarFieldVariant = ({\n  isFilter,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductToolbarQuery: useAliasProductToolbarQuery,\n  useToolbarFieldOptions: useAliasToolbarFieldOptions\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.VARIANT]: updatedValue } = useAliasProductToolbarQuery();\n  const onSelect = useAliasOnSelect();\n  const options = useAliasToolbarFieldOptions();\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'variant'] })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'variant'] })}\n      position={position}\n      data-test=\"toolbarFieldVariant\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, useProductToolbarQuery: Function, isFilter: boolean,\n *     position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldVariant.propTypes = {\n  isFilter: PropTypes.bool,\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductToolbarQuery: PropTypes.func,\n  useToolbarFieldOptions: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: translate, useProductToolbarQuery: Function, isFilter: boolean,\n *     position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldVariant.defaultProps = {\n  isFilter: false,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductToolbarQuery,\n  useToolbarFieldOptions\n};\n\nexport { ToolbarFieldVariant as default, ToolbarFieldVariant, useOnSelect, useToolbarFieldOptions };\n"],"names":["useToolbarFieldOptions","useProduct","useAliasProduct","productArchitectures","options","Array","isArray","push","map","type","title","translate","context","value","selected","useOnSelect","useDispatch","useAliasDispatch","storeHooks","viewId","dispatch","reduxTypes","filter","RHSM_API_QUERY_SET_TYPES","ToolbarFieldArchitecture","isFilter","position","t","useAliasOnSelect","useAliasProductToolbarQuery","useProductToolbarQuery","useAliasToolbarFieldOptions","updatedValue","onSelect","updatedOptions","option","Select","selectedOptions","placeholder","defaultProps","SelectPosition","toolbarFieldOptions","Object","values","FIELD_TYPES","ToolbarFieldBillingProvider","useAliasProductQuery","useProductQuery","useProductGraphConfig","useAliasProductGraphConfig","filters","updatedFilters","metric","query","category","undefined","metaData","length","productId","updatedGraphLegendValue","graphCardHelpers","id","ToolbarFieldCategory","dateHelpers","startDate","endDate","toISOString","ToolbarFieldGranularity","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","listDateTimeRanges","dateTime","ToolbarFieldRangedMonthly","maxHeight","component","props","key","granularityOptions","isClearable","rangedMonthlyOptions","ToolbarFieldUom","uomOptions","billingProviderOptions","ToolbarFieldSla","slaOptions","ToolbarFieldUsage","usageOptions","ToolbarFieldVariant","currentFilter","useSelectCategoryOptions","initialValue","categoryOptions","useProductToolbarConfig","useAliasProductToolbarConfig","useSelector","useAliasSelector","toolbar","isItem","isSecondary","find","currentCategory","initialCategory","ToolbarFieldSelectCategory","useAliasSelectCategoryOptions","useShallowCompareEffect","toggleIcon","FilterIcon","productVariants"],"sourceRoot":""}