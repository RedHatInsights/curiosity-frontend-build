{"version":3,"file":"js/1799.563b3742c3c923c0669b.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardChart.js","webpack:///./src/components/graphCard/graphCardChartLegend.js","webpack:///./src/components/graphCard/graphCardChartTitleTooltip.js","webpack:///./src/components/graphCard/graphCardChartTooltip.js","webpack:///./src/components/graphCard/graphCardContext.js","webpack:///./src/components/minHeight/minHeight.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  Title,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup\n} from '@patternfly/react-core';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useGraphCardActions, useGraphCardContext, useGetMetrics } from './graphCardContext';\nimport { graphCardHelpers } from './graphCardHelpers';\nimport { Chart } from '../chart/chart';\nimport { GraphCardChartLegend } from './graphCardChartLegend';\nimport { GraphCardChartTooltip } from './graphCardChartTooltip';\nimport { GraphCardChartTitleTooltip } from './graphCardChartTitleTooltip';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { Loader } from '../loader/loader';\nimport { translate } from '../i18n/i18n';\n\n/**\n * @memberof GraphCard\n * @module GraphCardChart\n */\n\n/**\n * A chart/graph card.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useGetMetrics\n * @param {Function} props.useGraphCardActions\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {React.ReactNode}\n */\nconst GraphCardChart = ({\n  t,\n  useGetMetrics: useAliasGetMetrics,\n  useGraphCardActions: useAliasGraphCardActions,\n  useGraphCardContext: useAliasGraphCardContext,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const updatedActionDisplay = useAliasGraphCardActions();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { stringId } = settings;\n\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n  const { pending, error, dataSets = [] } = useAliasGetMetrics();\n\n  const cardHeaderProps = {};\n\n  if (updatedActionDisplay) {\n    cardHeaderProps.actions = {\n      className: `curiosity-card__actions ${(error && 'blur') || ''}`,\n      actions: (\n        <Toolbar className=\"curiosity-toolbar\" collapseListedFiltersBreakpoint=\"sm\">\n          <ToolbarContent className=\"curiosity-toolbar__content\">\n            <ToolbarGroup align={{ default: 'alignRight' }}>{updatedActionDisplay}</ToolbarGroup>\n          </ToolbarContent>\n        </Toolbar>\n      )\n    };\n  }\n\n  return (\n    <Card isPlain className=\"curiosity-card curiosity-graph-card curiosity-usage-graph\">\n      <CardHeader className=\"curiosity-card__header\" {...cardHeaderProps}>\n        <CardTitle className=\"curiosity-card__title\">\n          <Title headingLevel=\"h2\" size=\"lg\">\n            {t('curiosity-graph.cardHeading', { context: stringId })}\n            <GraphCardChartTitleTooltip />\n          </Title>\n        </CardTitle>\n      </CardHeader>\n      <MinHeight key=\"bodyMinHeight\">\n        <CardBody className=\"curiosity-card__body\">\n          <div className={(error && 'blur') || (pending && 'fadein') || ''}>\n            {pending && <Loader variant=\"graph\" />}\n            {!pending && (\n              <Chart\n                {...graphCardHelpers.generateExtendedChartSettings({ settings, granularity })}\n                dataSets={dataSets}\n                chartLegend={({ chart, datum }) => <GraphCardChartLegend chart={chart} datum={datum} />}\n                chartTooltip={({ datum }) => <GraphCardChartTooltip datum={datum} />}\n              />\n            )}\n          </div>\n        </CardBody>\n      </MinHeight>\n    </Card>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useGraphCardContext: Function, useProductGraphTallyQuery: Function, t: Function,\n *     useGetMetrics: Function, useGraphCardActions: Function}}\n */\nGraphCardChart.propTypes = {\n  t: PropTypes.func,\n  useGetMetrics: PropTypes.func,\n  useGraphCardActions: PropTypes.func,\n  useGraphCardContext: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGraphCardContext: Function, useProductGraphTallyQuery: Function, t: translate,\n *     useGetMetrics: Function, useGraphCardActions: Function}}\n */\nGraphCardChart.defaultProps = {\n  t: translate,\n  useGetMetrics,\n  useGraphCardActions,\n  useGraphCardContext,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChart as default, GraphCardChart };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { useMount } from 'react-use';\nimport { useProduct } from '../productView/productViewContext';\nimport { useGraphCardContext } from './graphCardContext';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { ChartIcon } from '../chart/chartIcon';\n\n/**\n * @memberof GraphCard\n * @module GraphCardChartLegend\n */\n\n/**\n * FixMe: PF button disabled borks events on immediate parent nodes, such as tooltip wrappers\n * PF is using \"pointer-events: none\" styling when disabled is activated. This\n * currently affects events on immediate parent nodes.\n */\n/**\n * A custom chart legend.\n *\n * @fires onClick\n * @param {object} props\n * @param {object} props.chart\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useDispatch\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useProduct\n * @param {Function} props.useSelectors\n * @returns {React.ReactNode}\n */\nconst GraphCardChartLegend = ({\n  chart,\n  datum,\n  t,\n  useDispatch: useAliasDispatch,\n  useGraphCardContext: useAliasGraphCardContext,\n  useSelectors: useAliasSelectors,\n  useProduct: useAliasProduct\n}) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const { productLabel, viewId } = useAliasProduct();\n  const { isDisabledLegendClick } = settings;\n\n  const dispatch = useAliasDispatch();\n  const [invertedLegendItem, ...legendItems] = useAliasSelectors([\n    ({ graph }) => graph.legend?.[`${viewId}-inverted`],\n    ...datum.dataSets.map(\n      ({ id }) =>\n        ({ graph }) =>\n          graph.legend?.[`${viewId}-${id}`]\n    )\n  ]);\n\n  useMount(() => {\n    datum.dataSets.forEach(({ id, isToolbarFilter }, index) => {\n      if (invertedLegendItem && isToolbarFilter) {\n        if (!new RegExp(invertedLegendItem).test(id)) {\n          chart.hide(id);\n        }\n      } else {\n        const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n\n        if (checkIsToggled) {\n          chart.hide(id);\n        }\n      }\n    });\n  });\n\n  /**\n   * Toggle legend item and chart.\n   *\n   * @event onClick\n   * @param {string} id\n   */\n  const onClick = id => {\n    const updatedToggle = chart.toggle(id);\n\n    dispatch({\n      type: reduxTypes.graph.SET_GRAPH_LEGEND,\n      id: `${viewId}-${id}`,\n      value: updatedToggle\n    });\n  };\n\n  return (\n    <React.Fragment>\n      {datum.dataSets.map(({ id, isThreshold, stroke: color, data = [] }, index) => {\n        const isDisabled =\n          !data.find(({ y, hasData }) => (y >= 0 && hasData === true) || (y >= 0 && isThreshold === true)) || false;\n\n        const labelContent = t([`curiosity-graph.label`, 'curiosity-graph.label_no'], {\n          product: productLabel,\n          context: id\n        });\n\n        const tooltipContent = t(\n          `curiosity-graph.legendTooltip`,\n          {\n            product: productLabel,\n            context: id\n          },\n          [<span style={{ whiteSpace: 'nowrap' }} />]\n        );\n\n        const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n        const buttonActionProps = {};\n\n        if (!isDisabledLegendClick) {\n          buttonActionProps.onClick = () => onClick(id);\n          buttonActionProps.onKeyPress = () => onClick(id);\n        }\n\n        const button = (\n          <Button\n            {...buttonActionProps}\n            className=\"curiosity-graph__legend-item curiosity-usage-graph__legend-item\"\n            tabIndex={0}\n            key={`curiosity-button-${id}`}\n            variant=\"link\"\n            component=\"a\"\n            isDisabled={isDisabledLegendClick ?? isDisabled}\n            icon={\n              ((isDisabled || checkIsToggled) && <ChartIcon symbol=\"eyeSlash\" />) || (\n                <ChartIcon\n                  symbol={(isThreshold && 'dash') || 'square'}\n                  style={{ visibility: (isDisabled && 'hidden') || (checkIsToggled && 'hidden') || 'visible' }}\n                  fill={color}\n                />\n              )\n            }\n          >\n            {labelContent}\n          </Button>\n        );\n\n        if (tooltipContent) {\n          return (\n            <Tooltip\n              key={`curiosity-tooltip-${id}`}\n              content={<p>{tooltipContent}</p>}\n              position={TooltipPosition.top}\n              enableFlip\n            >\n              <span className=\"pf-c-button pf-m-link curiosity-graph__legend-item-wrapper curiosity-usage-graph__legend-item-wrapper\">\n                {button}\n              </span>\n            </Tooltip>\n          );\n        }\n\n        return button;\n      })}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, t: Function, useGraphCardContext: Function, useDispatch: Function,\n *     useSelectors: Function, chart: object}}\n */\nGraphCardChartLegend.propTypes = {\n  chart: PropTypes.shape({\n    hide: PropTypes.func,\n    toggle: PropTypes.func,\n    isToggled: PropTypes.func\n  }),\n  datum: PropTypes.shape({\n    dataSets: PropTypes.arrayOf(\n      PropTypes.shape({\n        data: PropTypes.array,\n        id: PropTypes.string.isRequired,\n        isThreshold: PropTypes.bool,\n        stroke: PropTypes.string.isRequired\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useDispatch: PropTypes.func,\n  useGraphCardContext: PropTypes.func,\n  useProduct: PropTypes.func,\n  useSelectors: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: {dataSets: Array}, useProduct: Function, t: Function, useGraphCardContext: Function, useDispatch: Function,\n *     useSelectors: Function, chart: {hide: Function, toggle: Function, isToggled: Function}}}\n */\nGraphCardChartLegend.defaultProps = {\n  chart: {\n    hide: helpers.noop,\n    toggle: helpers.noop,\n    isToggled: helpers.noop\n  },\n  datum: {\n    dataSets: []\n  },\n  t: translate,\n  useDispatch: storeHooks.reactRedux.useDispatch,\n  useGraphCardContext,\n  useProduct,\n  useSelectors: storeHooks.reactRedux.useSelectors\n};\n\nexport { GraphCardChartLegend as default, GraphCardChartLegend };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { useGraphCardContext } from './graphCardContext';\nimport { translate } from '../i18n/i18n';\n\n/**\n * @memberof GraphCard\n * @module GraphCardChartTitleTooltip\n */\n\n/**\n * Graph card title tooltip.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useGraphCardContext\n * @returns {React.ReactNode}\n */\nconst GraphCardChartTitleTooltip = ({ t, useGraphCardContext: useAliasGraphCardContext }) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const { isCardTitleDescription, stringId } = settings;\n\n  if (!isCardTitleDescription) {\n    return null;\n  }\n\n  return (\n    <Tooltip\n      content={<p>{t(`curiosity-graph.cardHeadingDescription`, { context: stringId })}</p>}\n      position={TooltipPosition.top}\n      enableFlip={false}\n      entryDelay={100}\n      exitDelay={0}\n    >\n      <span className=\"curiosity-icon__question\">\n        <OutlinedQuestionCircleIcon />\n      </span>\n    </Tooltip>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useGraphCardContext: Function, t: Function}}\n */\nGraphCardChartTitleTooltip.propTypes = {\n  t: PropTypes.func,\n  useGraphCardContext: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGraphCardContext: Function, t: Function}}\n */\nGraphCardChartTitleTooltip.defaultProps = {\n  t: translate,\n  useGraphCardContext\n};\n\nexport { GraphCardChartTitleTooltip as default, GraphCardChartTitleTooltip };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { getTooltipDate } from './graphCardHelpers';\nimport { translate } from '../i18n/i18n';\nimport { ChartTypeVariant } from '../chart/chart';\nimport { ChartIcon } from '../chart/chartIcon';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * @memberof GraphCard\n * @module GraphCardChartTooltip\n */\n\n/**\n * A custom chart tooltip.\n *\n * @param {object} props\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useProduct\n * @returns {React.ReactNode}\n */\nconst GraphCardChartTooltip = ({\n  datum,\n  t,\n  useProduct: useAliasProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productLabel } = useAliasProduct();\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n\n  let header = null;\n  const data = [];\n  const { itemsByKey = {} } = datum || {};\n\n  Object.keys(itemsByKey)\n    .reverse()\n    .forEach((key, index) => {\n      if (index === 0) {\n        header = getTooltipDate({\n          date: itemsByKey[key]?.data.date,\n          granularity\n        });\n      }\n\n      const tempDataFacet = {\n        color: itemsByKey[key]?.color\n      };\n\n      if (itemsByKey[key]?.chartType === ChartTypeVariant.threshold) {\n        let thresholdStringValue = itemsByKey[key]?.data.y ?? t('curiosity-graph.label', { context: 'noData' });\n\n        // ToDo: Remove hasInfinite check once deprecated graphCard components are removed\n        if (itemsByKey[key]?.data.hasInfinite || itemsByKey[key]?.data.hasInfiniteQuantity) {\n          thresholdStringValue = t('curiosity-graph.label', { context: ['threshold', 'infinite'] }, [\n            tempDataFacet.color && (\n              <ChartIcon\n                symbol=\"infinity\"\n                size=\"1.1rem\"\n                fill=\"#ffffff\"\n                title={t('curiosity-graph.label', { context: ['threshold', 'infinite'] })}\n              />\n            )\n          ]);\n        }\n\n        tempDataFacet.label = t('curiosity-graph.label', { context: ['threshold'] });\n        tempDataFacet.value = thresholdStringValue;\n      } else {\n        const dataFactsValue =\n          (itemsByKey[key]?.data.hasData === false && t('curiosity-graph.label', { context: 'noData' })) ||\n          itemsByKey[key]?.data.y ||\n          0;\n\n        tempDataFacet.label = t(`curiosity-graph.label`, { context: key, product: productLabel });\n        tempDataFacet.value = dataFactsValue;\n      }\n\n      tempDataFacet.chartType = itemsByKey[key]?.chartType;\n      data.push(tempDataFacet);\n    });\n\n  return (\n    <div className=\"curiosity-graph__tooltip curiosity-usage-graph__tooltip\">\n      <table summary={t('curiosity-graph.tooltipSummary')}>\n        {(data.length && header && (\n          <thead>\n            <tr>\n              <th colSpan={2}>{header}</th>\n            </tr>\n          </thead>\n        )) ||\n          null}\n        {(data.length && (\n          <tbody>\n            {data.map(dataFacet => {\n              const updatedDataFacetValue =\n                (typeof dataFacet.value === 'number' &&\n                  !Number.isInteger(dataFacet.value) &&\n                  helpers\n                    .numberDisplay(dataFacet.value)\n                    ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: true })\n                    ?.toUpperCase()) ||\n                dataFacet.value;\n\n              return (\n                <tr key={`tooltip-${dataFacet.label}`}>\n                  <th>\n                    {dataFacet.chartType === ChartTypeVariant.threshold && (\n                      <ChartIcon size=\"sm\" symbol=\"dash\" fill={dataFacet.color || 'transparent'} />\n                    )}\n                    {dataFacet.chartType !== ChartTypeVariant.threshold && (\n                      <ChartIcon size=\"sm\" fill={dataFacet.color || 'transparent'} />\n                    )}{' '}\n                    {dataFacet.label}\n                  </th>\n                  <td>{updatedDataFacetValue}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        )) ||\n          null}\n      </table>\n      {(!data.length && t('curiosity-graph.label', { context: ['noData', 'error'] })) || null}\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.propTypes = {\n  datum: PropTypes.shape({\n    itemsByKey: PropTypes.objectOf(\n      PropTypes.shape({\n        chartType: PropTypes.string,\n        color: PropTypes.string,\n        data: PropTypes.shape({\n          date: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),\n          hasData: PropTypes.bool,\n          hasInfinite: PropTypes.bool,\n          hasInfiniteQuantity: PropTypes.bool,\n          y: PropTypes.number\n        })\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.defaultProps = {\n  datum: {},\n  t: translate,\n  useProduct,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChartTooltip as default, GraphCardChartTooltip };\n","import React, { useContext, useMemo } from 'react';\nimport { useShallowCompareEffect } from 'react-use';\nimport { ToolbarItem } from '@patternfly/react-core';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphConfig, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldSelectCategory';\nimport { helpers } from '../../common/helpers';\nimport { graphCardHelpers } from './graphCardHelpers';\n\n/**\n * @memberof GraphCard\n * @module GraphCardContext\n */\n\n/**\n * Chart context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{ settings: { metrics: [] } }, helpers.noop];\n\nconst GraphCardContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated graph card context.\n *\n * @returns {React.Context<{}>}\n */\nconst useGraphCardContext = () => useContext(GraphCardContext);\n\n/**\n * Parse filters settings for context.\n *\n * @param {object} options\n * @param {Function} options.useProduct\n * @param {Function} options.useProductGraphConfig\n * @returns {{standaloneFiltersSettings: Array<{ settings: object }>, groupedFiltersSettings: { settings: object }}}\n */\nconst useParseFiltersSettings = ({\n  useProduct: useAliasProduct = useProduct,\n  useProductGraphConfig: useAliasProductGraphConfig = useProductGraphConfig\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const { filters = [], settings = {} } = useAliasProductGraphConfig();\n\n  return useMemo(\n    () =>\n      graphCardHelpers.generateChartSettings({\n        filters,\n        settings,\n        productId\n      }),\n    [filters, settings, productId]\n  );\n};\n\n/**\n * Transform multiple metrics from store for chart/graph consumption.\n *\n * @param {object} options\n * @param {Function} options.useGraphCardContext\n * @param {Function} options.useSelectorsResponse\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: Array, errorId: {},\n *     id: {}, list: Array}, cancelled: boolean, dataSets: Array, message: null, error: boolean}}\n */\nconst useMetricsSelector = ({\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  const {\n    error,\n    fulfilled,\n    pending,\n    data = [],\n    ...response\n  } = useAliasSelectorsResponse(\n    metrics.map(\n      ({ id: metricId, isCapacity }) =>\n        ({ graph }) =>\n          isCapacity ? graph.capacity?.[metricId] : graph.tally?.[metricId]\n    )\n  );\n\n  /**\n   * Apply graph config settings to metric data.\n   */\n  const dataById = {};\n  const dataByList = data?.map((metricData, index) => {\n    const updatedMetricData = {\n      ...metrics[index],\n      ...metricData\n    };\n    dataById[metrics[index].id] = updatedMetricData;\n    return updatedMetricData;\n  });\n\n  return {\n    ...response,\n    data: dataById,\n    dataSets: dataByList,\n    error,\n    fulfilled,\n    pending\n  };\n};\n\n/**\n * Get graph metrics from Tally or Capacity.\n *\n * @param {object} params\n * @param {Function} params.getGraphMetrics\n * @param {Function} params.useDispatch\n * @param {Function} params.useGraphCardContext\n * @param {Function} params.useMetricsSelector\n * @param {Function} params.useProduct\n * @param {Function} params.useProductGraphTallyQuery\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: Array, errorId: {},\n *     id: {}, list: Array}, cancelled: boolean, dataSets: Array, message: null, error: boolean}}\n */\nconst useGetMetrics = ({\n  getGraphMetrics = reduxActions.rhsm.getGraphMetrics,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector = useMetricsSelector,\n  useProduct: useAliasProduct = useProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductGraphTallyQuery();\n  const dispatch = useAliasDispatch();\n  const response = useAliasMetricsSelector();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  useShallowCompareEffect(() => {\n    const updatedMetrics = metrics.map(({ metric: metricId, isCapacity, query: metricQuery }) => ({\n      id: productId,\n      metric: metricId,\n      isCapacity,\n      query: metricQuery\n    }));\n    getGraphMetrics(updatedMetrics, query)(dispatch);\n  }, [metrics, productId, query]);\n\n  return response;\n};\n\n/**\n * FixMe: the pending condition for \"content\" will block subsequent responses from this hook, this is expected.\n * This current limitation means if we decide to apply the same action to multiple cards the \"content\" will\n * not display for all of them.\n */\n/**\n * Return a component list for a configurable graphCard action toolbar.\n * Allow the \"content\" prop to receive graph data for display via callback.\n *\n * @param {object} params\n * @param {Array} params.categoryOptions\n * @param {Function} params.useMetricsSelector\n * @param {Function} params.useGraphCardContext\n * @returns {Array}\n */\nconst useGraphCardActions = ({\n  categoryOptions = toolbarFieldOptions,\n  useMetricsSelector: useAliasMetricsSelector = useMetricsSelector,\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext\n} = {}) => {\n  const { pending, dataSets } = useAliasMetricsSelector();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { actions } = settings;\n\n  return useMemo(\n    () =>\n      actions?.map(({ id, content, ...actionProps }) => {\n        const option = categoryOptions.find(({ value: categoryOptionValue }) => id === categoryOptionValue);\n        const { component: OptionComponent } = option || {};\n\n        return (\n          (OptionComponent && (\n            <ToolbarItem key={`option-${id}`}>\n              <OptionComponent isFilter={false} {...actionProps} />\n            </ToolbarItem>\n          )) ||\n          (content && !pending && dataSets.length && (\n            <ToolbarItem key={id || helpers.generateId()}>\n              {typeof content === 'function' ? content({ data: dataSets }) : content}\n            </ToolbarItem>\n          )) ||\n          null\n        );\n      }),\n    [actions, categoryOptions, dataSets, pending]\n  );\n};\n\nconst context = {\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardActions,\n  useGraphCardContext,\n  useMetricsSelector,\n  useParseFiltersSettings\n};\n\nexport {\n  context as default,\n  context,\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardActions,\n  useGraphCardContext,\n  useMetricsSelector,\n  useParseFiltersSettings\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useResizeObserver } from '../../hooks/useWindow';\n\n/**\n * Normalize component height on page loads and updates.\n *\n * @memberof Components\n * @module MinHeight\n */\n\n/**\n * Set a min-height to prevent page jump component.\n *\n * @param {object} props\n * @param {React.ReactNode} props.children\n * @param {boolean} props.isOnLoad\n * @param {number} props.minHeight\n * @param {Function} props.useResizeObserver\n * @returns {React.ReactNode}\n */\nconst MinHeight = ({ children, isOnLoad, minHeight, useResizeObserver: useAliasResizeObserver }) => {\n  const [tracking, setTracking] = useState({ containerWidth: undefined, isLoaded: false });\n  const containerRef = useRef(null);\n  const innerContainerRef = useRef(null);\n  const { height: containerHeight, width: containerWidth } = useAliasResizeObserver(containerRef);\n\n  useEffect(() => {\n    if (!isOnLoad || (isOnLoad && !tracking.isLoaded)) {\n      const { current: domElement = {} } = containerRef;\n      const { current: innerDomElement = {} } = innerContainerRef;\n\n      if (domElement?.style) {\n        let updatedHeight = innerDomElement?.clientHeight || 0;\n\n        if (minHeight > containerHeight) {\n          updatedHeight = minHeight;\n        }\n\n        domElement.style.minHeight = `${updatedHeight}px`;\n        setTracking(() => ({\n          containerWidth,\n          isLoaded: isOnLoad,\n          updatedHeight\n        }));\n      }\n    }\n  }, [containerHeight, containerWidth, containerRef, innerContainerRef, isOnLoad, minHeight, tracking.isLoaded]);\n\n  return (\n    <div className=\"curiosity-minheight\" ref={containerRef}>\n      <div className=\"curiosity-minheight__inner\" ref={innerContainerRef}>\n        {children}\n      </div>\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{minHeight: number, useResizeObserver: Function, children: React.ReactNode, isOnLoad: boolean}}\n */\nMinHeight.propTypes = {\n  children: PropTypes.node.isRequired,\n  minHeight: PropTypes.number,\n  isOnLoad: PropTypes.bool,\n  useResizeObserver: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{minHeight: number, useResizeObserver: Function, isOnLoad: boolean}}\n */\nMinHeight.defaultProps = {\n  isOnLoad: false,\n  minHeight: 0,\n  useResizeObserver\n};\n\nexport { MinHeight as default, MinHeight };\n"],"names":["GraphCardChart","_ref","t","useGetMetrics","useAliasGetMetrics","useGraphCardActions","useAliasGraphCardActions","useGraphCardContext","useAliasGraphCardContext","useProductGraphTallyQuery","useAliasProductGraphTallyQuery","updatedActionDisplay","settings","stringId","RHSM_API_QUERY_SET_TYPES","granularity","pending","error","dataSets","cardHeaderProps","actions","className","concat","React","Toolbar","collapseListedFiltersBreakpoint","ToolbarContent","ToolbarGroup","align","default","Card","isPlain","CardHeader","_extends","CardTitle","Title","headingLevel","size","context","GraphCardChartTitleTooltip","MinHeight","key","CardBody","Loader","variant","Chart","graphCardHelpers","chartLegend","_ref2","chart","datum","GraphCardChartLegend","chartTooltip","_ref3","GraphCardChartTooltip","propTypes","PropTypes","defaultProps","translate","useDispatch","useAliasDispatch","useSelectors","useAliasSelectors","useProduct","useAliasProduct","productLabel","viewId","isDisabledLegendClick","dispatch","invertedLegendItem","legendItems","_graph$legend","graph","legend","map","id","_ref4","_graph$legend2","useMount","forEach","_ref5","index","isToolbarFilter","RegExp","test","hide","isToggled","onClick","updatedToggle","toggle","type","reduxTypes","value","_ref6","isThreshold","stroke","color","data","isDisabled","find","_ref7","y","hasData","labelContent","product","tooltipContent","style","whiteSpace","checkIsToggled","buttonActionProps","onKeyPress","button","Button","tabIndex","component","icon","ChartIcon","symbol","visibility","fill","Tooltip","content","position","TooltipPosition","enableFlip","helpers","storeHooks","isCardTitleDescription","entryDelay","exitDelay","OutlinedQuestionCircleIcon","header","itemsByKey","Object","keys","reverse","_itemsByKey$key2","_itemsByKey$key3","_itemsByKey$key9","_itemsByKey$key","getTooltipDate","date","tempDataFacet","chartType","ChartTypeVariant","_itemsByKey$key$data$","_itemsByKey$key4","_itemsByKey$key5","_itemsByKey$key6","thresholdStringValue","hasInfinite","hasInfiniteQuantity","title","label","_itemsByKey$key7","_itemsByKey$key8","dataFactsValue","push","summary","length","colSpan","dataFacet","_helpers$numberDispla","updatedDataFacetValue","Number","isInteger","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","Date","DEFAULT_CONTEXT","metrics","GraphCardContext","useContext","useParseFiltersSettings","useProductGraphConfig","useAliasProductGraphConfig","arguments","undefined","productId","filters","useMemo","useMetricsSelector","useSelectorsResponse","useAliasSelectorsResponse","fulfilled","response","metricId","isCapacity","_graph$capacity","_graph$tally","capacity","tally","dataById","dataByList","metricData","updatedMetricData","getGraphMetrics","reduxActions","useAliasMetricsSelector","query","useShallowCompareEffect","updatedMetrics","metric","metricQuery","categoryOptions","toolbarFieldOptions","actionProps","option","categoryOptionValue","OptionComponent","ToolbarItem","isFilter","children","isOnLoad","minHeight","useResizeObserver","useAliasResizeObserver","tracking","setTracking","useState","containerWidth","isLoaded","containerRef","useRef","innerContainerRef","height","containerHeight","width","useEffect","current","domElement","innerDomElement","updatedHeight","clientHeight","ref"],"sourceRoot":""}