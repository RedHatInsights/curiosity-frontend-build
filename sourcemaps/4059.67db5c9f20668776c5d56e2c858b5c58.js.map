{"version":3,"file":"js/4059.1ee9492e2e9a9381d8d3.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCard.js","webpack:///./src/components/inventorySubscriptions/inventorySubscriptions.js","webpack:///./src/components/inventoryTabs/inventoryTabs.js","webpack:///./src/components/productView/productViewOpenShiftContainer.js","webpack:///./src/components/toolbar/toolbarFieldGranularity.js","webpack:///./src/components/toolbar/toolbarFieldRangedMonthly.js","webpack:///./src/components/toolbar/toolbarFieldUom.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardTitle, CardHeader, CardActions, CardBody, Title } from '@patternfly/react-core';\nimport { chart_color_green_300 as chartColorGreenDark } from '@patternfly/react-tokens';\nimport _isEqual from 'lodash/isEqual';\nimport { connect, reduxActions, reduxSelectors } from '../../redux';\nimport { helpers } from '../../common';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { graphCardHelpers } from './graphCardHelpers';\nimport GraphCardChartTooltip from './graphCardChartTooltip';\nimport GraphCardChartLegend from './graphCardChartLegend';\nimport { Chart } from '../chart/chart';\nimport { Loader } from '../loader/loader';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A chart/graph card.\n *\n * @augments React.Component\n * @fires onUpdateGraphData\n */\nclass GraphCard extends React.Component {\n  componentDidMount() {\n    this.onUpdateGraphData();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { productId, query } = this.props;\n\n    if (productId !== prevProps.productId || !_isEqual(query, prevProps.query)) {\n      this.onUpdateGraphData();\n    }\n  }\n\n  /**\n   * Call the RHSM APIs, apply filters.\n   *\n   * @event onUpdateGraphData\n   */\n  onUpdateGraphData = () => {\n    const { getGraphReportsCapacity, isDisabled, productId, query } = this.props;\n    const graphGranularity = this.getQueryGranularity();\n    const { [RHSM_API_QUERY_TYPES.START_DATE]: startDate, [RHSM_API_QUERY_TYPES.END_DATE]: endDate } = query;\n\n    if (!isDisabled && graphGranularity && startDate && endDate && productId) {\n      getGraphReportsCapacity(productId, query);\n    }\n  };\n\n  getQueryGranularity() {\n    const { query } = this.props;\n    return query?.[RHSM_API_QUERY_TYPES.GRANULARITY];\n  }\n\n  /**\n   * Apply props to chart/graph.\n   *\n   * @returns {Node}\n   */\n  renderChart() {\n    const { filterGraphData, graphData, productLabel, query, viewId } = this.props;\n    const graphGranularity = this.getQueryGranularity();\n\n    const chartAreaProps = {\n      xAxisLabelIncrement: graphCardHelpers.getChartXAxisLabelIncrement(graphGranularity),\n      xAxisTickFormat: ({ item, previousItem, tick }) =>\n        graphCardHelpers.xAxisTickFormat({\n          tick,\n          date: item.date,\n          previousDate: previousItem.date,\n          granularity: graphGranularity\n        }),\n      yAxisTickFormat: graphCardHelpers.yAxisTickFormat\n    };\n\n    const filteredGraphData = data => {\n      const filtered = key => {\n        const tempFiltered = {\n          data: data[key],\n          id: key,\n          strokeWidth: 2,\n          isStacked: !/^threshold/.test(key),\n          isThreshold: /^threshold/.test(key)\n        };\n\n        if (/^threshold/.test(key)) {\n          tempFiltered.stroke = chartColorGreenDark.value;\n          tempFiltered.strokeDasharray = '4,3';\n          tempFiltered.strokeWidth = 3;\n        }\n\n        return tempFiltered;\n      };\n\n      if (filterGraphData.length) {\n        return filterGraphData.map(value => Object.assign(filtered(value.id), value));\n      }\n\n      return Object.keys(data).map(key => filtered(key));\n    };\n\n    return (\n      <Chart\n        key={`chart_${JSON.stringify(query)}`}\n        {...chartAreaProps}\n        dataSets={filteredGraphData(graphData)}\n        chartLegend={({ chart, datum }) => (\n          <GraphCardChartLegend chart={chart} datum={datum} productLabel={productLabel} viewId={viewId} />\n        )}\n        chartTooltip={({ datum }) => (\n          <GraphCardChartTooltip datum={datum} granularity={graphGranularity} productLabel={productLabel} />\n        )}\n      />\n    );\n  }\n\n  /**\n   * ToDo: Evaluate applying a minHeight attr to the MinHeight component graphCard setup\n   * Appears there may be a minor page shift when compared to the prior hard-set min-height\n   * of 410px\n   */\n  /**\n   * Render a chart/graph card with chart/graph.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { cardTitle, children, error, graphData, meta, isDisabled, pending, settings } = this.props;\n\n    if (isDisabled) {\n      return null;\n    }\n\n    let actionDisplay = null;\n\n    // Apply actionDisplay callback, return node\n    if (typeof settings?.actionDisplay === 'function') {\n      actionDisplay = settings.actionDisplay({ data: { ...graphData }, meta: { ...meta } });\n    }\n\n    return (\n      <Card className=\"curiosity-usage-graph\">\n        <MinHeight key=\"headerMinHeight\">\n          <CardHeader>\n            <CardTitle>\n              <Title headingLevel=\"h2\" size=\"lg\">\n                {cardTitle}\n              </Title>\n            </CardTitle>\n            <CardActions className={(error && 'blur') || ''}>\n              <React.Fragment key=\"actionDisplay\">{actionDisplay}</React.Fragment>\n              {children}\n            </CardActions>\n          </CardHeader>\n        </MinHeight>\n        <MinHeight key=\"bodyMinHeight\">\n          <CardBody>\n            <div className={(error && 'blur') || (pending && 'fadein') || ''}>\n              {pending && <Loader variant=\"graph\" />}\n              {!pending && this.renderChart()}\n            </div>\n          </CardBody>\n        </MinHeight>\n      </Card>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{productLabel: string, settings: object, productId: string, query: object, pending: boolean,\n *     error: boolean, cardTitle: Node, filterGraphData: Array, getGraphReportsCapacity: Function,\n *     viewId: string, t: Function, children: Node, graphData: object, isDisabled: boolean,\n *     meta: object}}\n */\nGraphCard.propTypes = {\n  cardTitle: PropTypes.node,\n  children: PropTypes.node,\n  error: PropTypes.bool,\n  filterGraphData: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      fill: PropTypes.string,\n      stroke: PropTypes.string\n    })\n  ),\n  getGraphReportsCapacity: PropTypes.func,\n  graphData: PropTypes.object,\n  meta: PropTypes.object,\n  query: PropTypes.shape({\n    [RHSM_API_QUERY_TYPES.GRANULARITY]: PropTypes.oneOf([...Object.values(GRANULARITY_TYPES)]).isRequired,\n    [RHSM_API_QUERY_TYPES.START_DATE]: PropTypes.string.isRequired,\n    [RHSM_API_QUERY_TYPES.END_DATE]: PropTypes.string.isRequired\n  }).isRequired,\n  isDisabled: PropTypes.bool,\n  pending: PropTypes.bool,\n  productId: PropTypes.string.isRequired,\n  productLabel: PropTypes.string,\n  settings: PropTypes.shape({\n    actionDisplay: PropTypes.func\n  }),\n  t: PropTypes.func,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{productLabel: string, settings: object, pending: boolean, error: boolean, cardTitle: Node,\n *     filterGraphData: Array, getGraphReportsCapacity: Function, viewId: string, t: translate,\n *     children: Node, graphData: object, isDisabled: boolean, meta: object}}\n */\nGraphCard.defaultProps = {\n  cardTitle: null,\n  children: null,\n  error: false,\n  filterGraphData: [],\n  getGraphReportsCapacity: helpers.noop,\n  graphData: {},\n  meta: {},\n  isDisabled: helpers.UI_DISABLED_GRAPH,\n  pending: false,\n  productLabel: '',\n  settings: {},\n  t: translate,\n  viewId: 'graphCard'\n};\n\n/**\n * Apply actions to props.\n *\n * @param {Function} dispatch\n * @returns {object}\n */\nconst mapDispatchToProps = dispatch => ({\n  getGraphReportsCapacity: (id, query) => dispatch(reduxActions.rhsm.getGraphReportsCapacity(id, query))\n});\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.graphCard.makeGraphCard();\n\nconst ConnectedGraphCard = connect(makeMapStateToProps, mapDispatchToProps)(GraphCard);\n\nexport { ConnectedGraphCard as default, ConnectedGraphCard, GraphCard };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _isEqual from 'lodash/isEqual';\nimport { SortByDirection, TableVariant } from '@patternfly/react-table';\nimport { Bullseye, Card, CardActions, CardBody, CardFooter, CardHeader } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport _camelCase from 'lodash/camelCase';\nimport { helpers } from '../../common';\nimport { connect, reduxActions, reduxSelectors, reduxTypes, store } from '../../redux';\nimport Table from '../table/table';\nimport { Loader } from '../loader/loader';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { inventoryListHelpers } from '../inventoryList/inventoryListHelpers';\nimport Pagination from '../pagination/pagination';\nimport { paginationHelpers } from '../pagination/paginationHelpers';\nimport {\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES as SORT_TYPES,\n  RHSM_API_QUERY_TYPES\n} from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A subscriptions system inventory component.\n *\n * @augments React.Component\n * @fires onColumnSort\n * @fires onPage\n * @fires onUpdateInventoryData\n */\nclass InventorySubscriptions extends React.Component {\n  componentDidMount() {\n    this.onUpdateInventoryData();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { productId, query } = this.props;\n\n    if (productId !== prevProps.productId || !_isEqual(query, prevProps.query)) {\n      this.onUpdateInventoryData();\n    }\n  }\n\n  /**\n   * On column sort update state.\n   *\n   * @event onColumnSort\n   * @param {object} data pass-through inventory data.\n   * @param {object} sortParams\n   * @param {string} sortParams.direction\n   * @param {string} sortParams.id column identifier\n   */\n  onColumnSort = (data, { direction, id }) => {\n    const { productId } = this.props;\n    const updatedSortColumn = Object.values(SORT_TYPES).find(value => _camelCase(value) === id);\n    let updatedDirection;\n\n    if (!updatedSortColumn) {\n      if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n        console.warn(`Sorting can only be performed on select fields, confirm field ${id} is allowed.`);\n      }\n      return;\n    }\n\n    switch (direction) {\n      case SortByDirection.desc:\n        updatedDirection = SORT_DIRECTION_TYPES.DESCENDING;\n        break;\n      default:\n        updatedDirection = SORT_DIRECTION_TYPES.ASCENDING;\n        break;\n    }\n\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.DIRECTION],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.DIRECTION]: updatedDirection\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.SORT],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.SORT]: updatedSortColumn\n      }\n    ]);\n  };\n\n  /**\n   * On paging and on perPage events.\n   *\n   * @event onPage\n   * @param {object} params\n   * @param {number} params.offset\n   * @param {number} params.perPage\n   */\n  onPage = ({ offset, perPage }) => {\n    const { productId } = this.props;\n\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.OFFSET],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.OFFSET]: offset\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.LIMIT],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.LIMIT]: perPage\n      }\n    ]);\n  };\n\n  /**\n   * Call the RHSM APIs, apply filters.\n   *\n   * @event onUpdateInventoryData\n   */\n  onUpdateInventoryData = () => {\n    const { getSubscriptionsInventory, isDisabled, productId, query } = this.props;\n\n    if (!isDisabled && productId) {\n      getSubscriptionsInventory(productId, query);\n    }\n  };\n\n  /**\n   * Render an inventory table.\n   *\n   * @returns {Node}\n   */\n  renderTable() {\n    const { filterInventoryData, listData, query, session } = this.props;\n    let updatedColumnHeaders = [];\n\n    const updatedRows = listData.map(({ ...cellData }) => {\n      const { columnHeaders, cells } = inventoryListHelpers.parseRowCellsListData({\n        filters: inventoryListHelpers.parseInventoryFilters({\n          filters: filterInventoryData,\n          onSort: this.onColumnSort,\n          query\n        }),\n        cellData,\n        session\n      });\n\n      updatedColumnHeaders = columnHeaders;\n\n      return {\n        cells\n      };\n    });\n\n    return (\n      <Table\n        borders\n        variant={TableVariant.compact}\n        className=\"curiosity-inventory-list\"\n        columnHeaders={updatedColumnHeaders}\n        rows={updatedRows}\n      />\n    );\n  }\n\n  /**\n   * Render an inventory card.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const {\n      error,\n      filterInventoryData,\n      fulfilled,\n      isDisabled,\n      itemCount,\n      listData,\n      pending,\n      perPageDefault,\n      query,\n      t\n    } = this.props;\n\n    if (isDisabled) {\n      return (\n        <Card className=\"curiosity-inventory-card__disabled\">\n          <CardBody>\n            <Bullseye>{t('curiosity-inventory.tab', { context: 'disabled' })}</Bullseye>\n          </CardBody>\n        </Card>\n      );\n    }\n\n    const updatedPerPage = query[RHSM_API_QUERY_TYPES.LIMIT] || perPageDefault;\n    const updatedOffset = query[RHSM_API_QUERY_TYPES.OFFSET];\n    const isLastPage = paginationHelpers.isLastPage(updatedOffset, updatedPerPage, itemCount);\n\n    // Set an updated key to force refresh minHeight\n    const minHeightContentRefreshKey =\n      (fulfilled === true && itemCount < updatedPerPage && `bodyMinHeight-${updatedPerPage}-resize`) ||\n      (fulfilled === true && isLastPage && `bodyMinHeight-${updatedPerPage}-resize`) ||\n      (error === true && `bodyMinHeight-${updatedPerPage}-resize`) ||\n      `bodyMinHeight-${updatedPerPage}`;\n\n    return (\n      <Card className=\"curiosity-inventory-card\">\n        <MinHeight key=\"headerMinHeight\" updateOnContent>\n          <CardHeader className={(error && 'hidden') || ''} aria-hidden={error || false}>\n            <CardActions className={(!itemCount && 'transparent') || ''} aria-hidden={!itemCount || false}>\n              <Pagination\n                isCompact\n                isDisabled={pending || error}\n                itemCount={itemCount}\n                offset={updatedOffset}\n                onPage={this.onPage}\n                onPerPage={this.onPage}\n                perPage={updatedPerPage}\n              />\n            </CardActions>\n          </CardHeader>\n        </MinHeight>\n        <MinHeight key={minHeightContentRefreshKey} updateOnContent>\n          <CardBody>\n            <div className={(error && 'blur') || (pending && 'fadein') || ''}>\n              {pending && (\n                <Loader\n                  variant=\"table\"\n                  tableProps={{\n                    className: 'curiosity-inventory-list',\n                    colCount: filterInventoryData?.length || (listData?.[0] && Object.keys(listData[0]).length) || 1,\n                    colWidth:\n                      (filterInventoryData?.length && filterInventoryData.map(({ cellWidth }) => cellWidth)) || [],\n                    rowCount: listData?.length || updatedPerPage,\n                    variant: TableVariant.compact\n                  }}\n                />\n              )}\n              {!pending && this.renderTable()}\n            </div>\n          </CardBody>\n        </MinHeight>\n        <MinHeight key=\"footerMinHeight\" updateOnContent>\n          <CardFooter\n            className={(error && 'hidden') || (!itemCount && 'transparent') || ''}\n            aria-hidden={error || !itemCount || false}\n          >\n            <TableToolbar isFooter>\n              <Pagination\n                dropDirection=\"up\"\n                isDisabled={pending || error}\n                itemCount={itemCount}\n                offset={updatedOffset}\n                onPage={this.onPage}\n                onPerPage={this.onPage}\n                perPage={updatedPerPage}\n              />\n            </TableToolbar>\n          </CardFooter>\n        </MinHeight>\n      </Card>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{productId: string, listData: Array, session: object, pending: boolean, query: object,\n *     fulfilled: boolean, error: boolean, getSubscriptionsInventory: Function, itemCount: number,\n *     t: Function, filterInventoryData: Array, perPageDefault: number, isDisabled: boolean}}\n */\nInventorySubscriptions.propTypes = {\n  error: PropTypes.bool,\n  fulfilled: PropTypes.bool,\n  filterInventoryData: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      header: PropTypes.oneOfType([\n        PropTypes.shape({\n          title: PropTypes.node.isRequired\n        }),\n        PropTypes.func,\n        PropTypes.node\n      ]),\n      cell: PropTypes.oneOfType([\n        PropTypes.shape({\n          title: PropTypes.node.isRequired\n        }),\n        PropTypes.func,\n        PropTypes.node\n      ])\n    }).isRequired\n  ),\n  getSubscriptionsInventory: PropTypes.func,\n  isDisabled: PropTypes.bool,\n  itemCount: PropTypes.number,\n  listData: PropTypes.array,\n  pending: PropTypes.bool,\n  productId: PropTypes.string.isRequired,\n  perPageDefault: PropTypes.number,\n  query: PropTypes.object.isRequired,\n  session: PropTypes.object,\n  t: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, filterInventoryData: Array, listData: Array, session: object, pending: boolean,\n *     fulfilled: boolean, perPageDefault: number, isDisabled: boolean, error: boolean,\n *     getSubscriptionsInventory: Function, itemCount: number}}\n */\nInventorySubscriptions.defaultProps = {\n  error: false,\n  fulfilled: false,\n  filterInventoryData: [],\n  getSubscriptionsInventory: helpers.noop,\n  isDisabled: helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS,\n  itemCount: 0,\n  listData: [],\n  pending: false,\n  perPageDefault: 10,\n  session: {},\n  t: translate\n};\n\n/**\n * Apply actions to props.\n *\n * @param {Function} dispatch\n * @returns {object}\n */\nconst mapDispatchToProps = dispatch => ({\n  getSubscriptionsInventory: (id, query) => dispatch(reduxActions.rhsm.getSubscriptionsInventory(id, query))\n});\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.subscriptionsList.makeSubscriptionsList();\n\nconst ConnectedInventorySubscriptions = connect(makeMapStateToProps, mapDispatchToProps)(InventorySubscriptions);\n\nexport { ConnectedInventorySubscriptions as default, ConnectedInventorySubscriptions, InventorySubscriptions };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Title } from '@patternfly/react-core';\nimport { connect, reduxTypes, store } from '../../redux';\nimport { Tabs } from '../tabs/tabs';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { InventoryTab } from './inventoryTab';\n\n/**\n * A system inventory tabs component.\n *\n * @augments React.Component\n * @fires onTab\n */\nclass InventoryTabs extends React.Component {\n  /**\n   * On tab update state.\n   *\n   * @event onTab\n   * @param {object} params\n   * @param {string} params.index tab index\n   */\n  onTab = ({ index }) => {\n    const { productId } = this.props;\n\n    store.dispatch({\n      type: reduxTypes.inventory.SET_INVENTORY_TAB,\n      tabs: {\n        [productId]: index\n      }\n    });\n  };\n\n  /**\n   * Render inventory tabs using Inventory tab passed props only. A parallel outcome can be\n   * achieved by passing an array of objects through a prop.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { activeTab, children, defaultActiveTab, isDisabled, t } = this.props;\n\n    if (isDisabled) {\n      return null;\n    }\n\n    const updatedChildren = React.Children.toArray(children).map((child, index) => {\n      const { props = {} } = child;\n\n      return {\n        active: props.active || false,\n        content: props.children || child,\n        title: props.title || t('curiosity-inventory.tabSubHeading', { count: index })\n      };\n    });\n\n    return (\n      <React.Fragment>\n        <Title headingLevel=\"h2\" className=\"sr-only\">\n          {t('curiosity-inventory.tabHeading', { count: updatedChildren.length })}\n        </Title>\n        <Tabs activeTab={activeTab} defaultActiveTab={defaultActiveTab} onTab={this.onTab} tabs={updatedChildren} />\n      </React.Fragment>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{productId: string, t: Function, children: Node, defaultActiveTab: number, isDisabled: boolean,\n *     activeTab: number}}\n */\nInventoryTabs.propTypes = {\n  activeTab: PropTypes.number,\n  children: PropTypes.node.isRequired,\n  defaultActiveTab: PropTypes.number,\n  isDisabled: PropTypes.bool,\n  productId: PropTypes.string.isRequired,\n  t: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, defaultActiveTab: number, isDisabled: boolean, activeTab: number}}\n */\nInventoryTabs.defaultProps = {\n  activeTab: 0,\n  defaultActiveTab: 0,\n  isDisabled: helpers.UI_DISABLED_TABLE,\n  t: translate\n};\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst mapStateToProps = ({ inventory }, { productId }) => ({ activeTab: inventory.tabs?.[productId] });\n\nconst ConnectedInventoryTabs = connect(mapStateToProps)(InventoryTabs);\n\nexport { ConnectedInventoryTabs as default, ConnectedInventoryTabs, InventoryTabs, InventoryTab };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport { useRouteDetail } from '../../hooks/useRouter';\nimport { ProductViewContext } from './productViewContext';\nimport { PageLayout, PageColumns, PageHeader, PageSection, PageToolbar } from '../pageLayout/pageLayout';\nimport { RHSM_API_PATH_ID_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { apiQueries, storeHooks } from '../../redux';\nimport GraphCard from '../graphCard/graphCard';\nimport { ToolbarFieldUom } from '../toolbar/toolbarFieldUom';\nimport { ToolbarFieldGranularity } from '../toolbar/toolbarFieldGranularity';\nimport { ToolbarFieldRangedMonthly } from '../toolbar/toolbarFieldRangedMonthly';\nimport Toolbar from '../toolbar/toolbar';\nimport InventoryList from '../inventoryList/inventoryList';\nimport InventorySubscriptions from '../inventorySubscriptions/inventorySubscriptions';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport { translate } from '../i18n/i18n';\nimport { helpers } from '../../common';\n\n/**\n * An OpenShift Container Platform encompassing view.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useRouteDetail\n * @returns {Node}\n */\nconst ProductViewOpenShiftContainer = ({ t, useRouteDetail: useAliasRouteDetail }) => {\n  const { productParameter: viewProductLabel, productConfig } = useAliasRouteDetail();\n  const uomValue = storeHooks.reactRedux.useSelector(\n    ({ view }) => view.query?.[productConfig[0].viewId]?.[RHSM_API_QUERY_TYPES.UOM],\n    null\n  );\n\n  const renderProduct = (config, updatedUomValue) => {\n    const {\n      productContextFilterUom,\n      query = {},\n      graphTallyQuery = {},\n      inventoryHostsQuery = {},\n      inventorySubscriptionsQuery = {},\n      initialGraphFilters = [],\n      initialGraphSettings = {},\n      initialGuestsFilters = [],\n      initialInventoryFilters = [],\n      initialInventorySettings = {},\n      initialSubscriptionsInventoryFilters,\n      initialToolbarFilters,\n      productLabel,\n      productId,\n      viewId\n    } = config;\n\n    if (!productId || !viewId) {\n      return null;\n    }\n\n    const {\n      graphTallyQuery: initialGraphTallyQuery,\n      inventoryHostsQuery: initialInventoryHostsQuery,\n      inventorySubscriptionsQuery: initialInventorySubscriptionsQuery,\n      toolbarQuery\n    } = apiQueries.parseRhsmQuery(query, { graphTallyQuery, inventoryHostsQuery, inventorySubscriptionsQuery });\n\n    let graphFilters = initialGraphFilters;\n    let inventoryFilters = initialInventoryFilters;\n    let subscriptionsInventoryFilters = initialSubscriptionsInventoryFilters;\n    let uomFilter;\n\n    if (productContextFilterUom) {\n      uomFilter = updatedUomValue || query[RHSM_API_QUERY_TYPES.UOM];\n\n      const filter = ({ id, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(uomFilter, 'i').test(id);\n      };\n\n      graphFilters = initialGraphFilters.filter(filter);\n      inventoryFilters = initialInventoryFilters.filter(filter);\n      subscriptionsInventoryFilters = initialSubscriptionsInventoryFilters.filter(filter);\n    }\n\n    const graphCardTitle = (\n      <React.Fragment>\n        {t('curiosity-graph.cardHeading', { context: productId })}\n        <Tooltip\n          content={<p>{t('curiosity-graph.cardHeadingDescription', { context: productId })}</p>}\n          position={TooltipPosition.top}\n          enableFlip={false}\n          distance={5}\n          entryDelay={100}\n          exitDelay={0}\n        >\n          <sup className=\"curiosity-icon__info\">\n            <InfoCircleIcon />\n          </sup>\n        </Tooltip>\n      </React.Fragment>\n    );\n\n    return (\n      <ProductViewContext.Provider value={config} key={`product_${productId}_${uomFilter}`}>\n        {initialToolbarFilters && (\n          <PageToolbar>\n            <Toolbar filterOptions={initialToolbarFilters} productId={productId} query={toolbarQuery} viewId={viewId} />\n          </PageToolbar>\n        )}\n        <PageSection>\n          <GraphCard\n            key={`graph_${productId}`}\n            filterGraphData={graphFilters}\n            settings={initialGraphSettings}\n            query={initialGraphTallyQuery}\n            productId={productId}\n            viewId={viewId}\n            cardTitle={graphCardTitle}\n            productLabel={productLabel}\n          >\n            {productId === RHSM_API_PATH_ID_TYPES.OPENSHIFT && uomFilter && (\n              <ToolbarFieldUom value={uomFilter} viewId={viewId} />\n            )}\n            {productId === RHSM_API_PATH_ID_TYPES.OPENSHIFT && (\n              <ToolbarFieldGranularity value={graphTallyQuery[RHSM_API_QUERY_TYPES.GRANULARITY]} viewId={viewId} />\n            )}\n            {productId === RHSM_API_PATH_ID_TYPES.OPENSHIFT_METRICS && <ToolbarFieldRangedMonthly viewId={viewId} />}\n          </GraphCard>\n        </PageSection>\n        <PageSection>\n          <InventoryTabs key={`inventory_${productId}`} productId={productId}>\n            <InventoryTab\n              key={`inventory_hosts_${productId}`}\n              title={t('curiosity-inventory.tabHosts', { context: ['noInstances', productId] })}\n            >\n              <InventoryList\n                key={`inv_${productId}`}\n                filterGuestsData={initialGuestsFilters}\n                filterInventoryData={inventoryFilters}\n                productId={productId}\n                settings={initialInventorySettings}\n                query={initialInventoryHostsQuery}\n                viewId={viewId}\n              />\n            </InventoryTab>\n            {initialSubscriptionsInventoryFilters && (\n              <InventoryTab\n                key={`inventory_subs_${productId}`}\n                title={t('curiosity-inventory.tabSubscriptions', { context: productId })}\n              >\n                <InventorySubscriptions\n                  key={`subs_${productId}`}\n                  filterInventoryData={subscriptionsInventoryFilters}\n                  productId={productId}\n                  query={initialInventorySubscriptionsQuery}\n                  viewId={viewId}\n                />\n              </InventoryTab>\n            )}\n          </InventoryTabs>\n        </PageSection>\n      </ProductViewContext.Provider>\n    );\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader productLabel={viewProductLabel}>\n        {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: viewProductLabel })}\n      </PageHeader>\n      <PageColumns>{productConfig.map(config => renderProduct(config, uomValue))}</PageColumns>\n    </PageLayout>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: Function, useRouteDetail: Function}}\n */\nProductViewOpenShiftContainer.propTypes = {\n  t: PropTypes.func,\n  useRouteDetail: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: Function, useRouteDetail: Function}}\n */\nProductViewOpenShiftContainer.defaultProps = {\n  t: translate,\n  useRouteDetail\n};\n\nexport { ProductViewOpenShiftContainer as default, ProductViewOpenShiftContainer };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, store, storeHooks } from '../../redux';\nimport { Select } from '../form/select';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.granularity', { context: type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Array} props.options\n * @param {Function} props.t\n * @param {string} props.value\n * @param {string} props.viewId\n * @returns {Node}\n */\nconst ToolbarFieldGranularity = ({ options, t, value, viewId }) => {\n  const updatedValue = storeHooks.reactRedux.useSelector(\n    ({ view }) => view.graphTallyQuery?.[viewId]?.[RHSM_API_QUERY_TYPES.GRANULARITY],\n    value\n  );\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  /**\n   * On select, dispatch type.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @returns {void}\n   */\n  const onSelect = event => {\n    const { startDate, endDate } = dateHelpers.getRangedDateTime(event.value);\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: event.value\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      }\n    ]);\n  };\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      data-test={ToolbarFieldGranularity.defaultProps.viewId}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{viewId: string, t: Function, options: Array, value: string}}\n */\nToolbarFieldGranularity.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  t: PropTypes.func,\n  value: PropTypes.oneOf([...Object.values(FIELD_TYPES)]),\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{viewId: string, t: translate, options: Array, value: string}}\n */\nToolbarFieldGranularity.defaultProps = {\n  options: toolbarFieldOptions,\n  t: translate,\n  value: FIELD_TYPES.DAILY,\n  viewId: 'toolbarFieldGranularity'\n};\n\nexport { ToolbarFieldGranularity as default, ToolbarFieldGranularity, toolbarFieldOptions };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, store, storeHooks } from '../../redux';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = dateHelpers.getRangedMonthDateTime().listDateTimeRanges.map(dateTime => ({\n  ...dateTime,\n  selected: false\n}));\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Array} props.options\n * @param {Function} props.t\n * @param {string} props.value\n * @param {string} props.viewId\n * @returns {Node}\n */\nconst ToolbarFieldRangedMonthly = ({ options, t, value, viewId }) => {\n  const updatedValue = storeHooks.reactRedux.useSelector(\n    ({ view }) => view.query?.[viewId]?.[RHSM_API_QUERY_TYPES.START_DATE],\n    value\n  );\n\n  const updatedOptions = options.map(option => ({\n    ...option,\n    selected: option.title === updatedValue || option.value.startDate.toISOString() === updatedValue\n  }));\n\n  /**\n   * On select, dispatch type.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @returns {void}\n   */\n  const onSelect = event => {\n    const { startDate, endDate } = event.value;\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: FIELD_TYPES.DAILY\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      }\n    ]);\n  };\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      placeholder={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      position={SelectPosition.right}\n      maxHeight={250}\n      data-test={ToolbarFieldRangedMonthly.defaultProps.viewId}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{viewId: string, t: Function, options: Array, value: string}}\n */\nToolbarFieldRangedMonthly.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  t: PropTypes.func,\n  value: PropTypes.string,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{viewId: string, t: translate, options: Array, value: string}}\n */\nToolbarFieldRangedMonthly.defaultProps = {\n  options: toolbarFieldOptions,\n  t: translate,\n  value: translate('curiosity-toolbar.granularityRange', { context: 'current' }),\n  viewId: 'toolbarFieldRangeGranularity'\n};\n\nexport { ToolbarFieldRangedMonthly as default, ToolbarFieldRangedMonthly, toolbarFieldOptions };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, store, storeHooks } from '../../redux';\nimport { Select } from '../form/select';\nimport { RHSM_API_QUERY_UOM_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.uom', { context: type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * Display a unit of measure (uom) field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Array} props.options\n * @param {Function} props.t\n * @param {string} props.value\n * @param {string} props.viewId\n * @returns {Node}\n */\nconst ToolbarFieldUom = ({ options, t, value, viewId }) => {\n  const updatedValue = storeHooks.reactRedux.useSelector(\n    ({ view }) => view.query?.[viewId]?.[RHSM_API_QUERY_TYPES.UOM],\n    value\n  );\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  /**\n   * On select, dispatch type.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @returns {void}\n   */\n  const onSelect = event =>\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.UOM],\n        viewId,\n        [RHSM_API_QUERY_TYPES.UOM]: event.value\n      }\n    ]);\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: 'uom' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder', { context: 'uom' })}\n      data-test={ToolbarFieldUom.defaultProps.viewId}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{viewId: string, t: Function, options: Array, value: string}}\n */\nToolbarFieldUom.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  t: PropTypes.func,\n  value: PropTypes.oneOf([...Object.values(FIELD_TYPES)]),\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{viewId: string, t: translate, options: Array, value: string}}\n */\nToolbarFieldUom.defaultProps = {\n  options: toolbarFieldOptions,\n  t: translate,\n  value: FIELD_TYPES.CORES,\n  viewId: 'toolbarFieldUom'\n};\n\nexport { ToolbarFieldUom as default, ToolbarFieldUom, toolbarFieldOptions };\n"],"names":["GraphCard","onUpdateGraphData","props","getGraphReportsCapacity","isDisabled","productId","query","graphGranularity","getQueryGranularity","startDate","RHSM_API_QUERY_TYPES","endDate","this","prevProps","_isEqual","data","filtered","filterGraphData","graphData","productLabel","viewId","chartAreaProps","xAxisLabelIncrement","graphCardHelpers","xAxisTickFormat","item","previousItem","tick","date","previousDate","granularity","yAxisTickFormat","Chart","key","JSON","stringify","dataSets","tempFiltered","id","strokeWidth","isStacked","test","isThreshold","stroke","chartColorGreenDark","strokeDasharray","length","map","value","Object","assign","keys","chartLegend","chart","datum","chartTooltip","cardTitle","children","error","meta","pending","settings","actionDisplay","Card","className","MinHeight","CardHeader","CardTitle","Title","headingLevel","size","CardActions","CardBody","Loader","variant","renderChart","React","defaultProps","helpers","t","translate","makeMapStateToProps","reduxSelectors","ConnectedGraphCard","connect","dispatch","reduxActions","InventorySubscriptions","onColumnSort","updatedDirection","direction","updatedSortColumn","values","SORT_TYPES","find","_camelCase","SortByDirection","SORT_DIRECTION_TYPES","store","type","reduxTypes","console","warn","onPage","offset","perPage","onUpdateInventoryData","getSubscriptionsInventory","filterInventoryData","listData","session","updatedColumnHeaders","updatedRows","cellData","inventoryListHelpers","filters","onSort","columnHeaders","cells","borders","TableVariant","rows","fulfilled","itemCount","perPageDefault","Bullseye","context","updatedPerPage","updatedOffset","isLastPage","paginationHelpers","minHeightContentRefreshKey","updateOnContent","isCompact","onPerPage","tableProps","colCount","colWidth","cellWidth","rowCount","renderTable","CardFooter","isFooter","dropDirection","ConnectedInventorySubscriptions","InventoryTabs","onTab","index","tabs","activeTab","defaultActiveTab","updatedChildren","child","active","content","title","count","Tabs","ConnectedInventoryTabs","inventory","ProductViewOpenShiftContainer","useAliasRouteDetail","useRouteDetail","viewProductLabel","productParameter","productConfig","uomValue","storeHooks","view","PageLayout","PageHeader","appName","PageColumns","config","updatedUomValue","productContextFilterUom","graphTallyQuery","inventoryHostsQuery","inventorySubscriptionsQuery","initialGraphFilters","initialGraphSettings","initialGuestsFilters","initialInventoryFilters","initialInventorySettings","initialSubscriptionsInventoryFilters","initialToolbarFilters","uomFilter","apiQueries","initialGraphTallyQuery","initialInventoryHostsQuery","initialInventorySubscriptionsQuery","toolbarQuery","graphFilters","inventoryFilters","subscriptionsInventoryFilters","filter","isOptional","RegExp","graphCardTitle","Tooltip","position","TooltipPosition","enableFlip","distance","entryDelay","exitDelay","ProductViewContext","PageToolbar","filterOptions","PageSection","RHSM_API_PATH_ID_TYPES","ToolbarFieldUom","ToolbarFieldGranularity","ToolbarFieldRangedMonthly","InventoryTab","filterGuestsData","renderProduct","toolbarFieldOptions","FIELD_TYPES","selected","options","updatedValue","updatedOptions","option","Select","onSelect","event","dateHelpers","toISOString","selectedOptions","placeholder","listDateTimeRanges","dateTime","SelectPosition","maxHeight"],"sourceRoot":""}