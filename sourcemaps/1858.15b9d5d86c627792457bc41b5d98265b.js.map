{"version":3,"file":"js/1858.1671129299246.cb94da33df31d4d4a6c5.js","mappings":"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","sources":["webpack:///./src/components/productView/productViewContext.js"],"sourcesContent":["import React, { useCallback, useContext } from 'react';\nimport { reduxHelpers } from '../../redux/common';\nimport { storeHooks } from '../../redux/hooks';\nimport { rhsmConstants, RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Route context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{}, helpers.noop];\n\nconst ProductViewContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated product view context.\n *\n * @returns {React.Context<{}>}\n */\nconst useProductViewContext = () => useContext(ProductViewContext);\n\n/**\n * Return a query object from initial product config and Redux store.\n *\n * @param {string} queryType An identifier used to pull from both config and Redux, they should named the same.\n * @param {object} options\n * @param {string} options.overrideId A custom identifier, used for scenarios like the Guest inventory IDs\n * @param {object} options.useProductViewContext\n * @param {Function} options.useSelectors\n * @returns {object}\n */\nconst useProductQueryFactory = (\n  queryType,\n  {\n    overrideId,\n    useProductViewContext: useAliasProductViewContext = useProductViewContext,\n    useSelectors: useAliasSelectors = storeHooks.reactRedux.useSelectors\n  } = {}\n) => {\n  const { [queryType]: initialQuery, productId, viewId } = useAliasProductViewContext();\n  const [queryOverride, queryProduct, queryView] = useAliasSelectors([\n    ({ view }) => view?.[queryType]?.[overrideId],\n    ({ view }) => view?.[queryType]?.[productId],\n    ({ view }) => view?.[queryType]?.[viewId]\n  ]);\n\n  return {\n    ...initialQuery,\n    ...queryOverride,\n    ...queryProduct,\n    ...queryView\n  };\n};\n\n/**\n * Return a base product query\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {Function} options.useProductQueryFactory\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductQuery = ({\n  queryType = 'query',\n  useProductQueryFactory: useAliasProductQueryFactory = useProductQueryFactory,\n  options\n} = {}) => useAliasProductQueryFactory(queryType, options);\n\n/**\n * Return the graph query based off of tally and capacity.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductQueryFactory\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductGraphTallyQuery = ({\n  queryType = 'graphTallyQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_TALLY_CAPACITY_TYPES,\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductQueryFactory: useAliasProductQueryFactory = useProductQueryFactory,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useAliasProductQuery(),\n      ...useAliasProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return the inventory query for guests. Use fallback/defaults for guests offset, limit.\n *\n * @param {object} options\n * @param {number} options.defaultLimit\n * @param {number} options.defaultOffset\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductQueryFactory\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryGuestsQuery = ({\n  defaultLimit = 100,\n  defaultOffset = 0,\n  queryType = 'inventoryGuestsQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductQueryFactory: useAliasProductQueryFactory = useProductQueryFactory,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      [RHSM_API_QUERY_SET_TYPES.LIMIT]: defaultLimit,\n      [RHSM_API_QUERY_SET_TYPES.OFFSET]: defaultOffset,\n      ...useAliasProductQuery(),\n      ...useAliasProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for hosts.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductQueryFactory\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryHostsQuery = ({\n  queryType = 'inventoryHostsQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductQueryFactory: useAliasProductQueryFactory = useProductQueryFactory,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useAliasProductQuery(),\n      ...useAliasProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for subscriptions.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductQueryFactory\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventorySubscriptionsQuery = ({\n  queryType = 'inventorySubscriptionsQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductQueryFactory: useAliasProductQueryFactory = useProductQueryFactory,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useAliasProductQuery(),\n      ...useAliasProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return a unified query for toolbars\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductGraphTallyQuery\n * @param {Function} options.useProductInventoryHostsQuery\n * @param {Function} options.useProductInventorySubscriptionsQuery\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductToolbarQuery = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery,\n  useProductInventoryHostsQuery: useAliasProductInventoryHostsQuery = useProductInventoryHostsQuery,\n  useProductInventorySubscriptionsQuery:\n    useAliasProductInventorySubscriptionsQuery = useProductInventorySubscriptionsQuery,\n  options\n} = {}) => ({\n  ...useAliasProductQuery({ options }),\n  ...useAliasProductGraphTallyQuery({ options }),\n  ...useAliasProductInventoryHostsQuery({ options }),\n  ...useAliasProductInventorySubscriptionsQuery({ options })\n});\n\n/**\n * Get a filtered product configuration context.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductViewContext\n * @returns {object}\n */\nconst useProductContext = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductViewContext: useAliasProductViewContext = useProductViewContext\n} = {}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.UOM]: uomFilter } = useAliasProductQuery();\n  const {\n    initialGraphFilters = [],\n    initialInventoryFilters = [],\n    initialSubscriptionsInventoryFilters = [],\n    productContextFilterUom,\n    ...config\n  } = useAliasProductViewContext();\n\n  const applyUomFilter = useCallback(() => {\n    if (productContextFilterUom === true) {\n      const filterFilters = ({ id, metric, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(uomFilter, 'i').test(metric) || new RegExp(uomFilter, 'i').test(id);\n      };\n\n      return {\n        ...config,\n        initialGraphFilters: initialGraphFilters.filter(filterFilters),\n        initialInventoryFilters: initialInventoryFilters.filter(filterFilters),\n        initialSubscriptionsInventoryFilters: initialSubscriptionsInventoryFilters.filter(filterFilters)\n      };\n    }\n\n    return {\n      ...config,\n      initialGraphFilters,\n      initialInventoryFilters,\n      initialSubscriptionsInventoryFilters\n    };\n  }, [\n    config,\n    initialGraphFilters,\n    initialInventoryFilters,\n    initialSubscriptionsInventoryFilters,\n    productContextFilterUom,\n    uomFilter\n  ]);\n\n  return applyUomFilter();\n};\n\n/**\n * Return product identifiers.\n *\n * @param {object} options\n * @param {Function} options.useProductViewContext\n * @returns {{productLabel, viewId, productId, productGroup, productVariants, productArchitectures}}\n */\nconst useProduct = ({ useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}) => {\n  const { productArchitectures, productGroup, productId, productLabel, productVariants, viewId } =\n    useAliasProductViewContext();\n  return {\n    productArchitectures,\n    productGroup,\n    productId,\n    productLabel,\n    productVariants,\n    viewId\n  };\n};\n\n/**\n * Return graph configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductGraphConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialGraphFilters, initialGraphSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGraphFilters,\n    settings: initialGraphSettings\n  };\n};\n\n/**\n * Return guests inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryGuestsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { inventoryGuestsQuery = {}, initialGuestsFilters, initialGuestsSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGuestsFilters,\n    initialQuery: inventoryGuestsQuery,\n    settings: initialGuestsSettings\n  };\n};\n\n/**\n * Return hosts inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryHostsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialInventoryFilters, initialInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialInventoryFilters,\n    settings: initialInventorySettings\n  };\n};\n\n/**\n * Return subscriptions inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventorySubscriptionsConfig = ({\n  useProductContext: useAliasProductContext = useProductContext\n} = {}) => {\n  const { initialSubscriptionsInventoryFilters, initialSubscriptionsInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialSubscriptionsInventoryFilters,\n    settings: initialSubscriptionsInventorySettings\n  };\n};\n\n/**\n * Return primary toolbar configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductToolbarConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialToolbarFilters, initialToolbarSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialToolbarFilters,\n    settings: initialToolbarSettings\n  };\n};\n\nconst context = {\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useQuery: useProductQuery,\n  useQueryFactory: useProductQueryFactory,\n  useGraphTallyQuery: useProductGraphTallyQuery,\n  useInventoryGuestsQuery: useProductInventoryGuestsQuery,\n  useInventoryHostsQuery: useProductInventoryHostsQuery,\n  useInventorySubscriptionsQuery: useProductInventorySubscriptionsQuery,\n  useProduct,\n  useGraphConfig: useProductGraphConfig,\n  useInventoryGuestsConfig: useProductInventoryGuestsConfig,\n  useInventoryHostsConfig: useProductInventoryHostsConfig,\n  useInventorySubscriptionsConfig: useProductInventorySubscriptionsConfig,\n  useToolbarConfig: useProductToolbarConfig,\n  useToolbarQuery: useProductToolbarQuery\n};\n\nexport {\n  context as default,\n  context,\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useProductQuery,\n  useProductQueryFactory,\n  useProductGraphTallyQuery,\n  useProductInventoryGuestsQuery,\n  useProductInventoryHostsQuery,\n  useProductInventorySubscriptionsQuery,\n  useProduct,\n  useProductGraphConfig,\n  useProductInventoryGuestsConfig,\n  useProductInventoryHostsConfig,\n  useProductInventorySubscriptionsConfig,\n  useProductToolbarConfig,\n  useProductToolbarQuery\n};\n"],"names":["DEFAULT_CONTEXT","helpers","ProductViewContext","React","useProductViewContext","useContext","useProductQueryFactory","queryType","overrideId","useAliasProductViewContext","useSelectors","useAliasSelectors","storeHooks","initialQuery","productId","viewId","view","queryOverride","queryProduct","queryView","useProductQuery","useAliasProductQueryFactory","options","useProductGraphTallyQuery","schemaCheck","rhsmConstants","useAliasProductQuery","reduxHelpers","useProductInventoryGuestsQuery","defaultLimit","defaultOffset","RHSM_API_QUERY_SET_TYPES","useProductInventoryHostsQuery","useProductInventorySubscriptionsQuery","useProductToolbarQuery","useAliasProductGraphTallyQuery","useAliasProductInventoryHostsQuery","useAliasProductInventorySubscriptionsQuery","useProductContext","uomFilter","initialGraphFilters","initialInventoryFilters","initialSubscriptionsInventoryFilters","productContextFilterUom","config","applyUomFilter","useCallback","filterFilters","id","metric","isOptional","RegExp","test","filter","useProduct","productArchitectures","productGroup","productLabel","productVariants","useProductGraphConfig","useAliasProductContext","initialGraphSettings","filters","settings","useProductInventoryGuestsConfig","inventoryGuestsQuery","initialGuestsFilters","initialGuestsSettings","useProductInventoryHostsConfig","initialInventorySettings","useProductInventorySubscriptionsConfig","initialSubscriptionsInventorySettings","useProductToolbarConfig","initialToolbarFilters","initialToolbarSettings","context","useQuery","useQueryFactory","useGraphTallyQuery","useInventoryGuestsQuery","useInventoryHostsQuery","useInventorySubscriptionsQuery","useGraphConfig","useInventoryGuestsConfig","useInventoryHostsConfig","useInventorySubscriptionsConfig","useToolbarConfig","useToolbarQuery"],"sourceRoot":""}