{"version":3,"file":"js/2227.1666622753178.17aeaa5a486ebac97d69.js","mappings":"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","sources":["webpack:///./src/components/toolbar/toolbar.js","webpack:///./src/components/toolbar/toolbarContext.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Toolbar as PfToolbar,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup\n} from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport {\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFieldQueries,\n  useToolbarSecondaryFields\n} from './toolbarContext';\nimport { ToolbarFieldSelectCategory, useSelectCategoryOptions } from './toolbarFieldSelectCategory';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Application filter toolbar.\n *\n * @fires onClearFilter\n * @fires onClearAll\n * @param {object} props\n * @param {boolean} props.hardFilterReset On clearing all fields allow the category to reset as well.\n * @param {boolean} props.isDisabled\n * @param {Function} props.t\n * @param {Function} props.useSelectCategoryOptions\n * @param {Function} props.useToolbarFieldClear\n * @param {Function} props.useToolbarFieldClearAll\n * @param {Function} props.useToolbarFieldQueries\n * @param {Function} props.useToolbarSecondaryFields\n * @returns {Node}\n */\nconst Toolbar = ({\n  hardFilterReset,\n  isDisabled,\n  t,\n  useSelectCategoryOptions: useAliasSelectCategoryOptions,\n  useToolbarFieldClear: useAliasToolbarFieldClear,\n  useToolbarFieldClearAll: useAliasToolbarFieldClearAll,\n  useToolbarFieldQueries: useAliasToolbarFieldQueries,\n  useToolbarSecondaryFields: useAliasToolbarSecondaryFields\n}) => {\n  const { currentCategory, options } = useAliasSelectCategoryOptions();\n  const toolbarFieldQueries = useAliasToolbarFieldQueries();\n  const clearField = useAliasToolbarFieldClear();\n  const clearAllFields = useAliasToolbarFieldClearAll();\n  const secondaryFields = useAliasToolbarSecondaryFields();\n\n  if (isDisabled || (!options?.length && !secondaryFields?.length)) {\n    return null;\n  }\n\n  /**\n   * Clear a specific value\n   *\n   * @event onClearFilter\n   * @param {object} params\n   * @param {*} params.value\n   * @returns {void}\n   */\n  const onClearFilter = ({ value }) => clearField(value);\n\n  /**\n   * Clear all active filters.\n   *\n   * @event onClearAll\n   * @returns {void}\n   */\n  const onClearAll = () => clearAllFields(hardFilterReset);\n\n  /**\n   * Set selected options for chip display.\n   *\n   * @param {object} params\n   * @param {Array} params.options\n   * @param {*} params.value\n   * @returns {Array}\n   */\n  const setSelectedOptions = ({ options: filterOptions, value }) => {\n    const query = filterOptions.find(({ value: optionValue }) => optionValue === toolbarFieldQueries?.[value]);\n    return (query?.title && [query?.title]) || [];\n  };\n\n  return (\n    <PfToolbar\n      id=\"curiosity-toolbar\"\n      className=\"curiosity-toolbar pf-m-toggle-group-container ins-c-primary-toolbar\"\n      collapseListedFiltersBreakpoint=\"sm\"\n      clearAllFilters={onClearAll}\n      clearFiltersButtonText={t('curiosity-toolbar.clearFilters')}\n    >\n      <ToolbarContent>\n        <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"md\">\n          <ToolbarGroup variant=\"filter-group\">\n            {options.length > 1 && (\n              <ToolbarItem>\n                <ToolbarFieldSelectCategory />\n              </ToolbarItem>\n            )}\n            {options.map(({ title, value, component: OptionComponent, isClearable, options: filterOptions }) => {\n              const chipProps = { categoryName: title };\n\n              if (isClearable !== false) {\n                chipProps.chips = setSelectedOptions({ options: filterOptions, value });\n                chipProps.deleteChip = () => onClearFilter({ options: filterOptions, value });\n              }\n\n              return (\n                <ToolbarFilter\n                  key={value}\n                  showToolbarItem={currentCategory === value || options.length === 1}\n                  {...chipProps}\n                >\n                  <OptionComponent isFilter />\n                </ToolbarFilter>\n              );\n            })}\n          </ToolbarGroup>\n        </ToolbarToggleGroup>\n        <ToolbarItem alignment={{ default: 'alignRight' }}>{secondaryFields}</ToolbarItem>\n      </ToolbarContent>\n    </PfToolbar>\n  );\n};\n\n/**\n * Prop types\n *\n * @type {{useToolbarFieldClear: Function, t: Function, useSelectCategoryOptions: Function, hardFilterReset: boolean,\n *     useToolbarSecondaryFields: Function, isDisabled: boolean, useToolbarFieldClearAll: Function, useToolbarFieldQueries: Function}}\n */\nToolbar.propTypes = {\n  hardFilterReset: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  t: PropTypes.func,\n  useSelectCategoryOptions: PropTypes.func,\n  useToolbarFieldClear: PropTypes.func,\n  useToolbarFieldClearAll: PropTypes.func,\n  useToolbarFieldQueries: PropTypes.func,\n  useToolbarSecondaryFields: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useToolbarFieldClear: Function, t: Function, useSelectCategoryOptions: Function, hardFilterReset: boolean,\n *     useToolbarSecondaryFields: Function, isDisabled: boolean, useToolbarFieldClearAll: Function, useToolbarFieldQueries: Function}}\n */\nToolbar.defaultProps = {\n  hardFilterReset: false,\n  isDisabled: helpers.UI_DISABLED_TOOLBAR,\n  t: translate,\n  useSelectCategoryOptions,\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFieldQueries,\n  useToolbarSecondaryFields\n};\n\nexport { Toolbar as default, Toolbar };\n","import React from 'react';\nimport { useProductQuery, useProductGraphTallyQuery, useProductToolbarConfig } from '../productView/productViewContext';\nimport { RHSM_API_QUERY_SET_TYPES as RHSM_API_QUERY_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { useOnSelect as useSelectCategoryOnSelect, toolbarFieldOptions } from './toolbarFieldSelectCategory';\nimport { useOnSelect as useBillingProviderOnSelect } from './toolbarFieldBillingProvider';\nimport { useOnSelect as useSlaOnSelect } from './toolbarFieldSla';\nimport { useOnSelect as useUsageOnSelect } from './toolbarFieldUsage';\nimport { SelectPosition } from '../form/select';\n\n/**\n * Return current values for categories/queries.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductGraphTallyQuery\n * @returns {object}\n */\nconst useToolbarFieldQueries = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery\n} = {}) => {\n  const {\n    [RHSM_API_QUERY_TYPES.BILLING_PROVIDER]: billingProvider,\n    [RHSM_API_QUERY_TYPES.SLA]: sla,\n    [RHSM_API_QUERY_TYPES.UOM]: uom,\n    [RHSM_API_QUERY_TYPES.USAGE]: usage\n  } = useAliasProductQuery();\n  const { [RHSM_API_QUERY_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n\n  return {\n    [RHSM_API_QUERY_TYPES.BILLING_PROVIDER]: billingProvider,\n    [RHSM_API_QUERY_TYPES.GRANULARITY]: granularity,\n    [RHSM_API_QUERY_TYPES.SLA]: sla,\n    [RHSM_API_QUERY_TYPES.UOM]: uom,\n    [RHSM_API_QUERY_TYPES.USAGE]: usage\n  };\n};\n\n/**\n * Clear a specific toolbar category.\n *\n * @param {object} options\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClear = ({\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect\n} = {}) => {\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n\n  return field => {\n    switch (field) {\n      case RHSM_API_QUERY_TYPES.BILLING_PROVIDER:\n        billingOnSelect();\n        break;\n      case RHSM_API_QUERY_TYPES.SLA:\n        slaOnSelect();\n        break;\n      case RHSM_API_QUERY_TYPES.USAGE:\n        usageOnSelect();\n        break;\n      default:\n        break;\n    }\n  };\n};\n\n/**\n * Clear all available toolbar categories.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useSelectCategoryOnSelect\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClearAll = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useSelectCategoryOnSelect: useAliasSelectCategoryOnSelect = useSelectCategoryOnSelect,\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect\n} = {}) => {\n  const {\n    [RHSM_API_QUERY_TYPES.BILLING_PROVIDER]: billingProvider,\n    [RHSM_API_QUERY_TYPES.SLA]: sla,\n    [RHSM_API_QUERY_TYPES.USAGE]: usage\n  } = useAliasProductQuery();\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n  const selectCategoryOnSelect = useAliasSelectCategoryOnSelect();\n\n  return hardFilterReset => {\n    if (typeof billingProvider === 'string') {\n      billingOnSelect();\n    }\n\n    if (typeof sla === 'string') {\n      slaOnSelect();\n    }\n\n    if (typeof usage === 'string') {\n      usageOnSelect();\n    }\n\n    if (hardFilterReset) {\n      selectCategoryOnSelect();\n    }\n  };\n};\n\n/**\n * Return list of secondary toolbar fields for display.\n *\n * @param {object} options\n * @param {Array} options.categoryOptions\n * @param {Function} options.useProductToolbarConfig\n * @returns {Array}\n */\nconst useToolbarSecondaryFields = ({\n  categoryOptions = toolbarFieldOptions,\n  useProductToolbarConfig: useAliasProductToolbarConfig = useProductToolbarConfig\n} = {}) => {\n  const { secondaryFilters = [] } = useAliasProductToolbarConfig();\n\n  return secondaryFilters.map(({ id }) => {\n    const { component: OptionComponent } = categoryOptions.find(\n      ({ value: categoryOptionValue }) => id === categoryOptionValue\n    );\n\n    return <OptionComponent key={`option-${id}`} isFilter={false} position={SelectPosition.right} />;\n  });\n};\n\nconst context = {\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFieldQueries,\n  useToolbarSecondaryFields\n};\n\nexport {\n  context as default,\n  context,\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFieldQueries,\n  useToolbarSecondaryFields\n};\n"],"names":["Toolbar","hardFilterReset","isDisabled","t","useAliasSelectCategoryOptions","useSelectCategoryOptions","useAliasToolbarFieldClear","useToolbarFieldClear","useAliasToolbarFieldClearAll","useToolbarFieldClearAll","useAliasToolbarFieldQueries","useToolbarFieldQueries","useAliasToolbarSecondaryFields","useToolbarSecondaryFields","currentCategory","options","toolbarFieldQueries","clearField","clearAllFields","secondaryFields","length","id","className","collapseListedFiltersBreakpoint","clearAllFilters","clearFiltersButtonText","ToolbarContent","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarGroup","variant","ToolbarItem","ToolbarFieldSelectCategory","map","title","value","OptionComponent","component","isClearable","filterOptions","chipProps","categoryName","chips","query","find","setSelectedOptions","deleteChip","ToolbarFilter","key","showToolbarItem","isFilter","alignment","default","defaultProps","helpers","translate","useProductQuery","useAliasProductQuery","useProductGraphTallyQuery","useAliasProductGraphTallyQuery","billingProvider","RHSM_API_QUERY_TYPES","sla","uom","usage","granularity","useBillingProviderOnSelect","useAliasBillingProviderOnSelect","useSlaOnSelect","useAliasSlaOnSelect","useUsageOnSelect","useAliasUsageOnSelect","billingOnSelect","slaOnSelect","usageOnSelect","field","useSelectCategoryOnSelect","useAliasSelectCategoryOnSelect","selectCategoryOnSelect","categoryOptions","toolbarFieldOptions","useProductToolbarConfig","useAliasProductToolbarConfig","secondaryFilters","categoryOptionValue","position","SelectPosition","context"],"sourceRoot":""}