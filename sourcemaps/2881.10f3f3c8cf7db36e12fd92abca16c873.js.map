{"version":3,"file":"js/2881.d62c5a75289a8e87f666.js","mappings":"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","sources":["webpack:///./src/components/inventoryCardSubscriptions/inventoryCardSubscriptionsContext.js"],"sourcesContent":["import { useShallowCompareEffect } from 'react-use';\nimport _camelCase from 'lodash/camelCase';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { reduxActions, reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductInventorySubscriptionsQuery } from '../productView/productViewContext';\nimport {\n  RHSM_API_QUERY_INVENTORY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_INVENTORY_SUBSCRIPTIONS_SORT_TYPES as SORT_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * @memberof InventoryCardSubscriptions\n * @module InventoryCardSubscriptionsContext\n */\n\n/**\n * Combined Redux RHSM Actions, getSubscriptionsInventory, and inventory selector response.\n *\n * @param {object} options\n * @param {boolean} options.isDisabled\n * @param {Function} options.getInventory\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useProductInventoryQuery\n * @param {Function} options.useSelectorsResponse\n * @returns {Function}\n */\nconst useGetSubscriptionsInventory = ({\n  isDisabled = false,\n  getInventory = reduxActions.rhsm.getSubscriptionsInventory,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventorySubscriptionsQuery,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductInventoryQuery();\n  const dispatch = useAliasDispatch();\n  const { cancelled, pending, data, ...response } = useAliasSelectorsResponse(\n    ({ inventory }) => inventory?.subscriptionsInventory?.[productId]\n  );\n\n  useShallowCompareEffect(() => {\n    if (!isDisabled) {\n      getInventory(productId, query)(dispatch);\n    }\n  }, [dispatch, isDisabled, productId, query]);\n\n  return {\n    ...response,\n    pending: pending || cancelled || false,\n    data: (data?.length === 1 && data[0]) || data || {}\n  };\n};\n\n/**\n * An onPage callback for subscriptions inventory.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnPageSubscriptions = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for subscriptions inventory.\n   *\n   * @event onPage\n   * @param {object} params\n   * @param {number} params.offset\n   * @param {number} params.perPage\n   * @returns {void}\n   */\n  return ({ offset, perPage }) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.OFFSET],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.OFFSET]: offset\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.LIMIT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.LIMIT]: perPage\n      }\n    ]);\n  };\n};\n\n/**\n * An onColumnSort callback for subscriptions inventory.\n *\n * @param {object} options\n * @param {object} options.sortColumns\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnColumnSortSubscriptions = ({\n  sortColumns = SORT_TYPES,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for subscriptions inventory.\n   *\n   * @event onColumnSort\n   * @param {*} _data\n   * @param {object} params\n   * @param {string} params.direction\n   * @param {string} params.id\n   * @returns {void}\n   */\n  return (_data, { direction, id }) => {\n    const updatedSortColumn = Object.values(sortColumns).find(value => value === id || _camelCase(value) === id);\n    let updatedDirection;\n\n    if (!updatedSortColumn) {\n      if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n        console.warn(`Sorting can only be performed on select fields, confirm field ${id} is allowed.`);\n      }\n      return;\n    }\n\n    switch (direction) {\n      case SortByDirection.desc:\n        updatedDirection = SORT_DIRECTION_TYPES.DESCENDING;\n        break;\n      default:\n        updatedDirection = SORT_DIRECTION_TYPES.ASCENDING;\n        break;\n    }\n\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.DIRECTION],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.DIRECTION]: updatedDirection\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.SORT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.SORT]: updatedSortColumn\n      }\n    ]);\n  };\n};\n\nconst context = {\n  useGetSubscriptionsInventory,\n  useOnPageSubscriptions,\n  useOnColumnSortSubscriptions\n};\n\nexport {\n  context as default,\n  context,\n  useGetSubscriptionsInventory,\n  useOnPageSubscriptions,\n  useOnColumnSortSubscriptions\n};\n"],"names":["useGetSubscriptionsInventory","_ref","arguments","length","undefined","_ref$isDisabled","isDisabled","_ref$getInventory","getInventory","reduxActions","_ref$useDispatch","useDispatch","useAliasDispatch","storeHooks","_ref$useProduct","useProduct","useAliasProduct","_ref$useProductInvent","useProductInventoryQuery","useAliasProductInventoryQuery","useProductInventorySubscriptionsQuery","_ref$useSelectorsResp","useSelectorsResponse","useAliasSelectorsResponse","_useAliasProduct","productId","query","dispatch","_useAliasSelectorsRes","_ref2","_inventory$subscripti","inventory","subscriptionsInventory","cancelled","pending","data","response","_objectWithoutProperties","_excluded","useShallowCompareEffect","_objectSpread","useOnPageSubscriptions","_ref3","_ref3$useDispatch","_ref3$useProduct","_useAliasProduct2","_ref4","offset","perPage","_defineProperty","type","reduxTypes","RHSM_API_QUERY_SET_TYPES","viewId","useOnColumnSortSubscriptions","_ref7","_ref7$sortColumns","sortColumns","SORT_TYPES","_ref7$useDispatch","_ref7$useProduct","_useAliasProduct3","_data","_ref8","updatedDirection","direction","id","updatedSortColumn","Object","values","find","value","_camelCase","SortByDirection","SORT_DIRECTION_TYPES","helpers","console","warn","concat","context"],"sourceRoot":""}