{"version":3,"file":"js/9407.898566f44911fd8c67f2.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardMetricTotals.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter, CardTitle, Flex, FlexItem } from '@patternfly/react-core';\nimport moment from 'moment';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useMetricsSelector } from './graphCardContext';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { Loader, SkeletonSize } from '../loader/loader';\nimport { dateHelpers, helpers } from '../../common';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldRangedMonthly';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Display totals for a single metric.\n *\n * @param {object} props\n * @param {Node} props.children\n * @param {Function} props.t\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardMetricTotals = ({\n  children,\n  t,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate } = useAliasProductGraphTallyQuery();\n  const { pending, error, fulfilled, dataSets = [] } = useAliasMetricsSelector();\n  const { data = [], id: metricId, meta = {} } = dataSets[0] || {};\n  const { date: lastDate, hasData: lastHasData, y: lastValue } = data[data.length - 1] || {};\n  const { date: currentDate, hasData: currentHasData, y: currentValue } =\n    data.find(({ isCurrentDate }) => isCurrentDate === true) || {};\n\n  const { totalMonthlyDate: monthlyDate, totalMonthlyHasData: monthlyHasData, totalMonthlyValue: monthlyValue } = meta;\n\n  const { title: selectedMonth, isCurrent } =\n    toolbarFieldOptions.find(\n      option => option.title === startDate || option.value.startDate.toISOString() === startDate\n    ) || {};\n\n  const dailyDate = isCurrent ? currentDate : lastDate;\n  const dailyHasData = isCurrent ? currentHasData : lastHasData;\n  const dailyValue = isCurrent ? currentValue : lastValue;\n\n  return (\n    <Flex className=\"curiosity-usage-graph__totals\">\n      <Flex flex={{ default: 'flex_1' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-column\">\n          <Card\n            data-test=\"graphDailyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric_dailyTotal', {\n                context: metricId,\n                month: selectedMonth\n              })}\n            </CardTitle>\n            <MinHeight key=\"currentBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric_total',\n                      {\n                        context: (dailyHasData && metricId) || '',\n                        total: helpers\n                          .numberDisplay(dailyValue)\n                          ?.format({\n                            average: true,\n                            mantissa: 5,\n                            trimMantissa: true,\n                            lowPrecision: false\n                          })\n                          ?.toUpperCase()\n                      },\n                      [<strong title={dailyValue} aria-label={dailyValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"currentFooter\">\n              <CardFooter>\n                <div className={(!dailyHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    dailyDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(dailyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n          <Card\n            data-test=\"graphMonthlyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric_monthlyTotal', {\n                context: metricId,\n                month: selectedMonth\n              })}\n            </CardTitle>\n            <MinHeight key=\"totalMonthlyBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric_total',\n                      {\n                        context: (monthlyHasData && metricId) || '',\n                        total: helpers\n                          .numberDisplay(monthlyValue)\n                          ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: false })\n                          ?.toUpperCase()\n                      },\n                      [<strong title={monthlyValue} aria-label={monthlyValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"totalMonthlyFooter\">\n              <CardFooter>\n                <div className={(!monthlyHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    monthlyDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(monthlyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n        </FlexItem>\n      </Flex>\n      <Flex flex={{ default: 'flex_3' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-graph-column\">{children}</FlexItem>\n      </Flex>\n    </Flex>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.propTypes = {\n  children: PropTypes.node,\n  t: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.defaultProps = {\n  children: null,\n  t: translate,\n  useMetricsSelector,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardMetricTotals as default, GraphCardMetricTotals };\n"],"names":["GraphCardMetricTotals","children","t","useAliasMetricsSelector","useMetricsSelector","startDate","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","RHSM_API_QUERY_SET_TYPES","pending","error","fulfilled","dataSets","data","metricId","id","meta","length","lastDate","date","lastHasData","hasData","lastValue","y","find","isCurrentDate","currentDate","currentHasData","currentValue","monthlyDate","totalMonthlyDate","monthlyHasData","totalMonthlyHasData","monthlyValue","totalMonthlyValue","toolbarFieldOptions","option","title","value","toISOString","selectedMonth","isCurrent","dailyDate","dailyHasData","dailyValue","Flex","className","flex","default","direction","alignSelf","FlexItem","Card","CardTitle","context","month","MinHeight","key","CardBody","Loader","variant","skeletonProps","size","SkeletonSize","total","helpers","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","CardFooter","moment","dateHelpers","defaultProps","translate"],"sourceRoot":""}