{"version":3,"file":"js/31.d756e35903f8bba946e9.js","mappings":"0RAmCA,MAAMA,UAAaC,IAAAA,UAAgBC,cAAA,SAAAC,YAAAC,EAAAA,EAAAA,GAAA,aACzB,CACNC,iBAAkB,KAClBC,YAAa,QA0BfF,EAAAA,EAAAA,GAAA,cAOQG,IAAe,IAAd,MAAEC,GAAOD,EAChB,MAAM,MAAEE,GAAUC,KAAKC,MAEvBD,KAAKE,SACH,CACEP,iBAAkBG,IAEpB,IAAMC,EAAM,CAAED,WACf,GACF,CAvCDK,oBACE,MAAM,YAAEP,GAAgBI,KAAKI,MAET,OAAhBR,GACFI,KAAKK,YAET,CAEAC,mBAAmBC,GACjB,MAAM,KAAEC,GAASR,KAAKC,MASjBQ,IAAaF,EAAUC,KAAMA,GARfE,CAACC,EAAQC,KAC1B,GAAsB,mBAAXD,GAA2C,mBAAXC,EACzC,OAAOD,EAAOE,aAAeD,EAAOC,UAGtB,KAIhBb,KAAKK,YAET,CAuBAA,aACE,MAAM,UAAES,EAAS,iBAAEC,EAAgB,KAAEP,GAASR,KAAKC,MACnD,IAAIN,EAAmBoB,EAEvB,MAAMnB,EAAcY,EAAKQ,KAAI,CAAAC,EAA6BnB,KAAU,IAAtC,OAAEoB,EAAM,QAAEC,EAAO,MAAEC,GAAOH,EAGtD,OAFAtB,EAAmBuB,EAASpB,EAAQH,EAGlCJ,IAAAA,cAAC8B,EAAAA,IAAG,CAACC,IAAKF,EAAOG,SAAUzB,EAAOsB,MAAO7B,IAAAA,cAACiC,EAAAA,aAAY,KAAEJ,IACrDD,EACG,IAIe,iBAAdL,IACTnB,EAAmBmB,GAGrBd,KAAKE,SAAS,CACZP,mBACAC,eAEJ,CAOA6B,aACE,MAAM,iBAAE9B,EAAgB,YAAEC,GAAgBI,KAAKI,OACzC,UAAEsB,EAAS,kBAAEC,GAAsB3B,KAAKC,MAE9C,OACEV,IAAAA,cAACqC,EAAAA,KAAM,CACLF,UAAS,iBAAAG,OAAqBF,EAAuC,GAAlB,cAAoB,KAAAE,OAAIH,GAAa,IACxFI,UAAWnC,EACXoC,SAAUA,CAACC,EAAOlC,IAAUE,KAAKD,MAAM,CAAEiC,QAAOlC,UAChDmC,cAAY,EACZC,eAAa,EACbC,GAAIC,EAAAA,QAAAA,aACJC,MAAO,CACLC,QAAS,YACTC,GAAI,YAGL3C,EAGP,CAOA4C,SACE,OACEjD,IAAAA,cAACkD,EAAAA,KAAI,CAACf,UAAU,4BACdnC,IAAAA,cAACmD,EAAAA,SAAQ,CAACC,KAAM,IAAK3C,KAAKyB,cAGhC,EASFnC,EAAKsD,UAAY,CACf9B,UAAW+B,IAAAA,OACXnB,UAAWmB,IAAAA,OACX9B,iBAAkB8B,IAAAA,OAClBlB,kBAAmBkB,IAAAA,KACnB9C,MAAO8C,IAAAA,KACPrC,KAAMqC,IAAAA,QACJA,IAAAA,MAAgB,CACd3B,OAAQ2B,IAAAA,KACR1B,QAAS0B,IAAAA,KAAAA,WACTzB,MAAOyB,IAAAA,KAAAA,eAWbvD,EAAKwD,aAAe,CAClBhC,UAAW,KACXY,UAAW,GACXX,iBAAkB,EAClBY,mBAAmB,EACnB5B,MAAOqC,EAAAA,QAAAA,KACP5B,KAAM,G","sources":["webpack:///./src/components/tabs/tabs.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tabs as PfTabs, Tab, TabTitleText, Grid, GridItem } from '@patternfly/react-core';\nimport _isEqualWith from 'lodash/isEqualWith';\nimport { helpers } from '../../common';\n\n/**\n * PF tabs with state.\n *\n * @memberof Components\n * @module Tabs\n */\n\n/**\n * FixMe: PF tabs misinterprets \"isElementInView\" when tab title nodes are loaded dynamically\n * It appears the use of isElementInView within PF tabs is trying to be predicative in using\n * \"getBoundingClientRect\" but produces questionable results in scenarios where content is\n * async created. isElementInView assumes some form of the content will always be there\n * instead of scenarios where someone tries to dynamically apply components. It may be good to\n * review using a window.setTimeout(() => handleScrollButtons()) in componentDidMount.\n *\n * Our temporary solution is to simply hide the buttons with a manual set flag affecting the\n * CSS class. This will most likely cause long-term issues.\n */\n/**\n * ToDo: Insights frontend components uses a custom tabs layout, investigate related CSS classes\n * Originally we applied the CSS classes, but they appeared to provide nothing. Since Insights\n * rolled its own tabs we're hesitant to apply said classes without understanding what they provide.\n */\n/**\n * A set of tabs.\n *\n * @augments React.Component\n * @fires onTab\n */\nclass Tabs extends React.Component {\n  state = {\n    updatedActiveTab: null,\n    updatedTabs: null\n  };\n\n  componentDidMount() {\n    const { updatedTabs } = this.state;\n\n    if (updatedTabs === null) {\n      this.setTabData();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { tabs } = this.props;\n    const customizer = (valueA, valueB) => {\n      if (typeof valueA === 'function' && typeof valueB === 'function') {\n        return valueA.toString() === valueB.toString();\n      }\n\n      return undefined;\n    };\n\n    if (!_isEqualWith(prevProps.tabs, tabs, customizer)) {\n      this.setTabData();\n    }\n  }\n\n  /**\n   * On tab selected\n   *\n   * @event onTab\n   * @param {object} params\n   * @param {number} params.index\n   */\n  onTab = ({ index }) => {\n    const { onTab } = this.props;\n\n    this.setState(\n      {\n        updatedActiveTab: index\n      },\n      () => onTab({ index })\n    );\n  };\n\n  /**\n   * Convert tab objects into the required PF Tab format.\n   */\n  setTabData() {\n    const { activeTab, defaultActiveTab, tabs } = this.props;\n    let updatedActiveTab = defaultActiveTab;\n\n    const updatedTabs = tabs.map(({ active, content, title }, index) => {\n      updatedActiveTab = active ? index : updatedActiveTab;\n\n      return (\n        <Tab key={title} eventKey={index} title={<TabTitleText>{title}</TabTitleText>}>\n          {content}\n        </Tab>\n      );\n    });\n\n    if (typeof activeTab === 'number') {\n      updatedActiveTab = activeTab;\n    }\n\n    this.setState({\n      updatedActiveTab,\n      updatedTabs\n    });\n  }\n\n  /**\n   * Apply props to tabs.\n   *\n   * @returns {React.ReactNode}\n   */\n  renderTabs() {\n    const { updatedActiveTab, updatedTabs } = this.state;\n    const { className, hasOverflowScroll } = this.props;\n\n    return (\n      <PfTabs\n        className={`curiosity-tabs${(!hasOverflowScroll && '__no-scroll') || ''} ${className || ''}`}\n        activeKey={updatedActiveTab}\n        onSelect={(event, index) => this.onTab({ event, index })}\n        mountOnEnter\n        unmountOnExit\n        id={helpers.generateId()}\n        inset={{\n          default: 'insetNone',\n          md: 'insetLg'\n        }}\n      >\n        {updatedTabs}\n      </PfTabs>\n    );\n  }\n\n  /**\n   * Render tabs.\n   *\n   * @returns {React.ReactNode}\n   */\n  render() {\n    return (\n      <Grid className=\"curiosity-tabs-container\">\n        <GridItem span={12}>{this.renderTabs()}</GridItem>\n      </Grid>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{tabs: Array, hasOverflowScroll: boolean, onTab: Function, className: string,\n *     defaultActiveTab: number, activeTab: number}}\n */\nTabs.propTypes = {\n  activeTab: PropTypes.number,\n  className: PropTypes.string,\n  defaultActiveTab: PropTypes.number,\n  hasOverflowScroll: PropTypes.bool,\n  onTab: PropTypes.func,\n  tabs: PropTypes.arrayOf(\n    PropTypes.shape({\n      active: PropTypes.bool,\n      content: PropTypes.node.isRequired,\n      title: PropTypes.node.isRequired\n    })\n  )\n};\n\n/**\n * Default props.\n *\n * @type {{tabs: Array, hasOverflowScroll: boolean, onTab: Function, className: string,\n *     defaultActiveTab: number, activeTab: number}}\n */\nTabs.defaultProps = {\n  activeTab: null,\n  className: '',\n  defaultActiveTab: 0,\n  hasOverflowScroll: false,\n  onTab: helpers.noop,\n  tabs: []\n};\n\nexport { Tabs as default, Tabs };\n"],"names":["Tabs","React","constructor","arguments","_defineProperty","updatedActiveTab","updatedTabs","_ref","index","onTab","this","props","setState","componentDidMount","state","setTabData","componentDidUpdate","prevProps","tabs","_isEqualWith","customizer","valueA","valueB","toString","activeTab","defaultActiveTab","map","_ref2","active","content","title","Tab","key","eventKey","TabTitleText","renderTabs","className","hasOverflowScroll","PfTabs","concat","activeKey","onSelect","event","mountOnEnter","unmountOnExit","id","helpers","inset","default","md","render","Grid","GridItem","span","propTypes","PropTypes","defaultProps"],"sourceRoot":""}