{"version":3,"file":"js/1858.7a6615c742153a89a104.js","mappings":"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","sources":["webpack:///./src/components/productView/productViewContext.js"],"sourcesContent":["import React, { useCallback, useContext } from 'react';\nimport { reduxHelpers } from '../../redux/common';\nimport { storeHooks } from '../../redux/hooks';\nimport { RHSM_API_QUERY_TYPES, rhsmApiTypes } from '../../types/rhsmApiTypes';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Route context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{}, helpers.noop];\n\nconst ProductViewContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated product view context.\n *\n * @returns {React.Context<{}>}\n */\nconst useProductViewContext = () => useContext(ProductViewContext);\n\n/**\n * Return a query object from initial product config and Redux store.\n *\n * @param {string} queryType An identifier used to pull from both config and Redux, they should named the same.\n * @param {object} options\n * @param {object} options.useProductViewContext\n * @returns {object}\n */\nconst useProductQueryFactory = (\n  queryType,\n  { useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}\n) => {\n  const { [queryType]: initialQuery, productId, viewId } = useAliasProductViewContext();\n  const queryProduct = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[productId], undefined);\n  const queryView = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[viewId], undefined);\n\n  return {\n    ...initialQuery,\n    ...queryProduct,\n    ...queryView\n  };\n};\n\n/**\n * Return a base product query\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductQuery = ({ queryType = 'query', options } = {}) => useProductQueryFactory(queryType, options);\n\n/**\n * Return the graph query based off of tally and capacity.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductGraphTallyQuery = ({\n  queryType = 'graphTallyQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_REPORT_CAPACITY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return the inventory query for guests.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryGuestsQuery = ({\n  queryType = 'inventoryGuestsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_GUESTS_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for hosts.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryHostsQuery = ({\n  queryType = 'inventoryHostsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for subscriptions.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventorySubscriptionsQuery = ({\n  queryType = 'inventorySubscriptionsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Get a filtered product configuration context.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductViewContext\n * @returns {object}\n */\nconst useProductContext = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductViewContext: useAliasProductViewContext = useProductViewContext\n} = {}) => {\n  const { [RHSM_API_QUERY_TYPES.UOM]: uomFilter } = useAliasProductQuery();\n  const {\n    initialGraphFilters = [],\n    initialInventoryFilters = [],\n    initialSubscriptionsInventoryFilters = [],\n    productContextFilterUom,\n    ...config\n  } = useAliasProductViewContext();\n\n  const applyUomFilter = useCallback(() => {\n    if (productContextFilterUom === true) {\n      const filterFilters = ({ id, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(uomFilter, 'i').test(id);\n      };\n\n      return {\n        ...config,\n        initialGraphFilters: initialGraphFilters.filter(filterFilters),\n        initialInventoryFilters: initialInventoryFilters.filter(filterFilters),\n        initialSubscriptionsInventoryFilters: initialSubscriptionsInventoryFilters.filter(filterFilters)\n      };\n    }\n\n    return {\n      ...config,\n      initialGraphFilters,\n      initialInventoryFilters,\n      initialSubscriptionsInventoryFilters\n    };\n  }, [\n    config,\n    initialGraphFilters,\n    initialInventoryFilters,\n    initialSubscriptionsInventoryFilters,\n    productContextFilterUom,\n    uomFilter\n  ]);\n\n  return applyUomFilter();\n};\n\n/**\n * Return product identifiers.\n *\n * @param {object} options\n * @param {Function} options.useProductViewContext\n * @returns {{productLabel: string, viewId: string, productId: string, productGroup: string}}\n */\nconst useProduct = ({ useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}) => {\n  const { productGroup, productId, productLabel, viewId } = useAliasProductViewContext();\n  return {\n    productGroup,\n    productId,\n    productLabel,\n    viewId\n  };\n};\n\n/**\n * Return graph configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductGraphConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialGraphFilters, initialGraphSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGraphFilters,\n    settings: initialGraphSettings\n  };\n};\n\n/**\n * Return hosts inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryHostsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialInventoryFilters, initialInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialInventoryFilters,\n    settings: initialInventorySettings\n  };\n};\n\n/**\n * Return subscriptions inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventorySubscriptionsConfig = ({\n  useProductContext: useAliasProductContext = useProductContext\n} = {}) => {\n  const { initialSubscriptionsInventoryFilters, initialSubscriptionsInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialSubscriptionsInventoryFilters,\n    settings: initialSubscriptionsInventorySettings\n  };\n};\n\n/**\n * Return primary toolbar configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductToolbarConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialToolbarFilters, initialToolbarSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialToolbarFilters,\n    settings: initialToolbarSettings\n  };\n};\n\nconst context = {\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useQuery: useProductQuery,\n  useQueryFactory: useProductQueryFactory,\n  useGraphTallyQuery: useProductGraphTallyQuery,\n  useInventoryGuestsQuery: useProductInventoryGuestsQuery,\n  useInventoryHostsQuery: useProductInventoryHostsQuery,\n  useInventorySubscriptionsQuery: useProductInventorySubscriptionsQuery,\n  useProduct,\n  useGraphConfig: useProductGraphConfig,\n  useInventoryHostsConfig: useProductInventoryHostsConfig,\n  useInventorySubscriptionsConfig: useProductInventorySubscriptionsConfig,\n  useToolbarConfig: useProductToolbarConfig\n};\n\nexport {\n  context as default,\n  context,\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useProductQuery,\n  useProductQueryFactory,\n  useProductGraphTallyQuery,\n  useProductInventoryGuestsQuery,\n  useProductInventoryHostsQuery,\n  useProductInventorySubscriptionsQuery,\n  useProduct,\n  useProductGraphConfig,\n  useProductInventoryHostsConfig,\n  useProductInventorySubscriptionsConfig,\n  useProductToolbarConfig\n};\n"],"names":["DEFAULT_CONTEXT","helpers","ProductViewContext","React","useProductViewContext","useContext","useProductQueryFactory","queryType","useAliasProductViewContext","initialQuery","productId","viewId","queryProduct","storeHooks","view","undefined","queryView","useProductQuery","options","useProductGraphTallyQuery","schemaCheck","rhsmApiTypes","reduxHelpers","useProductInventoryGuestsQuery","useProductInventoryHostsQuery","useProductInventorySubscriptionsQuery","useProductContext","useAliasProductQuery","uomFilter","RHSM_API_QUERY_TYPES","initialGraphFilters","initialInventoryFilters","initialSubscriptionsInventoryFilters","productContextFilterUom","config","applyUomFilter","useCallback","filterFilters","id","isOptional","RegExp","test","filter","useProduct","productGroup","productLabel","useProductGraphConfig","useAliasProductContext","initialGraphSettings","filters","settings","useProductInventoryHostsConfig","initialInventorySettings","useProductInventorySubscriptionsConfig","initialSubscriptionsInventorySettings","useProductToolbarConfig","initialToolbarFilters","initialToolbarSettings","context","useQuery","useQueryFactory","useGraphTallyQuery","useInventoryGuestsQuery","useInventoryHostsQuery","useInventorySubscriptionsQuery","useGraphConfig","useInventoryHostsConfig","useInventorySubscriptionsConfig","useToolbarConfig"],"sourceRoot":""}