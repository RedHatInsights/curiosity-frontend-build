{"version":3,"file":"js/9407.1677107262061.20a9907ead580860dd35.js","mappings":"ypBAcMA,EAAkB,CAAC,CAAEC,SAAU,CAAEC,cAAc,EAAOC,QAAS,GAAIC,YAAQC,IAAeC,EAAAA,EAAAA,MAE1FC,EAAmBC,IAAAA,cAAoBR,GAOvCS,EAAsB,WAAH,OAASC,EAAAA,EAAAA,YAAWH,EAAiB,EAUxDI,EAA0B,WAGrB,6DAAP,CAAC,EAAC,IAFJC,WAAYC,OAAe,IAAG,EAAAD,EAAAA,WAAU,MACxCE,sBAAuBC,OAA0B,IAAG,EAAAD,EAAAA,sBAAqB,EAEzE,EAAsBD,IAAdG,EAAS,EAATA,UACR,EAAwCD,IAA4B,IAA5DE,QAAAA,OAAO,IAAG,KAAE,MAAEhB,SAAAA,OAAQ,IAAG,GAAC,EAAC,EACnC,GAAmEiB,EAAAA,EAAAA,UACjE,kBACEC,EAAAA,iBAAAA,sBAAuC,CACrCF,QAAAA,EACAhB,SAAAA,EACAe,UAAAA,GACA,GACJ,CAACC,EAAShB,EAAUe,IAPdI,EAAsB,EAAtBA,uBAAsB,IAAEC,0BAAAA,OAAyB,IAAG,KAAE,EAU9D,MAAO,CACLD,uBAAAA,EACAC,0BAAAA,EAEJ,EAWMC,EAAqB,WAGhB,6DAAP,CAAC,EAAC,IAFJb,oBAAqBc,OAAwB,IAAG,EAAAd,EAAmB,MACnEe,qBAAsBC,OAAyB,IAAG,EAAAC,EAAAA,GAAAA,WAAAA,qBAA0C,EAE5F,EAA0BH,IAA0B,IAA5CtB,SAAAA,OAAQ,IAAG,GAAC,EAAC,EACrB,EAAyBA,EAAjBE,QAAAA,OAAO,IAAG,KAAE,EAEpB,EAMIsB,EACFtB,EAAQwB,KACN,gBAAOC,EAAQ,EAAZC,GAAcC,EAAU,EAAVA,WAAU,OACzB,oBAAGC,EAAK,EAALA,MAAK,OACND,EAA2B,QAAjB,EAAGC,EAAMC,gBAAQ,aAAd,EAAiBJ,GAAuB,QAAd,EAAGG,EAAME,aAAK,aAAX,EAAcL,EAAS,MATvEM,EAAK,EAALA,MACAC,EAAS,EAATA,UACAC,EAAO,EAAPA,QAAO,IACPC,KAAAA,OAAI,IAAG,KAAE,EACNC,GAAQ,YAYPC,EAAW,CAAC,EACZC,EAAaH,aAAI,EAAJA,EAAMV,KAAI,SAACc,EAAYC,GACxC,IAAMC,GAAoB,kBACrBxC,EAAQuC,IACRD,GAGL,OADAF,EAASpC,EAAQuC,GAAOb,IAAMc,EACvBA,CACT,IAEA,OAAO,kBACFL,GAAQ,IACXD,KAAME,EACNK,SAAUJ,EACVN,MAAAA,EACAC,UAAAA,EACAC,QAAAA,GAEJ,EAeMS,EAAgB,WAOX,6DAAP,CAAC,EAAC,IANJC,gBAAAA,OAAe,IAAG,EAAAC,EAAAA,GAAAA,KAAAA,gBAAiC,MACnDC,YAAaC,OAAgB,IAAG,EAAAvB,EAAAA,GAAAA,WAAAA,YAAiC,MACjEjB,oBAAqBc,OAAwB,IAAG,EAAAd,EAAmB,MACnEa,mBAAoB4B,OAAuB,IAAG,EAAA5B,EAAkB,MAChEV,WAAYC,OAAe,IAAG,EAAAD,EAAAA,WAAU,MACxCuC,0BAA2BC,OAA8B,IAAG,EAAAD,EAAAA,0BAAyB,EAErF,EAAsBtC,IAAdG,EAAS,EAATA,UACFqC,EAAQD,IACRE,EAAWL,IACXX,EAAWY,IACjB,EAA0B3B,IAA0B,IAA5CtB,SAAAA,OAAQ,IAAG,GAAC,EAAC,EACrB,EAAyBA,EAAjBE,QAAAA,OAAO,IAAG,KAAE,EAYpB,OAVAoD,EAAAA,EAAAA,IAAwB,WACtB,IAAMC,EAAiBrD,EAAQwB,KAAI,gBAAWC,EAAQ,EAAhBxB,OAAkB0B,EAAU,EAAVA,WAAmB2B,EAAW,EAAlBJ,MAAK,MAAqB,CAC5FxB,GAAIb,EACJZ,OAAQwB,EACRE,WAAAA,EACAuB,MAAOI,EACR,IACDX,EAAgBU,EAAgBH,EAAhCP,CAAuCQ,EACzC,GAAG,CAACnD,EAASa,EAAWqC,IAEjBf,CACT,EAYMoB,EAAsB,WAIjB,6DAAP,CAAC,EAAC,IAHJC,gBAAAA,OAAe,IAAG,EAAAC,EAAAA,oBAAmB,MACrCtC,mBAAoB4B,OAAuB,IAAG,EAAA5B,EAAkB,MAChEb,oBAAqBc,OAAwB,IAAG,EAAAd,EAAmB,EAEnE,EAA8ByC,IAAtBd,EAAO,EAAPA,QAASQ,EAAQ,EAARA,SACjB,EAA0BrB,IAA0B,IAA5CtB,SAAAA,OAAQ,IAAG,GAAC,EAAC,EACb4D,EAAY5D,EAAZ4D,QAER,OAAO3C,EAAAA,EAAAA,UACL,kBACE2C,aAAO,EAAPA,EAASlC,KAAI,YAAqC,IAAlCE,EAAE,EAAFA,GAAIiC,EAAO,EAAPA,QAAYC,GAAW,YAEtBC,GADJL,EAAgBM,MAAK,gBAAUC,EAAmB,EAA1BC,MAAK,OAA4BtC,IAAOqC,CAAmB,KACjD,CAAC,GAA1CE,UAER,OACGJ,GACC,kBAAC,EAAAK,YAAW,CAACC,IAAG,iBAAYzC,IAC1B,kBAACmC,EAAe,eAACO,UAAU,GAAWR,MAGzCD,IAAY1B,GAAWQ,EAAS4B,QAC/B,kBAAC,EAAAH,YAAW,CAACC,IAAKzC,GAAMvB,EAAAA,EAAAA,cACF,mBAAZwD,EAAyBA,EAAQ,CAAEzB,KAAMO,IAAckB,IAGnE,IAEJ,GAAE,GACJ,CAACD,EAASF,EAAiBf,EAAUR,GAEzC,EAEMqC,EAAU,CACdlE,iBAAAA,EACAP,gBAAAA,EACA6C,cAAAA,EACAa,oBAAAA,EACAjD,oBAAAA,EACAa,mBAAAA,EACAX,wBAAAA,E,uQChLI+D,EAAwB,SAAH,GAKrB,YAJJC,EAAQ,EAARA,SACAC,EAAC,EAADA,EACoB1B,EAAuB,EAA3C5B,mBAG+CuD,GAAczB,EAFJ,EAAzDD,6BAES2B,EAAAA,GAAAA,YACT,EAAqD5B,IAA7Cd,EAAO,EAAPA,QAASF,EAAK,EAALA,MAAOC,EAAS,EAATA,UAAS,IAAES,SACnC,QAD2C,IAAG,KAAE,GACgB,IAAM,CAAC,EAAC,IAAhEP,KAAAA,OAAI,IAAG,KAAE,EAAER,EAAE,EAAFA,GAAYD,EAAQ,EAAhBxB,OAAM,IAAY2E,KAAAA,OAAI,IAAG,GAAC,EAAC,EAClD,EAA+D1C,EAAKA,EAAKmC,OAAS,IAAM,CAAC,EAA3EQ,EAAQ,EAAdC,KAAyBC,EAAW,EAApBC,QAAyBC,EAAS,EAAZC,EAC9C,EAIIhD,EAAK4B,MAAK,YAAgB,OAAyB,IAAzB,EAAbqB,aAA0C,KAAK,CAAC,EAHzDC,EAAW,EAAjBN,KACSO,EAAc,EAAvBL,QACGM,EAAY,EAAfJ,EAGwBK,EAAsFX,EAAxGY,iBAAoDC,EAAoDb,EAAzEc,oBAAwDC,EAAiBf,EAApCgB,kBAE5E,EACEnC,EAAAA,oBAAAA,MACE,SAAAoC,GAAM,OAAIA,EAAOC,QAAUpB,GAAamB,EAAO7B,MAAMU,UAAUqB,gBAAkBrB,CAAS,KACvF,CAAC,EAHOsB,EAAa,EAApBF,MAAsBG,EAAS,EAATA,UAKxBC,EAAYD,EAAYb,EAAcP,EACtCsB,EAAeF,EAAYZ,EAAiBN,EAC5CqB,EAAaH,EAAYX,EAAeL,EAE9C,OACE,yBAAK,wCAAgCoB,IAAW5E,IAAa6E,UAAU,iCACrE,6BACE,yBAAKA,UAAU,wCACb,kBAAC,EAAAC,KAAI,CACHC,SAAO,EACP,YAAU,sBACVF,UAAS,oDAAgDvE,EAAS,OAAW,KAE7E,kBAAC,EAAA0E,WAAU,KACT,kBAAC,EAAAC,UAAS,KACR,kBAAC,EAAAC,MAAK,CAACC,aAAa,KAAKC,KAAK,MAC3B5E,GAAW,kBAAC,EAAA6E,OAAM,CAACC,QAAQ,WAAWC,cAAe,CAAEH,KAAMI,EAAAA,aAAAA,MAC7DjF,GACCyC,EAAE,oCAAqC,CACrCH,QAAS,CAAC,aAAc5C,GACxBwF,MAAOlB,OAKjB,kBAAC,EAAAmB,SAAQ,KACP,6BACGlF,GAAW,kBAAC,EAAA6E,OAAM,CAACC,QAAQ,WAAWC,cAAe,CAAEH,KAAMI,EAAAA,aAAAA,GAAiBG,OAAQ,UACtFpF,GACCyC,EACE,iCACA,CACEH,QAAS,CAAC,QAAS6B,GAAgBzE,GACnC2F,MAC4B,QADvB,EAAElH,EAAAA,GAAAA,cACUiG,UAAW,OAMxB,QANwB,EADrB,EAEHkB,OAAO,CACPC,SAAS,EACTC,SAAU,EACVC,cAAc,EACdC,cAAc,WACd,WANwB,EADrB,EAQHC,eAEN,CAAC,4BAAQ7B,MAAOM,EAAY,aAAYA,QAIhD,kBAAC,EAAAwB,WAAU,KACT,6BACG3F,GAAW,kBAAC,EAAA6E,OAAM,CAACC,QAAQ,WAAWC,cAAe,CAAEH,KAAMI,EAAAA,aAAAA,MAC7DjF,GACCkE,GACAzB,EAAE,mCAAoC,CACpCK,KAAM+C,IAAAA,IAAW3B,GAAWoB,OAAOQ,EAAAA,GAAAA,wBAAAA,oBAK7C,kBAAC,EAAAvB,KAAI,CACHC,SAAO,EACP,YAAU,wBACVF,UAAS,oDAAgDvE,EAAS,OAAW,KAE7E,kBAAC,EAAA0E,WAAU,KACT,kBAAC,EAAAC,UAAS,KACR,kBAAC,EAAAC,MAAK,CAACC,aAAa,KAAKC,KAAK,MAC3B5E,GAAW,kBAAC,EAAA6E,OAAM,CAACC,QAAQ,WAAWC,cAAe,CAAEH,KAAMI,EAAAA,aAAAA,MAC7DjF,GACCyC,EAAE,oCAAqC,CACrCH,QAAS,CAAC,eAAgB5C,GAC1BwF,MAAOlB,OAKjB,kBAAC,EAAAmB,SAAQ,KACP,6BACGlF,GAAW,kBAAC,EAAA6E,OAAM,CAACC,QAAQ,WAAWC,cAAe,CAAEH,KAAMI,EAAAA,aAAAA,GAAiBG,OAAQ,UACtFpF,GACCyC,EACE,iCACA,CACEH,QAAS,CAAC,QAASmB,GAAkB/D,GACrC2F,MAC8B,QADzB,EAAElH,EAAAA,GAAAA,cACUwF,UAAa,OACqD,QADrD,EADvB,EAEH2B,OAAO,CAAEC,SAAS,EAAMC,SAAU,EAAGC,cAAc,EAAMC,cAAc,WAAQ,WADrD,EADvB,EAGHC,eAEN,CAAC,4BAAQ7B,MAAOH,EAAc,aAAYA,QAIlD,kBAAC,EAAAiC,WAAU,KACT,6BACG3F,GAAW,kBAAC,EAAA6E,OAAM,CAACC,QAAQ,WAAWC,cAAe,CAAEH,KAAMI,EAAAA,aAAAA,MAC7DjF,GACCuD,GACAd,EAAE,mCAAoC,CACpCK,KAAM+C,IAAAA,IAAWtC,GAAa+B,OAAOQ,EAAAA,GAAAA,wBAAAA,sBAOnD,6BACE,yBAAKxB,UAAU,8CAA8C9B,IAIrE,EAmBAD,EAAsBwD,aAAe,CACnCvD,SAAU,KACVC,EAAGuD,EAAAA,UACH7G,mBAAAA,EAAAA,mBACA6B,0BAAAA,EAAAA,0B","sources":["webpack:///./src/components/graphCard/graphCardContext.js","webpack:///./src/components/graphCard/graphCardMetricTotals.js"],"sourcesContent":["import React, { useContext, useMemo } from 'react';\nimport { useShallowCompareEffect } from 'react-use';\nimport { ToolbarItem } from '@patternfly/react-core';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphConfig, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldSelectCategory';\nimport { helpers } from '../../common/helpers';\nimport { graphCardHelpers } from './graphCardHelpers';\n\n/**\n * Chart context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{ settings: { isStandalone: false, metrics: [], metric: undefined } }, helpers.noop];\n\nconst GraphCardContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated graph card context.\n *\n * @returns {React.Context<{}>}\n */\nconst useGraphCardContext = () => useContext(GraphCardContext);\n\n/**\n * Parse filters settings for context.\n *\n * @param {object} options\n * @param {Function} options.useProduct\n * @param {Function} options.useProductGraphConfig\n * @returns {{standaloneFiltersSettings: { settings: {} }[], groupedFiltersSettings: { settings: {} }}}\n */\nconst useParseFiltersSettings = ({\n  useProduct: useAliasProduct = useProduct,\n  useProductGraphConfig: useAliasProductGraphConfig = useProductGraphConfig\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const { filters = [], settings = {} } = useAliasProductGraphConfig();\n  const { groupedFiltersSettings, standaloneFiltersSettings = [] } = useMemo(\n    () =>\n      graphCardHelpers.generateChartSettings({\n        filters,\n        settings,\n        productId\n      }),\n    [filters, settings, productId]\n  );\n\n  return {\n    groupedFiltersSettings,\n    standaloneFiltersSettings\n  };\n};\n\n/**\n * Transform multiple metrics from store for chart/graph consumption.\n *\n * @param {object} options\n * @param {Function} options.useGraphCardContext\n * @param {Function} options.useSelectorsResponse\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: *[], errorId: {},\n *     id: {}, list: *[]}, cancelled: boolean, dataSets: unknown[], message: null, error: boolean}}\n */\nconst useMetricsSelector = ({\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  const {\n    error,\n    fulfilled,\n    pending,\n    data = [],\n    ...response\n  } = useAliasSelectorsResponse(\n    metrics.map(\n      ({ id: metricId, isCapacity }) =>\n        ({ graph }) =>\n          isCapacity ? graph.capacity?.[metricId] : graph.tally?.[metricId]\n    )\n  );\n\n  /**\n   * Apply graph config settings to metric data.\n   */\n  const dataById = {};\n  const dataByList = data?.map((metricData, index) => {\n    const updatedMetricData = {\n      ...metrics[index],\n      ...metricData\n    };\n    dataById[metrics[index].id] = updatedMetricData;\n    return updatedMetricData;\n  });\n\n  return {\n    ...response,\n    data: dataById,\n    dataSets: dataByList,\n    error,\n    fulfilled,\n    pending\n  };\n};\n\n/**\n * Get graph metrics from Tally or Capacity.\n *\n * @param {object} params\n * @param {Function} params.getGraphMetrics\n * @param {Function} params.useDispatch\n * @param {Function} params.useGraphCardContext\n * @param {Function} params.useMetricsSelector\n * @param {Function} params.useProduct\n * @param {Function} params.useProductGraphTallyQuery\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: *[], errorId: {},\n *     id: {}, list: *[]}, cancelled: boolean, dataSets: *[], message: null, error: boolean}}\n */\nconst useGetMetrics = ({\n  getGraphMetrics = reduxActions.rhsm.getGraphMetrics,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector = useMetricsSelector,\n  useProduct: useAliasProduct = useProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductGraphTallyQuery();\n  const dispatch = useAliasDispatch();\n  const response = useAliasMetricsSelector();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  useShallowCompareEffect(() => {\n    const updatedMetrics = metrics.map(({ metric: metricId, isCapacity, query: metricQuery }) => ({\n      id: productId,\n      metric: metricId,\n      isCapacity,\n      query: metricQuery\n    }));\n    getGraphMetrics(updatedMetrics, query)(dispatch);\n  }, [metrics, productId, query]);\n\n  return response;\n};\n\n/**\n * Return a component list for a configurable graphCard action toolbar.\n * Allow the \"content\" prop to receive graph data for display via callback.\n *\n * @param {object} params\n * @param {Array} params.categoryOptions\n * @param {Function} params.useMetricsSelector\n * @param {Function} params.useGraphCardContext\n * @returns {*[]}\n */\nconst useGraphCardActions = ({\n  categoryOptions = toolbarFieldOptions,\n  useMetricsSelector: useAliasMetricsSelector = useMetricsSelector,\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext\n} = {}) => {\n  const { pending, dataSets } = useAliasMetricsSelector();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { actions } = settings;\n\n  return useMemo(\n    () =>\n      actions?.map(({ id, content, ...actionProps }) => {\n        const option = categoryOptions.find(({ value: categoryOptionValue }) => id === categoryOptionValue);\n        const { component: OptionComponent } = option || {};\n\n        return (\n          (OptionComponent && (\n            <ToolbarItem key={`option-${id}`}>\n              <OptionComponent isFilter={false} {...actionProps} />\n            </ToolbarItem>\n          )) ||\n          (content && !pending && dataSets.length && (\n            <ToolbarItem key={id || helpers.generateId()}>\n              {typeof content === 'function' ? content({ data: dataSets }) : content}\n            </ToolbarItem>\n          )) ||\n          null\n        );\n      }),\n    [actions, categoryOptions, dataSets, pending]\n  );\n};\n\nconst context = {\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardActions,\n  useGraphCardContext,\n  useMetricsSelector,\n  useParseFiltersSettings\n};\n\nexport {\n  context as default,\n  context,\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardActions,\n  useGraphCardContext,\n  useMetricsSelector,\n  useParseFiltersSettings\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter, CardHeader, CardTitle, Title } from '@patternfly/react-core';\nimport moment from 'moment';\nimport _camelCase from 'lodash/camelCase';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useMetricsSelector } from './graphCardContext';\nimport { Loader, SkeletonSize } from '../loader/loader';\nimport { dateHelpers, helpers } from '../../common';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldRangedMonthly';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Display totals for a single metric.\n *\n * @param {object} props\n * @param {Node} props.children\n * @param {Function} props.t\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardMetricTotals = ({\n  children,\n  t,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate } = useAliasProductGraphTallyQuery();\n  const { pending, error, fulfilled, dataSets = [] } = useAliasMetricsSelector();\n  const { data = [], id, metric: metricId, meta = {} } = dataSets[0] || {};\n  const { date: lastDate, hasData: lastHasData, y: lastValue } = data[data.length - 1] || {};\n  const {\n    date: currentDate,\n    hasData: currentHasData,\n    y: currentValue\n  } = data.find(({ isCurrentDate }) => isCurrentDate === true) || {};\n\n  const { totalMonthlyDate: monthlyDate, totalMonthlyHasData: monthlyHasData, totalMonthlyValue: monthlyValue } = meta;\n\n  const { title: selectedMonth, isCurrent } =\n    toolbarFieldOptions.find(\n      option => option.title === startDate || option.value.startDate.toISOString() === startDate\n    ) || {};\n\n  const dailyDate = isCurrent ? currentDate : lastDate;\n  const dailyHasData = isCurrent ? currentHasData : lastHasData;\n  const dailyValue = isCurrent ? currentValue : lastValue;\n\n  return (\n    <div data-test={`graphMetricTotals-${_camelCase(metricId)}`} className=\"curiosity-usage-graph__totals\">\n      <div>\n        <div className=\"curiosity-usage-graph__totals-column\">\n          <Card\n            isPlain\n            data-test=\"graphDailyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardHeader>\n              <CardTitle>\n                <Title headingLevel=\"h2\" size=\"md\">\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t('curiosity-graph.cardHeadingMetric', {\n                      context: ['dailyTotal', id],\n                      month: selectedMonth\n                    })}\n                </Title>\n              </CardTitle>\n            </CardHeader>\n            <CardBody>\n              <div>\n                {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg, height: '60px' }} />}\n                {fulfilled &&\n                  t(\n                    'curiosity-graph.cardBodyMetric',\n                    {\n                      context: ['total', dailyHasData && id],\n                      total: helpers\n                        .numberDisplay(dailyValue)\n                        ?.format({\n                          average: true,\n                          mantissa: 5,\n                          trimMantissa: true,\n                          lowPrecision: false\n                        })\n                        ?.toUpperCase()\n                    },\n                    [<strong title={dailyValue} aria-label={dailyValue} />]\n                  )}\n              </div>\n            </CardBody>\n            <CardFooter>\n              <div>\n                {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                {fulfilled &&\n                  dailyDate &&\n                  t('curiosity-graph.cardFooterMetric', {\n                    date: moment.utc(dailyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                  })}\n              </div>\n            </CardFooter>\n          </Card>\n          <Card\n            isPlain\n            data-test=\"graphMonthlyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardHeader>\n              <CardTitle>\n                <Title headingLevel=\"h2\" size=\"md\">\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t('curiosity-graph.cardHeadingMetric', {\n                      context: ['monthlyTotal', id],\n                      month: selectedMonth\n                    })}\n                </Title>\n              </CardTitle>\n            </CardHeader>\n            <CardBody>\n              <div>\n                {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg, height: '60px' }} />}\n                {fulfilled &&\n                  t(\n                    'curiosity-graph.cardBodyMetric',\n                    {\n                      context: ['total', monthlyHasData && id],\n                      total: helpers\n                        .numberDisplay(monthlyValue)\n                        ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: false })\n                        ?.toUpperCase()\n                    },\n                    [<strong title={monthlyValue} aria-label={monthlyValue} />]\n                  )}\n              </div>\n            </CardBody>\n            <CardFooter>\n              <div>\n                {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                {fulfilled &&\n                  monthlyDate &&\n                  t('curiosity-graph.cardFooterMetric', {\n                    date: moment.utc(monthlyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                  })}\n              </div>\n            </CardFooter>\n          </Card>\n        </div>\n      </div>\n      <div>\n        <div className=\"curiosity-usage-graph__totals-graph-column\">{children}</div>\n      </div>\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.propTypes = {\n  children: PropTypes.node,\n  t: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.defaultProps = {\n  children: null,\n  t: translate,\n  useMetricsSelector,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardMetricTotals as default, GraphCardMetricTotals };\n"],"names":["DEFAULT_CONTEXT","settings","isStandalone","metrics","metric","undefined","helpers","GraphCardContext","React","useGraphCardContext","useContext","useParseFiltersSettings","useProduct","useAliasProduct","useProductGraphConfig","useAliasProductGraphConfig","productId","filters","useMemo","graphCardHelpers","groupedFiltersSettings","standaloneFiltersSettings","useMetricsSelector","useAliasGraphCardContext","useSelectorsResponse","useAliasSelectorsResponse","storeHooks","map","metricId","id","isCapacity","graph","capacity","tally","error","fulfilled","pending","data","response","dataById","dataByList","metricData","index","updatedMetricData","dataSets","useGetMetrics","getGraphMetrics","reduxActions","useDispatch","useAliasDispatch","useAliasMetricsSelector","useProductGraphTallyQuery","useAliasProductGraphTallyQuery","query","dispatch","useShallowCompareEffect","updatedMetrics","metricQuery","useGraphCardActions","categoryOptions","toolbarFieldOptions","actions","content","actionProps","OptionComponent","find","categoryOptionValue","value","component","ToolbarItem","key","isFilter","length","context","GraphCardMetricTotals","children","t","startDate","RHSM_API_QUERY_SET_TYPES","meta","lastDate","date","lastHasData","hasData","lastValue","y","isCurrentDate","currentDate","currentHasData","currentValue","monthlyDate","totalMonthlyDate","monthlyHasData","totalMonthlyHasData","monthlyValue","totalMonthlyValue","option","title","toISOString","selectedMonth","isCurrent","dailyDate","dailyHasData","dailyValue","_camelCase","className","Card","isPlain","CardHeader","CardTitle","Title","headingLevel","size","Loader","variant","skeletonProps","SkeletonSize","month","CardBody","height","total","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","CardFooter","moment","dateHelpers","defaultProps","translate"],"sourceRoot":""}