{"version":3,"file":"js/2902.b00f7d9b5fb74c168d5a.js","mappings":"2OASMA,EAAc,WAAM,OAC6BC,EAAAA,EAAAA,iBAA7CC,EADgB,EAChBA,aAAcC,EADE,EACFA,OAAQC,EADN,EACMA,SAAUC,EADhB,EACgBA,SADhB,GAEOC,EAAAA,EAAAA,mBAAvBC,cAAAA,OAFgB,MAEA,GAFA,EAGhBC,EAAyDD,EAAzDC,YAAaC,EAA4CF,EAA5CE,SAHG,EAGyCF,EAAlCG,QAAAA,OAHP,MAGiB,GAHjB,IAGyCH,EAApBI,WAAAA,OAHrB,MAGkC,GAHlC,EAKxB,IAAKH,EACH,OAAO,KAGT,IAAMI,EAAc,CAClBC,MAAO,CAAEJ,SAAUK,GAAAA,CAAWL,IAC9BM,MAAO,CACLC,KAAMb,EACNc,OAAQb,EACRc,OAAQb,EACRc,UAAWjB,IAIf,OACE,yBACEkB,UAAS,sCAAiCT,MAAAA,OAAA,EAAAA,EAAYU,OAAS,qBAAyB,IACxFC,MAAO,CACLC,YAAab,MAAAA,OAAA,EAAAA,EAASc,OAAT,UAAoBd,EAAQc,KAA5B,OAAyC,EACtDC,aAAcf,MAAAA,OAAA,EAAAA,EAASgB,QAAT,UAAqBhB,EAAQgB,MAA7B,OAA2C,IAGzDC,IAAAA,eAAqBnB,IAAgBmB,IAAAA,aAAmBnB,GAAnB,UAAqCI,KAC1EJ,GAAY,UAAKI,MAazBZ,EAAY4B,aAAe","sources":["webpack:///./src/components/chart/chartLegend.js"],"sourcesContent":["import React from 'react';\nimport _cloneDeep from 'lodash/cloneDeep';\nimport { useChartContext, useToggleData } from './chartContext';\n\n/**\n * Wrapper for rendering an HTML based legend.\n *\n * @returns {Node}\n */\nconst ChartLegend = () => {\n  const { getIsToggled, onHide, onRevert, onToggle } = useToggleData();\n  const { chartSettings = {} } = useChartContext();\n  const { chartLegend, dataSets, padding = {}, xAxisProps = {} } = chartSettings;\n\n  if (!chartLegend) {\n    return null;\n  }\n\n  const legendProps = {\n    datum: { dataSets: _cloneDeep(dataSets) },\n    chart: {\n      hide: onHide,\n      revert: onRevert,\n      toggle: onToggle,\n      isToggled: getIsToggled\n    }\n  };\n\n  return (\n    <div\n      className={`curiosity-chartarea__legend${(xAxisProps?.label && '-axis-label-active') || ''}`}\n      style={{\n        marginLeft: (padding?.left && `${padding.left}px`) || 0,\n        marginRight: (padding?.right && `${padding.right}px`) || 0\n      }}\n    >\n      {(React.isValidElement(chartLegend) && React.cloneElement(chartLegend, { ...legendProps })) ||\n        chartLegend({ ...legendProps })}\n    </div>\n  );\n};\n\n/**\n * Prop types.\n */\nChartLegend.propTypes = {};\n\n/**\n * Default props.\n */\nChartLegend.defaultProps = {};\n\nexport { ChartLegend as default, ChartLegend };\n"],"names":["ChartLegend","useToggleData","getIsToggled","onHide","onRevert","onToggle","useChartContext","chartSettings","chartLegend","dataSets","padding","xAxisProps","legendProps","datum","_cloneDeep","chart","hide","revert","toggle","isToggled","className","label","style","marginLeft","left","marginRight","right","React","defaultProps"],"sourceRoot":""}