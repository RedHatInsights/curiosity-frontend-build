{"version":3,"file":"js/9407.f0b6e5cf2fc5411b1ae6.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardMetricTotals.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter, CardTitle, Flex, FlexItem } from '@patternfly/react-core';\nimport moment from 'moment';\nimport numbro from 'numbro';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useMetricsSelector } from './graphCardContext';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { Loader, SkeletonSize } from '../loader/loader';\nimport { dateHelpers } from '../../common';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldRangedMonthly';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Display totals for a single metric.\n *\n * @param {object} props\n * @param {Node} props.children\n * @param {Function} props.t\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardMetricTotals = ({\n  children,\n  t,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate } = useAliasProductGraphTallyQuery();\n  const { pending, error, fulfilled, dataSets = [] } = useAliasMetricsSelector();\n  const { data = [], id: metricId, meta = {} } = dataSets[0] || {};\n  const { date: currentDate, hasData: currentHasData, y: currentValue } = data[data.length - 1] || {};\n  const { totalMonthlyDate, totalMonthlyHasData, totalMonthlyValue } = meta;\n\n  const { title: selectedMonth, isCurrent } =\n    toolbarFieldOptions.find(\n      option => option.title === startDate || option.value.startDate.toISOString() === startDate\n    ) || {};\n\n  return (\n    <Flex className=\"curiosity-usage-graph__totals\">\n      <Flex flex={{ default: 'flex_1' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-column\">\n          <Card className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}>\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric_currentTotal', {\n                context: [isCurrent && 'current', metricId],\n                month: selectedMonth\n              })}\n            </CardTitle>\n            <MinHeight key=\"currentBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric_currentTotal',\n                      {\n                        context: (currentHasData && metricId) || '',\n                        total: numbro(currentValue)\n                          .format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: false })\n                          .toUpperCase()\n                      },\n                      [<strong title={currentValue} aria-label={currentValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"currentFooter\">\n              <CardFooter>\n                <div className={(!currentHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    currentDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(currentDate).format(dateHelpers.timestampTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n          <Card className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}>\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric_total', { context: metricId, month: selectedMonth })}\n            </CardTitle>\n            <MinHeight key=\"totalMonthlyBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric_total',\n                      {\n                        context: (totalMonthlyHasData && metricId) || '',\n                        total: numbro(totalMonthlyValue)\n                          .format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: false })\n                          .toUpperCase()\n                      },\n                      [<strong title={totalMonthlyValue} aria-label={totalMonthlyValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"totalMonthlyFooter\">\n              <CardFooter>\n                <div className={(!totalMonthlyHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    totalMonthlyDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(totalMonthlyDate).format(dateHelpers.timestampTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n        </FlexItem>\n      </Flex>\n      <Flex flex={{ default: 'flex_3' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-graph-column\">{children}</FlexItem>\n      </Flex>\n    </Flex>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.propTypes = {\n  children: PropTypes.node,\n  t: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.defaultProps = {\n  children: null,\n  t: translate,\n  useMetricsSelector,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardMetricTotals as default, GraphCardMetricTotals };\n"],"names":["GraphCardMetricTotals","children","t","useAliasMetricsSelector","useMetricsSelector","startDate","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","RHSM_API_QUERY_SET_TYPES","pending","error","fulfilled","dataSets","data","metricId","id","meta","length","currentDate","date","currentHasData","hasData","currentValue","y","totalMonthlyDate","totalMonthlyHasData","totalMonthlyValue","toolbarFieldOptions","option","title","value","toISOString","selectedMonth","isCurrent","Flex","className","flex","default","direction","alignSelf","FlexItem","Card","CardTitle","context","month","MinHeight","key","CardBody","Loader","variant","skeletonProps","size","SkeletonSize","total","numbro","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","CardFooter","moment","dateHelpers","defaultProps","translate"],"sourceRoot":""}