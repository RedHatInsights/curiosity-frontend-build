{"version":3,"file":"js/3280.1679402734031.730e6abb3c81d24ac4f4.js","mappings":"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","sources":["webpack:///./src/components/toolbar/toolbarContext.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { ToolbarItem } from '@patternfly/react-core';\nimport { useProductQuery, useProductToolbarConfig } from '../productView/productViewContext';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { useOnSelect as useSelectCategoryOnSelect, toolbarFieldOptions } from './toolbarFieldSelectCategory';\nimport { useOnSelect as useArchitectureOnSelect } from './toolbarFieldArchitecture';\nimport { useOnSelect as useBillingProviderOnSelect } from './toolbarFieldBillingProvider';\nimport { useOnSelect as useCategoryOnSelect } from './toolbarFieldCategory';\nimport { useOnSelect as useSlaOnSelect } from './toolbarFieldSla';\nimport { useOnSelect as useUsageOnSelect } from './toolbarFieldUsage';\nimport { useOnSelect as useVariantOnSelect } from './toolbarFieldVariant';\nimport { helpers } from '../../common/helpers';\n\n/**\n * @memberof Toolbar\n * @module ToolbarContext\n */\n\n/**\n * Clear a specific toolbar category using a select component's OnSelect hook.\n *\n * @param {object} options\n * @param {Function} options.useArchitectureOnSelect\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useCategoryOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @param {Function} options.useVariantOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClear = ({\n  useArchitectureOnSelect: useAliasArchitectureOnSelect = useArchitectureOnSelect,\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useCategoryOnSelect: useAliasCategoryOnSelect = useCategoryOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect,\n  useVariantOnSelect: useAliasVariantOnSelect = useVariantOnSelect\n} = {}) => {\n  const architectureOnSelect = useAliasArchitectureOnSelect();\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const categoryOnSelect = useAliasCategoryOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n  const variantOnSelect = useAliasVariantOnSelect();\n\n  return field => {\n    switch (field) {\n      case RHSM_API_QUERY_SET_TYPES.ARCHITECTURE:\n        architectureOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER:\n        billingOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.CATEGORY:\n        categoryOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.SLA:\n        slaOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.USAGE:\n        usageOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.VARIANT:\n        variantOnSelect();\n        break;\n      default:\n        break;\n    }\n  };\n};\n\n/**\n * Clear all available toolbar categories.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useArchitectureOnSelect\n * @param {Function} options.useSelectCategoryOnSelect\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useCategoryOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @param {Function} options.useVariantOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClearAll = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useArchitectureOnSelect: useAliasArchitectureOnSelect = useArchitectureOnSelect,\n  useSelectCategoryOnSelect: useAliasSelectCategoryOnSelect = useSelectCategoryOnSelect,\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useCategoryOnSelect: useAliasCategoryOnSelect = useCategoryOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect,\n  useVariantOnSelect: useAliasVariantOnSelect = useVariantOnSelect\n} = {}) => {\n  const {\n    [RHSM_API_QUERY_SET_TYPES.ARCHITECTURE]: architecture,\n    [RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER]: billingProvider,\n    [RHSM_API_QUERY_SET_TYPES.CATEGORY]: category,\n    [RHSM_API_QUERY_SET_TYPES.SLA]: sla,\n    [RHSM_API_QUERY_SET_TYPES.USAGE]: usage,\n    [RHSM_API_QUERY_SET_TYPES.VARIANT]: variant\n  } = useAliasProductQuery();\n  const architectureOnSelect = useAliasArchitectureOnSelect();\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const categoryOnSelect = useAliasCategoryOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n  const selectCategoryOnSelect = useAliasSelectCategoryOnSelect();\n  const variantOnSelect = useAliasVariantOnSelect();\n\n  return hardFilterReset => {\n    if (typeof architecture === 'string') {\n      architectureOnSelect();\n    }\n\n    if (typeof billingProvider === 'string') {\n      billingOnSelect();\n    }\n\n    if (typeof category === 'string') {\n      categoryOnSelect();\n    }\n\n    if (typeof sla === 'string') {\n      slaOnSelect();\n    }\n\n    if (typeof usage === 'string') {\n      usageOnSelect();\n    }\n\n    if (typeof variant === 'string') {\n      variantOnSelect();\n    }\n\n    if (hardFilterReset) {\n      selectCategoryOnSelect();\n    }\n  };\n};\n\n/**\n * Return lists of item and secondary toolbar fields for display.\n *\n * @param {object} options\n * @param {Array} options.categoryOptions\n * @param {Function} options.useProductToolbarConfig\n * @returns {Array}\n */\nconst useToolbarFields = ({\n  categoryOptions = toolbarFieldOptions,\n  useProductToolbarConfig: useAliasProductToolbarConfig = useProductToolbarConfig\n} = {}) => {\n  const { filters = [] } = useAliasProductToolbarConfig();\n\n  return useMemo(() => {\n    const setFilter = ({ id, content, ...filterProps }) => {\n      const option = categoryOptions.find(({ value: categoryOptionValue }) => id === categoryOptionValue);\n      const { component: OptionComponent } = option || {};\n\n      return (\n        (OptionComponent && (\n          <ToolbarItem key={`option-${id}`}>\n            <OptionComponent isFilter={false} {...filterProps} />\n          </ToolbarItem>\n        )) || (\n          <ToolbarItem key={id || helpers.generateId()}>\n            {typeof content === 'function' ? content() : content}\n          </ToolbarItem>\n        ) ||\n        null\n      );\n    };\n\n    return {\n      itemFields: filters.filter(({ isItem }) => isItem === true).map(setFilter),\n      secondaryFields: filters.filter(({ isSecondary }) => isSecondary === true).map(setFilter)\n    };\n  }, [categoryOptions, filters]);\n};\n\nconst context = {\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFields\n};\n\nexport { context as default, context, useToolbarFieldClear, useToolbarFieldClearAll, useToolbarFields };\n"],"names":["useToolbarFieldClear","_ref","arguments","length","undefined","_ref$useArchitectureO","useArchitectureOnSelect","useAliasArchitectureOnSelect","_ref$useBillingProvid","useBillingProviderOnSelect","useAliasBillingProviderOnSelect","_ref$useCategoryOnSel","useCategoryOnSelect","useAliasCategoryOnSelect","_ref$useSlaOnSelect","useSlaOnSelect","useAliasSlaOnSelect","_ref$useUsageOnSelect","useUsageOnSelect","useAliasUsageOnSelect","_ref$useVariantOnSele","useVariantOnSelect","useAliasVariantOnSelect","architectureOnSelect","billingOnSelect","categoryOnSelect","slaOnSelect","usageOnSelect","variantOnSelect","field","RHSM_API_QUERY_SET_TYPES","useToolbarFieldClearAll","_ref2","_ref2$useProductQuery","useProductQuery","useAliasProductQuery","_ref2$useArchitecture","_ref2$useSelectCatego","useSelectCategoryOnSelect","useAliasSelectCategoryOnSelect","_ref2$useBillingProvi","_ref2$useCategoryOnSe","_ref2$useSlaOnSelect","_ref2$useUsageOnSelec","_ref2$useVariantOnSel","_useAliasProductQuery","architecture","billingProvider","category","sla","usage","variant","selectCategoryOnSelect","hardFilterReset","useToolbarFields","_ref3","_ref3$categoryOptions","categoryOptions","toolbarFieldOptions","_ref3$useProductToolb","useProductToolbarConfig","useAliasProductToolbarConfig","_useAliasProductToolb","_useAliasProductToolb2","filters","useMemo","setFilter","_ref4","id","content","filterProps","_objectWithoutProperties","_excluded","OptionComponent","find","_ref5","categoryOptionValue","value","component","React","ToolbarItem","key","concat","Object","assign","isFilter","helpers","itemFields","filter","_ref7","isItem","map","secondaryFields","_ref8","isSecondary","context"],"sourceRoot":""}