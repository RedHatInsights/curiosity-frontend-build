{"version":3,"file":"js/2227.98e96e431cbe33812a47.js","mappings":"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","sources":["webpack:///./src/components/toolbar/toolbar.js","webpack:///./src/components/toolbar/toolbarContext.js","webpack:///./src/components/toolbar/toolbarFieldGroupVariant.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Toolbar as PfToolbar,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup\n} from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport { useProductToolbarQuery } from '../productView/productViewContext';\nimport { useToolbarFieldClear, useToolbarFieldClearAll, useToolbarFields } from './toolbarContext';\nimport { ToolbarFieldGroupVariant } from './toolbarFieldGroupVariant';\nimport { ToolbarFieldSelectCategory, useSelectCategoryOptions } from './toolbarFieldSelectCategory';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Primary view toolbar.\n *\n * @memberof Components\n * @module Toolbar\n * @property {module} ToolbarContext\n * @property {module} ToolbarFieldBillingProvider\n * @property {module} ToolbarFieldCategory\n * @property {module} ToolbarFieldDisplayName\n * @property {module} ToolbarFieldGranularity\n * @property {module} ToolbarFieldRangedMonthly\n * @property {module} ToolbarFieldSelectCategory\n * @property {module} ToolbarFieldSla\n * @property {module} ToolbarFieldUom\n * @property {module} ToolbarFieldUsage\n * @property {module} ToolbarFieldVariant\n */\n\n/**\n * Application filter toolbar.\n *\n * @fires onClearFilter\n * @fires onClearAll\n * @param {object} props\n * @param {boolean} props.hardFilterReset On clearing all fields allow the category to reset as well.\n * @param {boolean} props.isDisabled\n * @param {boolean} props.isGroupVariantDisabled\n * @param {Function} props.t\n * @param {Function} props.useProductToolbarQuery\n * @param {Function} props.useSelectCategoryOptions\n * @param {Function} props.useToolbarFieldClear\n * @param {Function} props.useToolbarFieldClearAll\n * @param {Function} props.useToolbarFields\n * @returns {React.ReactNode}\n */\nconst Toolbar = ({\n  hardFilterReset,\n  isDisabled,\n  isGroupVariantDisabled,\n  t,\n  useProductToolbarQuery: useAliasProductToolbarQuery,\n  useSelectCategoryOptions: useAliasSelectCategoryOptions,\n  useToolbarFieldClear: useAliasToolbarFieldClear,\n  useToolbarFieldClearAll: useAliasToolbarFieldClearAll,\n  useToolbarFields: useAliasToolbarFields\n}) => {\n  const toolbarFieldQueries = useAliasProductToolbarQuery();\n  const { currentCategory, options } = useAliasSelectCategoryOptions();\n  const clearField = useAliasToolbarFieldClear();\n  const clearAllFields = useAliasToolbarFieldClearAll();\n  const { itemFields, secondaryFields } = useAliasToolbarFields();\n\n  if (isDisabled || (isGroupVariantDisabled && !options?.length && !secondaryFields?.length)) {\n    return null;\n  }\n\n  if (!isGroupVariantDisabled && !options?.length && !secondaryFields?.length) {\n    return <ToolbarFieldGroupVariant isStandalone />;\n  }\n\n  /**\n   * Clear a specific value\n   *\n   * @event onClearFilter\n   * @param {object} params\n   * @param {*} params.value\n   * @returns {void}\n   */\n  const onClearFilter = ({ value }) => clearField(value);\n\n  /**\n   * Clear all active filters.\n   *\n   * @event onClearAll\n   * @returns {void}\n   */\n  const onClearAll = () => clearAllFields(hardFilterReset);\n\n  /**\n   * Set selected options for chip display.\n   *\n   * @param {object} params\n   * @param {*} params.value\n   * @returns {Array}\n   */\n  const setSelectedOptions = ({ value: filterName } = {}) => {\n    const filterValue = toolbarFieldQueries?.[filterName];\n    return (\n      (typeof filterValue === 'string' && [\n        t('curiosity-toolbar.label', { context: [filterName, (filterValue === '' && 'none') || filterValue] })\n      ]) ||\n      []\n    );\n  };\n\n  return (\n    <PfToolbar\n      id=\"curiosity-toolbar\"\n      className=\"curiosity-toolbar pf-m-toggle-group-container ins-c-primary-toolbar\"\n      collapseListedFiltersBreakpoint=\"sm\"\n      clearAllFilters={onClearAll}\n      clearFiltersButtonText={t('curiosity-toolbar.clearFilters')}\n    >\n      {!isGroupVariantDisabled && <ToolbarFieldGroupVariant />}\n      <ToolbarContent>\n        <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"md\">\n          <ToolbarGroup variant=\"filter-group\">\n            {options.length > 1 && (\n              <ToolbarItem>\n                <ToolbarFieldSelectCategory />\n              </ToolbarItem>\n            )}\n            {options.map(({ title, value: filterName, component: OptionComponent, isClearable }) => {\n              const chipProps = { categoryName: title };\n\n              if (isClearable !== false) {\n                chipProps.chips = setSelectedOptions({ value: filterName });\n                chipProps.deleteChip = () => onClearFilter({ value: filterName });\n              }\n\n              return (\n                <ToolbarFilter\n                  key={filterName}\n                  showToolbarItem={currentCategory === filterName || options.length === 1}\n                  {...chipProps}\n                >\n                  <OptionComponent isFilter />\n                </ToolbarFilter>\n              );\n            })}\n          </ToolbarGroup>\n        </ToolbarToggleGroup>\n        <ToolbarGroup key=\"itemFields\">{itemFields}</ToolbarGroup>\n        <ToolbarGroup key=\"secondaryFields\" alignment={{ default: 'alignRight' }}>\n          {secondaryFields}\n        </ToolbarGroup>\n      </ToolbarContent>\n    </PfToolbar>\n  );\n};\n\n/**\n * Prop types\n *\n * @type {{useToolbarFieldClear: Function, t: Function, useSelectCategoryOptions: Function, hardFilterReset: boolean,\n *     useToolbarFields: Function, isGroupVariantDisabled: boolean, useProductToolbarQuery: Function, isDisabled: boolean,\n *     useToolbarFieldClearAll: Function}}\n */\nToolbar.propTypes = {\n  hardFilterReset: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  isGroupVariantDisabled: PropTypes.bool,\n  t: PropTypes.func,\n  useProductToolbarQuery: PropTypes.func,\n  useSelectCategoryOptions: PropTypes.func,\n  useToolbarFieldClear: PropTypes.func,\n  useToolbarFieldClearAll: PropTypes.func,\n  useToolbarFields: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useToolbarFieldClear: Function, t: translate, useSelectCategoryOptions: Function, hardFilterReset: boolean,\n *     useToolbarFields: Function, isGroupVariantDisabled: boolean, useProductToolbarQuery: Function, isDisabled: boolean,\n *     useToolbarFieldClearAll: Function}}\n */\nToolbar.defaultProps = {\n  hardFilterReset: false,\n  isDisabled: helpers.UI_DISABLED_TOOLBAR,\n  isGroupVariantDisabled: helpers.UI_DISABLED_TOOLBAR_GROUP_VARIANT,\n  t: translate,\n  useProductToolbarQuery,\n  useSelectCategoryOptions,\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFields\n};\n\nexport { Toolbar as default, Toolbar };\n","import React, { useMemo } from 'react';\nimport { ToolbarItem } from '@patternfly/react-core';\nimport { useProductQuery, useProductToolbarConfig } from '../productView/productViewContext';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { useOnSelect as useSelectCategoryOnSelect, toolbarFieldOptions } from './toolbarFieldSelectCategory';\nimport { useOnSelect as useBillingProviderOnSelect } from './toolbarFieldBillingProvider';\nimport { useOnSelect as useCategoryOnSelect } from './toolbarFieldCategory';\nimport { useOnSelect as useSlaOnSelect } from './toolbarFieldSla';\nimport { useOnSelect as useUsageOnSelect } from './toolbarFieldUsage';\nimport { useOnSelect as useVariantOnSelect } from './toolbarFieldVariant';\nimport { helpers } from '../../common/helpers';\n\n/**\n * @memberof Toolbar\n * @module ToolbarContext\n */\n\n/**\n * Clear a specific toolbar category using a select component's OnSelect hook.\n *\n * @param {object} options\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useCategoryOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @param {Function} options.useVariantOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClear = ({\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useCategoryOnSelect: useAliasCategoryOnSelect = useCategoryOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect,\n  useVariantOnSelect: useAliasVariantOnSelect = useVariantOnSelect\n} = {}) => {\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const categoryOnSelect = useAliasCategoryOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n  const variantOnSelect = useAliasVariantOnSelect();\n\n  return field => {\n    switch (field) {\n      case RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER:\n        billingOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.CATEGORY:\n        categoryOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.SLA:\n        slaOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.USAGE:\n        usageOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.VARIANT:\n        variantOnSelect();\n        break;\n      default:\n        break;\n    }\n  };\n};\n\n/**\n * Clear all available toolbar categories.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useSelectCategoryOnSelect\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useCategoryOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @param {Function} options.useVariantOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClearAll = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useSelectCategoryOnSelect: useAliasSelectCategoryOnSelect = useSelectCategoryOnSelect,\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useCategoryOnSelect: useAliasCategoryOnSelect = useCategoryOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect,\n  useVariantOnSelect: useAliasVariantOnSelect = useVariantOnSelect\n} = {}) => {\n  const {\n    [RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER]: billingProvider,\n    [RHSM_API_QUERY_SET_TYPES.CATEGORY]: category,\n    [RHSM_API_QUERY_SET_TYPES.SLA]: sla,\n    [RHSM_API_QUERY_SET_TYPES.USAGE]: usage,\n    [RHSM_API_QUERY_SET_TYPES.VARIANT]: variant\n  } = useAliasProductQuery();\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const categoryOnSelect = useAliasCategoryOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n  const selectCategoryOnSelect = useAliasSelectCategoryOnSelect();\n  const variantOnSelect = useAliasVariantOnSelect();\n\n  return hardFilterReset => {\n    if (typeof billingProvider === 'string') {\n      billingOnSelect();\n    }\n\n    if (typeof category === 'string') {\n      categoryOnSelect();\n    }\n\n    if (typeof sla === 'string') {\n      slaOnSelect();\n    }\n\n    if (typeof usage === 'string') {\n      usageOnSelect();\n    }\n\n    if (typeof variant === 'string') {\n      variantOnSelect();\n    }\n\n    if (hardFilterReset) {\n      selectCategoryOnSelect();\n    }\n  };\n};\n\n/**\n * Return lists of item and secondary toolbar fields for display.\n *\n * @param {object} options\n * @param {Array} options.categoryOptions\n * @param {Function} options.useProductToolbarConfig\n * @returns {Array}\n */\nconst useToolbarFields = ({\n  categoryOptions = toolbarFieldOptions,\n  useProductToolbarConfig: useAliasProductToolbarConfig = useProductToolbarConfig\n} = {}) => {\n  const { filters = [] } = useAliasProductToolbarConfig();\n\n  return useMemo(() => {\n    const setFilter = ({ id, content, ...filterProps }) => {\n      const option = categoryOptions.find(({ value: categoryOptionValue }) => id === categoryOptionValue);\n      const { component: OptionComponent } = option || {};\n\n      return (\n        (OptionComponent && (\n          <ToolbarItem key={`option-${id}`}>\n            <OptionComponent isFilter={false} {...filterProps} />\n          </ToolbarItem>\n        )) || (\n          <ToolbarItem key={id || helpers.generateId()}>\n            {typeof content === 'function' ? content() : content}\n          </ToolbarItem>\n        ) ||\n        null\n      );\n    };\n\n    return {\n      itemFields: filters.filter(({ isItem }) => isItem === true).map(setFilter),\n      secondaryFields: filters.filter(({ isSecondary }) => isSecondary === true).map(setFilter)\n    };\n  }, [categoryOptions, filters]);\n};\n\nconst context = {\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFields\n};\n\nexport { context as default, context, useToolbarFieldClear, useToolbarFieldClearAll, useToolbarFields };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Toolbar as PfToolbar, ToolbarContent, ToolbarItem, ToolbarItemVariant } from '@patternfly/react-core';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport { translate } from '../i18n/i18n';\nimport { routerContext } from '../router';\n\n/**\n * A toolbar product configuration select filter requiring a toolbar component parent.\n *\n * @memberof Toolbar\n * @module ToolbarFieldGroupVariant\n */\n\n/**\n * Generate select field options from config. Sorted by title string.\n *\n * @param {object} options\n * @param {Function} options.t\n * @param {Function} options.useRouteDetail\n * @returns {Function}\n */\nconst useToolbarFieldOptions = ({\n  t = translate,\n  useRouteDetail: useAliasRouteDetail = routerContext.useRouteDetail\n} = {}) => {\n  const { availableVariants, firstMatch } = useAliasRouteDetail();\n  const options = [];\n\n  availableVariants?.forEach(variant => {\n    options.push({\n      title: t('curiosity-toolbar.label', { context: ['groupVariant', variant] }),\n      value: variant,\n      selected: variant === firstMatch?.productId\n    });\n  });\n\n  return options.sort(({ title: titleA }, { title: titleB }) => titleA.localeCompare(titleB));\n};\n\n/**\n * On select update.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productGroup } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.app.SET_PRODUCT_VARIANT_QUERY_RESET_ALL,\n        productGroup\n      },\n      {\n        type: reduxTypes.app.SET_PRODUCT_VARIANT,\n        variant: value,\n        productGroup\n      }\n    ]);\n  };\n};\n\n/**\n * Display a product configuration field with generated options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {boolean} props.isStandalone\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProduct\n * @param {Function} props.useSelector\n * @param {Function} props.useToolbarFieldOptions\n * @returns {React.ReactNode}\n */\nconst ToolbarFieldGroupVariant = ({\n  isFilter,\n  isStandalone,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProduct: useAliasProduct,\n  useSelector: useAliasSelector,\n  useToolbarFieldOptions: useAliasToolbarFieldOptions\n}) => {\n  const { productGroup } = useAliasProduct();\n  const updatedValue = useAliasSelector(({ view }) => view?.product?.variant?.[productGroup], null);\n  const onSelect = useAliasOnSelect();\n  const options = useAliasToolbarFieldOptions();\n  const updatedOptions = options.map(option => ({\n    ...option,\n    selected: (updatedValue && option.value === updatedValue) || option?.selected\n  }));\n\n  if (options?.length <= 1) {\n    return null;\n  }\n\n  const element = (\n    <ToolbarContent>\n      <ToolbarItem variant={ToolbarItemVariant.label}>\n        {t('curiosity-toolbar.label', { context: ['groupVariant'] })}{' '}\n      </ToolbarItem>\n      <Select\n        aria-label={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'groupVariant'] })}\n        onSelect={onSelect}\n        options={updatedOptions}\n        selectedOptions={updatedValue}\n        placeholder={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'groupVariant'] })}\n        position={position}\n        data-test=\"toolbarFieldGroupVariant\"\n      />\n    </ToolbarContent>\n  );\n\n  return (\n    (isStandalone && (\n      <PfToolbar\n        id=\"curiosity-toolbar\"\n        className=\"curiosity-toolbar pf-m-toggle-group-container ins-c-primary-toolbar\"\n        collapseListedFiltersBreakpoint=\"sm\"\n      >\n        {element}\n      </PfToolbar>\n    )) ||\n    element\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, useProduct: Function, t: Function, useSelector: Function, isFilter: boolean,\n *     isStandalone: boolean, position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldGroupVariant.propTypes = {\n  isFilter: PropTypes.bool,\n  isStandalone: PropTypes.bool,\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProduct: PropTypes.func,\n  useSelector: PropTypes.func,\n  useToolbarFieldOptions: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, useProduct: Function, t: translate, useSelector: Function, isFilter: boolean,\n *     isStandalone: boolean, position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldGroupVariant.defaultProps = {\n  isFilter: false,\n  isStandalone: false,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProduct,\n  useSelector: storeHooks.reactRedux.useSelector,\n  useToolbarFieldOptions\n};\n\nexport { ToolbarFieldGroupVariant as default, ToolbarFieldGroupVariant, useOnSelect, useToolbarFieldOptions };\n"],"names":["Toolbar","_ref","hardFilterReset","isDisabled","isGroupVariantDisabled","t","useAliasProductToolbarQuery","useProductToolbarQuery","useAliasSelectCategoryOptions","useSelectCategoryOptions","useAliasToolbarFieldClear","useToolbarFieldClear","useAliasToolbarFieldClearAll","useToolbarFieldClearAll","useAliasToolbarFields","useToolbarFields","toolbarFieldQueries","_useAliasSelectCatego","currentCategory","options","clearField","clearAllFields","_useAliasToolbarField","itemFields","secondaryFields","length","React","PfToolbar","id","className","collapseListedFiltersBreakpoint","clearAllFilters","clearFiltersButtonText","ToolbarFieldGroupVariant","ToolbarContent","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarGroup","variant","ToolbarItem","ToolbarFieldSelectCategory","map","_ref4","title","filterName","value","OptionComponent","component","chipProps","categoryName","isClearable","chips","arguments","undefined","filterValue","context","setSelectedOptions","deleteChip","ToolbarFilter","Object","assign","key","showToolbarItem","isFilter","alignment","default","isStandalone","defaultProps","helpers","translate","_ref$useBillingProvid","useBillingProviderOnSelect","useAliasBillingProviderOnSelect","_ref$useCategoryOnSel","useCategoryOnSelect","useAliasCategoryOnSelect","_ref$useSlaOnSelect","useSlaOnSelect","useAliasSlaOnSelect","_ref$useUsageOnSelect","useUsageOnSelect","useAliasUsageOnSelect","_ref$useVariantOnSele","useVariantOnSelect","useAliasVariantOnSelect","billingOnSelect","categoryOnSelect","slaOnSelect","usageOnSelect","variantOnSelect","field","RHSM_API_QUERY_SET_TYPES","_ref2","_ref2$useProductQuery","useProductQuery","useAliasProductQuery","_ref2$useSelectCatego","useSelectCategoryOnSelect","useAliasSelectCategoryOnSelect","_ref2$useBillingProvi","_ref2$useCategoryOnSe","_ref2$useSlaOnSelect","_ref2$useUsageOnSelec","_ref2$useVariantOnSel","_useAliasProductQuery","billingProvider","category","sla","usage","selectCategoryOnSelect","_ref3","_ref3$categoryOptions","categoryOptions","toolbarFieldOptions","_ref3$useProductToolb","useProductToolbarConfig","_useAliasProductToolb2","filters","useMemo","setFilter","content","filterProps","_objectWithoutProperties","_excluded","find","_ref5","categoryOptionValue","concat","filter","_ref7","isItem","_ref8","isSecondary","useToolbarFieldOptions","_ref$t","_ref$useRouteDetail","useRouteDetail","_useAliasRouteDetail","routerContext","availableVariants","firstMatch","forEach","push","selected","productId","sort","titleA","titleB","localeCompare","useOnSelect","_ref4$useDispatch","useDispatch","useAliasDispatch","storeHooks","_ref4$useProduct","useProduct","productGroup","dispatch","_ref5$value","type","reduxTypes","_ref6","position","useAliasOnSelect","useAliasProduct","useAliasSelector","useSelector","useAliasToolbarFieldOptions","updatedValue","_view$product","_view$product$variant","view","product","onSelect","updatedOptions","option","_objectSpread","element","ToolbarItemVariant","Select","selectedOptions","placeholder","SelectPosition"],"sourceRoot":""}