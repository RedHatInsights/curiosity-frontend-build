{"version":3,"file":"js/4024.1670956993990.8536f21b58f9b8681b52.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardChartTooltip.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { getTooltipDate } from './graphCardHelpers';\nimport { translate } from '../i18n/i18n';\nimport { ChartTypeVariant } from '../chart/chart';\nimport { ChartIcon } from '../chart/chartIcon';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * A custom chart tooltip.\n *\n * @param {object} props\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useProduct\n * @returns {Node}\n */\nconst GraphCardChartTooltip = ({\n  datum,\n  t,\n  useProduct: useAliasProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productLabel } = useAliasProduct();\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n\n  let header = null;\n  const data = [];\n  const { itemsByKey = {} } = datum || {};\n\n  Object.keys(itemsByKey)\n    .reverse()\n    .forEach((key, index) => {\n      if (index === 0) {\n        header = getTooltipDate({\n          date: itemsByKey[key]?.data.date,\n          granularity\n        });\n      }\n\n      const tempDataFacet = {\n        color: itemsByKey[key]?.color\n      };\n\n      if (itemsByKey[key]?.chartType === ChartTypeVariant.threshold) {\n        let thresholdStringValue = itemsByKey[key]?.data.y ?? t('curiosity-graph.label', { context: 'noData' });\n\n        // ToDo: Remove hasInfinite check once deprecated graphCard components are removed\n        if (itemsByKey[key]?.data.hasInfinite || itemsByKey[key]?.data.hasInfiniteQuantity) {\n          thresholdStringValue = t('curiosity-graph.label', { context: ['threshold', 'infinite'] }, [\n            tempDataFacet.color && (\n              <ChartIcon\n                symbol=\"infinity\"\n                fill=\"#ffffff\"\n                title={t('curiosity-graph.label', { context: ['threshold', 'infinite'] })}\n              />\n            )\n          ]);\n        }\n\n        tempDataFacet.label = t('curiosity-graph.label', { context: ['threshold'] });\n        tempDataFacet.value = thresholdStringValue;\n      } else {\n        const dataFactsValue =\n          (itemsByKey[key]?.data.hasData === false && t('curiosity-graph.label', { context: 'noData' })) ||\n          itemsByKey[key]?.data.y ||\n          0;\n\n        tempDataFacet.label = t(`curiosity-graph.label`, { context: key, product: productLabel });\n        tempDataFacet.value = dataFactsValue;\n      }\n\n      tempDataFacet.chartType = itemsByKey[key]?.chartType;\n      data.push(tempDataFacet);\n    });\n\n  return (\n    <div className=\"curiosity-usage-graph__tooltip\">\n      <table summary={t('curiosity-graph.tooltipSummary')}>\n        {(data.length && header && (\n          <thead>\n            <tr>\n              <th colSpan={2}>{header}</th>\n            </tr>\n          </thead>\n        )) ||\n          null}\n        {(data.length && (\n          <tbody>\n            {data.map(dataFacet => {\n              const updatedDataFacetValue =\n                (typeof dataFacet.value === 'number' &&\n                  !Number.isInteger(dataFacet.value) &&\n                  helpers\n                    .numberDisplay(dataFacet.value)\n                    ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: true })\n                    ?.toUpperCase()) ||\n                dataFacet.value;\n\n              return (\n                <tr key={`tooltip-${dataFacet.label}`}>\n                  <th>\n                    {dataFacet.chartType === ChartTypeVariant.threshold && (\n                      <ChartIcon size=\"sm\" symbol=\"dash\" fill={dataFacet.color || 'transparent'} />\n                    )}\n                    {dataFacet.chartType !== ChartTypeVariant.threshold && (\n                      <ChartIcon size=\"sm\" fill={dataFacet.color || 'transparent'} />\n                    )}{' '}\n                    {dataFacet.label}\n                  </th>\n                  <td>{updatedDataFacetValue}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        )) ||\n          null}\n      </table>\n      {(!data.length && t('curiosity-graph.label', { context: ['noData', 'error'] })) || null}\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.propTypes = {\n  datum: PropTypes.shape({\n    itemsByKey: PropTypes.objectOf(\n      PropTypes.shape({\n        chartType: PropTypes.string,\n        color: PropTypes.string,\n        data: PropTypes.shape({\n          date: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),\n          hasData: PropTypes.bool,\n          hasInfinite: PropTypes.bool,\n          hasInfiniteQuantity: PropTypes.bool,\n          y: PropTypes.number\n        })\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.defaultProps = {\n  datum: {},\n  t: translate,\n  useProduct,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChartTooltip as default, GraphCardChartTooltip };\n"],"names":["GraphCardChartTooltip","datum","t","useAliasProduct","useProduct","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","productLabel","granularity","RHSM_API_QUERY_SET_TYPES","header","data","itemsByKey","Object","keys","reverse","forEach","key","index","getTooltipDate","date","tempDataFacet","color","chartType","ChartTypeVariant","thresholdStringValue","y","context","hasInfinite","hasInfiniteQuantity","ChartIcon","symbol","fill","title","label","value","dataFactsValue","hasData","product","push","className","summary","length","colSpan","map","dataFacet","updatedDataFacetValue","Number","isInteger","helpers","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","size","defaultProps","translate"],"sourceRoot":""}