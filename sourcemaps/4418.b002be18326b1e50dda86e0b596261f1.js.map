{"version":3,"file":"js/4418.1675105214403.a17b7a913243da4b9c01.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardChartLegend.js","webpack:///./src/components/graphCard/graphCardContext.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { useMount } from 'react-use';\nimport { useProduct } from '../productView/productViewContext';\nimport { useGraphCardContext } from './graphCardContext';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { ChartIcon } from '../chart/chartIcon';\n\n/**\n * FixMe: PF button disabled borks events on immediate parent nodes, such as tooltip wrappers\n * PF is using \"pointer-events: none\" styling when disabled is activated. This\n * currently affects events on immediate parent nodes.\n */\n/**\n * A custom chart legend.\n *\n * @fires onClick\n * @param {object} props\n * @param {object} props.chart\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useDispatch\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useProduct\n * @param {Function} props.useSelectors\n * @returns {Node}\n */\nconst GraphCardChartLegend = ({\n  chart,\n  datum,\n  t,\n  useDispatch: useAliasDispatch,\n  useGraphCardContext: useAliasGraphCardContext,\n  useSelectors: useAliasSelectors,\n  useProduct: useAliasProduct\n}) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const { productLabel, viewId } = useAliasProduct();\n  const { isDisabledLegendClick } = settings;\n\n  const dispatch = useAliasDispatch();\n  const [invertedLegendItem, ...legendItems] = useAliasSelectors([\n    ({ graph }) => graph.legend?.[`${viewId}-inverted`],\n    ...datum.dataSets.map(\n      ({ id }) =>\n        ({ graph }) =>\n          graph.legend?.[`${viewId}-${id}`]\n    )\n  ]);\n\n  useMount(() => {\n    datum.dataSets.forEach(({ id, isToolbarFilter }, index) => {\n      if (invertedLegendItem && isToolbarFilter) {\n        if (!new RegExp(invertedLegendItem).test(id)) {\n          chart.hide(id);\n        }\n      } else {\n        const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n\n        if (checkIsToggled) {\n          chart.hide(id);\n        }\n      }\n    });\n  });\n\n  /**\n   * Toggle legend item and chart.\n   *\n   * @event onClick\n   * @param {string} id\n   */\n  const onClick = id => {\n    const updatedToggle = chart.toggle(id);\n\n    dispatch({\n      type: reduxTypes.graph.SET_GRAPH_LEGEND,\n      id: `${viewId}-${id}`,\n      value: updatedToggle\n    });\n  };\n\n  return (\n    <React.Fragment>\n      {datum.dataSets.map(({ id, isThreshold, stroke: color, data = [] }, index) => {\n        const isDisabled =\n          !data.find(({ y, hasData }) => (y >= 0 && hasData === true) || (y >= 0 && isThreshold === true)) || false;\n\n        const labelContent = t([`curiosity-graph.label`, 'curiosity-graph.label_no'], {\n          product: productLabel,\n          context: id\n        });\n\n        const tooltipContent = t(\n          `curiosity-graph.legendTooltip`,\n          {\n            product: productLabel,\n            context: id\n          },\n          [<span style={{ whiteSpace: 'nowrap' }} />]\n        );\n\n        const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n        const buttonActionProps = {};\n\n        if (!isDisabledLegendClick) {\n          buttonActionProps.onClick = () => onClick(id);\n          buttonActionProps.onKeyPress = () => onClick(id);\n        }\n\n        const button = (\n          <Button\n            {...buttonActionProps}\n            className=\"curiosity-usage-graph__legend-item\"\n            tabIndex={0}\n            key={`curiosity-button-${id}`}\n            variant=\"link\"\n            component=\"a\"\n            isDisabled={isDisabledLegendClick ?? isDisabled}\n            icon={\n              ((isDisabled || checkIsToggled) && <ChartIcon symbol=\"eyeSlash\" />) || (\n                <ChartIcon\n                  symbol={(isThreshold && 'dash') || 'square'}\n                  style={{ visibility: (isDisabled && 'hidden') || (checkIsToggled && 'hidden') || 'visible' }}\n                  fill={color}\n                />\n              )\n            }\n          >\n            {labelContent}\n          </Button>\n        );\n\n        if (tooltipContent) {\n          return (\n            <Tooltip\n              key={`curiosity-tooltip-${id}`}\n              content={<p>{tooltipContent}</p>}\n              position={TooltipPosition.top}\n              enableFlip\n              distance={5}\n            >\n              <span className=\"pf-c-button pf-m-link curiosity-usage-graph__legend-item-wrapper\">{button}</span>\n            </Tooltip>\n          );\n        }\n\n        return button;\n      })}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, t: Function, useGraphCardContext: Function, useDispatch: Function,\n *     useSelectors: Function, chart: object}}\n */\nGraphCardChartLegend.propTypes = {\n  chart: PropTypes.shape({\n    hide: PropTypes.func,\n    toggle: PropTypes.func,\n    isToggled: PropTypes.func\n  }),\n  datum: PropTypes.shape({\n    dataSets: PropTypes.arrayOf(\n      PropTypes.shape({\n        data: PropTypes.array,\n        id: PropTypes.string.isRequired,\n        isThreshold: PropTypes.bool,\n        stroke: PropTypes.string.isRequired\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useDispatch: PropTypes.func,\n  useGraphCardContext: PropTypes.func,\n  useProduct: PropTypes.func,\n  useSelectors: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: {dataSets: *[]}, useProduct: Function, t: Function, useGraphCardContext: Function, useDispatch: Function,\n *     useSelectors: Function, chart: {hide: Function, toggle: Function, isToggled: Function}}}\n */\nGraphCardChartLegend.defaultProps = {\n  chart: {\n    hide: helpers.noop,\n    toggle: helpers.noop,\n    isToggled: helpers.noop\n  },\n  datum: {\n    dataSets: []\n  },\n  t: translate,\n  useDispatch: storeHooks.reactRedux.useDispatch,\n  useGraphCardContext,\n  useProduct,\n  useSelectors: storeHooks.reactRedux.useSelectors\n};\n\nexport { GraphCardChartLegend as default, GraphCardChartLegend };\n","import React, { useContext, useMemo } from 'react';\nimport { useShallowCompareEffect } from 'react-use';\nimport { ToolbarItem } from '@patternfly/react-core';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphConfig, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldSelectCategory';\nimport { helpers } from '../../common/helpers';\nimport { graphCardHelpers } from './graphCardHelpers';\n\n/**\n * Chart context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{ settings: { isStandalone: false, metrics: [], metric: undefined } }, helpers.noop];\n\nconst GraphCardContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated graph card context.\n *\n * @returns {React.Context<{}>}\n */\nconst useGraphCardContext = () => useContext(GraphCardContext);\n\n/**\n * Parse filters settings for context.\n *\n * @param {object} options\n * @param {Function} options.useProduct\n * @param {Function} options.useProductGraphConfig\n * @returns {{standaloneFiltersSettings: { settings: {} }[], groupedFiltersSettings: { settings: {} }}}\n */\nconst useParseFiltersSettings = ({\n  useProduct: useAliasProduct = useProduct,\n  useProductGraphConfig: useAliasProductGraphConfig = useProductGraphConfig\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const { filters = [], settings = {} } = useAliasProductGraphConfig();\n  const { groupedFiltersSettings, standaloneFiltersSettings = [] } = useMemo(\n    () =>\n      graphCardHelpers.generateChartSettings({\n        filters,\n        settings,\n        productId\n      }),\n    [filters, settings, productId]\n  );\n\n  return {\n    groupedFiltersSettings,\n    standaloneFiltersSettings\n  };\n};\n\n/**\n * Transform multiple metrics from store for chart/graph consumption.\n *\n * @param {object} options\n * @param {Function} options.useGraphCardContext\n * @param {Function} options.useSelectorsResponse\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: *[], errorId: {},\n *     id: {}, list: *[]}, cancelled: boolean, dataSets: unknown[], message: null, error: boolean}}\n */\nconst useMetricsSelector = ({\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  const {\n    error,\n    fulfilled,\n    pending,\n    data = [],\n    ...response\n  } = useAliasSelectorsResponse(\n    metrics.map(\n      ({ id: metricId, isCapacity }) =>\n        ({ graph }) =>\n          isCapacity ? graph.capacity?.[metricId] : graph.tally?.[metricId]\n    )\n  );\n\n  /**\n   * Apply graph config settings to metric data.\n   */\n  const dataById = {};\n  const dataByList = data?.map((metricData, index) => {\n    const updatedMetricData = {\n      ...metrics[index],\n      ...metricData\n    };\n    dataById[metrics[index].id] = updatedMetricData;\n    return updatedMetricData;\n  });\n\n  return {\n    ...response,\n    data: dataById,\n    dataSets: dataByList,\n    error,\n    fulfilled,\n    pending\n  };\n};\n\n/**\n * Get graph metrics from Tally or Capacity.\n *\n * @param {object} params\n * @param {Function} params.getGraphMetrics\n * @param {Function} params.useDispatch\n * @param {Function} params.useGraphCardContext\n * @param {Function} params.useMetricsSelector\n * @param {Function} params.useProduct\n * @param {Function} params.useProductGraphTallyQuery\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: *[], errorId: {},\n *     id: {}, list: *[]}, cancelled: boolean, dataSets: *[], message: null, error: boolean}}\n */\nconst useGetMetrics = ({\n  getGraphMetrics = reduxActions.rhsm.getGraphMetrics,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector = useMetricsSelector,\n  useProduct: useAliasProduct = useProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductGraphTallyQuery();\n  const dispatch = useAliasDispatch();\n  const response = useAliasMetricsSelector();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  useShallowCompareEffect(() => {\n    const updatedMetrics = metrics.map(({ metric: metricId, isCapacity, query: metricQuery }) => ({\n      id: productId,\n      metric: metricId,\n      isCapacity,\n      query: metricQuery\n    }));\n    getGraphMetrics(updatedMetrics, query)(dispatch);\n  }, [metrics, productId, query]);\n\n  return response;\n};\n\n/**\n * Return a component list for a configurable graphCard action toolbar.\n * Allow the \"content\" prop to receive graph data for display via callback.\n *\n * @param {object} params\n * @param {Array} params.categoryOptions\n * @param {Function} params.useMetricsSelector\n * @param {Function} params.useGraphCardContext\n * @returns {*[]}\n */\nconst useGraphCardActions = ({\n  categoryOptions = toolbarFieldOptions,\n  useMetricsSelector: useAliasMetricsSelector = useMetricsSelector,\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext\n} = {}) => {\n  const { pending, dataSets } = useAliasMetricsSelector();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { actions } = settings;\n\n  return useMemo(\n    () =>\n      actions?.map(({ id, content, ...actionProps }) => {\n        const option = categoryOptions.find(({ value: categoryOptionValue }) => id === categoryOptionValue);\n        const { component: OptionComponent } = option || {};\n\n        return (\n          (OptionComponent && (\n            <ToolbarItem key={`option-${id}`}>\n              <OptionComponent isFilter={false} {...actionProps} />\n            </ToolbarItem>\n          )) ||\n          (content && !pending && dataSets.length && (\n            <ToolbarItem key={id || helpers.generateId()}>\n              {typeof content === 'function' ? content({ data: dataSets }) : content}\n            </ToolbarItem>\n          )) ||\n          null\n        );\n      }),\n    [actions, categoryOptions, dataSets, pending]\n  );\n};\n\nconst context = {\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardActions,\n  useGraphCardContext,\n  useMetricsSelector,\n  useParseFiltersSettings\n};\n\nexport {\n  context as default,\n  context,\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardActions,\n  useGraphCardContext,\n  useMetricsSelector,\n  useParseFiltersSettings\n};\n"],"names":["GraphCardChartLegend","chart","datum","t","useAliasDispatch","useDispatch","useAliasGraphCardContext","useGraphCardContext","useAliasSelectors","useSelectors","useAliasProduct","useProduct","settings","productLabel","viewId","isDisabledLegendClick","dispatch","graph","legend","dataSets","map","id","invertedLegendItem","legendItems","useMount","forEach","index","isToolbarFilter","RegExp","test","hide","isToggled","onClick","updatedToggle","toggle","type","reduxTypes","value","isThreshold","color","stroke","data","isDisabled","find","y","hasData","labelContent","product","context","tooltipContent","style","whiteSpace","checkIsToggled","buttonActionProps","onKeyPress","button","Button","className","tabIndex","key","variant","component","icon","ChartIcon","symbol","visibility","fill","Tooltip","content","position","TooltipPosition","enableFlip","distance","defaultProps","helpers","translate","storeHooks","DEFAULT_CONTEXT","isStandalone","metrics","metric","undefined","GraphCardContext","React","useContext","useParseFiltersSettings","useProductGraphConfig","useAliasProductGraphConfig","productId","filters","useMemo","graphCardHelpers","groupedFiltersSettings","standaloneFiltersSettings","useMetricsSelector","useSelectorsResponse","useAliasSelectorsResponse","metricId","isCapacity","capacity","tally","error","fulfilled","pending","response","dataById","dataByList","metricData","updatedMetricData","useGetMetrics","getGraphMetrics","reduxActions","useAliasMetricsSelector","useProductGraphTallyQuery","useAliasProductGraphTallyQuery","query","useShallowCompareEffect","updatedMetrics","metricQuery","useGraphCardActions","categoryOptions","toolbarFieldOptions","actions","actionProps","OptionComponent","categoryOptionValue","ToolbarItem","isFilter","length"],"sourceRoot":""}