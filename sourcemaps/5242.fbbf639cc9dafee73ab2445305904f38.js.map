{"version":3,"file":"js/5242.1647865876523.92a07a6d3b6bc8cfc7fa.js","mappings":"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","sources":["webpack:///./src/components/inventoryCard/inventoryCardHelpers.js","webpack:///./src/components/inventoryGuests/inventoryGuests.js","webpack:///./src/components/inventoryGuests/inventoryGuestsContext.js","webpack:///./src/components/productView/productViewContext.js","webpack:///./src/components/tooltip/tooltip.js","webpack:///./node_modules/fast-shallow-equal/index.js","webpack:///./node_modules/react-use/esm/useShallowCompareEffect.js","webpack:///./node_modules/react-use/esm/useCustomCompareEffect.js"],"sourcesContent":["import React from 'react';\nimport { cellWidth as PfCellWidth, SortByDirection, wrappable } from '@patternfly/react-table';\nimport _camelCase from 'lodash/camelCase';\nimport _isPlainObject from 'lodash/isPlainObject';\nimport { Tooltip } from '../tooltip/tooltip';\nimport { translate } from '../i18n/i18n';\nimport {\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_TYPES\n} from '../../types/rhsmApiTypes';\nimport { helpers } from '../../common';\n\n/**\n * ToDo: review setting up a transformed cell cache for already transformed cells.\n * - review using a simple state and key memoized component\n * - review using lru cache in a inventoryCardContext custom hook\n */\n\n/**\n * Apply product inventory config properties consistently.\n *\n * @param {Function|string|number} prop\n * @param {object} options\n * @param {*[]|*} options.params\n * @returns {React.ReactNode}\n */\nconst applyConfigProperty = (prop, { params = [] } = {}) => {\n  let updatedProp = prop;\n\n  if (typeof prop === 'function') {\n    updatedProp = prop(...((Array.isArray(params) && params) || [params]));\n  }\n\n  if (typeof updatedProp === 'string' || typeof updatedProp === 'number' || React.isValidElement(updatedProp)) {\n    return updatedProp;\n  }\n\n  return undefined;\n};\n\n/**\n * Generate header and row cell configuration from filters.\n *\n * @param {Array<{id: string, cell:React.ReactNode|{ title: string }, cellWidth: number,\n *     header:React.ReactNode|{ title: string }, onSort: Function, showEmptyCell: boolean,\n *     sortId: string, sortActive: boolean, sortDirection: string,\n *     transforms: Array}>} filters\n * @param {object} cellData\n * @param {object} session\n * @returns {{bodyCells: { title: React.ReactNode }[], headerCells: { title: React.ReactNode }[]}}\n */\nconst applyHeaderRowCellFilters = (filters = [], cellData = {}, session = {}) => {\n  const headerCells = [];\n  const bodyCells = [];\n\n  filters.forEach(\n    ({ id, cell, cellWidth, header, onSort, showEmptyCell = true, sortId, sortActive, sortDirection, transforms }) => {\n      const headerCellUpdated = { title: translate('curiosity-inventory.header', { context: id }), transforms: [] };\n      const bodyCellUpdated = { title: '' };\n\n      // set filtered base header and body cells, or if filter doesn't exist skip\n      if (cellData[id]) {\n        headerCellUpdated.title = cellData[id]?.title ?? id;\n        bodyCellUpdated.title = cellData[id]?.value ?? '';\n      } else {\n        if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n          console.warn(`Warning: Filter \"${id}\" not found in \"table row\" response data.`, cellData);\n        }\n        if (showEmptyCell === false) {\n          return;\n        }\n      }\n\n      // set header cell title\n      if (header) {\n        const updatedHeaderCellTitle = applyConfigProperty(header, { params: [{ ...cellData }, { ...session }] });\n        if (updatedHeaderCellTitle) {\n          headerCellUpdated.title = updatedHeaderCellTitle;\n        } else if (_isPlainObject(header)) {\n          Object.assign(headerCellUpdated, { ...header });\n        }\n\n        // set header cell tooltip\n        if (header.tooltip && headerCellUpdated.title) {\n          const updatedHeaderCellTooltip = applyConfigProperty(header.tooltip, {\n            params: [{ ...cellData }, { ...session }]\n          });\n          if (updatedHeaderCellTooltip) {\n            headerCellUpdated.title = <Tooltip content={updatedHeaderCellTooltip}>{headerCellUpdated.title}</Tooltip>;\n          }\n\n          delete headerCellUpdated.tooltip;\n        }\n      }\n\n      // set header cell transforms\n      if (Array.isArray(headerCellUpdated.transforms)) {\n        if (Array.isArray(transforms)) {\n          headerCellUpdated.transforms = headerCellUpdated.transforms.concat([...transforms]);\n        }\n\n        if (typeof cellWidth === 'number') {\n          headerCellUpdated.transforms.push(PfCellWidth(cellWidth));\n        }\n      }\n\n      // set header cell onSort\n      if (typeof onSort === 'function') {\n        headerCellUpdated.onSort = obj => onSort({ ...cellData }, { ...obj, id: sortId || id });\n        headerCellUpdated.sortActive = sortActive;\n        headerCellUpdated.sortDirection = sortDirection;\n      }\n\n      // set body cell title\n      if (cell) {\n        const updatedBodyCellTitle = applyConfigProperty(cell, { params: [{ ...cellData }, { ...session }] });\n        if (updatedBodyCellTitle) {\n          bodyCellUpdated.title = updatedBodyCellTitle;\n        } else if (_isPlainObject(cell)) {\n          Object.assign(bodyCellUpdated, { ...cell });\n        }\n\n        // set body cell tooltip\n        if (cell.tooltip && bodyCellUpdated.title) {\n          const updatedBodyCellTooltip = applyConfigProperty(cell.tooltip, {\n            params: [{ ...cellData }, { ...session }]\n          });\n          if (updatedBodyCellTooltip) {\n            bodyCellUpdated.title = <Tooltip content={updatedBodyCellTooltip}>{bodyCellUpdated.title}</Tooltip>;\n          }\n\n          delete bodyCellUpdated.tooltip;\n        }\n      }\n\n      headerCells.push(headerCellUpdated);\n      bodyCells.push(bodyCellUpdated);\n    }\n  );\n\n  return {\n    headerCells,\n    bodyCells\n  };\n};\n\n/**\n * Shallow clone filter, and apply a column sort filter.\n *\n * @param {object} params\n * @param {{onSort: Function, sortActive: boolean, sortDirection: string, isSortDefault: boolean,\n *     sortDefaultInitialDirection: string}} params.filter\n * @param {Function} params.onSort\n * @param {object} params.query\n * @returns {{}}\n */\nconst applySortFilters = ({ filter = {}, onSort, query = {} } = {}) => {\n  const { id, sortId } = filter;\n  const updatedId = sortId || id;\n  const updatedFilter = { ...filter };\n  const hasSort = updatedFilter.onSort || onSort;\n\n  if (!updatedFilter.onSort && onSort) {\n    updatedFilter.onSort = onSort;\n  }\n\n  // set fallback for the active sorted column based on query\n  if (\n    hasSort &&\n    typeof updatedFilter.sortActive !== 'boolean' &&\n    query?.[RHSM_API_QUERY_TYPES.SORT] &&\n    (query?.[RHSM_API_QUERY_TYPES.SORT] === updatedId || _camelCase(query?.[RHSM_API_QUERY_TYPES.SORT]) === updatedId)\n  ) {\n    updatedFilter.sortActive = true;\n  }\n\n  // set sort direction\n  if (hasSort && !updatedFilter.sortDirection && query?.[RHSM_API_QUERY_TYPES.DIRECTION]) {\n    switch (query?.[RHSM_API_QUERY_TYPES.DIRECTION]) {\n      case SORT_DIRECTION_TYPES.DESCENDING:\n        updatedFilter.sortDirection = SortByDirection.desc;\n        break;\n      default:\n        updatedFilter.sortDirection = SortByDirection.asc;\n        break;\n    }\n  }\n\n  if (\n    hasSort &&\n    !updatedFilter.sortActive &&\n    !query?.[RHSM_API_QUERY_TYPES.SORT] &&\n    updatedFilter.isSortDefault === true\n  ) {\n    updatedFilter.sortActive = true;\n\n    if (updatedFilter.sortDefaultInitialDirection) {\n      updatedFilter.sortDirection = updatedFilter.sortDefaultInitialDirection;\n    }\n  }\n\n  return updatedFilter;\n};\n\n/**\n * Shallow clone and apply a consistent PF \"wrappable\" transformation config allowing column content to wrap.\n *\n * @param {object} params\n * @param {object} params.filter\n * @returns {{}}\n */\nconst applyWrappableFilters = ({ filter = {} } = {}) => {\n  const updatedFilter = { ...filter };\n\n  if (Array.isArray(updatedFilter.transforms)) {\n    updatedFilter.transforms.push(wrappable);\n  } else {\n    updatedFilter.transforms = [wrappable];\n  }\n\n  return updatedFilter;\n};\n\n/**\n * Shallow clone and apply, sequence specific, additional properties to filters.\n *\n * @param {object} params\n * @param {Array<{id: string, cell:*, cellWidth: number, header:*, onSort: Function,\n *     showEmptyCell: boolean, sortId: string, sortActive: boolean,\n *     sortDirection: string, transforms: Array, isSortDefault: boolean,\n *     sortDefaultInitialDirection: string}>} params.filters\n * @param {Function} params.onSort\n * @param {object} params.query\n * @returns {*[]}\n */\nconst parseInventoryFilters = ({ filters = [], onSort, query = {} } = {}) =>\n  [...filters].map(filter => {\n    const updatedFilter = { ...filter };\n\n    if (updatedFilter.isSortable) {\n      Object.assign(updatedFilter, applySortFilters({ filter: updatedFilter, onSort, query }));\n    }\n\n    if (updatedFilter.isWrappable) {\n      Object.assign(updatedFilter, applyWrappableFilters({ filter: updatedFilter }));\n    }\n\n    return updatedFilter;\n  });\n\n/**\n * Parse and return formatted/filtered table cells, and apply table filters.\n *\n * @param {object} params\n * @param {Array<{id: string, cell:React.ReactNode|{ title: string }, cellWidth: number,\n *     header:React.ReactNode|{ title: string }, onSort: Function, showEmptyCell: boolean,\n *     sortId: string, sortActive: boolean, sortDirection: string,\n *     transforms: Array}>} params.filters\n * @param {object} params.cellData\n * @param {object} params.session\n * @returns {{columnHeaders: { title: React.ReactNode }[], cells: { title: React.ReactNode }[], data: {}}}\n */\nconst parseRowCellsListData = ({ filters = [], cellData = {}, session = {} } = {}) => {\n  const updatedColumnHeaders = [];\n  const updatedCells = [];\n  const allCells = {};\n\n  // Apply basic translation and value\n  Object.entries(cellData).forEach(([key, value = '']) => {\n    allCells[key] = {\n      title: translate('curiosity-inventory.header', { context: key }),\n      value\n    };\n\n    updatedColumnHeaders.push(allCells[key].title);\n    updatedCells.push(value || '...');\n  });\n\n  // Apply filters to header and cell values\n  if (filters?.length && Object.keys(allCells).length) {\n    updatedColumnHeaders.length = 0;\n    updatedCells.length = 0;\n\n    const { headerCells = [], bodyCells = [] } = applyHeaderRowCellFilters(filters, allCells, session);\n\n    updatedColumnHeaders.push(...headerCells);\n    updatedCells.push(...bodyCells);\n  }\n\n  return {\n    columnHeaders: updatedColumnHeaders,\n    cells: updatedCells,\n    data: { ...allCells }\n  };\n};\n\nconst inventoryCardHelpers = {\n  applyConfigProperty,\n  applyHeaderRowCellFilters,\n  applySortFilters,\n  applyWrappableFilters,\n  parseInventoryFilters,\n  parseRowCellsListData\n};\n\nexport {\n  inventoryCardHelpers as default,\n  inventoryCardHelpers,\n  applyConfigProperty,\n  applyHeaderRowCellFilters,\n  applySortFilters,\n  applyWrappableFilters,\n  parseInventoryFilters,\n  parseRowCellsListData\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { TableVariant } from '@patternfly/react-table';\nimport { useProductInventoryGuestsConfig, useProductInventoryGuestsQuery } from '../productView/productViewContext';\nimport { connect, reduxSelectors } from '../../redux';\nimport { Loader } from '../loader/loader';\nimport { inventoryCardHelpers } from '../inventoryCard/inventoryCardHelpers';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { Table } from '../table/table';\nimport { useGetGuestsInventory, useOnScroll } from './inventoryGuestsContext';\n\n/**\n * A system inventory guests component.\n *\n * @param {object} props\n * @param {number} props.defaultPerPage\n * @param {string} props.id\n * @param {number} props.numberOfGuests\n * @param {object} props.session\n * @param {Function} props.useGetGuestsInventory\n * @param {Function} props.useOnScroll\n * @param {Function} props.useProductInventoryGuestsQuery\n * @param {Function} props.useProductInventoryGuestsConfig\n * @fires onScroll\n * @returns {Node}\n */\nconst InventoryGuests = ({\n  defaultPerPage,\n  id,\n  numberOfGuests,\n  session,\n  useGetGuestsInventory: useAliasGetGuestsInventory,\n  useOnScroll: useAliasOnScroll,\n  useProductInventoryGuestsQuery: useAliasProductInventoryGuestsQuery,\n  useProductInventoryGuestsConfig: useAliasProductInventoryGuestsConfig\n}) => {\n  const [previousData, setPreviousData] = useState([]);\n  const { filters: filterGuestsData } = useAliasProductInventoryGuestsConfig();\n\n  const query = useAliasProductInventoryGuestsQuery({ options: { overrideId: id } });\n  const { [RHSM_API_QUERY_SET_TYPES.OFFSET]: currentPage } = query;\n\n  const { error, pending, data = {} } = useAliasGetGuestsInventory(id);\n  const { data: listData = [] } = data;\n\n  const onScroll = useAliasOnScroll(id, () => {\n    const updatedData = [...previousData, ...(listData || [])];\n    setPreviousData(updatedData);\n  });\n\n  /**\n   * Render a scroll table loader.\n   *\n   * @returns {Node}\n   */\n  const renderLoader = () => {\n    if (currentPage > 0 && pending) {\n      const scrollLoader = (\n        <Loader\n          variant=\"table\"\n          tableProps={{\n            borders: false,\n            colCount: filterGuestsData?.length || (listData?.[0] && Object.keys(listData[0]).length) || 1,\n            colWidth: (filterGuestsData?.length && filterGuestsData.map(({ cellWidth }) => cellWidth)) || [],\n            rowCount: 0,\n            variant: TableVariant.compact\n          }}\n        />\n      );\n\n      return <div className=\"curiosity-table-scroll-loader__custom\">{scrollLoader}</div>;\n    }\n\n    return null;\n  };\n\n  /**\n   * Render a guests table.\n   *\n   * @returns {Node}\n   */\n  const renderTable = () => {\n    let updatedColumnHeaders = [];\n\n    const updatedRows = [...previousData, ...(listData || [])].map(({ ...cellData }) => {\n      const { columnHeaders, cells } = inventoryCardHelpers.parseRowCellsListData({\n        filters: filterGuestsData,\n        cellData,\n        session\n      });\n\n      updatedColumnHeaders = columnHeaders;\n\n      return {\n        cells\n      };\n    });\n\n    // ToDo: Review having the height be a calc value\n    // Include the table header\n    let updatedHeight = (numberOfGuests + 1) * 42;\n    updatedHeight = (updatedHeight < 275 && updatedHeight) || 275;\n\n    return (\n      <div className=\"curiosity-table-scroll\" style={{ height: `${updatedHeight}px` }}>\n        <div\n          className={`curiosity-table-scroll-list${(updatedHeight < 275 && '__no-scroll') || ''}`}\n          onScroll={onScroll}\n        >\n          {renderLoader()}\n          {(updatedRows.length && (\n            <Table\n              borders={false}\n              variant={TableVariant.compact}\n              className=\"curiosity-guests-list\"\n              columnHeaders={updatedColumnHeaders}\n              rows={updatedRows}\n            />\n          )) ||\n            null}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className={`fadein ${(error && 'blur') || ''}`}>\n      {pending && currentPage === 0 && (\n        <Loader\n          variant=\"table\"\n          tableProps={{\n            borders: false,\n            className: 'curiosity-guests-list',\n            colCount: filterGuestsData?.length || (listData?.[0] && Object.keys(listData[0]).length) || 1,\n            colWidth: (filterGuestsData?.length && filterGuestsData.map(({ cellWidth }) => cellWidth)) || [],\n            rowCount: numberOfGuests < defaultPerPage ? numberOfGuests : defaultPerPage,\n            variant: TableVariant.compact\n          }}\n        />\n      )}\n      {((!pending && currentPage === 0) || currentPage > 0) && renderTable()}\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductInventoryGuestsConfig: Function, session: object, useOnScroll: Function, numberOfGuests: number,\n *     id: string, useGetGuestsInventory: Function, useProductInventoryGuestsQuery: Function, defaultPerPage: number}}\n */\nInventoryGuests.propTypes = {\n  defaultPerPage: PropTypes.number,\n  id: PropTypes.string.isRequired,\n  numberOfGuests: PropTypes.number.isRequired,\n  session: PropTypes.object,\n  useGetGuestsInventory: PropTypes.func,\n  useOnScroll: PropTypes.func,\n  useProductInventoryGuestsConfig: PropTypes.func,\n  useProductInventoryGuestsQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductInventoryGuestsConfig: Function, session: object, useOnScroll: Function,\n *     useGetGuestsInventory: Function, useProductInventoryGuestsQuery: Function, defaultPerPage: number}}\n */\nInventoryGuests.defaultProps = {\n  defaultPerPage: 5,\n  session: {},\n  useGetGuestsInventory,\n  useOnScroll,\n  useProductInventoryGuestsConfig,\n  useProductInventoryGuestsQuery\n};\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.user.makeUserSession();\n\nconst ConnectedInventoryGuests = connect(makeMapStateToProps)(InventoryGuests);\n\nexport { ConnectedInventoryGuests as default, ConnectedInventoryGuests, InventoryGuests };\n","import { useUnmount, useShallowCompareEffect } from 'react-use';\nimport { reduxActions, reduxTypes, storeHooks } from '../../redux';\nimport { useProductInventoryGuestsQuery } from '../productView/productViewContext';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\n\n/**\n * Guests inventory selector response.\n *\n * @param {string} id\n * @param {object} options\n * @param {Function} options.useSelectorsResponse\n * @returns {{data: (*|{}), pending: (*|boolean), fulfilled, error}}\n */\nconst useSelectorsGuestsInventory = (\n  id,\n  { useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse } = {}\n) => {\n  const { error, cancelled, fulfilled, pending, data } = useAliasSelectorsResponse(\n    ({ inventory }) => inventory?.hostsGuests?.[id]\n  );\n\n  return {\n    error,\n    fulfilled,\n    pending: pending || cancelled || false,\n    data: (data?.length === 1 && data[0]) || data || {}\n  };\n};\n\n/**\n * Combined Redux RHSM Actions, getHostsInventoryGuests, and inventory selector response.\n *\n * @param {string} id\n * @param {object} options\n * @param {Function} options.getInventory\n * @param {Function} options.useDispatch\n * @param {Function} options.useProductInventoryQuery\n * @param {Function} options.useSelectorsInventory\n * @returns {Function}\n */\nconst useGetGuestsInventory = (\n  id,\n  {\n    getInventory = reduxActions.rhsm.getHostsInventoryGuests,\n    useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n    useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventoryGuestsQuery,\n    useSelectorsInventory: useAliasSelectorsInventory = useSelectorsGuestsInventory\n  } = {}\n) => {\n  const query = useAliasProductInventoryQuery({ options: { overrideId: id } });\n  const dispatch = useAliasDispatch();\n  const response = useAliasSelectorsInventory(id);\n\n  useShallowCompareEffect(() => {\n    getInventory(id, query)(dispatch);\n  }, [dispatch, id, query]);\n\n  return {\n    ...response\n  };\n};\n\n/**\n * Use paging as onScroll event for guests inventory.\n *\n * @param {string} id\n * @param {Function} successCallback\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useSelectorsInventory\n * @param {Function} options.useProductInventoryQuery\n * @returns {Function}\n */\nconst useOnScroll = (\n  id,\n  successCallback,\n  {\n    useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n    useSelectorsInventory: useAliasSelectorsInventory = useSelectorsGuestsInventory,\n    useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventoryGuestsQuery\n  } = {}\n) => {\n  const dispatch = useAliasDispatch();\n  const { pending, data = {} } = useAliasSelectorsInventory(id);\n  const { count: numberOfGuests } = data?.meta || {};\n\n  const query = useAliasProductInventoryQuery({ options: { overrideId: id } });\n  const { [RHSM_API_QUERY_SET_TYPES.LIMIT]: limit, [RHSM_API_QUERY_SET_TYPES.OFFSET]: currentPage } = query;\n\n  /**\n   * Reset paging in scenarios where inventory is filtered, or guests is collapsed.\n   */\n  useUnmount(() => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_GUESTS_LIST,\n        viewId: id\n      }\n    ]);\n  });\n\n  /**\n   * On scroll, dispatch type.\n   *\n   * @event onScroll\n   * @param {object} event\n   * @returns {void}\n   */\n  return event => {\n    const { target } = event;\n    const bottom = target.scrollHeight - target.scrollTop === target.clientHeight;\n\n    if (numberOfGuests > (currentPage + 1) * limit && bottom && !pending) {\n      if (typeof successCallback === 'function') {\n        successCallback(event);\n      }\n\n      dispatch([\n        {\n          type: reduxTypes.query.SET_QUERY_RHSM_GUESTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.OFFSET],\n          viewId: id,\n          [RHSM_API_QUERY_SET_TYPES.OFFSET]: currentPage + 1\n        },\n        {\n          type: reduxTypes.query.SET_QUERY_RHSM_GUESTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.LIMIT],\n          viewId: id,\n          [RHSM_API_QUERY_SET_TYPES.LIMIT]: limit\n        }\n      ]);\n    }\n  };\n};\n\nconst context = {\n  useGetGuestsInventory,\n  useOnScroll,\n  useSelectorsGuestsInventory\n};\n\nexport { context as default, context, useGetGuestsInventory, useOnScroll, useSelectorsGuestsInventory };\n","import React, { useCallback, useContext } from 'react';\nimport { reduxHelpers } from '../../redux/common';\nimport { storeHooks } from '../../redux/hooks';\nimport { RHSM_API_QUERY_TYPES, rhsmApiTypes } from '../../types/rhsmApiTypes';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Route context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{}, helpers.noop];\n\nconst ProductViewContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated product view context.\n *\n * @returns {React.Context<{}>}\n */\nconst useProductViewContext = () => useContext(ProductViewContext);\n\n/**\n * Return a query object from initial product config and Redux store.\n *\n * @param {string} queryType An identifier used to pull from both config and Redux, they should named the same.\n * @param {object} options\n * @param {string} options.overrideId A custom identifier, used for scenarios like the Guest inventory IDs\n * @param {object} options.useProductViewContext\n * @returns {object}\n */\nconst useProductQueryFactory = (\n  queryType,\n  { overrideId, useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}\n) => {\n  const { [queryType]: initialQuery, productId, viewId } = useAliasProductViewContext();\n  const queryOverride = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[overrideId], undefined);\n  const queryProduct = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[productId], undefined);\n  const queryView = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[viewId], undefined);\n\n  return {\n    ...initialQuery,\n    ...queryOverride,\n    ...queryProduct,\n    ...queryView\n  };\n};\n\n/**\n * Return a base product query\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductQuery = ({ queryType = 'query', options } = {}) => useProductQueryFactory(queryType, options);\n\n/**\n * Return the graph query based off of tally and capacity.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductGraphTallyQuery = ({\n  queryType = 'graphTallyQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_REPORT_CAPACITY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return the inventory query for guests. Use fallback/defaults for guests offset, limit.\n *\n * @param {object} options\n * @param {number} options.defaultLimit\n * @param {number} options.defaultOffset\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryGuestsQuery = ({\n  defaultLimit = 100,\n  defaultOffset = 0,\n  queryType = 'inventoryGuestsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_GUESTS_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      [RHSM_API_QUERY_SET_TYPES.LIMIT]: defaultLimit,\n      [RHSM_API_QUERY_SET_TYPES.OFFSET]: defaultOffset,\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for hosts.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryHostsQuery = ({\n  queryType = 'inventoryHostsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for subscriptions.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventorySubscriptionsQuery = ({\n  queryType = 'inventorySubscriptionsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Get a filtered product configuration context.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductViewContext\n * @returns {object}\n */\nconst useProductContext = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductViewContext: useAliasProductViewContext = useProductViewContext\n} = {}) => {\n  const { [RHSM_API_QUERY_TYPES.UOM]: uomFilter } = useAliasProductQuery();\n  const {\n    initialGraphFilters = [],\n    initialInventoryFilters = [],\n    initialSubscriptionsInventoryFilters = [],\n    productContextFilterUom,\n    ...config\n  } = useAliasProductViewContext();\n\n  const applyUomFilter = useCallback(() => {\n    if (productContextFilterUom === true) {\n      const filterFilters = ({ id, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(uomFilter, 'i').test(id);\n      };\n\n      return {\n        ...config,\n        initialGraphFilters: initialGraphFilters.filter(filterFilters),\n        initialInventoryFilters: initialInventoryFilters.filter(filterFilters),\n        initialSubscriptionsInventoryFilters: initialSubscriptionsInventoryFilters.filter(filterFilters)\n      };\n    }\n\n    return {\n      ...config,\n      initialGraphFilters,\n      initialInventoryFilters,\n      initialSubscriptionsInventoryFilters\n    };\n  }, [\n    config,\n    initialGraphFilters,\n    initialInventoryFilters,\n    initialSubscriptionsInventoryFilters,\n    productContextFilterUom,\n    uomFilter\n  ]);\n\n  return applyUomFilter();\n};\n\n/**\n * Return product identifiers.\n *\n * @param {object} options\n * @param {Function} options.useProductViewContext\n * @returns {{productLabel: string, viewId: string, productId: string, productGroup: string}}\n */\nconst useProduct = ({ useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}) => {\n  const { productGroup, productId, productLabel, viewId } = useAliasProductViewContext();\n  return {\n    productGroup,\n    productId,\n    productLabel,\n    viewId\n  };\n};\n\n/**\n * Return graph configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductGraphConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialGraphFilters, initialGraphSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGraphFilters,\n    settings: initialGraphSettings\n  };\n};\n\n/**\n * Return guests inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryGuestsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { inventoryGuestsQuery = {}, initialGuestsFilters, initialGuestsSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGuestsFilters,\n    initialQuery: inventoryGuestsQuery,\n    settings: initialGuestsSettings\n  };\n};\n\n/**\n * Return hosts inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryHostsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialInventoryFilters, initialInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialInventoryFilters,\n    settings: initialInventorySettings\n  };\n};\n\n/**\n * Return subscriptions inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventorySubscriptionsConfig = ({\n  useProductContext: useAliasProductContext = useProductContext\n} = {}) => {\n  const { initialSubscriptionsInventoryFilters, initialSubscriptionsInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialSubscriptionsInventoryFilters,\n    settings: initialSubscriptionsInventorySettings\n  };\n};\n\n/**\n * Return primary toolbar configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductToolbarConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialToolbarFilters, initialToolbarSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialToolbarFilters,\n    settings: initialToolbarSettings\n  };\n};\n\nconst context = {\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useQuery: useProductQuery,\n  useQueryFactory: useProductQueryFactory,\n  useGraphTallyQuery: useProductGraphTallyQuery,\n  useInventoryGuestsQuery: useProductInventoryGuestsQuery,\n  useInventoryHostsQuery: useProductInventoryHostsQuery,\n  useInventorySubscriptionsQuery: useProductInventorySubscriptionsQuery,\n  useProduct,\n  useGraphConfig: useProductGraphConfig,\n  useInventoryGuestsConfig: useProductInventoryGuestsConfig,\n  useInventoryHostsConfig: useProductInventoryHostsConfig,\n  useInventorySubscriptionsConfig: useProductInventorySubscriptionsConfig,\n  useToolbarConfig: useProductToolbarConfig\n};\n\nexport {\n  context as default,\n  context,\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useProductQuery,\n  useProductQueryFactory,\n  useProductGraphTallyQuery,\n  useProductInventoryGuestsQuery,\n  useProductInventoryHostsQuery,\n  useProductInventorySubscriptionsQuery,\n  useProduct,\n  useProductGraphConfig,\n  useProductInventoryGuestsConfig,\n  useProductInventoryHostsConfig,\n  useProductInventorySubscriptionsConfig,\n  useProductToolbarConfig\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip as PfTooltip, TooltipProps, TooltipPosition } from '@patternfly/react-core';\n\n/**\n * PF tooltip wrapper component.\n *\n * @param {object} props\n * @param {React.ReactNode} props.children\n * @param {React.ReactNode} props.content\n * @param {boolean} props.isNoWrap\n * @param {TooltipProps} props.props\n * @returns {React.ReactNode}\n */\nconst Tooltip = ({ children, content, isNoWrap, ...props }) => (\n  <PfTooltip\n    className={`curiosity-tooltip${(isNoWrap && '__nowrap') || ''}`}\n    content={(React.isValidElement(content) && content) || <p>{content || ''}</p>}\n    {...props}\n  >\n    {(React.isValidElement(children) && children) || <span className=\"curiosity-tooltip-children\">{children}</span>}\n  </PfTooltip>\n);\n\n/**\n * Prop types.\n *\n * @type {{children: React.ReactNode, content: React.ReactNode}}\n */\nTooltip.propTypes = {\n  children: PropTypes.node.isRequired,\n  content: PropTypes.node,\n  distance: PropTypes.number,\n  enableFlip: PropTypes.bool,\n  entryDelay: PropTypes.number,\n  exitDelay: PropTypes.number,\n  isNoWrap: PropTypes.bool,\n  position: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{content: string}}\n */\nTooltip.defaultProps = {\n  content: '...',\n  distance: 5,\n  enableFlip: false,\n  entryDelay: 100,\n  exitDelay: 0,\n  isNoWrap: false,\n  position: TooltipPosition.top\n};\n\nexport { Tooltip as default, Tooltip };\n","var keyList = Object.keys;\n\nexports.equal = function equal (a, b) {\n  if (a === b) return true;\n  if (!(a instanceof Object) || !(b instanceof Object)) return false;\n\n  var keys = keyList(a);\n  var length = keys.length;\n\n  for (var i = 0; i < length; i++)\n    if (!(keys[i] in b)) return false;\n\n  for (var i = 0; i < length; i++)\n    if (a[keys[i]] !== b[keys[i]]) return false;\n\n  return length === keyList(b).length;\n};\n","import { equal as isShallowEqual } from 'fast-shallow-equal';\nimport useCustomCompareEffect from './useCustomCompareEffect';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar shallowEqualDepsList = function (prevDeps, nextDeps) {\n    return prevDeps.every(function (dep, index) { return isShallowEqual(dep, nextDeps[index]); });\n};\nvar useShallowCompareEffect = function (effect, deps) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useShallowCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useShallowCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n    }\n    useCustomCompareEffect(effect, deps, shallowEqualDepsList);\n};\nexport default useShallowCompareEffect;\n","import { useEffect, useRef } from 'react';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar useCustomCompareEffect = function (effect, deps, depsEqual) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useCustomCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useCustomCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n        if (typeof depsEqual !== 'function') {\n            console.warn('`useCustomCompareEffect` should be used with depsEqual callback for comparing deps list');\n        }\n    }\n    var ref = useRef(undefined);\n    if (!ref.current || !depsEqual(deps, ref.current)) {\n        ref.current = deps;\n    }\n    useEffect(effect, ref.current);\n};\nexport default useCustomCompareEffect;\n"],"names":["applyConfigProperty","prop","params","updatedProp","Array","isArray","React","applyHeaderRowCellFilters","filters","cellData","session","headerCells","bodyCells","forEach","id","cell","cellWidth","header","onSort","showEmptyCell","sortId","sortActive","sortDirection","transforms","headerCellUpdated","title","translate","context","bodyCellUpdated","value","helpers","console","warn","updatedHeaderCellTitle","_isPlainObject","Object","assign","tooltip","updatedHeaderCellTooltip","Tooltip","content","concat","push","PfCellWidth","obj","updatedBodyCellTitle","updatedBodyCellTooltip","applySortFilters","filter","query","updatedId","updatedFilter","hasSort","RHSM_API_QUERY_TYPES","_camelCase","SORT_DIRECTION_TYPES","SortByDirection","isSortDefault","sortDefaultInitialDirection","applyWrappableFilters","wrappable","parseInventoryFilters","map","isSortable","isWrappable","parseRowCellsListData","updatedColumnHeaders","updatedCells","allCells","entries","key","length","keys","columnHeaders","cells","data","inventoryCardHelpers","InventoryGuests","updatedRows","updatedHeight","defaultPerPage","numberOfGuests","useAliasGetGuestsInventory","useGetGuestsInventory","useAliasOnScroll","useOnScroll","useAliasProductInventoryGuestsQuery","useProductInventoryGuestsQuery","useAliasProductInventoryGuestsConfig","useProductInventoryGuestsConfig","useState","previousData","setPreviousData","filterGuestsData","currentPage","options","overrideId","RHSM_API_QUERY_SET_TYPES","error","pending","listData","onScroll","updatedData","className","Loader","variant","tableProps","borders","colCount","colWidth","rowCount","TableVariant","style","height","scrollLoader","renderLoader","Table","rows","defaultProps","makeMapStateToProps","reduxSelectors","ConnectedInventoryGuests","connect","useSelectorsGuestsInventory","useSelectorsResponse","useAliasSelectorsResponse","storeHooks","inventory","hostsGuests","cancelled","fulfilled","getInventory","reduxActions","useDispatch","useAliasDispatch","useProductInventoryQuery","useAliasProductInventoryQuery","useSelectorsInventory","useAliasSelectorsInventory","dispatch","response","useShallowCompareEffect","successCallback","meta","count","limit","useUnmount","type","reduxTypes","viewId","event","target","bottom","scrollHeight","scrollTop","clientHeight","DEFAULT_CONTEXT","ProductViewContext","useProductViewContext","useContext","useProductQueryFactory","queryType","useAliasProductViewContext","initialQuery","productId","queryOverride","view","undefined","queryProduct","queryView","useProductQuery","useProductGraphTallyQuery","schemaCheck","rhsmApiTypes","reduxHelpers","defaultLimit","defaultOffset","useProductInventoryHostsQuery","useProductInventorySubscriptionsQuery","useProductContext","useAliasProductQuery","uomFilter","initialGraphFilters","initialInventoryFilters","initialSubscriptionsInventoryFilters","productContextFilterUom","config","applyUomFilter","useCallback","filterFilters","isOptional","RegExp","test","useProduct","productGroup","productLabel","useProductGraphConfig","useAliasProductContext","initialGraphSettings","settings","inventoryGuestsQuery","initialGuestsFilters","initialGuestsSettings","useProductInventoryHostsConfig","initialInventorySettings","useProductInventorySubscriptionsConfig","initialSubscriptionsInventorySettings","useProductToolbarConfig","initialToolbarFilters","initialToolbarSettings","useQuery","useQueryFactory","useGraphTallyQuery","useInventoryGuestsQuery","useInventoryHostsQuery","useInventorySubscriptionsQuery","useGraphConfig","useInventoryGuestsConfig","useInventoryHostsConfig","useInventorySubscriptionsConfig","useToolbarConfig","children","isNoWrap","props","distance","enableFlip","entryDelay","exitDelay","position","TooltipPosition","keyList","exports","a","b","i","shallowEqualDepsList","prevDeps","nextDeps","every","dep","index","effect","deps","depsEqual","ref","useRef","current","useEffect"],"sourceRoot":""}