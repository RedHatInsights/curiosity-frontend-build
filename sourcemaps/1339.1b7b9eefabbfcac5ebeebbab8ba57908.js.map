{"version":3,"file":"js/1339.705e4b18e0a3e0fdee04.js","mappings":"wPAqBA,MAAMA,EAAYC,IAAkF,IAAjF,SAAEC,EAAQ,SAAEC,EAAQ,UAAEC,EAAWC,kBAAmBC,GAAwBL,EAC7F,MAAOM,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,CAAEC,oBAAgBC,EAAWC,UAAU,IAC1EC,GAAeC,EAAAA,EAAAA,QAAO,MACtBC,GAAoBD,EAAAA,EAAAA,QAAO,OACzBE,OAAQC,EAAiBC,MAAOR,GAAmBJ,EAAuBO,GAwBlF,OAtBAM,EAAAA,EAAAA,YAAU,KACR,IAAKhB,GAAaA,IAAaI,EAASK,SAAW,CACjD,MAAQQ,QAASC,EAAa,CAAC,GAAMR,GAC7BO,QAASE,EAAkB,CAAC,GAAMP,EAE1C,GAAIM,SAAAA,EAAYE,MAAO,CACrB,IAAIC,GAAgBF,aAAe,EAAfA,EAAiBG,eAAgB,EAEjDrB,EAAYa,IACdO,EAAgBpB,GAGlBiB,EAAWE,MAAMnB,UAAY,GAAHsB,OAAMF,EAAa,MAC7ChB,GAAY,KAAM,CAChBE,iBACAE,SAAUT,EACVqB,mBAEJ,CACF,IACC,CAACP,EAAiBP,EAAgBG,EAAcE,EAAmBZ,EAAUC,EAAWG,EAASK,WAGlGe,IAAAA,cAAA,OAAKC,UAAU,sBAAsBC,IAAKhB,GACxCc,IAAAA,cAAA,OAAKC,UAAU,6BAA6BC,IAAKd,GAC9Cb,GAEC,EASVF,EAAU8B,UAAY,CACpB5B,SAAU6B,IAAAA,KAAAA,WACV3B,UAAW2B,IAAAA,OACX5B,SAAU4B,IAAAA,KACV1B,kBAAmB0B,IAAAA,MAQrB/B,EAAUgC,aAAe,CACvB7B,UAAU,EACVC,UAAW,EACXC,kBAAiBA,EAAAA,G","sources":["webpack:///./src/components/minHeight/minHeight.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useResizeObserver } from '../../hooks/useWindow';\n\n/**\n * Normalize component height on page loads and updates.\n *\n * @memberof Components\n * @module MinHeight\n */\n\n/**\n * Set a min-height to prevent page jump component.\n *\n * @param {object} props\n * @param {React.ReactNode} props.children\n * @param {boolean} props.isOnLoad\n * @param {number} props.minHeight\n * @param {Function} props.useResizeObserver\n * @returns {React.ReactNode}\n */\nconst MinHeight = ({ children, isOnLoad, minHeight, useResizeObserver: useAliasResizeObserver }) => {\n  const [tracking, setTracking] = useState({ containerWidth: undefined, isLoaded: false });\n  const containerRef = useRef(null);\n  const innerContainerRef = useRef(null);\n  const { height: containerHeight, width: containerWidth } = useAliasResizeObserver(containerRef);\n\n  useEffect(() => {\n    if (!isOnLoad || (isOnLoad && !tracking.isLoaded)) {\n      const { current: domElement = {} } = containerRef;\n      const { current: innerDomElement = {} } = innerContainerRef;\n\n      if (domElement?.style) {\n        let updatedHeight = innerDomElement?.clientHeight || 0;\n\n        if (minHeight > containerHeight) {\n          updatedHeight = minHeight;\n        }\n\n        domElement.style.minHeight = `${updatedHeight}px`;\n        setTracking(() => ({\n          containerWidth,\n          isLoaded: isOnLoad,\n          updatedHeight\n        }));\n      }\n    }\n  }, [containerHeight, containerWidth, containerRef, innerContainerRef, isOnLoad, minHeight, tracking.isLoaded]);\n\n  return (\n    <div className=\"curiosity-minheight\" ref={containerRef}>\n      <div className=\"curiosity-minheight__inner\" ref={innerContainerRef}>\n        {children}\n      </div>\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{minHeight: number, useResizeObserver: Function, children: React.ReactNode, isOnLoad: boolean}}\n */\nMinHeight.propTypes = {\n  children: PropTypes.node.isRequired,\n  minHeight: PropTypes.number,\n  isOnLoad: PropTypes.bool,\n  useResizeObserver: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{minHeight: number, useResizeObserver: Function, isOnLoad: boolean}}\n */\nMinHeight.defaultProps = {\n  isOnLoad: false,\n  minHeight: 0,\n  useResizeObserver\n};\n\nexport { MinHeight as default, MinHeight };\n"],"names":["MinHeight","_ref","children","isOnLoad","minHeight","useResizeObserver","useAliasResizeObserver","tracking","setTracking","useState","containerWidth","undefined","isLoaded","containerRef","useRef","innerContainerRef","height","containerHeight","width","useEffect","current","domElement","innerDomElement","style","updatedHeight","clientHeight","concat","React","className","ref","propTypes","PropTypes","defaultProps"],"sourceRoot":""}