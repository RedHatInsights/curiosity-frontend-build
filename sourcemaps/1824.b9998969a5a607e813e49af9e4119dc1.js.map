{"version":3,"file":"js/1824.81848a2db562df54177a.js","mappings":"kYAkBMA,EAAoB,WAGf,IAAAC,EAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,CAAC,EAACG,EAAAJ,EAFJK,WAAYC,OAAe,IAAAF,EAAGC,EAAAA,WAAUD,EAAAG,EAAAP,EACxCQ,YAAaC,OAAgB,IAAAF,EAAGG,EAAAA,GAAAA,WAAAA,YAAiCH,EAEzDI,EAAcL,IAAdK,UACR,OAAOF,GAAiB,SAAAG,GAAA,IAAAC,EAAGC,EAAQF,EAARE,SAAQ,OAAOA,SAAwB,QAAhBD,EAARC,EAAUC,sBAAc,IAAAF,OAAhB,EAARA,EAA2BF,EAAU,GAAE,GACnF,EAWMK,EAA0B,WAIrB,IAAAC,EAAAhB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,CAAC,EAACiB,EAAAD,EAHJE,YAAaC,OAAgB,IAAAF,EAAGR,EAAAA,GAAAA,WAAAA,YAAiCQ,EAAAG,EAAAJ,EACjEZ,WAAYC,OAAe,IAAAe,EAAGhB,EAAAA,WAAUgB,EAAAC,EAAAL,EACxClB,kBAAmBwB,OAAsB,IAAAD,EAAGvB,EAAiBuB,EAEvDE,EAAWJ,IACTT,EAAcL,IAAdK,UACFI,EAAiBQ,IAQvB,OAAOE,EAAAA,EAAAA,cACL,SAAAC,GACE,GAAIf,GAAagB,MAAMC,QAAQb,IAAmBA,EAAeb,OAAQ,CACvE,IAAM2B,EAAmBd,EAAee,QAAO,SAAAC,GAAA,IAAGC,EAAED,EAAFC,GAAIC,EAAKF,EAALE,MAAK,OAAOD,IAAON,GAAWO,IAAUP,CAAO,IAErGF,EAAS,CACPU,KAAMC,EAAAA,GAAAA,QAAAA,oBACNC,OAAQzB,EACRI,eAAgBc,GAAoB,IAExC,CACF,GACA,CAACd,EAAgBS,EAAUb,GAE/B,EAWM0B,EAAuB,WAIlB,IAAAC,EAAArC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,CAAC,EAACsC,EAAAD,EAHJnB,YAAaC,OAAgB,IAAAmB,EAAG7B,EAAAA,GAAAA,WAAAA,YAAiC6B,EAAAC,EAAAF,EACjEjC,WAAYC,OAAe,IAAAkC,EAAGnC,EAAAA,WAAUmC,EAAAC,EAAAH,EACxCvC,kBAAmBwB,OAAsB,IAAAkB,EAAG1C,EAAiB0C,EAEvDjB,EAAWJ,IACTT,EAAcL,IAAdK,UACFI,EAAiBQ,IAQvB,OAAOE,EAAAA,EAAAA,cACL,SAAAX,GACE,GAAIH,EAAW,CACb,IAAM+B,EAAmBf,MAAMC,QAAQd,IAAaA,GAAa,CAACA,GAElEU,EAAS,CACPU,KAAMC,EAAAA,GAAAA,QAAAA,oBACNC,OAAQzB,EACRI,eAAgB,GAAF4B,QAAAC,EAAAA,EAAAA,GACR7B,GAAkB,KAAE6B,EAAAA,EAAAA,GACrBF,EACAG,KAAI,SAAAC,GACH,OAAIA,SAAAA,EAAOd,IAAMc,SAAAA,EAAOb,OAASa,SAAAA,EAAOC,SAAWD,SAAAA,EAAOE,QACjDF,EAGY,iBAAVA,GAAuC,iBAAVA,EAC/B,CACLd,GAAIc,EACJb,MAAOa,QAHX,CAQF,IACChB,QAAO,SAAAgB,GAAK,YAAc3C,IAAV2C,CAAmB,OAG5C,MAAWG,EAAAA,EAAAA,UACTC,QAAQC,KACN,gKAGN,GACA,CAACpC,EAAgBS,EAAUb,GAE/B,EAEMyC,EAAU,CACdrD,kBAAAA,EACAiB,wBAAAA,EACAqB,qBAAAA,E","sources":["webpack:///./src/components/bannerMessages/bannerMessagesContext.js"],"sourcesContent":["import { useCallback } from 'react';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct } from '../productView/productViewContext';\nimport { helpers } from '../../common/helpers';\n\n/**\n * @memberof BannerMessages\n * @module BannerMessagesContext\n */\n\n/**\n * Retrieve, set and remove application banner messages from state.\n *\n * @param {object} options\n * @param {Function} options.useProduct\n * @param {Function} options.useSelector\n * @returns {{ bannerMessages: Array, setBannerMessages: Function, removeBannerMessages: Function }}\n */\nconst useBannerMessages = ({\n  useProduct: useAliasProduct = useProduct,\n  useSelector: useAliasSelector = storeHooks.reactRedux.useSelector\n} = {}) => {\n  const { productId } = useAliasProduct();\n  return useAliasSelector(({ messages }) => messages?.bannerMessages?.[productId], []);\n};\n\n/**\n * Provide a callback for removing application banner messages from state.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useBannerMessages\n * @returns {Function}\n */\nconst useRemoveBannerMessages = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useBannerMessages: useAliasBannerMessages = useBannerMessages\n} = {}) => {\n  const dispatch = useAliasDispatch();\n  const { productId } = useAliasProduct();\n  const bannerMessages = useAliasBannerMessages();\n\n  /**\n   * Remove a banner message from state.\n   *\n   * @callback removeBannerMessages\n   * @param {string} idTitle\n   */\n  return useCallback(\n    idTitle => {\n      if (productId && Array.isArray(bannerMessages) && bannerMessages.length) {\n        const filteredMessages = bannerMessages.filter(({ id, title }) => id !== idTitle && title !== idTitle);\n\n        dispatch({\n          type: reduxTypes.message.SET_BANNER_MESSAGES,\n          viewId: productId,\n          bannerMessages: filteredMessages || []\n        });\n      }\n    },\n    [bannerMessages, dispatch, productId]\n  );\n};\n\n/**\n * Provide a callback for setting application banner messages from state.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useBannerMessages\n * @returns {Function}\n */\nconst useSetBannerMessages = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useBannerMessages: useAliasBannerMessages = useBannerMessages\n} = {}) => {\n  const dispatch = useAliasDispatch();\n  const { productId } = useAliasProduct();\n  const bannerMessages = useAliasBannerMessages();\n\n  /**\n   * Set application messages for banner display\n   *\n   * @callback setBannerMessages\n   * @param {Array<{ id: string, message: string, title: string, variant: string }>|{ id: string, message: string, title: string, variant: string }} messages\n   */\n  return useCallback(\n    messages => {\n      if (productId) {\n        const updatedMessages = (Array.isArray(messages) && messages) || [messages];\n\n        dispatch({\n          type: reduxTypes.message.SET_BANNER_MESSAGES,\n          viewId: productId,\n          bannerMessages: [\n            ...(bannerMessages || []),\n            ...updatedMessages\n              .map(value => {\n                if (value?.id || value?.title || value?.message || value?.variant) {\n                  return value;\n                }\n\n                if (typeof value === 'string' || typeof value === 'number') {\n                  return {\n                    id: value,\n                    title: value\n                  };\n                }\n\n                return undefined;\n              })\n              .filter(value => value !== undefined)\n          ]\n        });\n      } else if (helpers.DEV_MODE) {\n        console.warn(\n          'Banner messages currently require the use of \"product id\". Product context is unavailable, try moving your banner message \"set\" lower in the component order.'\n        );\n      }\n    },\n    [bannerMessages, dispatch, productId]\n  );\n};\n\nconst context = {\n  useBannerMessages,\n  useRemoveBannerMessages,\n  useSetBannerMessages\n};\n\nexport { context as default, context, useBannerMessages, useRemoveBannerMessages, useSetBannerMessages };\n"],"names":["useBannerMessages","_ref","arguments","length","undefined","_ref$useProduct","useProduct","useAliasProduct","_ref$useSelector","useSelector","useAliasSelector","storeHooks","productId","_ref2","_messages$bannerMessa","messages","bannerMessages","useRemoveBannerMessages","_ref3","_ref3$useDispatch","useDispatch","useAliasDispatch","_ref3$useProduct","_ref3$useBannerMessag","useAliasBannerMessages","dispatch","useCallback","idTitle","Array","isArray","filteredMessages","filter","_ref4","id","title","type","reduxTypes","viewId","useSetBannerMessages","_ref5","_ref5$useDispatch","_ref5$useProduct","_ref5$useBannerMessag","updatedMessages","concat","_toConsumableArray","map","value","message","variant","helpers","console","warn","context"],"sourceRoot":""}