{"version":3,"file":"js/3280.1674083268622.190b34cc17df847016ef.js","mappings":"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","sources":["webpack:///./src/components/toolbar/toolbarContext.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { ToolbarItem } from '@patternfly/react-core';\nimport { useProductQuery, useProductToolbarConfig } from '../productView/productViewContext';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { useOnSelect as useSelectCategoryOnSelect, toolbarFieldOptions } from './toolbarFieldSelectCategory';\nimport { useOnSelect as useArchitectureOnSelect } from './toolbarFieldArchitecture';\nimport { useOnSelect as useBillingProviderOnSelect } from './toolbarFieldBillingProvider';\nimport { useOnSelect as useCategoryOnSelect } from './toolbarFieldCategory';\nimport { useOnSelect as useSlaOnSelect } from './toolbarFieldSla';\nimport { useOnSelect as useUsageOnSelect } from './toolbarFieldUsage';\nimport { useOnSelect as useVariantOnSelect } from './toolbarFieldVariant';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Clear a specific toolbar category using a select component's OnSelect hook.\n *\n * @param {object} options\n * @param {Function} options.useArchitectureOnSelect\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useCategoryOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @param {Function} options.useVariantOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClear = ({\n  useArchitectureOnSelect: useAliasArchitectureOnSelect = useArchitectureOnSelect,\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useCategoryOnSelect: useAliasCategoryOnSelect = useCategoryOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect,\n  useVariantOnSelect: useAliasVariantOnSelect = useVariantOnSelect\n} = {}) => {\n  const architectureOnSelect = useAliasArchitectureOnSelect();\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const categoryOnSelect = useAliasCategoryOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n  const variantOnSelect = useAliasVariantOnSelect();\n\n  return field => {\n    switch (field) {\n      case RHSM_API_QUERY_SET_TYPES.ARCHITECTURE:\n        architectureOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER:\n        billingOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.CATEGORY:\n        categoryOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.SLA:\n        slaOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.USAGE:\n        usageOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.VARIANT:\n        variantOnSelect();\n        break;\n      default:\n        break;\n    }\n  };\n};\n\n/**\n * Clear all available toolbar categories.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useArchitectureOnSelect\n * @param {Function} options.useSelectCategoryOnSelect\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useCategoryOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @param {Function} options.useVariantOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClearAll = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useArchitectureOnSelect: useAliasArchitectureOnSelect = useArchitectureOnSelect,\n  useSelectCategoryOnSelect: useAliasSelectCategoryOnSelect = useSelectCategoryOnSelect,\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useCategoryOnSelect: useAliasCategoryOnSelect = useCategoryOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect,\n  useVariantOnSelect: useAliasVariantOnSelect = useVariantOnSelect\n} = {}) => {\n  const {\n    [RHSM_API_QUERY_SET_TYPES.ARCHITECTURE]: architecture,\n    [RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER]: billingProvider,\n    [RHSM_API_QUERY_SET_TYPES.CATEGORY]: category,\n    [RHSM_API_QUERY_SET_TYPES.SLA]: sla,\n    [RHSM_API_QUERY_SET_TYPES.USAGE]: usage,\n    [RHSM_API_QUERY_SET_TYPES.VARIANT]: variant\n  } = useAliasProductQuery();\n  const architectureOnSelect = useAliasArchitectureOnSelect();\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const categoryOnSelect = useAliasCategoryOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n  const selectCategoryOnSelect = useAliasSelectCategoryOnSelect();\n  const variantOnSelect = useAliasVariantOnSelect();\n\n  return hardFilterReset => {\n    if (typeof architecture === 'string') {\n      architectureOnSelect();\n    }\n\n    if (typeof billingProvider === 'string') {\n      billingOnSelect();\n    }\n\n    if (typeof category === 'string') {\n      categoryOnSelect();\n    }\n\n    if (typeof sla === 'string') {\n      slaOnSelect();\n    }\n\n    if (typeof usage === 'string') {\n      usageOnSelect();\n    }\n\n    if (typeof variant === 'string') {\n      variantOnSelect();\n    }\n\n    if (hardFilterReset) {\n      selectCategoryOnSelect();\n    }\n  };\n};\n\n/**\n * Return lists of item and secondary toolbar fields for display.\n *\n * @param {object} options\n * @param {Array} options.categoryOptions\n * @param {Function} options.useProductToolbarConfig\n * @returns {Array}\n */\nconst useToolbarFields = ({\n  categoryOptions = toolbarFieldOptions,\n  useProductToolbarConfig: useAliasProductToolbarConfig = useProductToolbarConfig\n} = {}) => {\n  const { filters = [] } = useAliasProductToolbarConfig();\n\n  return useMemo(() => {\n    const setFilter = ({ id, content, ...filterProps }) => {\n      const option = categoryOptions.find(({ value: categoryOptionValue }) => id === categoryOptionValue);\n      const { component: OptionComponent } = option || {};\n\n      return (\n        (OptionComponent && (\n          <ToolbarItem key={`option-${id}`}>\n            <OptionComponent isFilter={false} {...filterProps} />\n          </ToolbarItem>\n        )) || (\n          <ToolbarItem key={id || helpers.generateId()}>\n            {typeof content === 'function' ? content() : content}\n          </ToolbarItem>\n        ) ||\n        null\n      );\n    };\n\n    return {\n      itemFields: filters.filter(({ isItem }) => isItem === true).map(setFilter),\n      secondaryFields: filters.filter(({ isSecondary }) => isSecondary === true).map(setFilter)\n    };\n  }, [categoryOptions, filters]);\n};\n\nconst context = {\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFields\n};\n\nexport { context as default, context, useToolbarFieldClear, useToolbarFieldClearAll, useToolbarFields };\n"],"names":["useToolbarFieldClear","useArchitectureOnSelect","useAliasArchitectureOnSelect","useBillingProviderOnSelect","useAliasBillingProviderOnSelect","useCategoryOnSelect","useAliasCategoryOnSelect","useSlaOnSelect","useAliasSlaOnSelect","useUsageOnSelect","useAliasUsageOnSelect","useVariantOnSelect","useAliasVariantOnSelect","architectureOnSelect","billingOnSelect","categoryOnSelect","slaOnSelect","usageOnSelect","variantOnSelect","field","RHSM_API_QUERY_SET_TYPES","useToolbarFieldClearAll","useProductQuery","useAliasProductQuery","useSelectCategoryOnSelect","useAliasSelectCategoryOnSelect","architecture","billingProvider","category","sla","usage","variant","selectCategoryOnSelect","hardFilterReset","useToolbarFields","categoryOptions","toolbarFieldOptions","useProductToolbarConfig","useAliasProductToolbarConfig","filters","useMemo","setFilter","id","content","filterProps","OptionComponent","find","categoryOptionValue","value","component","ToolbarItem","key","isFilter","helpers","itemFields","filter","isItem","map","secondaryFields","isSecondary","context"],"sourceRoot":""}