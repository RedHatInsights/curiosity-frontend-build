{"version":3,"file":"js/190.1659362902698.0e95043db988a245f211.js","mappings":"+YAuBMA,EAAW,SAAC,GAYZ,MAXJC,EAWI,EAXJA,UACAC,EAUI,EAVJA,SACAC,EASI,EATJA,GACAC,EAQI,EARJA,UACAC,EAOI,EAPJA,WACAC,EAMI,EANJA,WACAC,EAKI,EALJA,MACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,MACGC,GACC,YACJ,EAA0BC,IAAAA,WAA1B,eAAOC,EAAP,KAAcC,EAAd,KACMC,EAAc,UAAGF,QAAAA,EAAST,SAAZ,SACdY,EAAcR,GAAQS,EAAAA,GAAAA,aACtBC,EAAYf,GAAMa,EAsBxB,OACE,kBAAC,WAAD,eACE,aAAYf,GAAaC,GAAYK,EACrCY,QAASJ,EACTZ,GAAIe,EACJd,UAAWW,EACXV,WAAYA,IAAc,EAC1BE,MAAOL,GAAYK,EACnBC,KAAMQ,EACNP,SAtBqB,SAACU,EAASC,GACjC,IAAMC,GAAY,mBACbC,EAAAA,EAAAA,iBAAgBF,IADN,IAEbjB,GAAIe,EACJV,KAAMQ,EACNN,MAAAA,EACAS,QAAAA,IAGFL,EAASK,GACTV,EAASY,EACV,EAYGX,MAAOA,EACPa,SAAUjB,IAAc,GACpBK,GAGT,EA2BDX,EAASwB,aAAe,CACtBvB,UAAW,KACXC,SAAU,KACVC,GAAI,KACJC,WAAW,EACXC,YAAY,EACZC,YAAY,EACZC,MAAO,GACPC,KAAM,KACNC,SAAUQ,EAAAA,GAAAA,KACVP,WAAOe,E,mOCxGHH,EAAkB,SAACF,GAAgC,IAAzBM,EAAyB,wDACvD,aAA2FN,GAAnFD,EAAR,EAAQA,QAAR,IAAiBQ,cAAAA,OAAjB,MAAiC,CAAC,EAAlC,EAAqCC,EAArC,EAAqCA,QAArC,IAA8CC,QAAAA,OAA9C,MAAwDZ,EAAAA,EAAAA,KAAxD,MAAsEa,OAAAA,OAAtE,MAA+E,CAAC,EAAhF,EAKA,OAJIJ,GACFG,IAGK,CACLV,QAAAA,EACAQ,cAAAA,EACAC,QAAAA,EACAzB,GAAIwB,EAAcxB,IAAMwB,EAAcnB,KACtCA,KAAMmB,EAAcnB,KACpBqB,QAAAA,EACAnB,MAAOiB,EAAcjB,MACrBoB,OAAAA,EAEH,EASKC,EAA+B,SAACrB,GAAD,IAAQsB,EAAR,uDAAqB,EAArB,MACjB,iBAAVtB,GAAsBA,EAAMuB,OAASD,GAAgC,iBAAVtB,CADhC,EAG/BwB,EAAc,CAClBZ,gBAAAA,EACAS,6BAAAA,E","sources":["webpack:///./src/components/form/checkbox.js","webpack:///./src/components/form/formHelpers.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox as PfCheckbox } from '@patternfly/react-core/dist/js/components/Checkbox';\nimport { createMockEvent } from './formHelpers';\nimport { helpers } from '../../common';\n\n/**\n * Render a checkbox form element. Provides restructured event data.\n *\n * @fires onCheckboxChange\n * @param {object} props\n * @param {string} props.ariaLabel\n * @param {Node} props.children\n * @param {string} props.id\n * @param {*} props.isChecked\n * @param {boolean} props.isDisabled\n * @param {boolean} props.isReadOnly\n * @param {Node} props.label\n * @param {string} props.name\n * @param {Function} props.onChange\n * @param {*} props.value\n * @returns {Node}\n */\nconst Checkbox = ({\n  ariaLabel,\n  children,\n  id,\n  isChecked,\n  isDisabled,\n  isReadOnly,\n  label,\n  name,\n  onChange,\n  value,\n  ...props\n}) => {\n  const [check, setCheck] = React.useState();\n  const updatedChecked = check ?? isChecked ?? false;\n  const updatedName = name || helpers.generateId();\n  const updatedId = id || updatedName;\n\n  /**\n   * onChange event, provide restructured event.\n   *\n   * @event onCheckboxChange\n   * @param {boolean} checked\n   * @param {object} event\n   */\n  const onCheckboxChange = (checked, event) => {\n    const mockEvent = {\n      ...createMockEvent(event),\n      id: updatedId,\n      name: updatedName,\n      value,\n      checked\n    };\n\n    setCheck(checked);\n    onChange(mockEvent);\n  };\n\n  return (\n    <PfCheckbox\n      aria-label={ariaLabel || children || label}\n      checked={updatedChecked}\n      id={updatedId}\n      isChecked={updatedChecked}\n      isDisabled={isDisabled || false}\n      label={children || label}\n      name={updatedName}\n      onChange={onCheckboxChange}\n      value={value}\n      readOnly={isReadOnly || false}\n      {...props}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{isReadOnly: boolean, onChange: Function, children: Node, name: string, id: string,\n *     isDisabled: boolean, label: string, isChecked: boolean, value: *, ariaLabel: string}}\n */\nCheckbox.propTypes = {\n  ariaLabel: PropTypes.string,\n  children: PropTypes.node,\n  id: PropTypes.string,\n  isChecked: PropTypes.any,\n  isDisabled: PropTypes.bool,\n  isReadOnly: PropTypes.bool,\n  label: PropTypes.node,\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  value: PropTypes.any\n};\n\n/**\n * Default props.\n *\n * @type {{isReadOnly: boolean, onChange: Function, children: Node, name: string, id: string,\n *     isDisabled: boolean, label: string, isChecked: boolean, value: *, ariaLabel: string}}\n */\nCheckbox.defaultProps = {\n  ariaLabel: null,\n  children: null,\n  id: null,\n  isChecked: false,\n  isDisabled: false,\n  isReadOnly: false,\n  label: '',\n  name: null,\n  onChange: helpers.noop,\n  value: undefined\n};\n\nexport { Checkbox as default, Checkbox };\n","import { helpers } from '../../common/helpers';\n\n/**\n * Create a consistent mock event object.\n *\n * @param {object} event\n * @param {boolean} persistEvent\n * @returns {{keyCode, currentTarget, name, id: *, persist: Function, value, target}}\n */\nconst createMockEvent = (event, persistEvent = false) => {\n  const { checked, currentTarget = {}, keyCode, persist = helpers.noop, target = {} } = { ...event };\n  if (persistEvent) {\n    persist();\n  }\n\n  return {\n    checked,\n    currentTarget,\n    keyCode,\n    id: currentTarget.id || currentTarget.name,\n    name: currentTarget.name,\n    persist,\n    value: currentTarget.value,\n    target\n  };\n};\n\n/**\n * Confirm a string has minimum length.\n *\n * @param {string} value\n * @param {number} characters\n * @returns {boolean}\n */\nconst doesNotHaveMinimumCharacters = (value, characters = 1) =>\n  (typeof value === 'string' && value.length < characters) || typeof value !== 'string';\n\nconst formHelpers = {\n  createMockEvent,\n  doesNotHaveMinimumCharacters\n};\n\nexport { formHelpers as default, formHelpers, createMockEvent, doesNotHaveMinimumCharacters };\n"],"names":["Checkbox","ariaLabel","children","id","isChecked","isDisabled","isReadOnly","label","name","onChange","value","props","React","check","setCheck","updatedChecked","updatedName","helpers","updatedId","checked","event","mockEvent","createMockEvent","readOnly","defaultProps","undefined","persistEvent","currentTarget","keyCode","persist","target","doesNotHaveMinimumCharacters","characters","length","formHelpers"],"sourceRoot":""}