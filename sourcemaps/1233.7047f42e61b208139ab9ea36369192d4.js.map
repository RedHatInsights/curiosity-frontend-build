{"version":3,"file":"js/1233.1677107262061.20a9907ead580860dd35.js","mappings":"wTA8BMA,EAAqB,SAAH,GAAsE,IAd5F,EAAQC,EAASC,EAcWC,EAAyB,EAAzBA,0BAA2BC,EAAC,EAADA,EACjDC,GAAUC,EADqE,EAA3BC,YAC1B,CAAEC,aAAa,IACzCC,GAhBER,GAAR,EAAgCS,EAAAA,cAAAA,wBAAxBT,QAASC,EAAU,EAAVA,WACTD,EAAQU,QAAUV,GAAYC,IAiBtCU,EAAAA,EAAAA,IAAS,WACoD,MAAvDH,EAAkBE,QAAUR,GAC9BE,EAAQQ,KAAKJ,SAAsB,QAAL,EAAjBA,EAAoB,UAAE,WAAL,EAAjB,EAAwBK,YAEzC,IASA,IAAMC,EAAa,SAAAC,GAAI,OAAIX,EAAQQ,KAAKG,EAAK,EAE7C,OACE,kBAAC,EAAAC,WAAU,CAACC,UAAU,0BACpB,kBAAC,EAAAC,WAAU,CAACC,aAAa,WAAWhB,EAAE,uBAAwB,CAAEiB,QAASC,EAAAA,GAAAA,mBACzE,kBAAC,EAAAC,YAAW,CAACC,UAAQ,GACnB,kBAAC,EAAAC,QAAO,CAACC,WAAS,GACfjB,EAAkBkB,KAAI,SAAAC,GAAO,OAC5B,kBAAC,EAAAC,KAAI,CACHC,IAAG,0BAAqBF,EAAQG,UAAS,YAAIT,EAAAA,GAAAA,cAC7CU,aAAW,EACXC,QAAS,kBAAMlB,EAAWa,EAAQd,YAAY,GAE9C,kBAAC,EAAAoB,UAAS,KACR,kBAAC,EAAAC,MAAK,CAACC,aAAa,KAAKC,KAAK,MAC3BjC,EAAE,uBAAwB,CACzBiB,QAASC,EAAAA,GAAAA,gBACTgB,QAASV,EAAQG,cAIvB,kBAAC,EAAAQ,SAAQ,CAACrB,UAAU,4CACjBd,EAAE,6BAA8B,CAC/BiB,QAASC,EAAAA,GAAAA,gBACTgB,QAASV,EAAQG,aAGrB,kBAAC,EAAAS,WAAU,KACT,kBAAC,EAAAC,OAAM,CACLC,QAAQ,OACRC,UAAQ,EACRV,QAAS,kBAAMlB,EAAWa,EAAQd,YAAY,EAC9C8B,KAAM,kBAAC,EAAAC,eAAc,MACrBC,aAAa,SAAO,SAKnB,MAMnB,EAkBA9C,EAAmB+C,aAAe,CAChC5C,0BAA2B,EAC3BC,EAAG4C,EAAAA,UACHzC,WAAY0C,EAAAA,cAAAA,W","sources":["webpack:///./src/components/productView/productViewMissing.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Card, CardBody, CardFooter, CardTitle, Gallery, Title, PageSection } from '@patternfly/react-core';\nimport { ArrowRightIcon } from '@patternfly/react-icons';\nimport { useMount } from 'react-use';\nimport { PageLayout, PageHeader } from '../pageLayout/pageLayout';\nimport { routerContext, routerHelpers } from '../router';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Return a list of available products.\n *\n * @returns {Array}\n */\nconst filterAvailableProducts = () => {\n  const { configs, allConfigs } = routerHelpers.getRouteConfigByPath();\n  return (configs.length && configs) || allConfigs;\n};\n\n/**\n * Render a missing product view.\n *\n * @fires onNavigate\n * @param {object} props\n * @param {number} props.availableProductsRedirect\n * @param {Function} props.t\n * @param {Function} props.useHistory\n * @returns {Node}\n */\nconst ProductViewMissing = ({ availableProductsRedirect, t, useHistory: useAliasHistory }) => {\n  const history = useAliasHistory({ isSetAppNav: true });\n  const availableProducts = filterAvailableProducts();\n\n  useMount(() => {\n    if (availableProducts.length <= availableProductsRedirect) {\n      history.push(availableProducts?.[0]?.productPath);\n    }\n  });\n\n  /**\n   * On click, update history.\n   *\n   * @event onNavigate\n   * @param {string} path\n   * @returns {void}\n   */\n  const onNavigate = path => history.push(path);\n\n  return (\n    <PageLayout className=\"curiosity-missing-view\">\n      <PageHeader productLabel=\"missing\">{t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME })}</PageHeader>\n      <PageSection isFilled>\n        <Gallery hasGutter>\n          {availableProducts.map(product => (\n            <Card\n              key={`missingViewCard-${product.productId}-${helpers.generateId()}`}\n              isHoverable\n              onClick={() => onNavigate(product.productPath)}\n            >\n              <CardTitle>\n                <Title headingLevel=\"h2\" size=\"lg\">\n                  {t('curiosity-view.title', {\n                    appName: helpers.UI_DISPLAY_NAME,\n                    context: product.productId\n                  })}\n                </Title>\n              </CardTitle>\n              <CardBody className=\"curiosity-missing-view__card-description\">\n                {t('curiosity-view.description', {\n                  appName: helpers.UI_DISPLAY_NAME,\n                  context: product.productId\n                })}\n              </CardBody>\n              <CardFooter>\n                <Button\n                  variant=\"link\"\n                  isInline\n                  onClick={() => onNavigate(product.productPath)}\n                  icon={<ArrowRightIcon />}\n                  iconPosition=\"right\"\n                >\n                  Open\n                </Button>\n              </CardFooter>\n            </Card>\n          ))}\n        </Gallery>\n      </PageSection>\n    </PageLayout>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useHistory: Function, availableProductsRedirect: number, t: Function}}\n */\nProductViewMissing.propTypes = {\n  availableProductsRedirect: PropTypes.number,\n  t: PropTypes.func,\n  useHistory: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useHistory: Function, availableProductsRedirect: number, t: translate}}\n */\nProductViewMissing.defaultProps = {\n  availableProductsRedirect: 4,\n  t: translate,\n  useHistory: routerContext.useHistory\n};\n\nexport { ProductViewMissing as default, ProductViewMissing };\n"],"names":["ProductViewMissing","configs","allConfigs","availableProductsRedirect","t","history","useAliasHistory","useHistory","isSetAppNav","availableProducts","routerHelpers","length","useMount","push","productPath","onNavigate","path","PageLayout","className","PageHeader","productLabel","appName","helpers","PageSection","isFilled","Gallery","hasGutter","map","product","Card","key","productId","isHoverable","onClick","CardTitle","Title","headingLevel","size","context","CardBody","CardFooter","Button","variant","isInline","icon","ArrowRightIcon","iconPosition","defaultProps","translate","routerContext"],"sourceRoot":""}