{"version":3,"file":"js/2293.1646848978266.ee6a90727c6ea5862688.js","mappings":"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","sources":["webpack:///./src/components/inventoryGuests/inventoryGuestsContext.js","webpack:///./src/components/productView/productViewContext.js","webpack:///./node_modules/fast-shallow-equal/index.js","webpack:///./node_modules/react-use/esm/useShallowCompareEffect.js","webpack:///./node_modules/react-use/esm/useCustomCompareEffect.js"],"sourcesContent":["import { useUnmount, useShallowCompareEffect } from 'react-use';\nimport { reduxActions, reduxTypes, storeHooks } from '../../redux';\nimport { useProductInventoryGuestsQuery } from '../productView/productViewContext';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\n\n/**\n * Guests inventory selector response.\n *\n * @param {string} id\n * @param {object} options\n * @param {Function} options.useSelectorsResponse\n * @returns {{data: (*|{}), pending: (*|boolean), fulfilled, error}}\n */\nconst useSelectorsGuestsInventory = (\n  id,\n  { useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse } = {}\n) => {\n  const { error, cancelled, fulfilled, pending, data } = useAliasSelectorsResponse(\n    ({ inventory }) => inventory?.hostsGuests?.[id]\n  );\n\n  return {\n    error,\n    fulfilled,\n    pending: pending || cancelled || false,\n    data: (data?.length === 1 && data[0]) || data || {}\n  };\n};\n\n/**\n * Combined Redux RHSM Actions, getHostsInventoryGuests, and inventory selector response.\n *\n * @param {string} id\n * @param {object} options\n * @param {Function} options.getInventory\n * @param {Function} options.useDispatch\n * @param {Function} options.useProductInventoryQuery\n * @param {Function} options.useSelectorsInventory\n * @returns {Function}\n */\nconst useGetGuestsInventory = (\n  id,\n  {\n    getInventory = reduxActions.rhsm.getHostsInventoryGuests,\n    useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n    useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventoryGuestsQuery,\n    useSelectorsInventory: useAliasSelectorsInventory = useSelectorsGuestsInventory\n  } = {}\n) => {\n  const query = useAliasProductInventoryQuery({ options: { overrideId: id } });\n  const dispatch = useAliasDispatch();\n  const response = useAliasSelectorsInventory(id);\n\n  useShallowCompareEffect(() => {\n    getInventory(id, query)(dispatch);\n  }, [dispatch, id, query]);\n\n  return {\n    ...response\n  };\n};\n\n/**\n * Use paging as onScroll event for guests inventory.\n *\n * @param {string} id\n * @param {Function} successCallback\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useSelectorsInventory\n * @param {Function} options.useProductInventoryQuery\n * @returns {Function}\n */\nconst useOnScroll = (\n  id,\n  successCallback,\n  {\n    useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n    useSelectorsInventory: useAliasSelectorsInventory = useSelectorsGuestsInventory,\n    useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventoryGuestsQuery\n  } = {}\n) => {\n  const dispatch = useAliasDispatch();\n  const { pending, data = {} } = useAliasSelectorsInventory(id);\n  const { count: numberOfGuests } = data?.meta || {};\n\n  const query = useAliasProductInventoryQuery({ options: { overrideId: id } });\n  const { [RHSM_API_QUERY_SET_TYPES.LIMIT]: limit, [RHSM_API_QUERY_SET_TYPES.OFFSET]: currentPage } = query;\n\n  /**\n   * Reset paging in scenarios where inventory is filtered, or guests is collapsed.\n   */\n  useUnmount(() => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_GUESTS_LIST,\n        viewId: id\n      }\n    ]);\n  });\n\n  /**\n   * On scroll, dispatch type.\n   *\n   * @event onScroll\n   * @param {object} event\n   * @returns {void}\n   */\n  return event => {\n    const { target } = event;\n    const bottom = target.scrollHeight - target.scrollTop === target.clientHeight;\n\n    if (numberOfGuests > (currentPage + 1) * limit && bottom && !pending) {\n      if (typeof successCallback === 'function') {\n        successCallback(event);\n      }\n\n      dispatch([\n        {\n          type: reduxTypes.query.SET_QUERY_RHSM_GUESTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.OFFSET],\n          viewId: id,\n          [RHSM_API_QUERY_SET_TYPES.OFFSET]: currentPage + 1\n        },\n        {\n          type: reduxTypes.query.SET_QUERY_RHSM_GUESTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.LIMIT],\n          viewId: id,\n          [RHSM_API_QUERY_SET_TYPES.LIMIT]: limit\n        }\n      ]);\n    }\n  };\n};\n\nconst context = {\n  useGetGuestsInventory,\n  useOnScroll,\n  useSelectorsGuestsInventory\n};\n\nexport { context as default, context, useGetGuestsInventory, useOnScroll, useSelectorsGuestsInventory };\n","import React, { useCallback, useContext } from 'react';\nimport { reduxHelpers } from '../../redux/common';\nimport { storeHooks } from '../../redux/hooks';\nimport { RHSM_API_QUERY_TYPES, rhsmApiTypes } from '../../types/rhsmApiTypes';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Route context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{}, helpers.noop];\n\nconst ProductViewContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated product view context.\n *\n * @returns {React.Context<{}>}\n */\nconst useProductViewContext = () => useContext(ProductViewContext);\n\n/**\n * Return a query object from initial product config and Redux store.\n *\n * @param {string} queryType An identifier used to pull from both config and Redux, they should named the same.\n * @param {object} options\n * @param {string} options.overrideId A custom identifier, used for scenarios like the Guest inventory IDs\n * @param {object} options.useProductViewContext\n * @returns {object}\n */\nconst useProductQueryFactory = (\n  queryType,\n  { overrideId, useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}\n) => {\n  const { [queryType]: initialQuery, productId, viewId } = useAliasProductViewContext();\n  const queryOverride = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[overrideId], undefined);\n  const queryProduct = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[productId], undefined);\n  const queryView = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[viewId], undefined);\n\n  return {\n    ...initialQuery,\n    ...queryOverride,\n    ...queryProduct,\n    ...queryView\n  };\n};\n\n/**\n * Return a base product query\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductQuery = ({ queryType = 'query', options } = {}) => useProductQueryFactory(queryType, options);\n\n/**\n * Return the graph query based off of tally and capacity.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductGraphTallyQuery = ({\n  queryType = 'graphTallyQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_REPORT_CAPACITY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return the inventory query for guests. Use fallback/defaults for guests offset, limit.\n *\n * @param {object} options\n * @param {number} options.defaultLimit\n * @param {number} options.defaultOffset\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryGuestsQuery = ({\n  defaultLimit = 100,\n  defaultOffset = 0,\n  queryType = 'inventoryGuestsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_GUESTS_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      [RHSM_API_QUERY_SET_TYPES.LIMIT]: defaultLimit,\n      [RHSM_API_QUERY_SET_TYPES.OFFSET]: defaultOffset,\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for hosts.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryHostsQuery = ({\n  queryType = 'inventoryHostsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for subscriptions.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventorySubscriptionsQuery = ({\n  queryType = 'inventorySubscriptionsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Get a filtered product configuration context.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductViewContext\n * @returns {object}\n */\nconst useProductContext = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductViewContext: useAliasProductViewContext = useProductViewContext\n} = {}) => {\n  const { [RHSM_API_QUERY_TYPES.UOM]: uomFilter } = useAliasProductQuery();\n  const {\n    initialGraphFilters = [],\n    initialInventoryFilters = [],\n    initialSubscriptionsInventoryFilters = [],\n    productContextFilterUom,\n    ...config\n  } = useAliasProductViewContext();\n\n  const applyUomFilter = useCallback(() => {\n    if (productContextFilterUom === true) {\n      const filterFilters = ({ id, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(uomFilter, 'i').test(id);\n      };\n\n      return {\n        ...config,\n        initialGraphFilters: initialGraphFilters.filter(filterFilters),\n        initialInventoryFilters: initialInventoryFilters.filter(filterFilters),\n        initialSubscriptionsInventoryFilters: initialSubscriptionsInventoryFilters.filter(filterFilters)\n      };\n    }\n\n    return {\n      ...config,\n      initialGraphFilters,\n      initialInventoryFilters,\n      initialSubscriptionsInventoryFilters\n    };\n  }, [\n    config,\n    initialGraphFilters,\n    initialInventoryFilters,\n    initialSubscriptionsInventoryFilters,\n    productContextFilterUom,\n    uomFilter\n  ]);\n\n  return applyUomFilter();\n};\n\n/**\n * Return product identifiers.\n *\n * @param {object} options\n * @param {Function} options.useProductViewContext\n * @returns {{productLabel: string, viewId: string, productId: string, productGroup: string}}\n */\nconst useProduct = ({ useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}) => {\n  const { productGroup, productId, productLabel, viewId } = useAliasProductViewContext();\n  return {\n    productGroup,\n    productId,\n    productLabel,\n    viewId\n  };\n};\n\n/**\n * Return graph configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductGraphConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialGraphFilters, initialGraphSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGraphFilters,\n    settings: initialGraphSettings\n  };\n};\n\n/**\n * Return guests inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryGuestsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { inventoryGuestsQuery = {}, initialGuestsFilters, initialGuestsSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGuestsFilters,\n    initialQuery: inventoryGuestsQuery,\n    settings: initialGuestsSettings\n  };\n};\n\n/**\n * Return hosts inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryHostsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialInventoryFilters, initialInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialInventoryFilters,\n    settings: initialInventorySettings\n  };\n};\n\n/**\n * Return subscriptions inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventorySubscriptionsConfig = ({\n  useProductContext: useAliasProductContext = useProductContext\n} = {}) => {\n  const { initialSubscriptionsInventoryFilters, initialSubscriptionsInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialSubscriptionsInventoryFilters,\n    settings: initialSubscriptionsInventorySettings\n  };\n};\n\n/**\n * Return primary toolbar configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductToolbarConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialToolbarFilters, initialToolbarSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialToolbarFilters,\n    settings: initialToolbarSettings\n  };\n};\n\nconst context = {\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useQuery: useProductQuery,\n  useQueryFactory: useProductQueryFactory,\n  useGraphTallyQuery: useProductGraphTallyQuery,\n  useInventoryGuestsQuery: useProductInventoryGuestsQuery,\n  useInventoryHostsQuery: useProductInventoryHostsQuery,\n  useInventorySubscriptionsQuery: useProductInventorySubscriptionsQuery,\n  useProduct,\n  useGraphConfig: useProductGraphConfig,\n  useInventoryGuestsConfig: useProductInventoryGuestsConfig,\n  useInventoryHostsConfig: useProductInventoryHostsConfig,\n  useInventorySubscriptionsConfig: useProductInventorySubscriptionsConfig,\n  useToolbarConfig: useProductToolbarConfig\n};\n\nexport {\n  context as default,\n  context,\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useProductQuery,\n  useProductQueryFactory,\n  useProductGraphTallyQuery,\n  useProductInventoryGuestsQuery,\n  useProductInventoryHostsQuery,\n  useProductInventorySubscriptionsQuery,\n  useProduct,\n  useProductGraphConfig,\n  useProductInventoryGuestsConfig,\n  useProductInventoryHostsConfig,\n  useProductInventorySubscriptionsConfig,\n  useProductToolbarConfig\n};\n","var keyList = Object.keys;\n\nexports.equal = function equal (a, b) {\n  if (a === b) return true;\n  if (!(a instanceof Object) || !(b instanceof Object)) return false;\n\n  var keys = keyList(a);\n  var length = keys.length;\n\n  for (var i = 0; i < length; i++)\n    if (!(keys[i] in b)) return false;\n\n  for (var i = 0; i < length; i++)\n    if (a[keys[i]] !== b[keys[i]]) return false;\n\n  return length === keyList(b).length;\n};\n","import { equal as isShallowEqual } from 'fast-shallow-equal';\nimport useCustomCompareEffect from './useCustomCompareEffect';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar shallowEqualDepsList = function (prevDeps, nextDeps) {\n    return prevDeps.every(function (dep, index) { return isShallowEqual(dep, nextDeps[index]); });\n};\nvar useShallowCompareEffect = function (effect, deps) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useShallowCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useShallowCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n    }\n    useCustomCompareEffect(effect, deps, shallowEqualDepsList);\n};\nexport default useShallowCompareEffect;\n","import { useEffect, useRef } from 'react';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar useCustomCompareEffect = function (effect, deps, depsEqual) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useCustomCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useCustomCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n        if (typeof depsEqual !== 'function') {\n            console.warn('`useCustomCompareEffect` should be used with depsEqual callback for comparing deps list');\n        }\n    }\n    var ref = useRef(undefined);\n    if (!ref.current || !depsEqual(deps, ref.current)) {\n        ref.current = deps;\n    }\n    useEffect(effect, ref.current);\n};\nexport default useCustomCompareEffect;\n"],"names":["useSelectorsGuestsInventory","id","useSelectorsResponse","useAliasSelectorsResponse","storeHooks","inventory","hostsGuests","error","cancelled","fulfilled","pending","data","length","useGetGuestsInventory","getInventory","reduxActions","useDispatch","useAliasDispatch","useProductInventoryQuery","useAliasProductInventoryQuery","useProductInventoryGuestsQuery","useSelectorsInventory","useAliasSelectorsInventory","query","options","overrideId","dispatch","response","useShallowCompareEffect","useOnScroll","successCallback","meta","numberOfGuests","count","limit","RHSM_API_QUERY_SET_TYPES","currentPage","useUnmount","type","reduxTypes","viewId","event","target","bottom","scrollHeight","scrollTop","clientHeight","context","DEFAULT_CONTEXT","helpers","ProductViewContext","React","useProductViewContext","useContext","useProductQueryFactory","queryType","useAliasProductViewContext","initialQuery","productId","queryOverride","view","undefined","queryProduct","queryView","useProductQuery","useProductGraphTallyQuery","schemaCheck","rhsmApiTypes","reduxHelpers","defaultLimit","defaultOffset","useProductInventoryHostsQuery","useProductInventorySubscriptionsQuery","useProductContext","useAliasProductQuery","uomFilter","RHSM_API_QUERY_TYPES","initialGraphFilters","initialInventoryFilters","initialSubscriptionsInventoryFilters","productContextFilterUom","config","applyUomFilter","useCallback","filterFilters","isOptional","RegExp","test","filter","useProduct","productGroup","productLabel","useProductGraphConfig","useAliasProductContext","initialGraphSettings","filters","settings","useProductInventoryGuestsConfig","inventoryGuestsQuery","initialGuestsFilters","initialGuestsSettings","useProductInventoryHostsConfig","initialInventorySettings","useProductInventorySubscriptionsConfig","initialSubscriptionsInventorySettings","useProductToolbarConfig","initialToolbarFilters","initialToolbarSettings","useQuery","useQueryFactory","useGraphTallyQuery","useInventoryGuestsQuery","useInventoryHostsQuery","useInventorySubscriptionsQuery","useGraphConfig","useInventoryGuestsConfig","useInventoryHostsConfig","useInventorySubscriptionsConfig","useToolbarConfig","keyList","Object","keys","exports","a","b","i","shallowEqualDepsList","prevDeps","nextDeps","every","dep","index","effect","deps","depsEqual","ref","useRef","current","useEffect"],"sourceRoot":""}