{"version":3,"file":"js/6876.d00b8a2021e453cf0a95.js","mappings":"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","sources":["webpack:///./src/components/guestsList/guestsList.js","webpack:///./src/components/inventoryList/inventoryList.js","webpack:///./src/components/toolbar/toolbarFieldDisplayName.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TableVariant } from '@patternfly/react-table';\nimport { helpers } from '../../common';\nimport { apiQueries, connect, reduxActions, reduxSelectors } from '../../redux';\nimport { Loader } from '../loader/loader';\nimport { inventoryListHelpers } from '../inventoryList/inventoryListHelpers';\nimport { RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { Table } from '../table/table';\n\n/**\n * ToDo: Consider removing the query prop entirely.\n * The current API doesn't allow setting more than \"offset\" and \"limit\"\n */\n/**\n * ToDo: Review moving the \"onScroll\" layout into a standalone component.\n */\n/**\n * A system inventory guests component.\n *\n * @augments React.Component\n * @fires onUpdateGuestsData\n * @fires onScroll\n */\nclass GuestsList extends React.Component {\n  state = { currentPage: 0, limit: 100, previousData: [] };\n\n  componentDidMount() {\n    this.onUpdateGuestsData();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { currentPage } = this.state;\n\n    if (currentPage !== prevState.currentPage) {\n      this.onUpdateGuestsData();\n    }\n  }\n\n  /**\n   * Call the RHSM APIs, apply filters.\n   *\n   * @event onUpdateGuestsData\n   */\n  onUpdateGuestsData = () => {\n    const { currentPage, limit } = this.state;\n    const { getHostsInventoryGuests, query, id } = this.props;\n\n    if (id) {\n      const updatedQuery = {\n        ...query,\n        [RHSM_API_QUERY_TYPES.LIMIT]: limit,\n        [RHSM_API_QUERY_TYPES.OFFSET]: currentPage * limit || 0\n      };\n\n      const { inventoryGuestsQuery } = apiQueries.parseRhsmQuery(updatedQuery);\n      getHostsInventoryGuests(id, inventoryGuestsQuery);\n    }\n  };\n\n  /**\n   * Update page state.\n   *\n   * @event onScroll\n   * @param {object} event\n   */\n  onScroll = event => {\n    const { target } = event;\n    const { currentPage, limit, previousData } = this.state;\n    const { numberOfGuests, pending, listData } = this.props;\n\n    const bottom = target.scrollHeight - target.scrollTop === target.clientHeight;\n\n    if (numberOfGuests > (currentPage + 1) * limit && bottom && !pending) {\n      const newPage = currentPage + 1;\n      const updatedData = [...previousData, ...(listData || [])];\n\n      this.setState({\n        previousData: updatedData,\n        currentPage: newPage\n      });\n    }\n  };\n\n  renderLoader() {\n    const { currentPage } = this.state;\n    const { filterGuestsData, listData, pending } = this.props;\n\n    if (currentPage > 0 && pending) {\n      const scrollLoader = (\n        <Loader\n          variant=\"table\"\n          tableProps={{\n            borders: false,\n            colCount: filterGuestsData?.length || (listData?.[0] && Object.keys(listData[0]).length) || 1,\n            colWidth: (filterGuestsData?.length && filterGuestsData.map(({ cellWidth }) => cellWidth)) || [],\n            rowCount: 0,\n            variant: TableVariant.compact\n          }}\n        />\n      );\n\n      return <div className=\"curiosity-table-scroll-loader__custom\">{scrollLoader}</div>;\n    }\n\n    return null;\n  }\n\n  /**\n   * ToDo: Consider moving the \"meaning of life\" into the default props on iteration.\n   * For everyone else... move the 42 into default props, possibly the 275.\n   */\n  /**\n   * Render a guests table.\n   *\n   * @returns {Node}\n   */\n  renderTable() {\n    const { previousData } = this.state;\n    const { filterGuestsData, listData, numberOfGuests, session } = this.props;\n    let updatedColumnHeaders = [];\n\n    const updatedRows = [...previousData, ...(listData || [])].map(({ ...cellData }) => {\n      const { columnHeaders, cells } = inventoryListHelpers.parseRowCellsListData({\n        filters: filterGuestsData,\n        cellData,\n        session\n      });\n\n      updatedColumnHeaders = columnHeaders;\n\n      return {\n        cells\n      };\n    });\n\n    // Include the table header\n    let updatedHeight = (numberOfGuests + 1) * 42;\n    updatedHeight = (updatedHeight < 275 && updatedHeight) || 275;\n\n    return (\n      <div className=\"curiosity-table-scroll\" style={{ height: `${updatedHeight}px` }}>\n        <div\n          className={`curiosity-table-scroll-list${(updatedHeight < 275 && '__no-scroll') || ''}`}\n          onScroll={this.onScroll}\n        >\n          {this.renderLoader()}\n          {(updatedRows.length && (\n            <Table\n              borders={false}\n              variant={TableVariant.compact}\n              className=\"curiosity-guests-list\"\n              columnHeaders={updatedColumnHeaders}\n              rows={updatedRows}\n            />\n          )) ||\n            null}\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * Render a guest list table.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { currentPage } = this.state;\n    const { error, filterGuestsData, listData, numberOfGuests, pending, perPageDefault } = this.props;\n\n    return (\n      <div className={`fadein ${(error && 'blur') || ''}`}>\n        {pending && currentPage === 0 && (\n          <Loader\n            variant=\"table\"\n            tableProps={{\n              borders: false,\n              className: 'curiosity-guests-list',\n              colCount: filterGuestsData?.length || (listData?.[0] && Object.keys(listData[0]).length) || 1,\n              colWidth: (filterGuestsData?.length && filterGuestsData.map(({ cellWidth }) => cellWidth)) || [],\n              rowCount: numberOfGuests < perPageDefault ? numberOfGuests : perPageDefault,\n              variant: TableVariant.compact\n            }}\n          />\n        )}\n        {((!pending && currentPage === 0) || currentPage > 0) && this.renderTable()}\n      </div>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{listData: Array, getHostsInventoryGuests: Function, session: object, filterGuestsData: object,\n *     pending: boolean, query: object, numberOfGuests: number, perPageDefault: number, id: string,\n *     error: boolean}}\n */\nGuestsList.propTypes = {\n  error: PropTypes.bool,\n  filterGuestsData: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      header: PropTypes.oneOfType([\n        PropTypes.shape({\n          title: PropTypes.node.isRequired\n        }),\n        PropTypes.func,\n        PropTypes.node\n      ]),\n      cell: PropTypes.oneOfType([\n        PropTypes.shape({\n          title: PropTypes.node.isRequired\n        }),\n        PropTypes.func,\n        PropTypes.node\n      ])\n    }).isRequired\n  ),\n  getHostsInventoryGuests: PropTypes.func,\n  listData: PropTypes.array,\n  id: PropTypes.string.isRequired,\n  numberOfGuests: PropTypes.number.isRequired,\n  pending: PropTypes.bool,\n  perPageDefault: PropTypes.number,\n  query: PropTypes.object,\n  session: PropTypes.object\n};\n\n/**\n * Default props.\n *\n * @type {{listData: Array, getHostsInventoryGuests: Function, session: object, filterGuestsData: Array,\n *     pending: boolean, query: object, perPageDefault: number, error: boolean}}\n */\nGuestsList.defaultProps = {\n  error: false,\n  filterGuestsData: [],\n  getHostsInventoryGuests: helpers.noop,\n  listData: [],\n  pending: false,\n  perPageDefault: 5,\n  query: {},\n  session: {}\n};\n\n/**\n * Apply actions to props.\n *\n * @param {Function} dispatch\n * @returns {object}\n */\nconst mapDispatchToProps = dispatch => ({\n  getHostsInventoryGuests: (id, query) => dispatch(reduxActions.rhsm.getHostsInventoryGuests(id, query))\n});\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.guestsList.makeGuestsList();\n\nconst ConnectedGuestsList = connect(makeMapStateToProps, mapDispatchToProps)(GuestsList);\n\nexport { ConnectedGuestsList as default, ConnectedGuestsList, GuestsList };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _isEqual from 'lodash/isEqual';\nimport { SortByDirection, TableVariant } from '@patternfly/react-table';\nimport { Bullseye, Card, CardActions, CardBody, CardFooter, CardHeader, CardHeaderMain } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport _camelCase from 'lodash/camelCase';\nimport { helpers } from '../../common';\nimport { connect, reduxActions, reduxSelectors, reduxTypes, store } from '../../redux';\nimport Table from '../table/table';\nimport { Loader } from '../loader/loader';\nimport { MinHeight } from '../minHeight/minHeight';\nimport GuestsList from '../guestsList/guestsList';\nimport { inventoryListHelpers } from './inventoryListHelpers';\nimport Pagination from '../pagination/pagination';\nimport { ToolbarFieldDisplayName } from '../toolbar/toolbarFieldDisplayName';\nimport { paginationHelpers } from '../pagination/paginationHelpers';\nimport {\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_SORT_TYPES as SORT_TYPES,\n  RHSM_API_QUERY_TYPES\n} from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A hosts system inventory component.\n *\n * @augments React.Component\n * @fires onColumnSort\n * @fires onPage\n * @fires onUpdateInventoryData\n */\nclass InventoryList extends React.Component {\n  componentDidMount() {\n    this.onUpdateInventoryData();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { productId, query } = this.props;\n\n    if (productId !== prevProps.productId || !_isEqual(query, prevProps.query)) {\n      this.onUpdateInventoryData();\n    }\n  }\n\n  /**\n   * On column sort update state.\n   *\n   * @event onColumnSort\n   * @param {object} data pass-through inventory data.\n   * @param {object} sortParams\n   * @param {string} sortParams.direction\n   * @param {string} sortParams.id column identifier\n   */\n  onColumnSort = (data, { direction, id }) => {\n    const { productId } = this.props;\n    const updatedSortColumn = Object.values(SORT_TYPES).find(value => _camelCase(value) === id);\n    let updatedDirection;\n\n    if (!updatedSortColumn) {\n      if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n        console.warn(`Sorting can only be performed on select fields, confirm field ${id} is allowed.`);\n      }\n      return;\n    }\n\n    switch (direction) {\n      case SortByDirection.desc:\n        updatedDirection = SORT_DIRECTION_TYPES.DESCENDING;\n        break;\n      default:\n        updatedDirection = SORT_DIRECTION_TYPES.ASCENDING;\n        break;\n    }\n\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.DIRECTION],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.DIRECTION]: updatedDirection\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.SORT],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.SORT]: updatedSortColumn\n      }\n    ]);\n  };\n\n  /**\n   * On paging and on perPage events.\n   *\n   * @event onPage\n   * @param {object} params\n   * @param {number} params.offset\n   * @param {number} params.perPage\n   */\n  onPage = ({ offset, perPage }) => {\n    const { productId } = this.props;\n\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.OFFSET],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.OFFSET]: offset\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.LIMIT],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.LIMIT]: perPage\n      }\n    ]);\n  };\n\n  /**\n   * Call the RHSM APIs, apply filters.\n   *\n   * @event onUpdateInventoryData\n   */\n  onUpdateInventoryData = () => {\n    const { getHostsInventory, isDisabled, productId, query } = this.props;\n\n    if (!isDisabled && productId) {\n      getHostsInventory(productId, query);\n    }\n  };\n\n  /**\n   * Render an inventory table.\n   *\n   * @returns {Node}\n   */\n  renderTable() {\n    const { filterGuestsData, filterInventoryData, listData, query, session, settings } = this.props;\n    let updatedColumnHeaders = [];\n\n    const updatedRows = listData.map(({ ...cellData }) => {\n      const { columnHeaders, cells } = inventoryListHelpers.parseRowCellsListData({\n        filters: inventoryListHelpers.parseInventoryFilters({\n          filters: filterInventoryData,\n          onSort: this.onColumnSort,\n          query\n        }),\n        cellData,\n        session\n      });\n\n      updatedColumnHeaders = columnHeaders;\n\n      const guestsId = cellData?.subscriptionManagerId;\n      let hasGuests = cellData?.numberOfGuests > 0 && guestsId;\n\n      // Apply hasGuests callback, return boolean\n      if (typeof settings?.hasGuests === 'function') {\n        hasGuests = settings.hasGuests({ ...cellData }, { ...session });\n      }\n\n      return {\n        cells,\n        expandedContent:\n          (hasGuests && (\n            <GuestsList\n              key={guestsId}\n              filterGuestsData={filterGuestsData}\n              numberOfGuests={cellData?.numberOfGuests}\n              id={guestsId}\n              query={query}\n            />\n          )) ||\n          undefined\n      };\n    });\n\n    return (\n      <Table\n        borders\n        variant={TableVariant.compact}\n        className=\"curiosity-inventory-list\"\n        columnHeaders={updatedColumnHeaders}\n        rows={updatedRows}\n      />\n    );\n  }\n\n  /**\n   * Render an inventory card.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const {\n      error,\n      filterInventoryData,\n      fulfilled,\n      isDisabled,\n      itemCount,\n      listData,\n      pending,\n      perPageDefault,\n      query,\n      t,\n      viewId\n    } = this.props;\n\n    if (isDisabled) {\n      return (\n        <Card className=\"curiosity-inventory-card__disabled\">\n          <CardBody>\n            <Bullseye>{t('curiosity-inventory.tab', { context: 'disabled' })}</Bullseye>\n          </CardBody>\n        </Card>\n      );\n    }\n\n    const updatedPerPage = query[RHSM_API_QUERY_TYPES.LIMIT] || perPageDefault;\n    const updatedOffset = query[RHSM_API_QUERY_TYPES.OFFSET];\n    const isLastPage = paginationHelpers.isLastPage(updatedOffset, updatedPerPage, itemCount);\n\n    // Set an updated key to force refresh minHeight\n    const minHeightContentRefreshKey =\n      (fulfilled === true && itemCount < updatedPerPage && `bodyMinHeight-${updatedPerPage}-resize`) ||\n      (fulfilled === true && isLastPage && `bodyMinHeight-${updatedPerPage}-resize`) ||\n      (error === true && `bodyMinHeight-${updatedPerPage}-resize`) ||\n      `bodyMinHeight-${updatedPerPage}`;\n\n    return (\n      <Card className=\"curiosity-inventory-card\">\n        <MinHeight key=\"headerMinHeight\" updateOnContent>\n          <CardHeader className={(error && 'hidden') || ''} aria-hidden={error || false}>\n            <CardHeaderMain>\n              <ToolbarFieldDisplayName viewId={viewId} />\n            </CardHeaderMain>\n            <CardActions className={(!itemCount && 'transparent') || ''} aria-hidden={!itemCount || false}>\n              <Pagination\n                isCompact\n                isDisabled={pending || error}\n                itemCount={itemCount}\n                offset={updatedOffset}\n                onPage={this.onPage}\n                onPerPage={this.onPage}\n                perPage={updatedPerPage}\n              />\n            </CardActions>\n          </CardHeader>\n        </MinHeight>\n        <MinHeight key={minHeightContentRefreshKey} updateOnContent>\n          <CardBody>\n            <div className={(error && 'blur') || (pending && 'fadein') || ''}>\n              {pending && (\n                <Loader\n                  variant=\"table\"\n                  tableProps={{\n                    className: 'curiosity-inventory-list',\n                    colCount: filterInventoryData?.length || (listData?.[0] && Object.keys(listData[0]).length) || 1,\n                    colWidth:\n                      (filterInventoryData?.length && filterInventoryData.map(({ cellWidth }) => cellWidth)) || [],\n                    rowCount: listData?.length || updatedPerPage,\n                    variant: TableVariant.compact\n                  }}\n                />\n              )}\n              {!pending && this.renderTable()}\n            </div>\n          </CardBody>\n        </MinHeight>\n        <MinHeight key=\"footerMinHeight\" updateOnContent>\n          <CardFooter\n            className={(error && 'hidden') || (!itemCount && 'transparent') || ''}\n            aria-hidden={error || !itemCount || false}\n          >\n            <TableToolbar isFooter>\n              <Pagination\n                dropDirection=\"up\"\n                isDisabled={pending || error}\n                itemCount={itemCount}\n                offset={updatedOffset}\n                onPage={this.onPage}\n                onPerPage={this.onPage}\n                perPage={updatedPerPage}\n              />\n            </TableToolbar>\n          </CardFooter>\n        </MinHeight>\n      </Card>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{settings:object, productId: string, listData: Array, session: object, pending: boolean,\n *     query: object, fulfilled: boolean, getHostsInventory: Function, error: boolean,\n *     itemCount: number, viewId: string, t: Function, filterInventoryData: Array, filterGuestsData: Array,\n *     perPageDefault: number, isDisabled: boolean}}\n */\nInventoryList.propTypes = {\n  error: PropTypes.bool,\n  fulfilled: PropTypes.bool,\n  filterGuestsData: PropTypes.array,\n  filterInventoryData: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      header: PropTypes.oneOfType([\n        PropTypes.shape({\n          title: PropTypes.node.isRequired\n        }),\n        PropTypes.func,\n        PropTypes.node\n      ]),\n      cell: PropTypes.oneOfType([\n        PropTypes.shape({\n          title: PropTypes.node.isRequired\n        }),\n        PropTypes.func,\n        PropTypes.node\n      ])\n    }).isRequired\n  ),\n  getHostsInventory: PropTypes.func,\n  isDisabled: PropTypes.bool,\n  itemCount: PropTypes.number,\n  listData: PropTypes.array,\n  pending: PropTypes.bool,\n  productId: PropTypes.string.isRequired,\n  perPageDefault: PropTypes.number,\n  query: PropTypes.object.isRequired,\n  session: PropTypes.object,\n  settings: PropTypes.shape({\n    hasGuests: PropTypes.func\n  }),\n  t: PropTypes.func,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{settings: object, listData: Array, session: object, pending: boolean, fulfilled: boolean,\n *     getHostsInventory: Function, error: boolean, itemCount: number, viewId: string, t: translate,\n *     filterInventoryData: Array, filterGuestsData: Array, perPageDefault: number, isDisabled: boolean}}\n */\nInventoryList.defaultProps = {\n  error: false,\n  fulfilled: false,\n  filterGuestsData: [],\n  filterInventoryData: [],\n  getHostsInventory: helpers.noop,\n  isDisabled: helpers.UI_DISABLED_TABLE_HOSTS,\n  itemCount: 0,\n  listData: [],\n  pending: false,\n  perPageDefault: 10,\n  session: {},\n  settings: {},\n  t: translate,\n  viewId: 'inventoryList'\n};\n\n/**\n * Apply actions to props.\n *\n * @param {Function} dispatch\n * @returns {object}\n */\nconst mapDispatchToProps = dispatch => ({\n  getHostsInventory: (id, query) => dispatch(reduxActions.rhsm.getHostsInventory(id, query))\n});\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.inventoryList.makeInventoryList();\n\nconst ConnectedInventoryList = connect(makeMapStateToProps, mapDispatchToProps)(InventoryList);\n\nexport { ConnectedInventoryList as default, ConnectedInventoryList, InventoryList };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { InputGroup } from '@patternfly/react-core';\nimport _debounce from 'lodash/debounce';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductInventoryHostsQuery } from '../productView/productViewContext';\nimport { TextInput } from '../form/textInput';\nimport { RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * ToDo: evaluate the debounce milliseconds, currently based off platforms default 800 ms\n */\n/**\n * Display a display name input field for search.\n *\n * @fires onSubmit\n * @fires onClear\n * @fires onKeyUp\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useDispatch\n * @param {Function} props.useProduct\n * @param {Function} props.useProductInventoryHostsQuery\n * @returns {Node}\n */\nconst ToolbarFieldDisplayName = ({\n  t,\n  useDispatch: useAliasDispatch,\n  useProduct: useAliasProduct,\n  useProductInventoryHostsQuery: useAliasProductInventoryHostsQuery\n}) => {\n  const { viewId } = useAliasProduct();\n  const { [RHSM_API_QUERY_TYPES.DISPLAY_NAME]: currentValue } = useAliasProductInventoryHostsQuery();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On submit, dispatch type.\n   *\n   * @event onSubmit\n   * @param {string} submitValue\n   * @returns {void}\n   */\n  const onSubmit = submitValue =>\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.DISPLAY_NAME],\n        viewId,\n        [RHSM_API_QUERY_TYPES.DISPLAY_NAME]: submitValue?.trim() || null\n      }\n    ]);\n\n  /**\n   * On clear, dispatch type.\n   *\n   * @event onClear\n   * @returns {void}\n   */\n  const onClear = () => {\n    if (currentValue === '' || !currentValue) {\n      return;\n    }\n\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.DISPLAY_NAME],\n        viewId,\n        [RHSM_API_QUERY_TYPES.DISPLAY_NAME]: null\n      }\n    ]);\n  };\n\n  /**\n   * Set up submit debounce event to allow for bypass.\n   */\n  const debounced = _debounce(onSubmit, 700);\n\n  /**\n   * On enter submit value, on type submit value, and on esc ignore (clear value at component level).\n   *\n   * @event onKeyUp\n   * @param {object} event\n   */\n  const onKeyUp = event => {\n    switch (event.keyCode) {\n      case 13:\n        onSubmit(event.value);\n        break;\n      case 27:\n        break;\n      default:\n        debounced(event.value);\n        break;\n    }\n  };\n\n  return (\n    <InputGroup>\n      <TextInput\n        aria-label={t('curiosity-toolbar.placeholder_filter', { context: 'displayName' })}\n        className=\"curiosity-input__display-name\"\n        iconVariant=\"search\"\n        maxLength={255}\n        onClear={onClear}\n        onKeyUp={onKeyUp}\n        value={currentValue}\n        placeholder={t('curiosity-toolbar.placeholder_filter', { context: 'displayName' })}\n        data-test=\"toolbarFieldDisplayName\"\n      />\n    </InputGroup>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProduct: Function, t: translate, useDispatch: Function, useProductInventoryHostsQuery: Function}}\n */\nToolbarFieldDisplayName.propTypes = {\n  t: PropTypes.func,\n  useDispatch: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductInventoryHostsQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProduct: Function, t: translate, useDispatch: Function, useProductInventoryHostsQuery: Function}}\n */\nToolbarFieldDisplayName.defaultProps = {\n  t: translate,\n  useDispatch: storeHooks.reactRedux.useDispatch,\n  useProduct,\n  useProductInventoryHostsQuery\n};\n\nexport { ToolbarFieldDisplayName as default, ToolbarFieldDisplayName };\n"],"names":["GuestsList","state","currentPage","limit","previousData","onUpdateGuestsData","props","getHostsInventoryGuests","query","id","updatedQuery","RHSM_API_QUERY_TYPES","apiQueries","inventoryGuestsQuery","onScroll","event","target","numberOfGuests","pending","listData","bottom","scrollHeight","scrollTop","clientHeight","newPage","updatedData","setState","this","prevProps","prevState","filterGuestsData","scrollLoader","Loader","variant","tableProps","borders","colCount","length","Object","keys","colWidth","map","cellWidth","rowCount","TableVariant","className","session","updatedColumnHeaders","updatedRows","cellData","inventoryListHelpers","filters","columnHeaders","cells","updatedHeight","style","height","renderLoader","Table","rows","error","perPageDefault","renderTable","React","defaultProps","helpers","makeMapStateToProps","reduxSelectors","ConnectedGuestsList","connect","dispatch","reduxActions","InventoryList","onColumnSort","data","updatedDirection","direction","productId","updatedSortColumn","values","SORT_TYPES","find","value","_camelCase","SortByDirection","SORT_DIRECTION_TYPES","store","type","reduxTypes","viewId","console","warn","onPage","offset","perPage","onUpdateInventoryData","getHostsInventory","isDisabled","_isEqual","filterInventoryData","settings","onSort","guestsId","subscriptionManagerId","hasGuests","expandedContent","key","undefined","fulfilled","itemCount","t","Card","CardBody","Bullseye","context","updatedPerPage","updatedOffset","isLastPage","paginationHelpers","minHeightContentRefreshKey","MinHeight","updateOnContent","CardHeader","CardHeaderMain","ToolbarFieldDisplayName","CardActions","isCompact","onPerPage","CardFooter","isFooter","dropDirection","translate","ConnectedInventoryList","useAliasDispatch","useDispatch","useAliasProduct","useProduct","useAliasProductInventoryHostsQuery","useProductInventoryHostsQuery","currentValue","onSubmit","submitValue","trim","debounced","_debounce","InputGroup","TextInput","iconVariant","maxLength","onClear","onKeyUp","keyCode","placeholder","storeHooks"],"sourceRoot":""}