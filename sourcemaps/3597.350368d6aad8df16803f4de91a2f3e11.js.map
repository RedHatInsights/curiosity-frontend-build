{"version":3,"file":"js/3597.1676002957778.a6f1aa37a02b4c109850.js","mappings":"4ZAgBMA,EAAyB,WAAwF,6DAAP,CAAC,EAAC,IAAhFC,sBAAuBC,OAA0B,IAAG,EAAAD,EAAAA,sBAAqB,EACzG,EAAoBC,IAAZC,EAAO,EAAPA,QACFC,EAAU,GAEhB,GAAIC,MAAMC,QAAQH,GAAU,CAC1B,IAAMI,EAAiBJ,aAAO,EAAPA,EACnBK,KAAI,YAAuB,IAApBC,EAAM,EAANA,OAAQC,EAAK,EAALA,MACTC,EAAWD,aAAK,EAALA,EAAQE,EAAAA,GAAAA,UAEzB,QAAiBC,IAAbF,EACF,MAAO,CACLG,OAAOC,EAAAA,EAAAA,WAAU,0BAA2B,CAC1CC,QAAS,CAAC,WAA0B,KAAbL,EAAmB,OAAWA,KAEvDM,MAAON,EACPO,SAAU,CACRT,OAAAA,EACAC,MAAAA,GAEFS,UAAU,EAKhB,IACCC,QAAO,SAAAH,GAAK,YAAcJ,IAAVI,CAAmB,IAElCV,SAAAA,EAAgBc,QAClBjB,EAAQkB,KAAI,MAAZlB,GAAO,OAASG,GAEpB,CAEA,OAAOH,CACT,EAUMmB,EAAc,WAGT,6DAAP,CAAC,EAAC,IAFJC,YAAaC,OAAgB,IAAG,EAAAC,EAAAA,GAAAA,WAAAA,YAAiC,MACjEC,WAAYC,OAAe,IAAG,EAAAD,EAAAA,WAAU,EAExC,EAA8BC,IAAtBC,EAAS,EAATA,UAAWC,EAAM,EAANA,OACbC,EAAWN,IAEjB,OAAO,WAA0C,+DAAP,CAAC,EAAC,IAAlCR,MAAAA,OAAK,IAAG,OAAI,MAAEE,SAAAA,OAAQ,IAAG,GAAC,EAAC,EAC/Ba,EAA0Bf,EAE1BE,SAAkB,QAAV,EAARA,EAAUD,gBAAQ,OAAlB,EAAoBT,SACtBuB,EAA0BC,EAAAA,iBAAAA,iBAAkC,CAC1DxB,OAAQU,EAASD,SAAST,OAC1BoB,UAAAA,EACAnB,OAAO,UAAGE,EAAAA,GAAAA,SAAoCK,MAIlDc,EAAS,CACP,CACEG,KAAMC,EAAAA,GAAAA,MAAAA,iBACNC,GAAI,GAAF,OAAKN,EAAM,aACbb,MAAOe,GAET,CACEE,KAAMC,EAAAA,GAAAA,MAAAA,+BACNL,OAAAA,GAEF,CACEI,KAAMC,EAAAA,GAAAA,MAAAA,UACNL,OAAAA,EACAV,OAAQR,EAAAA,GAAAA,SACRK,MAAAA,IAGN,CACF,EAeMoB,EAAuB,SAAH,GAOpB,IANJC,EAAQ,EAARA,SACAC,EAAQ,EAARA,SACAC,EAAC,EAADA,EACaC,EAAgB,EAA7BlB,YACwBmB,EAA2B,EAAnDC,uBACwBC,EAA2B,EAAnD5C,uBAE6C6C,EAAiBH,IAArD9B,EAAAA,GAAAA,UACHkC,EAAWL,IAEXM,EADUH,IACepC,KAAI,SAAAwC,GAAM,yBAAUA,GAAM,IAAE7B,SAAU6B,EAAO/B,QAAU4B,GAAY,IAElG,OACE,kBAAC,EAAAI,OAAM,CACL,aAAYT,EAAE,gCAAiC,CAAExB,QAAS,CAACsB,GAAY,SAAU,cACjFQ,SAAUA,EACV1C,QAAS2C,EACTG,gBAAiBL,EACjBM,YAAaX,EAAE,gCAAiC,CAAExB,QAAS,CAACsB,GAAY,SAAU,cAClFC,SAAUA,EAEV,YAAU,wBAGhB,EAuBAF,EAAqBe,aAAe,CAClCd,UAAU,EACVC,SAAUc,EAAAA,eAAAA,KACVb,EAAGzB,EAAAA,UACHQ,YAAAA,EACAoB,uBAAAA,EAAAA,uBACA3C,uBAAAA,E","sources":["webpack:///./src/components/toolbar/toolbarFieldCategory.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductGraphConfig, useProductToolbarQuery } from '../productView/productViewContext';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { Select, SelectPosition } from '../form/select';\nimport { graphCardHelpers } from '../graphCard/graphCardHelpers';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Generate select field options from config\n *\n * @param {object} options\n * @param {Function} options.useProductGraphConfig\n * @returns {Function}\n */\nconst useToolbarFieldOptions = ({ useProductGraphConfig: useAliasProductGraphConfig = useProductGraphConfig } = {}) => {\n  const { filters } = useAliasProductGraphConfig();\n  const options = [];\n\n  if (Array.isArray(filters)) {\n    const updatedFilters = filters\n      ?.map(({ metric, query }) => {\n        const category = query?.[RHSM_API_QUERY_SET_TYPES.CATEGORY];\n\n        if (category !== undefined) {\n          return {\n            title: translate('curiosity-toolbar.label', {\n              context: ['category', (category === '' && 'none') || category]\n            }),\n            value: category,\n            metaData: {\n              metric,\n              query\n            },\n            selected: false\n          };\n        }\n\n        return undefined;\n      })\n      .filter(value => value !== undefined);\n\n    if (updatedFilters?.length) {\n      options.push(...updatedFilters);\n    }\n  }\n\n  return options;\n};\n\n/**\n * On select update.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId, viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null, selected = {} } = {}) => {\n    let updatedGraphLegendValue = value;\n\n    if (selected?.metaData?.metric) {\n      updatedGraphLegendValue = graphCardHelpers.generateChartIds({\n        metric: selected.metaData.metric,\n        productId,\n        query: { [RHSM_API_QUERY_SET_TYPES.CATEGORY]: value }\n      });\n    }\n\n    dispatch([\n      {\n        type: reduxTypes.graph.SET_GRAPH_LEGEND,\n        id: `${viewId}-inverted`,\n        value: updatedGraphLegendValue\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY,\n        viewId,\n        filter: RHSM_API_QUERY_SET_TYPES.CATEGORY,\n        value\n      }\n    ]);\n  };\n};\n\n/**\n * Display a category field with generated options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductToolbarQuery\n * @param {Function} props.useToolbarFieldOptions\n * @returns {Node}\n */\nconst ToolbarFieldCategory = ({\n  isFilter,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductToolbarQuery: useAliasProductToolbarQuery,\n  useToolbarFieldOptions: useAliasToolbarFieldOptions\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.CATEGORY]: updatedValue } = useAliasProductToolbarQuery();\n  const onSelect = useAliasOnSelect();\n  const options = useAliasToolbarFieldOptions();\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'category'] })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'category'] })}\n      position={position}\n      // variant={SelectVariant.checkbox}\n      data-test=\"toolbarFieldCategory\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, useProductToolbarQuery: Function, isFilter: boolean,\n *     position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldCategory.propTypes = {\n  isFilter: PropTypes.bool,\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductToolbarQuery: PropTypes.func,\n  useToolbarFieldOptions: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: translate, useProductToolbarQuery: Function, isFilter: boolean,\n *     position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldCategory.defaultProps = {\n  isFilter: false,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductToolbarQuery,\n  useToolbarFieldOptions\n};\n\nexport { ToolbarFieldCategory as default, ToolbarFieldCategory, useOnSelect, useToolbarFieldOptions };\n"],"names":["useToolbarFieldOptions","useProductGraphConfig","useAliasProductGraphConfig","filters","options","Array","isArray","updatedFilters","map","metric","query","category","RHSM_API_QUERY_SET_TYPES","undefined","title","translate","context","value","metaData","selected","filter","length","push","useOnSelect","useDispatch","useAliasDispatch","storeHooks","useProduct","useAliasProduct","productId","viewId","dispatch","updatedGraphLegendValue","graphCardHelpers","type","reduxTypes","id","ToolbarFieldCategory","isFilter","position","t","useAliasOnSelect","useAliasProductToolbarQuery","useProductToolbarQuery","useAliasToolbarFieldOptions","updatedValue","onSelect","updatedOptions","option","Select","selectedOptions","placeholder","defaultProps","SelectPosition"],"sourceRoot":""}