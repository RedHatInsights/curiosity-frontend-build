{"version":3,"file":"js/1014.1645564110677.b38db9eca8aaa71312fd.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardMetrics.js","webpack:///./src/components/productView/productViewContext.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { GraphCardChart } from './graphCardChart';\nimport { useProductGraphConfig } from '../productView/productViewContext';\nimport { GraphCardContext } from './graphCardContext';\nimport { rhsmConstants } from '../../services/rhsm/rhsmConstants';\n\n/**\n * Display a single graph metric.\n *\n * @param {object} props\n * @param {Array} props.metricFilters\n * @param {Function} props.useProductGraphConfig\n * @returns {Node}\n */\nconst GraphCardMetrics = ({ metricFilters, useProductGraphConfig: useAliasProductGraphConfig }) => {\n  const [context, setContext] = useState({});\n  const { settings } = useAliasProductGraphConfig();\n\n  useEffect(() => {\n    setContext({\n      settings: {\n        ...settings,\n        isStandalone: false,\n        metric: undefined,\n        metrics: metricFilters\n      }\n    });\n  }, [metricFilters, settings, setContext]);\n\n  return (\n    <GraphCardContext.Provider value={context}>\n      <GraphCardChart />\n    </GraphCardContext.Provider>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphConfig: Function, metricFilters: Array}}\n */\nGraphCardMetrics.propTypes = {\n  metricFilters: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.oneOf([...Object.values(rhsmConstants.RHSM_API_PATH_METRIC_TYPES)])\n    })\n  ),\n  useProductGraphConfig: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphConfig: Function, metricFilters: Array}}\n */\nGraphCardMetrics.defaultProps = {\n  metricFilters: [],\n  useProductGraphConfig\n};\n\nexport { GraphCardMetrics as default, GraphCardMetrics };\n","import React, { useCallback, useContext } from 'react';\nimport { reduxHelpers } from '../../redux/common';\nimport { storeHooks } from '../../redux/hooks';\nimport { RHSM_API_QUERY_TYPES, rhsmApiTypes } from '../../types/rhsmApiTypes';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Route context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{}, helpers.noop];\n\nconst ProductViewContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated product view context.\n *\n * @returns {React.Context<{}>}\n */\nconst useProductViewContext = () => useContext(ProductViewContext);\n\n/**\n * Return a query object from initial product config and Redux store.\n *\n * @param {string} queryType An identifier used to pull from both config and Redux, they should named the same.\n * @param {object} options\n * @param {string} options.overrideId A custom identifier, used for scenarios like the Guest inventory IDs\n * @param {object} options.useProductViewContext\n * @returns {object}\n */\nconst useProductQueryFactory = (\n  queryType,\n  { overrideId, useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}\n) => {\n  const { [queryType]: initialQuery, productId, viewId } = useAliasProductViewContext();\n  const queryOverride = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[overrideId], undefined);\n  const queryProduct = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[productId], undefined);\n  const queryView = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[viewId], undefined);\n\n  return {\n    ...initialQuery,\n    ...queryOverride,\n    ...queryProduct,\n    ...queryView\n  };\n};\n\n/**\n * Return a base product query\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductQuery = ({ queryType = 'query', options } = {}) => useProductQueryFactory(queryType, options);\n\n/**\n * Return the graph query based off of tally and capacity.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductGraphTallyQuery = ({\n  queryType = 'graphTallyQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_REPORT_CAPACITY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return the inventory query for guests. Use fallback/defaults for guests offset, limit.\n *\n * @param {object} options\n * @param {number} options.defaultLimit\n * @param {number} options.defaultOffset\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryGuestsQuery = ({\n  defaultLimit = 100,\n  defaultOffset = 0,\n  queryType = 'inventoryGuestsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_GUESTS_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      [RHSM_API_QUERY_SET_TYPES.LIMIT]: defaultLimit,\n      [RHSM_API_QUERY_SET_TYPES.OFFSET]: defaultOffset,\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for hosts.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryHostsQuery = ({\n  queryType = 'inventoryHostsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for subscriptions.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventorySubscriptionsQuery = ({\n  queryType = 'inventorySubscriptionsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Get a filtered product configuration context.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductViewContext\n * @returns {object}\n */\nconst useProductContext = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductViewContext: useAliasProductViewContext = useProductViewContext\n} = {}) => {\n  const { [RHSM_API_QUERY_TYPES.UOM]: uomFilter } = useAliasProductQuery();\n  const {\n    initialGraphFilters = [],\n    initialInventoryFilters = [],\n    initialSubscriptionsInventoryFilters = [],\n    productContextFilterUom,\n    ...config\n  } = useAliasProductViewContext();\n\n  const applyUomFilter = useCallback(() => {\n    if (productContextFilterUom === true) {\n      const filterFilters = ({ id, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(uomFilter, 'i').test(id);\n      };\n\n      return {\n        ...config,\n        initialGraphFilters: initialGraphFilters.filter(filterFilters),\n        initialInventoryFilters: initialInventoryFilters.filter(filterFilters),\n        initialSubscriptionsInventoryFilters: initialSubscriptionsInventoryFilters.filter(filterFilters)\n      };\n    }\n\n    return {\n      ...config,\n      initialGraphFilters,\n      initialInventoryFilters,\n      initialSubscriptionsInventoryFilters\n    };\n  }, [\n    config,\n    initialGraphFilters,\n    initialInventoryFilters,\n    initialSubscriptionsInventoryFilters,\n    productContextFilterUom,\n    uomFilter\n  ]);\n\n  return applyUomFilter();\n};\n\n/**\n * Return product identifiers.\n *\n * @param {object} options\n * @param {Function} options.useProductViewContext\n * @returns {{productLabel: string, viewId: string, productId: string, productGroup: string}}\n */\nconst useProduct = ({ useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}) => {\n  const { productGroup, productId, productLabel, viewId } = useAliasProductViewContext();\n  return {\n    productGroup,\n    productId,\n    productLabel,\n    viewId\n  };\n};\n\n/**\n * Return graph configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductGraphConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialGraphFilters, initialGraphSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGraphFilters,\n    settings: initialGraphSettings\n  };\n};\n\n/**\n * Return guests inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryGuestsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { inventoryGuestsQuery = {}, initialGuestsFilters, initialGuestsSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGuestsFilters,\n    initialQuery: inventoryGuestsQuery,\n    settings: initialGuestsSettings\n  };\n};\n\n/**\n * Return hosts inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryHostsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialInventoryFilters, initialInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialInventoryFilters,\n    settings: initialInventorySettings\n  };\n};\n\n/**\n * Return subscriptions inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventorySubscriptionsConfig = ({\n  useProductContext: useAliasProductContext = useProductContext\n} = {}) => {\n  const { initialSubscriptionsInventoryFilters, initialSubscriptionsInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialSubscriptionsInventoryFilters,\n    settings: initialSubscriptionsInventorySettings\n  };\n};\n\n/**\n * Return primary toolbar configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductToolbarConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialToolbarFilters, initialToolbarSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialToolbarFilters,\n    settings: initialToolbarSettings\n  };\n};\n\nconst context = {\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useQuery: useProductQuery,\n  useQueryFactory: useProductQueryFactory,\n  useGraphTallyQuery: useProductGraphTallyQuery,\n  useInventoryGuestsQuery: useProductInventoryGuestsQuery,\n  useInventoryHostsQuery: useProductInventoryHostsQuery,\n  useInventorySubscriptionsQuery: useProductInventorySubscriptionsQuery,\n  useProduct,\n  useGraphConfig: useProductGraphConfig,\n  useInventoryGuestsConfig: useProductInventoryGuestsConfig,\n  useInventoryHostsConfig: useProductInventoryHostsConfig,\n  useInventorySubscriptionsConfig: useProductInventorySubscriptionsConfig,\n  useToolbarConfig: useProductToolbarConfig\n};\n\nexport {\n  context as default,\n  context,\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useProductQuery,\n  useProductQueryFactory,\n  useProductGraphTallyQuery,\n  useProductInventoryGuestsQuery,\n  useProductInventoryHostsQuery,\n  useProductInventorySubscriptionsQuery,\n  useProduct,\n  useProductGraphConfig,\n  useProductInventoryGuestsConfig,\n  useProductInventoryHostsConfig,\n  useProductInventorySubscriptionsConfig,\n  useProductToolbarConfig\n};\n"],"names":["GraphCardMetrics","metricFilters","useAliasProductGraphConfig","useProductGraphConfig","useState","context","setContext","settings","useEffect","isStandalone","metric","undefined","metrics","GraphCardContext","value","GraphCardChart","defaultProps","DEFAULT_CONTEXT","helpers","ProductViewContext","React","useProductViewContext","useContext","useProductQueryFactory","queryType","overrideId","useAliasProductViewContext","initialQuery","productId","viewId","queryOverride","storeHooks","view","queryProduct","queryView","useProductQuery","options","useProductGraphTallyQuery","schemaCheck","rhsmApiTypes","reduxHelpers","useProductInventoryGuestsQuery","defaultLimit","defaultOffset","RHSM_API_QUERY_SET_TYPES","useProductInventoryHostsQuery","useProductInventorySubscriptionsQuery","useProductContext","useAliasProductQuery","uomFilter","RHSM_API_QUERY_TYPES","initialGraphFilters","initialInventoryFilters","initialSubscriptionsInventoryFilters","productContextFilterUom","config","applyUomFilter","useCallback","filterFilters","id","isOptional","RegExp","test","filter","useProduct","productGroup","productLabel","useAliasProductContext","initialGraphSettings","filters","useProductInventoryGuestsConfig","inventoryGuestsQuery","initialGuestsFilters","initialGuestsSettings","useProductInventoryHostsConfig","initialInventorySettings","useProductInventorySubscriptionsConfig","initialSubscriptionsInventorySettings","useProductToolbarConfig","initialToolbarFilters","initialToolbarSettings","useQuery","useQueryFactory","useGraphTallyQuery","useInventoryGuestsQuery","useInventoryHostsQuery","useInventorySubscriptionsQuery","useGraphConfig","useInventoryGuestsConfig","useInventoryHostsConfig","useInventorySubscriptionsConfig","useToolbarConfig"],"sourceRoot":""}