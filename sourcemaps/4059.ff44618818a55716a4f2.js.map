{"version":3,"file":"js/4059.e43fd0ab7056ffe9d5f8.js","mappings":"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","sources":["webpack:///./src/components/bannerMessages/bannerMessages.js","webpack:///./src/components/inventoryTabs/inventoryTabs.js","webpack:///./src/components/productView/productView.js","webpack:///./src/components/productView/productViewOpenShiftContainer.js","webpack:///./src/components/toolbar/toolbarFieldGranularity.js","webpack:///./src/components/toolbar/toolbarFieldRangedMonthly.js","webpack:///./src/components/toolbar/toolbarFieldUom.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, AlertActionCloseButton, AlertVariant, Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport _isEqual from 'lodash/isEqual';\nimport { apiQueries, connect, reduxActions, reduxSelectors } from '../../redux';\nimport { translate } from '../i18n/i18n';\nimport { dateHelpers, helpers } from '../../common';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\n\n/**\n * Render banner messages.\n *\n * @augments React.Component\n */\nclass BannerMessages extends React.Component {\n  state = {};\n\n  componentDidMount() {\n    this.onUpdateData();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { query, productId } = this.props;\n\n    if (productId !== prevProps.productId || !_isEqual(query, prevProps.query)) {\n      this.onUpdateData();\n    }\n  }\n\n  /**\n   * Call the RHSM APIs, apply filters.\n   *\n   * @event onUpdateGraphData\n   */\n  onUpdateData = () => {\n    const { getMessageReports, productId, query } = this.props;\n    const { graphTallyQuery } = apiQueries.parseRhsmQuery(query);\n\n    if (productId) {\n      const { startDate, endDate } = dateHelpers.getRangedDateTime('CURRENT');\n      const updatedGraphQuery = {\n        ...graphTallyQuery,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString(),\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      };\n\n      getMessageReports(productId, updatedGraphQuery);\n    }\n  };\n\n  /**\n   * Apply messages' configuration to alerts.\n   *\n   * @returns {Node}\n   */\n  renderAlerts() {\n    const { state } = this;\n    const { appMessages, messages } = this.props;\n    const updatedMessages = [];\n\n    if (messages.length) {\n      Object.entries(appMessages).forEach(([key, value]) => {\n        if (state[key] !== true && value === true) {\n          const message = messages.find(({ id }) => id === key);\n\n          if (message) {\n            updatedMessages.push({\n              key,\n              ...message\n            });\n          }\n        }\n      });\n    }\n\n    return updatedMessages.map(({ key, message, title, variant = AlertVariant.info }) => {\n      const actionClose = <AlertActionCloseButton onClose={() => this.setState({ [key]: true })} />;\n\n      return (\n        <Alert actionClose={actionClose} key={key} title={title} variant={variant}>\n          {message}\n        </Alert>\n      );\n    });\n  }\n\n  /**\n   * Render a banner messages container.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const alerts = this.renderAlerts();\n\n    if (alerts.length) {\n      return <div className=\"curiosity-banner-messages\">{alerts}</div>;\n    }\n\n    return null;\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{appMessages: object, productId: string, getMessageReports: Function, query: object, messages: Array}}\n */\nBannerMessages.propTypes = {\n  appMessages: PropTypes.object.isRequired,\n  getMessageReports: PropTypes.func,\n  query: PropTypes.object,\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.node.isRequired,\n      message: PropTypes.node.isRequired,\n      variant: PropTypes.oneOf([...Object.values(AlertVariant)])\n    })\n  ),\n  productId: PropTypes.string.isRequired\n};\n\n/**\n * Default props.\n *\n * @type {{getMessageReports: Function, query: object, messages: Array}}\n */\nBannerMessages.defaultProps = {\n  getMessageReports: helpers.noop,\n  query: {},\n  messages: [\n    {\n      id: 'cloudigradeMismatch',\n      title: translate('curiosity-banner.dataMismatchTitle'),\n      message: translate(\n        'curiosity-banner.dataMismatchMessage',\n        {\n          context: helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS !== '' && 'cloudigradeMismatch',\n          appName: helpers.UI_DISPLAY_NAME\n        },\n        [\n          <Button\n            isInline\n            component=\"a\"\n            variant=\"link\"\n            icon={<ExternalLinkAltIcon />}\n            iconPosition=\"right\"\n            target=\"_blank\"\n            href={helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS}\n          />\n        ]\n      )\n    }\n  ]\n};\n\n/**\n * Apply actions to props.\n *\n * @param {Function} dispatch\n * @returns {object}\n */\nconst mapDispatchToProps = dispatch => ({\n  getMessageReports: (id, query) => dispatch(reduxActions.rhsm.getMessageReports(id, query))\n});\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.appMessages.makeAppMessages();\n\nconst ConnectedBannerMessages = connect(makeMapStateToProps, mapDispatchToProps)(BannerMessages);\n\nexport { ConnectedBannerMessages as default, ConnectedBannerMessages, BannerMessages };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Title } from '@patternfly/react-core';\nimport { connect, reduxTypes, store } from '../../redux';\nimport { Tabs } from '../tabs/tabs';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { InventoryTab } from './inventoryTab';\n\n/**\n * A system inventory tabs component.\n *\n * @augments React.Component\n * @fires onTab\n */\nclass InventoryTabs extends React.Component {\n  /**\n   * On tab update state.\n   *\n   * @event onTab\n   * @param {object} params\n   * @param {string} params.index tab index\n   */\n  onTab = ({ index }) => {\n    const { productId } = this.props;\n\n    store.dispatch({\n      type: reduxTypes.inventory.SET_INVENTORY_TAB,\n      tabs: {\n        [productId]: index\n      }\n    });\n  };\n\n  /**\n   * Render inventory tabs using Inventory tab passed props only. A parallel outcome can be\n   * achieved by passing an array of objects through a prop.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { activeTab, children, defaultActiveTab, isDisabled, t } = this.props;\n\n    if (isDisabled) {\n      return null;\n    }\n\n    const updatedChildren = React.Children.toArray(children).map((child, index) => {\n      const { props = {} } = child;\n\n      return {\n        active: props.active || false,\n        content: props.children || child,\n        title: props.title || t('curiosity-inventory.tabSubHeading', { count: index })\n      };\n    });\n\n    return (\n      <React.Fragment>\n        <Title headingLevel=\"h2\" className=\"sr-only\">\n          {t('curiosity-inventory.tabHeading', { count: updatedChildren.length })}\n        </Title>\n        <Tabs activeTab={activeTab} defaultActiveTab={defaultActiveTab} onTab={this.onTab} tabs={updatedChildren} />\n      </React.Fragment>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{productId: string, t: Function, children: Node, defaultActiveTab: number, isDisabled: boolean,\n *     activeTab: number}}\n */\nInventoryTabs.propTypes = {\n  activeTab: PropTypes.number,\n  children: PropTypes.node.isRequired,\n  defaultActiveTab: PropTypes.number,\n  isDisabled: PropTypes.bool,\n  productId: PropTypes.string.isRequired,\n  t: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, defaultActiveTab: number, isDisabled: boolean, activeTab: number}}\n */\nInventoryTabs.defaultProps = {\n  activeTab: 0,\n  defaultActiveTab: 0,\n  isDisabled: helpers.UI_DISABLED_TABLE,\n  t: translate\n};\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst mapStateToProps = ({ inventory }, { productId }) => ({ activeTab: inventory.tabs?.[productId] });\n\nconst ConnectedInventoryTabs = connect(mapStateToProps)(InventoryTabs);\n\nexport { ConnectedInventoryTabs as default, ConnectedInventoryTabs, InventoryTabs, InventoryTab };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport { PageLayout, PageHeader, PageSection, PageToolbar, PageMessages } from '../pageLayout/pageLayout';\nimport { apiQueries } from '../../redux';\nimport { ConnectedGraphCard, GraphCard } from '../graphCard/graphCard';\nimport { ConnectedToolbar, Toolbar } from '../toolbar/toolbar';\nimport { ConnectedInventoryList, InventoryList } from '../inventoryList/inventoryList';\nimport { helpers } from '../../common';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport { ToolbarFieldGranularity } from '../toolbar/toolbarFieldGranularity';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport {\n  ConnectedInventorySubscriptions,\n  InventorySubscriptions\n} from '../inventorySubscriptions/inventorySubscriptions';\nimport {\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_SORT_TYPES,\n  RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES,\n  RHSM_API_QUERY_TYPES\n} from '../../types/rhsmApiTypes';\nimport { GuestsList } from '../guestsList/guestsList';\nimport { translate } from '../i18n/i18n';\n\n/**\n * ToDo: base for default product layouts, add additional props for various toolbars\n * Next steps include...\n * Consider being able to pass customized toolbars for GraphCard and the\n * various Inventory displays. Have to evaluate how to handle the global toolbar, one\n * consideration is creating optional widgets with self-contained state update ability\n * based off of context/props/etc.\n *\n * Moving existing products to this layout, or maintaining them \"as is\", then renaming and\n * relocating them to this directory if they've been customized beyond a basic layout.\n */\n/**\n * Display a product.\n *\n * @param {object} props\n * @param {object} props.routeDetail\n * @param {Function} props.t\n * @param {Node|boolean} props.toolbarGraph\n * @param {boolean} props.toolbarGraphDescription\n * @param {Node|boolean} props.toolbarProduct\n * @returns {Node}\n */\nconst ProductView = ({ routeDetail, t, toolbarGraph, toolbarGraphDescription, toolbarProduct }) => {\n  const {\n    pathParameter: productId,\n    productConfig,\n    productParameter: productLabel,\n    viewParameter: viewId\n  } = routeDetail;\n\n  const {\n    graphTallyQuery,\n    inventoryHostsQuery,\n    inventorySubscriptionsQuery,\n    query,\n    initialToolbarFilters,\n    initialGraphFilters,\n    initialGraphSettings,\n    initialGuestsFilters,\n    initialInventoryFilters,\n    initialInventorySettings,\n    initialSubscriptionsInventoryFilters\n  } = productConfig?.[0] || {};\n\n  const {\n    query: initialQuery,\n    graphTallyQuery: initialGraphTallyQuery,\n    inventoryHostsQuery: initialInventoryHostsQuery,\n    inventorySubscriptionsQuery: initialInventorySubscriptionsQuery,\n    toolbarQuery: initialToolbarQuery\n  } = apiQueries.parseRhsmQuery(query, { graphTallyQuery, inventoryHostsQuery, inventorySubscriptionsQuery });\n\n  if (!productId || !viewId) {\n    return null;\n  }\n\n  let graphCardTooltip = null;\n\n  if (toolbarGraphDescription) {\n    graphCardTooltip = (\n      <Tooltip\n        content={<p>{t('curiosity-graph.cardHeadingDescription', { context: productId })}</p>}\n        position={TooltipPosition.top}\n        enableFlip={false}\n        distance={5}\n        entryDelay={100}\n        exitDelay={0}\n      >\n        <sup className=\"curiosity-icon__info\">\n          <InfoCircleIcon />\n        </sup>\n      </Tooltip>\n    );\n  }\n\n  const graphCardTitle = (\n    <React.Fragment>\n      {t('curiosity-graph.cardHeading', { context: productId })}\n      {graphCardTooltip}\n    </React.Fragment>\n  );\n\n  return (\n    <PageLayout>\n      <PageHeader productLabel={productLabel} includeTour>\n        {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: productLabel })}\n      </PageHeader>\n      <PageMessages>\n        <BannerMessages productId={productId} viewId={viewId} query={initialQuery} />\n      </PageMessages>\n      <PageToolbar>\n        {(React.isValidElement(toolbarProduct) && toolbarProduct) ||\n          (toolbarProduct !== false && (\n            <ConnectedToolbar\n              filterOptions={initialToolbarFilters}\n              productId={productId}\n              query={initialToolbarQuery}\n              viewId={viewId}\n            />\n          ))}\n      </PageToolbar>\n      <PageSection>\n        <ConnectedGraphCard\n          key={`graph_${productId}`}\n          filterGraphData={initialGraphFilters}\n          settings={initialGraphSettings}\n          query={initialGraphTallyQuery}\n          productId={productId}\n          viewId={viewId}\n          cardTitle={graphCardTitle}\n          productLabel={productLabel}\n        >\n          {(React.isValidElement(toolbarGraph) && toolbarGraph) ||\n            (toolbarGraph !== false && (\n              <ToolbarFieldGranularity\n                viewId={viewId}\n                value={initialGraphTallyQuery[RHSM_API_QUERY_TYPES.GRANULARITY]}\n              />\n            ))}\n        </ConnectedGraphCard>\n      </PageSection>\n      <PageSection>\n        <InventoryTabs key={`inventory_${productId}`} productId={productId}>\n          <InventoryTab\n            key={`inventory_hosts_${productId}`}\n            title={t('curiosity-inventory.tabHosts', { context: ['noInstances', productId] })}\n          >\n            <ConnectedInventoryList\n              key={`inv_${productId}`}\n              filterGuestsData={initialGuestsFilters}\n              filterInventoryData={initialInventoryFilters}\n              productId={productId}\n              settings={initialInventorySettings}\n              query={initialInventoryHostsQuery}\n              viewId={viewId}\n            />\n          </InventoryTab>\n          {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && (\n            <InventoryTab\n              key={`inventory_subs_${productId}`}\n              title={t('curiosity-inventory.tabSubscriptions', { context: productId })}\n            >\n              <ConnectedInventorySubscriptions\n                key={`subs_${productId}`}\n                filterInventoryData={initialSubscriptionsInventoryFilters}\n                productId={productId}\n                query={initialInventorySubscriptionsQuery}\n                viewId={viewId}\n              />\n            </InventoryTab>\n          )}\n        </InventoryTabs>\n      </PageSection>\n    </PageLayout>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), toolbarGraphDescription: boolean, routeDetail: object,\n *    productConfig: object, toolbarProduct: (Node|boolean)}}\n */\nProductView.propTypes = {\n  routeDetail: PropTypes.shape({\n    pathParameter: PropTypes.string,\n    productConfig: PropTypes.arrayOf(\n      PropTypes.shape({\n        graphTallyQuery: PropTypes.shape({\n          [RHSM_API_QUERY_TYPES.GRANULARITY]: PropTypes.oneOf([...Object.values(GRANULARITY_TYPES)])\n        }),\n        inventoryHostsQuery: PropTypes.shape({\n          [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n          [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n          [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SORT_TYPES)]),\n          [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n        }),\n        inventorySubscriptionsQuery: PropTypes.shape({\n          [RHSM_API_QUERY_TYPES.LIMIT]: PropTypes.number,\n          [RHSM_API_QUERY_TYPES.OFFSET]: PropTypes.number,\n          [RHSM_API_QUERY_TYPES.SORT]: PropTypes.oneOf([...Object.values(RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES)]),\n          [RHSM_API_QUERY_TYPES.DIRECTION]: PropTypes.oneOf([...Object.values(SORT_DIRECTION_TYPES)])\n        }),\n        query: PropTypes.shape({\n          [RHSM_API_QUERY_TYPES.START_DATE]: PropTypes.string,\n          [RHSM_API_QUERY_TYPES.END_DATE]: PropTypes.string\n        }),\n        initialToolbarFilters: Toolbar.propTypes.filterOptions,\n        initialGraphFilters: GraphCard.propTypes.filterGraphData,\n        initialGraphSettings: GraphCard.propTypes.settings,\n        initialGuestsFilters: GuestsList.propTypes.filterGuestsData,\n        initialInventoryFilters: InventoryList.propTypes.filterInventoryData,\n        initialInventorySettings: InventoryList.propTypes.settings,\n        initialSubscriptionsInventoryFilters: InventorySubscriptions.propTypes.filterInventoryData\n      })\n    ),\n    productParameter: PropTypes.string,\n    viewParameter: PropTypes.string\n  }).isRequired,\n  t: PropTypes.func,\n  toolbarGraph: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n  toolbarGraphDescription: PropTypes.bool,\n  toolbarProduct: PropTypes.oneOfType([PropTypes.node, PropTypes.bool])\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), toolbarGraphDescription: boolean, toolbarProduct: (Node|boolean)}}\n */\nProductView.defaultProps = {\n  t: translate,\n  toolbarGraph: null,\n  toolbarGraphDescription: false,\n  toolbarProduct: null\n};\n\nexport { ProductView as default, ProductView };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport { PageLayout, PageColumns, PageHeader, PageSection, PageToolbar } from '../pageLayout/pageLayout';\nimport { RHSM_API_PATH_ID_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { apiQueries, useSelector } from '../../redux';\nimport GraphCard from '../graphCard/graphCard';\nimport { ToolbarFieldUom } from '../toolbar/toolbarFieldUom';\nimport { ToolbarFieldGranularity } from '../toolbar/toolbarFieldGranularity';\nimport { ToolbarFieldRangedMonthly } from '../toolbar/toolbarFieldRangedMonthly';\nimport Toolbar from '../toolbar/toolbar';\nimport InventoryList from '../inventoryList/inventoryList';\nimport InventorySubscriptions from '../inventorySubscriptions/inventorySubscriptions';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport { ProductView } from './productView';\nimport { translate } from '../i18n/i18n';\nimport { helpers } from '../../common';\n\n/**\n * An OpenShift Container Platform encompassing view.\n *\n * @param {object} props\n * @param {object} props.routeDetail\n * @param {Function} props.t\n * @returns {Node}\n */\nconst ProductViewOpenShiftContainer = ({ routeDetail, t }) => {\n  const { productParameter: viewProductLabel, productConfig } = routeDetail;\n  const uomValue = useSelector(({ view }) => view.query?.[productConfig[0].viewId]?.[RHSM_API_QUERY_TYPES.UOM], null);\n\n  const renderProduct = (config, updatedUomValue) => {\n    const {\n      productContextFilterUom,\n      query = {},\n      graphTallyQuery = {},\n      inventoryHostsQuery = {},\n      inventorySubscriptionsQuery = {},\n      initialGraphFilters = [],\n      initialGraphSettings = {},\n      initialGuestsFilters = [],\n      initialInventoryFilters = [],\n      initialInventorySettings = {},\n      initialSubscriptionsInventoryFilters,\n      initialToolbarFilters,\n      productLabel,\n      productId,\n      viewId\n    } = config;\n\n    if (!productId || !viewId) {\n      return null;\n    }\n\n    const {\n      graphTallyQuery: initialGraphTallyQuery,\n      inventoryHostsQuery: initialInventoryHostsQuery,\n      inventorySubscriptionsQuery: initialInventorySubscriptionsQuery,\n      toolbarQuery\n    } = apiQueries.parseRhsmQuery(query, { graphTallyQuery, inventoryHostsQuery, inventorySubscriptionsQuery });\n\n    let graphFilters = initialGraphFilters;\n    let inventoryFilters = initialInventoryFilters;\n    let subscriptionsInventoryFilters = initialSubscriptionsInventoryFilters;\n    let uomFilter;\n\n    if (productContextFilterUom) {\n      uomFilter = updatedUomValue || query[RHSM_API_QUERY_TYPES.UOM];\n\n      const filter = ({ id, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(uomFilter, 'i').test(id);\n      };\n\n      graphFilters = initialGraphFilters.filter(filter);\n      inventoryFilters = initialInventoryFilters.filter(filter);\n      subscriptionsInventoryFilters = initialSubscriptionsInventoryFilters.filter(filter);\n    }\n\n    const graphCardTitle = (\n      <React.Fragment>\n        {t('curiosity-graph.cardHeading', { context: productId })}\n        <Tooltip\n          content={<p>{t('curiosity-graph.cardHeadingDescription', { context: productId })}</p>}\n          position={TooltipPosition.top}\n          enableFlip={false}\n          distance={5}\n          entryDelay={100}\n          exitDelay={0}\n        >\n          <sup className=\"curiosity-icon__info\">\n            <InfoCircleIcon />\n          </sup>\n        </Tooltip>\n      </React.Fragment>\n    );\n\n    return (\n      <React.Fragment key={`product_${productId}_${uomFilter}`}>\n        {initialToolbarFilters && (\n          <PageToolbar>\n            <Toolbar filterOptions={initialToolbarFilters} productId={productId} query={toolbarQuery} viewId={viewId} />\n          </PageToolbar>\n        )}\n        <PageSection>\n          <GraphCard\n            key={`graph_${productId}`}\n            filterGraphData={graphFilters}\n            settings={initialGraphSettings}\n            query={initialGraphTallyQuery}\n            productId={productId}\n            viewId={viewId}\n            cardTitle={graphCardTitle}\n            productLabel={productLabel}\n          >\n            {productId === RHSM_API_PATH_ID_TYPES.OPENSHIFT && uomFilter && (\n              <ToolbarFieldUom value={uomFilter} viewId={viewId} />\n            )}\n            {productId === RHSM_API_PATH_ID_TYPES.OPENSHIFT && (\n              <ToolbarFieldGranularity value={graphTallyQuery[RHSM_API_QUERY_TYPES.GRANULARITY]} viewId={viewId} />\n            )}\n            {productId === RHSM_API_PATH_ID_TYPES.OPENSHIFT_METRICS && <ToolbarFieldRangedMonthly viewId={viewId} />}\n          </GraphCard>\n        </PageSection>\n        <PageSection>\n          <InventoryTabs key={`inventory_${productId}`} productId={productId}>\n            <InventoryTab\n              key={`inventory_hosts_${productId}`}\n              title={t('curiosity-inventory.tabHosts', { context: ['noInstances', productId] })}\n            >\n              <InventoryList\n                key={`inv_${productId}`}\n                filterGuestsData={initialGuestsFilters}\n                filterInventoryData={inventoryFilters}\n                productId={productId}\n                settings={initialInventorySettings}\n                query={initialInventoryHostsQuery}\n                viewId={viewId}\n              />\n            </InventoryTab>\n            {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && initialSubscriptionsInventoryFilters && (\n              <InventoryTab\n                key={`inventory_subs_${productId}`}\n                title={t('curiosity-inventory.tabSubscriptions', { context: productId })}\n              >\n                <InventorySubscriptions\n                  key={`subs_${productId}`}\n                  filterInventoryData={subscriptionsInventoryFilters}\n                  productId={productId}\n                  query={initialInventorySubscriptionsQuery}\n                  viewId={viewId}\n                />\n              </InventoryTab>\n            )}\n          </InventoryTabs>\n        </PageSection>\n      </React.Fragment>\n    );\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader productLabel={viewProductLabel} includeTour>\n        {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: viewProductLabel })}\n      </PageHeader>\n      <PageColumns>{productConfig.map(config => renderProduct(config, uomValue))}</PageColumns>\n    </PageLayout>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: Function, routeDetail: object}}\n */\nProductViewOpenShiftContainer.propTypes = {\n  routeDetail: PropTypes.shape(ProductView.propTypes.routeDetail).isRequired,\n  t: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: Function}}\n */\nProductViewOpenShiftContainer.defaultProps = {\n  t: translate\n};\n\nexport { ProductViewOpenShiftContainer as default, ProductViewOpenShiftContainer };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, store, useSelector } from '../../redux';\nimport { Select } from '../form/select';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.granularity', { context: type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Array} props.options\n * @param {Function} props.t\n * @param {string} props.value\n * @param {string} props.viewId\n * @returns {Node}\n */\nconst ToolbarFieldGranularity = ({ options, t, value, viewId }) => {\n  const updatedValue = useSelector(\n    ({ view }) => view.graphTallyQuery?.[viewId]?.[RHSM_API_QUERY_TYPES.GRANULARITY],\n    value\n  );\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  /**\n   * On select, dispatch type.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @returns {void}\n   */\n  const onSelect = event => {\n    const { startDate, endDate } = dateHelpers.getRangedDateTime(event.value);\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: event.value\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      }\n    ]);\n  };\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      data-test={ToolbarFieldGranularity.defaultProps.viewId}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{viewId: string, t: Function, options: Array, value: string}}\n */\nToolbarFieldGranularity.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  t: PropTypes.func,\n  value: PropTypes.oneOf([...Object.values(FIELD_TYPES)]),\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{viewId: string, t: translate, options: Array, value: string}}\n */\nToolbarFieldGranularity.defaultProps = {\n  options: toolbarFieldOptions,\n  t: translate,\n  value: FIELD_TYPES.DAILY,\n  viewId: 'toolbarFieldGranularity'\n};\n\nexport { ToolbarFieldGranularity as default, ToolbarFieldGranularity, toolbarFieldOptions };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, store, useSelector } from '../../redux';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = dateHelpers.getRangedMonthDateTime().listDateTimeRanges.map(dateTime => ({\n  ...dateTime,\n  selected: false\n}));\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Array} props.options\n * @param {Function} props.t\n * @param {string} props.value\n * @param {string} props.viewId\n * @returns {Node}\n */\nconst ToolbarFieldRangedMonthly = ({ options, t, value, viewId }) => {\n  const updatedValue = useSelector(({ view }) => view.query?.[viewId]?.[RHSM_API_QUERY_TYPES.START_DATE], value);\n\n  const updatedOptions = options.map(option => ({\n    ...option,\n    selected: option.title === updatedValue || option.value.startDate.toISOString() === updatedValue\n  }));\n\n  /**\n   * On select, dispatch type.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @returns {void}\n   */\n  const onSelect = event => {\n    const { startDate, endDate } = event.value;\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: FIELD_TYPES.DAILY\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      }\n    ]);\n  };\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      placeholder={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      position={SelectPosition.right}\n      maxHeight={250}\n      data-test={ToolbarFieldRangedMonthly.defaultProps.viewId}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{viewId: string, t: Function, options: Array, value: string}}\n */\nToolbarFieldRangedMonthly.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  t: PropTypes.func,\n  value: PropTypes.string,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{viewId: string, t: translate, options: Array, value: string}}\n */\nToolbarFieldRangedMonthly.defaultProps = {\n  options: toolbarFieldOptions,\n  t: translate,\n  value: translate('curiosity-toolbar.granularityRange', { context: 'current' }),\n  viewId: 'toolbarFieldRangeGranularity'\n};\n\nexport { ToolbarFieldRangedMonthly as default, ToolbarFieldRangedMonthly, toolbarFieldOptions };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, store, useSelector } from '../../redux';\nimport { Select } from '../form/select';\nimport { RHSM_API_QUERY_UOM_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.uom', { context: type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * Display a unit of measure (uom) field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Array} props.options\n * @param {Function} props.t\n * @param {string} props.value\n * @param {string} props.viewId\n * @returns {Node}\n */\nconst ToolbarFieldUom = ({ options, t, value, viewId }) => {\n  const updatedValue = useSelector(({ view }) => view.query?.[viewId]?.[RHSM_API_QUERY_TYPES.UOM], value);\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  /**\n   * On select, dispatch type.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @returns {void}\n   */\n  const onSelect = event =>\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.UOM],\n        viewId,\n        [RHSM_API_QUERY_TYPES.UOM]: event.value\n      }\n    ]);\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: 'uom' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder', { context: 'uom' })}\n      data-test={ToolbarFieldUom.defaultProps.viewId}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{viewId: string, t: Function, options: Array, value: string}}\n */\nToolbarFieldUom.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  t: PropTypes.func,\n  value: PropTypes.oneOf([...Object.values(FIELD_TYPES)]),\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{viewId: string, t: translate, options: Array, value: string}}\n */\nToolbarFieldUom.defaultProps = {\n  options: toolbarFieldOptions,\n  t: translate,\n  value: FIELD_TYPES.CORES,\n  viewId: 'toolbarFieldUom'\n};\n\nexport { ToolbarFieldUom as default, ToolbarFieldUom, toolbarFieldOptions };\n"],"names":["BannerMessages","state","onUpdateData","props","getMessageReports","productId","query","graphTallyQuery","apiQueries","dateHelpers","startDate","endDate","RHSM_API_QUERY_TYPES","GRANULARITY_TYPES","toISOString","this","prevProps","_isEqual","appMessages","messages","updatedMessages","length","Object","entries","forEach","key","value","message","find","id","push","map","title","variant","AlertVariant","actionClose","AlertActionCloseButton","onClose","setState","Alert","alerts","renderAlerts","className","React","defaultProps","helpers","translate","context","appName","Button","isInline","component","icon","ExternalLinkAltIcon","iconPosition","target","href","makeMapStateToProps","reduxSelectors","ConnectedBannerMessages","connect","dispatch","reduxActions","InventoryTabs","onTab","index","store","type","reduxTypes","tabs","activeTab","children","defaultActiveTab","isDisabled","t","updatedChildren","child","active","content","count","Title","headingLevel","Tabs","ConnectedInventoryTabs","inventory","ProductView","routeDetail","toolbarGraph","toolbarGraphDescription","toolbarProduct","pathParameter","productConfig","productLabel","productParameter","viewId","viewParameter","inventoryHostsQuery","inventorySubscriptionsQuery","initialToolbarFilters","initialGraphFilters","initialGraphSettings","initialGuestsFilters","initialInventoryFilters","initialInventorySettings","initialSubscriptionsInventoryFilters","initialQuery","initialGraphTallyQuery","initialInventoryHostsQuery","initialInventorySubscriptionsQuery","initialToolbarQuery","toolbarQuery","graphCardTooltip","Tooltip","position","TooltipPosition","enableFlip","distance","entryDelay","exitDelay","graphCardTitle","PageLayout","PageHeader","includeTour","PageMessages","PageToolbar","ConnectedToolbar","filterOptions","PageSection","ConnectedGraphCard","filterGraphData","settings","cardTitle","ToolbarFieldGranularity","InventoryTab","ConnectedInventoryList","filterGuestsData","filterInventoryData","ConnectedInventorySubscriptions","ProductViewOpenShiftContainer","viewProductLabel","uomValue","useSelector","view","PageColumns","config","updatedUomValue","productContextFilterUom","uomFilter","graphFilters","inventoryFilters","subscriptionsInventoryFilters","filter","isOptional","RegExp","test","RHSM_API_PATH_ID_TYPES","ToolbarFieldUom","ToolbarFieldRangedMonthly","renderProduct","toolbarFieldOptions","values","FIELD_TYPES","selected","options","updatedValue","updatedOptions","option","Select","onSelect","event","selectedOptions","placeholder","listDateTimeRanges","dateTime","SelectPosition","maxHeight"],"sourceRoot":""}