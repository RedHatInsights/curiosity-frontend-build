{"version":3,"file":"js/1824.17ea673906d749e9420f.js","mappings":"+TA+BMA,EAAoB,WAMf,IAAAC,EAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,CAAC,EAACG,EAAAJ,EALJK,kBAAAA,OAAiB,IAAAD,EAAGE,EAAAA,GAAAA,KAAAA,kBAAmCF,EAAAG,EAAAP,EACvDQ,YAAaC,OAAgB,IAAAF,EAAGG,EAAAA,GAAAA,WAAAA,YAAiCH,EAAAI,EAAAX,EACjEY,WAAYC,OAAe,IAAAF,EAAGC,EAAAA,WAAUD,EAAAG,EAAAd,EACxCe,gBAAiBC,OAAoB,IAAAF,EAAGC,EAAAA,gBAAeD,EAAAG,EAAAjB,EACvDkB,qBAAsBC,OAAyB,IAAAF,EAAGP,EAAAA,GAAAA,WAAAA,qBAA0CO,EAE5FG,EAAsBP,IAAdQ,EAASD,EAATC,UACFC,EAAQN,IACRO,EAAWd,IACjBe,EAA4CL,EAA0B,CACpEM,GAAI,WACJC,SAAU,SAAAC,GAAA,IAAAC,EAAGC,EAAQF,EAARE,SAAQ,OAAOA,SAAgB,QAARD,EAARC,EAAUC,cAAM,IAAAF,OAAR,EAARA,EAAmBP,EAAU,IAFnDU,EAAKP,EAALO,MAAOC,EAASR,EAATQ,UAAWC,EAAOT,EAAPS,QAASC,EAAIV,EAAJU,MAKnCC,EAAAA,EAAAA,IAAwB,WACtB,GAAId,EAAW,KAAAe,EACbC,EAA+BC,EAAAA,GAAAA,kBAA8B,WAArDC,EAASF,EAATE,UAAWC,EAAOH,EAAPG,QACbC,GAAYC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACbpB,GAAK,IAAAc,EAAA,IAAAO,EAAAA,EAAAA,GAAAP,EACPQ,EAAAA,GAAAA,YAAuCC,EAAAA,GAAAA,QAAuBF,EAAAA,EAAAA,GAAAP,EAC9DQ,EAAAA,GAAAA,WAAsCL,EAAUO,gBAAaH,EAAAA,EAAAA,GAAAP,EAC7DQ,EAAAA,GAAAA,SAAoCJ,EAAQM,eAAaV,IAG5D/B,EAAkBgB,EAAWoB,EAA7BpC,CAA2CkB,EAC7C,CACF,GAAG,CAACF,EAAWC,IAEf,IAAMyB,EAAc,CAClBC,qBAAqB,GAGvB,GAAIhB,EAAW,KAAAiB,EAAAC,EACbC,EAA0BjB,GAAQ,CAAC,EAACkB,EAAAD,EAA5BtB,SAAAA,OAAQ,IAAAuB,EAAG,CAAC,EAACA,EAErBL,EAAYC,yBAMF7C,KALR0B,SAAc,QAANoB,EAARpB,EAAUK,YAAI,IAAAe,GACD,QADCC,EAAdD,EACII,iBAAS,IAAAH,OADL,EAARA,EAEII,MACA,SAAAC,GAAsF,OACvE,IADkFA,EAA7FC,EAAAA,GAAAA,4CAAAA,yBACe,IAE3B,CAEA,MAAO,CACLzB,MAAAA,EACAC,UAAAA,EACAC,QAAAA,EACAC,MAAIQ,EAAAA,EAAAA,GAAA,GACCK,GAGT,EAEMU,EAAU,CACd1D,kBAAAA,E","sources":["webpack:///./src/components/bannerMessages/bannerMessagesContext.js"],"sourcesContent":["import { useShallowCompareEffect } from 'react-use';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { dateHelpers } from '../../common';\nimport {\n  rhsmConstants,\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\n\n/**\n * @memberof BannerMessages\n * @module BannerMessagesContext\n */\n\n/**\n * ToDo: useGetAppMessages is setup to work with existing Tally response, pre-metrics\n * Banner messages scans the returned Tally listing for the HAS_CLOUDIGRADE_MISMATCH. In the future\n * this may need to be updated to pull from the \"meta\" object part of the Tally response.\n */\n/**\n * Get app messages.\n *\n * @param {object} options\n * @param {Function} options.getMessageReports\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useProductQuery\n * @param {Function} options.useSelectorsResponse\n * @returns {{data: {cloudigradeMismatch: boolean}, pending: boolean, fulfilled: boolean, error: boolean}}\n */\nconst useGetAppMessages = ({\n  getMessageReports = reduxActions.rhsm.getMessageReports,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductQuery();\n  const dispatch = useAliasDispatch();\n  const { error, fulfilled, pending, data } = useAliasSelectorsResponse({\n    id: 'messages',\n    selector: ({ messages }) => messages?.report?.[productId]\n  });\n\n  useShallowCompareEffect(() => {\n    if (productId) {\n      const { startDate, endDate } = dateHelpers.getRangedDateTime('CURRENT');\n      const updatedQuery = {\n        ...query,\n        [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY,\n        [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate.toISOString(),\n        [RHSM_API_QUERY_SET_TYPES.END_DATE]: endDate.toISOString()\n      };\n\n      getMessageReports(productId, updatedQuery)(dispatch);\n    }\n  }, [productId, query]);\n\n  const updatedData = {\n    cloudigradeMismatch: false\n  };\n\n  if (fulfilled) {\n    const { messages = {} } = data || {};\n\n    updatedData.cloudigradeMismatch =\n      messages?.data\n        ?.reverse()\n        ?.find(\n          ({ [rhsmConstants.RHSM_API_RESPONSE_TALLY_CAPACITY_META_TYPES.HAS_CLOUDIGRADE_MISMATCH]: mismatch }) =>\n            mismatch === true\n        ) !== undefined;\n  }\n\n  return {\n    error,\n    fulfilled,\n    pending,\n    data: {\n      ...updatedData\n    }\n  };\n};\n\nconst context = {\n  useGetAppMessages\n};\n\nexport { context as default, context, useGetAppMessages };\n"],"names":["useGetAppMessages","_ref","arguments","length","undefined","_ref$getMessageReport","getMessageReports","reduxActions","_ref$useDispatch","useDispatch","useAliasDispatch","storeHooks","_ref$useProduct","useProduct","useAliasProduct","_ref$useProductQuery","useProductQuery","useAliasProductQuery","_ref$useSelectorsResp","useSelectorsResponse","useAliasSelectorsResponse","_useAliasProduct","productId","query","dispatch","_useAliasSelectorsRes","id","selector","_ref2","_messages$report","messages","report","error","fulfilled","pending","data","useShallowCompareEffect","_objectSpread2","_dateHelpers$getRange","dateHelpers","startDate","endDate","updatedQuery","_objectSpread","_defineProperty","RHSM_API_QUERY_SET_TYPES","GRANULARITY_TYPES","toISOString","updatedData","cloudigradeMismatch","_messages$data","_messages$data$revers","_ref3","_ref3$messages","reverse","find","_ref4","rhsmConstants","context"],"sourceRoot":""}