{"version":3,"file":"js/2896.1675453305955.8d79bbccd579a3517161.js","mappings":"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","sources":["webpack:///./src/components/inventoryCard/inventoryCardContext.js"],"sourcesContent":["import { useShallowCompareEffect } from 'react-use';\nimport _camelCase from 'lodash/camelCase';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { reduxActions, reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductInventoryHostsQuery } from '../productView/productViewContext';\nimport {\n  RHSM_API_QUERY_INVENTORY_HOSTS_SORT_TYPES as HOSTS_SORT_TYPES,\n  RHSM_API_QUERY_INVENTORY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_INVENTORY_SORT_TYPES as SORT_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * Combined Redux RHSM Actions, getHostsInventory, and inventory selector response.\n *\n * @param {object} options\n * @param {boolean} options.isDisabled\n * @param {Function} options.getInventory\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useProductInventoryQuery\n * @param {Function} options.useSelectorsResponse\n * @returns {{data: (*|{}|*[]|{}), pending: boolean, fulfilled: boolean, error: boolean}}\n */\nconst useGetHostsInventory = ({\n  isDisabled = false,\n  getInventory = reduxActions.rhsm.getHostsInventory,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventoryHostsQuery,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductInventoryQuery();\n  const dispatch = useAliasDispatch();\n  const { cancelled, pending, data, ...response } = useAliasSelectorsResponse(\n    ({ inventory }) => inventory?.hostsInventory?.[productId]\n  );\n\n  useShallowCompareEffect(() => {\n    if (!isDisabled) {\n      getInventory(productId, query)(dispatch);\n    }\n  }, [dispatch, isDisabled, productId, query]);\n\n  return {\n    ...response,\n    pending: pending || cancelled || false,\n    data: (data?.length === 1 && data[0]) || data || {}\n  };\n};\n\n/**\n * Combined Redux RHSM Actions, getInstancesInventory, and inventory selector response.\n *\n * @param {object} options\n * @param {boolean} options.isDisabled\n * @param {Function} options.getInventory\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useProductInventoryQuery\n * @param {Function} options.useSelectorsResponse\n * @returns {{data: (*|{}|*[]|{}), pending: boolean, fulfilled: boolean, error: boolean}}\n */\nconst useGetInstancesInventory = ({\n  isDisabled = false,\n  getInventory = reduxActions.rhsm.getInstancesInventory,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventoryHostsQuery,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductInventoryQuery();\n  const dispatch = useAliasDispatch();\n  const { cancelled, pending, data, ...response } = useAliasSelectorsResponse(\n    ({ inventory }) => inventory?.instancesInventory?.[productId]\n  );\n\n  useShallowCompareEffect(() => {\n    if (!isDisabled) {\n      getInventory(productId, query)(dispatch);\n    }\n  }, [dispatch, isDisabled, productId, query]);\n\n  return {\n    ...response,\n    pending: pending || cancelled || false,\n    data: (data?.length === 1 && data[0]) || data || {}\n  };\n};\n\n/**\n * An onPage callback for instances inventory.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnPageInstances = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for instances inventory.\n   *\n   * @event onPage\n   * @param {object} params\n   * @param {number} params.offset\n   * @param {number} params.perPage\n   * @returns {void}\n   */\n  return ({ offset, perPage }) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.OFFSET],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.OFFSET]: offset\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.LIMIT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.LIMIT]: perPage\n      }\n    ]);\n  };\n};\n\n/**\n * An onColumnSort callback for hosts inventory.\n *\n * @param {object} options\n * @param {object} options.sortColumns\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnColumnSortHosts = ({\n  sortColumns = HOSTS_SORT_TYPES,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for hosts inventory.\n   *\n   * @event onColumnSort\n   * @param {*} _data\n   * @param {object} params\n   * @param {string} params.direction\n   * @param {string} params.id\n   * @returns {void}\n   */\n  return (_data, { direction, id }) => {\n    const updatedSortColumn = Object.values(sortColumns).find(value => value === id || _camelCase(value) === id);\n    let updatedDirection;\n\n    if (!updatedSortColumn) {\n      if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n        console.warn(`Sorting can only be performed on select fields, confirm field ${id} is allowed.`);\n      }\n      return;\n    }\n\n    switch (direction) {\n      case SortByDirection.desc:\n        updatedDirection = SORT_DIRECTION_TYPES.DESCENDING;\n        break;\n      default:\n        updatedDirection = SORT_DIRECTION_TYPES.ASCENDING;\n        break;\n    }\n\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.DIRECTION],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.DIRECTION]: updatedDirection\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.SORT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.SORT]: updatedSortColumn\n      }\n    ]);\n  };\n};\n\n/**\n * An onColumnSort callback for instances inventory.\n *\n * @param {object} options\n * @param {object} options.sortColumns\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnColumnSortInstances = ({\n  sortColumns = SORT_TYPES,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for instances inventory.\n   *\n   * @event onColumnSort\n   * @param {*} _data\n   * @param {object} params\n   * @param {string} params.direction\n   * @param {string} params.id\n   * @returns {void}\n   */\n  return (_data, { direction, id }) => {\n    const updatedSortColumn = Object.values(sortColumns).find(value => value === id || _camelCase(value) === id);\n    let updatedDirection;\n\n    if (!updatedSortColumn) {\n      if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n        console.warn(`Sorting can only be performed on select fields, confirm field ${id} is allowed.`);\n      }\n      return;\n    }\n\n    switch (direction) {\n      case SortByDirection.desc:\n        updatedDirection = SORT_DIRECTION_TYPES.DESCENDING;\n        break;\n      default:\n        updatedDirection = SORT_DIRECTION_TYPES.ASCENDING;\n        break;\n    }\n\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.DIRECTION],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.DIRECTION]: updatedDirection\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.SORT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.SORT]: updatedSortColumn\n      }\n    ]);\n  };\n};\n\nconst context = {\n  useGetHostsInventory,\n  useGetInstancesInventory,\n  useOnPageInstances,\n  useOnColumnSortHosts,\n  useOnColumnSortInstances\n};\n\nexport {\n  context as default,\n  context,\n  useGetHostsInventory,\n  useGetInstancesInventory,\n  useOnPageInstances,\n  useOnColumnSortHosts,\n  useOnColumnSortInstances\n};\n"],"names":["useGetHostsInventory","isDisabled","getInventory","reduxActions","useDispatch","useAliasDispatch","storeHooks","useProduct","useAliasProduct","useProductInventoryQuery","useAliasProductInventoryQuery","useProductInventoryHostsQuery","useSelectorsResponse","useAliasSelectorsResponse","productId","query","dispatch","inventory","hostsInventory","cancelled","pending","data","response","useShallowCompareEffect","length","useGetInstancesInventory","instancesInventory","useOnPageInstances","offset","perPage","type","reduxTypes","RHSM_API_QUERY_SET_TYPES","viewId","useOnColumnSortHosts","sortColumns","HOSTS_SORT_TYPES","_data","updatedDirection","direction","id","updatedSortColumn","Object","values","find","value","_camelCase","SortByDirection","SORT_DIRECTION_TYPES","helpers","console","warn","useOnColumnSortInstances","SORT_TYPES","context"],"sourceRoot":""}