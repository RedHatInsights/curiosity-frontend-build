{"version":3,"file":"js/4418.47f3e9ee08fe3e20828a.js","mappings":"oRAuBMA,EAAuB,SAAC,GAOxB,IANJC,EAMI,EANJA,MACAC,EAKI,EALJA,MACAC,EAII,EAJJA,EACaC,EAGT,EAHJC,YACcC,EAEV,EAFJC,aAEI,GAC6BC,EAD7B,EADJC,cAEQC,EADJ,EACIA,aAAcC,EADlB,EACkBA,OAChBC,EAAWR,IACXS,EAAcP,EAClBJ,EAAMY,SAASC,KAAI,gBAAGC,EAAH,EAAGA,GAAH,OAAY,qCAAGC,MAAkBC,cAArB,aAAe,YAAkBP,EAAlB,YAA4BK,UAG5EG,EAAAA,EAAAA,IAAS,WACPjB,EAAMY,SAASM,SAAQ,WAASC,GAAU,IAAhBL,EAAgB,EAAhBA,KACDH,MAAAA,OAAA,EAAAA,EAAcQ,KAAUpB,EAAMqB,UAAUN,KAG7Df,EAAMsB,KAAKP,SAWjB,IAAMQ,EAAU,SAAAR,GACd,IAAMS,EAAgBxB,EAAMyB,OAAOV,GAEnCJ,EAAS,CACPe,KAAMC,EAAAA,GAAAA,MAAAA,iBACNZ,GAAI,GAAF,OAAKL,EAAL,YAAeK,GACjBa,MAAOJ,KAIX,OACE,kBAAC,aAAD,KACGvB,EAAMY,SAASC,KAAI,WAAgDM,GAAU,IAAvDL,EAAuD,EAAvDA,GAAIc,EAAmD,EAAnDA,YAAqBC,EAA8B,EAAtCC,OAAsC,IAAvBC,KAC/CC,SADsE,MAAhB,GAAgB,GAEpEC,MAAK,gBAAGC,EAAH,EAAGA,EAAGC,EAAN,EAAMA,QAAN,OAAqBD,GAAK,IAAiB,IAAZC,GAAsBD,GAAK,IAAqB,IAAhBN,OAA0B,EAEhGQ,EAAenC,EACnB,CAAC,yBAAD,OAA2B2B,EAAe,YAAgBd,GAAM,4BAChE,CACEuB,QAAS7B,EACT8B,QAAS9B,IAIP+B,EAAiBtC,EAAE,gCAAD,OACW2B,EAAe,aAAiB,GAD3C,YACiDd,GACvE,CACEuB,QAAS7B,EACT8B,QAAS9B,GAEX,CAAC,0BAAMgC,MAAO,CAAEC,WAAY,cAGxBC,GAAiB/B,MAAAA,OAAA,EAAAA,EAAcQ,KAAUpB,EAAMqB,UAAUN,GAEzD6B,EACJ,kBAAC,EAAAC,OAAD,CACEtB,QAAS,kBAAMA,EAAQR,IACvB+B,WAAY,kBAAMvB,EAAQR,IAC1BgC,UAAU,qCACVC,SAAU,EACVC,IAAG,2BAAsBlC,GACzBmC,QAAQ,OACRC,UAAU,IACVlB,WAAYA,EACZmB,MACInB,GAAcU,IAAmB,kBAAC,EAAAU,UAAD,CAAWC,OAAO,cACnD,kBAAC,EAAAD,UAAD,CACEC,OAASzB,EAAe,OAAW,SACnCY,MAAO,CAAEc,WAAatB,GAA4BU,EAAd,SAA6C,WACjFa,KAAM1B,KAKXO,GAIL,OAAIG,EAEA,kBAAC,EAAAiB,QAAD,CACER,IAAG,4BAAuBlC,GAC1B2C,QAAS,2BAAIlB,GACbmB,SAAUC,EAAAA,gBAAAA,IACVC,YAAU,EACVC,SAAU,GAETlB,GAKAA,OAqCf7C,EAAqBgE,aAAe,CAClC/D,MAAO,CACLsB,KAAM0C,EAAAA,GAAAA,KACNvC,OAAQuC,EAAAA,GAAAA,KACR3C,UAAW2C,EAAAA,GAAAA,MAEb/D,MAAO,CACLY,SAAU,IAEZX,EAAG+D,EAAAA,UACH7D,YAAa8D,EAAAA,GAAAA,WAAAA,YACb5D,aAAc4D,EAAAA,GAAAA,WAAAA,aACd1D,WAAAA,EAAAA","sources":["webpack:///./src/components/graphCard/graphCardChartLegend.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { useMount } from 'react-use';\nimport { useProduct } from '../productView/productViewContext';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { ChartIcon } from '../chart/chartIcon';\n\n/**\n * A custom chart legend.\n *\n * @fires onClick\n * @param {object} props\n * @param {object} props.chart\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useDispatch\n * @param {Function} props.useProduct\n * @param {Function} props.useSelectors\n * @returns {Node}\n */\nconst GraphCardChartLegend = ({\n  chart,\n  datum,\n  t,\n  useDispatch: useAliasDispatch,\n  useSelectors: useAliasSelectors,\n  useProduct: useAliasProduct\n}) => {\n  const { productLabel, viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n  const legendItems = useAliasSelectors(\n    datum.dataSets.map(({ id }) => ({ graph }) => graph.legend?.[`${viewId}-${id}`])\n  );\n\n  useMount(() => {\n    datum.dataSets.forEach(({ id }, index) => {\n      const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n\n      if (checkIsToggled) {\n        chart.hide(id);\n      }\n    });\n  });\n\n  /**\n   * Toggle legend item and chart.\n   *\n   * @event onClick\n   * @param {string} id\n   */\n  const onClick = id => {\n    const updatedToggle = chart.toggle(id);\n\n    dispatch({\n      type: reduxTypes.graph.SET_GRAPH_LEGEND,\n      id: `${viewId}-${id}`,\n      value: updatedToggle\n    });\n  };\n\n  return (\n    <React.Fragment>\n      {datum.dataSets.map(({ id, isThreshold, stroke: color, data = [] }, index) => {\n        const isDisabled =\n          !data.find(({ y, hasData }) => (y >= 0 && hasData === true) || (y >= 0 && isThreshold === true)) || false;\n\n        const labelContent = t(\n          [`curiosity-graph.label_${(isThreshold && 'threshold') || id}`, 'curiosity-graph.label_no'],\n          {\n            product: productLabel,\n            context: productLabel\n          }\n        );\n\n        const tooltipContent = t(\n          `curiosity-graph.legendTooltip${(isThreshold && '_threshold') || ''}_${id}`,\n          {\n            product: productLabel,\n            context: productLabel\n          },\n          [<span style={{ whiteSpace: 'nowrap' }} />]\n        );\n\n        const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n\n        const button = (\n          <Button\n            onClick={() => onClick(id)}\n            onKeyPress={() => onClick(id)}\n            className=\"curiosity-usage-graph__legend-item\"\n            tabIndex={0}\n            key={`curiosity-button-${id}`}\n            variant=\"link\"\n            component=\"a\"\n            isDisabled={isDisabled}\n            icon={\n              ((isDisabled || checkIsToggled) && <ChartIcon symbol=\"eyeSlash\" />) || (\n                <ChartIcon\n                  symbol={(isThreshold && 'dash') || 'square'}\n                  style={{ visibility: (isDisabled && 'hidden') || (checkIsToggled && 'hidden') || 'visible' }}\n                  fill={color}\n                />\n              )\n            }\n          >\n            {labelContent}\n          </Button>\n        );\n\n        if (tooltipContent) {\n          return (\n            <Tooltip\n              key={`curiosity-tooltip-${id}`}\n              content={<p>{tooltipContent}</p>}\n              position={TooltipPosition.top}\n              enableFlip\n              distance={5}\n            >\n              {button}\n            </Tooltip>\n          );\n        }\n\n        return button;\n      })}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, t: Function, useDispatch: Function, useSelectors: Function, chart: object}}\n */\nGraphCardChartLegend.propTypes = {\n  chart: PropTypes.shape({\n    hide: PropTypes.func,\n    toggle: PropTypes.func,\n    isToggled: PropTypes.func\n  }),\n  datum: PropTypes.shape({\n    dataSets: PropTypes.arrayOf(\n      PropTypes.shape({\n        stroke: PropTypes.string.isRequired,\n        id: PropTypes.string.isRequired,\n        isThreshold: PropTypes.bool\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useDispatch: PropTypes.func,\n  useSelectors: PropTypes.func,\n  useProduct: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: object, useProduct: Function, t: Function, useDispatch: Function, useSelectors: Function, chart: object}}\n */\nGraphCardChartLegend.defaultProps = {\n  chart: {\n    hide: helpers.noop,\n    toggle: helpers.noop,\n    isToggled: helpers.noop\n  },\n  datum: {\n    dataSets: []\n  },\n  t: translate,\n  useDispatch: storeHooks.reactRedux.useDispatch,\n  useSelectors: storeHooks.reactRedux.useSelectors,\n  useProduct\n};\n\nexport { GraphCardChartLegend as default, GraphCardChartLegend };\n"],"names":["GraphCardChartLegend","chart","datum","t","useAliasDispatch","useDispatch","useAliasSelectors","useSelectors","useAliasProduct","useProduct","productLabel","viewId","dispatch","legendItems","dataSets","map","id","graph","legend","useMount","forEach","index","isToggled","hide","onClick","updatedToggle","toggle","type","reduxTypes","value","isThreshold","color","stroke","data","isDisabled","find","y","hasData","labelContent","product","context","tooltipContent","style","whiteSpace","checkIsToggled","button","Button","onKeyPress","className","tabIndex","key","variant","component","icon","ChartIcon","symbol","visibility","fill","Tooltip","content","position","TooltipPosition","enableFlip","distance","defaultProps","helpers","translate","storeHooks"],"sourceRoot":""}