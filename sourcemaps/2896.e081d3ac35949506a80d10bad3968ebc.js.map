{"version":3,"file":"js/2896.3112da3c3a284ab7254a.js","mappings":"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","sources":["webpack:///./src/components/inventoryCard/inventoryCardContext.js"],"sourcesContent":["import { useShallowCompareEffect } from 'react-use';\nimport _camelCase from 'lodash/camelCase';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { reduxActions, reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductInventoryHostsQuery } from '../productView/productViewContext';\nimport {\n  RHSM_API_QUERY_INVENTORY_HOSTS_SORT_TYPES as HOSTS_SORT_TYPES,\n  RHSM_API_QUERY_INVENTORY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_INVENTORY_SORT_TYPES as SORT_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * @memberof InventoryCard\n * @module InventoryCardContext\n */\n\n/**\n * Combined Redux RHSM Actions, getHostsInventory, and inventory selector response.\n *\n * @param {object} options\n * @param {boolean} options.isDisabled\n * @param {Function} options.getInventory\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useProductInventoryQuery\n * @param {Function} options.useSelectorsResponse\n * @returns {{data: (*|{}|Array|{}), pending: boolean, fulfilled: boolean, error: boolean}}\n */\nconst useGetHostsInventory = ({\n  isDisabled = false,\n  getInventory = reduxActions.rhsm.getHostsInventory,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventoryHostsQuery,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductInventoryQuery();\n  const dispatch = useAliasDispatch();\n  const { cancelled, pending, data, ...response } = useAliasSelectorsResponse(\n    ({ inventory }) => inventory?.hostsInventory?.[productId]\n  );\n\n  useShallowCompareEffect(() => {\n    if (!isDisabled) {\n      getInventory(productId, query)(dispatch);\n    }\n  }, [dispatch, isDisabled, productId, query]);\n\n  return {\n    ...response,\n    pending: pending || cancelled || false,\n    data: (data?.length === 1 && data[0]) || data || {}\n  };\n};\n\n/**\n * Combined Redux RHSM Actions, getInstancesInventory, and inventory selector response.\n *\n * @param {object} options\n * @param {boolean} options.isDisabled\n * @param {Function} options.getInventory\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useProductInventoryQuery\n * @param {Function} options.useSelectorsResponse\n * @returns {{data: (*|{}|Array|{}), pending: boolean, fulfilled: boolean, error: boolean}}\n */\nconst useGetInstancesInventory = ({\n  isDisabled = false,\n  getInventory = reduxActions.rhsm.getInstancesInventory,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventoryHostsQuery,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductInventoryQuery();\n  const dispatch = useAliasDispatch();\n  const { cancelled, pending, data, ...response } = useAliasSelectorsResponse(\n    ({ inventory }) => inventory?.instancesInventory?.[productId]\n  );\n\n  useShallowCompareEffect(() => {\n    if (!isDisabled) {\n      getInventory(productId, query)(dispatch);\n    }\n  }, [dispatch, isDisabled, productId, query]);\n\n  return {\n    ...response,\n    pending: pending || cancelled || false,\n    data: (data?.length === 1 && data[0]) || data || {}\n  };\n};\n\n/**\n * An onPage callback for instances inventory.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnPageInstances = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for instances inventory.\n   *\n   * @event onPage\n   * @param {object} params\n   * @param {number} params.offset\n   * @param {number} params.perPage\n   * @returns {void}\n   */\n  return ({ offset, perPage }) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.OFFSET],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.OFFSET]: offset\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.LIMIT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.LIMIT]: perPage\n      }\n    ]);\n  };\n};\n\n/**\n * An onColumnSort callback for hosts inventory.\n *\n * @param {object} options\n * @param {object} options.sortColumns\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnColumnSortHosts = ({\n  sortColumns = HOSTS_SORT_TYPES,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for hosts inventory.\n   *\n   * @event onColumnSort\n   * @param {*} _data\n   * @param {object} params\n   * @param {string} params.direction\n   * @param {string} params.id\n   * @returns {void}\n   */\n  return (_data, { direction, id }) => {\n    const updatedSortColumn = Object.values(sortColumns).find(value => value === id || _camelCase(value) === id);\n    let updatedDirection;\n\n    if (!updatedSortColumn) {\n      if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n        console.warn(`Sorting can only be performed on select fields, confirm field ${id} is allowed.`);\n      }\n      return;\n    }\n\n    switch (direction) {\n      case SortByDirection.desc:\n        updatedDirection = SORT_DIRECTION_TYPES.DESCENDING;\n        break;\n      default:\n        updatedDirection = SORT_DIRECTION_TYPES.ASCENDING;\n        break;\n    }\n\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.DIRECTION],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.DIRECTION]: updatedDirection\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.SORT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.SORT]: updatedSortColumn\n      }\n    ]);\n  };\n};\n\n/**\n * An onColumnSort callback for instances inventory.\n *\n * @param {object} options\n * @param {object} options.sortColumns\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnColumnSortInstances = ({\n  sortColumns = SORT_TYPES,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for instances inventory.\n   *\n   * @event onColumnSort\n   * @param {*} _data\n   * @param {object} params\n   * @param {string} params.direction\n   * @param {string} params.id\n   * @returns {void}\n   */\n  return (_data, { direction, id }) => {\n    const updatedSortColumn = Object.values(sortColumns).find(value => value === id || _camelCase(value) === id);\n    let updatedDirection;\n\n    if (!updatedSortColumn) {\n      if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n        console.warn(`Sorting can only be performed on select fields, confirm field ${id} is allowed.`);\n      }\n      return;\n    }\n\n    switch (direction) {\n      case SortByDirection.desc:\n        updatedDirection = SORT_DIRECTION_TYPES.DESCENDING;\n        break;\n      default:\n        updatedDirection = SORT_DIRECTION_TYPES.ASCENDING;\n        break;\n    }\n\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.DIRECTION],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.DIRECTION]: updatedDirection\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.SORT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.SORT]: updatedSortColumn\n      }\n    ]);\n  };\n};\n\nconst context = {\n  useGetHostsInventory,\n  useGetInstancesInventory,\n  useOnPageInstances,\n  useOnColumnSortHosts,\n  useOnColumnSortInstances\n};\n\nexport {\n  context as default,\n  context,\n  useGetHostsInventory,\n  useGetInstancesInventory,\n  useOnPageInstances,\n  useOnColumnSortHosts,\n  useOnColumnSortInstances\n};\n"],"names":["useGetHostsInventory","_ref","arguments","length","undefined","_ref$isDisabled","isDisabled","_ref$getInventory","getInventory","reduxActions","_ref$useDispatch","useDispatch","useAliasDispatch","storeHooks","_ref$useProduct","useProduct","useAliasProduct","_ref$useProductInvent","useProductInventoryQuery","useAliasProductInventoryQuery","useProductInventoryHostsQuery","_ref$useSelectorsResp","useSelectorsResponse","useAliasSelectorsResponse","_useAliasProduct","productId","query","dispatch","_useAliasSelectorsRes","_ref2","_inventory$hostsInven","inventory","hostsInventory","cancelled","pending","data","response","_objectWithoutProperties","_excluded","useShallowCompareEffect","_objectSpread","useGetInstancesInventory","_ref3","_ref3$isDisabled","_ref3$getInventory","_ref3$useDispatch","_ref3$useProduct","_ref3$useProductInven","_ref3$useSelectorsRes","_useAliasProduct2","_useAliasSelectorsRes2","_ref4","_inventory$instancesI","instancesInventory","_excluded2","useOnPageInstances","_ref5","_ref5$useDispatch","_ref5$useProduct","_useAliasProduct3","_ref6","offset","perPage","_defineProperty","type","reduxTypes","RHSM_API_QUERY_SET_TYPES","viewId","useOnColumnSortHosts","_ref9","_ref9$sortColumns","sortColumns","HOSTS_SORT_TYPES","_ref9$useDispatch","_ref9$useProduct","_useAliasProduct4","_data","_ref10","updatedDirection","direction","id","updatedSortColumn","Object","values","find","value","_camelCase","SortByDirection","SORT_DIRECTION_TYPES","helpers","console","warn","concat","useOnColumnSortInstances","_ref13","_ref13$sortColumns","SORT_TYPES","_ref13$useDispatch","_ref13$useProduct","_useAliasProduct5","_ref14","context"],"sourceRoot":""}