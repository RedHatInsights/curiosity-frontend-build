{"version":3,"file":"js/7098.02080d4bb151ae012b46.js","mappings":"6XAmBA,MAAMA,EAA2BA,KAAMC,EAAAA,EAAAA,YAAWC,EAAAA,uBAO5CC,EAAoBA,KAAMF,EAAAA,EAAAA,YAAWG,EAAAA,gBAyBrCC,EAAgBC,IAYhB,IAAAC,EAAA,IAZiB,aACrBC,EAAY,uBACZC,EAAsB,sBACtBC,EAAqB,MACrBC,EAAK,SACLC,EAAQ,WACRC,EAAU,gBACVC,EAAe,gBACfC,EACAf,yBAA0BgB,EAC1Bb,kBAAmBc,KAChBC,GACJZ,EACC,MAAOa,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,IACrC,WAAEC,EAAU,oBAAEC,EAAmB,oBAAEC,EAAsBC,EAAAA,EAAAA,MAAiBR,KAC1E,iBAAES,GAAqBV,KACrBW,IAAKC,EAAuBC,KAAMC,GACf,iBAAjBtB,GAA6B,CAAEmB,IAAKnB,EAAcqB,KAAMrB,IAAmBA,EAUrF,IAAIuB,EAEJ,IAVAC,EAAAA,EAAAA,IAAS,KACPZ,GAAa,EAAK,KAGpBa,EAAAA,EAAAA,YAAU,KACRT,EAAoBI,EAAuBjB,EAAMuB,OAAO,GACvD,CAACN,EAAuBjB,EAAOa,IAI9Bb,EAAMuB,OAAQ,CAChB,MAAMC,EAAiB,CAAEC,YAAY,GAEjCtB,IACFqB,EAAeE,QAAU,IAAMvB,EAAgBN,GAC/C2B,EAAeC,YAAa,GAG1B3B,IACF0B,EAAeG,cAAgB7B,GAG7BC,IACFyB,EAAeI,aAAe7B,GAGhCqB,EACES,IAAAA,cAACC,EAAAA,YAAW,CAACC,QAAQ,cACnBF,IAAAA,cAACG,EAAAA,WAASC,EAAAA,EAAAA,GAAA,CAACjB,IAAKC,EAAuBpB,aAAcsB,GAA4BK,GAC9ExB,EAAMkC,KAAIC,IACT,MAAMC,EAAkC,iBAATD,GAAqB,CAAEnB,IAAKmB,EAAME,KAAMF,IAAWA,EAClF,OACEN,IAAAA,cAACS,EAAAA,KAAI,CAACtB,IAAKoB,EAAepB,IAAKU,QAASA,IAAMxB,EAAWe,EAAuBmB,IAC7EA,EAAeC,KACX,KAMnB,CAEA,MAAME,GACF5B,GAAcH,IAAaI,SAA4B,QAAThB,EAAnBgB,EAAqB4B,eAAO,IAAA5C,OAAT,EAAnBA,EAA8B6C,qBAAsB1B,aAAgB,EAAhBA,EAAkByB,SAErG,OACEX,IAAAA,cAACA,IAAAA,SAAc,KACZzB,GAAmByB,IAAAA,cAACC,EAAAA,YAAgBvB,EAAQN,GAC5CsC,IAAaG,EAAAA,EAAAA,cAAatB,EAAWmB,GACvB,EAWrB7C,EAAciD,UAAY,CACxB9C,aAAc+C,IAAAA,OAAAA,WACd3C,SAAU2C,IAAAA,UAAoB,CAACA,IAAAA,KAAgBA,IAAAA,OAAiBC,WAChE/C,uBAAwB8C,IAAAA,OACxB7C,sBAAuB6C,IAAAA,OACvB5C,MAAO4C,IAAAA,QACLA,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,MAAgB,CAAE5B,IAAK4B,IAAAA,OAAkBP,KAAMO,IAAAA,YAExF1C,WAAY0C,IAAAA,KACZzC,gBAAiByC,IAAAA,KACjBxC,gBAAiBwC,IAAAA,KACjBvD,yBAA0BuD,IAAAA,KAC1BpD,kBAAmBoD,IAAAA,MAUrBlD,EAAcoD,aAAe,CAC3BhD,uBAAwB,KACxBC,sBAAuB,KACvBC,MAAO,GACPE,WAAYY,EAAAA,EAAAA,KACZX,gBAAiB,KACjBC,iBAAiB,EACjBf,2BACAG,oB","sources":["webpack:///./src/components/toolbar/toolbarFilter.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { useMount } from 'react-use';\nimport { ToolbarItem, Chip, ChipGroup, ToolbarContentContext, ToolbarContext } from '@patternfly/react-core';\nimport { helpers } from '../../common/helpers';\n\n/**\n * ToolbarFilter, wrapper component for Patternfly ToolbarFilter.\n *\n * @memberof Toolbar\n * @module ToolbarFilter\n */\n\n/**\n * Hook for ToolbarContentContext\n *\n * @returns {{ chipContainerRef: any }}\n */\nconst useToolbarContentContext = () => useContext(ToolbarContentContext);\n\n/**\n * Hook for ToolbarContext\n *\n * @returns {{ isExpanded: boolean, chipGroupContentRef: any, updateNumberFilters: Function }}\n */\nconst useToolbarContext = () => useContext(ToolbarContext);\n\n/**\n * FixMe: PF-React-Core v4 & v5 ToolbarFilter should conditional check \"firstElementChild\".\n * This line inside of ToolbarFilter, https://github.com/patternfly/patternfly-react/blob/v4/packages/react-core/src/components/Toolbar/ToolbarFilter.tsx#L130\n * creates an application error, adding optional chaining and a conditional check for \"firstElementChild\"\n * removes the application error. It is beyond our current scope to determine if there are additional\n * PF Toolbar issues.\n */\n/**\n * Converted PF ToolbarFilter replacement with conditional \"firstElementChild\".\n *\n * @param {object} props\n * @param {string|object} props.categoryName\n * @param {string} props.chipGroupCollapsedText\n * @param {string} props.chipGroupExpandedText\n * @param {Array} props.chips\n * @param {React.ReactNode} props.children\n * @param {Function} props.deleteChip\n * @param {Function} props.deleteChipGroup\n * @param {boolean} props.showToolbarItem\n * @param {Function} props.useToolbarContentContext\n * @param {Function} props.useToolbarContext\n * @returns {React.ReactNode}\n */\nconst ToolbarFilter = ({\n  categoryName,\n  chipGroupCollapsedText,\n  chipGroupExpandedText,\n  chips,\n  children,\n  deleteChip,\n  deleteChipGroup,\n  showToolbarItem,\n  useToolbarContentContext: useAliasToolbarContentContext,\n  useToolbarContext: useAliasToolbarContext,\n  ...props\n}) => {\n  const [isMounted, setIsMounted] = useState(false);\n  const { isExpanded, chipGroupContentRef, updateNumberFilters = helpers.noop } = useAliasToolbarContext();\n  const { chipContainerRef } = useAliasToolbarContentContext();\n  const { key: normalizedCategoryKey, name: normalizedCategoryName } =\n    (typeof categoryName === 'string' && { key: categoryName, name: categoryName }) || categoryName;\n\n  useMount(() => {\n    setIsMounted(true);\n  });\n\n  useEffect(() => {\n    updateNumberFilters(normalizedCategoryKey, chips.length);\n  }, [normalizedCategoryKey, chips, updateNumberFilters]);\n\n  let chipGroup;\n\n  if (chips.length) {\n    const chipGroupProps = { isClosable: false };\n\n    if (deleteChipGroup) {\n      chipGroupProps.onClick = () => deleteChipGroup(categoryName);\n      chipGroupProps.isClosable = true;\n    }\n\n    if (chipGroupCollapsedText) {\n      chipGroupProps.collapsedText = chipGroupCollapsedText;\n    }\n\n    if (chipGroupExpandedText) {\n      chipGroupProps.expandedText = chipGroupExpandedText;\n    }\n\n    chipGroup = (\n      <ToolbarItem variant=\"chip-group\">\n        <ChipGroup key={normalizedCategoryKey} categoryName={normalizedCategoryName} {...chipGroupProps}>\n          {chips.map(chip => {\n            const normalizedChip = (typeof chip === 'string' && { key: chip, node: chip }) || chip;\n            return (\n              <Chip key={normalizedChip.key} onClick={() => deleteChip(normalizedCategoryKey, normalizedChip)}>\n                {normalizedChip.node}\n              </Chip>\n            );\n          })}\n        </ChipGroup>\n      </ToolbarItem>\n    );\n  }\n\n  const portalRef =\n    (!isExpanded && isMounted && chipGroupContentRef?.current?.firstElementChild) || chipContainerRef?.current;\n\n  return (\n    <React.Fragment>\n      {showToolbarItem && <ToolbarItem {...props}>{children}</ToolbarItem>}\n      {portalRef && createPortal(chipGroup, portalRef)}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{deleteChip: Function, chips: Array, deleteChipGroup: Function, children: React.ReactNode,\n *     chipGroupCollapsedText: string, useToolbarContext: Function, categoryName: string|object,\n *     chipGroupExpandedText: string, showToolbarItem: boolean, useToolbarContentContext: Function}}\n */\nToolbarFilter.propTypes = {\n  categoryName: PropTypes.string.isRequired,\n  children: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,\n  chipGroupCollapsedText: PropTypes.string,\n  chipGroupExpandedText: PropTypes.string,\n  chips: PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.string, PropTypes.shape({ key: PropTypes.string, node: PropTypes.string })])\n  ),\n  deleteChip: PropTypes.func,\n  deleteChipGroup: PropTypes.func,\n  showToolbarItem: PropTypes.bool,\n  useToolbarContentContext: PropTypes.func,\n  useToolbarContext: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{deleteChip: Function, chips: Array, deleteChipGroup: Function, chipGroupCollapsedText: null,\n *     useToolbarContext: Function, chipGroupExpandedText: null, showToolbarItem: boolean,\n *     useToolbarContentContext: Function}}\n */\nToolbarFilter.defaultProps = {\n  chipGroupCollapsedText: null,\n  chipGroupExpandedText: null,\n  chips: [],\n  deleteChip: helpers.noop,\n  deleteChipGroup: null,\n  showToolbarItem: true,\n  useToolbarContentContext,\n  useToolbarContext\n};\n\nexport { ToolbarFilter as default, ToolbarFilter, useToolbarContentContext, useToolbarContext };\n"],"names":["useToolbarContentContext","useContext","ToolbarContentContext","useToolbarContext","ToolbarContext","ToolbarFilter","_ref","_chipGroupContentRef$","categoryName","chipGroupCollapsedText","chipGroupExpandedText","chips","children","deleteChip","deleteChipGroup","showToolbarItem","useAliasToolbarContentContext","useAliasToolbarContext","props","isMounted","setIsMounted","useState","isExpanded","chipGroupContentRef","updateNumberFilters","helpers","chipContainerRef","key","normalizedCategoryKey","name","normalizedCategoryName","chipGroup","useMount","useEffect","length","chipGroupProps","isClosable","onClick","collapsedText","expandedText","React","ToolbarItem","variant","ChipGroup","_extends","map","chip","normalizedChip","node","Chip","portalRef","current","firstElementChild","createPortal","propTypes","PropTypes","isRequired","defaultProps"],"sourceRoot":""}