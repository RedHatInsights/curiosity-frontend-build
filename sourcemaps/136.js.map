{"version":3,"file":"js/136.1667339796296.d894e112c142bd90378a.js","mappings":"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","sources":["webpack:///./src/components/toolbar/toolbarFieldBillingProvider.js","webpack:///./src/components/toolbar/toolbarFieldGranularity.js","webpack:///./src/components/toolbar/toolbarFieldSelectCategory.js","webpack:///./src/components/toolbar/toolbarFieldSla.js","webpack:///./src/components/toolbar/toolbarFieldUom.js","webpack:///./src/components/toolbar/toolbarFieldUsage.js","webpack:///./node_modules/fast-shallow-equal/index.js","webpack:///./node_modules/react-use/esm/useShallowCompareEffect.js","webpack:///./node_modules/react-use/esm/useCustomCompareEffect.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport {\n  RHSM_API_QUERY_BILLING_PROVIDER_TYPES as FIELD_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.billing_provider', { context: (type === '' && 'none') || type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update billing provider.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER]: value\n      }\n    ]);\n  };\n};\n\n/**\n * Display a billing provider field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {object} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductQuery\n * @returns {Node}\n */\nconst ToolbarFieldBillingProvider = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductQuery: useAliasProductQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER]: updatedValue } = useAliasProductQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'billing_provider' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'billing_provider' })}\n      position={position}\n      data-test=\"toolbarFieldBillingProvider\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldBillingProvider.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldBillingProvider.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductQuery\n};\n\nexport { ToolbarFieldBillingProvider as default, ToolbarFieldBillingProvider, toolbarFieldOptions, useOnSelect };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.granularity', { context: type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update granularity.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    const { startDate, endDate } = dateHelpers.getRangedDateTime(value);\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: value\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      }\n    ]);\n  };\n};\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {Array} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst ToolbarFieldGranularity = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_TYPES.GRANULARITY]: updatedValue } = useAliasProductGraphTallyQuery();\n  const onSelect = useAliasOnSelect();\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'granularity' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'granularity' })}\n      position={position}\n      data-test=\"toolbarFieldGranularity\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldGranularity.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldGranularity.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductGraphTallyQuery\n};\n\nexport { ToolbarFieldGranularity as default, ToolbarFieldGranularity, toolbarFieldOptions, useOnSelect };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport { useShallowCompareEffect } from 'react-use';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductToolbarConfig } from '../productView/productViewContext';\nimport { Select } from '../form/select';\nimport { RHSM_API_QUERY_SET_TYPES as RHSM_API_QUERY_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\nimport { ToolbarFieldGranularity, toolbarFieldOptions as granularityOptions } from './toolbarFieldGranularity';\nimport { ToolbarFieldRangedMonthly, toolbarFieldOptions as rangedMonthlyOptions } from './toolbarFieldRangedMonthly';\nimport {\n  ToolbarFieldBillingProvider,\n  toolbarFieldOptions as billingProviderOptions\n} from './toolbarFieldBillingProvider';\nimport { ToolbarFieldSla, toolbarFieldOptions as slaOptions } from './toolbarFieldSla';\nimport { ToolbarFieldUom, toolbarFieldOptions as uomOptions } from './toolbarFieldUom';\nimport { ToolbarFieldUsage, toolbarFieldOptions as usageOptions } from './toolbarFieldUsage';\n\n/**\n * Select field options. Use function instead of arrow func to help with component\n * display name during testing.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = [\n  {\n    title: translate('curiosity-toolbar.category', { context: RHSM_API_QUERY_TYPES.GRANULARITY }),\n    value: RHSM_API_QUERY_TYPES.GRANULARITY,\n    component: function Granularity(props) {\n      return <ToolbarFieldGranularity key=\"selectCategory_granularity\" {...props} />;\n    },\n    options: granularityOptions,\n    isClearable: false\n  },\n  {\n    title: translate('curiosity-toolbar.category', { context: 'rangedMonthly' }),\n    value: 'rangedMonthly',\n    component: function RangedMonthly(props) {\n      return <ToolbarFieldRangedMonthly key=\"selectCategory_rangedMonthly\" {...props} />;\n    },\n    options: rangedMonthlyOptions,\n    isClearable: false\n  },\n  {\n    title: translate('curiosity-toolbar.category', { context: RHSM_API_QUERY_TYPES.UOM }),\n    value: RHSM_API_QUERY_TYPES.UOM,\n    component: function Uom(props) {\n      return <ToolbarFieldUom key=\"selectCategory_uom\" {...props} />;\n    },\n    options: uomOptions,\n    isClearable: false\n  },\n  {\n    title: translate('curiosity-toolbar.category', { context: RHSM_API_QUERY_TYPES.BILLING_PROVIDER }),\n    value: RHSM_API_QUERY_TYPES.BILLING_PROVIDER,\n    component: function BillingProvider(props) {\n      return <ToolbarFieldBillingProvider key=\"selectCategory_billingProvider\" {...props} />;\n    },\n    options: billingProviderOptions,\n    isClearable: true\n  },\n  {\n    title: translate('curiosity-toolbar.category', { context: RHSM_API_QUERY_TYPES.SLA }),\n    value: RHSM_API_QUERY_TYPES.SLA,\n    component: function Sla(props) {\n      return <ToolbarFieldSla key=\"selectCategory_sla\" {...props} />;\n    },\n    options: slaOptions,\n    isClearable: true\n  },\n  {\n    title: translate('curiosity-toolbar.category', { context: RHSM_API_QUERY_TYPES.USAGE }),\n    value: RHSM_API_QUERY_TYPES.USAGE,\n    component: function Usage(props) {\n      return <ToolbarFieldUsage key=\"selectCategory_usage\" {...props} />;\n    },\n    options: usageOptions,\n    isClearable: true\n  }\n].map(option => ({\n  ...option,\n  selected: false\n}));\n\n/**\n * On select update category.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.toolbar.SET_FILTER_TYPE,\n        viewId,\n        currentFilter: value\n      }\n    ]);\n  };\n};\n\n/**\n * Return filtered category options, current, and initial value.\n *\n * @param {object} options\n * @param {Array} options.categoryOptions\n * @param {Function} options.useProduct\n * @param {Function} options.useProductToolbarConfig\n * @param {Function} options.useSelector\n * @returns {object}\n */\nconst useSelectCategoryOptions = ({\n  categoryOptions = toolbarFieldOptions,\n  useProduct: useAliasProduct = useProduct,\n  useProductToolbarConfig: useAliasProductToolbarConfig = useProductToolbarConfig,\n  useSelector: useAliasSelector = storeHooks.reactRedux.useSelector\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const { currentFilter: updatedValue } = useAliasSelector(({ toolbar }) => toolbar.filters?.[viewId], {});\n  const { filters = [] } = useAliasProductToolbarConfig();\n\n  let initialValue;\n\n  const updatedOptions = filters.map(({ id, selected }) => {\n    const option = categoryOptions.find(({ value }) => id === value);\n\n    if (updatedValue === undefined && selected) {\n      initialValue = option.value;\n    }\n\n    return {\n      ...option,\n      selected: (updatedValue === undefined && selected) || updatedValue === option.value\n    };\n  });\n\n  return {\n    currentCategory: updatedValue,\n    initialCategory: initialValue,\n    options: updatedOptions\n  };\n};\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useSelectCategoryOptions\n * @returns {Node}\n */\nconst ToolbarFieldSelectCategory = ({\n  t,\n  useOnSelect: useAliasOnSelect,\n  useSelectCategoryOptions: useAliasSelectCategoryOptions\n}) => {\n  const { currentCategory: updatedValue, initialCategory: initialValue, options } = useAliasSelectCategoryOptions();\n  const onSelect = useAliasOnSelect();\n\n  useShallowCompareEffect(() => {\n    if (initialValue) {\n      onSelect({ value: initialValue });\n    }\n  }, [initialValue, onSelect]);\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder_filter')}\n      onSelect={onSelect}\n      options={options}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder_filter')}\n      toggleIcon={<FilterIcon />}\n      data-test=\"toolbarFieldCategory\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, useSelectCategoryOptions: Function}}\n */\nToolbarFieldSelectCategory.propTypes = {\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useSelectCategoryOptions: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, useSelectCategoryOptions: Function}}\n */\nToolbarFieldSelectCategory.defaultProps = {\n  t: translate,\n  useOnSelect,\n  useSelectCategoryOptions\n};\n\nexport {\n  ToolbarFieldSelectCategory as default,\n  ToolbarFieldSelectCategory,\n  toolbarFieldOptions,\n  useOnSelect,\n  useSelectCategoryOptions\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_SLA_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.sla', { context: (type === '' && 'none') || type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update sla.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.SLA],\n        viewId,\n        [RHSM_API_QUERY_TYPES.SLA]: value\n      }\n    ]);\n  };\n};\n\n/**\n * Display a sla field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {object} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductQuery\n * @returns {Node}\n */\nconst ToolbarFieldSla = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductQuery: useAliasProductQuery\n}) => {\n  const { [RHSM_API_QUERY_TYPES.SLA]: updatedValue } = useAliasProductQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'sla' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'sla' })}\n      position={position}\n      data-test=\"toolbarFieldSla\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldSla.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldSla.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductQuery\n};\n\nexport { ToolbarFieldSla as default, ToolbarFieldSla, toolbarFieldOptions, useOnSelect };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_UOM_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.uom', { context: type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update uom.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) =>\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.UOM],\n        viewId,\n        [RHSM_API_QUERY_TYPES.UOM]: value\n      }\n    ]);\n};\n\n/**\n * Display a unit of measure (uom) field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {Array} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductQuery\n * @returns {Node}\n */\nconst ToolbarFieldUom = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductQuery: useAliasProductQuery\n}) => {\n  const { [RHSM_API_QUERY_TYPES.UOM]: updatedValue } = useAliasProductQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'uom' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'uom' })}\n      position={position}\n      data-test=\"toolbarFieldUom\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldUom.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldUom.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductQuery\n};\n\nexport { ToolbarFieldUom as default, ToolbarFieldUom, toolbarFieldOptions, useOnSelect };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_USAGE_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.usage', { context: (type === '' && 'unspecified') || type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update usage.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) =>\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.USAGE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.USAGE]: value\n      }\n    ]);\n};\n\n/**\n * Display a usage field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {object} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductQuery\n * @returns {Node}\n */\nconst ToolbarFieldUsage = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductQuery: useAliasProductQuery\n}) => {\n  const { [RHSM_API_QUERY_TYPES.USAGE]: updatedValue } = useAliasProductQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'usage' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'usage' })}\n      position={position}\n      data-test=\"toolbarFieldUsage\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldUsage.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\n\nToolbarFieldUsage.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductQuery\n};\n\nexport { ToolbarFieldUsage as default, ToolbarFieldUsage, toolbarFieldOptions, useOnSelect };\n","var keyList = Object.keys;\n\nexports.equal = function equal (a, b) {\n  if (a === b) return true;\n  if (!(a instanceof Object) || !(b instanceof Object)) return false;\n\n  var keys = keyList(a);\n  var length = keys.length;\n\n  for (var i = 0; i < length; i++)\n    if (!(keys[i] in b)) return false;\n\n  for (var i = 0; i < length; i++)\n    if (a[keys[i]] !== b[keys[i]]) return false;\n\n  return length === keyList(b).length;\n};\n","import { equal as isShallowEqual } from 'fast-shallow-equal';\nimport useCustomCompareEffect from './useCustomCompareEffect';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar shallowEqualDepsList = function (prevDeps, nextDeps) {\n    return prevDeps.every(function (dep, index) { return isShallowEqual(dep, nextDeps[index]); });\n};\nvar useShallowCompareEffect = function (effect, deps) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useShallowCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useShallowCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n    }\n    useCustomCompareEffect(effect, deps, shallowEqualDepsList);\n};\nexport default useShallowCompareEffect;\n","import { useEffect, useRef } from 'react';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar useCustomCompareEffect = function (effect, deps, depsEqual) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useCustomCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useCustomCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n        if (typeof depsEqual !== 'function') {\n            console.warn('`useCustomCompareEffect` should be used with depsEqual callback for comparing deps list');\n        }\n    }\n    var ref = useRef(undefined);\n    if (!ref.current || !depsEqual(deps, ref.current)) {\n        ref.current = deps;\n    }\n    useEffect(effect, ref.current);\n};\nexport default useCustomCompareEffect;\n"],"names":["toolbarFieldOptions","Object","values","FIELD_TYPES","map","type","title","translate","context","value","selected","useOnSelect","useDispatch","useAliasDispatch","storeHooks","useProduct","useAliasProduct","viewId","dispatch","reduxTypes","RHSM_API_QUERY_SET_TYPES","ToolbarFieldBillingProvider","isFilter","options","position","t","useAliasOnSelect","updatedValue","useAliasProductQuery","useProductQuery","onSelect","updatedOptions","option","Select","selectedOptions","placeholder","defaultProps","SelectPosition","dateHelpers","startDate","endDate","RHSM_API_QUERY_TYPES","toISOString","ToolbarFieldGranularity","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","component","props","key","granularityOptions","isClearable","ToolbarFieldRangedMonthly","rangedMonthlyOptions","ToolbarFieldUom","uomOptions","billingProviderOptions","ToolbarFieldSla","slaOptions","ToolbarFieldUsage","usageOptions","currentFilter","useSelectCategoryOptions","initialValue","categoryOptions","useProductToolbarConfig","useAliasProductToolbarConfig","useSelector","useAliasSelector","toolbar","filters","id","find","undefined","currentCategory","initialCategory","ToolbarFieldSelectCategory","useAliasSelectCategoryOptions","useShallowCompareEffect","toggleIcon","FilterIcon","keyList","keys","exports","a","b","length","i","shallowEqualDepsList","prevDeps","nextDeps","every","dep","index","effect","deps","depsEqual","ref","useRef","current","useEffect"],"sourceRoot":""}