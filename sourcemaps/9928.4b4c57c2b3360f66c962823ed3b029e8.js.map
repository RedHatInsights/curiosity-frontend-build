{"version":3,"file":"js/9928.1671045271572.0079d414b9202e0e4fda.js","mappings":"gYAaMA,EAAsBC,OAAOC,OAAOC,EAAAA,IAAaC,KAAI,SAAAC,GAAI,MAAK,CAClEC,OAAOC,EAAAA,EAAAA,WAAU,0BAA2B,CAAEC,QAAS,CAAC,QAAmB,KAATH,EAAe,OAAWA,KAC5FI,MAAOJ,EACPK,UAAU,EACX,IAUKC,EAAc,WAGT,6DAAP,CAAC,EAAC,IAFJC,YAAaC,OAAgB,IAAG,EAAAC,EAAAA,GAAAA,WAAAA,YAAiC,MACjEC,WAAYC,OAAe,IAAG,EAAAD,EAAAA,WAAU,EAExC,EAAmBC,IAAXC,EAAM,EAANA,OACFC,EAAWL,IAEjB,OAAO,wEAAoB,CAAC,EAAC,IAAnBJ,MAAAA,OAAK,IAAG,OAAI,SACpBS,EAAS,CACP,CACEb,KAAMc,EAAAA,GAAAA,MAAAA,+BACNF,OAAAA,IACD,QAECZ,KAAMc,EAAAA,GAAAA,MAAAA,qBAAsCC,EAAAA,GAAAA,OAC5CH,OAAAA,GACCG,EAAAA,GAAAA,MAAiCX,IAEpC,CACN,EAeMY,EAAoB,SAAH,GAOjB,IANJC,EAAQ,EAARA,SACAC,EAAO,EAAPA,QACAC,EAAQ,EAARA,SACAC,EAAC,EAADA,EACaC,EAAgB,EAA7Bf,YAG0CgB,GAAiBC,EAFtB,EAArCC,mBAEST,EAAAA,GAAAA,OACHU,EAAWJ,IAEXK,EAAiBR,EAAQnB,KAAI,SAAA4B,GAAM,yBAAUA,GAAM,IAAEtB,SAAUsB,EAAOvB,QAAUkB,GAAY,IAElG,OACE,kBAAC,EAAAM,OAAM,CACL,aAAYR,EAAE,gCAAD,OAAkCH,EAAY,UAAc,IAAM,CAAEd,QAAS,UAC1FsB,SAAUA,EACVP,QAASQ,EACTG,gBAAiBP,EACjBQ,YAAaV,EAAE,gCAAD,OAAkCH,EAAY,UAAc,IAAM,CAAEd,QAAS,UAC3FgB,SAAUA,EACV,YAAU,qBAGhB,EA8BAH,EAAkBe,aAAe,CAC/Bd,UAAU,EACVC,QAASvB,EACTwB,SAAUa,EAAAA,eAAAA,KACVZ,EAAGlB,EAAAA,UACHI,YAAAA,EACAkB,gBAAAA,EAAAA,gB","sources":["webpack:///./src/components/toolbar/toolbarFieldUsage.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_USAGE_TYPES as FIELD_TYPES, RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.label', { context: ['usage', (type === '' && 'none') || type] }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update usage.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) =>\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.USAGE],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.USAGE]: value\n      }\n    ]);\n};\n\n/**\n * Display a usage field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {object} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductQuery\n * @returns {Node}\n */\nconst ToolbarFieldUsage = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductQuery: useAliasProductQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.USAGE]: updatedValue } = useAliasProductQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'usage' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'usage' })}\n      position={position}\n      data-test=\"toolbarFieldUsage\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldUsage.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\n\nToolbarFieldUsage.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductQuery\n};\n\nexport { ToolbarFieldUsage as default, ToolbarFieldUsage, toolbarFieldOptions, useOnSelect };\n"],"names":["toolbarFieldOptions","Object","values","FIELD_TYPES","map","type","title","translate","context","value","selected","useOnSelect","useDispatch","useAliasDispatch","storeHooks","useProduct","useAliasProduct","viewId","dispatch","reduxTypes","RHSM_API_QUERY_SET_TYPES","ToolbarFieldUsage","isFilter","options","position","t","useAliasOnSelect","updatedValue","useAliasProductQuery","useProductQuery","onSelect","updatedOptions","option","Select","selectedOptions","placeholder","defaultProps","SelectPosition"],"sourceRoot":""}