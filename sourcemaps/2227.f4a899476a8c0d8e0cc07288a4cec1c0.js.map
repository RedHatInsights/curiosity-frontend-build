{"version":3,"file":"js/2227.744da1ce319279b3a962.js","mappings":"+PA+BMA,EAAU,SAAC,GAQX,IAPJC,EAOI,EAPJA,gBACAC,EAMI,EANJA,WACAC,EAKI,EALJA,EAC0BC,EAItB,EAJJC,yBACsBC,EAGlB,EAHJC,qBACyBC,EAErB,EAFJC,wBACwBC,EACpB,EADJC,uBACI,EACiCP,IAA7BQ,EADJ,EACIA,gBAAiBC,EADrB,EACqBA,QACnBC,EAAsBJ,IACtBK,EAAaT,IACbU,EAAiBR,IAEvB,OAAIN,KAAeW,MAAAA,OAAD,EAACA,EAASI,QACnB,KAmCP,kBAAC,UAAD,CACEC,GAAG,oBACHC,UAAU,sEACVC,gCAAgC,KAChCC,gBApBe,kBAAML,EAAef,IAqBpCqB,uBAAwBnB,EAAE,mCAE1B,kBAAC,EAAAoB,eAAD,KACE,kBAAC,EAAAC,mBAAD,CAAoBC,WAAY,kBAAC,EAAAC,WAAD,MAAgBC,WAAW,MACzD,kBAAC,EAAAC,aAAD,CAAcC,QAAQ,gBACnBhB,EAAQI,OAAS,GAChB,kBAAC,EAAAa,YAAD,KACE,kBAAC,EAAAC,2BAAD,OAGHlB,EAAQmB,KAAI,YAAsE,IAAnEC,EAAmE,EAAnEA,MAAOC,EAA4D,EAA5DA,MAAOC,EAAqD,EAArDA,UAAWC,EAA0C,EAA1CA,YAAsBC,EAAoB,EAA7BxB,QAC9CyB,EAAY,GAQlB,OANoB,IAAhBF,IACFE,EAAUC,MAzBG,SAAC,GAAsC,IAAZL,EAAY,EAAZA,MAC9CM,EAD0D,EAApC3B,QACA4B,MAAK,qBAAGP,SAAyCpB,MAAAA,OAAL,EAAKA,EAAsBoB,OACnG,OAAQM,MAAAA,OAAA,EAAAA,EAAOP,QAAS,CAACO,MAAAA,OAAD,EAACA,EAAOP,QAAW,GAuBbS,CAAmB,CAAE7B,QAASwB,EAAeH,MAAAA,IAC/DI,EAAUK,WAAa,kBA5CA5B,EA4CoB,CAAEF,QAASwB,EAAeH,MAAAA,GA5C1DA,QA6CXI,EAAUM,aAAeX,GAIzB,kBAAC,EAAAY,cAAD,eACEC,IAAKZ,EACLa,gBAAiBnC,IAAoBsB,GAA4B,IAAnBrB,EAAQI,QAClDqB,GAEHH,WAiCnBnC,EAAQgD,aAAe,CACrB/C,iBAAiB,EACjBC,WAAY+C,EAAAA,GAAAA,oBACZ9C,EAAG+C,EAAAA,UACH7C,yBAAAA,EAAAA,yBACAE,qBAAAA,EAAAA,qBACAE,wBAAAA,EAAAA,wBACAE,uBAAAA,EAAAA","sources":["webpack:///./src/components/toolbar/toolbar.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Toolbar as PfToolbar,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup\n} from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport { useToolbarFieldClear, useToolbarFieldClearAll, useToolbarFieldQueries } from './toolbarContext';\nimport { ToolbarFieldSelectCategory, useSelectCategoryOptions } from './toolbarFieldSelectCategory';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Application filter toolbar.\n *\n * @fires onClearFilter\n * @fires onClearAll\n * @param {object} props\n * @param {boolean} props.hardFilterReset On clearing all fields allow the category to reset as well.\n * @param {boolean} props.isDisabled\n * @param {Function} props.t\n * @param {Function} props.useSelectCategoryOptions\n * @param {Function} props.useToolbarFieldClear\n * @param {Function} props.useToolbarFieldClearAll\n * @param {Function} props.useToolbarFieldQueries\n * @returns {Node}\n */\nconst Toolbar = ({\n  hardFilterReset,\n  isDisabled,\n  t,\n  useSelectCategoryOptions: useAliasSelectCategoryOptions,\n  useToolbarFieldClear: useAliasToolbarFieldClear,\n  useToolbarFieldClearAll: useAliasToolbarFieldClearAll,\n  useToolbarFieldQueries: useAliasToolbarFieldQueries\n}) => {\n  const { currentCategory, options } = useAliasSelectCategoryOptions();\n  const toolbarFieldQueries = useAliasToolbarFieldQueries();\n  const clearField = useAliasToolbarFieldClear();\n  const clearAllFields = useAliasToolbarFieldClearAll();\n\n  if (isDisabled || !options?.length) {\n    return null;\n  }\n\n  /**\n   * Clear a specific value\n   *\n   * @event onClearFilter\n   * @param {object} params\n   * @param {*} params.value\n   * @returns {void}\n   */\n  const onClearFilter = ({ value }) => clearField(value);\n\n  /**\n   * Clear all active filters.\n   *\n   * @event onClearAll\n   * @returns {void}\n   */\n  const onClearAll = () => clearAllFields(hardFilterReset);\n\n  /**\n   * Set selected options for chip display.\n   *\n   * @param {object} params\n   * @param {Array} params.options\n   * @param {*} params.value\n   * @returns {Array}\n   */\n  const setSelectedOptions = ({ options: filterOptions, value }) => {\n    const query = filterOptions.find(({ value: optionValue }) => optionValue === toolbarFieldQueries?.[value]);\n    return (query?.title && [query?.title]) || [];\n  };\n\n  return (\n    <PfToolbar\n      id=\"curiosity-toolbar\"\n      className=\"curiosity-toolbar pf-m-toggle-group-container ins-c-primary-toolbar\"\n      collapseListedFiltersBreakpoint=\"sm\"\n      clearAllFilters={onClearAll}\n      clearFiltersButtonText={t('curiosity-toolbar.clearFilters')}\n    >\n      <ToolbarContent>\n        <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"md\">\n          <ToolbarGroup variant=\"filter-group\">\n            {options.length > 1 && (\n              <ToolbarItem>\n                <ToolbarFieldSelectCategory />\n              </ToolbarItem>\n            )}\n            {options.map(({ title, value, component, isClearable, options: filterOptions }) => {\n              const chipProps = {};\n\n              if (isClearable !== false) {\n                chipProps.chips = setSelectedOptions({ options: filterOptions, value });\n                chipProps.deleteChip = () => onClearFilter({ options: filterOptions, value });\n                chipProps.categoryName = title;\n              }\n\n              return (\n                <ToolbarFilter\n                  key={value}\n                  showToolbarItem={currentCategory === value || options.length === 1}\n                  {...chipProps}\n                >\n                  {component}\n                </ToolbarFilter>\n              );\n            })}\n          </ToolbarGroup>\n        </ToolbarToggleGroup>\n      </ToolbarContent>\n    </PfToolbar>\n  );\n};\n\n/**\n * Prop types\n *\n * @type {{useToolbarFieldClear: Function, t: Function, useSelectCategoryOptions: Function, hardFilterReset: boolean,\n *     isDisabled: boolean, useToolbarFieldClearAll: Function, useToolbarFieldQueries: Function}}\n */\nToolbar.propTypes = {\n  hardFilterReset: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  t: PropTypes.func,\n  useSelectCategoryOptions: PropTypes.func,\n  useToolbarFieldClear: PropTypes.func,\n  useToolbarFieldClearAll: PropTypes.func,\n  useToolbarFieldQueries: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useToolbarFieldClear: Function, t: Function, useSelectCategoryOptions: Function, hardFilterReset: boolean,\n *     isDisabled: boolean, useToolbarFieldClearAll: Function, useToolbarFieldQueries: Function}}\n */\nToolbar.defaultProps = {\n  hardFilterReset: false,\n  isDisabled: helpers.UI_DISABLED_TOOLBAR,\n  t: translate,\n  useSelectCategoryOptions,\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFieldQueries\n};\n\nexport { Toolbar as default, Toolbar };\n"],"names":["Toolbar","hardFilterReset","isDisabled","t","useAliasSelectCategoryOptions","useSelectCategoryOptions","useAliasToolbarFieldClear","useToolbarFieldClear","useAliasToolbarFieldClearAll","useToolbarFieldClearAll","useAliasToolbarFieldQueries","useToolbarFieldQueries","currentCategory","options","toolbarFieldQueries","clearField","clearAllFields","length","id","className","collapseListedFiltersBreakpoint","clearAllFilters","clearFiltersButtonText","ToolbarContent","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarGroup","variant","ToolbarItem","ToolbarFieldSelectCategory","map","title","value","component","isClearable","filterOptions","chipProps","chips","query","find","setSelectedOptions","deleteChip","categoryName","ToolbarFilter","key","showToolbarItem","defaultProps","helpers","translate"],"sourceRoot":""}