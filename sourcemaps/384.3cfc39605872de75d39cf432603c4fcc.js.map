{"version":3,"file":"js/384.5cb56a260fa033934e13.js","mappings":"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","sources":["webpack:///./src/components/form/formState.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport _cloneDeep from 'lodash/cloneDeep';\nimport _isEqual from 'lodash/isEqual';\nimport helpers from '../../common/helpers';\n\n/**\n * Internal form state tracking for submitting forms.\n *\n * @memberof Form\n * @module FormState\n */\n\n/**\n * Initial component state values.\n *\n * @type {{submitCount: number, isValid: null, isUpdating: boolean, isSubmitting: boolean, isValidating: boolean}}\n */\nconst initialState = {\n  isUpdating: false,\n  isSubmitting: false,\n  isValid: null,\n  isValidating: false,\n  submitCount: 0\n};\n\n/**\n * Maintain a form's state/context.\n *\n * @augments React.Component\n * @fires onEvent\n * @fires onEventCustom\n * @fires onReset\n * @fires onSubmit\n */\nclass FormState extends React.Component {\n  /**\n   * Infer a field value is \"checked\" from a boolean value.\n   *\n   * @param {object} params\n   * @param {boolean} params.setValuesAssumeBoolIsChecked\n   * @param {object} params.setValues\n   * @returns {{}}\n   */\n  static checkedSetValues({ setValuesAssumeBoolIsChecked, setValues }) {\n    const checked = {};\n\n    if (setValuesAssumeBoolIsChecked) {\n      Object.keys(setValues).forEach(key => {\n        if (typeof setValues[key] === 'boolean') {\n          checked[key] = setValues[key];\n        }\n      });\n    }\n\n    return checked;\n  }\n\n  /**\n   * Check if \"is a promise\".\n   *\n   * @param {*} obj\n   * @returns {boolean}\n   */\n  static isPromise(obj) {\n    return Object.prototype.toString.call(obj) === '[object Promise]';\n  }\n\n  state = {\n    ...initialState\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.touched = {};\n    this.checked = FormState.checkedSetValues(props);\n\n    this.refValues =\n      props.resetUsingSetValues === true || props.setValuesOnUpdate === true ? _cloneDeep(props.setValues) : null;\n\n    this.errors = {};\n    this.values = _cloneDeep(props.setValues);\n  }\n\n  componentDidMount() {\n    const { validateOnMount } = this.props;\n\n    if (validateOnMount === true) {\n      this.validateOnMount();\n    }\n  }\n\n  componentDidUpdate() {\n    const { refValues } = this;\n    const { setValuesOnUpdate, setValues } = this.props;\n\n    if (setValuesOnUpdate === true && !_isEqual(refValues, setValues)) {\n      this.updateComponentValues();\n    }\n  }\n\n  /**\n   * Apply form values with a custom event.\n   *\n   * @event onEventCustom\n   * @param {Array|object} custom\n   */\n  onEventCustom = custom => {\n    const eventArray = (Array.isArray(custom) && custom) || (custom && [custom]);\n\n    if (!eventArray.length) {\n      return;\n    }\n\n    eventArray\n      .filter(event => 'name' in event && ('value' in event || 'checked' in event))\n      .forEach(event => this.onEvent({ target: { ...event }, persist: helpers.noop, type: 'custom' }));\n  };\n\n  /**\n   * Generic \"on event\" for handling returned event objects.\n   *\n   * @event onEvent\n   * @param {object} event\n   */\n  onEvent = event => {\n    const { touched, values } = this;\n    const { id, name, value, checked } = event.options ? { ...event } : event.target;\n\n    event.persist();\n\n    const targetName = name || id || 'generated form state target, add name or id attr to field';\n\n    this.touched = { ...touched, [targetName]: true };\n    this.values = { ...values, [targetName]: value };\n\n    if (checked !== undefined) {\n      this.checked = { ...this.checked, [targetName]: checked };\n    }\n\n    this.setState(\n      {\n        isUpdating: true,\n        isValidating: true\n      },\n      () =>\n        this.validate(event).then(updatedErrors => {\n          const setUpdateErrors = { ...((updatedErrors && updatedErrors[0]) || updatedErrors || {}) };\n          const checkIsValid = !Object.values(setUpdateErrors).filter(val => val === true).length;\n\n          this.errors = setUpdateErrors;\n\n          this.setState({\n            isUpdating: false,\n            isValid: checkIsValid,\n            isValidating: false\n          });\n        })\n    );\n  };\n\n  /**\n   * Reset FormState's form state. Apply prop onReset function.\n   *\n   * @event onReset\n   * @param {object} event\n   */\n  onReset = event => {\n    const { refValues, values } = this;\n    const { setValuesAssumeBoolIsChecked, onReset, resetUsingSetValues } = this.props;\n\n    event.persist();\n\n    const isResetWithSetValues = refValues && resetUsingSetValues === true;\n    const updatedValues = (isResetWithSetValues && _cloneDeep(refValues)) || {};\n    const updatedChecked =\n      (isResetWithSetValues && FormState.checkedSetValues(setValuesAssumeBoolIsChecked, updatedValues)) || {};\n\n    this.values = updatedValues;\n    this.checked = updatedChecked;\n    this.errors = {};\n    this.touched = {};\n\n    this.setState({\n      ...initialState\n    });\n\n    if (isResetWithSetValues) {\n      onReset({ event, ..._cloneDeep({ values: updatedValues, prevValues: values }) });\n    } else {\n      // Resetting the values, potentially, will throw the controlled vs uncontrolled messaging.\n      onReset({ event, values: {}, ..._cloneDeep({ prevValues: values }) });\n    }\n  };\n\n  /**\n   * Validate form, then submit.\n   *\n   * @event onSubmit\n   * @param {object} event\n   */\n  onSubmit = event => {\n    const { submitCount } = this.state;\n\n    event.persist();\n    event.preventDefault();\n\n    this.setState(\n      {\n        submitCount: submitCount + 1,\n        isSubmitting: true,\n        isUpdating: true,\n        isValidating: true\n      },\n      () =>\n        this.validate(event).then(updatedErrors => {\n          const setUpdateErrors = { ...((updatedErrors && updatedErrors[0]) || updatedErrors || {}) };\n          const checkIsValid = !Object.values(setUpdateErrors).filter(val => val === true).length;\n\n          this.errors = setUpdateErrors;\n          this.touched = {};\n\n          this.setState(\n            {\n              isValid: checkIsValid,\n              isValidating: false\n            },\n            () =>\n              checkIsValid &&\n              this.submit(event).then(() => {\n                this.setState({\n                  isSubmitting: false,\n                  isUpdating: false\n                });\n              })\n          );\n        })\n    );\n  };\n\n  /**\n   * Handle submitted form, check and return Promise, or emulate for consistency.\n   *\n   * @param {object} event\n   * @returns {Promise}\n   */\n  submit(event = { type: 'submit' }) {\n    const { checked, errors, values, touched } = this;\n    const { onSubmit } = this.props;\n\n    const checkPromise = onSubmit({\n      event,\n      ..._cloneDeep({ ...this.state, checked, errors, values, touched })\n    });\n\n    if (FormState.isPromise(checkPromise)) {\n      return checkPromise;\n    }\n\n    return {\n      then: callback => callback()\n    };\n  }\n\n  /**\n   * Handle validated form data, check and return Promise, or emulate for consistency.\n   *\n   * @param {object} event\n   * @returns {Promise}\n   */\n  validate(event = { type: 'validate' }) {\n    const { checked, errors, values, touched } = this;\n    const { validate } = this.props;\n\n    const checkPromise = validate({\n      event,\n      ..._cloneDeep({ ...this.state, checked, errors, values, touched })\n    });\n\n    if (FormState.isPromise(checkPromise)) {\n      return checkPromise;\n    }\n\n    return {\n      then: callback => callback(checkPromise)\n    };\n  }\n\n  /**\n   * Shortcut, activate validation on component mount.\n   *\n   * @param {object} event\n   */\n  validateOnMount(event = { type: 'mount' }) {\n    this.validateOnUpdate(event);\n  }\n\n  /**\n   * Validate on component update.\n   *\n   * @param {object} event\n   */\n  validateOnUpdate(event = { type: 'update' }) {\n    this.setState(\n      {\n        isUpdating: true,\n        isValidating: true\n      },\n      () =>\n        this.validate(event).then(updatedErrors => {\n          const setUpdateErrors = { ...((updatedErrors && updatedErrors[0]) || updatedErrors || {}) };\n          const checkIsValid = !Object.values(setUpdateErrors).filter(val => val === true).length;\n\n          this.errors = setUpdateErrors;\n\n          this.setState({\n            isUpdating: false,\n            isValidating: false,\n            isValid: checkIsValid\n          });\n        })\n    );\n  }\n\n  /**\n   * On component update, update state.\n   */\n  updateComponentValues() {\n    const { setValues, setValuesAssumeBoolIsChecked, validateOnUpdate } = this.props;\n\n    this.setState(\n      {\n        isUpdating: true\n      },\n      () => {\n        this.checked = FormState.checkedSetValues(setValuesAssumeBoolIsChecked, setValues);\n        this.refValues = _cloneDeep(setValues);\n        this.values = _cloneDeep(setValues);\n\n        if (validateOnUpdate) {\n          this.validateOnUpdate();\n        } else {\n          this.setState({\n            isUpdating: false\n          });\n        }\n      }\n    );\n  }\n\n  /**\n   * Pass child components, integrate and apply form context.\n   *\n   * @returns {React.ReactNode}\n   */\n  render() {\n    const { checked, errors, values, touched } = this;\n    const { children } = this.props;\n\n    return (\n      <React.Fragment>\n        {children({\n          handleOnEventCustom: this.onEventCustom,\n          handleOnEvent: this.onEvent,\n          handleOnReset: this.onReset,\n          handleOnSubmit: this.onSubmit,\n          ..._cloneDeep({ ...this.state, checked, errors, values, touched })\n        })}\n      </React.Fragment>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{setValuesOnUpdate: boolean, validateOnMount: boolean, children: Function,\n *     setValues: object, onSubmit: Function, resetUsingSetValues: boolean,\n *     setValuesAssumeBoolIsChecked: boolean, onReset: Function, validate: Function,\n *     validateOnUpdate: boolean}}\n */\nFormState.propTypes = {\n  children: PropTypes.func.isRequired,\n  onReset: PropTypes.func,\n  onSubmit: PropTypes.func,\n  resetUsingSetValues: PropTypes.bool,\n  setValues: PropTypes.object,\n  setValuesOnUpdate: PropTypes.bool,\n  setValuesAssumeBoolIsChecked: PropTypes.bool,\n  validate: PropTypes.func,\n  validateOnMount: PropTypes.bool,\n  validateOnUpdate: PropTypes.bool\n};\n\n/**\n * Default props.\n *\n * @type {{setValuesOnUpdate: boolean, validateOnMount: boolean, setValues: {},\n *     onSubmit: Function, resetUsingSetValues: boolean, setValuesAssumeBoolIsChecked: boolean,\n *     onReset: Function, validate: Function, validateOnUpdate: boolean}}\n */\nFormState.defaultProps = {\n  onReset: helpers.noop,\n  onSubmit: helpers.noop,\n  resetUsingSetValues: true,\n  setValues: {},\n  setValuesOnUpdate: false,\n  setValuesAssumeBoolIsChecked: true,\n  validate: helpers.noop,\n  validateOnMount: false,\n  validateOnUpdate: false\n};\n\nexport { FormState as default, FormState };\n"],"names":["initialState","isUpdating","isSubmitting","isValid","isValidating","submitCount","FormState","React","static","_ref","setValuesAssumeBoolIsChecked","setValues","checked","Object","keys","forEach","key","obj","prototype","toString","call","constructor","props","super","_defineProperty","custom","eventArray","Array","isArray","length","filter","event","this","onEvent","target","persist","helpers","type","touched","values","id","name","value","options","targetName","undefined","setState","validate","then","updatedErrors","setUpdateErrors","checkIsValid","val","errors","refValues","onReset","resetUsingSetValues","isResetWithSetValues","updatedValues","_cloneDeep","updatedChecked","checkedSetValues","prevValues","state","preventDefault","submit","setValuesOnUpdate","componentDidMount","validateOnMount","componentDidUpdate","_isEqual","updateComponentValues","arguments","onSubmit","checkPromise","isPromise","callback","validateOnUpdate","render","children","handleOnEventCustom","onEventCustom","handleOnEvent","handleOnReset","handleOnSubmit","propTypes","PropTypes","defaultProps"],"sourceRoot":""}