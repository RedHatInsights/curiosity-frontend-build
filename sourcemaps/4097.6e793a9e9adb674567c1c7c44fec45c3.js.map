{"version":3,"file":"js/4097.7c5bd7729a09e1f94c78.js","mappings":"iSAYMA,EAAsBC,OAAOC,OAAOC,EAAAA,IAAaC,KAAI,SAAAC,GAAI,MAAK,CAClEC,OAAOC,EAAAA,EAAAA,WAAU,wBAAyB,CAAEC,QAASH,IACrDI,MAAOJ,EACPK,UAAU,MAcNC,EAAkB,SAAlBA,EAAmB,GAAkC,IAAhCC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,EAAGJ,EAAoB,EAApBA,MAAOK,EAAa,EAAbA,OACtCC,GAAeC,EAAAA,EAAAA,KAAY,uCAAGC,KAAgBC,aAAnB,iBAAc,EAAaJ,UAA3B,aAAc,EAAuBK,EAAAA,GAAAA,OAA2BV,GAE3FW,EAAiBR,EAAQR,KAAI,SAAAiB,GAAM,yBAAUA,GAAV,IAAkBX,SAAUW,EAAOZ,QAAUM,OAsBtF,OACE,kBAAC,EAAAO,OAAD,CACE,aAAYT,EAAE,gCAAiC,CAAEL,QAAS,QAC1De,SAhBa,SAAAC,GAAK,OACpBC,EAAAA,EAAAA,SAAe,CACb,CACEpB,KAAMqB,EAAAA,GAAAA,MAAAA,+BACNZ,OAAAA,IAHW,QAMXT,KAAMqB,EAAAA,GAAAA,MAAAA,qBAAsCP,EAAAA,GAAAA,KAC5CL,OAAAA,GACCK,EAAAA,GAAAA,IAA2BK,EAAMf,UAQpCG,QAASQ,EACTO,gBAAiBZ,EACjBa,YAAaf,EAAE,gCAAiC,CAAEL,QAAS,QAC3D,YAAWG,EAAgBkB,aAAaf,UA4B9CH,EAAgBkB,aAAe,CAC7BjB,QAASZ,EACTa,EAAGN,EAAAA,UACHE,MAAON,EAAAA,GAAAA,MACPW,OAAQ","sources":["webpack:///./src/components/toolbar/toolbarFieldUom.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, store, useSelector } from '../../redux';\nimport { Select } from '../form/select';\nimport { RHSM_API_QUERY_UOM_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.uom', { context: type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * Display a unit of measure (uom) field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Array} props.options\n * @param {Function} props.t\n * @param {string} props.value\n * @param {string} props.viewId\n * @returns {Node}\n */\nconst ToolbarFieldUom = ({ options, t, value, viewId }) => {\n  const updatedValue = useSelector(({ view }) => view.query?.[viewId]?.[RHSM_API_QUERY_TYPES.UOM], value);\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  /**\n   * On select, dispatch type.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @returns {void}\n   */\n  const onSelect = event =>\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.UOM],\n        viewId,\n        [RHSM_API_QUERY_TYPES.UOM]: event.value\n      }\n    ]);\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: 'uom' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder', { context: 'uom' })}\n      data-test={ToolbarFieldUom.defaultProps.viewId}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{viewId: string, t: Function, options: Array, value: string}}\n */\nToolbarFieldUom.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  t: PropTypes.func,\n  value: PropTypes.oneOf([...Object.values(FIELD_TYPES)]),\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{viewId: string, t: translate, options: Array, value: string}}\n */\nToolbarFieldUom.defaultProps = {\n  options: toolbarFieldOptions,\n  t: translate,\n  value: FIELD_TYPES.CORES,\n  viewId: 'toolbarFieldUom'\n};\n\nexport { ToolbarFieldUom as default, ToolbarFieldUom, toolbarFieldOptions };\n"],"names":["toolbarFieldOptions","Object","values","FIELD_TYPES","map","type","title","translate","context","value","selected","ToolbarFieldUom","options","t","viewId","updatedValue","useSelector","view","query","RHSM_API_QUERY_TYPES","updatedOptions","option","Select","onSelect","event","store","reduxTypes","selectedOptions","placeholder","defaultProps"],"sourceRoot":""}