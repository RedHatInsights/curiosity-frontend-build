{"version":3,"file":"js/8191.1667930752922.4b43ae5687eb682529d3.js","mappings":"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","sources":["webpack:///./src/components/inventoryCard/inventoryList.deprecated.js","webpack:///./src/components/inventoryGuests/guestsList.deprecated.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport _isEqual from 'lodash/isEqual';\nimport { SortByDirection, TableVariant } from '@patternfly/react-table';\nimport { Bullseye, Card, CardActions, CardBody, CardFooter, CardHeader, CardHeaderMain } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport _camelCase from 'lodash/camelCase';\nimport { helpers } from '../../common';\nimport { connect, reduxActions, reduxSelectors, reduxTypes, store } from '../../redux';\nimport Table from '../table/table';\nimport { Loader } from '../loader/loader';\nimport { MinHeight } from '../minHeight/minHeight';\nimport GuestsList from '../inventoryGuests/guestsList.deprecated';\nimport { inventoryCardHelpers } from './inventoryCardHelpers';\nimport Pagination from '../pagination/pagination';\nimport { ToolbarFieldDisplayName } from '../toolbar/toolbarFieldDisplayName';\nimport { paginationHelpers } from '../pagination/paginationHelpers';\nimport {\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_SORT_TYPES as SORT_TYPES,\n  RHSM_API_QUERY_TYPES\n} from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A hosts system inventory component.\n *\n * @augments React.Component\n * @fires onColumnSort\n * @fires onPage\n * @fires onUpdateInventoryData\n */\nclass InventoryList extends React.Component {\n  componentDidMount() {\n    this.onUpdateInventoryData();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { productId, query } = this.props;\n\n    if (productId !== prevProps.productId || !_isEqual(query, prevProps.query)) {\n      this.onUpdateInventoryData();\n    }\n  }\n\n  /**\n   * On column sort update state.\n   *\n   * @event onColumnSort\n   * @param {object} data pass-through inventory data.\n   * @param {object} sortParams\n   * @param {string} sortParams.direction\n   * @param {string} sortParams.id column identifier\n   */\n  onColumnSort = (data, { direction, id }) => {\n    const { productId } = this.props;\n    const updatedSortColumn = Object.values(SORT_TYPES).find(value => _camelCase(value) === id);\n    let updatedDirection;\n\n    if (!updatedSortColumn) {\n      if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n        console.warn(`Sorting can only be performed on select fields, confirm field ${id} is allowed.`);\n      }\n      return;\n    }\n\n    switch (direction) {\n      case SortByDirection.desc:\n        updatedDirection = SORT_DIRECTION_TYPES.DESCENDING;\n        break;\n      default:\n        updatedDirection = SORT_DIRECTION_TYPES.ASCENDING;\n        break;\n    }\n\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.DIRECTION],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.DIRECTION]: updatedDirection\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.SORT],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.SORT]: updatedSortColumn\n      }\n    ]);\n  };\n\n  /**\n   * On paging and on perPage events.\n   *\n   * @event onPage\n   * @param {object} params\n   * @param {number} params.offset\n   * @param {number} params.perPage\n   */\n  onPage = ({ offset, perPage }) => {\n    const { productId } = this.props;\n\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.OFFSET],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.OFFSET]: offset\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.LIMIT],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.LIMIT]: perPage\n      }\n    ]);\n  };\n\n  /**\n   * Call the RHSM APIs, apply filters.\n   *\n   * @event onUpdateInventoryData\n   */\n  onUpdateInventoryData = () => {\n    const { getHostsInventory, isDisabled, productId, query } = this.props;\n\n    if (!isDisabled && productId) {\n      getHostsInventory(productId, query);\n    }\n  };\n\n  /**\n   * Render an inventory table.\n   *\n   * @returns {Node}\n   */\n  renderTable() {\n    const { filterGuestsData, filterInventoryData, listData, productId, query, session, settings } = this.props;\n    let updatedColumnHeaders = [];\n\n    const updatedRows = listData.map(({ ...cellData }) => {\n      const { columnHeaders, cells } = inventoryCardHelpers.parseRowCellsListData({\n        filters: inventoryCardHelpers.parseInventoryFilters({\n          filters: filterInventoryData,\n          onSort: this.onColumnSort,\n          query\n        }),\n        cellData,\n        session\n      });\n\n      updatedColumnHeaders = columnHeaders;\n\n      const guestsId = cellData?.subscriptionManagerId;\n      let hasGuests = cellData?.numberOfGuests > 0 && guestsId;\n\n      // Apply hasGuests callback, return boolean\n      if (typeof settings?.hasGuests === 'function') {\n        hasGuests = settings.hasGuests({ ...cellData }, { ...session });\n      }\n\n      return {\n        cells,\n        expandedContent:\n          (hasGuests && (\n            <GuestsList\n              key={`${productId}_${guestsId}`}\n              filterGuestsData={filterGuestsData}\n              numberOfGuests={cellData?.numberOfGuests}\n              id={guestsId}\n              query={query}\n            />\n          )) ||\n          undefined\n      };\n    });\n\n    return (\n      <Table\n        borders\n        variant={TableVariant.compact}\n        className=\"curiosity-inventory-list\"\n        columnHeaders={updatedColumnHeaders}\n        rows={updatedRows}\n      />\n    );\n  }\n\n  /**\n   * Render an inventory card.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const {\n      error,\n      filterInventoryData,\n      fulfilled,\n      isDisabled,\n      itemCount,\n      listData,\n      pending,\n      perPageDefault,\n      query,\n      t,\n      viewId\n    } = this.props;\n\n    if (isDisabled) {\n      return (\n        <Card className=\"curiosity-inventory-card__disabled\">\n          <CardBody>\n            <Bullseye>{t('curiosity-inventory.tab', { context: 'disabled' })}</Bullseye>\n          </CardBody>\n        </Card>\n      );\n    }\n\n    const updatedPerPage = query[RHSM_API_QUERY_TYPES.LIMIT] || perPageDefault;\n    const updatedOffset = query[RHSM_API_QUERY_TYPES.OFFSET];\n    const isLastPage = paginationHelpers.isLastPage(updatedOffset, updatedPerPage, itemCount);\n\n    // Set an updated key to force refresh minHeight\n    const minHeightContentRefreshKey =\n      (fulfilled === true && itemCount < updatedPerPage && `bodyMinHeight-${updatedPerPage}-resize`) ||\n      (fulfilled === true && isLastPage && `bodyMinHeight-${updatedPerPage}-resize`) ||\n      (error === true && `bodyMinHeight-${updatedPerPage}-resize`) ||\n      `bodyMinHeight-${updatedPerPage}`;\n\n    return (\n      <Card className=\"curiosity-inventory-card\">\n        <MinHeight key=\"headerMinHeight\" updateOnContent>\n          <CardHeader className={(error && 'hidden') || ''} aria-hidden={error || false}>\n            <CardHeaderMain>\n              <ToolbarFieldDisplayName viewId={viewId} />\n            </CardHeaderMain>\n            <CardActions className={(!itemCount && 'transparent') || ''} aria-hidden={!itemCount || false}>\n              <Pagination\n                isCompact\n                isDisabled={pending || error}\n                itemCount={itemCount}\n                offset={updatedOffset}\n                onPage={this.onPage}\n                onPerPage={this.onPage}\n                perPage={updatedPerPage}\n              />\n            </CardActions>\n          </CardHeader>\n        </MinHeight>\n        <MinHeight key={minHeightContentRefreshKey} updateOnContent>\n          <CardBody>\n            <div className={(error && 'blur') || (pending && 'fadein') || ''}>\n              {pending && (\n                <Loader\n                  variant=\"table\"\n                  tableProps={{\n                    className: 'curiosity-inventory-list',\n                    colCount: filterInventoryData?.length || (listData?.[0] && Object.keys(listData[0]).length) || 1,\n                    colWidth:\n                      (filterInventoryData?.length && filterInventoryData.map(({ cellWidth }) => cellWidth)) || [],\n                    rowCount: listData?.length || updatedPerPage,\n                    variant: TableVariant.compact\n                  }}\n                />\n              )}\n              {!pending && this.renderTable()}\n            </div>\n          </CardBody>\n        </MinHeight>\n        <MinHeight key=\"footerMinHeight\" updateOnContent>\n          <CardFooter\n            className={(error && 'hidden') || (!itemCount && 'transparent') || ''}\n            aria-hidden={error || !itemCount || false}\n          >\n            <TableToolbar isFooter>\n              <Pagination\n                dropDirection=\"up\"\n                isDisabled={pending || error}\n                itemCount={itemCount}\n                offset={updatedOffset}\n                onPage={this.onPage}\n                onPerPage={this.onPage}\n                perPage={updatedPerPage}\n              />\n            </TableToolbar>\n          </CardFooter>\n        </MinHeight>\n      </Card>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{settings:object, productId: string, listData: Array, session: object, pending: boolean,\n *     query: object, fulfilled: boolean, getHostsInventory: Function, error: boolean,\n *     itemCount: number, viewId: string, t: Function, filterInventoryData: Array, filterGuestsData: Array,\n *     perPageDefault: number, isDisabled: boolean}}\n */\nInventoryList.propTypes = {\n  error: PropTypes.bool,\n  fulfilled: PropTypes.bool,\n  filterGuestsData: PropTypes.array,\n  filterInventoryData: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      header: PropTypes.oneOfType([\n        PropTypes.shape({\n          title: PropTypes.node.isRequired\n        }),\n        PropTypes.func,\n        PropTypes.node\n      ]),\n      cell: PropTypes.oneOfType([\n        PropTypes.shape({\n          title: PropTypes.node.isRequired\n        }),\n        PropTypes.func,\n        PropTypes.node\n      ])\n    }).isRequired\n  ),\n  getHostsInventory: PropTypes.func,\n  isDisabled: PropTypes.bool,\n  itemCount: PropTypes.number,\n  listData: PropTypes.array,\n  pending: PropTypes.bool,\n  productId: PropTypes.string.isRequired,\n  perPageDefault: PropTypes.number,\n  query: PropTypes.object.isRequired,\n  session: PropTypes.object,\n  settings: PropTypes.shape({\n    hasGuests: PropTypes.func\n  }),\n  t: PropTypes.func,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{settings: object, listData: Array, session: object, pending: boolean, fulfilled: boolean,\n *     getHostsInventory: Function, error: boolean, itemCount: number, viewId: string, t: translate,\n *     filterInventoryData: Array, filterGuestsData: Array, perPageDefault: number, isDisabled: boolean}}\n */\nInventoryList.defaultProps = {\n  error: false,\n  fulfilled: false,\n  filterGuestsData: [],\n  filterInventoryData: [],\n  getHostsInventory: helpers.noop,\n  isDisabled: helpers.UI_DISABLED_TABLE_HOSTS,\n  itemCount: 0,\n  listData: [],\n  pending: false,\n  perPageDefault: 10,\n  session: {},\n  settings: {},\n  t: translate,\n  viewId: 'inventoryList'\n};\n\n/**\n * Apply actions to props.\n *\n * @param {Function} dispatch\n * @returns {object}\n */\nconst mapDispatchToProps = dispatch => ({\n  getHostsInventory: (id, query) => dispatch(reduxActions.rhsm.getHostsInventory(id, query))\n});\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.inventoryList.makeInventoryList();\n\nconst ConnectedInventoryList = connect(makeMapStateToProps, mapDispatchToProps)(InventoryList);\n\nexport { ConnectedInventoryList as default, ConnectedInventoryList, InventoryList };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TableVariant } from '@patternfly/react-table';\nimport { helpers } from '../../common';\nimport { apiQueries, connect, reduxActions, reduxSelectors } from '../../redux';\nimport { Loader } from '../loader/loader';\nimport { inventoryCardHelpers } from '../inventoryCard/inventoryCardHelpers';\nimport { RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { Table } from '../table/table';\n\n/**\n * ToDo: Consider removing the query prop entirely.\n * The current API doesn't allow setting more than \"offset\" and \"limit\"\n */\n/**\n * ToDo: Review moving the \"onScroll\" layout into a standalone component.\n */\n/**\n * A system inventory guests component.\n *\n * @augments React.Component\n * @fires onUpdateGuestsData\n * @fires onScroll\n */\nclass GuestsList extends React.Component {\n  state = { currentPage: 0, limit: 100, previousData: [] };\n\n  componentDidMount() {\n    this.onUpdateGuestsData();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { currentPage } = this.state;\n\n    if (currentPage !== prevState.currentPage) {\n      this.onUpdateGuestsData();\n    }\n  }\n\n  /**\n   * Call the RHSM APIs, apply filters.\n   *\n   * @event onUpdateGuestsData\n   */\n  onUpdateGuestsData = () => {\n    const { currentPage, limit } = this.state;\n    const { getHostsInventoryGuests, query, id } = this.props;\n\n    if (id) {\n      const updatedQuery = {\n        ...query,\n        [RHSM_API_QUERY_TYPES.LIMIT]: limit,\n        [RHSM_API_QUERY_TYPES.OFFSET]: currentPage * limit || 0\n      };\n\n      const { inventoryGuestsQuery } = apiQueries.parseRhsmQuery(updatedQuery);\n      getHostsInventoryGuests(id, inventoryGuestsQuery);\n    }\n  };\n\n  /**\n   * Update page state.\n   *\n   * @event onScroll\n   * @param {object} event\n   */\n  onScroll = event => {\n    const { target } = event;\n    const { currentPage, limit, previousData } = this.state;\n    const { numberOfGuests, pending, listData } = this.props;\n\n    const bottom = target.scrollHeight - target.scrollTop === target.clientHeight;\n\n    if (numberOfGuests > (currentPage + 1) * limit && bottom && !pending) {\n      const newPage = currentPage + 1;\n      const updatedData = [...previousData, ...(listData || [])];\n\n      this.setState({\n        previousData: updatedData,\n        currentPage: newPage\n      });\n    }\n  };\n\n  renderLoader() {\n    const { currentPage } = this.state;\n    const { filterGuestsData, listData, pending } = this.props;\n\n    if (currentPage > 0 && pending) {\n      const scrollLoader = (\n        <Loader\n          variant=\"table\"\n          tableProps={{\n            borders: false,\n            colCount: filterGuestsData?.length || (listData?.[0] && Object.keys(listData[0]).length) || 1,\n            colWidth: (filterGuestsData?.length && filterGuestsData.map(({ cellWidth }) => cellWidth)) || [],\n            rowCount: 0,\n            variant: TableVariant.compact\n          }}\n        />\n      );\n\n      return <div className=\"curiosity-table-scroll-loader__custom\">{scrollLoader}</div>;\n    }\n\n    return null;\n  }\n\n  /**\n   * ToDo: Consider moving the \"meaning of life\" into the default props on iteration.\n   * For everyone else... move the 42 into default props, possibly the 275.\n   */\n  /**\n   * Render a guests table.\n   *\n   * @returns {Node}\n   */\n  renderTable() {\n    const { previousData } = this.state;\n    const { filterGuestsData, listData, numberOfGuests, session } = this.props;\n    let updatedColumnHeaders = [];\n\n    const updatedRows = [...previousData, ...(listData || [])].map(({ ...cellData }) => {\n      const { columnHeaders, cells } = inventoryCardHelpers.parseRowCellsListData({\n        filters: filterGuestsData,\n        cellData,\n        session\n      });\n\n      updatedColumnHeaders = columnHeaders;\n\n      return {\n        cells\n      };\n    });\n\n    // Include the table header\n    let updatedHeight = (numberOfGuests + 1) * 42;\n    updatedHeight = (updatedHeight < 275 && updatedHeight) || 275;\n\n    return (\n      <div className=\"curiosity-table-scroll\" style={{ height: `${updatedHeight}px` }}>\n        <div\n          className={`curiosity-table-scroll-list${(updatedHeight < 275 && '__no-scroll') || ''}`}\n          onScroll={this.onScroll}\n        >\n          {this.renderLoader()}\n          {(updatedRows.length && (\n            <Table\n              borders={false}\n              variant={TableVariant.compact}\n              className=\"curiosity-guests-list\"\n              columnHeaders={updatedColumnHeaders}\n              rows={updatedRows}\n            />\n          )) ||\n            null}\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * Render a guest list table.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { currentPage } = this.state;\n    const { error, filterGuestsData, listData, numberOfGuests, pending, perPageDefault } = this.props;\n\n    return (\n      <div className={`fadein ${(error && 'blur') || ''}`}>\n        {pending && currentPage === 0 && (\n          <Loader\n            variant=\"table\"\n            tableProps={{\n              borders: false,\n              className: 'curiosity-guests-list',\n              colCount: filterGuestsData?.length || (listData?.[0] && Object.keys(listData[0]).length) || 1,\n              colWidth: (filterGuestsData?.length && filterGuestsData.map(({ cellWidth }) => cellWidth)) || [],\n              rowCount: numberOfGuests < perPageDefault ? numberOfGuests : perPageDefault,\n              variant: TableVariant.compact\n            }}\n          />\n        )}\n        {((!pending && currentPage === 0) || currentPage > 0) && this.renderTable()}\n      </div>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{listData: Array, getHostsInventoryGuests: Function, session: object, filterGuestsData: object,\n *     pending: boolean, query: object, numberOfGuests: number, perPageDefault: number, id: string,\n *     error: boolean}}\n */\nGuestsList.propTypes = {\n  error: PropTypes.bool,\n  filterGuestsData: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      header: PropTypes.oneOfType([\n        PropTypes.shape({\n          title: PropTypes.node.isRequired\n        }),\n        PropTypes.func,\n        PropTypes.node\n      ]),\n      cell: PropTypes.oneOfType([\n        PropTypes.shape({\n          title: PropTypes.node.isRequired\n        }),\n        PropTypes.func,\n        PropTypes.node\n      ])\n    }).isRequired\n  ),\n  getHostsInventoryGuests: PropTypes.func,\n  listData: PropTypes.array,\n  id: PropTypes.string.isRequired,\n  numberOfGuests: PropTypes.number.isRequired,\n  pending: PropTypes.bool,\n  perPageDefault: PropTypes.number,\n  query: PropTypes.object,\n  session: PropTypes.object\n};\n\n/**\n * Default props.\n *\n * @type {{listData: Array, getHostsInventoryGuests: Function, session: object, filterGuestsData: Array,\n *     pending: boolean, query: object, perPageDefault: number, error: boolean}}\n */\nGuestsList.defaultProps = {\n  error: false,\n  filterGuestsData: [],\n  getHostsInventoryGuests: helpers.noop,\n  listData: [],\n  pending: false,\n  perPageDefault: 5,\n  query: {},\n  session: {}\n};\n\n/**\n * Apply actions to props.\n *\n * @param {Function} dispatch\n * @returns {object}\n */\nconst mapDispatchToProps = dispatch => ({\n  getHostsInventoryGuests: (id, query) => dispatch(reduxActions.rhsm.getHostsInventoryGuests(id, query))\n});\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.guestsList.makeGuestsList();\n\nconst ConnectedGuestsList = connect(makeMapStateToProps, mapDispatchToProps)(GuestsList);\n\nexport { ConnectedGuestsList as default, ConnectedGuestsList, GuestsList };\n"],"names":["InventoryList","onColumnSort","data","updatedDirection","direction","id","productId","props","updatedSortColumn","Object","values","SORT_TYPES","find","value","_camelCase","SortByDirection","SORT_DIRECTION_TYPES","store","type","reduxTypes","RHSM_API_QUERY_TYPES","viewId","helpers","console","warn","onPage","offset","perPage","onUpdateInventoryData","getHostsInventory","isDisabled","query","this","prevProps","_isEqual","filterGuestsData","filterInventoryData","listData","session","settings","updatedColumnHeaders","updatedRows","map","cellData","inventoryCardHelpers","filters","onSort","columnHeaders","cells","guestsId","subscriptionManagerId","hasGuests","numberOfGuests","expandedContent","key","undefined","borders","variant","TableVariant","className","rows","error","fulfilled","itemCount","pending","perPageDefault","t","Card","CardBody","Bullseye","context","updatedPerPage","updatedOffset","isLastPage","paginationHelpers","minHeightContentRefreshKey","MinHeight","updateOnContent","CardHeader","CardHeaderMain","ToolbarFieldDisplayName","CardActions","isCompact","onPerPage","Loader","tableProps","colCount","length","keys","colWidth","cellWidth","rowCount","renderTable","CardFooter","isFooter","dropDirection","React","defaultProps","translate","makeMapStateToProps","reduxSelectors","ConnectedInventoryList","connect","dispatch","reduxActions","GuestsList","state","currentPage","limit","previousData","onUpdateGuestsData","getHostsInventoryGuests","updatedQuery","apiQueries","inventoryGuestsQuery","onScroll","event","target","bottom","scrollHeight","scrollTop","clientHeight","newPage","updatedData","setState","prevState","scrollLoader","updatedHeight","style","height","renderLoader","Table","ConnectedGuestsList"],"sourceRoot":""}