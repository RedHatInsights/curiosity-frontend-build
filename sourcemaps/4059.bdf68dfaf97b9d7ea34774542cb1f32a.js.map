{"version":3,"file":"js/4059.451b728dd6c21332747c.js","mappings":"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","sources":["webpack:///./src/components/inventoryTabs/inventoryTabs.js","webpack:///./src/components/productView/productViewOpenShiftContainer.js","webpack:///./src/components/toolbar/toolbarFieldGranularity.js","webpack:///./src/components/toolbar/toolbarFieldRangedMonthly.js","webpack:///./src/components/toolbar/toolbarFieldUom.js","webpack:///./src/hooks/useRouter.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Title } from '@patternfly/react-core';\nimport { connect, reduxTypes, store } from '../../redux';\nimport { Tabs } from '../tabs/tabs';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { InventoryTab } from './inventoryTab';\n\n/**\n * A system inventory tabs component.\n *\n * @augments React.Component\n * @fires onTab\n */\nclass InventoryTabs extends React.Component {\n  /**\n   * On tab update state.\n   *\n   * @event onTab\n   * @param {object} params\n   * @param {string} params.index tab index\n   */\n  onTab = ({ index }) => {\n    const { productId } = this.props;\n\n    store.dispatch({\n      type: reduxTypes.inventory.SET_INVENTORY_TAB,\n      tabs: {\n        [productId]: index\n      }\n    });\n  };\n\n  /**\n   * Render inventory tabs using Inventory tab passed props only. A parallel outcome can be\n   * achieved by passing an array of objects through a prop.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { activeTab, children, defaultActiveTab, isDisabled, t } = this.props;\n\n    if (isDisabled) {\n      return null;\n    }\n\n    const updatedChildren = React.Children.toArray(children).map((child, index) => {\n      const { props = {} } = child;\n\n      return {\n        active: props.active || false,\n        content: props.children || child,\n        title: props.title || t('curiosity-inventory.tabSubHeading', { count: index })\n      };\n    });\n\n    return (\n      <React.Fragment>\n        <Title headingLevel=\"h2\" className=\"sr-only\">\n          {t('curiosity-inventory.tabHeading', { count: updatedChildren.length })}\n        </Title>\n        <Tabs activeTab={activeTab} defaultActiveTab={defaultActiveTab} onTab={this.onTab} tabs={updatedChildren} />\n      </React.Fragment>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{productId: string, t: Function, children: Node, defaultActiveTab: number, isDisabled: boolean,\n *     activeTab: number}}\n */\nInventoryTabs.propTypes = {\n  activeTab: PropTypes.number,\n  children: PropTypes.node.isRequired,\n  defaultActiveTab: PropTypes.number,\n  isDisabled: PropTypes.bool,\n  productId: PropTypes.string.isRequired,\n  t: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, defaultActiveTab: number, isDisabled: boolean, activeTab: number}}\n */\nInventoryTabs.defaultProps = {\n  activeTab: 0,\n  defaultActiveTab: 0,\n  isDisabled: helpers.UI_DISABLED_TABLE,\n  t: translate\n};\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst mapStateToProps = ({ inventory }, { productId }) => ({ activeTab: inventory.tabs?.[productId] });\n\nconst ConnectedInventoryTabs = connect(mapStateToProps)(InventoryTabs);\n\nexport { ConnectedInventoryTabs as default, ConnectedInventoryTabs, InventoryTabs, InventoryTab };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport { useRouteDetail } from '../../hooks/useRouter';\nimport { PageLayout, PageColumns, PageHeader, PageSection, PageToolbar } from '../pageLayout/pageLayout';\nimport { RHSM_API_PATH_ID_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { apiQueries, useSelector } from '../../redux';\nimport GraphCard from '../graphCard/graphCard';\nimport { ToolbarFieldUom } from '../toolbar/toolbarFieldUom';\nimport { ToolbarFieldGranularity } from '../toolbar/toolbarFieldGranularity';\nimport { ToolbarFieldRangedMonthly } from '../toolbar/toolbarFieldRangedMonthly';\nimport Toolbar from '../toolbar/toolbar';\nimport InventoryList from '../inventoryList/inventoryList';\nimport InventorySubscriptions from '../inventorySubscriptions/inventorySubscriptions';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport { translate } from '../i18n/i18n';\nimport { helpers } from '../../common';\n\n/**\n * An OpenShift Container Platform encompassing view.\n *\n * @param {object} props\n * @param {Function} props.t\n * @returns {Node}\n */\nconst ProductViewOpenShiftContainer = ({ t }) => {\n  const { productParameter: viewProductLabel, productConfig } = useRouteDetail();\n  const uomValue = useSelector(({ view }) => view.query?.[productConfig[0].viewId]?.[RHSM_API_QUERY_TYPES.UOM], null);\n\n  const renderProduct = (config, updatedUomValue) => {\n    const {\n      productContextFilterUom,\n      query = {},\n      graphTallyQuery = {},\n      inventoryHostsQuery = {},\n      inventorySubscriptionsQuery = {},\n      initialGraphFilters = [],\n      initialGraphSettings = {},\n      initialGuestsFilters = [],\n      initialInventoryFilters = [],\n      initialInventorySettings = {},\n      initialSubscriptionsInventoryFilters,\n      initialToolbarFilters,\n      productLabel,\n      productId,\n      viewId\n    } = config;\n\n    if (!productId || !viewId) {\n      return null;\n    }\n\n    const {\n      graphTallyQuery: initialGraphTallyQuery,\n      inventoryHostsQuery: initialInventoryHostsQuery,\n      inventorySubscriptionsQuery: initialInventorySubscriptionsQuery,\n      toolbarQuery\n    } = apiQueries.parseRhsmQuery(query, { graphTallyQuery, inventoryHostsQuery, inventorySubscriptionsQuery });\n\n    let graphFilters = initialGraphFilters;\n    let inventoryFilters = initialInventoryFilters;\n    let subscriptionsInventoryFilters = initialSubscriptionsInventoryFilters;\n    let uomFilter;\n\n    if (productContextFilterUom) {\n      uomFilter = updatedUomValue || query[RHSM_API_QUERY_TYPES.UOM];\n\n      const filter = ({ id, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(uomFilter, 'i').test(id);\n      };\n\n      graphFilters = initialGraphFilters.filter(filter);\n      inventoryFilters = initialInventoryFilters.filter(filter);\n      subscriptionsInventoryFilters = initialSubscriptionsInventoryFilters.filter(filter);\n    }\n\n    const graphCardTitle = (\n      <React.Fragment>\n        {t('curiosity-graph.cardHeading', { context: productId })}\n        <Tooltip\n          content={<p>{t('curiosity-graph.cardHeadingDescription', { context: productId })}</p>}\n          position={TooltipPosition.top}\n          enableFlip={false}\n          distance={5}\n          entryDelay={100}\n          exitDelay={0}\n        >\n          <sup className=\"curiosity-icon__info\">\n            <InfoCircleIcon />\n          </sup>\n        </Tooltip>\n      </React.Fragment>\n    );\n\n    return (\n      <React.Fragment key={`product_${productId}_${uomFilter}`}>\n        {initialToolbarFilters && (\n          <PageToolbar>\n            <Toolbar filterOptions={initialToolbarFilters} productId={productId} query={toolbarQuery} viewId={viewId} />\n          </PageToolbar>\n        )}\n        <PageSection>\n          <GraphCard\n            key={`graph_${productId}`}\n            filterGraphData={graphFilters}\n            settings={initialGraphSettings}\n            query={initialGraphTallyQuery}\n            productId={productId}\n            viewId={viewId}\n            cardTitle={graphCardTitle}\n            productLabel={productLabel}\n          >\n            {productId === RHSM_API_PATH_ID_TYPES.OPENSHIFT && uomFilter && (\n              <ToolbarFieldUom value={uomFilter} viewId={viewId} />\n            )}\n            {productId === RHSM_API_PATH_ID_TYPES.OPENSHIFT && (\n              <ToolbarFieldGranularity value={graphTallyQuery[RHSM_API_QUERY_TYPES.GRANULARITY]} viewId={viewId} />\n            )}\n            {productId === RHSM_API_PATH_ID_TYPES.OPENSHIFT_METRICS && <ToolbarFieldRangedMonthly viewId={viewId} />}\n          </GraphCard>\n        </PageSection>\n        <PageSection>\n          <InventoryTabs key={`inventory_${productId}`} productId={productId}>\n            <InventoryTab\n              key={`inventory_hosts_${productId}`}\n              title={t('curiosity-inventory.tabHosts', { context: ['noInstances', productId] })}\n            >\n              <InventoryList\n                key={`inv_${productId}`}\n                filterGuestsData={initialGuestsFilters}\n                filterInventoryData={inventoryFilters}\n                productId={productId}\n                settings={initialInventorySettings}\n                query={initialInventoryHostsQuery}\n                viewId={viewId}\n              />\n            </InventoryTab>\n            {initialSubscriptionsInventoryFilters && (\n              <InventoryTab\n                key={`inventory_subs_${productId}`}\n                title={t('curiosity-inventory.tabSubscriptions', { context: productId })}\n              >\n                <InventorySubscriptions\n                  key={`subs_${productId}`}\n                  filterInventoryData={subscriptionsInventoryFilters}\n                  productId={productId}\n                  query={initialInventorySubscriptionsQuery}\n                  viewId={viewId}\n                />\n              </InventoryTab>\n            )}\n          </InventoryTabs>\n        </PageSection>\n      </React.Fragment>\n    );\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader productLabel={viewProductLabel}>\n        {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: viewProductLabel })}\n      </PageHeader>\n      <PageColumns>{productConfig.map(config => renderProduct(config, uomValue))}</PageColumns>\n    </PageLayout>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: Function}}\n */\nProductViewOpenShiftContainer.propTypes = {\n  t: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: Function}}\n */\nProductViewOpenShiftContainer.defaultProps = {\n  t: translate\n};\n\nexport { ProductViewOpenShiftContainer as default, ProductViewOpenShiftContainer };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, store, useSelector } from '../../redux';\nimport { Select } from '../form/select';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.granularity', { context: type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Array} props.options\n * @param {Function} props.t\n * @param {string} props.value\n * @param {string} props.viewId\n * @returns {Node}\n */\nconst ToolbarFieldGranularity = ({ options, t, value, viewId }) => {\n  const updatedValue = useSelector(\n    ({ view }) => view.graphTallyQuery?.[viewId]?.[RHSM_API_QUERY_TYPES.GRANULARITY],\n    value\n  );\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  /**\n   * On select, dispatch type.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @returns {void}\n   */\n  const onSelect = event => {\n    const { startDate, endDate } = dateHelpers.getRangedDateTime(event.value);\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: event.value\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      }\n    ]);\n  };\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      data-test={ToolbarFieldGranularity.defaultProps.viewId}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{viewId: string, t: Function, options: Array, value: string}}\n */\nToolbarFieldGranularity.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  t: PropTypes.func,\n  value: PropTypes.oneOf([...Object.values(FIELD_TYPES)]),\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{viewId: string, t: translate, options: Array, value: string}}\n */\nToolbarFieldGranularity.defaultProps = {\n  options: toolbarFieldOptions,\n  t: translate,\n  value: FIELD_TYPES.DAILY,\n  viewId: 'toolbarFieldGranularity'\n};\n\nexport { ToolbarFieldGranularity as default, ToolbarFieldGranularity, toolbarFieldOptions };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, store, useSelector } from '../../redux';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = dateHelpers.getRangedMonthDateTime().listDateTimeRanges.map(dateTime => ({\n  ...dateTime,\n  selected: false\n}));\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Array} props.options\n * @param {Function} props.t\n * @param {string} props.value\n * @param {string} props.viewId\n * @returns {Node}\n */\nconst ToolbarFieldRangedMonthly = ({ options, t, value, viewId }) => {\n  const updatedValue = useSelector(({ view }) => view.query?.[viewId]?.[RHSM_API_QUERY_TYPES.START_DATE], value);\n\n  const updatedOptions = options.map(option => ({\n    ...option,\n    selected: option.title === updatedValue || option.value.startDate.toISOString() === updatedValue\n  }));\n\n  /**\n   * On select, dispatch type.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @returns {void}\n   */\n  const onSelect = event => {\n    const { startDate, endDate } = event.value;\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: FIELD_TYPES.DAILY\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      }\n    ]);\n  };\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      placeholder={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      position={SelectPosition.right}\n      maxHeight={250}\n      data-test={ToolbarFieldRangedMonthly.defaultProps.viewId}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{viewId: string, t: Function, options: Array, value: string}}\n */\nToolbarFieldRangedMonthly.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  t: PropTypes.func,\n  value: PropTypes.string,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{viewId: string, t: translate, options: Array, value: string}}\n */\nToolbarFieldRangedMonthly.defaultProps = {\n  options: toolbarFieldOptions,\n  t: translate,\n  value: translate('curiosity-toolbar.granularityRange', { context: 'current' }),\n  viewId: 'toolbarFieldRangeGranularity'\n};\n\nexport { ToolbarFieldRangedMonthly as default, ToolbarFieldRangedMonthly, toolbarFieldOptions };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, store, useSelector } from '../../redux';\nimport { Select } from '../form/select';\nimport { RHSM_API_QUERY_UOM_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.uom', { context: type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * Display a unit of measure (uom) field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Array} props.options\n * @param {Function} props.t\n * @param {string} props.value\n * @param {string} props.viewId\n * @returns {Node}\n */\nconst ToolbarFieldUom = ({ options, t, value, viewId }) => {\n  const updatedValue = useSelector(({ view }) => view.query?.[viewId]?.[RHSM_API_QUERY_TYPES.UOM], value);\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  /**\n   * On select, dispatch type.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @returns {void}\n   */\n  const onSelect = event =>\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.UOM],\n        viewId,\n        [RHSM_API_QUERY_TYPES.UOM]: event.value\n      }\n    ]);\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: 'uom' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder', { context: 'uom' })}\n      data-test={ToolbarFieldUom.defaultProps.viewId}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{viewId: string, t: Function, options: Array, value: string}}\n */\nToolbarFieldUom.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  t: PropTypes.func,\n  value: PropTypes.oneOf([...Object.values(FIELD_TYPES)]),\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{viewId: string, t: translate, options: Array, value: string}}\n */\nToolbarFieldUom.defaultProps = {\n  options: toolbarFieldOptions,\n  t: translate,\n  value: FIELD_TYPES.CORES,\n  viewId: 'toolbarFieldUom'\n};\n\nexport { ToolbarFieldUom as default, ToolbarFieldUom, toolbarFieldOptions };\n","import { useHistory as useHistoryRRD, useLocation, useParams, useRouteMatch } from 'react-router-dom';\nimport { useRouteDetail } from '../components/router/routerContext';\nimport { routerHelpers } from '../components/router/routerHelpers';\nimport { reduxActions, useDispatch } from '../redux';\n\n/**\n * ToDo: reevaluate this alternative pattern of passing library hooks as options\n * We did this as a test to see if its more convenient for unit testing instead of\n * having to spy or mock entire resources.\n */\n/**\n * Pass useHistory methods. Proxy useHistory push with Platform specific navigation update.\n *\n * @param {object} hooks\n * @param {Function} hooks.useHistory\n * @param {Function} hooks.useDispatch\n * @returns {object<history>}\n */\nconst useHistory = ({\n  useHistory: useAliasHistory = useHistoryRRD,\n  useDispatch: useAliasDispatch = useDispatch\n} = {}) => {\n  const history = useAliasHistory();\n  const dispatch = useAliasDispatch();\n\n  return {\n    ...history,\n    push: (pathLocation, historyState) => {\n      const pathName = (typeof pathLocation === 'string' && pathLocation) || pathLocation?.pathname;\n      const { productParameter, id, routeHref } = routerHelpers.getRouteConfig({ pathName, id: pathName });\n      const { hash, search } = window.location;\n\n      if (productParameter) {\n        return dispatch(reduxActions.platform.setAppNav(id));\n      }\n\n      return history.push(routeHref || (pathName && `${pathName}${search}${hash}`) || pathLocation, historyState);\n    }\n  };\n};\n\nconst routerHooks = {\n  useHistory,\n  useLocation,\n  useParams,\n  useRouteDetail,\n  useRouteMatch\n};\n\nexport { routerHooks as default, routerHooks, useHistory, useLocation, useParams, useRouteDetail, useRouteMatch };\n"],"names":["InventoryTabs","onTab","index","productId","props","store","type","reduxTypes","tabs","this","activeTab","children","defaultActiveTab","isDisabled","t","updatedChildren","React","map","child","active","content","title","count","Title","headingLevel","className","length","Tabs","defaultProps","helpers","translate","ConnectedInventoryTabs","connect","inventory","ProductViewOpenShiftContainer","useRouteDetail","viewProductLabel","productParameter","productConfig","uomValue","useSelector","view","query","viewId","RHSM_API_QUERY_TYPES","PageLayout","PageHeader","productLabel","appName","context","PageColumns","config","updatedUomValue","productContextFilterUom","graphTallyQuery","inventoryHostsQuery","inventorySubscriptionsQuery","initialGraphFilters","initialGraphSettings","initialGuestsFilters","initialInventoryFilters","initialInventorySettings","initialSubscriptionsInventoryFilters","initialToolbarFilters","uomFilter","apiQueries","initialGraphTallyQuery","initialInventoryHostsQuery","initialInventorySubscriptionsQuery","toolbarQuery","graphFilters","inventoryFilters","subscriptionsInventoryFilters","filter","id","isOptional","RegExp","test","graphCardTitle","Tooltip","position","TooltipPosition","enableFlip","distance","entryDelay","exitDelay","key","PageToolbar","filterOptions","PageSection","filterGraphData","settings","cardTitle","RHSM_API_PATH_ID_TYPES","ToolbarFieldUom","value","ToolbarFieldGranularity","ToolbarFieldRangedMonthly","InventoryTab","filterGuestsData","filterInventoryData","renderProduct","toolbarFieldOptions","Object","values","FIELD_TYPES","selected","options","updatedValue","updatedOptions","option","Select","onSelect","event","dateHelpers","startDate","endDate","toISOString","selectedOptions","placeholder","listDateTimeRanges","dateTime","SelectPosition","maxHeight","useHistory","useAliasHistory","useHistoryRRD","useDispatch","useAliasDispatch","history","dispatch","push","pathLocation","historyState","pathName","pathname","routerHelpers","routeHref","window","location","hash","search","reduxActions","useLocation","useParams","useRouteMatch"],"sourceRoot":""}