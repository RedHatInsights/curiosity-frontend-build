{"version":3,"file":"js/4096.b37c74fb589f2c786301.js","mappings":"kVAeMA,EAAgB,SAAC,GAA0B,IAe3CC,EACAC,EAhBmBC,EAAwB,EAAxBA,kBAAwB,GACoBC,EAAAA,EAAAA,mBADpB,IACvCC,cAAAA,OADuC,MACvB,GADuB,EACnBC,EADmB,EACnBA,kBAAmBC,EADA,EACAA,gBAE7CC,EAQEH,EARFG,YACAC,EAOEJ,EAPFI,mBACAC,EAMEL,EANFK,WACAC,EAKEN,EALFM,QACAC,EAIEP,EAJFO,QACAC,EAGER,EAHFQ,WACAC,EAEET,EAFFS,WACAC,EACEV,EADFU,WAGEC,EAAqB,kBAAC,IAAD,MACrBC,EAAQ,KAIZ,GAAIN,EAAS,CAKX,IAAMO,GAAgCC,EAAAA,EAAAA,IAAgB,UAAW,UAC3DC,GAAwBC,EAAAA,EAAAA,cAAa,CAAEhB,cAAAA,EAAeC,kBAAAA,EAAmBC,gBAAAA,IAE/ES,EACE,kBAACE,EAAD,CACEI,gBAAgB,IAChBC,iBAAiB,IACjBC,OAAQ,SAAAC,GAAG,OAAIA,GACfC,eACE,kBAAC,IAAD,CACEC,GAAI,EACJC,GAAI,EACJC,aAAc,CAAEC,EAAG,EAAGC,EAAG,GACzBC,YAAa,CAAEC,KAAM,cAAeC,OAAQ,eAC5CR,eAAgB,kBAACN,EAAD,QAGpBe,eAAgB,GAChBC,qBAAmB,IAKrBC,MAAMC,QAAQvB,KAChBE,EAAQF,EAAWwB,KAAI,SAAAC,GAAS,OAC9B,kBAAC,EAAAC,EAAD,eAAWC,IAAG,gBAAWF,EAAUG,cAAmBH,EAAtD,CAAiEI,SAAS,SAI9E,IAAMC,EAAkB,SAAC,GAAyB,IAAvBC,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,MAAY,EACE5C,EAAkB2C,IAAc3C,EAAkB6C,KAAjFC,EAD6B,EACxCC,UAAyBC,GADe,wBAEhD,OAAO,kBAACF,GAAD,kBAAoBE,GAAiBJ,KAM9C,OAHA9C,EAAgBQ,MAAAA,OAAH,EAAGA,EAAoB2C,SAASb,IAAIM,GACjD3C,EAAuBO,MAAAA,OAAH,EAAGA,EAAoB4C,gBAAgBd,IAAIM,GAG7D,kBAAC,IAAD,eACED,QAAS,CAAEU,SAAU,GACrBC,MAAO7C,EACPG,WAAYA,IAHd,QAIQD,QAAAA,EAASI,mBAAAA,GAAuBR,IAEtC,kBAAC,EAAAiC,EAAD,iBAAe3B,EAAf,CAA2B8B,SAAS,KACnC3B,EACAhB,EACD,kBAAC,IAAD,KAAaC,KAenBF,EAAcmD,aAAe,CAC3BhD,kBAAmB,CACjB6C,KAAM,CACJE,UAAWM,EAAAA,EACXZ,QAAS,CACPU,SAAU,IACVG,OAAQ,CAAEH,SAAU,MAEtBI,cAAe,aAEjBC,KAAM,CACJT,UAAWU,EAAAA,EACXhB,QAAS,CACPU,SAAU,IACVG,OAAQ,CAAEH,SAAU,MAEtBI,cAAe,aAEjBG,UAAW,CACTX,UAAWY,EAAAA,EACXlB,QAAS,CACPU,SAAU,IACVG,OAAQ,CAAEH,SAAU,MAEtBI,cAAe","sources":["webpack:///./src/components/chart/chartElements.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { VictoryStack as ChartStack, VictoryTooltip as ChartCursorTooltip } from 'victory';\nimport { createContainer } from 'victory-create-container';\nimport { Chart, ChartArea, ChartAxis, ChartContainer, ChartLine, ChartThreshold } from '@patternfly/react-charts';\nimport { useChartContext } from './chartContext';\nimport { chartTooltip } from './chartTooltip';\n\n/**\n * Generate a compatible Victory chart element/facet component.\n *\n * @param {object} props\n * @param {object} props.chartTypeDefaults\n * @returns {Node}\n */\nconst ChartElements = ({ chartTypeDefaults }) => {\n  const { chartSettings = {}, chartContainerRef, chartTooltipRef } = useChartContext();\n  const {\n    chartDomain,\n    chartElementsProps,\n    chartWidth,\n    hasData,\n    padding,\n    themeColor,\n    xAxisProps,\n    yAxisProps\n  } = chartSettings;\n\n  let containerComponent = <ChartContainer />;\n  let yAxis = null;\n  let chartElements = [];\n  let stackedChartElements = [];\n\n  if (hasData) {\n    /**\n     * Note: both cursor and voronoiDimension attrs required if the need is to have...\n     * the tooltip populate consistently without being \"near\" a chart element y axis point\n     */\n    const VictoryVoronoiCursorContainer = createContainer('voronoi', 'cursor');\n    const TooltipLabelComponent = chartTooltip({ chartSettings, chartContainerRef, chartTooltipRef });\n\n    containerComponent = (\n      <VictoryVoronoiCursorContainer\n        cursorDimension=\"x\"\n        voronoiDimension=\"x\"\n        labels={obj => obj}\n        labelComponent={\n          <ChartCursorTooltip\n            dx={0}\n            dy={0}\n            centerOffset={{ x: 0, y: 0 }}\n            flyoutStyle={{ fill: 'transparent', stroke: 'transparent' }}\n            labelComponent={<TooltipLabelComponent />}\n          />\n        }\n        voronoiPadding={50}\n        mouseFollowTooltips\n      />\n    );\n  }\n\n  if (Array.isArray(yAxisProps)) {\n    yAxis = yAxisProps.map(axisProps => (\n      <ChartAxis key={`yaxis-${axisProps.orientation}`} {...axisProps} animate={false} />\n    ));\n  }\n\n  const setChartElement = ({ chartType, props }) => {\n    const { component: Component, ...defaultProps } = chartTypeDefaults[chartType] || chartTypeDefaults.area;\n    return <Component {...{ ...defaultProps, ...props }} />;\n  };\n\n  chartElements = chartElementsProps?.elements.map(setChartElement);\n  stackedChartElements = chartElementsProps?.stackedElements.map(setChartElement);\n\n  return (\n    <Chart\n      animate={{ duration: 0 }}\n      width={chartWidth}\n      themeColor={themeColor}\n      {...{ padding, containerComponent, ...chartDomain }}\n    >\n      <ChartAxis {...xAxisProps} animate={false} />\n      {yAxis}\n      {chartElements}\n      <ChartStack>{stackedChartElements}</ChartStack>\n    </Chart>\n  );\n};\n\nChartElements.propTypes = {\n  chartTypeDefaults: PropTypes.objectOf(\n    PropTypes.shape({\n      component: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n      animate: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n      interpolation: PropTypes.oneOf(['monotoneX', 'step'])\n    })\n  )\n};\n\nChartElements.defaultProps = {\n  chartTypeDefaults: {\n    area: {\n      component: ChartArea,\n      animate: {\n        duration: 250,\n        onLoad: { duration: 250 }\n      },\n      interpolation: 'monotoneX'\n    },\n    line: {\n      component: ChartLine,\n      animate: {\n        duration: 250,\n        onLoad: { duration: 250 }\n      },\n      interpolation: 'monotoneX'\n    },\n    threshold: {\n      component: ChartThreshold,\n      animate: {\n        duration: 100,\n        onLoad: { duration: 100 }\n      },\n      interpolation: 'step'\n    }\n  }\n};\n\nexport { ChartElements as default, ChartElements };\n"],"names":["ChartElements","chartElements","stackedChartElements","chartTypeDefaults","useChartContext","chartSettings","chartContainerRef","chartTooltipRef","chartDomain","chartElementsProps","chartWidth","hasData","padding","themeColor","xAxisProps","yAxisProps","containerComponent","yAxis","VictoryVoronoiCursorContainer","createContainer","TooltipLabelComponent","chartTooltip","cursorDimension","voronoiDimension","labels","obj","labelComponent","dx","dy","centerOffset","x","y","flyoutStyle","fill","stroke","voronoiPadding","mouseFollowTooltips","Array","isArray","map","axisProps","C","key","orientation","animate","setChartElement","chartType","props","area","Component","component","defaultProps","elements","stackedElements","duration","width","ChartArea","onLoad","interpolation","line","ChartLine","threshold","ChartThreshold"],"sourceRoot":""}