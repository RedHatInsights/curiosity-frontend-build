{"version":3,"file":"js/9407.1666196121234.1870405351becac26a33.js","mappings":"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","sources":["webpack:///./src/components/form/select.js","webpack:///./src/components/graphCard/graphCardContext.js","webpack:///./src/components/graphCard/graphCardMetricTotals.js","webpack:///./src/components/minHeight/minHeight.js","webpack:///./src/components/productView/productViewContext.js","webpack:///./src/components/toolbar/toolbarFieldRangedMonthly.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  DropdownDirection,\n  DropdownPosition,\n  Select as PfSelect,\n  SelectOption as PfSelectOption,\n  SelectVariant\n} from '@patternfly/react-core';\nimport _cloneDeep from 'lodash/cloneDeep';\nimport _isEqual from 'lodash/isEqual';\nimport _findIndex from 'lodash/findIndex';\nimport _isPlainObject from 'lodash/isPlainObject';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Pass direction as select component variant option.\n *\n * @type {DropdownDirection}\n */\nconst SelectDirection = DropdownDirection;\n\n/**\n * Pass position as select component variant option.\n *\n * @type {DropdownPosition}\n */\nconst SelectPosition = DropdownPosition;\n\n/**\n * A wrapper for Patternfly Select. Provides restructured event data for onSelect callback.\n *\n * @augments React.Component\n * @fires onSelect\n * @fires onToggle\n */\nclass Select extends React.Component {\n  state = { isExpanded: false, options: null, selected: null };\n\n  selectField = React.createRef();\n\n  componentDidMount() {\n    const { options } = this.state;\n\n    if (options === null) {\n      this.formatOptions();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { options, selectedOptions } = this.props;\n\n    if (!_isEqual(prevProps.options, options) || !_isEqual(prevProps.selectedOptions, selectedOptions)) {\n      this.formatOptions();\n    }\n  }\n\n  /**\n   * Emulate select event object, apply to provided onSelect prop.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @param {string} titleSelection\n   */\n  onSelect = (event, titleSelection) => {\n    const { options } = this.state;\n    const { id, name, onSelect, variant } = this.props;\n\n    const updatedOptions = options;\n    const optionsIndex = updatedOptions.findIndex(option => option.title === titleSelection);\n    updatedOptions[optionsIndex].selected =\n      variant === SelectVariant.single ? true : !updatedOptions[optionsIndex].selected;\n\n    if (variant === SelectVariant.single) {\n      updatedOptions.forEach((option, index) => {\n        if (optionsIndex !== index) {\n          updatedOptions[index].selected = false;\n        }\n      });\n    }\n\n    const updateSelected =\n      variant === SelectVariant.single\n        ? titleSelection\n        : updatedOptions.filter(opt => opt.selected === true).map(opt => opt.title);\n\n    this.setState(\n      {\n        options: updatedOptions,\n        selected: updateSelected\n      },\n      () => {\n        const mockUpdatedOptions = _cloneDeep(updatedOptions);\n\n        const mockTarget = {\n          id,\n          name: name || id,\n          value: mockUpdatedOptions[optionsIndex].value,\n          selected:\n            (variant === SelectVariant.single && mockUpdatedOptions[optionsIndex]) || _cloneDeep(updateSelected),\n          selectedIndex: optionsIndex,\n          type: `select-${(variant === SelectVariant.single && 'one') || 'multiple'}`,\n          options: mockUpdatedOptions\n        };\n\n        if (variant === SelectVariant.checkbox) {\n          mockTarget.checked = mockUpdatedOptions[optionsIndex].selected;\n        }\n\n        const mockEvent = {\n          ...mockTarget,\n          target: { ...mockTarget },\n          currentTarget: { ...mockTarget },\n          persist: helpers.noop\n        };\n\n        onSelect({ ...mockEvent }, optionsIndex, mockUpdatedOptions);\n\n        if (variant === SelectVariant.single) {\n          this.setState({\n            isExpanded: false\n          });\n        }\n      }\n    );\n  };\n\n  /**\n   * Patternfly Select's open/closed state.\n   *\n   * @event onToggle\n   * @param {boolean} expanded\n   */\n  onToggle = expanded => {\n    this.setState({\n      isExpanded: expanded\n    });\n  };\n\n  // FixMe: attributes filtered on PF select component. allow data- attributes\n  /**\n   * Format options into a consumable array of objects format.\n   * Note: It is understood that for line 151'ish around \"updatedOptions\" we dump all values regardless\n   * of whether they are plain objects, or not, into updatedOptions. This has been done for speed only,\n   * one less check to perform.\n   */\n  formatOptions() {\n    const { current: domElement = {} } = this.selectField;\n    const { options, selectedOptions, variant } = this.props;\n    const dataAttributes = Object.entries(this.props).filter(([key]) => /^data-/i.test(key));\n    const updatedOptions = _isPlainObject(options)\n      ? Object.entries(options).map(([key, value]) => ({ ...value, title: key, value }))\n      : _cloneDeep(options);\n\n    const activateOptions =\n      (selectedOptions && typeof selectedOptions === 'string') || typeof selectedOptions === 'number'\n        ? [selectedOptions]\n        : selectedOptions;\n\n    updatedOptions.forEach((option, index) => {\n      let convertedOption = option;\n\n      if (typeof convertedOption === 'string') {\n        convertedOption = {\n          title: option,\n          value: option\n        };\n\n        updatedOptions[index] = convertedOption;\n      }\n\n      convertedOption.text = convertedOption.text || convertedOption.title;\n      convertedOption.textContent = convertedOption.textContent || convertedOption.title;\n      convertedOption.label = convertedOption.label || convertedOption.title;\n\n      if (activateOptions) {\n        let isSelected;\n\n        if (_isPlainObject(convertedOption.value)) {\n          isSelected = _findIndex(activateOptions, convertedOption.value) > -1;\n\n          if (!isSelected) {\n            const tempSearch = activateOptions.find(activeOption =>\n              Object.values(convertedOption.value).includes(activeOption)\n            );\n            isSelected = !!tempSearch;\n          }\n        } else {\n          isSelected = activateOptions.includes(convertedOption.value);\n        }\n\n        if (!isSelected) {\n          isSelected = activateOptions.includes(convertedOption.title);\n        }\n\n        updatedOptions[index].selected = isSelected;\n      }\n    });\n\n    let updateSelected;\n\n    if (variant === SelectVariant.single) {\n      updateSelected = (updatedOptions.find(opt => opt.selected === true) || {}).title;\n    } else {\n      updateSelected = updatedOptions.filter(opt => opt.selected === true).map(opt => opt.title);\n    }\n\n    if (domElement?.parentRef?.current) {\n      dataAttributes.forEach(([key, value]) => domElement?.parentRef?.current.setAttribute(key, value));\n    }\n\n    this.setState({\n      options: updatedOptions,\n      selected: updateSelected\n    });\n  }\n\n  /**\n   * Render a select/dropdown list.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { options, selected, isExpanded } = this.state;\n    const {\n      ariaLabel,\n      className,\n      direction,\n      isDisabled,\n      isToggleText,\n      maxHeight,\n      placeholder,\n      position,\n      toggleIcon,\n      variant\n    } = this.props;\n\n    const pfSelectOptions = {\n      direction,\n      maxHeight\n    };\n\n    // FixMe: investigate \"isDisabled\", PFReact quirks?\n    if (!options || !options.length || isDisabled) {\n      pfSelectOptions.isDisabled = true;\n    }\n\n    /**\n     * FixMe: PFReact quirks around PfSelect, requires children\n     * \"Null\" is a typical fallback we use across the board on a multitude of React apps.\n     * In this case \"null\" is a fallback for scenarios where an \"undefined\" list is passed\n     * during initial mount. Converted to an empty list/array \"[]\" to compensate.\n     */\n    /**\n     * Note: PFReact missing select border on compile\n     * Related https://github.com/patternfly/patternfly-react/issues/5650 and\n     * https://github.com/cssnano/cssnano/issues/1051\n     */\n    return (\n      <div className=\"curiosity-select\">\n        <PfSelect\n          menuAppendTo=\"parent\"\n          className={`curiosity-select-pf${(!isToggleText && '__no-toggle-text') || ''} ${\n            (position === DropdownPosition.right && 'curiosity-select-pf__position-right') || ''\n          } ${className}`}\n          variant={variant}\n          aria-label={ariaLabel}\n          onToggle={this.onToggle}\n          onSelect={this.onSelect}\n          selections={selected}\n          isOpen={isExpanded}\n          toggleIcon={toggleIcon}\n          placeholderText={placeholder}\n          ref={this.selectField}\n          {...pfSelectOptions}\n        >\n          {(options &&\n            options.map(option => (\n              <PfSelectOption\n                key={window.btoa(`${option.title}-${option.value}`)}\n                id={window.btoa(`${option.title}-${option.value}`)}\n                value={option.title}\n                data-value={(_isPlainObject(option.value) && JSON.stringify([option.value])) || option.value}\n                data-title={option.title}\n              />\n            ))) ||\n            []}\n        </PfSelect>\n      </div>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{toggleIcon: (Node|Function), className: string, ariaLabel: string, onSelect: Function,\n *     isToggleText: boolean, maxHeight: number, name: string, options: (Array|object),\n *     selectedOptions: (number|string|Array), variant: string, id: string, isDisabled: boolean,\n *     placeholder: string, position: string, direction: string}}\n */\nSelect.propTypes = {\n  ariaLabel: PropTypes.string,\n  className: PropTypes.string,\n  direction: PropTypes.oneOf(Object.values(SelectDirection)),\n  id: PropTypes.string,\n  isDisabled: PropTypes.bool,\n  isToggleText: PropTypes.bool,\n  maxHeight: PropTypes.number,\n  name: PropTypes.string,\n  onSelect: PropTypes.func,\n  options: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.string),\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.any,\n        value: PropTypes.any.isRequired,\n        selected: PropTypes.bool\n      })\n    ),\n    PropTypes.shape({\n      title: PropTypes.any,\n      value: PropTypes.any.isRequired,\n      selected: PropTypes.bool\n    }),\n    PropTypes.object\n  ]),\n  placeholder: PropTypes.string,\n  position: PropTypes.oneOf(Object.values(SelectPosition)),\n  selectedOptions: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]))\n  ]),\n  toggleIcon: PropTypes.element,\n  variant: PropTypes.oneOf([...Object.values(SelectVariant)])\n};\n\n/**\n * Default props.\n *\n * @type {{toggleIcon: (Node|Function), className: string, ariaLabel: string, onSelect: Function, isToggleText: boolean,\n *     maxHeight: number, name: string, options: (Array|object), selectedOptions: (number|string|Array),\n *     variant: SelectVariant.single, id: string, isDisabled: boolean, placeholder: string,\n *     position: DropdownPosition.left, direction: DropdownDirection.down}}\n */\nSelect.defaultProps = {\n  ariaLabel: 'Select option',\n  className: '',\n  direction: SelectDirection.down,\n  id: helpers.generateId(),\n  isDisabled: false,\n  isToggleText: true,\n  maxHeight: null,\n  name: null,\n  onSelect: helpers.noop,\n  options: [],\n  placeholder: 'Select option',\n  position: SelectPosition.left,\n  selectedOptions: null,\n  toggleIcon: null,\n  variant: SelectVariant.single\n};\n\nexport { Select as default, Select, SelectDirection, SelectPosition };\n","import React, { useContext } from 'react';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Chart context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{ settings: { isStandalone: false, metrics: [], metric: undefined } }, helpers.noop];\n\nconst GraphCardContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated graph card context.\n *\n * @returns {React.Context<{}>}\n */\nconst useGraphCardContext = () => useContext(GraphCardContext);\n\n/**\n * Use Redux RHSM Actions, getGraphTally.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProductGraphTallyQuery\n * @returns {Function}\n */\nconst useGetGraphTally = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery\n} = {}) => {\n  const query = useAliasProductGraphTallyQuery();\n  const dispatch = useAliasDispatch();\n\n  return metrics => reduxActions.rhsm.getGraphTally(metrics, query)(dispatch);\n};\n\n/**\n * Get multiple metrics from store.\n *\n * @param {object} options\n * @param {Function} options.useGraphCardContext\n * @param {Function} options.useSelectors\n * @param {Function} options.useProduct\n * @returns {{data: object, pending: boolean, fulfilled: boolean, dataSets: Array, error: boolean}}\n */\nconst useMetricsSelector = ({\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useSelectors: useAliasSelectors = storeHooks.reactRedux.useSelectors,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n  const data = {};\n\n  const metricResponses = useAliasSelectors(\n    metrics.map(\n      ({ id: metricId }) =>\n        ({ graph }) =>\n          graph.tally?.[`${productId}_${metricId}`]\n    ),\n    []\n  );\n\n  let isPending = false;\n  let isFulfilled = false;\n  let errorCount = 0;\n\n  const dataSets = metricResponses.map((metric, index) => {\n    const { pending, fulfilled, error, cancelled } = metric || {};\n    const updatedPending = pending || cancelled || false;\n\n    if (updatedPending) {\n      isPending = true;\n    }\n\n    if (fulfilled) {\n      isFulfilled = true;\n    }\n\n    if (error) {\n      errorCount += 1;\n    }\n\n    const updatedMetric = {\n      ...metrics[index],\n      data: metric?.data?.data || [],\n      meta: metric?.data?.meta || {}\n    };\n    data[metrics[index].id] = updatedMetric;\n\n    return updatedMetric;\n  });\n\n  const response = {\n    data,\n    dataSets,\n    error: false,\n    fulfilled: false,\n    pending: false\n  };\n\n  if (errorCount === dataSets.length) {\n    response.error = true;\n  } else if (isPending) {\n    response.pending = true;\n  } else if (isFulfilled) {\n    response.fulfilled = true;\n  }\n\n  return response;\n};\n\nconst context = {\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetGraphTally,\n  useGraphCardContext,\n  useMetricsSelector\n};\n\nexport {\n  context as default,\n  context,\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetGraphTally,\n  useGraphCardContext,\n  useMetricsSelector\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter, CardTitle, Flex, FlexItem } from '@patternfly/react-core';\nimport moment from 'moment';\nimport _camelCase from 'lodash/camelCase';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useMetricsSelector } from './graphCardContext';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { Loader, SkeletonSize } from '../loader/loader';\nimport { dateHelpers, helpers } from '../../common';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldRangedMonthly';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Display totals for a single metric.\n *\n * @param {object} props\n * @param {Node} props.children\n * @param {Function} props.t\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardMetricTotals = ({\n  children,\n  t,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate } = useAliasProductGraphTallyQuery();\n  const { pending, error, fulfilled, dataSets = [] } = useAliasMetricsSelector();\n  const { data = [], id: metricId, meta = {} } = dataSets[0] || {};\n  const { date: lastDate, hasData: lastHasData, y: lastValue } = data[data.length - 1] || {};\n  const {\n    date: currentDate,\n    hasData: currentHasData,\n    y: currentValue\n  } = data.find(({ isCurrentDate }) => isCurrentDate === true) || {};\n\n  const { totalMonthlyDate: monthlyDate, totalMonthlyHasData: monthlyHasData, totalMonthlyValue: monthlyValue } = meta;\n\n  const { title: selectedMonth, isCurrent } =\n    toolbarFieldOptions.find(\n      option => option.title === startDate || option.value.startDate.toISOString() === startDate\n    ) || {};\n\n  const dailyDate = isCurrent ? currentDate : lastDate;\n  const dailyHasData = isCurrent ? currentHasData : lastHasData;\n  const dailyValue = isCurrent ? currentValue : lastValue;\n\n  return (\n    <Flex data-test={`graphMetricTotals-${_camelCase(metricId)}`} className=\"curiosity-usage-graph__totals\">\n      <Flex flex={{ default: 'flex_1' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-column\">\n          <Card\n            data-test=\"graphDailyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric_dailyTotal', {\n                context: metricId,\n                month: selectedMonth\n              })}\n            </CardTitle>\n            <MinHeight key=\"currentBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric_total',\n                      {\n                        context: (dailyHasData && metricId) || '',\n                        total: helpers\n                          .numberDisplay(dailyValue)\n                          ?.format({\n                            average: true,\n                            mantissa: 5,\n                            trimMantissa: true,\n                            lowPrecision: false\n                          })\n                          ?.toUpperCase()\n                      },\n                      [<strong title={dailyValue} aria-label={dailyValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"currentFooter\">\n              <CardFooter>\n                <div className={(!dailyHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    dailyDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(dailyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n          <Card\n            data-test=\"graphMonthlyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric_monthlyTotal', {\n                context: metricId,\n                month: selectedMonth\n              })}\n            </CardTitle>\n            <MinHeight key=\"totalMonthlyBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric_total',\n                      {\n                        context: (monthlyHasData && metricId) || '',\n                        total: helpers\n                          .numberDisplay(monthlyValue)\n                          ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: false })\n                          ?.toUpperCase()\n                      },\n                      [<strong title={monthlyValue} aria-label={monthlyValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"totalMonthlyFooter\">\n              <CardFooter>\n                <div className={(!monthlyHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    monthlyDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(monthlyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n        </FlexItem>\n      </Flex>\n      <Flex flex={{ default: 'flex_3' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-graph-column\">{children}</FlexItem>\n      </Flex>\n    </Flex>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.propTypes = {\n  children: PropTypes.node,\n  t: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.defaultProps = {\n  children: null,\n  t: translate,\n  useMetricsSelector,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardMetricTotals as default, GraphCardMetricTotals };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { helpers } from '../../common';\n\n/**\n * Set a min-height to prevent page jump component.\n *\n * @augments React.Component\n * @fires onResizeContainer\n */\nclass MinHeight extends React.Component {\n  containerRef = React.createRef();\n\n  innerContainerRef = React.createRef();\n\n  updatedContainerWidth = 0;\n\n  resizeObserver = helpers.noop;\n\n  componentDidMount() {\n    const { updateOnResize } = this.props;\n    window.setTimeout(() => {\n      this.setMinHeight();\n    });\n\n    if (updateOnResize) {\n      this.setResizeObserver();\n    }\n  }\n\n  componentDidUpdate() {\n    const { updateOnContent } = this.props;\n\n    if (updateOnContent) {\n      window.setTimeout(() => {\n        this.setMinHeight();\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.resizeObserver();\n  }\n\n  /**\n   * On resize adjust graph display.\n   *\n   * @event onResizeContainer\n   */\n  onResizeContainer = () => {\n    const { updatedContainerWidth } = this;\n    const { updateOnResize } = this.props;\n    const clientWidth = this.containerRef?.current?.clientWidth || 0;\n\n    if (updateOnResize && clientWidth !== updatedContainerWidth) {\n      this.updatedContainerWidth = clientWidth;\n      this.setMinHeight(true);\n    }\n  };\n\n  /**\n   * Set minHeight on mount or update.\n   *\n   * @param {boolean} reset\n   */\n  setMinHeight(reset = false) {\n    const { minHeight: overrideMinHeight } = this.props;\n    const { current: domElement = {} } = this.containerRef;\n    const { current: innerDomElement = {} } = this.innerContainerRef;\n\n    if (domElement?.style) {\n      let clientHeight;\n\n      if (reset) {\n        clientHeight = innerDomElement?.clientHeight || 0;\n      } else {\n        clientHeight = domElement?.clientHeight || 0;\n      }\n\n      if (overrideMinHeight > clientHeight) {\n        clientHeight = overrideMinHeight;\n      }\n\n      domElement.style.minHeight = `${clientHeight}px`;\n    }\n  }\n\n  /**\n   * Set ResizeObserver for scenarios when min-height needs to be updated.\n   */\n  setResizeObserver() {\n    window.addEventListener('resize', this.onResizeContainer);\n    this.resizeObserver = () => window.removeEventListener('resize', this.onResizeContainer);\n  }\n\n  /**\n   * Render a min-height div with children.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { children } = this.props;\n\n    return (\n      <div className=\"curiosity-minheight\" ref={this.containerRef}>\n        <div ref={this.innerContainerRef}>{children}</div>\n      </div>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{minHeight: number, children: Node, updateOnContent: boolean, updateOnResize: boolean}}\n */\nMinHeight.propTypes = {\n  updateOnContent: PropTypes.bool,\n  updateOnResize: PropTypes.bool,\n  children: PropTypes.node.isRequired,\n  minHeight: PropTypes.number\n};\n\n/**\n * Default props.\n *\n * @type {{minHeight: number, updateOnContent: boolean, updateOnResize: boolean}}\n */\nMinHeight.defaultProps = {\n  updateOnContent: false,\n  updateOnResize: true,\n  minHeight: 0\n};\n\nexport { MinHeight as default, MinHeight };\n","import React, { useCallback, useContext } from 'react';\nimport { reduxHelpers } from '../../redux/common';\nimport { storeHooks } from '../../redux/hooks';\nimport { RHSM_API_QUERY_TYPES, rhsmApiTypes } from '../../types/rhsmApiTypes';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Route context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{}, helpers.noop];\n\nconst ProductViewContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated product view context.\n *\n * @returns {React.Context<{}>}\n */\nconst useProductViewContext = () => useContext(ProductViewContext);\n\n/**\n * Return a query object from initial product config and Redux store.\n *\n * @param {string} queryType An identifier used to pull from both config and Redux, they should named the same.\n * @param {object} options\n * @param {string} options.overrideId A custom identifier, used for scenarios like the Guest inventory IDs\n * @param {object} options.useProductViewContext\n * @returns {object}\n */\nconst useProductQueryFactory = (\n  queryType,\n  { overrideId, useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}\n) => {\n  const { [queryType]: initialQuery, productId, viewId } = useAliasProductViewContext();\n  const queryOverride = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[overrideId], undefined);\n  const queryProduct = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[productId], undefined);\n  const queryView = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[viewId], undefined);\n\n  return {\n    ...initialQuery,\n    ...queryOverride,\n    ...queryProduct,\n    ...queryView\n  };\n};\n\n/**\n * Return a base product query\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductQuery = ({ queryType = 'query', options } = {}) => useProductQueryFactory(queryType, options);\n\n/**\n * Return the graph query based off of tally and capacity.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductGraphTallyQuery = ({\n  queryType = 'graphTallyQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_REPORT_CAPACITY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return the inventory query for guests. Use fallback/defaults for guests offset, limit.\n *\n * @param {object} options\n * @param {number} options.defaultLimit\n * @param {number} options.defaultOffset\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryGuestsQuery = ({\n  defaultLimit = 100,\n  defaultOffset = 0,\n  queryType = 'inventoryGuestsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_GUESTS_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      [RHSM_API_QUERY_SET_TYPES.LIMIT]: defaultLimit,\n      [RHSM_API_QUERY_SET_TYPES.OFFSET]: defaultOffset,\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for hosts.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryHostsQuery = ({\n  queryType = 'inventoryHostsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for subscriptions.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventorySubscriptionsQuery = ({\n  queryType = 'inventorySubscriptionsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Get a filtered product configuration context.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductViewContext\n * @returns {object}\n */\nconst useProductContext = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductViewContext: useAliasProductViewContext = useProductViewContext\n} = {}) => {\n  const { [RHSM_API_QUERY_TYPES.UOM]: uomFilter } = useAliasProductQuery();\n  const {\n    initialGraphFilters = [],\n    initialInventoryFilters = [],\n    initialSubscriptionsInventoryFilters = [],\n    productContextFilterUom,\n    ...config\n  } = useAliasProductViewContext();\n\n  const applyUomFilter = useCallback(() => {\n    if (productContextFilterUom === true) {\n      const filterFilters = ({ id, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(uomFilter, 'i').test(id);\n      };\n\n      return {\n        ...config,\n        initialGraphFilters: initialGraphFilters.filter(filterFilters),\n        initialInventoryFilters: initialInventoryFilters.filter(filterFilters),\n        initialSubscriptionsInventoryFilters: initialSubscriptionsInventoryFilters.filter(filterFilters)\n      };\n    }\n\n    return {\n      ...config,\n      initialGraphFilters,\n      initialInventoryFilters,\n      initialSubscriptionsInventoryFilters\n    };\n  }, [\n    config,\n    initialGraphFilters,\n    initialInventoryFilters,\n    initialSubscriptionsInventoryFilters,\n    productContextFilterUom,\n    uomFilter\n  ]);\n\n  return applyUomFilter();\n};\n\n/**\n * Return product identifiers.\n *\n * @param {object} options\n * @param {Function} options.useProductViewContext\n * @returns {{productLabel: string, viewId: string, productId: string, productGroup: string}}\n */\nconst useProduct = ({ useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}) => {\n  const { productGroup, productId, productLabel, viewId } = useAliasProductViewContext();\n  return {\n    productGroup,\n    productId,\n    productLabel,\n    viewId\n  };\n};\n\n/**\n * Return graph configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductGraphConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialGraphFilters, initialGraphSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGraphFilters,\n    settings: initialGraphSettings\n  };\n};\n\n/**\n * Return guests inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryGuestsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { inventoryGuestsQuery = {}, initialGuestsFilters, initialGuestsSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGuestsFilters,\n    initialQuery: inventoryGuestsQuery,\n    settings: initialGuestsSettings\n  };\n};\n\n/**\n * Return hosts inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryHostsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialInventoryFilters, initialInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialInventoryFilters,\n    settings: initialInventorySettings\n  };\n};\n\n/**\n * Return subscriptions inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventorySubscriptionsConfig = ({\n  useProductContext: useAliasProductContext = useProductContext\n} = {}) => {\n  const { initialSubscriptionsInventoryFilters, initialSubscriptionsInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialSubscriptionsInventoryFilters,\n    settings: initialSubscriptionsInventorySettings\n  };\n};\n\n/**\n * Return primary toolbar configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductToolbarConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const {\n    initialToolbarFilters,\n    initialToolbarSettings = {},\n    initialSecondaryToolbarFilters\n  } = useAliasProductContext();\n  return {\n    filters: initialToolbarFilters,\n    secondaryFilters: initialSecondaryToolbarFilters,\n    settings: initialToolbarSettings\n  };\n};\n\nconst context = {\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useQuery: useProductQuery,\n  useQueryFactory: useProductQueryFactory,\n  useGraphTallyQuery: useProductGraphTallyQuery,\n  useInventoryGuestsQuery: useProductInventoryGuestsQuery,\n  useInventoryHostsQuery: useProductInventoryHostsQuery,\n  useInventorySubscriptionsQuery: useProductInventorySubscriptionsQuery,\n  useProduct,\n  useGraphConfig: useProductGraphConfig,\n  useInventoryGuestsConfig: useProductInventoryGuestsConfig,\n  useInventoryHostsConfig: useProductInventoryHostsConfig,\n  useInventorySubscriptionsConfig: useProductInventorySubscriptionsConfig,\n  useToolbarConfig: useProductToolbarConfig\n};\n\nexport {\n  context as default,\n  context,\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useProductQuery,\n  useProductQueryFactory,\n  useProductGraphTallyQuery,\n  useProductInventoryGuestsQuery,\n  useProductInventoryHostsQuery,\n  useProductInventorySubscriptionsQuery,\n  useProduct,\n  useProductGraphConfig,\n  useProductInventoryGuestsConfig,\n  useProductInventoryHostsConfig,\n  useProductInventorySubscriptionsConfig,\n  useProductToolbarConfig\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = dateHelpers.getRangedMonthDateTime().listDateTimeRanges.map(dateTime => ({\n  ...dateTime,\n  selected: false\n}));\n\n/**\n * On select update granularity.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value } = {}) => {\n    const { startDate, endDate } = value;\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: FIELD_TYPES.DAILY\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate?.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate?.toISOString()\n      }\n    ]);\n  };\n};\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {Array} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst ToolbarFieldRangedMonthly = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_TYPES.START_DATE]: updatedValue } = useAliasProductGraphTallyQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({\n    ...option,\n    selected: option.title === updatedValue || option.value.startDate.toISOString() === updatedValue\n  }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'rangedMonthly' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'rangedMonthly' })}\n      position={position}\n      maxHeight={250}\n      data-test=\"toolbarFieldRangeGranularity\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldRangedMonthly.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldRangedMonthly.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductGraphTallyQuery\n};\n\nexport { ToolbarFieldRangedMonthly as default, ToolbarFieldRangedMonthly, toolbarFieldOptions, useOnSelect };\n"],"names":["SelectDirection","DropdownDirection","SelectPosition","DropdownPosition","Select","state","isExpanded","options","selected","selectField","React","onSelect","event","titleSelection","props","id","name","variant","updatedOptions","optionsIndex","findIndex","option","title","SelectVariant","forEach","index","updateSelected","filter","opt","map","setState","mockUpdatedOptions","_cloneDeep","mockTarget","value","selectedIndex","type","checked","mockEvent","target","currentTarget","persist","helpers","onToggle","expanded","this","formatOptions","prevProps","selectedOptions","_isEqual","current","domElement","dataAttributes","Object","entries","key","test","_isPlainObject","activateOptions","isSelected","convertedOption","text","textContent","label","_findIndex","find","activeOption","values","includes","parentRef","setAttribute","ariaLabel","className","direction","isDisabled","isToggleText","maxHeight","placeholder","position","toggleIcon","pfSelectOptions","length","menuAppendTo","selections","isOpen","placeholderText","ref","window","btoa","JSON","stringify","defaultProps","down","left","DEFAULT_CONTEXT","settings","isStandalone","metrics","metric","undefined","GraphCardContext","useGraphCardContext","useContext","useGetGraphTally","useDispatch","useAliasDispatch","storeHooks","useProductGraphTallyQuery","useAliasProductGraphTallyQuery","query","dispatch","reduxActions","useMetricsSelector","useAliasGraphCardContext","useSelectors","useAliasSelectors","useProduct","useAliasProduct","productId","data","metricResponses","metricId","graph","tally","isPending","isFulfilled","errorCount","dataSets","pending","fulfilled","error","cancelled","updatedMetric","meta","response","context","GraphCardMetricTotals","children","t","useAliasMetricsSelector","startDate","RHSM_API_QUERY_SET_TYPES","lastDate","date","lastHasData","hasData","lastValue","y","isCurrentDate","currentDate","currentHasData","currentValue","monthlyDate","totalMonthlyDate","monthlyHasData","totalMonthlyHasData","monthlyValue","totalMonthlyValue","toolbarFieldOptions","toISOString","selectedMonth","isCurrent","dailyDate","dailyHasData","dailyValue","Flex","_camelCase","flex","default","alignSelf","FlexItem","Card","CardTitle","month","MinHeight","CardBody","Loader","skeletonProps","size","SkeletonSize","total","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","CardFooter","moment","dateHelpers","translate","containerRef","innerContainerRef","updatedContainerWidth","resizeObserver","onResizeContainer","updateOnResize","clientWidth","setMinHeight","setTimeout","setResizeObserver","updateOnContent","clientHeight","reset","overrideMinHeight","minHeight","innerDomElement","style","addEventListener","removeEventListener","ProductViewContext","useProductViewContext","useProductQueryFactory","queryType","overrideId","useAliasProductViewContext","initialQuery","viewId","queryOverride","view","queryProduct","queryView","useProductQuery","schemaCheck","rhsmApiTypes","reduxHelpers","useProductInventoryGuestsQuery","defaultLimit","defaultOffset","useProductInventoryHostsQuery","useProductInventorySubscriptionsQuery","useProductContext","useAliasProductQuery","uomFilter","RHSM_API_QUERY_TYPES","initialGraphFilters","initialInventoryFilters","initialSubscriptionsInventoryFilters","productContextFilterUom","config","applyUomFilter","useCallback","filterFilters","isOptional","RegExp","productGroup","productLabel","useProductGraphConfig","useAliasProductContext","initialGraphSettings","filters","useProductInventoryGuestsConfig","inventoryGuestsQuery","initialGuestsFilters","initialGuestsSettings","useProductInventoryHostsConfig","initialInventorySettings","useProductInventorySubscriptionsConfig","initialSubscriptionsInventorySettings","useProductToolbarConfig","initialToolbarFilters","initialToolbarSettings","initialSecondaryToolbarFilters","secondaryFilters","useQuery","useQueryFactory","useGraphTallyQuery","useInventoryGuestsQuery","useInventoryHostsQuery","useInventorySubscriptionsQuery","useGraphConfig","useInventoryGuestsConfig","useInventoryHostsConfig","useInventorySubscriptionsConfig","useToolbarConfig","listDateTimeRanges","dateTime","useOnSelect","endDate","reduxTypes","FIELD_TYPES","ToolbarFieldRangedMonthly","isFilter","useAliasOnSelect","updatedValue"],"sourceRoot":""}