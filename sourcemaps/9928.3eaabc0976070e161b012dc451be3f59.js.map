{"version":3,"file":"js/9928.a1fb2524f63b9db2683a.js","mappings":"8TAaMA,EAAsBC,OAAOC,OAAOC,EAAAA,IAAaC,KAAI,SAAAC,GAAI,MAAK,CAClEC,OAAOC,EAAAA,EAAAA,WAAU,0BAA2B,CAAEC,QAAmB,KAATH,EAAe,cAAkBA,IACzFI,MAAOJ,EACPK,UAAU,MAWNC,EAAc,WAGT,6DAAP,GAAO,IAFTC,YAAaC,OAEJ,MAFuBC,EAAAA,GAAAA,WAAAA,YAEvB,MADTC,WAAYC,OACH,MADqBD,EAAAA,WACrB,IACUC,IAAXC,EADC,EACDA,OACFC,EAAWL,IAEjB,OAAO,wEAAoB,GAApB,IAAGJ,MAAAA,OAAH,MAAW,KAAX,SACLS,EAAS,CACP,CACEb,KAAMc,EAAAA,GAAAA,MAAAA,+BACNF,OAAAA,IAHK,QAMLZ,KAAMc,EAAAA,GAAAA,MAAAA,qBAAsCC,EAAAA,GAAAA,OAC5CH,OAAAA,GACCG,EAAAA,GAAAA,MAA6BX,OAiBhCY,EAAoB,SAAC,GAMrB,IALJC,EAKI,EALJA,SACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,EACaC,EAET,EAFJd,YAGsCe,GAAiBC,EADnD,EADJC,mBAESR,EAAAA,GAAAA,OACHS,EAAWJ,IAEXK,EAAiBP,EAAQnB,KAAI,SAAA2B,GAAM,yBAAUA,GAAV,IAAkBrB,SAAUqB,EAAOtB,QAAUiB,OAEtF,OACE,kBAAC,EAAAM,OAAD,CACE,aAAYR,EAAE,gCAAD,OAAkCF,EAAY,UAAc,IAAM,CAAEd,QAAS,UAC1FqB,SAAUA,EACVN,QAASO,EACTG,gBAAiBP,EACjBQ,YAAaV,EAAE,gCAAD,OAAkCF,EAAY,UAAc,IAAM,CAAEd,QAAS,UAC3F,YAAU,uBA8BhBa,EAAkBc,aAAe,CAC/Bb,UAAU,EACVC,QAASvB,EACTwB,EAAGjB,EAAAA,UACHI,YAAAA,EACAiB,gBAAAA,EAAAA","sources":["webpack:///./src/components/toolbar/toolbarFieldUsage.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { Select } from '../form/select';\nimport { RHSM_API_QUERY_USAGE_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.usage', { context: (type === '' && 'unspecified') || type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update usage.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) =>\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.USAGE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.USAGE]: value\n      }\n    ]);\n};\n\n/**\n * Display a usage field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {object} props.options\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductQuery\n * @returns {Node}\n */\nconst ToolbarFieldUsage = ({\n  isFilter,\n  options,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductQuery: useAliasProductQuery\n}) => {\n  const { [RHSM_API_QUERY_TYPES.USAGE]: updatedValue } = useAliasProductQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'usage' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'usage' })}\n      data-test=\"toolbarFieldUsage\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function}}\n */\nToolbarFieldUsage.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function}}\n */\n\nToolbarFieldUsage.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  t: translate,\n  useOnSelect,\n  useProductQuery\n};\n\nexport { ToolbarFieldUsage as default, ToolbarFieldUsage, toolbarFieldOptions, useOnSelect };\n"],"names":["toolbarFieldOptions","Object","values","FIELD_TYPES","map","type","title","translate","context","value","selected","useOnSelect","useDispatch","useAliasDispatch","storeHooks","useProduct","useAliasProduct","viewId","dispatch","reduxTypes","RHSM_API_QUERY_TYPES","ToolbarFieldUsage","isFilter","options","t","useAliasOnSelect","updatedValue","useAliasProductQuery","useProductQuery","onSelect","updatedOptions","option","Select","selectedOptions","placeholder","defaultProps"],"sourceRoot":""}