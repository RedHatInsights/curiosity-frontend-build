{"version":3,"file":"js/3597.1678759336443.5b8772e8b25010f3cc76.js","mappings":"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","sources":["webpack:///./src/components/toolbar/toolbarFieldCategory.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductGraphConfig, useProductToolbarQuery } from '../productView/productViewContext';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { Select, SelectPosition } from '../form/select';\nimport { graphCardHelpers } from '../graphCard/graphCardHelpers';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A standalone Category select filter.\n *\n * @memberof Toolbar\n * @module ToolbarFieldCategory\n */\n\n/**\n * Generate select field options from nested product graph configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductGraphConfig\n * @returns {Function}\n */\nconst useToolbarFieldOptions = ({ useProductGraphConfig: useAliasProductGraphConfig = useProductGraphConfig } = {}) => {\n  const { filters } = useAliasProductGraphConfig();\n  const options = [];\n\n  if (Array.isArray(filters)) {\n    const updatedFilters = [];\n    const update = ({ metric, query }) => {\n      const category = query?.[RHSM_API_QUERY_SET_TYPES.CATEGORY];\n      const isDuplicate = updatedFilters.find(({ value }) => value === category);\n\n      if (category !== undefined && !isDuplicate) {\n        updatedFilters.push({\n          title: translate('curiosity-toolbar.label', {\n            context: ['category', (category === '' && 'none') || category]\n          }),\n          value: category,\n          metaData: {\n            metric,\n            query\n          },\n          selected: false\n        });\n      }\n    };\n\n    filters?.forEach(({ filters: groupedFilters, ...restFilters }) => {\n      if (Array.isArray(groupedFilters)) {\n        groupedFilters.forEach(group => update(group));\n      } else {\n        update(restFilters);\n      }\n    });\n\n    if (updatedFilters?.length) {\n      options.push(...updatedFilters);\n    }\n  }\n\n  return options;\n};\n\n/**\n * On select update.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId, viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null, selected = {} } = {}) => {\n    let updatedGraphLegendValue = value;\n\n    if (selected?.metaData?.metric) {\n      updatedGraphLegendValue = graphCardHelpers.generateChartIds({\n        metric: selected.metaData.metric,\n        productId,\n        query: { [RHSM_API_QUERY_SET_TYPES.CATEGORY]: value }\n      });\n    }\n\n    dispatch([\n      {\n        type: reduxTypes.graph.SET_GRAPH_LEGEND,\n        id: `${viewId}-inverted`,\n        value: updatedGraphLegendValue\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY,\n        viewId,\n        filter: RHSM_API_QUERY_SET_TYPES.CATEGORY,\n        value\n      }\n    ]);\n  };\n};\n\n/**\n * Display a category field with generated options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductToolbarQuery\n * @param {Function} props.useToolbarFieldOptions\n * @returns {React.ReactNode}\n */\nconst ToolbarFieldCategory = ({\n  isFilter,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductToolbarQuery: useAliasProductToolbarQuery,\n  useToolbarFieldOptions: useAliasToolbarFieldOptions\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.CATEGORY]: updatedValue } = useAliasProductToolbarQuery();\n  const onSelect = useAliasOnSelect();\n  const options = useAliasToolbarFieldOptions();\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'category'] })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'category'] })}\n      position={position}\n      // variant={SelectVariant.checkbox}\n      data-test=\"toolbarFieldCategory\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, useProductToolbarQuery: Function, isFilter: boolean,\n *     position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldCategory.propTypes = {\n  isFilter: PropTypes.bool,\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductToolbarQuery: PropTypes.func,\n  useToolbarFieldOptions: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: translate, useProductToolbarQuery: Function, isFilter: boolean,\n *     position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldCategory.defaultProps = {\n  isFilter: false,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductToolbarQuery,\n  useToolbarFieldOptions\n};\n\nexport { ToolbarFieldCategory as default, ToolbarFieldCategory, useOnSelect, useToolbarFieldOptions };\n"],"names":["useToolbarFieldOptions","_ref","arguments","length","undefined","_ref$useProductGraphC","useProductGraphConfig","useAliasProductGraphConfig","_useAliasProductGraph","filters","options","Array","isArray","updatedFilters","update","_ref2","metric","query","category","RHSM_API_QUERY_SET_TYPES","isDuplicate","find","_ref3","value","push","title","translate","context","metaData","selected","forEach","_ref4","groupedFilters","restFilters","_objectWithoutProperties","_excluded","group","apply","useOnSelect","_ref5","_ref5$useDispatch","useDispatch","useAliasDispatch","storeHooks","_ref5$useProduct","useProduct","useAliasProduct","_useAliasProduct","productId","viewId","dispatch","_selected$metaData","_ref6","_ref6$value","_ref6$selected","updatedGraphLegendValue","graphCardHelpers","_defineProperty","type","reduxTypes","id","concat","filter","ToolbarFieldCategory","_ref7","isFilter","position","t","useAliasOnSelect","useAliasProductToolbarQuery","useProductToolbarQuery","useAliasToolbarFieldOptions","updatedValue","onSelect","updatedOptions","map","option","_objectSpread","React","Select","selectedOptions","placeholder","defaultProps","SelectPosition"],"sourceRoot":""}