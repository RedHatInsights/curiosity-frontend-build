{"version":3,"file":"js/939.1677791703608.e5bb449772a7ae142405.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardChartTitleTooltip.js","webpack:///./src/components/graphCard/graphCardContext.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { useProduct } from '../productView/productViewContext';\nimport { useGraphCardContext } from './graphCardContext';\nimport { translate } from '../i18n/i18n';\n\n/**\n * @memberof GraphCard\n * @module GraphCardChartTitleTooltip\n */\n\n/**\n * Graph card title tooltip.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useProduct\n * @returns {React.ReactNode}\n */\nconst GraphCardChartTitleTooltip = ({\n  t,\n  useGraphCardContext: useAliasGraphCardContext,\n  useProduct: useAliasProduct\n}) => {\n  const { productId } = useAliasProduct();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { isCardTitleDescription, isStandalone, metric } = settings;\n\n  if (!isCardTitleDescription && !metric?.isCardTitleDescription) {\n    return null;\n  }\n\n  return (\n    <Tooltip\n      content={\n        <p>{t(`curiosity-graph.cardHeadingDescription`, { context: (isStandalone && metric?.id) || productId })}</p>\n      }\n      position={TooltipPosition.top}\n      enableFlip={false}\n      distance={5}\n      entryDelay={100}\n      exitDelay={0}\n    >\n      <span className=\"curiosity-icon__question\">\n        <OutlinedQuestionCircleIcon />\n      </span>\n    </Tooltip>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, t: Function}}\n */\nGraphCardChartTitleTooltip.propTypes = {\n  t: PropTypes.func,\n  useProduct: PropTypes.func,\n  useGraphCardContext: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, t: Function}}\n */\nGraphCardChartTitleTooltip.defaultProps = {\n  t: translate,\n  useProduct,\n  useGraphCardContext\n};\n\nexport { GraphCardChartTitleTooltip as default, GraphCardChartTitleTooltip };\n","import React, { useContext, useMemo } from 'react';\nimport { useShallowCompareEffect } from 'react-use';\nimport { ToolbarItem } from '@patternfly/react-core';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphConfig, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldSelectCategory';\nimport { helpers } from '../../common/helpers';\nimport { graphCardHelpers } from './graphCardHelpers';\n\n/**\n * @memberof GraphCard\n * @module GraphCardContext\n */\n\n/**\n * Chart context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{ settings: { isStandalone: false, metrics: [], metric: undefined } }, helpers.noop];\n\nconst GraphCardContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated graph card context.\n *\n * @returns {React.Context<{}>}\n */\nconst useGraphCardContext = () => useContext(GraphCardContext);\n\n/**\n * Parse filters settings for context.\n *\n * @param {object} options\n * @param {Function} options.useProduct\n * @param {Function} options.useProductGraphConfig\n * @returns {{standaloneFiltersSettings: Array<{ settings: object }>, groupedFiltersSettings: { settings: object }}}\n */\nconst useParseFiltersSettings = ({\n  useProduct: useAliasProduct = useProduct,\n  useProductGraphConfig: useAliasProductGraphConfig = useProductGraphConfig\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const { filters = [], settings = {} } = useAliasProductGraphConfig();\n  const { groupedFiltersSettings, standaloneFiltersSettings = [] } = useMemo(\n    () =>\n      graphCardHelpers.generateChartSettings({\n        filters,\n        settings,\n        productId\n      }),\n    [filters, settings, productId]\n  );\n\n  return {\n    groupedFiltersSettings,\n    standaloneFiltersSettings\n  };\n};\n\n/**\n * Transform multiple metrics from store for chart/graph consumption.\n *\n * @param {object} options\n * @param {Function} options.useGraphCardContext\n * @param {Function} options.useSelectorsResponse\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: Array, errorId: {},\n *     id: {}, list: Array}, cancelled: boolean, dataSets: Array, message: null, error: boolean}}\n */\nconst useMetricsSelector = ({\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  const {\n    error,\n    fulfilled,\n    pending,\n    data = [],\n    ...response\n  } = useAliasSelectorsResponse(\n    metrics.map(\n      ({ id: metricId, isCapacity }) =>\n        ({ graph }) =>\n          isCapacity ? graph.capacity?.[metricId] : graph.tally?.[metricId]\n    )\n  );\n\n  /**\n   * Apply graph config settings to metric data.\n   */\n  const dataById = {};\n  const dataByList = data?.map((metricData, index) => {\n    const updatedMetricData = {\n      ...metrics[index],\n      ...metricData\n    };\n    dataById[metrics[index].id] = updatedMetricData;\n    return updatedMetricData;\n  });\n\n  return {\n    ...response,\n    data: dataById,\n    dataSets: dataByList,\n    error,\n    fulfilled,\n    pending\n  };\n};\n\n/**\n * Get graph metrics from Tally or Capacity.\n *\n * @param {object} params\n * @param {Function} params.getGraphMetrics\n * @param {Function} params.useDispatch\n * @param {Function} params.useGraphCardContext\n * @param {Function} params.useMetricsSelector\n * @param {Function} params.useProduct\n * @param {Function} params.useProductGraphTallyQuery\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: Array, errorId: {},\n *     id: {}, list: Array}, cancelled: boolean, dataSets: Array, message: null, error: boolean}}\n */\nconst useGetMetrics = ({\n  getGraphMetrics = reduxActions.rhsm.getGraphMetrics,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector = useMetricsSelector,\n  useProduct: useAliasProduct = useProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductGraphTallyQuery();\n  const dispatch = useAliasDispatch();\n  const response = useAliasMetricsSelector();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  useShallowCompareEffect(() => {\n    const updatedMetrics = metrics.map(({ metric: metricId, isCapacity, query: metricQuery }) => ({\n      id: productId,\n      metric: metricId,\n      isCapacity,\n      query: metricQuery\n    }));\n    getGraphMetrics(updatedMetrics, query)(dispatch);\n  }, [metrics, productId, query]);\n\n  return response;\n};\n\n/**\n * Return a component list for a configurable graphCard action toolbar.\n * Allow the \"content\" prop to receive graph data for display via callback.\n *\n * @param {object} params\n * @param {Array} params.categoryOptions\n * @param {Function} params.useMetricsSelector\n * @param {Function} params.useGraphCardContext\n * @returns {Array}\n */\nconst useGraphCardActions = ({\n  categoryOptions = toolbarFieldOptions,\n  useMetricsSelector: useAliasMetricsSelector = useMetricsSelector,\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext\n} = {}) => {\n  const { pending, dataSets } = useAliasMetricsSelector();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { actions } = settings;\n\n  return useMemo(\n    () =>\n      actions?.map(({ id, content, ...actionProps }) => {\n        const option = categoryOptions.find(({ value: categoryOptionValue }) => id === categoryOptionValue);\n        const { component: OptionComponent } = option || {};\n\n        return (\n          (OptionComponent && (\n            <ToolbarItem key={`option-${id}`}>\n              <OptionComponent isFilter={false} {...actionProps} />\n            </ToolbarItem>\n          )) ||\n          (content && !pending && dataSets.length && (\n            <ToolbarItem key={id || helpers.generateId()}>\n              {typeof content === 'function' ? content({ data: dataSets }) : content}\n            </ToolbarItem>\n          )) ||\n          null\n        );\n      }),\n    [actions, categoryOptions, dataSets, pending]\n  );\n};\n\nconst context = {\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardActions,\n  useGraphCardContext,\n  useMetricsSelector,\n  useParseFiltersSettings\n};\n\nexport {\n  context as default,\n  context,\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardActions,\n  useGraphCardContext,\n  useMetricsSelector,\n  useParseFiltersSettings\n};\n"],"names":["GraphCardChartTitleTooltip","_ref","t","useAliasGraphCardContext","useGraphCardContext","productId","useAliasProduct","useProduct","_useAliasGraphCardCon2","settings","isCardTitleDescription","isStandalone","metric","React","Tooltip","content","context","id","position","TooltipPosition","enableFlip","distance","entryDelay","exitDelay","className","OutlinedQuestionCircleIcon","defaultProps","translate","DEFAULT_CONTEXT","metrics","undefined","helpers","GraphCardContext","useContext","useParseFiltersSettings","arguments","length","_ref$useProduct","_ref$useProductGraphC","useProductGraphConfig","useAliasProductGraphConfig","_useAliasProduct","_useAliasProductGraph","_useAliasProductGraph2","filters","_useAliasProductGraph3","_useMemo","useMemo","graphCardHelpers","groupedFiltersSettings","_useMemo$standaloneFi","standaloneFiltersSettings","useMetricsSelector","_ref2","_ref2$useGraphCardCon","_ref2$useSelectorsRes","useSelectorsResponse","useAliasSelectorsResponse","storeHooks","_useAliasGraphCardCon","_settings$metrics","_useAliasSelectorsRes","map","_ref3","metricId","isCapacity","_ref4","_graph$capacity","_graph$tally","graph","capacity","tally","error","fulfilled","pending","_useAliasSelectorsRes2","data","response","_objectWithoutProperties","_excluded","dataById","dataByList","metricData","index","updatedMetricData","_objectSpread","dataSets","useGetMetrics","_ref5","_ref5$getGraphMetrics","getGraphMetrics","reduxActions","_ref5$useDispatch","useDispatch","useAliasDispatch","_ref5$useGraphCardCon","_ref5$useMetricsSelec","useAliasMetricsSelector","_ref5$useProduct","_ref5$useProductGraph","useProductGraphTallyQuery","useAliasProductGraphTallyQuery","_useAliasProduct2","query","dispatch","_useAliasGraphCardCon3","_useAliasGraphCardCon4","_settings$metrics2","useShallowCompareEffect","updatedMetrics","_ref6","metricQuery","useGraphCardActions","_ref7","_ref7$categoryOptions","categoryOptions","toolbarFieldOptions","_ref7$useMetricsSelec","_ref7$useGraphCardCon","_useAliasMetricsSelec","_useAliasGraphCardCon5","_useAliasGraphCardCon6","actions","_ref8","actionProps","_excluded2","OptionComponent","find","_ref9","categoryOptionValue","value","component","ToolbarItem","key","concat","Object","assign","isFilter"],"sourceRoot":""}