{"version":3,"file":"js/1799.1670251754703.41b92bd2d864da1e06b9.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardChart.js","webpack:///./src/components/graphCard/graphCardChartLegend.js","webpack:///./src/components/graphCard/graphCardChartTitleTooltip.js","webpack:///./src/components/graphCard/graphCardChartTooltip.js","webpack:///./src/components/graphCard/graphCardContext.js","webpack:///./src/components/graphCard/graphCardHelpers.js","webpack:///./src/components/minHeight/minHeight.js","webpack:///./src/components/productView/productViewContext.js","webpack:///./node_modules/fast-shallow-equal/index.js","webpack:///./node_modules/react-use/esm/useShallowCompareEffect.js","webpack:///./node_modules/react-use/esm/useCustomCompareEffect.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardActions, CardBody, CardHeader, CardTitle, Title } from '@patternfly/react-core';\nimport { useShallowCompareEffect } from 'react-use';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useGraphCardContext, useGetGraphTally, useMetricsSelector } from './graphCardContext';\nimport { graphCardHelpers } from './graphCardHelpers';\nimport { Chart } from '../chart/chart';\nimport { GraphCardChartLegend } from './graphCardChartLegend';\nimport { GraphCardChartTooltip } from './graphCardChartTooltip';\nimport { GraphCardChartTitleTooltip } from './graphCardChartTitleTooltip';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { Loader } from '../loader/loader';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A chart/graph card.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useGetGraphTally\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProduct\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardChart = ({\n  t,\n  useGetGraphTally: useAliasGetGraphTally,\n  useGraphCardContext: useAliasGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProduct: useAliasProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productId } = useAliasProduct();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { actionDisplay, metric, metrics = [] } = settings;\n\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n  const { pending, error, data = {}, dataSets = [] } = useAliasMetricsSelector();\n  const getGraphTally = useAliasGetGraphTally();\n\n  useShallowCompareEffect(() => {\n    getGraphTally(metrics.map(({ id: metricId }) => ({ id: productId, metric: metricId })));\n  }, [metrics, productId, getGraphTally]);\n\n  const standaloneMetricId = (metric?.id && `_${metric?.id}`) || '';\n  let updatedActionDisplay = null;\n\n  if (typeof actionDisplay === 'function') {\n    updatedActionDisplay = actionDisplay({ data: { ...data } });\n  }\n\n  return (\n    <Card className=\"curiosity-usage-graph\">\n      <MinHeight key=\"headerMinHeight\">\n        <CardHeader>\n          <CardTitle>\n            <Title headingLevel=\"h2\" size=\"lg\">\n              {t(`curiosity-graph.cardHeading${standaloneMetricId}`, { context: productId })}\n              <GraphCardChartTitleTooltip />\n            </Title>\n          </CardTitle>\n          {updatedActionDisplay && (\n            <CardActions className={(error && 'blur') || ''}>{updatedActionDisplay}</CardActions>\n          )}\n        </CardHeader>\n      </MinHeight>\n      <MinHeight key=\"bodyMinHeight\">\n        <CardBody>\n          <div className={(error && 'blur') || (pending && 'fadein') || ''}>\n            {pending && <Loader variant=\"graph\" />}\n            {!pending && (\n              <Chart\n                {...graphCardHelpers.generateExtendedChartSettings({ settings, granularity })}\n                dataSets={dataSets}\n                chartLegend={({ chart, datum }) => <GraphCardChartLegend chart={chart} datum={datum} />}\n                chartTooltip={({ datum }) => <GraphCardChartTooltip datum={datum} />}\n              />\n            )}\n          </div>\n        </CardBody>\n      </MinHeight>\n    </Card>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, useProductGraphTallyQuery: Function,\n *     useMetricsSelector: Function, useGetGraphTally: Function}}\n */\nGraphCardChart.propTypes = {\n  t: PropTypes.func,\n  useGetGraphTally: PropTypes.func,\n  useGraphCardContext: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, useProductGraphTallyQuery: Function,\n *     useMetricsSelector: Function, useGetGraphTally: Function}}\n */\nGraphCardChart.defaultProps = {\n  t: translate,\n  useGetGraphTally,\n  useGraphCardContext,\n  useMetricsSelector,\n  useProduct,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChart as default, GraphCardChart };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { useMount } from 'react-use';\nimport { useProduct } from '../productView/productViewContext';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { ChartIcon } from '../chart/chartIcon';\n\n/**\n * A custom chart legend.\n *\n * @fires onClick\n * @param {object} props\n * @param {object} props.chart\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useDispatch\n * @param {Function} props.useProduct\n * @param {Function} props.useSelectors\n * @returns {Node}\n */\nconst GraphCardChartLegend = ({\n  chart,\n  datum,\n  t,\n  useDispatch: useAliasDispatch,\n  useSelectors: useAliasSelectors,\n  useProduct: useAliasProduct\n}) => {\n  const { productLabel, viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n  const legendItems = useAliasSelectors(\n    datum.dataSets.map(\n      ({ id }) =>\n        ({ graph }) =>\n          graph.legend?.[`${viewId}-${id}`]\n    )\n  );\n\n  useMount(() => {\n    datum.dataSets.forEach(({ id }, index) => {\n      const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n\n      if (checkIsToggled) {\n        chart.hide(id);\n      }\n    });\n  });\n\n  /**\n   * Toggle legend item and chart.\n   *\n   * @event onClick\n   * @param {string} id\n   */\n  const onClick = id => {\n    const updatedToggle = chart.toggle(id);\n\n    dispatch({\n      type: reduxTypes.graph.SET_GRAPH_LEGEND,\n      id: `${viewId}-${id}`,\n      value: updatedToggle\n    });\n  };\n\n  return (\n    <React.Fragment>\n      {datum.dataSets.map(({ id, isThreshold, stroke: color, data = [] }, index) => {\n        const isDisabled =\n          !data.find(({ y, hasData }) => (y >= 0 && hasData === true) || (y >= 0 && isThreshold === true)) || false;\n\n        const labelContent = t(\n          [`curiosity-graph.label_${(isThreshold && 'threshold') || id}`, 'curiosity-graph.label_no'],\n          {\n            product: productLabel,\n            context: productLabel\n          }\n        );\n\n        const tooltipContent = t(\n          `curiosity-graph.legendTooltip${(isThreshold && '_threshold') || ''}_${id}`,\n          {\n            product: productLabel,\n            context: productLabel\n          },\n          [<span style={{ whiteSpace: 'nowrap' }} />]\n        );\n\n        const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n\n        const button = (\n          <Button\n            onClick={() => onClick(id)}\n            onKeyPress={() => onClick(id)}\n            className=\"curiosity-usage-graph__legend-item\"\n            tabIndex={0}\n            key={`curiosity-button-${id}`}\n            variant=\"link\"\n            component=\"a\"\n            isDisabled={isDisabled}\n            icon={\n              ((isDisabled || checkIsToggled) && <ChartIcon symbol=\"eyeSlash\" />) || (\n                <ChartIcon\n                  symbol={(isThreshold && 'dash') || 'square'}\n                  style={{ visibility: (isDisabled && 'hidden') || (checkIsToggled && 'hidden') || 'visible' }}\n                  fill={color}\n                />\n              )\n            }\n          >\n            {labelContent}\n          </Button>\n        );\n\n        if (tooltipContent) {\n          return (\n            <Tooltip\n              key={`curiosity-tooltip-${id}`}\n              content={<p>{tooltipContent}</p>}\n              position={TooltipPosition.top}\n              enableFlip\n              distance={5}\n            >\n              {button}\n            </Tooltip>\n          );\n        }\n\n        return button;\n      })}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, t: Function, useDispatch: Function, useSelectors: Function, chart: object}}\n */\nGraphCardChartLegend.propTypes = {\n  chart: PropTypes.shape({\n    hide: PropTypes.func,\n    toggle: PropTypes.func,\n    isToggled: PropTypes.func\n  }),\n  datum: PropTypes.shape({\n    dataSets: PropTypes.arrayOf(\n      PropTypes.shape({\n        stroke: PropTypes.string.isRequired,\n        id: PropTypes.string.isRequired,\n        isThreshold: PropTypes.bool\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useDispatch: PropTypes.func,\n  useSelectors: PropTypes.func,\n  useProduct: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: object, useProduct: Function, t: Function, useDispatch: Function, useSelectors: Function, chart: object}}\n */\nGraphCardChartLegend.defaultProps = {\n  chart: {\n    hide: helpers.noop,\n    toggle: helpers.noop,\n    isToggled: helpers.noop\n  },\n  datum: {\n    dataSets: []\n  },\n  t: translate,\n  useDispatch: storeHooks.reactRedux.useDispatch,\n  useSelectors: storeHooks.reactRedux.useSelectors,\n  useProduct\n};\n\nexport { GraphCardChartLegend as default, GraphCardChartLegend };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { useProduct } from '../productView/productViewContext';\nimport { useGraphCardContext } from './graphCardContext';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Graph card title tooltip.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useProduct\n * @returns {Node}\n */\nconst GraphCardChartTitleTooltip = ({\n  t,\n  useGraphCardContext: useAliasGraphCardContext,\n  useProduct: useAliasProduct\n}) => {\n  const { productId } = useAliasProduct();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { isCardTitleDescription, metric } = settings;\n  const standaloneMetricId = (metric?.id && `_${metric?.id}`) || '';\n\n  if (!isCardTitleDescription) {\n    return null;\n  }\n\n  return (\n    <Tooltip\n      content={<p>{t(`curiosity-graph.cardHeadingDescription${standaloneMetricId}`, { context: productId })}</p>}\n      position={TooltipPosition.top}\n      enableFlip={false}\n      distance={5}\n      entryDelay={100}\n      exitDelay={0}\n    >\n      <span className=\"curiosity-icon__question\">\n        <OutlinedQuestionCircleIcon />\n      </span>\n    </Tooltip>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, t: Function}}\n */\nGraphCardChartTitleTooltip.propTypes = {\n  t: PropTypes.func,\n  useProduct: PropTypes.func,\n  useGraphCardContext: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, t: Function}}\n */\nGraphCardChartTitleTooltip.defaultProps = {\n  t: translate,\n  useProduct,\n  useGraphCardContext\n};\n\nexport { GraphCardChartTitleTooltip as default, GraphCardChartTitleTooltip };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { getTooltipDate } from './graphCardHelpers';\nimport { translate } from '../i18n/i18n';\nimport { ChartTypeVariant } from '../chart/chart';\nimport { ChartIcon } from '../chart/chartIcon';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * A custom chart tooltip.\n *\n * @param {object} props\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useProduct\n * @returns {Node}\n */\nconst GraphCardChartTooltip = ({\n  datum,\n  t,\n  useProduct: useAliasProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productId, productLabel } = useAliasProduct();\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n\n  let header = null;\n  const data = [];\n  const { itemsByKey = {} } = datum || {};\n\n  Object.keys(itemsByKey)\n    .reverse()\n    .forEach((key, index) => {\n      if (index === 0) {\n        header = getTooltipDate({\n          date: itemsByKey[key]?.data.date,\n          granularity\n        });\n      }\n\n      const tempDataFacet = {\n        color: itemsByKey[key]?.color\n      };\n\n      if (itemsByKey[key]?.chartType === ChartTypeVariant.threshold) {\n        let thresholdStringValue = itemsByKey[key]?.data.y ?? t('curiosity-graph.label_noData');\n\n        if (itemsByKey[key]?.data.hasInfinite) {\n          if (tempDataFacet.color) {\n            thresholdStringValue = (\n              <ChartIcon\n                symbol=\"infinity\"\n                fill=\"#ffffff\"\n                title={t('curiosity-graph.label_threshold', { context: 'infinite' })}\n              />\n            );\n          } else {\n            thresholdStringValue = t('curiosity-graph.label_threshold', { context: 'infinite' });\n          }\n        }\n\n        tempDataFacet.label = t('curiosity-graph.label_threshold');\n        tempDataFacet.value = thresholdStringValue;\n      } else {\n        const dataFactsValue =\n          (itemsByKey[key]?.data.hasData === false && t('curiosity-graph.label_noData')) ||\n          itemsByKey[key]?.data.y ||\n          0;\n\n        tempDataFacet.label = t(`curiosity-graph.label_${key}`, { context: productId, product: productLabel });\n        tempDataFacet.value = dataFactsValue;\n      }\n\n      tempDataFacet.chartType = itemsByKey[key]?.chartType;\n      data.push(tempDataFacet);\n    });\n\n  return (\n    <div className=\"curiosity-usage-graph__tooltip\">\n      <table summary={t('curiosity-graph.tooltipSummary')}>\n        {(data.length && header && (\n          <thead>\n            <tr>\n              <th colSpan={2}>{header}</th>\n            </tr>\n          </thead>\n        )) ||\n          null}\n        {(data.length && (\n          <tbody>\n            {data.map(dataFacet => {\n              const updatedDataFacetValue =\n                (typeof dataFacet.value === 'number' &&\n                  !Number.isInteger(dataFacet.value) &&\n                  helpers\n                    .numberDisplay(dataFacet.value)\n                    ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: true })\n                    ?.toUpperCase()) ||\n                dataFacet.value;\n\n              return (\n                <tr key={`tooltip-${dataFacet.label}`}>\n                  <th>\n                    {dataFacet.chartType === ChartTypeVariant.threshold && (\n                      <ChartIcon size=\"sm\" symbol=\"dash\" fill={dataFacet.color || 'transparent'} />\n                    )}\n                    {dataFacet.chartType !== ChartTypeVariant.threshold && (\n                      <ChartIcon size=\"sm\" fill={dataFacet.color || 'transparent'} />\n                    )}{' '}\n                    {dataFacet.label}\n                  </th>\n                  <td>{updatedDataFacetValue}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        )) ||\n          null}\n      </table>\n      {(!data.length && t('curiosity-graph.label_noData', { context: 'error' })) || null}\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.propTypes = {\n  datum: PropTypes.shape({\n    itemsByKey: PropTypes.objectOf(\n      PropTypes.shape({\n        chartType: PropTypes.string,\n        color: PropTypes.string,\n        data: PropTypes.shape({\n          date: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),\n          hasData: PropTypes.bool,\n          hasInfinite: PropTypes.bool,\n          y: PropTypes.number\n        })\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.defaultProps = {\n  datum: {},\n  t: translate,\n  useProduct,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChartTooltip as default, GraphCardChartTooltip };\n","import React, { useContext } from 'react';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Chart context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{ settings: { isStandalone: false, metrics: [], metric: undefined } }, helpers.noop];\n\nconst GraphCardContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated graph card context.\n *\n * @returns {React.Context<{}>}\n */\nconst useGraphCardContext = () => useContext(GraphCardContext);\n\n/**\n * Use Redux RHSM Actions, getGraphTally.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProductGraphTallyQuery\n * @returns {Function}\n */\nconst useGetGraphTally = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery\n} = {}) => {\n  const query = useAliasProductGraphTallyQuery();\n  const dispatch = useAliasDispatch();\n\n  return metrics => reduxActions.rhsm.getGraphTally(metrics, query)(dispatch);\n};\n\n/**\n * Get multiple metrics from store.\n *\n * @param {object} options\n * @param {Function} options.useGraphCardContext\n * @param {Function} options.useSelectors\n * @param {Function} options.useProduct\n * @returns {{data: object, pending: boolean, fulfilled: boolean, dataSets: Array, error: boolean}}\n */\nconst useMetricsSelector = ({\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useSelectors: useAliasSelectors = storeHooks.reactRedux.useSelectors,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n  const data = {};\n\n  const metricResponses = useAliasSelectors(\n    metrics.map(\n      ({ id: metricId }) =>\n        ({ graph }) =>\n          graph.tally?.[`${productId}_${metricId}`]\n    ),\n    []\n  );\n\n  let isPending = false;\n  let isFulfilled = false;\n  let errorCount = 0;\n\n  const dataSets = metricResponses.map((metric, index) => {\n    const { pending, fulfilled, error, cancelled } = metric || {};\n    const updatedPending = pending || cancelled || false;\n\n    if (updatedPending) {\n      isPending = true;\n    }\n\n    if (fulfilled) {\n      isFulfilled = true;\n    }\n\n    if (error) {\n      errorCount += 1;\n    }\n\n    const updatedMetric = {\n      ...metrics[index],\n      data: metric?.data?.data || [],\n      meta: metric?.data?.meta || {}\n    };\n    data[metrics[index].id] = updatedMetric;\n\n    return updatedMetric;\n  });\n\n  const response = {\n    data,\n    dataSets,\n    error: false,\n    fulfilled: false,\n    pending: false\n  };\n\n  if (errorCount === dataSets.length) {\n    response.error = true;\n  } else if (isPending) {\n    response.pending = true;\n  } else if (isFulfilled) {\n    response.fulfilled = true;\n  }\n\n  return response;\n};\n\nconst context = {\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetGraphTally,\n  useGraphCardContext,\n  useMetricsSelector\n};\n\nexport {\n  context as default,\n  context,\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetGraphTally,\n  useGraphCardContext,\n  useMetricsSelector\n};\n","import moment from 'moment';\nimport { chart_color_green_300 as chartColorGreenDark } from '@patternfly/react-tokens';\nimport { ChartTypeVariant } from '../chart/chart';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers, helpers } from '../../common';\n\n/**\n * Update chart/graph filters with core settings and styling.\n *\n * @param {Array} filters\n * @param {object} graphCardSettings\n * @returns {{standaloneFilters: Array, groupedFilters: object}}\n */\nconst generateChartSettings = (filters = [], graphCardSettings = {}) => {\n  const standaloneFiltersSettings = [];\n  const groupedFiltersSettings = [];\n\n  filters.forEach(({ id, isStandalone = false, ...filterSettings }) => {\n    if (!id) {\n      return;\n    }\n\n    const isThreshold = filterSettings?.chartType === ChartTypeVariant.threshold;\n    const baseFilterSettings = {\n      id,\n      isStacked: !isThreshold,\n      isStandalone,\n      isThreshold,\n      isCapacity: isThreshold,\n      strokeWidth: 2\n    };\n\n    if (isThreshold) {\n      baseFilterSettings.stroke = chartColorGreenDark.value;\n      baseFilterSettings.strokeDasharray = '4,3';\n      baseFilterSettings.strokeWidth = 3;\n    }\n\n    if (isStandalone) {\n      standaloneFiltersSettings.push({\n        settings: {\n          padding: {\n            bottom: 75,\n            left: 75,\n            right: 45,\n            top: 45\n          },\n          ...graphCardSettings,\n          isStandalone: true,\n          metric: {\n            ...baseFilterSettings,\n            ...filterSettings\n          },\n          metrics: [\n            {\n              ...baseFilterSettings,\n              ...filterSettings\n            }\n          ]\n        }\n      });\n    } else {\n      groupedFiltersSettings.push({\n        ...baseFilterSettings,\n        ...filterSettings\n      });\n    }\n  });\n\n  const updatedGroupedFiltersSettings =\n    (groupedFiltersSettings.length && {\n      settings: {\n        ...graphCardSettings,\n        isStandalone: false,\n        metric: undefined,\n        metrics: groupedFiltersSettings\n      }\n    }) ||\n    undefined;\n\n  return {\n    standaloneFiltersSettings,\n    groupedFiltersSettings: updatedGroupedFiltersSettings\n  };\n};\n\n/**\n * Returns x axis ticks/intervals array for the xAxisTickInterval\n *\n * @param {string} granularity See enum of RHSM_API_QUERY_GRANULARITY_TYPES\n * @returns {number}\n */\nconst getChartXAxisLabelIncrement = granularity => {\n  switch (granularity) {\n    case GRANULARITY_TYPES.DAILY:\n      return 5;\n    case GRANULARITY_TYPES.WEEKLY:\n    case GRANULARITY_TYPES.MONTHLY:\n      return 2;\n    case GRANULARITY_TYPES.QUARTERLY:\n    default:\n      return 1;\n  }\n};\n\n/**\n * Return a formatted date string.\n *\n * @param {object} params\n * @param {Date} params.date\n * @param {string} params.granularity See enum of RHSM_API_QUERY_GRANULARITY_TYPES\n * @returns {string}\n */\nconst getTooltipDate = ({ date, granularity } = {}) => {\n  const momentDate = moment.utc(date);\n\n  switch (granularity) {\n    case GRANULARITY_TYPES.QUARTERLY:\n      return `${momentDate.format(dateHelpers.timestampQuarterFormats.yearShort)} - ${momentDate\n        .add(1, 'quarter')\n        .format(dateHelpers.timestampQuarterFormats.yearShort)}`;\n\n    case GRANULARITY_TYPES.MONTHLY:\n      return momentDate.format(dateHelpers.timestampMonthFormats.yearLong);\n\n    case GRANULARITY_TYPES.WEEKLY:\n      return `${momentDate.format(dateHelpers.timestampDayFormats.short)} - ${momentDate\n        .add(1, 'week')\n        .format(dateHelpers.timestampDayFormats.yearShort)}`;\n\n    case GRANULARITY_TYPES.DAILY:\n    default:\n      return momentDate.format(dateHelpers.timestampDayFormats.long);\n  }\n};\n\n/**\n * Format x axis ticks.\n *\n * @param {object} params\n * @param {Function} params.callback\n * @param {Date} params.date\n * @param {string} params.granularity See enum of RHSM_API_QUERY_GRANULARITY_TYPES\n * @param {number|string} params.tick\n * @param {Date} params.previousDate\n * @returns {string|undefined}\n */\nconst xAxisTickFormat = ({ callback, date, granularity, tick, previousDate } = {}) => {\n  if (!date || !granularity) {\n    return undefined;\n  }\n\n  if (callback) {\n    return callback({ callback, date, granularity, tick, previousDate });\n  }\n\n  const momentDate = moment.utc(date);\n  const isNewYear =\n    tick !== 0 && Number.parseInt(momentDate.year(), 10) !== Number.parseInt(moment.utc(previousDate).year(), 10);\n  let formattedDate;\n\n  switch (granularity) {\n    case GRANULARITY_TYPES.QUARTERLY:\n      formattedDate = isNewYear\n        ? momentDate.format(dateHelpers.timestampQuarterFormats.yearShort)\n        : momentDate.format(dateHelpers.timestampQuarterFormats.short);\n\n      formattedDate = formattedDate.replace(/\\s/, '\\n');\n      break;\n    case GRANULARITY_TYPES.MONTHLY:\n      formattedDate = isNewYear\n        ? momentDate.format(dateHelpers.timestampMonthFormats.yearShort)\n        : momentDate.format(dateHelpers.timestampMonthFormats.short);\n\n      formattedDate = formattedDate.replace(/\\s/, '\\n');\n      break;\n    case GRANULARITY_TYPES.WEEKLY:\n    case GRANULARITY_TYPES.DAILY:\n    default:\n      formattedDate = isNewYear\n        ? momentDate.format(dateHelpers.timestampDayFormats.yearShort)\n        : momentDate.format(dateHelpers.timestampDayFormats.short);\n\n      formattedDate = formattedDate.replace(/\\s(\\d{4})$/, '\\n$1');\n      break;\n  }\n\n  return formattedDate;\n};\n\n/**\n * Format y axis ticks.\n *\n * @param {object} params\n * @param {Function} params.callback\n * @param {number|string} params.tick\n * @returns {string}\n */\nconst yAxisTickFormat = ({ callback, tick } = {}) => {\n  if (callback) {\n    return callback({ tick });\n  }\n\n  return helpers\n    .numberDisplay(tick)\n    ?.format({\n      average: true,\n      mantissa: 1,\n      trimMantissa: true,\n      lowPrecision: false\n    })\n    ?.toUpperCase();\n};\n\n/**\n * Generate base chart component props.\n *\n * @param {object} params\n * @param {object} params.settings\n * @param {string} params.granularity\n * @returns {object}\n */\nconst generateExtendedChartSettings = ({ settings, granularity } = {}) => ({\n  ...settings,\n  xAxisLabelIncrement: getChartXAxisLabelIncrement(granularity),\n  xAxisTickFormat: ({ item, previousItem, tick }) =>\n    xAxisTickFormat({\n      callback: settings?.xAxisTickFormat,\n      tick,\n      date: item.date,\n      previousDate: previousItem.date,\n      granularity\n    }),\n  yAxisTickFormat: ({ tick }) =>\n    yAxisTickFormat({\n      callback: settings?.yAxisTickFormat,\n      tick\n    })\n});\n\nconst graphCardHelpers = {\n  generateChartSettings,\n  generateExtendedChartSettings,\n  getChartXAxisLabelIncrement,\n  getTooltipDate,\n  xAxisTickFormat,\n  yAxisTickFormat\n};\n\nexport {\n  graphCardHelpers as default,\n  graphCardHelpers,\n  generateChartSettings,\n  generateExtendedChartSettings,\n  getChartXAxisLabelIncrement,\n  getTooltipDate,\n  xAxisTickFormat,\n  yAxisTickFormat\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { helpers } from '../../common';\n\n/**\n * Set a min-height to prevent page jump component.\n *\n * @augments React.Component\n * @fires onResizeContainer\n */\nclass MinHeight extends React.Component {\n  containerRef = React.createRef();\n\n  innerContainerRef = React.createRef();\n\n  updatedContainerWidth = 0;\n\n  resizeObserver = helpers.noop;\n\n  componentDidMount() {\n    const { updateOnResize } = this.props;\n    window.setTimeout(() => {\n      this.setMinHeight();\n    });\n\n    if (updateOnResize) {\n      this.setResizeObserver();\n    }\n  }\n\n  componentDidUpdate() {\n    const { updateOnContent } = this.props;\n\n    if (updateOnContent) {\n      window.setTimeout(() => {\n        this.setMinHeight();\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.resizeObserver();\n  }\n\n  /**\n   * On resize adjust graph display.\n   *\n   * @event onResizeContainer\n   */\n  onResizeContainer = () => {\n    const { updatedContainerWidth } = this;\n    const { updateOnResize } = this.props;\n    const clientWidth = this.containerRef?.current?.clientWidth || 0;\n\n    if (updateOnResize && clientWidth !== updatedContainerWidth) {\n      this.updatedContainerWidth = clientWidth;\n      this.setMinHeight(true);\n    }\n  };\n\n  /**\n   * Set minHeight on mount or update.\n   *\n   * @param {boolean} reset\n   */\n  setMinHeight(reset = false) {\n    const { minHeight: overrideMinHeight } = this.props;\n    const { current: domElement = {} } = this.containerRef;\n    const { current: innerDomElement = {} } = this.innerContainerRef;\n\n    if (domElement?.style) {\n      let clientHeight;\n\n      if (reset) {\n        clientHeight = innerDomElement?.clientHeight || 0;\n      } else {\n        clientHeight = domElement?.clientHeight || 0;\n      }\n\n      if (overrideMinHeight > clientHeight) {\n        clientHeight = overrideMinHeight;\n      }\n\n      domElement.style.minHeight = `${clientHeight}px`;\n    }\n  }\n\n  /**\n   * Set ResizeObserver for scenarios when min-height needs to be updated.\n   */\n  setResizeObserver() {\n    window.addEventListener('resize', this.onResizeContainer);\n    this.resizeObserver = () => window.removeEventListener('resize', this.onResizeContainer);\n  }\n\n  /**\n   * Render a min-height div with children.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { children } = this.props;\n\n    return (\n      <div className=\"curiosity-minheight\" ref={this.containerRef}>\n        <div ref={this.innerContainerRef}>{children}</div>\n      </div>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{minHeight: number, children: Node, updateOnContent: boolean, updateOnResize: boolean}}\n */\nMinHeight.propTypes = {\n  updateOnContent: PropTypes.bool,\n  updateOnResize: PropTypes.bool,\n  children: PropTypes.node.isRequired,\n  minHeight: PropTypes.number\n};\n\n/**\n * Default props.\n *\n * @type {{minHeight: number, updateOnContent: boolean, updateOnResize: boolean}}\n */\nMinHeight.defaultProps = {\n  updateOnContent: false,\n  updateOnResize: true,\n  minHeight: 0\n};\n\nexport { MinHeight as default, MinHeight };\n","import React, { useCallback, useContext } from 'react';\nimport { reduxHelpers } from '../../redux/common';\nimport { storeHooks } from '../../redux/hooks';\nimport { RHSM_API_QUERY_TYPES, rhsmApiTypes } from '../../types/rhsmApiTypes';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Route context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{}, helpers.noop];\n\nconst ProductViewContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated product view context.\n *\n * @returns {React.Context<{}>}\n */\nconst useProductViewContext = () => useContext(ProductViewContext);\n\n/**\n * Return a query object from initial product config and Redux store.\n *\n * @param {string} queryType An identifier used to pull from both config and Redux, they should named the same.\n * @param {object} options\n * @param {string} options.overrideId A custom identifier, used for scenarios like the Guest inventory IDs\n * @param {object} options.useProductViewContext\n * @returns {object}\n */\nconst useProductQueryFactory = (\n  queryType,\n  { overrideId, useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}\n) => {\n  const { [queryType]: initialQuery, productId, viewId } = useAliasProductViewContext();\n  const queryOverride = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[overrideId], undefined);\n  const queryProduct = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[productId], undefined);\n  const queryView = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[viewId], undefined);\n\n  return {\n    ...initialQuery,\n    ...queryOverride,\n    ...queryProduct,\n    ...queryView\n  };\n};\n\n/**\n * Return a base product query\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductQuery = ({ queryType = 'query', options } = {}) => useProductQueryFactory(queryType, options);\n\n/**\n * Return the graph query based off of tally and capacity.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductGraphTallyQuery = ({\n  queryType = 'graphTallyQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_REPORT_CAPACITY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return the inventory query for guests. Use fallback/defaults for guests offset, limit.\n *\n * @param {object} options\n * @param {number} options.defaultLimit\n * @param {number} options.defaultOffset\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryGuestsQuery = ({\n  defaultLimit = 100,\n  defaultOffset = 0,\n  queryType = 'inventoryGuestsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_GUESTS_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      [RHSM_API_QUERY_SET_TYPES.LIMIT]: defaultLimit,\n      [RHSM_API_QUERY_SET_TYPES.OFFSET]: defaultOffset,\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for hosts.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryHostsQuery = ({\n  queryType = 'inventoryHostsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for subscriptions.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventorySubscriptionsQuery = ({\n  queryType = 'inventorySubscriptionsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Get a filtered product configuration context.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductViewContext\n * @returns {object}\n */\nconst useProductContext = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductViewContext: useAliasProductViewContext = useProductViewContext\n} = {}) => {\n  const { [RHSM_API_QUERY_TYPES.UOM]: uomFilter } = useAliasProductQuery();\n  const {\n    initialGraphFilters = [],\n    initialInventoryFilters = [],\n    initialSubscriptionsInventoryFilters = [],\n    productContextFilterUom,\n    ...config\n  } = useAliasProductViewContext();\n\n  const applyUomFilter = useCallback(() => {\n    if (productContextFilterUom === true) {\n      const filterFilters = ({ id, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(uomFilter, 'i').test(id);\n      };\n\n      return {\n        ...config,\n        initialGraphFilters: initialGraphFilters.filter(filterFilters),\n        initialInventoryFilters: initialInventoryFilters.filter(filterFilters),\n        initialSubscriptionsInventoryFilters: initialSubscriptionsInventoryFilters.filter(filterFilters)\n      };\n    }\n\n    return {\n      ...config,\n      initialGraphFilters,\n      initialInventoryFilters,\n      initialSubscriptionsInventoryFilters\n    };\n  }, [\n    config,\n    initialGraphFilters,\n    initialInventoryFilters,\n    initialSubscriptionsInventoryFilters,\n    productContextFilterUom,\n    uomFilter\n  ]);\n\n  return applyUomFilter();\n};\n\n/**\n * Return product identifiers.\n *\n * @param {object} options\n * @param {Function} options.useProductViewContext\n * @returns {{productLabel: string, viewId: string, productId: string, productGroup: string}}\n */\nconst useProduct = ({ useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}) => {\n  const { productGroup, productId, productLabel, viewId } = useAliasProductViewContext();\n  return {\n    productGroup,\n    productId,\n    productLabel,\n    viewId\n  };\n};\n\n/**\n * Return graph configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductGraphConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialGraphFilters, initialGraphSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGraphFilters,\n    settings: initialGraphSettings\n  };\n};\n\n/**\n * Return guests inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryGuestsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { inventoryGuestsQuery = {}, initialGuestsFilters, initialGuestsSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGuestsFilters,\n    initialQuery: inventoryGuestsQuery,\n    settings: initialGuestsSettings\n  };\n};\n\n/**\n * Return hosts inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryHostsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialInventoryFilters, initialInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialInventoryFilters,\n    settings: initialInventorySettings\n  };\n};\n\n/**\n * Return subscriptions inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventorySubscriptionsConfig = ({\n  useProductContext: useAliasProductContext = useProductContext\n} = {}) => {\n  const { initialSubscriptionsInventoryFilters, initialSubscriptionsInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialSubscriptionsInventoryFilters,\n    settings: initialSubscriptionsInventorySettings\n  };\n};\n\n/**\n * Return primary toolbar configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductToolbarConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const {\n    initialToolbarFilters,\n    initialToolbarSettings = {},\n    initialSecondaryToolbarFilters\n  } = useAliasProductContext();\n  return {\n    filters: initialToolbarFilters,\n    secondaryFilters: initialSecondaryToolbarFilters,\n    settings: initialToolbarSettings\n  };\n};\n\nconst context = {\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useQuery: useProductQuery,\n  useQueryFactory: useProductQueryFactory,\n  useGraphTallyQuery: useProductGraphTallyQuery,\n  useInventoryGuestsQuery: useProductInventoryGuestsQuery,\n  useInventoryHostsQuery: useProductInventoryHostsQuery,\n  useInventorySubscriptionsQuery: useProductInventorySubscriptionsQuery,\n  useProduct,\n  useGraphConfig: useProductGraphConfig,\n  useInventoryGuestsConfig: useProductInventoryGuestsConfig,\n  useInventoryHostsConfig: useProductInventoryHostsConfig,\n  useInventorySubscriptionsConfig: useProductInventorySubscriptionsConfig,\n  useToolbarConfig: useProductToolbarConfig\n};\n\nexport {\n  context as default,\n  context,\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useProductQuery,\n  useProductQueryFactory,\n  useProductGraphTallyQuery,\n  useProductInventoryGuestsQuery,\n  useProductInventoryHostsQuery,\n  useProductInventorySubscriptionsQuery,\n  useProduct,\n  useProductGraphConfig,\n  useProductInventoryGuestsConfig,\n  useProductInventoryHostsConfig,\n  useProductInventorySubscriptionsConfig,\n  useProductToolbarConfig\n};\n","var keyList = Object.keys;\n\nexports.equal = function equal (a, b) {\n  if (a === b) return true;\n  if (!(a instanceof Object) || !(b instanceof Object)) return false;\n\n  var keys = keyList(a);\n  var length = keys.length;\n\n  for (var i = 0; i < length; i++)\n    if (!(keys[i] in b)) return false;\n\n  for (var i = 0; i < length; i++)\n    if (a[keys[i]] !== b[keys[i]]) return false;\n\n  return length === keyList(b).length;\n};\n","import { equal as isShallowEqual } from 'fast-shallow-equal';\nimport useCustomCompareEffect from './useCustomCompareEffect';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar shallowEqualDepsList = function (prevDeps, nextDeps) {\n    return prevDeps.every(function (dep, index) { return isShallowEqual(dep, nextDeps[index]); });\n};\nvar useShallowCompareEffect = function (effect, deps) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useShallowCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useShallowCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n    }\n    useCustomCompareEffect(effect, deps, shallowEqualDepsList);\n};\nexport default useShallowCompareEffect;\n","import { useEffect, useRef } from 'react';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar useCustomCompareEffect = function (effect, deps, depsEqual) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useCustomCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useCustomCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n        if (typeof depsEqual !== 'function') {\n            console.warn('`useCustomCompareEffect` should be used with depsEqual callback for comparing deps list');\n        }\n    }\n    var ref = useRef(undefined);\n    if (!ref.current || !depsEqual(deps, ref.current)) {\n        ref.current = deps;\n    }\n    useEffect(effect, ref.current);\n};\nexport default useCustomCompareEffect;\n"],"names":["GraphCardChart","t","useAliasGetGraphTally","useGetGraphTally","useAliasGraphCardContext","useGraphCardContext","useAliasMetricsSelector","useMetricsSelector","useAliasProduct","useProduct","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","productId","settings","actionDisplay","metric","metrics","granularity","RHSM_API_QUERY_SET_TYPES","pending","error","data","dataSets","getGraphTally","useShallowCompareEffect","map","metricId","id","standaloneMetricId","updatedActionDisplay","Card","className","MinHeight","key","CardHeader","CardTitle","Title","headingLevel","size","context","GraphCardChartTitleTooltip","CardActions","CardBody","Loader","variant","Chart","graphCardHelpers","chartLegend","chart","datum","GraphCardChartLegend","chartTooltip","GraphCardChartTooltip","defaultProps","translate","useAliasDispatch","useDispatch","useAliasSelectors","useSelectors","productLabel","viewId","dispatch","legendItems","graph","legend","useMount","forEach","index","isToggled","hide","onClick","updatedToggle","toggle","type","reduxTypes","value","isThreshold","color","stroke","isDisabled","find","y","hasData","labelContent","product","tooltipContent","style","whiteSpace","checkIsToggled","button","Button","onKeyPress","tabIndex","component","icon","ChartIcon","symbol","visibility","fill","Tooltip","content","position","TooltipPosition","enableFlip","distance","helpers","storeHooks","isCardTitleDescription","entryDelay","exitDelay","OutlinedQuestionCircleIcon","header","itemsByKey","Object","keys","reverse","getTooltipDate","date","tempDataFacet","chartType","ChartTypeVariant","thresholdStringValue","hasInfinite","title","label","dataFactsValue","push","summary","length","colSpan","dataFacet","updatedDataFacetValue","Number","isInteger","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","DEFAULT_CONTEXT","isStandalone","undefined","GraphCardContext","React","useContext","query","reduxActions","metricResponses","tally","isPending","isFulfilled","errorCount","fulfilled","cancelled","updatedMetric","meta","response","generateChartSettings","filters","graphCardSettings","standaloneFiltersSettings","groupedFiltersSettings","filterSettings","baseFilterSettings","isStacked","isCapacity","strokeWidth","chartColorGreenDark","strokeDasharray","padding","bottom","left","right","top","updatedGroupedFiltersSettings","getChartXAxisLabelIncrement","GRANULARITY_TYPES","momentDate","moment","dateHelpers","add","xAxisTickFormat","callback","tick","previousDate","formattedDate","isNewYear","parseInt","year","replace","yAxisTickFormat","generateExtendedChartSettings","xAxisLabelIncrement","item","previousItem","containerRef","innerContainerRef","updatedContainerWidth","resizeObserver","onResizeContainer","updateOnResize","props","clientWidth","current","setMinHeight","this","window","setTimeout","setResizeObserver","updateOnContent","clientHeight","reset","overrideMinHeight","minHeight","domElement","innerDomElement","addEventListener","removeEventListener","children","ref","ProductViewContext","useProductViewContext","useProductQueryFactory","queryType","overrideId","useAliasProductViewContext","initialQuery","queryOverride","view","queryProduct","queryView","useProductQuery","options","schemaCheck","rhsmApiTypes","reduxHelpers","useProductInventoryGuestsQuery","defaultLimit","defaultOffset","useProductInventoryHostsQuery","useProductInventorySubscriptionsQuery","useProductContext","useAliasProductQuery","uomFilter","RHSM_API_QUERY_TYPES","initialGraphFilters","initialInventoryFilters","initialSubscriptionsInventoryFilters","productContextFilterUom","config","applyUomFilter","useCallback","filterFilters","isOptional","RegExp","test","filter","productGroup","useProductGraphConfig","useAliasProductContext","initialGraphSettings","useProductInventoryGuestsConfig","inventoryGuestsQuery","initialGuestsFilters","initialGuestsSettings","useProductInventoryHostsConfig","initialInventorySettings","useProductInventorySubscriptionsConfig","initialSubscriptionsInventorySettings","useProductToolbarConfig","initialToolbarFilters","initialToolbarSettings","initialSecondaryToolbarFilters","secondaryFilters","useQuery","useQueryFactory","useGraphTallyQuery","useInventoryGuestsQuery","useInventoryHostsQuery","useInventorySubscriptionsQuery","useGraphConfig","useInventoryGuestsConfig","useInventoryHostsConfig","useInventorySubscriptionsConfig","useToolbarConfig","keyList","exports","a","b","i","shallowEqualDepsList","prevDeps","nextDeps","every","dep","effect","deps","depsEqual","useRef","useEffect"],"sourceRoot":""}