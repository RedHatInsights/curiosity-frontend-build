{"version":3,"file":"js/1799.1668099195593.020a6eaa59af094aff9b.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardChart.js","webpack:///./src/components/graphCard/graphCardChartLegend.js","webpack:///./src/components/graphCard/graphCardChartTitleTooltip.js","webpack:///./src/components/graphCard/graphCardChartTooltip.js","webpack:///./src/components/graphCard/graphCardContext.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardActions, CardBody, CardHeader, CardTitle, Title } from '@patternfly/react-core';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useGraphCardContext, useGetMetrics } from './graphCardContext';\nimport { graphCardHelpers } from './graphCardHelpers';\nimport { Chart } from '../chart/chart';\nimport { GraphCardChartLegend } from './graphCardChartLegend';\nimport { GraphCardChartTooltip } from './graphCardChartTooltip';\nimport { GraphCardChartTitleTooltip } from './graphCardChartTitleTooltip';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { Loader } from '../loader/loader';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A chart/graph card.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useGetMetrics\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useProduct\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardChart = ({\n  t,\n  useGetMetrics: useAliasGetMetrics,\n  useGraphCardContext: useAliasGraphCardContext,\n  useProduct: useAliasProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productId } = useAliasProduct();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { actionDisplay, isStandalone, metric } = settings;\n\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n  const { pending, error, data = {}, dataSets = [] } = useAliasGetMetrics();\n\n  let updatedActionDisplay = null;\n\n  if (typeof actionDisplay === 'function') {\n    updatedActionDisplay = actionDisplay({ data: { ...data } });\n  }\n\n  return (\n    <Card className=\"curiosity-usage-graph\">\n      <MinHeight key=\"headerMinHeight\">\n        <CardHeader>\n          <CardTitle>\n            <Title headingLevel=\"h2\" size=\"lg\">\n              {t('curiosity-graph.cardHeading', { context: (isStandalone && metric?.id) || productId })}\n              <GraphCardChartTitleTooltip />\n            </Title>\n          </CardTitle>\n          {updatedActionDisplay && (\n            <CardActions className={(error && 'blur') || ''}>{updatedActionDisplay}</CardActions>\n          )}\n        </CardHeader>\n      </MinHeight>\n      <MinHeight key=\"bodyMinHeight\">\n        <CardBody>\n          <div className={(error && 'blur') || (pending && 'fadein') || ''}>\n            {pending && <Loader variant=\"graph\" />}\n            {!pending && (\n              <Chart\n                {...graphCardHelpers.generateExtendedChartSettings({ settings, granularity })}\n                dataSets={dataSets}\n                chartLegend={({ chart, datum }) => <GraphCardChartLegend chart={chart} datum={datum} />}\n                chartTooltip={({ datum }) => <GraphCardChartTooltip datum={datum} />}\n              />\n            )}\n          </div>\n        </CardBody>\n      </MinHeight>\n    </Card>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, useProductGraphTallyQuery: Function,\n *     t: Function, useGetMetrics: Function}}\n */\nGraphCardChart.propTypes = {\n  t: PropTypes.func,\n  useGetMetrics: PropTypes.func,\n  useGraphCardContext: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, useProductGraphTallyQuery: Function,\n *     t: translate, useGetMetrics: Function}}\n */\nGraphCardChart.defaultProps = {\n  t: translate,\n  useGetMetrics,\n  useGraphCardContext,\n  useProduct,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChart as default, GraphCardChart };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { useMount } from 'react-use';\nimport { useProduct } from '../productView/productViewContext';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { ChartIcon } from '../chart/chartIcon';\n\n/**\n * A custom chart legend.\n *\n * @fires onClick\n * @param {object} props\n * @param {object} props.chart\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useDispatch\n * @param {Function} props.useProduct\n * @param {Function} props.useSelectors\n * @returns {Node}\n */\nconst GraphCardChartLegend = ({\n  chart,\n  datum,\n  t,\n  useDispatch: useAliasDispatch,\n  useSelectors: useAliasSelectors,\n  useProduct: useAliasProduct\n}) => {\n  const { productLabel, viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n  const legendItems = useAliasSelectors(\n    datum.dataSets.map(\n      ({ id }) =>\n        ({ graph }) =>\n          graph.legend?.[`${viewId}-${id}`]\n    )\n  );\n\n  useMount(() => {\n    datum.dataSets.forEach(({ id }, index) => {\n      const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n\n      if (checkIsToggled) {\n        chart.hide(id);\n      }\n    });\n  });\n\n  /**\n   * Toggle legend item and chart.\n   *\n   * @event onClick\n   * @param {string} id\n   */\n  const onClick = id => {\n    const updatedToggle = chart.toggle(id);\n\n    dispatch({\n      type: reduxTypes.graph.SET_GRAPH_LEGEND,\n      id: `${viewId}-${id}`,\n      value: updatedToggle\n    });\n  };\n\n  return (\n    <React.Fragment>\n      {datum.dataSets.map(({ id, isThreshold, stroke: color, data = [] }, index) => {\n        const isDisabled =\n          !data.find(({ y, hasData }) => (y >= 0 && hasData === true) || (y >= 0 && isThreshold === true)) || false;\n\n        const labelContent = t([`curiosity-graph.label`, 'curiosity-graph.label_no'], {\n          product: productLabel,\n          context: (isThreshold && 'threshold') || id\n        });\n\n        const tooltipContent = t(\n          `curiosity-graph.legendTooltip`,\n          {\n            product: productLabel,\n            context: [isThreshold && 'threshold', id]\n          },\n          [<span style={{ whiteSpace: 'nowrap' }} />]\n        );\n\n        const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n\n        const button = (\n          <Button\n            onClick={() => onClick(id)}\n            onKeyPress={() => onClick(id)}\n            className=\"curiosity-usage-graph__legend-item\"\n            tabIndex={0}\n            key={`curiosity-button-${id}`}\n            variant=\"link\"\n            component=\"a\"\n            isDisabled={isDisabled}\n            icon={\n              ((isDisabled || checkIsToggled) && <ChartIcon symbol=\"eyeSlash\" />) || (\n                <ChartIcon\n                  symbol={(isThreshold && 'dash') || 'square'}\n                  style={{ visibility: (isDisabled && 'hidden') || (checkIsToggled && 'hidden') || 'visible' }}\n                  fill={color}\n                />\n              )\n            }\n          >\n            {labelContent}\n          </Button>\n        );\n\n        if (tooltipContent) {\n          return (\n            <Tooltip\n              key={`curiosity-tooltip-${id}`}\n              content={<p>{tooltipContent}</p>}\n              position={TooltipPosition.top}\n              enableFlip\n              distance={5}\n            >\n              {button}\n            </Tooltip>\n          );\n        }\n\n        return button;\n      })}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, t: Function, useDispatch: Function, useSelectors: Function, chart: object}}\n */\nGraphCardChartLegend.propTypes = {\n  chart: PropTypes.shape({\n    hide: PropTypes.func,\n    toggle: PropTypes.func,\n    isToggled: PropTypes.func\n  }),\n  datum: PropTypes.shape({\n    dataSets: PropTypes.arrayOf(\n      PropTypes.shape({\n        stroke: PropTypes.string.isRequired,\n        id: PropTypes.string.isRequired,\n        isThreshold: PropTypes.bool\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useDispatch: PropTypes.func,\n  useSelectors: PropTypes.func,\n  useProduct: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: object, useProduct: Function, t: Function, useDispatch: Function, useSelectors: Function, chart: object}}\n */\nGraphCardChartLegend.defaultProps = {\n  chart: {\n    hide: helpers.noop,\n    toggle: helpers.noop,\n    isToggled: helpers.noop\n  },\n  datum: {\n    dataSets: []\n  },\n  t: translate,\n  useDispatch: storeHooks.reactRedux.useDispatch,\n  useSelectors: storeHooks.reactRedux.useSelectors,\n  useProduct\n};\n\nexport { GraphCardChartLegend as default, GraphCardChartLegend };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { useProduct } from '../productView/productViewContext';\nimport { useGraphCardContext } from './graphCardContext';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Graph card title tooltip.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useProduct\n * @returns {Node}\n */\nconst GraphCardChartTitleTooltip = ({\n  t,\n  useGraphCardContext: useAliasGraphCardContext,\n  useProduct: useAliasProduct\n}) => {\n  const { productId } = useAliasProduct();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { isCardTitleDescription, isStandalone, metric } = settings;\n\n  if (!isCardTitleDescription && !metric?.isCardTitleDescription) {\n    return null;\n  }\n\n  return (\n    <Tooltip\n      content={\n        <p>{t(`curiosity-graph.cardHeadingDescription`, { context: (isStandalone && metric?.id) || productId })}</p>\n      }\n      position={TooltipPosition.top}\n      enableFlip={false}\n      distance={5}\n      entryDelay={100}\n      exitDelay={0}\n    >\n      <span className=\"curiosity-icon__question\">\n        <OutlinedQuestionCircleIcon />\n      </span>\n    </Tooltip>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, t: Function}}\n */\nGraphCardChartTitleTooltip.propTypes = {\n  t: PropTypes.func,\n  useProduct: PropTypes.func,\n  useGraphCardContext: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, t: Function}}\n */\nGraphCardChartTitleTooltip.defaultProps = {\n  t: translate,\n  useProduct,\n  useGraphCardContext\n};\n\nexport { GraphCardChartTitleTooltip as default, GraphCardChartTitleTooltip };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { getTooltipDate } from './graphCardHelpers';\nimport { translate } from '../i18n/i18n';\nimport { ChartTypeVariant } from '../chart/chart';\nimport { ChartIcon } from '../chart/chartIcon';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * A custom chart tooltip.\n *\n * @param {object} props\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useProduct\n * @returns {Node}\n */\nconst GraphCardChartTooltip = ({\n  datum,\n  t,\n  useProduct: useAliasProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productLabel } = useAliasProduct();\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n\n  let header = null;\n  const data = [];\n  const { itemsByKey = {} } = datum || {};\n\n  Object.keys(itemsByKey)\n    .reverse()\n    .forEach((key, index) => {\n      if (index === 0) {\n        header = getTooltipDate({\n          date: itemsByKey[key]?.data.date,\n          granularity\n        });\n      }\n\n      const tempDataFacet = {\n        color: itemsByKey[key]?.color\n      };\n\n      if (itemsByKey[key]?.chartType === ChartTypeVariant.threshold) {\n        let thresholdStringValue = itemsByKey[key]?.data.y ?? t('curiosity-graph.label', { context: 'noData' });\n\n        // ToDo: Remove hasInfinite check once deprecated graphCard components are removed\n        if (itemsByKey[key]?.data.hasInfinite || itemsByKey[key]?.data.hasInfiniteQuantity) {\n          thresholdStringValue = t('curiosity-graph.label', { context: ['threshold', 'infinite'] }, [\n            tempDataFacet.color && (\n              <ChartIcon\n                symbol=\"infinity\"\n                fill=\"#ffffff\"\n                title={t('curiosity-graph.label', { context: ['threshold', 'infinite'] })}\n              />\n            )\n          ]);\n        }\n\n        tempDataFacet.label = t('curiosity-graph.label', { context: ['threshold'] });\n        tempDataFacet.value = thresholdStringValue;\n      } else {\n        const dataFactsValue =\n          (itemsByKey[key]?.data.hasData === false && t('curiosity-graph.label', { context: 'noData' })) ||\n          itemsByKey[key]?.data.y ||\n          0;\n\n        tempDataFacet.label = t(`curiosity-graph.label`, { context: key, product: productLabel });\n        tempDataFacet.value = dataFactsValue;\n      }\n\n      tempDataFacet.chartType = itemsByKey[key]?.chartType;\n      data.push(tempDataFacet);\n    });\n\n  return (\n    <div className=\"curiosity-usage-graph__tooltip\">\n      <table summary={t('curiosity-graph.tooltipSummary')}>\n        {(data.length && header && (\n          <thead>\n            <tr>\n              <th colSpan={2}>{header}</th>\n            </tr>\n          </thead>\n        )) ||\n          null}\n        {(data.length && (\n          <tbody>\n            {data.map(dataFacet => {\n              const updatedDataFacetValue =\n                (typeof dataFacet.value === 'number' &&\n                  !Number.isInteger(dataFacet.value) &&\n                  helpers\n                    .numberDisplay(dataFacet.value)\n                    ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: true })\n                    ?.toUpperCase()) ||\n                dataFacet.value;\n\n              return (\n                <tr key={`tooltip-${dataFacet.label}`}>\n                  <th>\n                    {dataFacet.chartType === ChartTypeVariant.threshold && (\n                      <ChartIcon size=\"sm\" symbol=\"dash\" fill={dataFacet.color || 'transparent'} />\n                    )}\n                    {dataFacet.chartType !== ChartTypeVariant.threshold && (\n                      <ChartIcon size=\"sm\" fill={dataFacet.color || 'transparent'} />\n                    )}{' '}\n                    {dataFacet.label}\n                  </th>\n                  <td>{updatedDataFacetValue}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        )) ||\n          null}\n      </table>\n      {(!data.length && t('curiosity-graph.label', { context: ['noData', 'error'] })) || null}\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.propTypes = {\n  datum: PropTypes.shape({\n    itemsByKey: PropTypes.objectOf(\n      PropTypes.shape({\n        chartType: PropTypes.string,\n        color: PropTypes.string,\n        data: PropTypes.shape({\n          date: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),\n          hasData: PropTypes.bool,\n          hasInfinite: PropTypes.bool,\n          hasInfiniteQuantity: PropTypes.bool,\n          y: PropTypes.number\n        })\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.defaultProps = {\n  datum: {},\n  t: translate,\n  useProduct,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChartTooltip as default, GraphCardChartTooltip };\n","import React, { useContext } from 'react';\nimport { useShallowCompareEffect } from 'react-use';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Chart context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{ settings: { isStandalone: false, metrics: [], metric: undefined } }, helpers.noop];\n\nconst GraphCardContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated graph card context.\n *\n * @returns {React.Context<{}>}\n */\nconst useGraphCardContext = () => useContext(GraphCardContext);\n\n/**\n * Transform multiple metrics from store for chart/graph consumption.\n *\n * @param {object} options\n * @param {Function} options.useGraphCardContext\n * @param {Function} options.useSelectorsResponse\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: *[], errorId: {},\n *     id: {}, list: *[]}, cancelled: boolean, dataSets: unknown[], message: null, error: boolean}}\n */\nconst useMetricsSelector = ({\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsAllSettledResponse\n} = {}) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  const {\n    error,\n    fulfilled,\n    pending,\n    data = [],\n    ...response\n  } = useAliasSelectorsResponse(\n    metrics.map(\n      ({ id: metricId, isCapacity }) =>\n        ({ graph }) =>\n          isCapacity ? graph.capacity?.[metricId] : graph.tally?.[metricId]\n    )\n  );\n\n  /**\n   * Apply graph config settings to metric data.\n   */\n  const dataById = {};\n  const dataByList = data?.map((metricData, index) => {\n    const updatedMetricData = {\n      ...metrics[index],\n      ...metricData\n    };\n    dataById[metrics[index].id] = updatedMetricData;\n    return updatedMetricData;\n  });\n\n  return {\n    ...response,\n    data: dataById,\n    dataSets: dataByList,\n    error,\n    fulfilled,\n    pending\n  };\n};\n\n/**\n * Get graph metrics from Tally or Capacity.\n *\n * @param {object} params\n * @param {Function} params.getGraphMetrics\n * @param {Function} params.useDispatch\n * @param {Function} params.useGraphCardContext\n * @param {Function} params.useMetricsSelector\n * @param {Function} params.useProduct\n * @param {Function} params.useProductGraphTallyQuery\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: *[], errorId: {},\n *     id: {}, list: *[]}, cancelled: boolean, dataSets: *[], message: null, error: boolean}}\n */\nconst useGetMetrics = ({\n  getGraphMetrics = reduxActions.rhsm.getGraphMetrics,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector = useMetricsSelector,\n  useProduct: useAliasProduct = useProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductGraphTallyQuery();\n  const dispatch = useAliasDispatch();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  const response = useAliasMetricsSelector();\n\n  useShallowCompareEffect(() => {\n    const updatedMetrics = metrics.map(({ metric: metricId, isCapacity, query: metricQuery }) => ({\n      id: productId,\n      metric: metricId,\n      isCapacity,\n      query: metricQuery\n    }));\n    getGraphMetrics(updatedMetrics, query)(dispatch);\n  }, [dispatch, getGraphMetrics, metrics, productId, query]);\n\n  return response;\n};\n\nconst context = {\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardContext,\n  useMetricsSelector\n};\n\nexport {\n  context as default,\n  context,\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardContext,\n  useMetricsSelector\n};\n"],"names":["GraphCardChart","t","useAliasGetMetrics","useGetMetrics","useAliasGraphCardContext","useGraphCardContext","useAliasProduct","useProduct","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","productId","settings","actionDisplay","isStandalone","metric","granularity","RHSM_API_QUERY_SET_TYPES","pending","error","data","dataSets","updatedActionDisplay","Card","className","MinHeight","key","CardHeader","CardTitle","Title","headingLevel","size","context","id","GraphCardChartTitleTooltip","CardActions","CardBody","Loader","variant","Chart","graphCardHelpers","chartLegend","chart","datum","GraphCardChartLegend","chartTooltip","GraphCardChartTooltip","defaultProps","translate","useAliasDispatch","useDispatch","useAliasSelectors","useSelectors","productLabel","viewId","dispatch","legendItems","map","graph","legend","useMount","forEach","index","isToggled","hide","onClick","updatedToggle","toggle","type","reduxTypes","value","isThreshold","color","stroke","isDisabled","find","y","hasData","labelContent","product","tooltipContent","style","whiteSpace","checkIsToggled","button","Button","onKeyPress","tabIndex","component","icon","ChartIcon","symbol","visibility","fill","Tooltip","content","position","TooltipPosition","enableFlip","distance","helpers","storeHooks","isCardTitleDescription","entryDelay","exitDelay","OutlinedQuestionCircleIcon","header","itemsByKey","Object","keys","reverse","getTooltipDate","date","tempDataFacet","chartType","ChartTypeVariant","thresholdStringValue","hasInfinite","hasInfiniteQuantity","title","label","dataFactsValue","push","summary","length","colSpan","dataFacet","updatedDataFacetValue","Number","isInteger","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","DEFAULT_CONTEXT","metrics","undefined","GraphCardContext","React","useContext","useMetricsSelector","useSelectorsResponse","useAliasSelectorsResponse","metricId","isCapacity","capacity","tally","fulfilled","response","dataById","dataByList","metricData","updatedMetricData","getGraphMetrics","reduxActions","useAliasMetricsSelector","query","useShallowCompareEffect","updatedMetrics","metricQuery"],"sourceRoot":""}