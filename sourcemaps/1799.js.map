{"version":3,"file":"js/1799.1667846838888.327754fd5c55b0692593.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardChart.js","webpack:///./src/components/graphCard/graphCardChartLegend.js","webpack:///./src/components/graphCard/graphCardChartTitleTooltip.js","webpack:///./src/components/graphCard/graphCardChartTooltip.js","webpack:///./src/components/graphCard/graphCardContext.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardActions, CardBody, CardHeader, CardTitle, Title } from '@patternfly/react-core';\nimport { useShallowCompareEffect } from 'react-use';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useGraphCardContext, useGetGraphTally, useMetricsSelector } from './graphCardContext';\nimport { graphCardHelpers } from './graphCardHelpers';\nimport { Chart } from '../chart/chart';\nimport { GraphCardChartLegend } from './graphCardChartLegend';\nimport { GraphCardChartTooltip } from './graphCardChartTooltip';\nimport { GraphCardChartTitleTooltip } from './graphCardChartTitleTooltip';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { Loader } from '../loader/loader';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A chart/graph card.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useGetGraphTally\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProduct\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardChart = ({\n  t,\n  useGetGraphTally: useAliasGetGraphTally,\n  useGraphCardContext: useAliasGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProduct: useAliasProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productId } = useAliasProduct();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { actionDisplay, metric, metrics = [] } = settings;\n\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n  const { pending, error, data = {}, dataSets = [] } = useAliasMetricsSelector();\n  const getGraphTally = useAliasGetGraphTally();\n\n  useShallowCompareEffect(() => {\n    getGraphTally(metrics.map(({ id: metricId }) => ({ id: productId, metric: metricId })));\n  }, [metrics, productId, getGraphTally]);\n\n  const standaloneMetricId = (metric?.id && `_${metric?.id}`) || '';\n  let updatedActionDisplay = null;\n\n  if (typeof actionDisplay === 'function') {\n    updatedActionDisplay = actionDisplay({ data: { ...data } });\n  }\n\n  return (\n    <Card className=\"curiosity-usage-graph\">\n      <MinHeight key=\"headerMinHeight\">\n        <CardHeader>\n          <CardTitle>\n            <Title headingLevel=\"h2\" size=\"lg\">\n              {t(`curiosity-graph.cardHeading${standaloneMetricId}`, { context: productId })}\n              <GraphCardChartTitleTooltip />\n            </Title>\n          </CardTitle>\n          {updatedActionDisplay && (\n            <CardActions className={(error && 'blur') || ''}>{updatedActionDisplay}</CardActions>\n          )}\n        </CardHeader>\n      </MinHeight>\n      <MinHeight key=\"bodyMinHeight\">\n        <CardBody>\n          <div className={(error && 'blur') || (pending && 'fadein') || ''}>\n            {pending && <Loader variant=\"graph\" />}\n            {!pending && (\n              <Chart\n                {...graphCardHelpers.generateExtendedChartSettings({ settings, granularity })}\n                dataSets={dataSets}\n                chartLegend={({ chart, datum }) => <GraphCardChartLegend chart={chart} datum={datum} />}\n                chartTooltip={({ datum }) => <GraphCardChartTooltip datum={datum} />}\n              />\n            )}\n          </div>\n        </CardBody>\n      </MinHeight>\n    </Card>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, useProductGraphTallyQuery: Function,\n *     useMetricsSelector: Function, useGetGraphTally: Function}}\n */\nGraphCardChart.propTypes = {\n  t: PropTypes.func,\n  useGetGraphTally: PropTypes.func,\n  useGraphCardContext: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, useProductGraphTallyQuery: Function,\n *     useMetricsSelector: Function, useGetGraphTally: Function}}\n */\nGraphCardChart.defaultProps = {\n  t: translate,\n  useGetGraphTally,\n  useGraphCardContext,\n  useMetricsSelector,\n  useProduct,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChart as default, GraphCardChart };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { useMount } from 'react-use';\nimport { useProduct } from '../productView/productViewContext';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { ChartIcon } from '../chart/chartIcon';\n\n/**\n * A custom chart legend.\n *\n * @fires onClick\n * @param {object} props\n * @param {object} props.chart\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useDispatch\n * @param {Function} props.useProduct\n * @param {Function} props.useSelectors\n * @returns {Node}\n */\nconst GraphCardChartLegend = ({\n  chart,\n  datum,\n  t,\n  useDispatch: useAliasDispatch,\n  useSelectors: useAliasSelectors,\n  useProduct: useAliasProduct\n}) => {\n  const { productLabel, viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n  const legendItems = useAliasSelectors(\n    datum.dataSets.map(\n      ({ id }) =>\n        ({ graph }) =>\n          graph.legend?.[`${viewId}-${id}`]\n    )\n  );\n\n  useMount(() => {\n    datum.dataSets.forEach(({ id }, index) => {\n      const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n\n      if (checkIsToggled) {\n        chart.hide(id);\n      }\n    });\n  });\n\n  /**\n   * Toggle legend item and chart.\n   *\n   * @event onClick\n   * @param {string} id\n   */\n  const onClick = id => {\n    const updatedToggle = chart.toggle(id);\n\n    dispatch({\n      type: reduxTypes.graph.SET_GRAPH_LEGEND,\n      id: `${viewId}-${id}`,\n      value: updatedToggle\n    });\n  };\n\n  return (\n    <React.Fragment>\n      {datum.dataSets.map(({ id, isThreshold, stroke: color, data = [] }, index) => {\n        const isDisabled =\n          !data.find(({ y, hasData }) => (y >= 0 && hasData === true) || (y >= 0 && isThreshold === true)) || false;\n\n        const labelContent = t(\n          [`curiosity-graph.label_${(isThreshold && 'threshold') || id}`, 'curiosity-graph.label_no'],\n          {\n            product: productLabel,\n            context: productLabel\n          }\n        );\n\n        const tooltipContent = t(\n          `curiosity-graph.legendTooltip${(isThreshold && '_threshold') || ''}_${id}`,\n          {\n            product: productLabel,\n            context: productLabel\n          },\n          [<span style={{ whiteSpace: 'nowrap' }} />]\n        );\n\n        const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n\n        const button = (\n          <Button\n            onClick={() => onClick(id)}\n            onKeyPress={() => onClick(id)}\n            className=\"curiosity-usage-graph__legend-item\"\n            tabIndex={0}\n            key={`curiosity-button-${id}`}\n            variant=\"link\"\n            component=\"a\"\n            isDisabled={isDisabled}\n            icon={\n              ((isDisabled || checkIsToggled) && <ChartIcon symbol=\"eyeSlash\" />) || (\n                <ChartIcon\n                  symbol={(isThreshold && 'dash') || 'square'}\n                  style={{ visibility: (isDisabled && 'hidden') || (checkIsToggled && 'hidden') || 'visible' }}\n                  fill={color}\n                />\n              )\n            }\n          >\n            {labelContent}\n          </Button>\n        );\n\n        if (tooltipContent) {\n          return (\n            <Tooltip\n              key={`curiosity-tooltip-${id}`}\n              content={<p>{tooltipContent}</p>}\n              position={TooltipPosition.top}\n              enableFlip\n              distance={5}\n            >\n              {button}\n            </Tooltip>\n          );\n        }\n\n        return button;\n      })}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, t: Function, useDispatch: Function, useSelectors: Function, chart: object}}\n */\nGraphCardChartLegend.propTypes = {\n  chart: PropTypes.shape({\n    hide: PropTypes.func,\n    toggle: PropTypes.func,\n    isToggled: PropTypes.func\n  }),\n  datum: PropTypes.shape({\n    dataSets: PropTypes.arrayOf(\n      PropTypes.shape({\n        stroke: PropTypes.string.isRequired,\n        id: PropTypes.string.isRequired,\n        isThreshold: PropTypes.bool\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useDispatch: PropTypes.func,\n  useSelectors: PropTypes.func,\n  useProduct: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: object, useProduct: Function, t: Function, useDispatch: Function, useSelectors: Function, chart: object}}\n */\nGraphCardChartLegend.defaultProps = {\n  chart: {\n    hide: helpers.noop,\n    toggle: helpers.noop,\n    isToggled: helpers.noop\n  },\n  datum: {\n    dataSets: []\n  },\n  t: translate,\n  useDispatch: storeHooks.reactRedux.useDispatch,\n  useSelectors: storeHooks.reactRedux.useSelectors,\n  useProduct\n};\n\nexport { GraphCardChartLegend as default, GraphCardChartLegend };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { useProduct } from '../productView/productViewContext';\nimport { useGraphCardContext } from './graphCardContext';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Graph card title tooltip.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useProduct\n * @returns {Node}\n */\nconst GraphCardChartTitleTooltip = ({\n  t,\n  useGraphCardContext: useAliasGraphCardContext,\n  useProduct: useAliasProduct\n}) => {\n  const { productId } = useAliasProduct();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { isCardTitleDescription, metric } = settings;\n  const standaloneMetricId = (metric?.id && `_${metric?.id}`) || '';\n\n  if (!isCardTitleDescription) {\n    return null;\n  }\n\n  return (\n    <Tooltip\n      content={<p>{t(`curiosity-graph.cardHeadingDescription${standaloneMetricId}`, { context: productId })}</p>}\n      position={TooltipPosition.top}\n      enableFlip={false}\n      distance={5}\n      entryDelay={100}\n      exitDelay={0}\n    >\n      <span className=\"curiosity-icon__question\">\n        <OutlinedQuestionCircleIcon />\n      </span>\n    </Tooltip>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, t: Function}}\n */\nGraphCardChartTitleTooltip.propTypes = {\n  t: PropTypes.func,\n  useProduct: PropTypes.func,\n  useGraphCardContext: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, t: Function}}\n */\nGraphCardChartTitleTooltip.defaultProps = {\n  t: translate,\n  useProduct,\n  useGraphCardContext\n};\n\nexport { GraphCardChartTitleTooltip as default, GraphCardChartTitleTooltip };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { getTooltipDate } from './graphCardHelpers';\nimport { translate } from '../i18n/i18n';\nimport { ChartTypeVariant } from '../chart/chart';\nimport { ChartIcon } from '../chart/chartIcon';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * A custom chart tooltip.\n *\n * @param {object} props\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useProduct\n * @returns {Node}\n */\nconst GraphCardChartTooltip = ({\n  datum,\n  t,\n  useProduct: useAliasProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productId, productLabel } = useAliasProduct();\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n\n  let header = null;\n  const data = [];\n  const { itemsByKey = {} } = datum || {};\n\n  Object.keys(itemsByKey)\n    .reverse()\n    .forEach((key, index) => {\n      if (index === 0) {\n        header = getTooltipDate({\n          date: itemsByKey[key]?.data.date,\n          granularity\n        });\n      }\n\n      const tempDataFacet = {\n        color: itemsByKey[key]?.color\n      };\n\n      if (itemsByKey[key]?.chartType === ChartTypeVariant.threshold) {\n        let thresholdStringValue = itemsByKey[key]?.data.y ?? t('curiosity-graph.label_noData');\n\n        if (itemsByKey[key]?.data.hasInfinite) {\n          if (tempDataFacet.color) {\n            thresholdStringValue = (\n              <ChartIcon\n                symbol=\"infinity\"\n                fill=\"#ffffff\"\n                title={t('curiosity-graph.label_threshold', { context: 'infinite' })}\n              />\n            );\n          } else {\n            thresholdStringValue = t('curiosity-graph.label_threshold', { context: 'infinite' });\n          }\n        }\n\n        tempDataFacet.label = t('curiosity-graph.label_threshold');\n        tempDataFacet.value = thresholdStringValue;\n      } else {\n        const dataFactsValue =\n          (itemsByKey[key]?.data.hasData === false && t('curiosity-graph.label_noData')) ||\n          itemsByKey[key]?.data.y ||\n          0;\n\n        tempDataFacet.label = t(`curiosity-graph.label_${key}`, { context: productId, product: productLabel });\n        tempDataFacet.value = dataFactsValue;\n      }\n\n      tempDataFacet.chartType = itemsByKey[key]?.chartType;\n      data.push(tempDataFacet);\n    });\n\n  return (\n    <div className=\"curiosity-usage-graph__tooltip\">\n      <table summary={t('curiosity-graph.tooltipSummary')}>\n        {(data.length && header && (\n          <thead>\n            <tr>\n              <th colSpan={2}>{header}</th>\n            </tr>\n          </thead>\n        )) ||\n          null}\n        {(data.length && (\n          <tbody>\n            {data.map(dataFacet => {\n              const updatedDataFacetValue =\n                (typeof dataFacet.value === 'number' &&\n                  !Number.isInteger(dataFacet.value) &&\n                  helpers\n                    .numberDisplay(dataFacet.value)\n                    ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: true })\n                    ?.toUpperCase()) ||\n                dataFacet.value;\n\n              return (\n                <tr key={`tooltip-${dataFacet.label}`}>\n                  <th>\n                    {dataFacet.chartType === ChartTypeVariant.threshold && (\n                      <ChartIcon size=\"sm\" symbol=\"dash\" fill={dataFacet.color || 'transparent'} />\n                    )}\n                    {dataFacet.chartType !== ChartTypeVariant.threshold && (\n                      <ChartIcon size=\"sm\" fill={dataFacet.color || 'transparent'} />\n                    )}{' '}\n                    {dataFacet.label}\n                  </th>\n                  <td>{updatedDataFacetValue}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        )) ||\n          null}\n      </table>\n      {(!data.length && t('curiosity-graph.label_noData', { context: 'error' })) || null}\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.propTypes = {\n  datum: PropTypes.shape({\n    itemsByKey: PropTypes.objectOf(\n      PropTypes.shape({\n        chartType: PropTypes.string,\n        color: PropTypes.string,\n        data: PropTypes.shape({\n          date: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),\n          hasData: PropTypes.bool,\n          hasInfinite: PropTypes.bool,\n          y: PropTypes.number\n        })\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.defaultProps = {\n  datum: {},\n  t: translate,\n  useProduct,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChartTooltip as default, GraphCardChartTooltip };\n","import React, { useContext } from 'react';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Chart context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{ settings: { isStandalone: false, metrics: [], metric: undefined } }, helpers.noop];\n\nconst GraphCardContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated graph card context.\n *\n * @returns {React.Context<{}>}\n */\nconst useGraphCardContext = () => useContext(GraphCardContext);\n\n/**\n * Use Redux RHSM Actions, getGraphTally.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProductGraphTallyQuery\n * @returns {Function}\n */\nconst useGetGraphTally = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery\n} = {}) => {\n  const query = useAliasProductGraphTallyQuery();\n  const dispatch = useAliasDispatch();\n\n  return metrics => reduxActions.rhsm.getGraphTally(metrics, query)(dispatch);\n};\n\n/**\n * Get multiple metrics from store.\n *\n * @param {object} options\n * @param {Function} options.useGraphCardContext\n * @param {Function} options.useSelectors\n * @param {Function} options.useProduct\n * @returns {{data: object, pending: boolean, fulfilled: boolean, dataSets: Array, error: boolean}}\n */\nconst useMetricsSelector = ({\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useSelectors: useAliasSelectors = storeHooks.reactRedux.useSelectors,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n  const data = {};\n\n  const metricResponses = useAliasSelectors(\n    metrics.map(\n      ({ id: metricId }) =>\n        ({ graph }) =>\n          graph.tally?.[`${productId}_${metricId}`]\n    ),\n    []\n  );\n\n  let isPending = false;\n  let isFulfilled = false;\n  let errorCount = 0;\n\n  const dataSets = metricResponses.map((metric, index) => {\n    const { pending, fulfilled, error, cancelled } = metric || {};\n    const updatedPending = pending || cancelled || false;\n\n    if (updatedPending) {\n      isPending = true;\n    }\n\n    if (fulfilled) {\n      isFulfilled = true;\n    }\n\n    if (error) {\n      errorCount += 1;\n    }\n\n    const updatedMetric = {\n      ...metrics[index],\n      data: metric?.data?.data || [],\n      meta: metric?.data?.meta || {}\n    };\n    data[metrics[index].id] = updatedMetric;\n\n    return updatedMetric;\n  });\n\n  const response = {\n    data,\n    dataSets,\n    error: false,\n    fulfilled: false,\n    pending: false\n  };\n\n  if (errorCount === dataSets.length) {\n    response.error = true;\n  } else if (isPending) {\n    response.pending = true;\n  } else if (isFulfilled) {\n    response.fulfilled = true;\n  }\n\n  return response;\n};\n\nconst context = {\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetGraphTally,\n  useGraphCardContext,\n  useMetricsSelector\n};\n\nexport {\n  context as default,\n  context,\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetGraphTally,\n  useGraphCardContext,\n  useMetricsSelector\n};\n"],"names":["GraphCardChart","t","useAliasGetGraphTally","useGetGraphTally","useAliasGraphCardContext","useGraphCardContext","useAliasMetricsSelector","useMetricsSelector","useAliasProduct","useProduct","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","productId","settings","actionDisplay","metric","metrics","granularity","RHSM_API_QUERY_SET_TYPES","pending","error","data","dataSets","getGraphTally","useShallowCompareEffect","map","metricId","id","standaloneMetricId","updatedActionDisplay","Card","className","MinHeight","key","CardHeader","CardTitle","Title","headingLevel","size","context","GraphCardChartTitleTooltip","CardActions","CardBody","Loader","variant","Chart","graphCardHelpers","chartLegend","chart","datum","GraphCardChartLegend","chartTooltip","GraphCardChartTooltip","defaultProps","translate","useAliasDispatch","useDispatch","useAliasSelectors","useSelectors","productLabel","viewId","dispatch","legendItems","graph","legend","useMount","forEach","index","isToggled","hide","onClick","updatedToggle","toggle","type","reduxTypes","value","isThreshold","color","stroke","isDisabled","find","y","hasData","labelContent","product","tooltipContent","style","whiteSpace","checkIsToggled","button","Button","onKeyPress","tabIndex","component","icon","ChartIcon","symbol","visibility","fill","Tooltip","content","position","TooltipPosition","enableFlip","distance","helpers","storeHooks","isCardTitleDescription","entryDelay","exitDelay","OutlinedQuestionCircleIcon","header","itemsByKey","Object","keys","reverse","getTooltipDate","date","tempDataFacet","chartType","ChartTypeVariant","thresholdStringValue","hasInfinite","title","label","dataFactsValue","push","summary","length","colSpan","dataFacet","updatedDataFacetValue","Number","isInteger","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","DEFAULT_CONTEXT","isStandalone","undefined","GraphCardContext","React","useContext","query","reduxActions","metricResponses","tally","isPending","isFulfilled","errorCount","fulfilled","cancelled","updatedMetric","meta","response"],"sourceRoot":""}