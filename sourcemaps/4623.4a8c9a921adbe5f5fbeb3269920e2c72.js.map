{"version":3,"file":"js/4623.ab2f53ebed982eb8df58.js","mappings":"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","sources":["webpack:///./src/components/bannerMessages/bannerMessages.js","webpack:///./src/components/graphCard/graphCard.js","webpack:///./src/components/graphCard/graphCardChart.js","webpack:///./src/components/graphCard/graphCardMetric.js","webpack:///./src/components/graphCard/graphCardMetricTotals.js","webpack:///./src/components/graphCard/graphCardMetrics.js","webpack:///./src/components/guestsList/guestsList.js","webpack:///./src/components/inventoryList/inventoryList.deprecated.js","webpack:///./src/components/productView/productView.js","webpack:///./src/components/toolbar/toolbarFieldSelectCategory.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, AlertActionCloseButton, AlertVariant, Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { useShallowCompareEffect } from 'react-use';\nimport { apiQueries, storeHooks } from '../../redux';\nimport { translate } from '../i18n/i18n';\nimport { dateHelpers, helpers } from '../../common';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { useRouteDetail } from '../../hooks/useRouter';\n\n/**\n * Render banner messages.\n *\n * @param {object} props\n * @param {Array} props.messages\n * @param {Function} props.useRouteDetail\n * @param {Function} props.useAppMessages\n * @returns {Node}\n */\nconst BannerMessages = ({ messages, useRouteDetail: useAliasRouteDetail, useAppMessages: useAliasAppMessages }) => {\n  const [hideAlerts, setHideAlerts] = useState({});\n  const [alerts, setAlerts] = useState([]);\n  const { pathParameter: productId, productConfig } = useAliasRouteDetail() || {};\n  const isProductConfig = productConfig?.length === 1 && productConfig?.[0];\n  const { query } = apiQueries.parseRhsmQuery(productConfig?.[0]?.query || {});\n  const { appMessages } = useAliasAppMessages();\n\n  useShallowCompareEffect(() => {\n    if (productId && isProductConfig) {\n      const { startDate, endDate } = dateHelpers.getRangedDateTime('CURRENT');\n      const updatedGraphQuery = {\n        ...query,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString(),\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      };\n\n      storeHooks.rhsmActions.useGetMessageReports(productId, updatedGraphQuery);\n    }\n  }, [productId, isProductConfig, query]);\n\n  useShallowCompareEffect(() => {\n    const updatedMessages = [];\n\n    if (messages.length) {\n      Object.entries(appMessages).forEach(([key, value]) => {\n        if (hideAlerts[key] !== true && value === true) {\n          const message = messages.find(({ id }) => id === key);\n\n          if (message) {\n            updatedMessages.push({\n              key,\n              ...message\n            });\n          }\n        }\n      });\n    }\n\n    setAlerts(\n      updatedMessages.map(({ key, message, title, variant = AlertVariant.info }) => {\n        const actionClose = <AlertActionCloseButton onClose={() => setHideAlerts({ ...hideAlerts, [key]: true })} />;\n\n        return (\n          <Alert actionClose={actionClose} key={key} title={title} variant={variant}>\n            {message}\n          </Alert>\n        );\n      })\n    );\n  }, [appMessages, hideAlerts, messages]);\n\n  if (alerts?.length) {\n    return <div className=\"curiosity-banner-messages\">{alerts}</div>;\n  }\n\n  return null;\n};\n\n/**\n * Prop types.\n *\n * @type {{useAppMessages: Function, messages: Array, useRouteDetail: Function}}\n */\nBannerMessages.propTypes = {\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.node.isRequired,\n      message: PropTypes.node.isRequired,\n      variant: PropTypes.oneOf([...Object.values(AlertVariant)])\n    })\n  ),\n  useAppMessages: PropTypes.func,\n  useRouteDetail: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useAppMessages: Function, messages: Array, useRouteDetail: Function}}\n */\nBannerMessages.defaultProps = {\n  messages: [\n    {\n      id: 'cloudigradeMismatch',\n      title: translate('curiosity-banner.dataMismatchTitle'),\n      message: translate(\n        'curiosity-banner.dataMismatchMessage',\n        {\n          context: helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS !== '' && 'cloudigradeMismatch',\n          appName: helpers.UI_DISPLAY_NAME\n        },\n        [\n          <Button\n            isInline\n            component=\"a\"\n            variant=\"link\"\n            icon={<ExternalLinkAltIcon />}\n            iconPosition=\"right\"\n            target=\"_blank\"\n            href={helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS}\n          />\n        ]\n      )\n    }\n  ],\n  useAppMessages: storeHooks.rhsmSelectors.useAppMessages,\n  useRouteDetail\n};\n\nexport { BannerMessages as default, BannerMessages };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProductGraphConfig } from '../productView/productViewContext';\nimport { helpers } from '../../common';\nimport { GraphCardMetrics } from './graphCardMetrics';\nimport { GraphCardMetric } from './graphCardMetric';\nimport { graphCardHelpers } from './graphCardHelpers';\n\n/**\n * Set up graph cards. Expand filters with base graph settings.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useProductGraphConfig\n * @returns {Node}\n */\nconst GraphCard = ({ isDisabled, useProductGraphConfig: useAliasProductGraphConfig }) => {\n  const { filters } = useAliasProductGraphConfig();\n  const { groupedFilters, standaloneFilters } = graphCardHelpers.generateChartSettings(filters);\n\n  if (isDisabled) {\n    return null;\n  }\n\n  return (\n    <React.Fragment>\n      {(groupedFilters?.length && <GraphCardMetrics metricFilters={groupedFilters} />) || null}\n      {standaloneFilters.map(metricFilter => (\n        <GraphCardMetric key={`graphCard_${metricFilter.id}`} metricFilter={metricFilter} />\n      ))}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphConfig: Function, isDisabled: boolean}}\n */\nGraphCard.propTypes = {\n  isDisabled: PropTypes.bool,\n  useProductGraphConfig: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphConfig: Function, isDisabled: boolean}}\n */\nGraphCard.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_GRAPH,\n  useProductGraphConfig\n};\n\nexport { GraphCard as default, GraphCard };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardActions, CardBody, CardHeader, CardTitle, Title } from '@patternfly/react-core';\nimport { useShallowCompareEffect } from 'react-use';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useGraphCardContext, useGetGraphTally, useMetricsSelector } from './graphCardContext';\nimport { graphCardHelpers } from './graphCardHelpers';\nimport { Chart } from '../chart/chart';\nimport { GraphCardChartLegend } from './graphCardChartLegend';\nimport { GraphCardChartTooltip } from './graphCardChartTooltip';\nimport { GraphCardChartTitleTooltip } from './graphCardChartTitleTooltip';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { Loader } from '../loader/loader';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A chart/graph card.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useGetGraphTally\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProduct\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardChart = ({\n  t,\n  useGetGraphTally: useAliasGetGraphTally,\n  useGraphCardContext: useAliasGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProduct: useAliasProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productId } = useAliasProduct();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { actionDisplay, metric, metrics = [] } = settings;\n\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n  const { pending, error, data = {}, dataSets = [] } = useAliasMetricsSelector();\n  const getGraphTally = useAliasGetGraphTally();\n\n  useShallowCompareEffect(() => {\n    getGraphTally(metrics.map(({ id: metricId }) => ({ id: productId, metric: metricId })));\n  }, [metrics, productId, getGraphTally]);\n\n  const standaloneMetricId = (metric?.id && `_${metric?.id}`) || '';\n  let updatedActionDisplay = null;\n\n  if (typeof actionDisplay === 'function') {\n    updatedActionDisplay = actionDisplay({ data: { ...data } });\n  }\n\n  return (\n    <Card className=\"curiosity-usage-graph\">\n      <MinHeight key=\"headerMinHeight\">\n        <CardHeader>\n          <CardTitle>\n            <Title headingLevel=\"h2\" size=\"lg\">\n              {t(`curiosity-graph.cardHeading${standaloneMetricId}`, { context: productId })}\n              <GraphCardChartTitleTooltip />\n            </Title>\n          </CardTitle>\n          {updatedActionDisplay && (\n            <CardActions className={(error && 'blur') || ''}>{updatedActionDisplay}</CardActions>\n          )}\n        </CardHeader>\n      </MinHeight>\n      <MinHeight key=\"bodyMinHeight\">\n        <CardBody>\n          <div className={(error && 'blur') || (pending && 'fadein') || ''}>\n            {pending && <Loader variant=\"graph\" />}\n            {!pending && (\n              <Chart\n                {...graphCardHelpers.generateExtendedChartSettings({ settings, granularity })}\n                dataSets={dataSets}\n                chartLegend={({ chart, datum }) => <GraphCardChartLegend chart={chart} datum={datum} />}\n                chartTooltip={({ datum }) => <GraphCardChartTooltip datum={datum} />}\n              />\n            )}\n          </div>\n        </CardBody>\n      </MinHeight>\n    </Card>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, useProductGraphTallyQuery: Function,\n *     useMetricsSelector: Function, useGetGraphTally: Function}}\n */\nGraphCardChart.propTypes = {\n  t: PropTypes.func,\n  useGetGraphTally: PropTypes.func,\n  useGraphCardContext: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, useProductGraphTallyQuery: Function,\n *     useMetricsSelector: Function, useGetGraphTally: Function}}\n */\nGraphCardChart.defaultProps = {\n  t: translate,\n  useGetGraphTally,\n  useGraphCardContext,\n  useMetricsSelector,\n  useProduct,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChart as default, GraphCardChart };\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { GraphCardChart } from './graphCardChart';\nimport { useProductGraphConfig } from '../productView/productViewContext';\nimport { GraphCardContext } from './graphCardContext';\nimport { rhsmConstants } from '../../services/rhsm/rhsmConstants';\nimport { GraphCardMetricTotals } from './graphCardMetricTotals';\n\n/**\n * Display a single graph metric.\n *\n * @param {object} props\n * @param {object} props.metricFilter\n * @param {Function} props.useProductGraphConfig\n * @returns {Node}\n */\nconst GraphCardMetric = ({ metricFilter, useProductGraphConfig: useAliasProductGraphConfig }) => {\n  const [context, setContext] = useState({});\n  const { settings } = useAliasProductGraphConfig();\n\n  useEffect(() => {\n    setContext({\n      settings: {\n        padding: {\n          bottom: 75,\n          left: 75,\n          right: 45,\n          top: 45\n        },\n        ...settings,\n        isStandalone: true,\n        metric: metricFilter,\n        metrics: [metricFilter]\n      }\n    });\n  }, [metricFilter, settings, setContext]);\n\n  return (\n    <GraphCardContext.Provider value={context}>\n      <GraphCardMetricTotals>\n        <GraphCardChart />\n      </GraphCardMetricTotals>\n    </GraphCardContext.Provider>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphConfig: Function, metricFilter: object}}\n */\nGraphCardMetric.propTypes = {\n  metricFilter: PropTypes.shape({\n    id: PropTypes.oneOf([...Object.values(rhsmConstants.RHSM_API_PATH_METRIC_TYPES)])\n  }),\n  useProductGraphConfig: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphConfig: Function, metricFilter: object}}\n */\nGraphCardMetric.defaultProps = {\n  metricFilter: {},\n  useProductGraphConfig\n};\n\nexport { GraphCardMetric as default, GraphCardMetric };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter, CardTitle, Flex, FlexItem } from '@patternfly/react-core';\nimport moment from 'moment';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useMetricsSelector } from './graphCardContext';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { Loader, SkeletonSize } from '../loader/loader';\nimport { dateHelpers, helpers } from '../../common';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldRangedMonthly';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Display totals for a single metric.\n *\n * @param {object} props\n * @param {Node} props.children\n * @param {Function} props.t\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardMetricTotals = ({\n  children,\n  t,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate } = useAliasProductGraphTallyQuery();\n  const { pending, error, fulfilled, dataSets = [] } = useAliasMetricsSelector();\n  const { data = [], id: metricId, meta = {} } = dataSets[0] || {};\n  const { date: lastDate, hasData: lastHasData, y: lastValue } = data[data.length - 1] || {};\n  const { date: currentDate, hasData: currentHasData, y: currentValue } =\n    data.find(({ isCurrentDate }) => isCurrentDate === true) || {};\n\n  const { totalMonthlyDate: monthlyDate, totalMonthlyHasData: monthlyHasData, totalMonthlyValue: monthlyValue } = meta;\n\n  const { title: selectedMonth, isCurrent } =\n    toolbarFieldOptions.find(\n      option => option.title === startDate || option.value.startDate.toISOString() === startDate\n    ) || {};\n\n  const dailyDate = isCurrent ? currentDate : lastDate;\n  const dailyHasData = isCurrent ? currentHasData : lastHasData;\n  const dailyValue = isCurrent ? currentValue : lastValue;\n\n  return (\n    <Flex className=\"curiosity-usage-graph__totals\">\n      <Flex flex={{ default: 'flex_1' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-column\">\n          <Card className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}>\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric_dailyTotal', {\n                context: [isCurrent && 'current', metricId],\n                month: selectedMonth\n              })}\n            </CardTitle>\n            <MinHeight key=\"currentBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric_total',\n                      {\n                        context: (dailyHasData && metricId) || '',\n                        total: helpers\n                          .numberDisplay(dailyValue)\n                          ?.format({\n                            average: true,\n                            mantissa: 5,\n                            trimMantissa: true,\n                            lowPrecision: false\n                          })\n                          ?.toUpperCase()\n                      },\n                      [<strong title={dailyValue} aria-label={dailyValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"currentFooter\">\n              <CardFooter>\n                <div className={(!dailyHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    dailyDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(dailyDate).format(dateHelpers.timestampTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n          <Card className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}>\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric_monthlyTotal', {\n                context: [isCurrent && 'current', metricId],\n                month: selectedMonth\n              })}\n            </CardTitle>\n            <MinHeight key=\"totalMonthlyBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric_total',\n                      {\n                        context: (monthlyHasData && metricId) || '',\n                        total: helpers\n                          .numberDisplay(monthlyValue)\n                          ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: false })\n                          ?.toUpperCase()\n                      },\n                      [<strong title={monthlyValue} aria-label={monthlyValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"totalMonthlyFooter\">\n              <CardFooter>\n                <div className={(!monthlyHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    monthlyDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(monthlyDate).format(dateHelpers.timestampTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n        </FlexItem>\n      </Flex>\n      <Flex flex={{ default: 'flex_3' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-graph-column\">{children}</FlexItem>\n      </Flex>\n    </Flex>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.propTypes = {\n  children: PropTypes.node,\n  t: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.defaultProps = {\n  children: null,\n  t: translate,\n  useMetricsSelector,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardMetricTotals as default, GraphCardMetricTotals };\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { GraphCardChart } from './graphCardChart';\nimport { useProductGraphConfig } from '../productView/productViewContext';\nimport { GraphCardContext } from './graphCardContext';\nimport { rhsmConstants } from '../../services/rhsm/rhsmConstants';\n\n/**\n * Display a single graph metric.\n *\n * @param {object} props\n * @param {Array} props.metricFilters\n * @param {Function} props.useProductGraphConfig\n * @returns {Node}\n */\nconst GraphCardMetrics = ({ metricFilters, useProductGraphConfig: useAliasProductGraphConfig }) => {\n  const [context, setContext] = useState({});\n  const { settings } = useAliasProductGraphConfig();\n\n  useEffect(() => {\n    setContext({\n      settings: {\n        ...settings,\n        isStandalone: false,\n        metric: undefined,\n        metrics: metricFilters\n      }\n    });\n  }, [metricFilters, settings, setContext]);\n\n  return (\n    <GraphCardContext.Provider value={context}>\n      <GraphCardChart />\n    </GraphCardContext.Provider>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphConfig: Function, metricFilters: Array}}\n */\nGraphCardMetrics.propTypes = {\n  metricFilters: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.oneOf([...Object.values(rhsmConstants.RHSM_API_PATH_METRIC_TYPES)])\n    })\n  ),\n  useProductGraphConfig: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphConfig: Function, metricFilters: Array}}\n */\nGraphCardMetrics.defaultProps = {\n  metricFilters: [],\n  useProductGraphConfig\n};\n\nexport { GraphCardMetrics as default, GraphCardMetrics };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TableVariant } from '@patternfly/react-table';\nimport { helpers } from '../../common';\nimport { apiQueries, connect, reduxActions, reduxSelectors } from '../../redux';\nimport { Loader } from '../loader/loader';\nimport { inventoryListHelpers } from '../inventoryList/inventoryListHelpers';\nimport { RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { Table } from '../table/table';\n\n/**\n * ToDo: Consider removing the query prop entirely.\n * The current API doesn't allow setting more than \"offset\" and \"limit\"\n */\n/**\n * ToDo: Review moving the \"onScroll\" layout into a standalone component.\n */\n/**\n * A system inventory guests component.\n *\n * @augments React.Component\n * @fires onUpdateGuestsData\n * @fires onScroll\n */\nclass GuestsList extends React.Component {\n  state = { currentPage: 0, limit: 100, previousData: [] };\n\n  componentDidMount() {\n    this.onUpdateGuestsData();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { currentPage } = this.state;\n\n    if (currentPage !== prevState.currentPage) {\n      this.onUpdateGuestsData();\n    }\n  }\n\n  /**\n   * Call the RHSM APIs, apply filters.\n   *\n   * @event onUpdateGuestsData\n   */\n  onUpdateGuestsData = () => {\n    const { currentPage, limit } = this.state;\n    const { getHostsInventoryGuests, query, id } = this.props;\n\n    if (id) {\n      const updatedQuery = {\n        ...query,\n        [RHSM_API_QUERY_TYPES.LIMIT]: limit,\n        [RHSM_API_QUERY_TYPES.OFFSET]: currentPage * limit || 0\n      };\n\n      const { inventoryGuestsQuery } = apiQueries.parseRhsmQuery(updatedQuery);\n      getHostsInventoryGuests(id, inventoryGuestsQuery);\n    }\n  };\n\n  /**\n   * Update page state.\n   *\n   * @event onScroll\n   * @param {object} event\n   */\n  onScroll = event => {\n    const { target } = event;\n    const { currentPage, limit, previousData } = this.state;\n    const { numberOfGuests, pending, listData } = this.props;\n\n    const bottom = target.scrollHeight - target.scrollTop === target.clientHeight;\n\n    if (numberOfGuests > (currentPage + 1) * limit && bottom && !pending) {\n      const newPage = currentPage + 1;\n      const updatedData = [...previousData, ...(listData || [])];\n\n      this.setState({\n        previousData: updatedData,\n        currentPage: newPage\n      });\n    }\n  };\n\n  renderLoader() {\n    const { currentPage } = this.state;\n    const { filterGuestsData, listData, pending } = this.props;\n\n    if (currentPage > 0 && pending) {\n      const scrollLoader = (\n        <Loader\n          variant=\"table\"\n          tableProps={{\n            borders: false,\n            colCount: filterGuestsData?.length || (listData?.[0] && Object.keys(listData[0]).length) || 1,\n            colWidth: (filterGuestsData?.length && filterGuestsData.map(({ cellWidth }) => cellWidth)) || [],\n            rowCount: 0,\n            variant: TableVariant.compact\n          }}\n        />\n      );\n\n      return <div className=\"curiosity-table-scroll-loader__custom\">{scrollLoader}</div>;\n    }\n\n    return null;\n  }\n\n  /**\n   * ToDo: Consider moving the \"meaning of life\" into the default props on iteration.\n   * For everyone else... move the 42 into default props, possibly the 275.\n   */\n  /**\n   * Render a guests table.\n   *\n   * @returns {Node}\n   */\n  renderTable() {\n    const { previousData } = this.state;\n    const { filterGuestsData, listData, numberOfGuests, session } = this.props;\n    let updatedColumnHeaders = [];\n\n    const updatedRows = [...previousData, ...(listData || [])].map(({ ...cellData }) => {\n      const { columnHeaders, cells } = inventoryListHelpers.parseRowCellsListData({\n        filters: filterGuestsData,\n        cellData,\n        session\n      });\n\n      updatedColumnHeaders = columnHeaders;\n\n      return {\n        cells\n      };\n    });\n\n    // Include the table header\n    let updatedHeight = (numberOfGuests + 1) * 42;\n    updatedHeight = (updatedHeight < 275 && updatedHeight) || 275;\n\n    return (\n      <div className=\"curiosity-table-scroll\" style={{ height: `${updatedHeight}px` }}>\n        <div\n          className={`curiosity-table-scroll-list${(updatedHeight < 275 && '__no-scroll') || ''}`}\n          onScroll={this.onScroll}\n        >\n          {this.renderLoader()}\n          {(updatedRows.length && (\n            <Table\n              borders={false}\n              variant={TableVariant.compact}\n              className=\"curiosity-guests-list\"\n              columnHeaders={updatedColumnHeaders}\n              rows={updatedRows}\n            />\n          )) ||\n            null}\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * Render a guest list table.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { currentPage } = this.state;\n    const { error, filterGuestsData, listData, numberOfGuests, pending, perPageDefault } = this.props;\n\n    return (\n      <div className={`fadein ${(error && 'blur') || ''}`}>\n        {pending && currentPage === 0 && (\n          <Loader\n            variant=\"table\"\n            tableProps={{\n              borders: false,\n              className: 'curiosity-guests-list',\n              colCount: filterGuestsData?.length || (listData?.[0] && Object.keys(listData[0]).length) || 1,\n              colWidth: (filterGuestsData?.length && filterGuestsData.map(({ cellWidth }) => cellWidth)) || [],\n              rowCount: numberOfGuests < perPageDefault ? numberOfGuests : perPageDefault,\n              variant: TableVariant.compact\n            }}\n          />\n        )}\n        {((!pending && currentPage === 0) || currentPage > 0) && this.renderTable()}\n      </div>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{listData: Array, getHostsInventoryGuests: Function, session: object, filterGuestsData: object,\n *     pending: boolean, query: object, numberOfGuests: number, perPageDefault: number, id: string,\n *     error: boolean}}\n */\nGuestsList.propTypes = {\n  error: PropTypes.bool,\n  filterGuestsData: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      header: PropTypes.oneOfType([\n        PropTypes.shape({\n          title: PropTypes.node.isRequired\n        }),\n        PropTypes.func,\n        PropTypes.node\n      ]),\n      cell: PropTypes.oneOfType([\n        PropTypes.shape({\n          title: PropTypes.node.isRequired\n        }),\n        PropTypes.func,\n        PropTypes.node\n      ])\n    }).isRequired\n  ),\n  getHostsInventoryGuests: PropTypes.func,\n  listData: PropTypes.array,\n  id: PropTypes.string.isRequired,\n  numberOfGuests: PropTypes.number.isRequired,\n  pending: PropTypes.bool,\n  perPageDefault: PropTypes.number,\n  query: PropTypes.object,\n  session: PropTypes.object\n};\n\n/**\n * Default props.\n *\n * @type {{listData: Array, getHostsInventoryGuests: Function, session: object, filterGuestsData: Array,\n *     pending: boolean, query: object, perPageDefault: number, error: boolean}}\n */\nGuestsList.defaultProps = {\n  error: false,\n  filterGuestsData: [],\n  getHostsInventoryGuests: helpers.noop,\n  listData: [],\n  pending: false,\n  perPageDefault: 5,\n  query: {},\n  session: {}\n};\n\n/**\n * Apply actions to props.\n *\n * @param {Function} dispatch\n * @returns {object}\n */\nconst mapDispatchToProps = dispatch => ({\n  getHostsInventoryGuests: (id, query) => dispatch(reduxActions.rhsm.getHostsInventoryGuests(id, query))\n});\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.guestsList.makeGuestsList();\n\nconst ConnectedGuestsList = connect(makeMapStateToProps, mapDispatchToProps)(GuestsList);\n\nexport { ConnectedGuestsList as default, ConnectedGuestsList, GuestsList };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _isEqual from 'lodash/isEqual';\nimport { SortByDirection, TableVariant } from '@patternfly/react-table';\nimport { Bullseye, Card, CardActions, CardBody, CardFooter, CardHeader, CardHeaderMain } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport _camelCase from 'lodash/camelCase';\nimport { helpers } from '../../common';\nimport { connect, reduxActions, reduxSelectors, reduxTypes, store } from '../../redux';\nimport Table from '../table/table';\nimport { Loader } from '../loader/loader';\nimport { MinHeight } from '../minHeight/minHeight';\nimport GuestsList from '../guestsList/guestsList';\nimport { inventoryListHelpers } from './inventoryListHelpers';\nimport Pagination from '../pagination/pagination';\nimport { ToolbarFieldDisplayName } from '../toolbar/toolbarFieldDisplayName';\nimport { paginationHelpers } from '../pagination/paginationHelpers';\nimport {\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_SORT_TYPES as SORT_TYPES,\n  RHSM_API_QUERY_TYPES\n} from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A hosts system inventory component.\n *\n * @augments React.Component\n * @fires onColumnSort\n * @fires onPage\n * @fires onUpdateInventoryData\n */\nclass InventoryList extends React.Component {\n  componentDidMount() {\n    this.onUpdateInventoryData();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { productId, query } = this.props;\n\n    if (productId !== prevProps.productId || !_isEqual(query, prevProps.query)) {\n      this.onUpdateInventoryData();\n    }\n  }\n\n  /**\n   * On column sort update state.\n   *\n   * @event onColumnSort\n   * @param {object} data pass-through inventory data.\n   * @param {object} sortParams\n   * @param {string} sortParams.direction\n   * @param {string} sortParams.id column identifier\n   */\n  onColumnSort = (data, { direction, id }) => {\n    const { productId } = this.props;\n    const updatedSortColumn = Object.values(SORT_TYPES).find(value => _camelCase(value) === id);\n    let updatedDirection;\n\n    if (!updatedSortColumn) {\n      if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n        console.warn(`Sorting can only be performed on select fields, confirm field ${id} is allowed.`);\n      }\n      return;\n    }\n\n    switch (direction) {\n      case SortByDirection.desc:\n        updatedDirection = SORT_DIRECTION_TYPES.DESCENDING;\n        break;\n      default:\n        updatedDirection = SORT_DIRECTION_TYPES.ASCENDING;\n        break;\n    }\n\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.DIRECTION],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.DIRECTION]: updatedDirection\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.SORT],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.SORT]: updatedSortColumn\n      }\n    ]);\n  };\n\n  /**\n   * On paging and on perPage events.\n   *\n   * @event onPage\n   * @param {object} params\n   * @param {number} params.offset\n   * @param {number} params.perPage\n   */\n  onPage = ({ offset, perPage }) => {\n    const { productId } = this.props;\n\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.OFFSET],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.OFFSET]: offset\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.LIMIT],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.LIMIT]: perPage\n      }\n    ]);\n  };\n\n  /**\n   * Call the RHSM APIs, apply filters.\n   *\n   * @event onUpdateInventoryData\n   */\n  onUpdateInventoryData = () => {\n    const { getHostsInventory, isDisabled, productId, query } = this.props;\n\n    if (!isDisabled && productId) {\n      getHostsInventory(productId, query);\n    }\n  };\n\n  /**\n   * Render an inventory table.\n   *\n   * @returns {Node}\n   */\n  renderTable() {\n    const { filterGuestsData, filterInventoryData, listData, query, session, settings } = this.props;\n    let updatedColumnHeaders = [];\n\n    const updatedRows = listData.map(({ ...cellData }) => {\n      const { columnHeaders, cells } = inventoryListHelpers.parseRowCellsListData({\n        filters: inventoryListHelpers.parseInventoryFilters({\n          filters: filterInventoryData,\n          onSort: this.onColumnSort,\n          query\n        }),\n        cellData,\n        session\n      });\n\n      updatedColumnHeaders = columnHeaders;\n\n      const guestsId = cellData?.subscriptionManagerId;\n      let hasGuests = cellData?.numberOfGuests > 0 && guestsId;\n\n      // Apply hasGuests callback, return boolean\n      if (typeof settings?.hasGuests === 'function') {\n        hasGuests = settings.hasGuests({ ...cellData }, { ...session });\n      }\n\n      return {\n        cells,\n        expandedContent:\n          (hasGuests && (\n            <GuestsList\n              key={guestsId}\n              filterGuestsData={filterGuestsData}\n              numberOfGuests={cellData?.numberOfGuests}\n              id={guestsId}\n              query={query}\n            />\n          )) ||\n          undefined\n      };\n    });\n\n    return (\n      <Table\n        borders\n        variant={TableVariant.compact}\n        className=\"curiosity-inventory-list\"\n        columnHeaders={updatedColumnHeaders}\n        rows={updatedRows}\n      />\n    );\n  }\n\n  /**\n   * Render an inventory card.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const {\n      error,\n      filterInventoryData,\n      fulfilled,\n      isDisabled,\n      itemCount,\n      listData,\n      pending,\n      perPageDefault,\n      query,\n      t,\n      viewId\n    } = this.props;\n\n    if (isDisabled) {\n      return (\n        <Card className=\"curiosity-inventory-card__disabled\">\n          <CardBody>\n            <Bullseye>{t('curiosity-inventory.tab', { context: 'disabled' })}</Bullseye>\n          </CardBody>\n        </Card>\n      );\n    }\n\n    const updatedPerPage = query[RHSM_API_QUERY_TYPES.LIMIT] || perPageDefault;\n    const updatedOffset = query[RHSM_API_QUERY_TYPES.OFFSET];\n    const isLastPage = paginationHelpers.isLastPage(updatedOffset, updatedPerPage, itemCount);\n\n    // Set an updated key to force refresh minHeight\n    const minHeightContentRefreshKey =\n      (fulfilled === true && itemCount < updatedPerPage && `bodyMinHeight-${updatedPerPage}-resize`) ||\n      (fulfilled === true && isLastPage && `bodyMinHeight-${updatedPerPage}-resize`) ||\n      (error === true && `bodyMinHeight-${updatedPerPage}-resize`) ||\n      `bodyMinHeight-${updatedPerPage}`;\n\n    return (\n      <Card className=\"curiosity-inventory-card\">\n        <MinHeight key=\"headerMinHeight\" updateOnContent>\n          <CardHeader className={(error && 'hidden') || ''} aria-hidden={error || false}>\n            <CardHeaderMain>\n              <ToolbarFieldDisplayName viewId={viewId} />\n            </CardHeaderMain>\n            <CardActions className={(!itemCount && 'transparent') || ''} aria-hidden={!itemCount || false}>\n              <Pagination\n                isCompact\n                isDisabled={pending || error}\n                itemCount={itemCount}\n                offset={updatedOffset}\n                onPage={this.onPage}\n                onPerPage={this.onPage}\n                perPage={updatedPerPage}\n              />\n            </CardActions>\n          </CardHeader>\n        </MinHeight>\n        <MinHeight key={minHeightContentRefreshKey} updateOnContent>\n          <CardBody>\n            <div className={(error && 'blur') || (pending && 'fadein') || ''}>\n              {pending && (\n                <Loader\n                  variant=\"table\"\n                  tableProps={{\n                    className: 'curiosity-inventory-list',\n                    colCount: filterInventoryData?.length || (listData?.[0] && Object.keys(listData[0]).length) || 1,\n                    colWidth:\n                      (filterInventoryData?.length && filterInventoryData.map(({ cellWidth }) => cellWidth)) || [],\n                    rowCount: listData?.length || updatedPerPage,\n                    variant: TableVariant.compact\n                  }}\n                />\n              )}\n              {!pending && this.renderTable()}\n            </div>\n          </CardBody>\n        </MinHeight>\n        <MinHeight key=\"footerMinHeight\" updateOnContent>\n          <CardFooter\n            className={(error && 'hidden') || (!itemCount && 'transparent') || ''}\n            aria-hidden={error || !itemCount || false}\n          >\n            <TableToolbar isFooter>\n              <Pagination\n                dropDirection=\"up\"\n                isDisabled={pending || error}\n                itemCount={itemCount}\n                offset={updatedOffset}\n                onPage={this.onPage}\n                onPerPage={this.onPage}\n                perPage={updatedPerPage}\n              />\n            </TableToolbar>\n          </CardFooter>\n        </MinHeight>\n      </Card>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{settings:object, productId: string, listData: Array, session: object, pending: boolean,\n *     query: object, fulfilled: boolean, getHostsInventory: Function, error: boolean,\n *     itemCount: number, viewId: string, t: Function, filterInventoryData: Array, filterGuestsData: Array,\n *     perPageDefault: number, isDisabled: boolean}}\n */\nInventoryList.propTypes = {\n  error: PropTypes.bool,\n  fulfilled: PropTypes.bool,\n  filterGuestsData: PropTypes.array,\n  filterInventoryData: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      header: PropTypes.oneOfType([\n        PropTypes.shape({\n          title: PropTypes.node.isRequired\n        }),\n        PropTypes.func,\n        PropTypes.node\n      ]),\n      cell: PropTypes.oneOfType([\n        PropTypes.shape({\n          title: PropTypes.node.isRequired\n        }),\n        PropTypes.func,\n        PropTypes.node\n      ])\n    }).isRequired\n  ),\n  getHostsInventory: PropTypes.func,\n  isDisabled: PropTypes.bool,\n  itemCount: PropTypes.number,\n  listData: PropTypes.array,\n  pending: PropTypes.bool,\n  productId: PropTypes.string.isRequired,\n  perPageDefault: PropTypes.number,\n  query: PropTypes.object.isRequired,\n  session: PropTypes.object,\n  settings: PropTypes.shape({\n    hasGuests: PropTypes.func\n  }),\n  t: PropTypes.func,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{settings: object, listData: Array, session: object, pending: boolean, fulfilled: boolean,\n *     getHostsInventory: Function, error: boolean, itemCount: number, viewId: string, t: translate,\n *     filterInventoryData: Array, filterGuestsData: Array, perPageDefault: number, isDisabled: boolean}}\n */\nInventoryList.defaultProps = {\n  error: false,\n  fulfilled: false,\n  filterGuestsData: [],\n  filterInventoryData: [],\n  getHostsInventory: helpers.noop,\n  isDisabled: helpers.UI_DISABLED_TABLE_HOSTS,\n  itemCount: 0,\n  listData: [],\n  pending: false,\n  perPageDefault: 10,\n  session: {},\n  settings: {},\n  t: translate,\n  viewId: 'inventoryList'\n};\n\n/**\n * Apply actions to props.\n *\n * @param {Function} dispatch\n * @returns {object}\n */\nconst mapDispatchToProps = dispatch => ({\n  getHostsInventory: (id, query) => dispatch(reduxActions.rhsm.getHostsInventory(id, query))\n});\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.inventoryList.makeInventoryList();\n\nconst ConnectedInventoryList = connect(makeMapStateToProps, mapDispatchToProps)(InventoryList);\n\nexport { ConnectedInventoryList as default, ConnectedInventoryList, InventoryList };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport { useRouteDetail } from '../../hooks/useRouter';\nimport { ProductViewContext } from './productViewContext';\nimport { PageLayout, PageHeader, PageSection, PageToolbar, PageMessages, PageColumns } from '../pageLayout/pageLayout';\nimport { apiQueries } from '../../redux';\nimport { ConnectedGraphCard as ConnectedGraphCardDeprecated } from '../graphCard/graphCard.deprecated';\nimport { GraphCard } from '../graphCard/graphCard';\nimport { Toolbar } from '../toolbar/toolbar';\nimport { ConnectedInventoryList as ConnectedInventoryListDeprecated } from '../inventoryList/inventoryList.deprecated';\nimport { ConnectedInventoryList } from '../inventoryList/inventoryList';\nimport { helpers } from '../../common';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport { SelectPosition } from '../form/select';\nimport { ToolbarFieldGranularity } from '../toolbar/toolbarFieldGranularity';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport { ConnectedInventorySubscriptions } from '../inventorySubscriptions/inventorySubscriptions';\nimport { RHSM_API_PATH_PRODUCT_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * ToDo: base for default product layouts, add additional props for various toolbars\n * Next steps include...\n * Consider being able to pass customized toolbars for GraphCard and the\n * various Inventory displays. Have to evaluate how to handle the global toolbar, one\n * consideration is creating optional widgets with self-contained state update ability\n * based off of context/props/etc.\n *\n * Moving existing products to this layout, or maintaining them \"as is\", then renaming and\n * relocating them to this directory if they've been customized beyond a basic layout.\n */\n/**\n * Display product columns.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Node|boolean} props.toolbarGraph\n * @param {boolean} props.toolbarGraphDescription\n * @param {Function} props.useRouteDetail\n * @returns {Node}\n */\nconst ProductView = ({ t, toolbarGraph, toolbarGraphDescription, useRouteDetail: useAliasRouteDetail }) => {\n  const { pathParameter: routeProductId, productParameter: routeProductLabel, productConfig } = useAliasRouteDetail();\n\n  const renderProduct = config => {\n    const {\n      graphTallyQuery,\n      inventoryHostsQuery,\n      inventorySubscriptionsQuery,\n      query,\n      initialGuestsFilters,\n      initialInventoryFilters,\n      initialInventorySettings,\n      initialSubscriptionsInventoryFilters,\n      productId,\n      viewId\n    } = config;\n\n    if (!productId || !viewId) {\n      return null;\n    }\n\n    const {\n      graphTallyQuery: initialGraphTallyQuery,\n      inventoryHostsQuery: initialInventoryHostsQuery,\n      inventorySubscriptionsQuery: initialInventorySubscriptionsQuery\n    } = apiQueries.parseRhsmQuery(query, { graphTallyQuery, inventoryHostsQuery, inventorySubscriptionsQuery });\n\n    let graphCardTooltip = null;\n\n    if (toolbarGraphDescription) {\n      graphCardTooltip = (\n        <Tooltip\n          content={<p>{t('curiosity-graph.cardHeadingDescription', { context: productId })}</p>}\n          position={TooltipPosition.top}\n          enableFlip={false}\n          distance={5}\n          entryDelay={100}\n          exitDelay={0}\n        >\n          <sup className=\"curiosity-icon__info\">\n            <InfoCircleIcon />\n          </sup>\n        </Tooltip>\n      );\n    }\n\n    const graphCardTitle = (\n      <React.Fragment>\n        {t('curiosity-graph.cardHeading', { context: productId })}\n        {graphCardTooltip}\n      </React.Fragment>\n    );\n\n    return (\n      <ProductViewContext.Provider value={config} key={`product_${productId}`}>\n        <PageToolbar>\n          <Toolbar />\n        </PageToolbar>\n        <PageSection>\n          {productId !== RHSM_API_PATH_PRODUCT_TYPES.RHOSAK && (\n            <ConnectedGraphCardDeprecated\n              key={`graph_${productId}`}\n              query={initialGraphTallyQuery}\n              productId={productId}\n              viewId={viewId}\n              cardTitle={graphCardTitle}\n            >\n              {(React.isValidElement(toolbarGraph) && toolbarGraph) ||\n                (toolbarGraph !== false && <ToolbarFieldGranularity position={SelectPosition.right} />)}\n            </ConnectedGraphCardDeprecated>\n          )}\n          {productId === RHSM_API_PATH_PRODUCT_TYPES.RHOSAK && <GraphCard />}\n        </PageSection>\n        <PageSection\n          className={(productId === RHSM_API_PATH_PRODUCT_TYPES.RHOSAK && 'curiosity-page-section__tabs') || ''}\n        >\n          <InventoryTabs\n            key={`inventory_${productId}`}\n            productId={productId}\n            isDisabled={\n              (!initialInventoryFilters && !initialSubscriptionsInventoryFilters) || helpers.UI_DISABLED_TABLE\n            }\n          >\n            {!helpers.UI_DISABLED_TABLE_HOSTS &&\n              productId !== RHSM_API_PATH_PRODUCT_TYPES.RHOSAK &&\n              initialInventoryFilters && (\n                <InventoryTab\n                  key={`inventory_hosts_${productId}`}\n                  title={t('curiosity-inventory.tabHosts', { context: ['noInstances', productId] })}\n                >\n                  <ConnectedInventoryListDeprecated\n                    key={`inv_${productId}`}\n                    filterGuestsData={initialGuestsFilters}\n                    filterInventoryData={initialInventoryFilters}\n                    productId={productId}\n                    settings={initialInventorySettings}\n                    query={initialInventoryHostsQuery}\n                    viewId={viewId}\n                  />\n                </InventoryTab>\n              )}\n            {!helpers.UI_DISABLED_TABLE_INSTANCES &&\n              productId === RHSM_API_PATH_PRODUCT_TYPES.RHOSAK &&\n              initialInventoryFilters && (\n                <InventoryTab\n                  key={`inventory_instances_${productId}`}\n                  title={t('curiosity-inventory.tabInstances', { context: ['noInstances', productId] })}\n                >\n                  <ConnectedInventoryList\n                    key={`inv_instances_${productId}`}\n                    filterGuestsData={initialGuestsFilters}\n                    filterInventoryData={initialInventoryFilters}\n                    productId={productId}\n                    settings={initialInventorySettings}\n                    query={initialInventoryHostsQuery}\n                    viewId={viewId}\n                  />\n                </InventoryTab>\n              )}\n            {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && initialSubscriptionsInventoryFilters && (\n              <InventoryTab\n                key={`inventory_subs_${productId}`}\n                title={t('curiosity-inventory.tabSubscriptions', { context: productId })}\n              >\n                <ConnectedInventorySubscriptions\n                  key={`subs_${productId}`}\n                  filterInventoryData={initialSubscriptionsInventoryFilters}\n                  productId={productId}\n                  query={initialInventorySubscriptionsQuery}\n                  viewId={viewId}\n                />\n              </InventoryTab>\n            )}\n          </InventoryTabs>\n        </PageSection>\n      </ProductViewContext.Provider>\n    );\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader productLabel={routeProductLabel}>\n        {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: routeProductLabel })}\n      </PageHeader>\n      <PageMessages>{routeProductId !== RHSM_API_PATH_PRODUCT_TYPES.RHOSAK && <BannerMessages />}</PageMessages>\n      <PageColumns>{productConfig.map(config => renderProduct(config))}</PageColumns>\n    </PageLayout>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), toolbarGraphDescription: boolean, useRouteDetail: Function}}\n */\nProductView.propTypes = {\n  t: PropTypes.func,\n  toolbarGraph: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n  toolbarGraphDescription: PropTypes.bool,\n  useRouteDetail: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), toolbarGraphDescription: boolean, useRouteDetail: Function}}\n */\nProductView.defaultProps = {\n  t: translate,\n  toolbarGraph: null,\n  toolbarGraphDescription: false,\n  useRouteDetail\n};\n\nexport { ProductView as default, ProductView };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport { useShallowCompareEffect } from 'react-use';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductToolbarConfig } from '../productView/productViewContext';\nimport { Select } from '../form/select';\nimport { RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\nimport { ToolbarFieldGranularity, toolbarFieldOptions as granularityOptions } from './toolbarFieldGranularity';\nimport { ToolbarFieldRangedMonthly, toolbarFieldOptions as rangedMonthlyOptions } from './toolbarFieldRangedMonthly';\nimport { ToolbarFieldSla, toolbarFieldOptions as slaOptions } from './toolbarFieldSla';\nimport { ToolbarFieldUom, toolbarFieldOptions as uomOptions } from './toolbarFieldUom';\nimport { ToolbarFieldUsage, toolbarFieldOptions as usageOptions } from './toolbarFieldUsage';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = [\n  {\n    title: translate('curiosity-toolbar.category', { context: RHSM_API_QUERY_TYPES.GRANULARITY }),\n    value: RHSM_API_QUERY_TYPES.GRANULARITY,\n    component: <ToolbarFieldGranularity key=\"selectCategory_granularity\" isFilter />,\n    options: granularityOptions,\n    isClearable: false\n  },\n  {\n    title: translate('curiosity-toolbar.category', { context: 'rangedMonthly' }),\n    value: 'rangedMonthly',\n    component: <ToolbarFieldRangedMonthly key=\"selectCategory_rangedMonthly\" isFilter />,\n    options: rangedMonthlyOptions,\n    isClearable: false\n  },\n  {\n    title: translate('curiosity-toolbar.category', { context: RHSM_API_QUERY_TYPES.UOM }),\n    value: RHSM_API_QUERY_TYPES.UOM,\n    component: <ToolbarFieldUom key=\"selectCategory_uom\" isFilter />,\n    options: uomOptions,\n    isClearable: false\n  },\n  {\n    title: translate('curiosity-toolbar.category', { context: RHSM_API_QUERY_TYPES.SLA }),\n    value: RHSM_API_QUERY_TYPES.SLA,\n    component: <ToolbarFieldSla key=\"selectCategory_sla\" isFilter />,\n    options: slaOptions,\n    isClearable: true\n  },\n  {\n    title: translate('curiosity-toolbar.category', { context: RHSM_API_QUERY_TYPES.USAGE }),\n    value: RHSM_API_QUERY_TYPES.USAGE,\n    component: <ToolbarFieldUsage key=\"selectCategory_usage\" isFilter />,\n    options: usageOptions,\n    isClearable: true\n  }\n].map(option => ({\n  ...option,\n  selected: false\n}));\n\n/**\n * On select update category.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.toolbar.SET_FILTER_TYPE,\n        viewId,\n        currentFilter: value\n      }\n    ]);\n  };\n};\n\n/**\n * Return filtered category options, current, and initial value.\n *\n * @param {object} options\n * @param {Array} options.categoryOptions\n * @param {Function} options.useProduct\n * @param {Function} options.useProductToolbarConfig\n * @param {Function} options.useSelector\n * @returns {object}\n */\nconst useSelectCategoryOptions = ({\n  categoryOptions = toolbarFieldOptions,\n  useProduct: useAliasProduct = useProduct,\n  useProductToolbarConfig: useAliasProductToolbarConfig = useProductToolbarConfig,\n  useSelector: useAliasSelector = storeHooks.reactRedux.useSelector\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const { currentFilter: updatedValue } = useAliasSelector(({ toolbar }) => toolbar.filters?.[viewId], {});\n  const { filters = [] } = useAliasProductToolbarConfig();\n\n  let initialValue;\n\n  const updatedOptions = filters.map(({ id, selected }) => {\n    const option = categoryOptions.find(({ value }) => id === value);\n\n    if (updatedValue === undefined && selected) {\n      initialValue = option.value;\n    }\n\n    return {\n      ...option,\n      selected: (updatedValue === undefined && selected) || updatedValue === option.value\n    };\n  });\n\n  return {\n    currentCategory: updatedValue,\n    initialCategory: initialValue,\n    options: updatedOptions\n  };\n};\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useSelectCategoryOptions\n * @returns {Node}\n */\nconst ToolbarFieldSelectCategory = ({\n  t,\n  useOnSelect: useAliasOnSelect,\n  useSelectCategoryOptions: useAliasSelectCategoryOptions\n}) => {\n  const { currentCategory: updatedValue, initialCategory: initialValue, options } = useAliasSelectCategoryOptions();\n  const onSelect = useAliasOnSelect();\n\n  useShallowCompareEffect(() => {\n    if (initialValue) {\n      onSelect({ value: initialValue });\n    }\n  }, [initialValue, onSelect]);\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder_filter')}\n      onSelect={onSelect}\n      options={options}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder_filter')}\n      toggleIcon={<FilterIcon />}\n      data-test=\"toolbarFieldCategory\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, useSelectCategoryOptions: Function}}\n */\nToolbarFieldSelectCategory.propTypes = {\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useSelectCategoryOptions: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, useSelectCategoryOptions: Function}}\n */\nToolbarFieldSelectCategory.defaultProps = {\n  t: translate,\n  useOnSelect,\n  useSelectCategoryOptions\n};\n\nexport {\n  ToolbarFieldSelectCategory as default,\n  ToolbarFieldSelectCategory,\n  toolbarFieldOptions,\n  useOnSelect,\n  useSelectCategoryOptions\n};\n"],"names":["BannerMessages","messages","useAliasRouteDetail","useRouteDetail","useAliasAppMessages","useAppMessages","useState","hideAlerts","setHideAlerts","alerts","setAlerts","productId","pathParameter","productConfig","isProductConfig","length","query","apiQueries","appMessages","useShallowCompareEffect","dateHelpers","startDate","endDate","updatedGraphQuery","RHSM_API_QUERY_TYPES","GRANULARITY_TYPES","toISOString","storeHooks","updatedMessages","Object","entries","forEach","key","value","message","find","id","push","map","title","variant","AlertVariant","actionClose","AlertActionCloseButton","onClose","Alert","className","defaultProps","translate","context","helpers","appName","Button","isInline","component","icon","ExternalLinkAltIcon","iconPosition","target","href","GraphCard","isDisabled","filters","useAliasProductGraphConfig","useProductGraphConfig","graphCardHelpers","groupedFilters","standaloneFilters","GraphCardMetrics","metricFilters","metricFilter","GraphCardMetric","GraphCardChart","t","useAliasGetGraphTally","useGetGraphTally","useAliasGraphCardContext","useGraphCardContext","useAliasMetricsSelector","useMetricsSelector","useAliasProduct","useProduct","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","settings","actionDisplay","metric","metrics","granularity","RHSM_API_QUERY_SET_TYPES","pending","error","data","dataSets","getGraphTally","metricId","standaloneMetricId","updatedActionDisplay","Card","MinHeight","CardHeader","CardTitle","Title","headingLevel","size","GraphCardChartTitleTooltip","CardActions","CardBody","Loader","Chart","chartLegend","chart","datum","GraphCardChartLegend","chartTooltip","GraphCardChartTooltip","setContext","useEffect","padding","bottom","left","right","top","isStandalone","GraphCardContext","GraphCardMetricTotals","children","fulfilled","meta","lastDate","date","lastHasData","hasData","lastValue","y","isCurrentDate","currentDate","currentHasData","currentValue","monthlyDate","totalMonthlyDate","monthlyHasData","totalMonthlyHasData","monthlyValue","totalMonthlyValue","toolbarFieldOptions","option","selectedMonth","isCurrent","dailyDate","dailyHasData","dailyValue","Flex","flex","default","direction","alignSelf","FlexItem","month","skeletonProps","SkeletonSize","total","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","CardFooter","moment","undefined","GuestsList","state","currentPage","limit","previousData","onUpdateGuestsData","props","getHostsInventoryGuests","updatedQuery","inventoryGuestsQuery","onScroll","event","numberOfGuests","listData","scrollHeight","scrollTop","clientHeight","newPage","updatedData","setState","this","prevProps","prevState","filterGuestsData","scrollLoader","tableProps","borders","colCount","keys","colWidth","cellWidth","rowCount","TableVariant","session","updatedColumnHeaders","updatedRows","cellData","inventoryListHelpers","columnHeaders","cells","updatedHeight","style","height","renderLoader","Table","rows","perPageDefault","renderTable","React","makeMapStateToProps","reduxSelectors","ConnectedGuestsList","connect","dispatch","reduxActions","InventoryList","onColumnSort","updatedDirection","updatedSortColumn","values","SORT_TYPES","_camelCase","SortByDirection","SORT_DIRECTION_TYPES","store","type","reduxTypes","viewId","console","warn","onPage","offset","perPage","onUpdateInventoryData","getHostsInventory","_isEqual","filterInventoryData","onSort","guestsId","subscriptionManagerId","hasGuests","expandedContent","itemCount","Bullseye","updatedPerPage","updatedOffset","isLastPage","paginationHelpers","minHeightContentRefreshKey","updateOnContent","CardHeaderMain","ToolbarFieldDisplayName","isCompact","onPerPage","isFooter","dropDirection","ConnectedInventoryList","ProductView","toolbarGraph","toolbarGraphDescription","routeProductId","routeProductLabel","productParameter","PageLayout","PageHeader","productLabel","PageMessages","RHSM_API_PATH_PRODUCT_TYPES","PageColumns","config","graphTallyQuery","inventoryHostsQuery","inventorySubscriptionsQuery","initialGuestsFilters","initialInventoryFilters","initialInventorySettings","initialSubscriptionsInventoryFilters","initialGraphTallyQuery","initialInventoryHostsQuery","initialInventorySubscriptionsQuery","graphCardTooltip","Tooltip","content","position","TooltipPosition","enableFlip","distance","entryDelay","exitDelay","graphCardTitle","ProductViewContext","PageToolbar","Toolbar","PageSection","ConnectedGraphCard","cardTitle","ToolbarFieldGranularity","SelectPosition","InventoryTab","ConnectedInventorySubscriptions","renderProduct","isFilter","options","granularityOptions","isClearable","ToolbarFieldRangedMonthly","rangedMonthlyOptions","ToolbarFieldUom","uomOptions","ToolbarFieldSla","slaOptions","ToolbarFieldUsage","usageOptions","selected","useOnSelect","useDispatch","useAliasDispatch","currentFilter","useSelectCategoryOptions","initialValue","categoryOptions","useProductToolbarConfig","useAliasProductToolbarConfig","useSelector","useAliasSelector","toolbar","updatedValue","updatedOptions","currentCategory","initialCategory","ToolbarFieldSelectCategory","useAliasOnSelect","useAliasSelectCategoryOptions","onSelect","Select","selectedOptions","placeholder","toggleIcon","FilterIcon"],"sourceRoot":""}