{"version":3,"file":"js/2738.1675454323105.f0213bdd4d8f8d6e991a.js","mappings":"gZAiBMA,EAAsBC,OAAOC,OAAOC,EAAAA,IAAaC,KAAI,SAAAC,GAAI,MAAK,CAClEC,OAAOC,EAAAA,EAAAA,WAAU,0BAA2B,CAAEC,QAAS,CAAC,cAAeH,KACvEI,MAAOJ,EACPK,UAAU,EACX,IAUKC,EAAc,WAGT,6DAAP,CAAC,EAAC,IAFJC,YAAaC,OAAgB,IAAG,EAAAC,EAAAA,GAAAA,WAAAA,YAAiC,MACjEC,WAAYC,OAAe,IAAG,EAAAD,EAAAA,WAAU,EAExC,EAAmBC,IAAXC,EAAM,EAANA,OACFC,EAAWL,IAEjB,OAAO,WAA2B,6DAAP,CAAC,EAAC,IAAnBJ,MAAAA,OAAK,IAAG,OAAI,EACpB,EAA+BU,EAAAA,GAAAA,kBAA8BV,GAArDW,EAAS,EAATA,UAAWC,EAAO,EAAPA,QACnBH,EAAS,CACP,CACEb,KAAMiB,EAAAA,GAAAA,MAAAA,+BACNL,OAAAA,IACD,QAECZ,KAAMiB,EAAAA,GAAAA,MAAAA,qBAAsCC,EAAAA,GAAAA,aAC5CN,OAAAA,GACCM,EAAAA,GAAAA,YAAuCd,IAAK,QAG7CJ,KAAMiB,EAAAA,GAAAA,MAAAA,qBAAsCC,EAAAA,GAAAA,YAC5CN,OAAAA,GACCM,EAAAA,GAAAA,WAAsCH,EAAUI,gBAAa,QAG9DnB,KAAMiB,EAAAA,GAAAA,MAAAA,qBAAsCC,EAAAA,GAAAA,UAC5CN,OAAAA,GACCM,EAAAA,GAAAA,SAAoCF,EAAQG,gBAGnD,CACF,EAeMC,EAA0B,SAAH,GAOvB,IANJC,EAAQ,EAARA,SACAC,EAAO,EAAPA,QACAC,EAAQ,EAARA,SACAC,EAAC,EAADA,EACaC,EAAgB,EAA7BnB,YAGgDoB,GAAiBC,EAFR,EAAzDC,6BAESV,EAAAA,GAAAA,aACHW,EAAWJ,IACXK,EAAiBR,EAAQvB,KAAI,SAAAgC,GAAM,yBAAUA,GAAM,IAAE1B,SAAU0B,EAAO3B,QAAUsB,GAAY,IAElG,OACE,kBAAC,EAAAM,OAAM,CACL,aAAYR,EAAE,gCAAD,OAAkCH,EAAY,UAAc,IAAM,CAAElB,QAAS,gBAC1F0B,SAAUA,EACVP,QAASQ,EACTG,gBAAiBP,EACjBQ,YAAaV,EAAE,gCAAD,OAAkCH,EAAY,UAAc,IAAM,CAAElB,QAAS,gBAC3FoB,SAAUA,EACV,YAAU,2BAGhB,EA6BAH,EAAwBe,aAAe,CACrCd,UAAU,EACVC,QAAS3B,EACT4B,SAAUa,EAAAA,eAAAA,KACVZ,EAAGtB,EAAAA,UACHI,YAAAA,EACAsB,0BAAAA,EAAAA,0B","sources":["webpack:///./src/components/toolbar/toolbarFieldGranularity.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport {\n  RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.label', { context: ['granularity', type] }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update granularity.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    const { startDate, endDate } = dateHelpers.getRangedDateTime(value);\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: value\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.END_DATE]: endDate.toISOString()\n      }\n    ]);\n  };\n};\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {Array} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst ToolbarFieldGranularity = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: updatedValue } = useAliasProductGraphTallyQuery();\n  const onSelect = useAliasOnSelect();\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'granularity' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'granularity' })}\n      position={position}\n      data-test=\"toolbarFieldGranularity\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldGranularity.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldGranularity.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductGraphTallyQuery\n};\n\nexport { ToolbarFieldGranularity as default, ToolbarFieldGranularity, toolbarFieldOptions, useOnSelect };\n"],"names":["toolbarFieldOptions","Object","values","FIELD_TYPES","map","type","title","translate","context","value","selected","useOnSelect","useDispatch","useAliasDispatch","storeHooks","useProduct","useAliasProduct","viewId","dispatch","dateHelpers","startDate","endDate","reduxTypes","RHSM_API_QUERY_SET_TYPES","toISOString","ToolbarFieldGranularity","isFilter","options","position","t","useAliasOnSelect","updatedValue","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","onSelect","updatedOptions","option","Select","selectedOptions","placeholder","defaultProps","SelectPosition"],"sourceRoot":""}