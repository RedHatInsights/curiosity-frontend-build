{"version":3,"file":"js/5925.1677107262061.20a9907ead580860dd35.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCard.js","webpack:///./src/components/graphCard/graphCardMetricTotals.js","webpack:///./src/components/minHeight/minHeight.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { helpers } from '../../common';\nimport { GraphCardMetricTotals } from './graphCardMetricTotals';\nimport { GraphCardChart } from './graphCardChart';\nimport { GraphCardContext, useParseFiltersSettings } from './graphCardContext';\n\n/**\n * Set up graph cards. Expand filters with base graph settings.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useParseFiltersSettings\n * @returns {Node}\n */\nconst GraphCard = ({ isDisabled, useParseFiltersSettings: useAliasParseFiltersSettings }) => {\n  const { groupedFiltersSettings, standaloneFiltersSettings } = useAliasParseFiltersSettings();\n\n  if (isDisabled) {\n    return null;\n  }\n\n  return (\n    <React.Fragment>\n      {(groupedFiltersSettings?.settings?.metrics?.length && (\n        <GraphCardContext.Provider\n          key={`graphCard_grouped-${groupedFiltersSettings?.settings?.metrics?.[0]?.id}`}\n          value={groupedFiltersSettings}\n        >\n          <GraphCardChart />\n        </GraphCardContext.Provider>\n      )) ||\n        null}\n      {standaloneFiltersSettings?.map(filtersSettings => (\n        <GraphCardContext.Provider\n          key={`graphCard_standalone-${filtersSettings?.settings?.metric?.id}`}\n          value={filtersSettings}\n        >\n          <GraphCardMetricTotals>\n            <GraphCardChart />\n          </GraphCardMetricTotals>\n        </GraphCardContext.Provider>\n      ))}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useParseFiltersSettings: Function, isDisabled: boolean}}\n */\nGraphCard.propTypes = {\n  isDisabled: PropTypes.bool,\n  useParseFiltersSettings: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useParseFiltersSettings: Function, isDisabled: boolean}}\n */\nGraphCard.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_GRAPH,\n  useParseFiltersSettings\n};\n\nexport { GraphCard as default, GraphCard };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter, CardHeader, CardTitle, Title } from '@patternfly/react-core';\nimport moment from 'moment';\nimport _camelCase from 'lodash/camelCase';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useMetricsSelector } from './graphCardContext';\nimport { Loader, SkeletonSize } from '../loader/loader';\nimport { dateHelpers, helpers } from '../../common';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldRangedMonthly';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Display totals for a single metric.\n *\n * @param {object} props\n * @param {Node} props.children\n * @param {Function} props.t\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardMetricTotals = ({\n  children,\n  t,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate } = useAliasProductGraphTallyQuery();\n  const { pending, error, fulfilled, dataSets = [] } = useAliasMetricsSelector();\n  const { data = [], id, metric: metricId, meta = {} } = dataSets[0] || {};\n  const { date: lastDate, hasData: lastHasData, y: lastValue } = data[data.length - 1] || {};\n  const {\n    date: currentDate,\n    hasData: currentHasData,\n    y: currentValue\n  } = data.find(({ isCurrentDate }) => isCurrentDate === true) || {};\n\n  const { totalMonthlyDate: monthlyDate, totalMonthlyHasData: monthlyHasData, totalMonthlyValue: monthlyValue } = meta;\n\n  const { title: selectedMonth, isCurrent } =\n    toolbarFieldOptions.find(\n      option => option.title === startDate || option.value.startDate.toISOString() === startDate\n    ) || {};\n\n  const dailyDate = isCurrent ? currentDate : lastDate;\n  const dailyHasData = isCurrent ? currentHasData : lastHasData;\n  const dailyValue = isCurrent ? currentValue : lastValue;\n\n  return (\n    <div data-test={`graphMetricTotals-${_camelCase(metricId)}`} className=\"curiosity-usage-graph__totals\">\n      <div>\n        <div className=\"curiosity-usage-graph__totals-column\">\n          <Card\n            isPlain\n            data-test=\"graphDailyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardHeader>\n              <CardTitle>\n                <Title headingLevel=\"h2\" size=\"md\">\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t('curiosity-graph.cardHeadingMetric', {\n                      context: ['dailyTotal', id],\n                      month: selectedMonth\n                    })}\n                </Title>\n              </CardTitle>\n            </CardHeader>\n            <CardBody>\n              <div>\n                {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg, height: '60px' }} />}\n                {fulfilled &&\n                  t(\n                    'curiosity-graph.cardBodyMetric',\n                    {\n                      context: ['total', dailyHasData && id],\n                      total: helpers\n                        .numberDisplay(dailyValue)\n                        ?.format({\n                          average: true,\n                          mantissa: 5,\n                          trimMantissa: true,\n                          lowPrecision: false\n                        })\n                        ?.toUpperCase()\n                    },\n                    [<strong title={dailyValue} aria-label={dailyValue} />]\n                  )}\n              </div>\n            </CardBody>\n            <CardFooter>\n              <div>\n                {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                {fulfilled &&\n                  dailyDate &&\n                  t('curiosity-graph.cardFooterMetric', {\n                    date: moment.utc(dailyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                  })}\n              </div>\n            </CardFooter>\n          </Card>\n          <Card\n            isPlain\n            data-test=\"graphMonthlyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardHeader>\n              <CardTitle>\n                <Title headingLevel=\"h2\" size=\"md\">\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t('curiosity-graph.cardHeadingMetric', {\n                      context: ['monthlyTotal', id],\n                      month: selectedMonth\n                    })}\n                </Title>\n              </CardTitle>\n            </CardHeader>\n            <CardBody>\n              <div>\n                {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg, height: '60px' }} />}\n                {fulfilled &&\n                  t(\n                    'curiosity-graph.cardBodyMetric',\n                    {\n                      context: ['total', monthlyHasData && id],\n                      total: helpers\n                        .numberDisplay(monthlyValue)\n                        ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: false })\n                        ?.toUpperCase()\n                    },\n                    [<strong title={monthlyValue} aria-label={monthlyValue} />]\n                  )}\n              </div>\n            </CardBody>\n            <CardFooter>\n              <div>\n                {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                {fulfilled &&\n                  monthlyDate &&\n                  t('curiosity-graph.cardFooterMetric', {\n                    date: moment.utc(monthlyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                  })}\n              </div>\n            </CardFooter>\n          </Card>\n        </div>\n      </div>\n      <div>\n        <div className=\"curiosity-usage-graph__totals-graph-column\">{children}</div>\n      </div>\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.propTypes = {\n  children: PropTypes.node,\n  t: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.defaultProps = {\n  children: null,\n  t: translate,\n  useMetricsSelector,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardMetricTotals as default, GraphCardMetricTotals };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { helpers } from '../../common';\n\n/**\n * Set a min-height to prevent page jump component.\n *\n * @augments React.Component\n * @fires onResizeContainer\n */\nclass MinHeight extends React.Component {\n  containerRef = React.createRef();\n\n  innerContainerRef = React.createRef();\n\n  updatedContainerWidth = 0;\n\n  resizeObserver = helpers.noop;\n\n  componentDidMount() {\n    const { updateOnResize } = this.props;\n    window.setTimeout(() => {\n      this.setMinHeight();\n    });\n\n    if (updateOnResize) {\n      this.setResizeObserver();\n    }\n  }\n\n  componentDidUpdate() {\n    const { updateOnContent } = this.props;\n\n    if (updateOnContent) {\n      window.setTimeout(() => {\n        this.setMinHeight();\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.resizeObserver();\n  }\n\n  /**\n   * On resize adjust graph display.\n   *\n   * @event onResizeContainer\n   */\n  onResizeContainer = () => {\n    const { updatedContainerWidth } = this;\n    const { updateOnResize } = this.props;\n    const clientWidth = this.containerRef?.current?.clientWidth || 0;\n\n    if (updateOnResize && clientWidth !== updatedContainerWidth) {\n      this.updatedContainerWidth = clientWidth;\n      this.setMinHeight(true);\n    }\n  };\n\n  /**\n   * Set minHeight on mount or update.\n   *\n   * @param {boolean} reset\n   */\n  setMinHeight(reset = false) {\n    const { minHeight: overrideMinHeight } = this.props;\n    const { current: domElement = {} } = this.containerRef;\n    const { current: innerDomElement = {} } = this.innerContainerRef;\n\n    if (domElement?.style) {\n      let clientHeight;\n\n      if (reset) {\n        clientHeight = innerDomElement?.clientHeight || 0;\n      } else {\n        clientHeight = domElement?.clientHeight || 0;\n      }\n\n      if (overrideMinHeight > clientHeight) {\n        clientHeight = overrideMinHeight;\n      }\n\n      domElement.style.minHeight = `${clientHeight}px`;\n    }\n  }\n\n  /**\n   * Set ResizeObserver for scenarios when min-height needs to be updated.\n   */\n  setResizeObserver() {\n    window.addEventListener('resize', this.onResizeContainer);\n    this.resizeObserver = () => window.removeEventListener('resize', this.onResizeContainer);\n  }\n\n  /**\n   * Render a min-height div with children.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { children } = this.props;\n\n    return (\n      <div className=\"curiosity-minheight\" ref={this.containerRef}>\n        <div ref={this.innerContainerRef}>{children}</div>\n      </div>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{minHeight: number, children: Node, updateOnContent: boolean, updateOnResize: boolean}}\n */\nMinHeight.propTypes = {\n  updateOnContent: PropTypes.bool,\n  updateOnResize: PropTypes.bool,\n  children: PropTypes.node.isRequired,\n  minHeight: PropTypes.number\n};\n\n/**\n * Default props.\n *\n * @type {{minHeight: number, updateOnContent: boolean, updateOnResize: boolean}}\n */\nMinHeight.defaultProps = {\n  updateOnContent: false,\n  updateOnResize: true,\n  minHeight: 0\n};\n\nexport { MinHeight as default, MinHeight };\n"],"names":["GraphCard","isDisabled","useAliasParseFiltersSettings","useParseFiltersSettings","groupedFiltersSettings","standaloneFiltersSettings","settings","metrics","length","GraphCardContext","key","id","value","GraphCardChart","map","filtersSettings","metric","GraphCardMetricTotals","defaultProps","helpers","children","t","useAliasMetricsSelector","useMetricsSelector","startDate","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","RHSM_API_QUERY_SET_TYPES","pending","error","fulfilled","dataSets","data","metricId","meta","lastDate","date","lastHasData","hasData","lastValue","y","find","isCurrentDate","currentDate","currentHasData","currentValue","monthlyDate","totalMonthlyDate","monthlyHasData","totalMonthlyHasData","monthlyValue","totalMonthlyValue","toolbarFieldOptions","option","title","toISOString","selectedMonth","isCurrent","dailyDate","dailyHasData","dailyValue","_camelCase","className","Card","isPlain","CardHeader","CardTitle","Title","headingLevel","size","Loader","variant","skeletonProps","SkeletonSize","context","month","CardBody","height","total","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","CardFooter","moment","dateHelpers","translate","MinHeight","containerRef","React","innerContainerRef","updatedContainerWidth","resizeObserver","onResizeContainer","updateOnResize","props","clientWidth","current","setMinHeight","this","window","setTimeout","setResizeObserver","updateOnContent","clientHeight","reset","overrideMinHeight","minHeight","domElement","innerDomElement","style","addEventListener","removeEventListener","ref"],"sourceRoot":""}