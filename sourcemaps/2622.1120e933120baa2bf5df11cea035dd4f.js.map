{"version":3,"file":"js/2622.840e991947bf6fc6f9f2.js","mappings":"sYAsBMA,EAAyB,WAAuD,IAALC,GAAKC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,CAAC,GAA9CG,WACxBC,QADmD,IAAAL,EAAGI,EAAAA,WAAUJ,KAChEK,gBACFC,EAAU,GAchB,OAZIC,MAAMC,QAAQH,IAChBC,EAAQG,KAAIC,MAAZJ,GAAOK,EAAAA,EAAAA,GACFN,EAAgBO,KAAI,SAAAC,GAAI,MAAK,CAC9BC,OAAOC,EAAAA,EAAAA,WAAU,0BAA2B,CAC1CC,QAAS,CAAC,UAAqB,KAATH,EAAe,OAAWA,KAElDI,MAAOJ,EACPK,UAAU,EACX,MAIEZ,CACT,EAUMa,EAAc,WAGT,IAAAC,EAAAnB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,CAAC,EAACoB,EAAAD,EAFJE,YAAaC,OAAgB,IAAAF,EAAGG,EAAAA,GAAAA,WAAAA,YAAiCH,EAAAI,EAAAL,EACjEhB,WAEQsB,QAFmB,IAAAD,EAAGrB,EAAAA,WAAUqB,KAEhCC,OACFC,EAAWJ,IAEjB,OAAO,WAA2B,IAALK,GAAK3B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,CAAC,GAAlBgB,MAAAA,OAAK,IAAAW,EAAG,KAAIA,EACpBD,EAAS,CACP,CACEd,KAAMgB,EAAAA,GAAAA,MAAAA,+BACNH,OAAAA,GAEF,CACEb,KAAMgB,EAAAA,GAAAA,MAAAA,UACNH,OAAAA,EACAI,OAAQC,EAAAA,GAAAA,QACRd,MAAAA,IAGN,CACF,EAmBMe,EAAsB,SAAHC,GAOnB,IANJC,EAAQD,EAARC,SACAC,EAAQF,EAARE,SACAC,EAACH,EAADG,EACaC,EAAgBJ,EAA7Bd,YACwBmB,EAA2BL,EAAnDM,uBACwBC,EAA2BP,EAAnDlC,uBAE4C0C,EAAiBH,IAApDP,EAAAA,GAAAA,SACHW,EAAWL,IAEXM,EADUH,IACe5B,KAAI,SAAAgC,GAAM,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAM,IAAE1B,SAAU0B,EAAO3B,QAAUwB,GAAY,IAElG,OACEK,IAAAA,cAACC,EAAAA,OAAM,CACL,aAAYX,EAAE,gCAAiC,CAAEpB,QAAS,CAACkB,GAAY,SAAU,aACjFQ,SAAUA,EACVpC,QAASqC,EACTK,gBAAiBP,EACjBQ,YAAab,EAAE,gCAAiC,CAAEpB,QAAS,CAACkB,GAAY,SAAU,aAClFC,SAAUA,EACV,YAAU,uBAGhB,EAuBAH,EAAoBkB,aAAe,CACjChB,UAAU,EACVC,SAAUgB,EAAAA,eAAAA,KACVf,EAAGrB,EAAAA,UACHI,YAAAA,EACAoB,uBAAAA,EAAAA,uBACAxC,uBAAAA,E","sources":["webpack:///./src/components/toolbar/toolbarFieldVariant.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductToolbarQuery } from '../productView/productViewContext';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { Select, SelectPosition } from '../form/select';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A standalone Variant select filter.\n *\n * @memberof Toolbar\n * @module ToolbarFieldVariant\n */\n\n/**\n * Generate select field options from config\n *\n * @param {object} options\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useToolbarFieldOptions = ({ useProduct: useAliasProduct = useProduct } = {}) => {\n  const { productVariants } = useAliasProduct();\n  const options = [];\n\n  if (Array.isArray(productVariants)) {\n    options.push(\n      ...productVariants.map(type => ({\n        title: translate('curiosity-toolbar.label', {\n          context: ['variant', (type === '' && 'none') || type]\n        }),\n        value: type,\n        selected: false\n      }))\n    );\n  }\n\n  return options;\n};\n\n/**\n * On select update.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY,\n        viewId,\n        filter: RHSM_API_QUERY_SET_TYPES.VARIANT,\n        value\n      }\n    ]);\n  };\n};\n\n/**\n * Display a variant field with generated options.\n *\n * @deprecated The new ToolbarFieldGroupVariant replaces this filter field, which was used on individual product views.\n *     ToolbarFieldGroupVariant use is aimed at grouping dissimilar product configurations using \"productGroup\"s as the base.\n *     The new ToolbarFieldGroupVariant is automatically created when a product config has \"productVariants\" listed, or multiple\n *     \"productIds\" fall under the same \"productGroup\", and it is unnecessary to call it directly.\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductToolbarQuery\n * @param {Function} props.useToolbarFieldOptions\n * @returns {React.ReactNode}\n */\nconst ToolbarFieldVariant = ({\n  isFilter,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductToolbarQuery: useAliasProductToolbarQuery,\n  useToolbarFieldOptions: useAliasToolbarFieldOptions\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.VARIANT]: updatedValue } = useAliasProductToolbarQuery();\n  const onSelect = useAliasOnSelect();\n  const options = useAliasToolbarFieldOptions();\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'variant'] })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'variant'] })}\n      position={position}\n      data-test=\"toolbarFieldVariant\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, useProductToolbarQuery: Function, isFilter: boolean,\n *     position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldVariant.propTypes = {\n  isFilter: PropTypes.bool,\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductToolbarQuery: PropTypes.func,\n  useToolbarFieldOptions: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: translate, useProductToolbarQuery: Function, isFilter: boolean,\n *     position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldVariant.defaultProps = {\n  isFilter: false,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductToolbarQuery,\n  useToolbarFieldOptions\n};\n\nexport { ToolbarFieldVariant as default, ToolbarFieldVariant, useOnSelect, useToolbarFieldOptions };\n"],"names":["useToolbarFieldOptions","_ref$useProduct","arguments","length","undefined","useProduct","productVariants","options","Array","isArray","push","apply","_toConsumableArray","map","type","title","translate","context","value","selected","useOnSelect","_ref2","_ref2$useDispatch","useDispatch","useAliasDispatch","storeHooks","_ref2$useProduct","viewId","dispatch","_ref3$value","reduxTypes","filter","RHSM_API_QUERY_SET_TYPES","ToolbarFieldVariant","_ref4","isFilter","position","t","useAliasOnSelect","useAliasProductToolbarQuery","useProductToolbarQuery","useAliasToolbarFieldOptions","updatedValue","onSelect","updatedOptions","option","_objectSpread","React","Select","selectedOptions","placeholder","defaultProps","SelectPosition"],"sourceRoot":""}