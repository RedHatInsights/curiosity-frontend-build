{"version":3,"file":"js/1799.97a6cca51424f5ea8627.js","mappings":"6VA4BMA,EAAiB,SAAC,GAOlB,IANJC,EAMI,EANJA,EACkBC,EAKd,EALJC,iBACqBC,EAIjB,EAJJC,oBACoBC,EAGhB,EAHJC,mBACYC,EAER,EAFJC,WAC2BC,EACvB,EADJC,0BAEQC,EAAcJ,IAAdI,UADJ,EAEsBR,IAAlBS,SAAAA,OAFJ,MAEe,GAFf,EAGIC,EAAwCD,EAAxCC,cAAeC,EAAyBF,EAAzBE,OAHnB,EAG4CF,EAAjBG,QAAAA,OAH3B,MAGqC,GAHrC,EAK4CC,EAAgBP,IAAvDQ,EAAAA,GAAAA,aALL,EAMiDZ,IAA7Ca,EANJ,EAMIA,QAASC,EANb,EAMaA,MANb,IAMoBC,KAAAA,OANpB,MAM2B,GAN3B,MAM+BC,SAAAA,OAN/B,MAM0C,GAN1C,EAOEC,EAAgBrB,KAEtBsB,EAAAA,EAAAA,IAAwB,WACtBD,EAAcP,EAAQS,KAAI,gBAAOC,EAAP,EAAGC,GAAH,MAAuB,CAAEA,GAAIf,EAAWG,OAAQW,SACzE,CAACV,EAASJ,EAAWW,IAExB,IAAMK,GAAsBb,MAAAA,OAAA,EAAAA,EAAQY,KAAR,WAAkBZ,MAAAA,OAAlB,EAAkBA,EAAQY,KAAS,GAC3DE,EAAuB,KAM3B,MAJ6B,mBAAlBf,IACTe,EAAuBf,EAAc,CAAEO,MAAM,UAAKA,MAIlD,kBAAC,EAAAS,KAAD,CAAMC,UAAU,yBACd,kBAAC,EAAAC,UAAD,CAAWC,IAAI,mBACb,kBAAC,EAAAC,WAAD,KACE,kBAAC,EAAAC,UAAD,KACE,kBAAC,EAAAC,MAAD,CAAOC,aAAa,KAAKC,KAAK,MAC3BrC,EAAE,8BAAD,OAA+B2B,GAAsB,CAAEW,QAAS3B,IAClE,kBAAC,EAAA4B,2BAAD,QAGHX,GACC,kBAAC,EAAAY,YAAD,CAAaV,UAAYX,EAAS,OAAW,IAAKS,KAIxD,kBAAC,EAAAG,UAAD,CAAWC,IAAI,iBACb,kBAAC,EAAAS,SAAD,KACE,yBAAKX,WAAYX,EAAS,OAAYD,GAAW,WAAa,IAC3DA,GAAW,kBAAC,EAAAwB,OAAD,CAAQC,QAAQ,WAC1BzB,GACA,kBAAC,EAAA0B,MAAD,iBACMC,EAAAA,iBAAAA,8BAA+C,CAAEjC,SAAAA,EAAUI,YAAAA,IADjE,CAEEK,SAAUA,EACVyB,YAAa,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAV,OAAsB,kBAAC,EAAAC,qBAAD,CAAsBF,MAAOA,EAAOC,MAAOA,KAC9EE,aAAc,gBAAGF,EAAH,EAAGA,MAAH,OAAe,kBAAC,EAAAG,sBAAD,CAAuBH,MAAOA,aA+B3EjD,EAAeqD,aAAe,CAC5BpD,EAAGqD,EAAAA,UACHnD,iBAAAA,EAAAA,iBACAE,oBAAAA,EAAAA,oBACAE,mBAAAA,EAAAA,mBACAE,WAAAA,EAAAA,WACAE,0BAAAA,EAAAA","sources":["webpack:///./src/components/graphCard/graphCardChart.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardActions, CardBody, CardHeader, CardTitle, Title } from '@patternfly/react-core';\nimport { useShallowCompareEffect } from 'react-use';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useGraphCardContext, useGetGraphTally, useMetricsSelector } from './graphCardContext';\nimport { graphCardHelpers } from './graphCardHelpers';\nimport { Chart } from '../chart/chart';\nimport { GraphCardChartLegend } from './graphCardChartLegend';\nimport { GraphCardChartTooltip } from './graphCardChartTooltip';\nimport { GraphCardChartTitleTooltip } from './graphCardChartTitleTooltip';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { Loader } from '../loader/loader';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A chart/graph card.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useGetGraphTally\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProduct\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardChart = ({\n  t,\n  useGetGraphTally: useAliasGetGraphTally,\n  useGraphCardContext: useAliasGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProduct: useAliasProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productId } = useAliasProduct();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { actionDisplay, metric, metrics = [] } = settings;\n\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n  const { pending, error, data = {}, dataSets = [] } = useAliasMetricsSelector();\n  const getGraphTally = useAliasGetGraphTally();\n\n  useShallowCompareEffect(() => {\n    getGraphTally(metrics.map(({ id: metricId }) => ({ id: productId, metric: metricId })));\n  }, [metrics, productId, getGraphTally]);\n\n  const standaloneMetricId = (metric?.id && `_${metric?.id}`) || '';\n  let updatedActionDisplay = null;\n\n  if (typeof actionDisplay === 'function') {\n    updatedActionDisplay = actionDisplay({ data: { ...data } });\n  }\n\n  return (\n    <Card className=\"curiosity-usage-graph\">\n      <MinHeight key=\"headerMinHeight\">\n        <CardHeader>\n          <CardTitle>\n            <Title headingLevel=\"h2\" size=\"lg\">\n              {t(`curiosity-graph.cardHeading${standaloneMetricId}`, { context: productId })}\n              <GraphCardChartTitleTooltip />\n            </Title>\n          </CardTitle>\n          {updatedActionDisplay && (\n            <CardActions className={(error && 'blur') || ''}>{updatedActionDisplay}</CardActions>\n          )}\n        </CardHeader>\n      </MinHeight>\n      <MinHeight key=\"bodyMinHeight\">\n        <CardBody>\n          <div className={(error && 'blur') || (pending && 'fadein') || ''}>\n            {pending && <Loader variant=\"graph\" />}\n            {!pending && (\n              <Chart\n                {...graphCardHelpers.generateExtendedChartSettings({ settings, granularity })}\n                dataSets={dataSets}\n                chartLegend={({ chart, datum }) => <GraphCardChartLegend chart={chart} datum={datum} />}\n                chartTooltip={({ datum }) => <GraphCardChartTooltip datum={datum} />}\n              />\n            )}\n          </div>\n        </CardBody>\n      </MinHeight>\n    </Card>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, useProductGraphTallyQuery: Function,\n *     useMetricsSelector: Function, useGetGraphTally: Function}}\n */\nGraphCardChart.propTypes = {\n  t: PropTypes.func,\n  useGetGraphTally: PropTypes.func,\n  useGraphCardContext: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, useProductGraphTallyQuery: Function,\n *     useMetricsSelector: Function, useGetGraphTally: Function}}\n */\nGraphCardChart.defaultProps = {\n  t: translate,\n  useGetGraphTally,\n  useGraphCardContext,\n  useMetricsSelector,\n  useProduct,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChart as default, GraphCardChart };\n"],"names":["GraphCardChart","t","useAliasGetGraphTally","useGetGraphTally","useAliasGraphCardContext","useGraphCardContext","useAliasMetricsSelector","useMetricsSelector","useAliasProduct","useProduct","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","productId","settings","actionDisplay","metric","metrics","granularity","RHSM_API_QUERY_SET_TYPES","pending","error","data","dataSets","getGraphTally","useShallowCompareEffect","map","metricId","id","standaloneMetricId","updatedActionDisplay","Card","className","MinHeight","key","CardHeader","CardTitle","Title","headingLevel","size","context","GraphCardChartTitleTooltip","CardActions","CardBody","Loader","variant","Chart","graphCardHelpers","chartLegend","chart","datum","GraphCardChartLegend","chartTooltip","GraphCardChartTooltip","defaultProps","translate"],"sourceRoot":""}