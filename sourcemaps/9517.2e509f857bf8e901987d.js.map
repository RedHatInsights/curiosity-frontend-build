{"version":3,"file":"js/9517.584d2c2d7f3bb4ff17a1.js","mappings":"mSAwBMA,EAA0B,SAA1BA,EAA2B,GAAyB,IAAvBC,EAAuB,EAAvBA,EAAGC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OACrCC,GAAeC,EAAAA,EAAAA,KACnB,uCAAGC,KAAgBC,2BAAnB,iBAAc,EAA2BJ,UAAzC,aAAc,EAAqCK,EAAAA,GAAAA,gBACnDN,GAUIO,EAAW,SAAAC,GAAW,OAC1BC,EAAAA,EAAAA,SAAe,CACb,CACEC,KAAMC,EAAAA,GAAAA,MAAAA,+BACNV,OAAAA,IAHW,QAMXS,KAAMC,EAAAA,GAAAA,MAAAA,qCAAsDL,EAAAA,GAAAA,cAC5DL,OAAAA,GACCK,EAAAA,GAAAA,cAAoCE,MAAAA,OAAA,EAAAA,EAAaI,SAAU,SA+B5DC,EAAYC,GAAAA,CAAUP,EAAU,KAqBtC,OACE,kBAAC,EAAAQ,WAAD,KACE,kBAAC,EAAAC,UAAD,CACE,aAAYjB,EAAE,gCAAiC,CAAEkB,QAAS,gBAC1DC,UAAU,gCACVC,YAAY,SACZC,UAAW,IACXC,QAjDU,WACO,KAAjBnB,GAAwBA,GAI5BO,EAAAA,EAAAA,SAAe,CACb,CACEC,KAAMC,EAAAA,GAAAA,MAAAA,+BACNV,OAAAA,IAHW,QAMXS,KAAMC,EAAAA,GAAAA,MAAAA,qCAAsDL,EAAAA,GAAAA,cAC5DL,OAAAA,GACCK,EAAAA,GAAAA,aAAoC,SAqCrCgB,QArBU,SAAAC,GACd,OAAQA,EAAMC,SACZ,KAAK,GACHjB,EAASgB,EAAMvB,OACf,MACF,KAAK,GACH,MACF,QACEa,EAAUU,EAAMvB,SAchBA,MAAOE,EACPuB,YAAa1B,EAAE,gCAAiC,CAAEkB,QAAS,gBAC3D,YAAWnB,EAAwB4B,aAAazB,WAsBxDH,EAAwB4B,aAAe,CACrC3B,EAAG4B,EAAAA,UACH3B,MAAO,KACPC,OAAQ","sources":["webpack:///./src/components/toolbar/toolbarFieldDisplayName.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { InputGroup } from '@patternfly/react-core';\nimport _debounce from 'lodash/debounce';\nimport { reduxTypes, store, useSelector } from '../../redux';\nimport { TextInput } from '../form/textInput';\nimport { RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * ToDo: evaluate the debounce milliseconds, currently based off platforms default 800 ms\n */\n/**\n * Display a display name input field for search.\n *\n * @fires onSubmit\n * @fires onClear\n * @fires onKeyUp\n * @param {object} props\n * @param {Function} props.t\n * @param {string} props.value\n * @param {string} props.viewId\n * @returns {Node}\n */\nconst ToolbarFieldDisplayName = ({ t, value, viewId }) => {\n  const currentValue = useSelector(\n    ({ view }) => view.inventoryHostsQuery?.[viewId]?.[RHSM_API_QUERY_TYPES.DISPLAY_NAME],\n    value\n  );\n\n  /**\n   * On submit, dispatch type.\n   *\n   * @event onSubmit\n   * @param {string} submitValue\n   * @returns {void}\n   */\n  const onSubmit = submitValue =>\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.DISPLAY_NAME],\n        viewId,\n        [RHSM_API_QUERY_TYPES.DISPLAY_NAME]: submitValue?.trim() || null\n      }\n    ]);\n\n  /**\n   * On clear, dispatch type.\n   *\n   * @event onClear\n   * @returns {void}\n   */\n  const onClear = () => {\n    if (currentValue === '' || !currentValue) {\n      return;\n    }\n\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_HOSTS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.DISPLAY_NAME],\n        viewId,\n        [RHSM_API_QUERY_TYPES.DISPLAY_NAME]: null\n      }\n    ]);\n  };\n\n  /**\n   * Set up submit debounce event to allow for bypass.\n   */\n  const debounced = _debounce(onSubmit, 700);\n\n  /**\n   * On enter submit value, on type submit value, and on esc ignore (clear value at component level).\n   *\n   * @event onKeyUp\n   * @param {object} event\n   */\n  const onKeyUp = event => {\n    switch (event.keyCode) {\n      case 13:\n        onSubmit(event.value);\n        break;\n      case 27:\n        break;\n      default:\n        debounced(event.value);\n        break;\n    }\n  };\n\n  return (\n    <InputGroup>\n      <TextInput\n        aria-label={t('curiosity-toolbar.placeholder', { context: 'displayName' })}\n        className=\"curiosity-input__display-name\"\n        iconVariant=\"search\"\n        maxLength={255}\n        onClear={onClear}\n        onKeyUp={onKeyUp}\n        value={currentValue}\n        placeholder={t('curiosity-toolbar.placeholder', { context: 'displayName' })}\n        data-test={ToolbarFieldDisplayName.defaultProps.viewId}\n      />\n    </InputGroup>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{viewId: string, t: Function, value: string}}\n */\nToolbarFieldDisplayName.propTypes = {\n  t: PropTypes.func,\n  value: PropTypes.string,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{viewId: string, t: translate, value: string}}\n */\nToolbarFieldDisplayName.defaultProps = {\n  t: translate,\n  value: null,\n  viewId: 'toolbarFieldDisplayName'\n};\n\nexport { ToolbarFieldDisplayName as default, ToolbarFieldDisplayName };\n"],"names":["ToolbarFieldDisplayName","t","value","viewId","currentValue","useSelector","view","inventoryHostsQuery","RHSM_API_QUERY_TYPES","onSubmit","submitValue","store","type","reduxTypes","trim","debounced","_debounce","InputGroup","TextInput","context","className","iconVariant","maxLength","onClear","onKeyUp","event","keyCode","placeholder","defaultProps","translate"],"sourceRoot":""}