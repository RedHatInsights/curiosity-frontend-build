{"version":3,"file":"js/2243.44823980f4cda6159f83.js","mappings":"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","sources":["webpack:///./src/components/inventoryCard/inventoryCardHelpers.js"],"sourcesContent":["import React from 'react';\nimport { translate } from '../i18n/i18n';\nimport { RHSM_API_QUERY_SET_TYPES, RHSM_API_RESPONSE_META_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { tableHelpers } from '../table/table';\n\n/**\n * @memberof InventoryCard\n * @module InventoryCardHelpers\n */\n\n/**\n * Normalize inventory filters, settings into a consistent format.\n *\n * @param {object} params\n * @param {Array} params.filters\n * @param {Array} params.guestFilters\n * @param {object} params.settings\n * @param {string} params.productId\n * @returns {{settings: {}, columnCountAndWidths: {count: number, widths: Array}, filters: Array}}\n */\nconst normalizeInventorySettings = ({ filters = [], guestFilters = [], settings = {}, productId } = {}) => {\n  const updatedFilters = [];\n  const columnCountAndWidths = { count: filters.length, widths: [] };\n\n  filters.forEach(({ metric, header, cell, width, ...rest }) => {\n    let updatedHeader;\n    let updatedCell;\n    let updatedWidth;\n\n    if (typeof header === 'function' && header) {\n      updatedHeader = header;\n    } else if (header) {\n      updatedHeader = () => header;\n    } else {\n      updatedHeader = () =>\n        translate([`curiosity-inventory.header`, `curiosity-inventory.guestsHeader`], {\n          context: [metric, productId]\n        });\n    }\n\n    if (typeof cell === 'function' && cell) {\n      updatedCell = cell;\n    } else if (cell) {\n      updatedCell = () => cell;\n    } else {\n      updatedCell = ({ [metric]: displayValue }) => displayValue;\n    }\n\n    if (typeof width === 'number' && !Number.isNaN(width)) {\n      updatedWidth = width;\n    }\n\n    columnCountAndWidths.widths.push(updatedWidth);\n\n    updatedFilters.push({\n      label: updatedHeader,\n      metric,\n      width,\n      ...rest,\n      header: updatedHeader,\n      cell: updatedCell\n    });\n  });\n\n  return {\n    isGuestFiltersDisabled: !guestFilters || !guestFilters?.length,\n    columnCountAndWidths,\n    filters: updatedFilters,\n    settings\n  };\n};\n\n// ToDo: evaluate moving isWrap logic under the table component helpers\n// ToDo: evaluate a fallback \"perPageDefault = 10\" defined here\n/**\n * Parse an inventory API response against available filters, query parameters, and session values.\n *\n * @param {object} params\n * @param {object} params.data\n * @param {Array} params.filters\n * @param {React.ReactNode} params.GuestComponent\n * @param {boolean} params.isGuestFiltersDisabled\n * @param {object} params.query\n * @param {object} params.session\n * @param {object} params.settings\n * @returns {{dataSetColumnHeaders: Array, resultsPerPage: number, resultsOffset: number, dataSetRows: Array, resultsCount: number}}\n */\nconst parseInventoryResponse = ({\n  data = {},\n  filters = [],\n  GuestComponent,\n  isGuestFiltersDisabled = true,\n  query = {},\n  session = {},\n  settings = {}\n} = {}) => {\n  const { data: listData = [], meta = {} } = data;\n  const resultsCount = meta[RHSM_API_RESPONSE_META_TYPES.COUNT];\n  const {\n    [RHSM_API_QUERY_SET_TYPES.OFFSET]: resultsOffset,\n    [RHSM_API_QUERY_SET_TYPES.LIMIT]: resultsPerPage,\n    [RHSM_API_QUERY_SET_TYPES.SORT]: sortColumn,\n    [RHSM_API_QUERY_SET_TYPES.DIRECTION]: sortDirection\n  } = query;\n\n  const dataSetColumnHeaders = [];\n  const dataSetRows = [];\n  const columnData = {};\n\n  listData.forEach(rowData => {\n    const dataSetRow = [];\n    let expandedContent;\n\n    filters.forEach(({ metric, label, cell, ...rest }) => {\n      const updatedCell = cell({ ...rowData }, { ...session }, { ...meta });\n      const updatedLabel = label({ columnData: [] }, { ...session }, { ...meta });\n      dataSetRow.push({ metric, ...rest, dataLabel: updatedLabel, content: updatedCell });\n\n      columnData[metric] ??= [];\n      columnData[metric].push(updatedCell);\n    });\n\n    if (typeof settings?.guestContent === 'function') {\n      const guestContentResults = settings.guestContent({ ...rowData }, { ...session }, { ...meta });\n      const { id: guestId, numberOfGuests } = guestContentResults || {};\n\n      if (isGuestFiltersDisabled === false && guestId && numberOfGuests && GuestComponent) {\n        expandedContent = () => (\n          <GuestComponent key={`guests-${guestId}`} id={guestId} numberOfGuests={numberOfGuests} />\n        );\n      }\n    }\n\n    dataSetRows.push({ cells: dataSetRow, row: rowData, expandedContent });\n  });\n\n  filters.forEach(({ metric, header, ...rest }) => {\n    const updatedHeader = header({ columnData: columnData[metric] }, { ...session }, { ...meta });\n    const updatedRest = { ...rest };\n\n    if (updatedRest.isSort === true && sortDirection && sortColumn === metric) {\n      updatedRest.isSortActive = true;\n      updatedRest.sortDirection = sortDirection;\n    }\n\n    if (updatedRest.isWrap === true) {\n      updatedRest.modifier = tableHelpers.WrapModifierVariant.wrap;\n    }\n\n    dataSetColumnHeaders.push({ metric, ...updatedRest, content: updatedHeader });\n  });\n\n  return {\n    dataSetColumnHeaders,\n    dataSetRows,\n    resultsCount,\n    resultsOffset,\n    resultsPerPage\n  };\n};\n\nconst inventoryCardHelpers = {\n  normalizeInventorySettings,\n  parseInventoryResponse\n};\n\nexport { inventoryCardHelpers as default, inventoryCardHelpers, normalizeInventorySettings, parseInventoryResponse };\n"],"names":["normalizeInventorySettings","filters","guestFilters","settings","productId","arguments","length","undefined","updatedFilters","columnCountAndWidths","count","widths","forEach","_ref","updatedHeader","updatedCell","updatedWidth","metric","header","cell","width","rest","translate","context","_ref2","displayValue","Number","isNaN","push","label","isGuestFiltersDisabled","parseInventoryResponse","data","GuestComponent","query","session","listData","meta","resultsCount","RHSM_API_RESPONSE_META_TYPES","RHSM_API_QUERY_SET_TYPES","resultsOffset","resultsPerPage","sortColumn","sortDirection","dataSetColumnHeaders","dataSetRows","columnData","rowData","dataSetRow","expandedContent","_ref3","_columnData$metric","updatedLabel","dataLabel","content","guestContent","guestContentResults","id","guestId","numberOfGuests","React","key","concat","cells","row","_ref4","updatedRest","isSort","isSortActive","isWrap","modifier","tableHelpers","inventoryCardHelpers"],"sourceRoot":""}