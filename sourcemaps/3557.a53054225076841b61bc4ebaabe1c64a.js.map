{"version":3,"file":"js/3557.1665590505255.f05a59b4feb5a42f9754.js","mappings":"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","sources":["webpack:///./src/components/bannerMessages/bannerMessages.js","webpack:///./src/components/bannerMessages/bannerMessagesContext.js","webpack:///./src/components/productView/productView.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, AlertActionCloseButton, AlertVariant, Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { useShallowCompareEffect } from 'react-use';\nimport { useGetAppMessages } from './bannerMessagesContext';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Render banner messages.\n *\n * @param {object} props\n * @param {Array} props.messages\n * @param {Function} props.useGetAppMessages\n * @returns {React.ReactNode}\n */\nconst BannerMessages = ({ messages, useGetAppMessages: useAliasGetAppMessages }) => {\n  const [hideAlerts, setHideAlerts] = useState({});\n  const [alerts, setAlerts] = useState([]);\n  const { data: appMessages } = useAliasGetAppMessages();\n\n  useShallowCompareEffect(() => {\n    const updatedMessages = [];\n\n    if (messages.length) {\n      Object.entries(appMessages).forEach(([key, value]) => {\n        if (hideAlerts[key] !== true && value === true) {\n          const message = messages.find(({ id }) => id === key);\n\n          if (message) {\n            updatedMessages.push({\n              key,\n              ...message\n            });\n          }\n        }\n      });\n    }\n\n    setAlerts(\n      updatedMessages.map(({ key, message, title, variant = AlertVariant.info }) => {\n        const actionClose = <AlertActionCloseButton onClose={() => setHideAlerts({ ...hideAlerts, [key]: true })} />;\n\n        return (\n          <Alert actionClose={actionClose} key={key} title={title} variant={variant}>\n            {message}\n          </Alert>\n        );\n      })\n    );\n  }, [appMessages, hideAlerts, messages]);\n\n  if (alerts?.length) {\n    return <div className=\"curiosity-banner-messages\">{alerts}</div>;\n  }\n\n  return null;\n};\n\n/**\n * Prop types.\n *\n * @type {{useGetAppMessages: Function, messages: Array}}\n */\nBannerMessages.propTypes = {\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.node.isRequired,\n      message: PropTypes.node.isRequired,\n      variant: PropTypes.oneOf([...Object.values(AlertVariant)])\n    })\n  ),\n  useGetAppMessages: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGetAppMessages: Function, messages: Array}}\n */\nBannerMessages.defaultProps = {\n  messages: [\n    {\n      id: 'cloudigradeMismatch',\n      title: translate('curiosity-banner.dataMismatchTitle'),\n      message: translate(\n        'curiosity-banner.dataMismatchMessage',\n        {\n          context: helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS !== '' && 'cloudigradeMismatch',\n          appName: helpers.UI_DISPLAY_NAME\n        },\n        [\n          <Button\n            isInline\n            component=\"a\"\n            variant=\"link\"\n            icon={<ExternalLinkAltIcon />}\n            iconPosition=\"right\"\n            target=\"_blank\"\n            href={helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS}\n          />\n        ]\n      )\n    }\n  ],\n  useGetAppMessages\n};\n\nexport { BannerMessages as default, BannerMessages };\n","import { useShallowCompareEffect } from 'react-use';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { dateHelpers } from '../../common';\nimport {\n  rhsmConstants,\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\n\n/**\n * ToDo: useGetAppMessages is setup to work with existing Tally response, pre-metrics\n * Banner messages scans the returned Tally listing for the HAS_CLOUDIGRADE_MISMATCH. In the future\n * this may need to be updated to pull from the \"meta\" object part of the Tally response.\n */\n/**\n * Get app messages.\n *\n * @param {object} options\n * @param {Function} options.getMessageReports\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useProductQuery\n * @param {Function} options.useSelectorsResponse\n * @returns {object}\n */\nconst useGetAppMessages = ({\n  getMessageReports = reduxActions.rhsm.getMessageReports,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductQuery();\n  const dispatch = useAliasDispatch();\n  const { error, fulfilled, pending, data } = useAliasSelectorsResponse({\n    id: 'messages',\n    selector: ({ messages }) => messages?.report?.[productId]\n  });\n\n  useShallowCompareEffect(() => {\n    if (productId) {\n      const { startDate, endDate } = dateHelpers.getRangedDateTime('CURRENT');\n      const updatedQuery = {\n        ...query,\n        [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY,\n        [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate.toISOString(),\n        [RHSM_API_QUERY_SET_TYPES.END_DATE]: endDate.toISOString()\n      };\n\n      getMessageReports(productId, updatedQuery)(dispatch);\n    }\n  }, [productId, query]);\n\n  const updatedData = {\n    cloudigradeMismatch: false\n  };\n\n  if (fulfilled) {\n    const { messages = {} } = data || {};\n\n    updatedData.cloudigradeMismatch =\n      messages?.data\n        ?.reverse()\n        ?.find(\n          ({ [rhsmConstants.RHSM_API_RESPONSE_TALLY_META_TYPES.HAS_CLOUDIGRADE_MISMATCH]: mismatch }) =>\n            mismatch === true\n        ) !== undefined;\n  }\n\n  return {\n    error,\n    fulfilled,\n    pending,\n    data: {\n      ...updatedData\n    }\n  };\n};\n\nconst context = {\n  useGetAppMessages\n};\n\nexport { context as default, context, useGetAppMessages };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport { useRouteDetail } from '../../hooks/useRouter';\nimport { ProductViewContext } from './productViewContext';\nimport { PageLayout, PageHeader, PageSection, PageToolbar, PageMessages, PageColumns } from '../pageLayout/pageLayout';\nimport { apiQueries } from '../../redux';\nimport { ConnectedGraphCard as ConnectedGraphCardDeprecated } from '../graphCard/graphCard.deprecated';\nimport { GraphCard } from '../graphCard/graphCard';\nimport { Toolbar } from '../toolbar/toolbar';\nimport { ConnectedInventoryList as ConnectedInventoryListDeprecated } from '../inventoryCard/inventoryList.deprecated';\nimport { InventoryCard } from '../inventoryCard/inventoryCard';\nimport { helpers } from '../../common';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport { SelectPosition } from '../form/select';\nimport { ToolbarFieldGranularity } from '../toolbar/toolbarFieldGranularity';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport { InventoryCardSubscriptions } from '../inventoryCardSubscriptions/inventoryCardSubscriptions';\nimport { RHSM_INTERNAL_PRODUCT_DISPLAY_TYPES as DISPLAY_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * ToDo: base for default product layouts, add additional props for various toolbars\n * Next steps include...\n * Consider being able to pass customized toolbars for GraphCard and the\n * various Inventory displays. Have to evaluate how to handle the global toolbar, one\n * consideration is creating optional widgets with self-contained state update ability\n * based off of context/props/etc.\n *\n * Moving existing products to this layout, or maintaining them \"as is\", then renaming and\n * relocating them to this directory if they've been customized beyond a basic layout.\n */\n/**\n * Display product columns.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Node|boolean} props.toolbarGraph\n * @param {boolean} props.toolbarGraphDescription\n * @param {Function} props.useRouteDetail\n * @returns {Node}\n */\nconst ProductView = ({ t, toolbarGraph, toolbarGraphDescription, useRouteDetail: useAliasRouteDetail }) => {\n  const { productParameter: routeProductLabel, productConfig } = useAliasRouteDetail();\n\n  const renderProduct = config => {\n    const {\n      graphTallyQuery,\n      inventoryHostsQuery,\n      inventorySubscriptionsQuery,\n      query,\n      initialGuestsFilters,\n      initialInventoryFilters,\n      initialInventorySettings,\n      initialSubscriptionsInventoryFilters,\n      productDisplay,\n      productId,\n      viewId\n    } = config;\n\n    if (!productId || !viewId) {\n      return null;\n    }\n\n    const { graphTallyQuery: initialGraphTallyQuery, inventoryHostsQuery: initialInventoryHostsQuery } =\n      apiQueries.parseRhsmQuery(query, { graphTallyQuery, inventoryHostsQuery, inventorySubscriptionsQuery });\n\n    let graphCardTooltip = null;\n\n    if (toolbarGraphDescription) {\n      graphCardTooltip = (\n        <Tooltip\n          content={<p>{t('curiosity-graph.cardHeadingDescription', { context: productId })}</p>}\n          position={TooltipPosition.top}\n          enableFlip={false}\n          distance={5}\n          entryDelay={100}\n          exitDelay={0}\n        >\n          <sup className=\"curiosity-icon__info\">\n            <InfoCircleIcon />\n          </sup>\n        </Tooltip>\n      );\n    }\n\n    const graphCardTitle = (\n      <React.Fragment>\n        {t('curiosity-graph.cardHeading', { context: productId })}\n        {graphCardTooltip}\n      </React.Fragment>\n    );\n\n    return (\n      <ProductViewContext.Provider value={config} key={`product_${productId}`}>\n        <PageMessages>{productDisplay !== DISPLAY_TYPES.HOURLY && <BannerMessages />}</PageMessages>\n        <PageToolbar>\n          <Toolbar />\n        </PageToolbar>\n        <PageSection>\n          {productDisplay !== DISPLAY_TYPES.HOURLY && (\n            <ConnectedGraphCardDeprecated\n              key={`graph_${productId}`}\n              query={initialGraphTallyQuery}\n              productId={productId}\n              viewId={viewId}\n              cardTitle={graphCardTitle}\n            >\n              {(React.isValidElement(toolbarGraph) && toolbarGraph) ||\n                (toolbarGraph !== false && <ToolbarFieldGranularity position={SelectPosition.right} />)}\n            </ConnectedGraphCardDeprecated>\n          )}\n          {productDisplay === DISPLAY_TYPES.HOURLY && <GraphCard />}\n        </PageSection>\n        <PageSection className={(productDisplay === DISPLAY_TYPES.HOURLY && 'curiosity-page-section__tabs') || ''}>\n          <InventoryTabs\n            key={`inventory_${productId}`}\n            productId={productId}\n            isDisabled={\n              (!initialInventoryFilters && !initialSubscriptionsInventoryFilters) || helpers.UI_DISABLED_TABLE\n            }\n          >\n            {!helpers.UI_DISABLED_TABLE_HOSTS && productDisplay !== DISPLAY_TYPES.HOURLY && initialInventoryFilters && (\n              <InventoryTab\n                key={`inventory_hosts_${productId}`}\n                title={t('curiosity-inventory.tabHosts', { context: ['noInstances', productId] })}\n              >\n                <ConnectedInventoryListDeprecated\n                  key={`inv_${productId}`}\n                  filterGuestsData={initialGuestsFilters}\n                  filterInventoryData={initialInventoryFilters}\n                  productId={productId}\n                  settings={initialInventorySettings}\n                  query={initialInventoryHostsQuery}\n                  viewId={viewId}\n                />\n              </InventoryTab>\n            )}\n            {!helpers.UI_DISABLED_TABLE_INSTANCES &&\n              productDisplay === DISPLAY_TYPES.HOURLY &&\n              initialInventoryFilters && (\n                <InventoryTab\n                  key={`inventory_instances_${productId}`}\n                  title={t('curiosity-inventory.tabInstances', { context: ['noInstances', productId] })}\n                >\n                  <InventoryCard />\n                </InventoryTab>\n              )}\n            {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && initialSubscriptionsInventoryFilters && (\n              <InventoryTab\n                key={`inventory_subs_${productId}`}\n                title={t('curiosity-inventory.tabSubscriptions', { context: productId })}\n              >\n                <InventoryCardSubscriptions />\n              </InventoryTab>\n            )}\n          </InventoryTabs>\n        </PageSection>\n      </ProductViewContext.Provider>\n    );\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader productLabel={routeProductLabel}>\n        {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: routeProductLabel })}\n      </PageHeader>\n      <PageColumns>{productConfig.map(config => renderProduct(config))}</PageColumns>\n    </PageLayout>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), toolbarGraphDescription: boolean, useRouteDetail: Function}}\n */\nProductView.propTypes = {\n  t: PropTypes.func,\n  toolbarGraph: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n  toolbarGraphDescription: PropTypes.bool,\n  useRouteDetail: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), toolbarGraphDescription: boolean, useRouteDetail: Function}}\n */\nProductView.defaultProps = {\n  t: translate,\n  toolbarGraph: null,\n  toolbarGraphDescription: false,\n  useRouteDetail\n};\n\nexport { ProductView as default, ProductView };\n"],"names":["BannerMessages","messages","useAliasGetAppMessages","useGetAppMessages","useState","hideAlerts","setHideAlerts","alerts","setAlerts","appMessages","data","useShallowCompareEffect","updatedMessages","length","Object","entries","forEach","key","value","message","find","id","push","map","title","variant","AlertVariant","actionClose","AlertActionCloseButton","onClose","Alert","className","defaultProps","translate","context","helpers","appName","Button","isInline","component","icon","ExternalLinkAltIcon","iconPosition","target","href","getMessageReports","reduxActions","useDispatch","useAliasDispatch","storeHooks","useProduct","useAliasProduct","useProductQuery","useAliasProductQuery","useSelectorsResponse","useAliasSelectorsResponse","productId","query","dispatch","selector","report","error","fulfilled","pending","dateHelpers","startDate","endDate","updatedQuery","RHSM_API_QUERY_SET_TYPES","GRANULARITY_TYPES","toISOString","updatedData","cloudigradeMismatch","undefined","reverse","rhsmConstants","ProductView","t","toolbarGraph","toolbarGraphDescription","useAliasRouteDetail","useRouteDetail","routeProductLabel","productParameter","productConfig","PageLayout","PageHeader","productLabel","PageColumns","config","graphTallyQuery","inventoryHostsQuery","inventorySubscriptionsQuery","initialGuestsFilters","initialInventoryFilters","initialInventorySettings","initialSubscriptionsInventoryFilters","productDisplay","viewId","apiQueries","initialGraphTallyQuery","initialInventoryHostsQuery","graphCardTooltip","Tooltip","content","position","TooltipPosition","enableFlip","distance","entryDelay","exitDelay","graphCardTitle","ProductViewContext","PageMessages","DISPLAY_TYPES","PageToolbar","Toolbar","PageSection","ConnectedGraphCard","cardTitle","React","ToolbarFieldGranularity","SelectPosition","GraphCard","isDisabled","InventoryTab","ConnectedInventoryList","filterGuestsData","filterInventoryData","settings","InventoryCard","InventoryCardSubscriptions","renderProduct"],"sourceRoot":""}