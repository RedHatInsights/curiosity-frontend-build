{"version":3,"file":"js/136.bd6312b75446a693b0a2.js","mappings":"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","sources":["webpack:///./src/components/toolbar/toolbarFieldBillingProvider.js","webpack:///./src/components/toolbar/toolbarFieldCategory.js","webpack:///./src/components/toolbar/toolbarFieldGranularity.js","webpack:///./src/components/toolbar/toolbarFieldRangedMonthly.js","webpack:///./src/components/toolbar/toolbarFieldSelectCategory.js","webpack:///./src/components/toolbar/toolbarFieldSla.js","webpack:///./src/components/toolbar/toolbarFieldUom.js","webpack:///./src/components/toolbar/toolbarFieldUsage.js","webpack:///./src/components/toolbar/toolbarFieldVariant.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport {\n  RHSM_API_QUERY_BILLING_PROVIDER_TYPES as FIELD_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A standalone Billing Provider select filter.\n *\n * @memberof Toolbar\n * @module ToolbarFieldBillingProvider\n */\n\n/**\n * Select field options.\n *\n * @type {Array<{title: React.ReactNode, value: string, selected: boolean}>}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.label', { context: ['billing_provider', (type === '' && 'none') || type] }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update billing provider.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER]: value\n      }\n    ]);\n  };\n};\n\n/**\n * Display a billing provider field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {object} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductQuery\n * @returns {React.ReactNode}\n */\nconst ToolbarFieldBillingProvider = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductQuery: useAliasProductQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER]: updatedValue } = useAliasProductQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'billing_provider' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'billing_provider' })}\n      position={position}\n      data-test=\"toolbarFieldBillingProvider\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldBillingProvider.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldBillingProvider.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductQuery\n};\n\nexport { ToolbarFieldBillingProvider as default, ToolbarFieldBillingProvider, toolbarFieldOptions, useOnSelect };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductGraphConfig, useProductToolbarQuery } from '../productView/productViewContext';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { Select, SelectPosition } from '../form/select';\nimport { graphCardHelpers } from '../graphCard/graphCardHelpers';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A standalone Category select filter.\n *\n * @memberof Toolbar\n * @module ToolbarFieldCategory\n */\n\n/**\n * Generate select field options from nested product graph configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductGraphConfig\n * @returns {Function}\n */\nconst useToolbarFieldOptions = ({ useProductGraphConfig: useAliasProductGraphConfig = useProductGraphConfig } = {}) => {\n  const { filters } = useAliasProductGraphConfig();\n  const options = [];\n\n  if (Array.isArray(filters)) {\n    const updatedFilters = [];\n    const update = ({ metric, query }) => {\n      const category = query?.[RHSM_API_QUERY_SET_TYPES.CATEGORY];\n      const isDuplicate = updatedFilters.find(({ value }) => value === category);\n\n      if (category !== undefined && !isDuplicate) {\n        updatedFilters.push({\n          title: translate('curiosity-toolbar.label', {\n            context: ['category', (category === '' && 'none') || category]\n          }),\n          value: category,\n          metaData: {\n            metric,\n            query\n          },\n          selected: false\n        });\n      }\n    };\n\n    filters?.forEach(({ filters: groupedFilters, ...restFilters }) => {\n      if (Array.isArray(groupedFilters)) {\n        groupedFilters.forEach(group => update(group));\n      } else {\n        update(restFilters);\n      }\n    });\n\n    if (updatedFilters?.length) {\n      options.push(...updatedFilters);\n    }\n  }\n\n  return options;\n};\n\n/**\n * On select update.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId, viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null, selected = {} } = {}) => {\n    let updatedGraphLegendValue = value;\n\n    if (selected?.metaData?.metric) {\n      updatedGraphLegendValue = graphCardHelpers.generateChartIds({\n        metric: selected.metaData.metric,\n        productId,\n        query: { [RHSM_API_QUERY_SET_TYPES.CATEGORY]: value }\n      });\n    }\n\n    dispatch([\n      {\n        type: reduxTypes.graph.SET_GRAPH_LEGEND,\n        id: `${viewId}-inverted`,\n        value: updatedGraphLegendValue\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY,\n        viewId,\n        filter: RHSM_API_QUERY_SET_TYPES.CATEGORY,\n        value\n      }\n    ]);\n  };\n};\n\n/**\n * Display a category field with generated options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductToolbarQuery\n * @param {Function} props.useToolbarFieldOptions\n * @returns {React.ReactNode}\n */\nconst ToolbarFieldCategory = ({\n  isFilter,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductToolbarQuery: useAliasProductToolbarQuery,\n  useToolbarFieldOptions: useAliasToolbarFieldOptions\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.CATEGORY]: updatedValue } = useAliasProductToolbarQuery();\n  const onSelect = useAliasOnSelect();\n  const options = useAliasToolbarFieldOptions();\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'category'] })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'category'] })}\n      position={position}\n      // variant={SelectVariant.checkbox}\n      data-test=\"toolbarFieldCategory\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, useProductToolbarQuery: Function, isFilter: boolean,\n *     position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldCategory.propTypes = {\n  isFilter: PropTypes.bool,\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductToolbarQuery: PropTypes.func,\n  useToolbarFieldOptions: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: translate, useProductToolbarQuery: Function, isFilter: boolean,\n *     position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldCategory.defaultProps = {\n  isFilter: false,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductToolbarQuery,\n  useToolbarFieldOptions\n};\n\nexport { ToolbarFieldCategory as default, ToolbarFieldCategory, useOnSelect, useToolbarFieldOptions };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport {\n  RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A standalone Granularity select filter.\n *\n * @memberof Toolbar\n * @module ToolbarFieldGranularity\n */\n\n/**\n * Select field options.\n *\n * @type {Array<{title: React.ReactNode, value: string, selected: boolean}>}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.label', { context: ['granularity', type] }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update granularity.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    const { startDate, endDate } = dateHelpers.getRangedDateTime(value);\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: value\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.END_DATE]: endDate.toISOString()\n      }\n    ]);\n  };\n};\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {Array} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {React.ReactNode}\n */\nconst ToolbarFieldGranularity = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: updatedValue } = useAliasProductGraphTallyQuery();\n  const onSelect = useAliasOnSelect();\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'granularity' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'granularity' })}\n      position={position}\n      data-test=\"toolbarFieldGranularity\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldGranularity.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldGranularity.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductGraphTallyQuery\n};\n\nexport { ToolbarFieldGranularity as default, ToolbarFieldGranularity, toolbarFieldOptions, useOnSelect };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport {\n  RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A standalone Ranged Monthly Granularity select filter.\n *\n * @memberof Toolbar\n * @module ToolbarFieldRangedMonthly\n */\n\n/**\n * Select field options.\n *\n * @type {Array<{title: React.ReactNode, value: string, selected: boolean}>}\n */\nconst toolbarFieldOptions = dateHelpers.getRangedMonthDateTime().listDateTimeRanges.map(dateTime => ({\n  ...dateTime,\n  selected: false\n}));\n\n/**\n * On select update granularity.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value } = {}) => {\n    const { startDate, endDate } = value;\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: FIELD_TYPES.DAILY\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate?.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.END_DATE]: endDate?.toISOString()\n      }\n    ]);\n  };\n};\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {Array} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {React.ReactNode}\n */\nconst ToolbarFieldRangedMonthly = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: updatedValue } = useAliasProductGraphTallyQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({\n    ...option,\n    selected: option.title === updatedValue || option.value.startDate.toISOString() === updatedValue\n  }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'rangedMonthly' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'rangedMonthly' })}\n      position={position}\n      maxHeight={250}\n      data-test=\"toolbarFieldRangeGranularity\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldRangedMonthly.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array, position: string}}\n */\nToolbarFieldRangedMonthly.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductGraphTallyQuery\n};\n\nexport { ToolbarFieldRangedMonthly as default, ToolbarFieldRangedMonthly, toolbarFieldOptions, useOnSelect };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport { useShallowCompareEffect } from 'react-use';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductToolbarConfig } from '../productView/productViewContext';\nimport { Select } from '../form/select';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\nimport {\n  ToolbarFieldBillingProvider,\n  toolbarFieldOptions as billingProviderOptions\n} from './toolbarFieldBillingProvider';\nimport { ToolbarFieldCategory } from './toolbarFieldCategory';\nimport { ToolbarFieldGranularity, toolbarFieldOptions as granularityOptions } from './toolbarFieldGranularity';\nimport { ToolbarFieldRangedMonthly, toolbarFieldOptions as rangedMonthlyOptions } from './toolbarFieldRangedMonthly';\nimport { ToolbarFieldSla, toolbarFieldOptions as slaOptions } from './toolbarFieldSla';\nimport { ToolbarFieldUom, toolbarFieldOptions as uomOptions } from './toolbarFieldUom';\nimport { ToolbarFieldUsage, toolbarFieldOptions as usageOptions } from './toolbarFieldUsage';\nimport { ToolbarFieldVariant } from './toolbarFieldVariant';\n\n/**\n * @memberof Toolbar\n * @module ToolbarFieldSelectCategory\n */\n\n/**\n * Select field options. Use function instead of arrow func to help with component\n * display name during testing.\n *\n * @type {Array<{title: React.ReactNode, value: string, selected: boolean}>}\n */\nconst toolbarFieldOptions = [\n  {\n    title: translate('curiosity-toolbar.label', { context: ['filter', RHSM_API_QUERY_SET_TYPES.GRANULARITY] }),\n    value: RHSM_API_QUERY_SET_TYPES.GRANULARITY,\n    component: function Granularity(props) {\n      return <ToolbarFieldGranularity key=\"selectCategory_granularity\" {...props} />;\n    },\n    options: granularityOptions,\n    isClearable: false\n  },\n  {\n    title: translate('curiosity-toolbar.label', { context: ['filter', 'rangedMonthly'] }),\n    value: 'rangedMonthly',\n    component: function RangedMonthly(props) {\n      return <ToolbarFieldRangedMonthly key=\"selectCategory_rangedMonthly\" {...props} />;\n    },\n    options: rangedMonthlyOptions,\n    isClearable: false\n  },\n  {\n    title: translate('curiosity-toolbar.label', { context: ['filter', RHSM_API_QUERY_SET_TYPES.UOM] }),\n    value: RHSM_API_QUERY_SET_TYPES.UOM,\n    component: function Uom(props) {\n      return <ToolbarFieldUom key=\"selectCategory_uom\" {...props} />;\n    },\n    options: uomOptions,\n    isClearable: false\n  },\n  {\n    title: translate('curiosity-toolbar.label', { context: ['filter', RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER] }),\n    value: RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER,\n    component: function BillingProvider(props) {\n      return <ToolbarFieldBillingProvider key=\"selectCategory_billingProvider\" {...props} />;\n    },\n    options: billingProviderOptions,\n    isClearable: true\n  },\n  {\n    title: translate('curiosity-toolbar.label', { context: ['filter', RHSM_API_QUERY_SET_TYPES.SLA] }),\n    value: RHSM_API_QUERY_SET_TYPES.SLA,\n    component: function Sla(props) {\n      return <ToolbarFieldSla key=\"selectCategory_sla\" {...props} />;\n    },\n    options: slaOptions,\n    isClearable: true\n  },\n  {\n    title: translate('curiosity-toolbar.label', { context: ['filter', RHSM_API_QUERY_SET_TYPES.USAGE] }),\n    value: RHSM_API_QUERY_SET_TYPES.USAGE,\n    component: function Usage(props) {\n      return <ToolbarFieldUsage key=\"selectCategory_usage\" {...props} />;\n    },\n    options: usageOptions,\n    isClearable: true\n  },\n  {\n    title: translate('curiosity-toolbar.label', { context: ['filter', RHSM_API_QUERY_SET_TYPES.CATEGORY] }),\n    value: RHSM_API_QUERY_SET_TYPES.CATEGORY,\n    component: function Variant(props) {\n      return <ToolbarFieldCategory key=\"selectCategory_category\" {...props} />;\n    },\n    options: [],\n    isClearable: true\n  },\n  {\n    title: translate('curiosity-toolbar.label', { context: ['filter', RHSM_API_QUERY_SET_TYPES.VARIANT] }),\n    value: RHSM_API_QUERY_SET_TYPES.VARIANT,\n    component: function Variant(props) {\n      return <ToolbarFieldVariant key=\"selectCategory_variant\" {...props} />;\n    },\n    options: [],\n    isClearable: true\n  }\n].map(option => ({\n  ...option,\n  selected: false\n}));\n\n/**\n * On select update category.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.toolbar.SET_FILTER_TYPE,\n        viewId,\n        currentFilter: value\n      }\n    ]);\n  };\n};\n\n/**\n * Return filtered category options, current, and initial value.\n *\n * @param {object} options\n * @param {Array} options.categoryOptions\n * @param {Function} options.useProduct\n * @param {Function} options.useProductToolbarConfig\n * @param {Function} options.useSelector\n * @returns {object}\n */\nconst useSelectCategoryOptions = ({\n  categoryOptions = toolbarFieldOptions,\n  useProduct: useAliasProduct = useProduct,\n  useProductToolbarConfig: useAliasProductToolbarConfig = useProductToolbarConfig,\n  useSelector: useAliasSelector = storeHooks.reactRedux.useSelector\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const { currentFilter: updatedValue } = useAliasSelector(({ toolbar }) => toolbar.filters?.[viewId], {});\n  const { filters = [] } = useAliasProductToolbarConfig();\n\n  let initialValue;\n\n  const updatedOptions = filters\n    .filter(({ isItem, isSecondary }) => !isItem && !isSecondary)\n    .map(({ id, selected }) => {\n      const option = categoryOptions.find(({ value }) => id === value);\n\n      if (updatedValue === undefined && selected) {\n        initialValue = option.value;\n      }\n\n      return {\n        ...option,\n        selected: (updatedValue === undefined && selected) || updatedValue === option.value\n      };\n    });\n\n  return {\n    currentCategory: updatedValue,\n    initialCategory: initialValue,\n    options: updatedOptions\n  };\n};\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useSelectCategoryOptions\n * @returns {React.ReactNode}\n */\nconst ToolbarFieldSelectCategory = ({\n  t,\n  useOnSelect: useAliasOnSelect,\n  useSelectCategoryOptions: useAliasSelectCategoryOptions\n}) => {\n  const { currentCategory: updatedValue, initialCategory: initialValue, options } = useAliasSelectCategoryOptions();\n  const onSelect = useAliasOnSelect();\n\n  useShallowCompareEffect(() => {\n    if (initialValue) {\n      onSelect({ value: initialValue });\n    }\n  }, [initialValue, onSelect]);\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: ['filter'] })}\n      onSelect={onSelect}\n      options={options}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder', { context: ['filter'] })}\n      toggleIcon={<FilterIcon />}\n      data-test=\"toolbarFieldCategory\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, useSelectCategoryOptions: Function}}\n */\nToolbarFieldSelectCategory.propTypes = {\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useSelectCategoryOptions: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, useSelectCategoryOptions: Function}}\n */\nToolbarFieldSelectCategory.defaultProps = {\n  t: translate,\n  useOnSelect,\n  useSelectCategoryOptions\n};\n\nexport {\n  ToolbarFieldSelectCategory as default,\n  ToolbarFieldSelectCategory,\n  toolbarFieldOptions,\n  useOnSelect,\n  useSelectCategoryOptions\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_SLA_TYPES as FIELD_TYPES, RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A standalone SLA select filter.\n *\n * @memberof Toolbar\n * @module ToolbarFieldSla\n */\n\n/**\n * Select field options.\n *\n * @type {Array<{title: React.ReactNode, value: string, selected: boolean}>}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.label', { context: ['sla', (type === '' && 'none') || type] }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update sla.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.SLA],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.SLA]: value\n      }\n    ]);\n  };\n};\n\n/**\n * Display a sla field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {object} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductQuery\n * @returns {React.ReactNode}\n */\nconst ToolbarFieldSla = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductQuery: useAliasProductQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.SLA]: updatedValue } = useAliasProductQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'sla' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'sla' })}\n      position={position}\n      data-test=\"toolbarFieldSla\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldSla.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldSla.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductQuery\n};\n\nexport { ToolbarFieldSla as default, ToolbarFieldSla, toolbarFieldOptions, useOnSelect };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_UOM_TYPES as FIELD_TYPES, RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A standalone UOM select filter.\n *\n * @memberof Toolbar\n * @module ToolbarFieldUom\n */\n\n/**\n * Select field options.\n *\n * @type {Array<{title: React.ReactNode, value: string, selected: boolean}>}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.label', { context: ['uom', (type === '' && 'none') || type] }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update uom.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) =>\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.UOM],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.UOM]: value\n      }\n    ]);\n};\n\n/**\n * Display a unit of measure (uom) field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {Array} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductQuery\n * @returns {React.ReactNode}\n */\nconst ToolbarFieldUom = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductQuery: useAliasProductQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.UOM]: updatedValue } = useAliasProductQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'uom' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'uom' })}\n      position={position}\n      data-test=\"toolbarFieldUom\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldUom.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldUom.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductQuery\n};\n\nexport { ToolbarFieldUom as default, ToolbarFieldUom, toolbarFieldOptions, useOnSelect };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_USAGE_TYPES as FIELD_TYPES, RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A standalone Usage select filter.\n *\n * @memberof Toolbar\n * @module ToolbarFieldUsage\n */\n\n/**\n * Select field options.\n *\n * @type {Array<{title: React.ReactNode, value: string, selected: boolean}>}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.label', { context: ['usage', (type === '' && 'none') || type] }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update usage.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) =>\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_SET_TYPES.USAGE],\n        viewId,\n        [RHSM_API_QUERY_SET_TYPES.USAGE]: value\n      }\n    ]);\n};\n\n/**\n * Display a usage field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {object} props.options\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductQuery\n * @returns {React.ReactNode}\n */\nconst ToolbarFieldUsage = ({\n  isFilter,\n  options,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductQuery: useAliasProductQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.USAGE]: updatedValue } = useAliasProductQuery();\n  const onSelect = useAliasOnSelect();\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'usage' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'usage' })}\n      position={position}\n      data-test=\"toolbarFieldUsage\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\nToolbarFieldUsage.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: Function, isFilter: boolean, options: Array, useProductQuery: Function,\n *     position: string}}\n */\n\nToolbarFieldUsage.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductQuery\n};\n\nexport { ToolbarFieldUsage as default, ToolbarFieldUsage, toolbarFieldOptions, useOnSelect };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductToolbarQuery } from '../productView/productViewContext';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { Select, SelectPosition } from '../form/select';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A standalone Variant select filter.\n *\n * @memberof Toolbar\n * @module ToolbarFieldVariant\n */\n\n/**\n * Generate select field options from config\n *\n * @param {object} options\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useToolbarFieldOptions = ({ useProduct: useAliasProduct = useProduct } = {}) => {\n  const { productVariants } = useAliasProduct();\n  const options = [];\n\n  if (Array.isArray(productVariants)) {\n    options.push(\n      ...productVariants.map(type => ({\n        title: translate('curiosity-toolbar.label', {\n          context: ['variant', (type === '' && 'none') || type]\n        }),\n        value: type,\n        selected: false\n      }))\n    );\n  }\n\n  return options;\n};\n\n/**\n * On select update.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY,\n        viewId,\n        filter: RHSM_API_QUERY_SET_TYPES.VARIANT,\n        value\n      }\n    ]);\n  };\n};\n\n/**\n * Display a variant field with generated options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductToolbarQuery\n * @param {Function} props.useToolbarFieldOptions\n * @returns {React.ReactNode}\n */\nconst ToolbarFieldVariant = ({\n  isFilter,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductToolbarQuery: useAliasProductToolbarQuery,\n  useToolbarFieldOptions: useAliasToolbarFieldOptions\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.VARIANT]: updatedValue } = useAliasProductToolbarQuery();\n  const onSelect = useAliasOnSelect();\n  const options = useAliasToolbarFieldOptions();\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'variant'] })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'variant'] })}\n      position={position}\n      data-test=\"toolbarFieldVariant\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, t: Function, useProductToolbarQuery: Function, isFilter: boolean,\n *     position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldVariant.propTypes = {\n  isFilter: PropTypes.bool,\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductToolbarQuery: PropTypes.func,\n  useToolbarFieldOptions: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, t: translate, useProductToolbarQuery: Function, isFilter: boolean,\n *     position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldVariant.defaultProps = {\n  isFilter: false,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProductToolbarQuery,\n  useToolbarFieldOptions\n};\n\nexport { ToolbarFieldVariant as default, ToolbarFieldVariant, useOnSelect, useToolbarFieldOptions };\n"],"names":["toolbarFieldOptions","Object","values","FIELD_TYPES","map","type","title","translate","context","value","selected","useOnSelect","_ref","arguments","length","undefined","_ref$useDispatch","useDispatch","useAliasDispatch","storeHooks","_ref$useProduct","useProduct","useAliasProduct","_useAliasProduct","viewId","dispatch","_ref2","_ref2$value","reduxTypes","_defineProperty","RHSM_API_QUERY_SET_TYPES","ToolbarFieldBillingProvider","_ref4","isFilter","options","position","t","useAliasOnSelect","updatedValue","useAliasProductQuery","useProductQuery","onSelect","updatedOptions","option","_objectSpread","React","Select","concat","selectedOptions","placeholder","defaultProps","SelectPosition","useToolbarFieldOptions","_ref$useProductGraphC","useProductGraphConfig","useAliasProductGraphConfig","_useAliasProductGraph","filters","Array","isArray","updatedFilters","update","metric","query","category","isDuplicate","find","_ref3","push","metaData","forEach","groupedFilters","restFilters","_objectWithoutProperties","_excluded","group","apply","_ref5","_ref5$useDispatch","_ref5$useProduct","productId","_selected$metaData","_ref6","_ref6$value","_ref6$selected","updatedGraphLegendValue","graphCardHelpers","id","filter","ToolbarFieldCategory","_ref7","useAliasProductToolbarQuery","useProductToolbarQuery","useAliasToolbarFieldOptions","_dateHelpers$getRange","dateHelpers","startDate","endDate","toISOString","ToolbarFieldGranularity","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","listDateTimeRanges","dateTime","ToolbarFieldRangedMonthly","maxHeight","component","props","assign","key","granularityOptions","isClearable","rangedMonthlyOptions","ToolbarFieldUom","uomOptions","billingProviderOptions","ToolbarFieldSla","slaOptions","ToolbarFieldUsage","usageOptions","ToolbarFieldVariant","currentFilter","useSelectCategoryOptions","initialValue","_ref3$categoryOptions","categoryOptions","_ref3$useProduct","_ref3$useProductToolb","useProductToolbarConfig","useAliasProductToolbarConfig","_ref3$useSelector","useSelector","useAliasSelector","_useAliasProduct2","_useAliasSelector","_toolbar$filters","toolbar","_useAliasProductToolb","_useAliasProductToolb2","isItem","isSecondary","currentCategory","initialCategory","ToolbarFieldSelectCategory","_ref8","_useAliasSelectCatego","useAliasSelectCategoryOptions","useShallowCompareEffect","toggleIcon","FilterIcon","productVariants","_toConsumableArray","_ref2$useDispatch","_ref2$useProduct","_ref3$value"],"sourceRoot":""}