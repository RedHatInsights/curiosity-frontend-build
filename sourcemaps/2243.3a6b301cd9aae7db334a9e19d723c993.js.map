{"version":3,"file":"js/2243.6d5be487751bbdd8bb53.js","mappings":"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","sources":["webpack:///./src/components/inventoryCard/inventoryCardHelpers.js"],"sourcesContent":["import React from 'react';\nimport { cellWidth as PfCellWidth, SortByDirection, wrappable } from '@patternfly/react-table';\nimport _camelCase from 'lodash/camelCase';\nimport _isPlainObject from 'lodash/isPlainObject';\nimport { Tooltip } from '../tooltip/tooltip';\nimport { translate } from '../i18n/i18n';\nimport {\n  RHSM_API_QUERY_INVENTORY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * @memberof InventoryCard\n * @module InventoryCardHelpers\n */\n\n/**\n * ToDo: review setting up a transformed cell cache for already transformed cells.\n * - review using a simple state and key memoized component\n * - review using lru cache in a inventoryCardContext custom hook\n */\n\n/**\n * Apply product inventory config properties consistently.\n *\n * @param {Function|string|number} prop\n * @param {object} options\n * @param {Array|*} options.params\n * @returns {React.ReactNode}\n */\nconst applyConfigProperty = (prop, { params = [] } = {}) => {\n  let updatedProp = prop;\n\n  if (typeof prop === 'function') {\n    updatedProp = prop(...((Array.isArray(params) && params) || [params]));\n  }\n\n  if (typeof updatedProp === 'string' || typeof updatedProp === 'number' || React.isValidElement(updatedProp)) {\n    return updatedProp;\n  }\n\n  return undefined;\n};\n\n/**\n * Generate header and row cell configuration from filters.\n *\n * @param {object} params\n * @param {Array<{id: string, isStandalone: boolean, cell:(React.ReactNode|{ title: string }), cellWidth: number,\n *     header:(React.ReactNode|{ title: string }), onSort: Function, showEmptyCell: boolean, sortId: string,\n *     sortActive: boolean, sortDirection: string, transforms: Array}>} params.filters\n * @param {object} params.cellData\n * @param {object} params.meta\n * @param {string} params.productId\n * @param {object} params.session\n * @returns {{bodyCells: Array<{ title: React.ReactNode }>, headerCells: Array<{ title: React.ReactNode }>}}\n */\nconst applyHeaderRowCellFilters = ({ filters = [], cellData = {}, meta = {}, productId, session = {} } = {}) => {\n  const headerCells = [];\n  const bodyCells = [];\n\n  filters.forEach(\n    ({\n      isStandalone,\n      id,\n      cell,\n      cellWidth,\n      header,\n      onSort,\n      showEmptyCell = true,\n      sortId,\n      sortActive,\n      sortDirection,\n      transforms\n    }) => {\n      const headerCellUpdated = {\n        title: translate('curiosity-inventory.header', { context: [id, productId] }),\n        transforms: []\n      };\n      const bodyCellUpdated = { title: '' };\n\n      // set filtered base header and body cells, or if filter doesn't exist skip\n      if (cellData[id]) {\n        headerCellUpdated.title = cellData[id]?.title ?? id;\n        bodyCellUpdated.title = cellData[id]?.value ?? '';\n      } else if (isStandalone === true) {\n        headerCellUpdated.title = '';\n        bodyCellUpdated.title = '';\n      } else {\n        if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n          console.warn(`Warning: Filter \"${id}\" not found in \"table row\" response data.`, cellData);\n        }\n        if (showEmptyCell === false) {\n          return;\n        }\n      }\n\n      // set header cell title\n      if (header) {\n        const updatedHeaderCellTitle = applyConfigProperty(header, {\n          params: [{ ...cellData }, { ...session }, { ...meta }]\n        });\n        if (updatedHeaderCellTitle) {\n          headerCellUpdated.title = updatedHeaderCellTitle;\n        } else if (_isPlainObject(header)) {\n          Object.assign(headerCellUpdated, { ...header });\n        }\n\n        // set header cell tooltip\n        if (header.tooltip && headerCellUpdated.title) {\n          const updatedHeaderCellTooltip = applyConfigProperty(header.tooltip, {\n            params: [{ ...cellData }, { ...session }, { ...meta }]\n          });\n          if (updatedHeaderCellTooltip) {\n            headerCellUpdated.title = <Tooltip content={updatedHeaderCellTooltip}>{headerCellUpdated.title}</Tooltip>;\n          }\n\n          delete headerCellUpdated.tooltip;\n        }\n      }\n\n      // set header cell transforms\n      if (Array.isArray(headerCellUpdated.transforms)) {\n        if (Array.isArray(transforms)) {\n          headerCellUpdated.transforms = headerCellUpdated.transforms.concat([...transforms]);\n        }\n\n        if (typeof cellWidth === 'number') {\n          headerCellUpdated.transforms.push(PfCellWidth(cellWidth));\n        }\n      }\n\n      // set header cell onSort\n      if (typeof onSort === 'function') {\n        headerCellUpdated.onSort = obj => onSort({ ...cellData }, { ...obj, id: sortId || id });\n        headerCellUpdated.sortActive = sortActive;\n        headerCellUpdated.sortDirection = sortDirection;\n      }\n\n      // set body cell title\n      if (cell) {\n        const updatedBodyCellTitle = applyConfigProperty(cell, {\n          params: [{ ...cellData }, { ...session }, { ...meta }]\n        });\n        if (updatedBodyCellTitle) {\n          bodyCellUpdated.title = updatedBodyCellTitle;\n        } else if (_isPlainObject(cell)) {\n          Object.assign(bodyCellUpdated, { ...cell });\n        }\n\n        // set body cell tooltip\n        if (cell.tooltip && bodyCellUpdated.title) {\n          const updatedBodyCellTooltip = applyConfigProperty(cell.tooltip, {\n            params: [{ ...cellData }, { ...session }, { ...meta }]\n          });\n          if (updatedBodyCellTooltip) {\n            bodyCellUpdated.title = <Tooltip content={updatedBodyCellTooltip}>{bodyCellUpdated.title}</Tooltip>;\n          }\n\n          delete bodyCellUpdated.tooltip;\n        }\n      }\n\n      headerCells.push(headerCellUpdated);\n      bodyCells.push(bodyCellUpdated);\n    }\n  );\n\n  return {\n    headerCells,\n    bodyCells\n  };\n};\n\n/**\n * Shallow clone filter, and apply a column sort filter.\n *\n * @param {object} params\n * @param {{onSort: Function, sortActive: boolean, sortDirection: string, isSortDefault: boolean,\n *     sortDefaultInitialDirection: string}} params.filter\n * @param {Function} params.onSort\n * @param {object} params.query\n * @returns {{}}\n */\nconst applySortFilters = ({ filter = {}, onSort, query = {} } = {}) => {\n  const { id, sortId } = filter;\n  const updatedId = sortId || id;\n  const updatedFilter = { ...filter };\n  const hasSort = updatedFilter.onSort || onSort;\n\n  if (!updatedFilter.onSort && onSort) {\n    updatedFilter.onSort = onSort;\n  }\n\n  // set fallback for the active sorted column based on query\n  if (\n    hasSort &&\n    typeof updatedFilter.sortActive !== 'boolean' &&\n    query?.[RHSM_API_QUERY_SET_TYPES.SORT] &&\n    (query?.[RHSM_API_QUERY_SET_TYPES.SORT] === updatedId ||\n      _camelCase(query?.[RHSM_API_QUERY_SET_TYPES.SORT]) === updatedId)\n  ) {\n    updatedFilter.sortActive = true;\n  }\n\n  // set sort direction\n  if (hasSort && !updatedFilter.sortDirection && query?.[RHSM_API_QUERY_SET_TYPES.DIRECTION]) {\n    switch (query?.[RHSM_API_QUERY_SET_TYPES.DIRECTION]) {\n      case SORT_DIRECTION_TYPES.DESCENDING:\n        updatedFilter.sortDirection = SortByDirection.desc;\n        break;\n      default:\n        updatedFilter.sortDirection = SortByDirection.asc;\n        break;\n    }\n  }\n\n  if (\n    hasSort &&\n    !updatedFilter.sortActive &&\n    !query?.[RHSM_API_QUERY_SET_TYPES.SORT] &&\n    updatedFilter.isSortDefault === true\n  ) {\n    updatedFilter.sortActive = true;\n\n    if (updatedFilter.sortDefaultInitialDirection) {\n      updatedFilter.sortDirection = updatedFilter.sortDefaultInitialDirection;\n    }\n  }\n\n  return updatedFilter;\n};\n\n/**\n * Shallow clone and apply a consistent PF \"wrappable\" transformation config allowing column content to wrap.\n *\n * @param {object} params\n * @param {object} params.filter\n * @returns {{}}\n */\nconst applyWrappableFilters = ({ filter = {} } = {}) => {\n  const updatedFilter = { ...filter };\n\n  if (Array.isArray(updatedFilter.transforms)) {\n    updatedFilter.transforms.push(wrappable);\n  } else {\n    updatedFilter.transforms = [wrappable];\n  }\n\n  return updatedFilter;\n};\n\n/**\n * Shallow clone and apply, sequence specific, additional properties to filters.\n *\n * @param {object} params\n * @param {Array<{id: string, cell:*, cellWidth: number, header:*, onSort: Function,\n *     showEmptyCell: boolean, sortId: string, sortActive: boolean,\n *     sortDirection: string, transforms: Array, isSortDefault: boolean,\n *     sortDefaultInitialDirection: string}>} params.filters\n * @param {Function} params.onSort\n * @param {object} params.query\n * @returns {Array}\n */\nconst parseInventoryFilters = ({ filters = [], onSort, query = {} } = {}) =>\n  [...filters].map(filter => {\n    const updatedFilter = { ...filter };\n\n    if (updatedFilter.isSortable) {\n      Object.assign(updatedFilter, applySortFilters({ filter: updatedFilter, onSort, query }));\n    }\n\n    if (updatedFilter.isWrappable) {\n      Object.assign(updatedFilter, applyWrappableFilters({ filter: updatedFilter }));\n    }\n\n    return updatedFilter;\n  });\n\n/**\n * Parse and return formatted/filtered table cells, and apply table filters.\n *\n * @param {object} params\n * @param {Array<{id: string, cell:(React.ReactNode|{ title: string }), cellWidth: number,\n *     header:(React.ReactNode|{ title: string }), onSort: Function, showEmptyCell: boolean,\n *     sortId: string, sortActive: boolean, sortDirection: string,\n *     transforms: Array}>} params.filters\n * @param {object} params.cellData\n * @param {object} params.meta\n * @param {string} params.productId\n * @param {object} params.session\n * @returns {{columnHeaders: Array<{ title: React.ReactNode }>, cells: Array<{ title: React.ReactNode }>, data: {}}}\n */\nconst parseRowCellsListData = ({ filters = [], cellData = {}, meta = {}, productId, session = {} } = {}) => {\n  const updatedColumnHeaders = [];\n  const updatedCells = [];\n  const allCells = {};\n\n  // Apply basic translation and value\n  Object.entries(cellData).forEach(([key, value = '']) => {\n    allCells[key] = {\n      title: translate('curiosity-inventory.header', { context: [key, productId] }),\n      value\n    };\n\n    updatedColumnHeaders.push(allCells[key].title);\n    updatedCells.push(value || '...');\n  });\n\n  // Apply filters to header and cell values\n  if (filters?.length && Object.keys(allCells).length) {\n    updatedColumnHeaders.length = 0;\n    updatedCells.length = 0;\n\n    const { headerCells = [], bodyCells = [] } = applyHeaderRowCellFilters({\n      filters,\n      cellData: allCells,\n      meta,\n      productId,\n      session\n    });\n\n    updatedColumnHeaders.push(...headerCells);\n    updatedCells.push(...bodyCells);\n  }\n\n  return {\n    columnHeaders: updatedColumnHeaders,\n    cells: updatedCells,\n    data: { ...allCells }\n  };\n};\n\nconst inventoryCardHelpers = {\n  applyConfigProperty,\n  applyHeaderRowCellFilters,\n  applySortFilters,\n  applyWrappableFilters,\n  parseInventoryFilters,\n  parseRowCellsListData\n};\n\nexport {\n  inventoryCardHelpers as default,\n  inventoryCardHelpers,\n  applyConfigProperty,\n  applyHeaderRowCellFilters,\n  applySortFilters,\n  applyWrappableFilters,\n  parseInventoryFilters,\n  parseRowCellsListData\n};\n"],"names":["applyConfigProperty","prop","params","arguments","length","undefined","updatedProp","Array","isArray","React","applyHeaderRowCellFilters","filters","cellData","meta","productId","session","headerCells","bodyCells","forEach","_ref","isStandalone","id","cell","cellWidth","header","onSort","showEmptyCell","sortId","sortActive","sortDirection","transforms","headerCellUpdated","title","translate","context","bodyCellUpdated","_cellData$id$title","_cellData$id","_cellData$id$value","_cellData$id2","value","helpers","console","warn","concat","updatedHeaderCellTitle","_isPlainObject","Object","assign","tooltip","updatedHeaderCellTooltip","Tooltip","content","push","PfCellWidth","obj","updatedBodyCellTitle","updatedBodyCellTooltip","applySortFilters","filter","query","updatedId","updatedFilter","hasSort","RHSM_API_QUERY_SET_TYPES","_camelCase","SORT_DIRECTION_TYPES","SortByDirection","isSortDefault","sortDefaultInitialDirection","applyWrappableFilters","wrappable","parseInventoryFilters","map","isSortable","isWrappable","parseRowCellsListData","updatedColumnHeaders","updatedCells","allCells","entries","_ref2","key","keys","columnHeaders","cells","data","inventoryCardHelpers"],"sourceRoot":""}