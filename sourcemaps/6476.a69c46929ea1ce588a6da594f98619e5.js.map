{"version":3,"file":"js/6476.1670343053621.95293a13975a001f4e1a.js","mappings":"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","sources":["webpack:///./src/components/toolbar/toolbar.js","webpack:///./src/components/toolbar/toolbarContext.js","webpack:///./node_modules/fast-shallow-equal/index.js","webpack:///./node_modules/react-use/esm/useCustomCompareEffect.js","webpack:///./node_modules/react-use/esm/useShallowCompareEffect.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Toolbar as PfToolbar,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup\n} from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport { useProductToolbarQuery } from '../productView/productViewContext';\nimport { useToolbarFieldClear, useToolbarFieldClearAll, useToolbarSecondaryFields } from './toolbarContext';\nimport { ToolbarFieldSelectCategory, useSelectCategoryOptions } from './toolbarFieldSelectCategory';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Application filter toolbar.\n *\n * @fires onClearFilter\n * @fires onClearAll\n * @param {object} props\n * @param {boolean} props.hardFilterReset On clearing all fields allow the category to reset as well.\n * @param {boolean} props.isDisabled\n * @param {Function} props.t\n * @param {Function} props.useProductToolbarQuery\n * @param {Function} props.useSelectCategoryOptions\n * @param {Function} props.useToolbarFieldClear\n * @param {Function} props.useToolbarFieldClearAll\n * @param {Function} props.useToolbarSecondaryFields\n * @returns {Node}\n */\nconst Toolbar = ({\n  hardFilterReset,\n  isDisabled,\n  t,\n  useProductToolbarQuery: useAliasProductToolbarQuery,\n  useSelectCategoryOptions: useAliasSelectCategoryOptions,\n  useToolbarFieldClear: useAliasToolbarFieldClear,\n  useToolbarFieldClearAll: useAliasToolbarFieldClearAll,\n  useToolbarSecondaryFields: useAliasToolbarSecondaryFields\n}) => {\n  const toolbarFieldQueries = useAliasProductToolbarQuery();\n  const { currentCategory, options } = useAliasSelectCategoryOptions();\n  const clearField = useAliasToolbarFieldClear();\n  const clearAllFields = useAliasToolbarFieldClearAll();\n  const secondaryFields = useAliasToolbarSecondaryFields();\n\n  if (isDisabled || (!options?.length && !secondaryFields?.length)) {\n    return null;\n  }\n\n  /**\n   * Clear a specific value\n   *\n   * @event onClearFilter\n   * @param {object} params\n   * @param {*} params.value\n   * @returns {void}\n   */\n  const onClearFilter = ({ value }) => clearField(value);\n\n  /**\n   * Clear all active filters.\n   *\n   * @event onClearAll\n   * @returns {void}\n   */\n  const onClearAll = () => clearAllFields(hardFilterReset);\n\n  /**\n   * Set selected options for chip display.\n   *\n   * @param {object} params\n   * @param {*} params.value\n   * @returns {Array}\n   */\n  const setSelectedOptions = ({ value: filterName } = {}) => {\n    const filterValue = toolbarFieldQueries?.[filterName];\n    return (\n      (typeof filterValue === 'string' && [\n        t('curiosity-toolbar.label', { context: [filterName, (filterValue === '' && 'none') || filterValue] })\n      ]) ||\n      []\n    );\n  };\n\n  return (\n    <PfToolbar\n      id=\"curiosity-toolbar\"\n      className=\"curiosity-toolbar pf-m-toggle-group-container ins-c-primary-toolbar\"\n      collapseListedFiltersBreakpoint=\"sm\"\n      clearAllFilters={onClearAll}\n      clearFiltersButtonText={t('curiosity-toolbar.clearFilters')}\n    >\n      <ToolbarContent>\n        <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"md\">\n          <ToolbarGroup variant=\"filter-group\">\n            {options.length > 1 && (\n              <ToolbarItem>\n                <ToolbarFieldSelectCategory />\n              </ToolbarItem>\n            )}\n            {options.map(({ title, value: filterName, component: OptionComponent, isClearable }) => {\n              const chipProps = { categoryName: title };\n\n              if (isClearable !== false) {\n                chipProps.chips = setSelectedOptions({ value: filterName });\n                chipProps.deleteChip = () => onClearFilter({ value: filterName });\n              }\n\n              return (\n                <ToolbarFilter\n                  key={filterName}\n                  showToolbarItem={currentCategory === filterName || options.length === 1}\n                  {...chipProps}\n                >\n                  <OptionComponent isFilter />\n                </ToolbarFilter>\n              );\n            })}\n          </ToolbarGroup>\n        </ToolbarToggleGroup>\n        <ToolbarGroup alignment={{ default: 'alignRight' }}>{secondaryFields}</ToolbarGroup>\n      </ToolbarContent>\n    </PfToolbar>\n  );\n};\n\n/**\n * Prop types\n *\n * @type {{useToolbarFieldClear: Function, t: Function, useSelectCategoryOptions: Function, hardFilterReset: boolean,\n *     useToolbarSecondaryFields: Function, useProductToolbarQuery: Function, isDisabled: boolean,\n *     useToolbarFieldClearAll: Function}}\n */\nToolbar.propTypes = {\n  hardFilterReset: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  t: PropTypes.func,\n  useProductToolbarQuery: PropTypes.func,\n  useSelectCategoryOptions: PropTypes.func,\n  useToolbarFieldClear: PropTypes.func,\n  useToolbarFieldClearAll: PropTypes.func,\n  useToolbarSecondaryFields: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useToolbarFieldClear: Function, t: Function, useSelectCategoryOptions: Function, hardFilterReset: boolean,\n *     useToolbarSecondaryFields: Function, useProductToolbarQuery: Function, isDisabled: boolean,\n *     useToolbarFieldClearAll: Function}}\n */\nToolbar.defaultProps = {\n  hardFilterReset: false,\n  isDisabled: helpers.UI_DISABLED_TOOLBAR,\n  t: translate,\n  useProductToolbarQuery,\n  useSelectCategoryOptions,\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarSecondaryFields\n};\n\nexport { Toolbar as default, Toolbar };\n","import React from 'react';\nimport { ToolbarItem } from '@patternfly/react-core';\nimport { useProductQuery, useProductToolbarConfig } from '../productView/productViewContext';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { useOnSelect as useSelectCategoryOnSelect, toolbarFieldOptions } from './toolbarFieldSelectCategory';\nimport { useOnSelect as useArchitectureOnSelect } from './toolbarFieldArchitecture';\nimport { useOnSelect as useBillingProviderOnSelect } from './toolbarFieldBillingProvider';\nimport { useOnSelect as useSlaOnSelect } from './toolbarFieldSla';\nimport { useOnSelect as useUsageOnSelect } from './toolbarFieldUsage';\nimport { useOnSelect as useVariantOnSelect } from './toolbarFieldVariant';\nimport { SelectPosition } from '../form/select';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Clear a specific toolbar category using a select component's OnSelect hook.\n *\n * @param {object} options\n * @param {Function} options.useArchitectureOnSelect\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @param {Function} options.useVariantOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClear = ({\n  useArchitectureOnSelect: useAliasArchitectureOnSelect = useArchitectureOnSelect,\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect,\n  useVariantOnSelect: useAliasVariantOnSelect = useVariantOnSelect\n} = {}) => {\n  const architectureOnSelect = useAliasArchitectureOnSelect();\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n  const variantOnSelect = useAliasVariantOnSelect();\n\n  return field => {\n    switch (field) {\n      case RHSM_API_QUERY_SET_TYPES.ARCHITECTURE:\n        architectureOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER:\n        billingOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.SLA:\n        slaOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.USAGE:\n        usageOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.VARIANT:\n        variantOnSelect();\n        break;\n      default:\n        break;\n    }\n  };\n};\n\n/**\n * Clear all available toolbar categories.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useArchitectureOnSelect\n * @param {Function} options.useSelectCategoryOnSelect\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @param {Function} options.useVariantOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClearAll = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useArchitectureOnSelect: useAliasArchitectureOnSelect = useArchitectureOnSelect,\n  useSelectCategoryOnSelect: useAliasSelectCategoryOnSelect = useSelectCategoryOnSelect,\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect,\n  useVariantOnSelect: useAliasVariantOnSelect = useVariantOnSelect\n} = {}) => {\n  const {\n    [RHSM_API_QUERY_SET_TYPES.ARCHITECTURE]: architecture,\n    [RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER]: billingProvider,\n    [RHSM_API_QUERY_SET_TYPES.SLA]: sla,\n    [RHSM_API_QUERY_SET_TYPES.USAGE]: usage,\n    [RHSM_API_QUERY_SET_TYPES.VARIANT]: variant\n  } = useAliasProductQuery();\n  const architectureOnSelect = useAliasArchitectureOnSelect();\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n  const selectCategoryOnSelect = useAliasSelectCategoryOnSelect();\n  const variantOnSelect = useAliasVariantOnSelect();\n\n  return hardFilterReset => {\n    if (typeof architecture === 'string') {\n      architectureOnSelect();\n    }\n\n    if (typeof billingProvider === 'string') {\n      billingOnSelect();\n    }\n\n    if (typeof sla === 'string') {\n      slaOnSelect();\n    }\n\n    if (typeof usage === 'string') {\n      usageOnSelect();\n    }\n\n    if (typeof variant === 'string') {\n      variantOnSelect();\n    }\n\n    if (hardFilterReset) {\n      selectCategoryOnSelect();\n    }\n  };\n};\n\n/**\n * Return list of secondary toolbar fields for display.\n *\n * @param {object} options\n * @param {Array} options.categoryOptions\n * @param {Function} options.useProductToolbarConfig\n * @returns {Array}\n */\nconst useToolbarSecondaryFields = ({\n  categoryOptions = toolbarFieldOptions,\n  useProductToolbarConfig: useAliasProductToolbarConfig = useProductToolbarConfig\n} = {}) => {\n  const { secondaryFilters = [] } = useAliasProductToolbarConfig();\n\n  return secondaryFilters.map(({ id, content }) => {\n    const option = categoryOptions.find(({ value: categoryOptionValue }) => id === categoryOptionValue);\n    const { component: OptionComponent } = option || {};\n\n    return (\n      (OptionComponent && (\n        <ToolbarItem key={`option-${id}`}>\n          <OptionComponent isFilter={false} position={SelectPosition.right} />\n        </ToolbarItem>\n      )) || <ToolbarItem key={helpers.generateId()}>{content}</ToolbarItem> ||\n      null\n    );\n  });\n};\n\nconst context = {\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarSecondaryFields\n};\n\nexport { context as default, context, useToolbarFieldClear, useToolbarFieldClearAll, useToolbarSecondaryFields };\n","var keyList = Object.keys;\n\nexports.equal = function equal (a, b) {\n  if (a === b) return true;\n  if (!(a instanceof Object) || !(b instanceof Object)) return false;\n\n  var keys = keyList(a);\n  var length = keys.length;\n\n  for (var i = 0; i < length; i++)\n    if (!(keys[i] in b)) return false;\n\n  for (var i = 0; i < length; i++)\n    if (a[keys[i]] !== b[keys[i]]) return false;\n\n  return length === keyList(b).length;\n};\n","import { useEffect, useRef } from 'react';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar useCustomCompareEffect = function (effect, deps, depsEqual) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useCustomCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useCustomCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n        if (typeof depsEqual !== 'function') {\n            console.warn('`useCustomCompareEffect` should be used with depsEqual callback for comparing deps list');\n        }\n    }\n    var ref = useRef(undefined);\n    if (!ref.current || !depsEqual(deps, ref.current)) {\n        ref.current = deps;\n    }\n    useEffect(effect, ref.current);\n};\nexport default useCustomCompareEffect;\n","import { equal as isShallowEqual } from 'fast-shallow-equal';\nimport useCustomCompareEffect from './useCustomCompareEffect';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar shallowEqualDepsList = function (prevDeps, nextDeps) {\n    return prevDeps.every(function (dep, index) { return isShallowEqual(dep, nextDeps[index]); });\n};\nvar useShallowCompareEffect = function (effect, deps) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useShallowCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useShallowCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n    }\n    useCustomCompareEffect(effect, deps, shallowEqualDepsList);\n};\nexport default useShallowCompareEffect;\n"],"names":["Toolbar","hardFilterReset","isDisabled","t","useAliasProductToolbarQuery","useProductToolbarQuery","useAliasSelectCategoryOptions","useSelectCategoryOptions","useAliasToolbarFieldClear","useToolbarFieldClear","useAliasToolbarFieldClearAll","useToolbarFieldClearAll","useAliasToolbarSecondaryFields","useToolbarSecondaryFields","toolbarFieldQueries","currentCategory","options","clearField","clearAllFields","secondaryFields","length","id","className","collapseListedFiltersBreakpoint","clearAllFilters","clearFiltersButtonText","ToolbarContent","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarGroup","variant","ToolbarItem","ToolbarFieldSelectCategory","map","title","filterName","value","OptionComponent","component","chipProps","categoryName","isClearable","chips","filterValue","context","setSelectedOptions","deleteChip","ToolbarFilter","key","showToolbarItem","isFilter","alignment","default","defaultProps","helpers","translate","useArchitectureOnSelect","useAliasArchitectureOnSelect","useBillingProviderOnSelect","useAliasBillingProviderOnSelect","useSlaOnSelect","useAliasSlaOnSelect","useUsageOnSelect","useAliasUsageOnSelect","useVariantOnSelect","useAliasVariantOnSelect","architectureOnSelect","billingOnSelect","slaOnSelect","usageOnSelect","variantOnSelect","field","RHSM_API_QUERY_SET_TYPES","useProductQuery","useAliasProductQuery","useSelectCategoryOnSelect","useAliasSelectCategoryOnSelect","architecture","billingProvider","sla","usage","selectCategoryOnSelect","categoryOptions","toolbarFieldOptions","useProductToolbarConfig","useAliasProductToolbarConfig","secondaryFilters","content","find","categoryOptionValue","position","SelectPosition","keyList","Object","keys","exports","a","b","i","effect","deps","depsEqual","ref","useRef","undefined","current","useEffect","shallowEqualDepsList","prevDeps","nextDeps","every","dep","index"],"sourceRoot":""}