{"version":3,"file":"js/939.1670343053621.95293a13975a001f4e1a.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardChartTitleTooltip.js","webpack:///./src/components/graphCard/graphCardContext.js","webpack:///./node_modules/fast-shallow-equal/index.js","webpack:///./node_modules/react-use/esm/useCustomCompareEffect.js","webpack:///./node_modules/react-use/esm/useShallowCompareEffect.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { useProduct } from '../productView/productViewContext';\nimport { useGraphCardContext } from './graphCardContext';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Graph card title tooltip.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useProduct\n * @returns {Node}\n */\nconst GraphCardChartTitleTooltip = ({\n  t,\n  useGraphCardContext: useAliasGraphCardContext,\n  useProduct: useAliasProduct\n}) => {\n  const { productId } = useAliasProduct();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { isCardTitleDescription, isStandalone, metric } = settings;\n\n  if (!isCardTitleDescription && !metric?.isCardTitleDescription) {\n    return null;\n  }\n\n  return (\n    <Tooltip\n      content={\n        <p>{t(`curiosity-graph.cardHeadingDescription`, { context: (isStandalone && metric?.id) || productId })}</p>\n      }\n      position={TooltipPosition.top}\n      enableFlip={false}\n      distance={5}\n      entryDelay={100}\n      exitDelay={0}\n    >\n      <span className=\"curiosity-icon__question\">\n        <OutlinedQuestionCircleIcon />\n      </span>\n    </Tooltip>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, t: Function}}\n */\nGraphCardChartTitleTooltip.propTypes = {\n  t: PropTypes.func,\n  useProduct: PropTypes.func,\n  useGraphCardContext: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, t: Function}}\n */\nGraphCardChartTitleTooltip.defaultProps = {\n  t: translate,\n  useProduct,\n  useGraphCardContext\n};\n\nexport { GraphCardChartTitleTooltip as default, GraphCardChartTitleTooltip };\n","import React, { useContext } from 'react';\nimport { useShallowCompareEffect } from 'react-use';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Chart context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{ settings: { isStandalone: false, metrics: [], metric: undefined } }, helpers.noop];\n\nconst GraphCardContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated graph card context.\n *\n * @returns {React.Context<{}>}\n */\nconst useGraphCardContext = () => useContext(GraphCardContext);\n\n/**\n * Transform multiple metrics from store for chart/graph consumption.\n *\n * @param {object} options\n * @param {Function} options.useGraphCardContext\n * @param {Function} options.useSelectorsResponse\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: *[], errorId: {},\n *     id: {}, list: *[]}, cancelled: boolean, dataSets: unknown[], message: null, error: boolean}}\n */\nconst useMetricsSelector = ({\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsAllSettledResponse\n} = {}) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  const {\n    error,\n    fulfilled,\n    pending,\n    data = [],\n    ...response\n  } = useAliasSelectorsResponse(\n    metrics.map(\n      ({ id: metricId, isCapacity }) =>\n        ({ graph }) =>\n          isCapacity ? graph.capacity?.[metricId] : graph.tally?.[metricId]\n    )\n  );\n\n  /**\n   * Apply graph config settings to metric data.\n   */\n  const dataById = {};\n  const dataByList = data?.map((metricData, index) => {\n    const updatedMetricData = {\n      ...metrics[index],\n      ...metricData\n    };\n    dataById[metrics[index].id] = updatedMetricData;\n    return updatedMetricData;\n  });\n\n  return {\n    ...response,\n    data: dataById,\n    dataSets: dataByList,\n    error,\n    fulfilled,\n    pending\n  };\n};\n\n/**\n * Get graph metrics from Tally or Capacity.\n *\n * @param {object} params\n * @param {Function} params.getGraphMetrics\n * @param {Function} params.useDispatch\n * @param {Function} params.useGraphCardContext\n * @param {Function} params.useMetricsSelector\n * @param {Function} params.useProduct\n * @param {Function} params.useProductGraphTallyQuery\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: *[], errorId: {},\n *     id: {}, list: *[]}, cancelled: boolean, dataSets: *[], message: null, error: boolean}}\n */\nconst useGetMetrics = ({\n  getGraphMetrics = reduxActions.rhsm.getGraphMetrics,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector = useMetricsSelector,\n  useProduct: useAliasProduct = useProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductGraphTallyQuery();\n  const dispatch = useAliasDispatch();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  const { pending, ...response } = useAliasMetricsSelector();\n\n  useShallowCompareEffect(() => {\n    if (!pending) {\n      const updatedMetrics = metrics.map(({ metric: metricId, isCapacity, query: metricQuery }) => ({\n        id: productId,\n        metric: metricId,\n        isCapacity,\n        query: metricQuery\n      }));\n      getGraphMetrics(updatedMetrics, query)(dispatch);\n    }\n  }, [metrics, productId, query]);\n\n  return {\n    ...response,\n    pending\n  };\n};\n\nconst context = {\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardContext,\n  useMetricsSelector\n};\n\nexport {\n  context as default,\n  context,\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardContext,\n  useMetricsSelector\n};\n","var keyList = Object.keys;\n\nexports.equal = function equal (a, b) {\n  if (a === b) return true;\n  if (!(a instanceof Object) || !(b instanceof Object)) return false;\n\n  var keys = keyList(a);\n  var length = keys.length;\n\n  for (var i = 0; i < length; i++)\n    if (!(keys[i] in b)) return false;\n\n  for (var i = 0; i < length; i++)\n    if (a[keys[i]] !== b[keys[i]]) return false;\n\n  return length === keyList(b).length;\n};\n","import { useEffect, useRef } from 'react';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar useCustomCompareEffect = function (effect, deps, depsEqual) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useCustomCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useCustomCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n        if (typeof depsEqual !== 'function') {\n            console.warn('`useCustomCompareEffect` should be used with depsEqual callback for comparing deps list');\n        }\n    }\n    var ref = useRef(undefined);\n    if (!ref.current || !depsEqual(deps, ref.current)) {\n        ref.current = deps;\n    }\n    useEffect(effect, ref.current);\n};\nexport default useCustomCompareEffect;\n","import { equal as isShallowEqual } from 'fast-shallow-equal';\nimport useCustomCompareEffect from './useCustomCompareEffect';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar shallowEqualDepsList = function (prevDeps, nextDeps) {\n    return prevDeps.every(function (dep, index) { return isShallowEqual(dep, nextDeps[index]); });\n};\nvar useShallowCompareEffect = function (effect, deps) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useShallowCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useShallowCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n    }\n    useCustomCompareEffect(effect, deps, shallowEqualDepsList);\n};\nexport default useShallowCompareEffect;\n"],"names":["GraphCardChartTitleTooltip","t","useAliasGraphCardContext","useGraphCardContext","productId","useAliasProduct","useProduct","settings","isCardTitleDescription","isStandalone","metric","Tooltip","content","context","id","position","TooltipPosition","enableFlip","distance","entryDelay","exitDelay","className","OutlinedQuestionCircleIcon","defaultProps","translate","DEFAULT_CONTEXT","metrics","undefined","helpers","GraphCardContext","React","useContext","useMetricsSelector","useSelectorsResponse","useAliasSelectorsResponse","storeHooks","map","metricId","isCapacity","graph","capacity","tally","error","fulfilled","pending","data","response","dataById","dataByList","metricData","index","updatedMetricData","dataSets","useGetMetrics","getGraphMetrics","reduxActions","useDispatch","useAliasDispatch","useAliasMetricsSelector","useProductGraphTallyQuery","useAliasProductGraphTallyQuery","query","dispatch","useShallowCompareEffect","updatedMetrics","metricQuery","keyList","Object","keys","exports","a","b","length","i","effect","deps","depsEqual","ref","useRef","current","useEffect","shallowEqualDepsList","prevDeps","nextDeps","every","dep"],"sourceRoot":""}