{"version":3,"file":"js/5394.1668717095700.e1a3439d2bf484368a21.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardContext.js","webpack:///./src/components/productView/productViewContext.js","webpack:///./node_modules/fast-shallow-equal/index.js","webpack:///./node_modules/react-use/esm/useShallowCompareEffect.js","webpack:///./node_modules/react-use/esm/useCustomCompareEffect.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport { useShallowCompareEffect } from 'react-use';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Chart context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{ settings: { isStandalone: false, metrics: [], metric: undefined } }, helpers.noop];\n\nconst GraphCardContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated graph card context.\n *\n * @returns {React.Context<{}>}\n */\nconst useGraphCardContext = () => useContext(GraphCardContext);\n\n/**\n * Transform multiple metrics from store for chart/graph consumption.\n *\n * @param {object} options\n * @param {Function} options.useGraphCardContext\n * @param {Function} options.useSelectorsResponse\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: *[], errorId: {},\n *     id: {}, list: *[]}, cancelled: boolean, dataSets: unknown[], message: null, error: boolean}}\n */\nconst useMetricsSelector = ({\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsAllSettledResponse\n} = {}) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  const {\n    error,\n    fulfilled,\n    pending,\n    data = [],\n    ...response\n  } = useAliasSelectorsResponse(\n    metrics.map(\n      ({ id: metricId, isCapacity }) =>\n        ({ graph }) =>\n          isCapacity ? graph.capacity?.[metricId] : graph.tally?.[metricId]\n    )\n  );\n\n  /**\n   * Apply graph config settings to metric data.\n   */\n  const dataById = {};\n  const dataByList = data?.map((metricData, index) => {\n    const updatedMetricData = {\n      ...metrics[index],\n      ...metricData\n    };\n    dataById[metrics[index].id] = updatedMetricData;\n    return updatedMetricData;\n  });\n\n  return {\n    ...response,\n    data: dataById,\n    dataSets: dataByList,\n    error,\n    fulfilled,\n    pending\n  };\n};\n\n/**\n * Get graph metrics from Tally or Capacity.\n *\n * @param {object} params\n * @param {Function} params.getGraphMetrics\n * @param {Function} params.useDispatch\n * @param {Function} params.useGraphCardContext\n * @param {Function} params.useMetricsSelector\n * @param {Function} params.useProduct\n * @param {Function} params.useProductGraphTallyQuery\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: *[], errorId: {},\n *     id: {}, list: *[]}, cancelled: boolean, dataSets: *[], message: null, error: boolean}}\n */\nconst useGetMetrics = ({\n  getGraphMetrics = reduxActions.rhsm.getGraphMetrics,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector = useMetricsSelector,\n  useProduct: useAliasProduct = useProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductGraphTallyQuery();\n  const dispatch = useAliasDispatch();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  const response = useAliasMetricsSelector();\n\n  useShallowCompareEffect(() => {\n    const updatedMetrics = metrics.map(({ metric: metricId, isCapacity, query: metricQuery }) => ({\n      id: productId,\n      metric: metricId,\n      isCapacity,\n      query: metricQuery\n    }));\n    getGraphMetrics(updatedMetrics, query)(dispatch);\n  }, [dispatch, getGraphMetrics, metrics, productId, query]);\n\n  return response;\n};\n\nconst context = {\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardContext,\n  useMetricsSelector\n};\n\nexport {\n  context as default,\n  context,\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardContext,\n  useMetricsSelector\n};\n","import React, { useCallback, useContext } from 'react';\nimport { reduxHelpers } from '../../redux/common';\nimport { storeHooks } from '../../redux/hooks';\nimport { RHSM_API_QUERY_TYPES, rhsmApiTypes } from '../../types/rhsmApiTypes';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Route context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{}, helpers.noop];\n\nconst ProductViewContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated product view context.\n *\n * @returns {React.Context<{}>}\n */\nconst useProductViewContext = () => useContext(ProductViewContext);\n\n/**\n * Return a query object from initial product config and Redux store.\n *\n * @param {string} queryType An identifier used to pull from both config and Redux, they should named the same.\n * @param {object} options\n * @param {string} options.overrideId A custom identifier, used for scenarios like the Guest inventory IDs\n * @param {object} options.useProductViewContext\n * @returns {object}\n */\nconst useProductQueryFactory = (\n  queryType,\n  { overrideId, useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}\n) => {\n  const { [queryType]: initialQuery, productId, viewId } = useAliasProductViewContext();\n  const queryOverride = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[overrideId], undefined);\n  const queryProduct = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[productId], undefined);\n  const queryView = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[viewId], undefined);\n\n  return {\n    ...initialQuery,\n    ...queryOverride,\n    ...queryProduct,\n    ...queryView\n  };\n};\n\n/**\n * Return a base product query\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductQuery = ({ queryType = 'query', options } = {}) => useProductQueryFactory(queryType, options);\n\n/**\n * Return the graph query based off of tally and capacity.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductGraphTallyQuery = ({\n  queryType = 'graphTallyQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_REPORT_CAPACITY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return the inventory query for guests. Use fallback/defaults for guests offset, limit.\n *\n * @param {object} options\n * @param {number} options.defaultLimit\n * @param {number} options.defaultOffset\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryGuestsQuery = ({\n  defaultLimit = 100,\n  defaultOffset = 0,\n  queryType = 'inventoryGuestsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_GUESTS_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      [RHSM_API_QUERY_SET_TYPES.LIMIT]: defaultLimit,\n      [RHSM_API_QUERY_SET_TYPES.OFFSET]: defaultOffset,\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for hosts.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryHostsQuery = ({\n  queryType = 'inventoryHostsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for subscriptions.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventorySubscriptionsQuery = ({\n  queryType = 'inventorySubscriptionsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Get a filtered product configuration context.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductViewContext\n * @returns {object}\n */\nconst useProductContext = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductViewContext: useAliasProductViewContext = useProductViewContext\n} = {}) => {\n  const { [RHSM_API_QUERY_TYPES.UOM]: uomFilter } = useAliasProductQuery();\n  const {\n    initialGraphFilters = [],\n    initialInventoryFilters = [],\n    initialSubscriptionsInventoryFilters = [],\n    productContextFilterUom,\n    ...config\n  } = useAliasProductViewContext();\n\n  const applyUomFilter = useCallback(() => {\n    if (productContextFilterUom === true) {\n      const filterFilters = ({ id, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(uomFilter, 'i').test(id);\n      };\n\n      return {\n        ...config,\n        initialGraphFilters: initialGraphFilters.filter(filterFilters),\n        initialInventoryFilters: initialInventoryFilters.filter(filterFilters),\n        initialSubscriptionsInventoryFilters: initialSubscriptionsInventoryFilters.filter(filterFilters)\n      };\n    }\n\n    return {\n      ...config,\n      initialGraphFilters,\n      initialInventoryFilters,\n      initialSubscriptionsInventoryFilters\n    };\n  }, [\n    config,\n    initialGraphFilters,\n    initialInventoryFilters,\n    initialSubscriptionsInventoryFilters,\n    productContextFilterUom,\n    uomFilter\n  ]);\n\n  return applyUomFilter();\n};\n\n/**\n * Return product identifiers.\n *\n * @param {object} options\n * @param {Function} options.useProductViewContext\n * @returns {{productLabel: string, viewId: string, productId: string, productGroup: string}}\n */\nconst useProduct = ({ useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}) => {\n  const { productGroup, productId, productLabel, viewId } = useAliasProductViewContext();\n  return {\n    productGroup,\n    productId,\n    productLabel,\n    viewId\n  };\n};\n\n/**\n * Return graph configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductGraphConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialGraphFilters, initialGraphSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGraphFilters,\n    settings: initialGraphSettings\n  };\n};\n\n/**\n * Return guests inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryGuestsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { inventoryGuestsQuery = {}, initialGuestsFilters, initialGuestsSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGuestsFilters,\n    initialQuery: inventoryGuestsQuery,\n    settings: initialGuestsSettings\n  };\n};\n\n/**\n * Return hosts inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryHostsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialInventoryFilters, initialInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialInventoryFilters,\n    settings: initialInventorySettings\n  };\n};\n\n/**\n * Return subscriptions inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventorySubscriptionsConfig = ({\n  useProductContext: useAliasProductContext = useProductContext\n} = {}) => {\n  const { initialSubscriptionsInventoryFilters, initialSubscriptionsInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialSubscriptionsInventoryFilters,\n    settings: initialSubscriptionsInventorySettings\n  };\n};\n\n/**\n * Return primary toolbar configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductToolbarConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const {\n    initialToolbarFilters,\n    initialToolbarSettings = {},\n    initialSecondaryToolbarFilters\n  } = useAliasProductContext();\n  return {\n    filters: initialToolbarFilters,\n    secondaryFilters: initialSecondaryToolbarFilters,\n    settings: initialToolbarSettings\n  };\n};\n\nconst context = {\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useQuery: useProductQuery,\n  useQueryFactory: useProductQueryFactory,\n  useGraphTallyQuery: useProductGraphTallyQuery,\n  useInventoryGuestsQuery: useProductInventoryGuestsQuery,\n  useInventoryHostsQuery: useProductInventoryHostsQuery,\n  useInventorySubscriptionsQuery: useProductInventorySubscriptionsQuery,\n  useProduct,\n  useGraphConfig: useProductGraphConfig,\n  useInventoryGuestsConfig: useProductInventoryGuestsConfig,\n  useInventoryHostsConfig: useProductInventoryHostsConfig,\n  useInventorySubscriptionsConfig: useProductInventorySubscriptionsConfig,\n  useToolbarConfig: useProductToolbarConfig\n};\n\nexport {\n  context as default,\n  context,\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useProductQuery,\n  useProductQueryFactory,\n  useProductGraphTallyQuery,\n  useProductInventoryGuestsQuery,\n  useProductInventoryHostsQuery,\n  useProductInventorySubscriptionsQuery,\n  useProduct,\n  useProductGraphConfig,\n  useProductInventoryGuestsConfig,\n  useProductInventoryHostsConfig,\n  useProductInventorySubscriptionsConfig,\n  useProductToolbarConfig\n};\n","var keyList = Object.keys;\n\nexports.equal = function equal (a, b) {\n  if (a === b) return true;\n  if (!(a instanceof Object) || !(b instanceof Object)) return false;\n\n  var keys = keyList(a);\n  var length = keys.length;\n\n  for (var i = 0; i < length; i++)\n    if (!(keys[i] in b)) return false;\n\n  for (var i = 0; i < length; i++)\n    if (a[keys[i]] !== b[keys[i]]) return false;\n\n  return length === keyList(b).length;\n};\n","import { equal as isShallowEqual } from 'fast-shallow-equal';\nimport useCustomCompareEffect from './useCustomCompareEffect';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar shallowEqualDepsList = function (prevDeps, nextDeps) {\n    return prevDeps.every(function (dep, index) { return isShallowEqual(dep, nextDeps[index]); });\n};\nvar useShallowCompareEffect = function (effect, deps) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useShallowCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useShallowCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n    }\n    useCustomCompareEffect(effect, deps, shallowEqualDepsList);\n};\nexport default useShallowCompareEffect;\n","import { useEffect, useRef } from 'react';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar useCustomCompareEffect = function (effect, deps, depsEqual) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useCustomCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useCustomCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n        if (typeof depsEqual !== 'function') {\n            console.warn('`useCustomCompareEffect` should be used with depsEqual callback for comparing deps list');\n        }\n    }\n    var ref = useRef(undefined);\n    if (!ref.current || !depsEqual(deps, ref.current)) {\n        ref.current = deps;\n    }\n    useEffect(effect, ref.current);\n};\nexport default useCustomCompareEffect;\n"],"names":["DEFAULT_CONTEXT","settings","isStandalone","metrics","metric","undefined","helpers","GraphCardContext","React","useGraphCardContext","useContext","useMetricsSelector","useAliasGraphCardContext","useSelectorsResponse","useAliasSelectorsResponse","storeHooks","map","metricId","id","isCapacity","graph","capacity","tally","error","fulfilled","pending","data","response","dataById","dataByList","metricData","index","updatedMetricData","dataSets","useGetMetrics","getGraphMetrics","reduxActions","useDispatch","useAliasDispatch","useAliasMetricsSelector","useProduct","useAliasProduct","useProductGraphTallyQuery","useAliasProductGraphTallyQuery","productId","query","dispatch","useShallowCompareEffect","updatedMetrics","metricQuery","context","ProductViewContext","useProductViewContext","useProductQueryFactory","queryType","overrideId","useAliasProductViewContext","initialQuery","viewId","queryOverride","view","queryProduct","queryView","useProductQuery","options","schemaCheck","rhsmApiTypes","reduxHelpers","useProductInventoryGuestsQuery","defaultLimit","defaultOffset","RHSM_API_QUERY_SET_TYPES","useProductInventoryHostsQuery","useProductInventorySubscriptionsQuery","useProductContext","useAliasProductQuery","uomFilter","RHSM_API_QUERY_TYPES","initialGraphFilters","initialInventoryFilters","initialSubscriptionsInventoryFilters","productContextFilterUom","config","applyUomFilter","useCallback","filterFilters","isOptional","RegExp","test","filter","productGroup","productLabel","useProductGraphConfig","useAliasProductContext","initialGraphSettings","filters","useProductInventoryGuestsConfig","inventoryGuestsQuery","initialGuestsFilters","initialGuestsSettings","useProductInventoryHostsConfig","initialInventorySettings","useProductInventorySubscriptionsConfig","initialSubscriptionsInventorySettings","useProductToolbarConfig","initialToolbarFilters","initialToolbarSettings","initialSecondaryToolbarFilters","secondaryFilters","useQuery","useQueryFactory","useGraphTallyQuery","useInventoryGuestsQuery","useInventoryHostsQuery","useInventorySubscriptionsQuery","useGraphConfig","useInventoryGuestsConfig","useInventoryHostsConfig","useInventorySubscriptionsConfig","useToolbarConfig","keyList","Object","keys","exports","a","b","length","i","shallowEqualDepsList","prevDeps","nextDeps","every","dep","effect","deps","depsEqual","ref","useRef","current","useEffect"],"sourceRoot":""}