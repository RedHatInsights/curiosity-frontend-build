{"version":3,"file":"js/2738.921e54c6de385e8bb33a.js","mappings":"8UAcMA,EAAsBC,OAAOC,OAAOC,EAAAA,IAAaC,KAAI,SAAAC,GAAI,MAAK,CAClEC,OAAOC,EAAAA,EAAAA,WAAU,gCAAiC,CAAEC,QAASH,IAC7DI,MAAOJ,EACPK,UAAU,MAWNC,EAAc,WAGT,6DAAP,GAAO,IAFTC,YAAaC,OAEJ,MAFuBC,EAAAA,GAAAA,WAAAA,YAEvB,MADTC,WAAYC,OACH,MADqBD,EAAAA,WACrB,IACUC,IAAXC,EADC,EACDA,OACFC,EAAWL,IAEjB,OAAO,WAA2B,6DAAP,GAAO,IAAxBJ,MAAAA,OAAwB,MAAhB,KAAgB,IACDU,EAAAA,GAAAA,kBAA8BV,GAArDW,EADwB,EACxBA,UAAWC,EADa,EACbA,QACnBH,EAAS,CACP,CACEb,KAAMiB,EAAAA,GAAAA,MAAAA,+BACNL,OAAAA,IAHK,QAMLZ,KAAMiB,EAAAA,GAAAA,MAAAA,qBAAsCC,EAAAA,GAAAA,aAC5CN,OAAAA,GACCM,EAAAA,GAAAA,YAAmCd,IAR/B,QAWLJ,KAAMiB,EAAAA,GAAAA,MAAAA,qBAAsCC,EAAAA,GAAAA,YAC5CN,OAAAA,GACCM,EAAAA,GAAAA,WAAkCH,EAAUI,gBAbxC,QAgBLnB,KAAMiB,EAAAA,GAAAA,MAAAA,qBAAsCC,EAAAA,GAAAA,UAC5CN,OAAAA,GACCM,EAAAA,GAAAA,SAAgCF,EAAQG,mBAkB3CC,EAA0B,SAAC,GAM3B,IALJC,EAKI,EALJA,SACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,EACaC,EAET,EAFJlB,YAG4CmB,GAAiBC,EADzD,EADJC,6BAEST,EAAAA,GAAAA,aACHU,EAAWJ,IACXK,EAAiBP,EAAQvB,KAAI,SAAA+B,GAAM,yBAAUA,GAAV,IAAkBzB,SAAUyB,EAAO1B,QAAUqB,OAEtF,OACE,kBAAC,EAAAM,OAAD,CACE,aAAYR,EAAE,gCAAD,OAAkCF,EAAY,UAAc,IAAM,CAAElB,QAAS,gBAC1FyB,SAAUA,EACVN,QAASO,EACTG,gBAAiBP,EACjBQ,YAAaV,EAAE,gCAAD,OAAkCF,EAAY,UAAc,IAAM,CAAElB,QAAS,gBAC3F,YAAU,6BA+BhBiB,EAAwBc,aAAe,CACrCb,UAAU,EACVC,QAAS3B,EACT4B,EAAGrB,EAAAA,UACHI,YAAAA,EACAqB,0BAAAA,EAAAA","sources":["webpack:///./src/components/toolbar/toolbarFieldGranularity.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { Select } from '../form/select';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.granularity', { context: type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * On select update granularity.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    const { startDate, endDate } = dateHelpers.getRangedDateTime(value);\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: value\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      }\n    ]);\n  };\n};\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {Array} props.options\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst ToolbarFieldGranularity = ({\n  isFilter,\n  options,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_TYPES.GRANULARITY]: updatedValue } = useAliasProductGraphTallyQuery();\n  const onSelect = useAliasOnSelect();\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  return (\n    <Select\n      aria-label={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'granularity' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t(`curiosity-toolbar.placeholder${(isFilter && '_filter') || ''}`, { context: 'granularity' })}\n      data-test=\"toolbarFieldGranularity\"\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array}}\n */\nToolbarFieldGranularity.propTypes = {\n  isFilter: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, useProductGraphTallyQuery: Function, t: Function, isFilter: boolean,\n *     options: Array}}\n */\nToolbarFieldGranularity.defaultProps = {\n  isFilter: false,\n  options: toolbarFieldOptions,\n  t: translate,\n  useOnSelect,\n  useProductGraphTallyQuery\n};\n\nexport { ToolbarFieldGranularity as default, ToolbarFieldGranularity, toolbarFieldOptions, useOnSelect };\n"],"names":["toolbarFieldOptions","Object","values","FIELD_TYPES","map","type","title","translate","context","value","selected","useOnSelect","useDispatch","useAliasDispatch","storeHooks","useProduct","useAliasProduct","viewId","dispatch","dateHelpers","startDate","endDate","reduxTypes","RHSM_API_QUERY_TYPES","toISOString","ToolbarFieldGranularity","isFilter","options","t","useAliasOnSelect","updatedValue","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","onSelect","updatedOptions","option","Select","selectedOptions","placeholder","defaultProps"],"sourceRoot":""}