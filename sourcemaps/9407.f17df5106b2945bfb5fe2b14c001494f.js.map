{"version":3,"file":"js/9407.7eeff49a222c6d06d056.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardContext.js","webpack:///./src/components/graphCard/graphCardMetricTotals.js"],"sourcesContent":["import React, { useContext, useMemo } from 'react';\nimport { useShallowCompareEffect } from 'react-use';\nimport { ToolbarItem } from '@patternfly/react-core';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphConfig, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldSelectCategory';\nimport { helpers } from '../../common/helpers';\nimport { graphCardHelpers } from './graphCardHelpers';\n\n/**\n * @memberof GraphCard\n * @module GraphCardContext\n */\n\n/**\n * Chart context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{ settings: { metrics: [] } }, helpers.noop];\n\nconst GraphCardContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated graph card context.\n *\n * @returns {React.Context<{}>}\n */\nconst useGraphCardContext = () => useContext(GraphCardContext);\n\n/**\n * Parse filters settings for context.\n *\n * @param {object} options\n * @param {Function} options.useProduct\n * @param {Function} options.useProductGraphConfig\n * @returns {{standaloneFiltersSettings: Array<{ settings: object }>, groupedFiltersSettings: { settings: object }}}\n */\nconst useParseFiltersSettings = ({\n  useProduct: useAliasProduct = useProduct,\n  useProductGraphConfig: useAliasProductGraphConfig = useProductGraphConfig\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const { filters = [], settings = {} } = useAliasProductGraphConfig();\n\n  return useMemo(\n    () =>\n      graphCardHelpers.generateChartSettings({\n        filters,\n        settings,\n        productId\n      }),\n    [filters, settings, productId]\n  );\n};\n\n/**\n * Transform multiple metrics from store for chart/graph consumption.\n *\n * @param {object} options\n * @param {Function} options.useGraphCardContext\n * @param {Function} options.useSelectorsResponse\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: Array, errorId: {},\n *     id: {}, list: Array}, cancelled: boolean, dataSets: Array, message: null, error: boolean}}\n */\nconst useMetricsSelector = ({\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  const {\n    error,\n    fulfilled,\n    pending,\n    data = [],\n    ...response\n  } = useAliasSelectorsResponse(\n    metrics.map(\n      ({ id: metricId, isCapacity }) =>\n        ({ graph }) =>\n          isCapacity ? graph.capacity?.[metricId] : graph.tally?.[metricId]\n    )\n  );\n\n  /**\n   * Apply graph config settings to metric data.\n   */\n  const dataById = {};\n  const dataByList = data?.map((metricData, index) => {\n    const updatedMetricData = {\n      ...metrics[index],\n      ...metricData\n    };\n    dataById[metrics[index].id] = updatedMetricData;\n    return updatedMetricData;\n  });\n\n  return {\n    ...response,\n    data: dataById,\n    dataSets: dataByList,\n    error,\n    fulfilled,\n    pending\n  };\n};\n\n/**\n * Get graph metrics from Tally or Capacity.\n *\n * @param {object} params\n * @param {Function} params.getGraphMetrics\n * @param {Function} params.useDispatch\n * @param {Function} params.useGraphCardContext\n * @param {Function} params.useMetricsSelector\n * @param {Function} params.useProduct\n * @param {Function} params.useProductGraphTallyQuery\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: Array, errorId: {},\n *     id: {}, list: Array}, cancelled: boolean, dataSets: Array, message: null, error: boolean}}\n */\nconst useGetMetrics = ({\n  getGraphMetrics = reduxActions.rhsm.getGraphMetrics,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector = useMetricsSelector,\n  useProduct: useAliasProduct = useProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductGraphTallyQuery();\n  const dispatch = useAliasDispatch();\n  const response = useAliasMetricsSelector();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  useShallowCompareEffect(() => {\n    const updatedMetrics = metrics.map(({ metric: metricId, isCapacity, query: metricQuery }) => ({\n      id: productId,\n      metric: metricId,\n      isCapacity,\n      query: metricQuery\n    }));\n    getGraphMetrics(updatedMetrics, query)(dispatch);\n  }, [metrics, productId, query]);\n\n  return response;\n};\n\n/**\n * FixMe: the pending condition for \"content\" will block subsequent responses from this hook, this is expected.\n * This current limitation means if we decide to apply the same action to multiple cards the \"content\" will\n * not display for all of them.\n */\n/**\n * Return a component list for a configurable graphCard action toolbar.\n * Allow the \"content\" prop to receive graph data for display via callback.\n *\n * @param {object} params\n * @param {Array} params.categoryOptions\n * @param {Function} params.useMetricsSelector\n * @param {Function} params.useGraphCardContext\n * @returns {Array}\n */\nconst useGraphCardActions = ({\n  categoryOptions = toolbarFieldOptions,\n  useMetricsSelector: useAliasMetricsSelector = useMetricsSelector,\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext\n} = {}) => {\n  const { pending, dataSets } = useAliasMetricsSelector();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { actions } = settings;\n\n  return useMemo(\n    () =>\n      actions?.map(({ id, content, ...actionProps }) => {\n        const option = categoryOptions.find(({ value: categoryOptionValue }) => id === categoryOptionValue);\n        const { component: OptionComponent } = option || {};\n\n        return (\n          (OptionComponent && (\n            <ToolbarItem key={`option-${id}`}>\n              <OptionComponent isFilter={false} {...actionProps} />\n            </ToolbarItem>\n          )) ||\n          (content && !pending && dataSets.length && (\n            <ToolbarItem key={id || helpers.generateId()}>\n              {typeof content === 'function' ? content({ data: dataSets }) : content}\n            </ToolbarItem>\n          )) ||\n          null\n        );\n      }),\n    [actions, categoryOptions, dataSets, pending]\n  );\n};\n\nconst context = {\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardActions,\n  useGraphCardContext,\n  useMetricsSelector,\n  useParseFiltersSettings\n};\n\nexport {\n  context as default,\n  context,\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardActions,\n  useGraphCardContext,\n  useMetricsSelector,\n  useParseFiltersSettings\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter, CardHeader, CardTitle, Title } from '@patternfly/react-core';\nimport _camelCase from 'lodash/camelCase';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useGraphCardContext, useMetricsSelector } from './graphCardContext';\nimport { Loader, SkeletonSize } from '../loader/loader';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldRangedMonthly';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * @memberof GraphCard\n * @module GraphCardMetricTotals\n */\n\n/**\n * Display totals for a single metric.\n *\n * @param {object} props\n * @param {React.ReactNode} props.children\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {React.ReactNode}\n */\nconst GraphCardMetricTotals = ({\n  children,\n  useGraphCardContext: useAliasGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate } = useAliasProductGraphTallyQuery();\n  const { pending, error, fulfilled, dataSets = [] } = useAliasMetricsSelector();\n  const { data = [], id: firstChartId, metric: firstMetricId, meta = {} } = dataSets[0] || {};\n  const { date: lastDate, hasData: lastHasData, y: lastValue } = data[data.length - 1] || {};\n\n  const {\n    date: currentDate,\n    hasData: currentHasData,\n    y: currentValue\n  } = data.find(({ isCurrentDate }) => isCurrentDate === true) || {};\n\n  const { totalMonthlyDate: monthlyDate, totalMonthlyHasData: monthlyHasData, totalMonthlyValue: monthlyValue } = meta;\n\n  const { title: selectedMonth, isCurrent } =\n    toolbarFieldOptions.find(\n      option => option.title === startDate || option.value.startDate.toISOString() === startDate\n    ) || {};\n\n  const dailyDate = isCurrent ? currentDate : lastDate;\n  const dailyHasData = isCurrent ? currentHasData : lastHasData;\n  const dailyValue = isCurrent ? currentValue : lastValue;\n\n  if (settings?.isMetricDisplay && settings?.cards?.length) {\n    const metricDisplayPassedData = helpers.setImmutableData({\n      chartId: firstChartId,\n      dailyDate,\n      dailyHasData,\n      dailyValue,\n      metricId: firstMetricId,\n      groupMetricId: [...settings.groupMetric],\n      monthlyDate,\n      monthlyHasData,\n      monthlyValue,\n      selectedValue: selectedMonth\n    });\n\n    return (\n      <div\n        data-test={`graphMetricTotals-${settings?.groupMetric?.map(metricId => _camelCase(metricId))?.join('-')}`}\n        data-test-data={JSON.stringify(metricDisplayPassedData)}\n        className=\"curiosity-usage-graph__totals\"\n      >\n        <div>\n          <div className=\"curiosity-usage-graph__totals-column\">\n            {settings?.cards?.map(({ key, header, body, footer }, index) => (\n              <Card\n                key={key || helpers.generateHash({ metricDisplayPassedData, index })}\n                isPlain\n                data-test={`graphMetricTotalsCard-${index}`}\n                className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n              >\n                <CardHeader>\n                  <CardTitle>\n                    <Title headingLevel=\"h2\" size=\"md\">\n                      {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                      {fulfilled && ((typeof header === 'function' && header(metricDisplayPassedData)) || header)}\n                    </Title>\n                  </CardTitle>\n                </CardHeader>\n                <CardBody>\n                  <div>\n                    {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg, height: '60px' }} />}\n                    {fulfilled && ((typeof body === 'function' && body(metricDisplayPassedData)) || body)}\n                  </div>\n                </CardBody>\n                <CardFooter>\n                  <div>\n                    {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                    {fulfilled && ((typeof footer === 'function' && footer(metricDisplayPassedData)) || footer)}\n                  </div>\n                </CardFooter>\n              </Card>\n            ))}\n          </div>\n        </div>\n        <div>\n          <div className=\"curiosity-usage-graph__totals-graph-column\">{children}</div>\n        </div>\n      </div>\n    );\n  }\n\n  return children;\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, children: React.ReactNode, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.propTypes = {\n  children: PropTypes.node,\n  useGraphCardContext: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, children: React.ReactNode, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.defaultProps = {\n  children: null,\n  useGraphCardContext,\n  useMetricsSelector,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardMetricTotals as default, GraphCardMetricTotals };\n"],"names":["DEFAULT_CONTEXT","settings","metrics","helpers","GraphCardContext","React","useGraphCardContext","useContext","useParseFiltersSettings","_ref","arguments","length","undefined","_ref$useProduct","useProduct","useAliasProduct","_ref$useProductGraphC","useProductGraphConfig","useAliasProductGraphConfig","productId","_useAliasProductGraph","_useAliasProductGraph2","filters","_useAliasProductGraph3","useMemo","graphCardHelpers","useMetricsSelector","_ref2","_ref2$useGraphCardCon","useAliasGraphCardContext","_ref2$useSelectorsRes","useSelectorsResponse","useAliasSelectorsResponse","storeHooks","_useAliasGraphCardCon2","_settings$metrics","_useAliasSelectorsRes","map","_ref3","metricId","id","isCapacity","_ref4","_graph$capacity","_graph$tally","graph","capacity","tally","error","fulfilled","pending","_useAliasSelectorsRes2","data","response","_objectWithoutProperties","_excluded","dataById","dataByList","metricData","index","updatedMetricData","_objectSpread","dataSets","useGetMetrics","_ref5","_ref5$getGraphMetrics","getGraphMetrics","reduxActions","_ref5$useDispatch","useDispatch","useAliasDispatch","_ref5$useGraphCardCon","_ref5$useMetricsSelec","useAliasMetricsSelector","_ref5$useProduct","_ref5$useProductGraph","useProductGraphTallyQuery","useAliasProductGraphTallyQuery","query","dispatch","_useAliasGraphCardCon4","_settings$metrics2","useShallowCompareEffect","updatedMetrics","_ref6","metric","metricQuery","useGraphCardActions","_ref7","_ref7$categoryOptions","categoryOptions","toolbarFieldOptions","_ref7$useMetricsSelec","_ref7$useGraphCardCon","_useAliasMetricsSelec","_useAliasGraphCardCon6","actions","_ref8","content","actionProps","_excluded2","OptionComponent","find","_ref9","categoryOptionValue","value","component","ToolbarItem","key","concat","Object","assign","isFilter","context","GraphCardMetricTotals","_settings$cards","children","startDate","RHSM_API_QUERY_SET_TYPES","_useAliasMetricsSelec2","_ref2$data","firstChartId","firstMetricId","_ref2$meta","meta","lastDate","date","lastHasData","hasData","lastValue","y","isCurrentDate","currentDate","currentHasData","currentValue","monthlyDate","totalMonthlyDate","monthlyHasData","totalMonthlyHasData","monthlyValue","totalMonthlyValue","option","title","toISOString","selectedMonth","isCurrent","dailyDate","dailyHasData","dailyValue","isMetricDisplay","cards","_settings$groupMetric","_settings$groupMetric2","_settings$cards2","metricDisplayPassedData","chartId","groupMetricId","_toConsumableArray","groupMetric","selectedValue","_camelCase","join","JSON","stringify","className","header","body","footer","Card","isPlain","CardHeader","CardTitle","Title","headingLevel","size","Loader","variant","skeletonProps","SkeletonSize","CardBody","height","CardFooter","defaultProps"],"sourceRoot":""}