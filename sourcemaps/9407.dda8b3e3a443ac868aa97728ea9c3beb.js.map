{"version":3,"file":"js/9407.e803708c6578acdefc22.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardContext.js","webpack:///./src/components/graphCard/graphCardMetricTotals.js"],"sourcesContent":["import React, { useContext, useMemo } from 'react';\nimport { useShallowCompareEffect } from 'react-use';\nimport { ToolbarItem } from '@patternfly/react-core';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphConfig, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldSelectCategory';\nimport { helpers } from '../../common/helpers';\nimport { graphCardHelpers } from './graphCardHelpers';\n\n/**\n * @memberof GraphCard\n * @module GraphCardContext\n */\n\n/**\n * Chart context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{ settings: { metrics: [] } }, helpers.noop];\n\nconst GraphCardContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated graph card context.\n *\n * @returns {React.Context<{}>}\n */\nconst useGraphCardContext = () => useContext(GraphCardContext);\n\n/**\n * Parse filters settings for context.\n *\n * @param {object} options\n * @param {Function} options.useProduct\n * @param {Function} options.useProductGraphConfig\n * @returns {{standaloneFiltersSettings: Array<{ settings: object }>, groupedFiltersSettings: { settings: object }}}\n */\nconst useParseFiltersSettings = ({\n  useProduct: useAliasProduct = useProduct,\n  useProductGraphConfig: useAliasProductGraphConfig = useProductGraphConfig\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const { filters = [], settings = {} } = useAliasProductGraphConfig();\n\n  return useMemo(\n    () =>\n      graphCardHelpers.generateChartSettings({\n        filters,\n        settings,\n        productId\n      }),\n    [filters, settings, productId]\n  );\n};\n\n/**\n * Transform multiple metrics from store for chart/graph consumption.\n *\n * @param {object} options\n * @param {Function} options.useGraphCardContext\n * @param {Function} options.useSelectorsResponse\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: Array, errorId: {},\n *     id: {}, list: Array}, cancelled: boolean, dataSets: Array, message: null, error: boolean}}\n */\nconst useMetricsSelector = ({\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  const {\n    error,\n    fulfilled,\n    pending,\n    data = [],\n    ...response\n  } = useAliasSelectorsResponse(\n    metrics.map(\n      ({ id: metricId, isCapacity }) =>\n        ({ graph }) =>\n          isCapacity ? graph.capacity?.[metricId] : graph.tally?.[metricId]\n    )\n  );\n\n  /**\n   * Apply graph config settings to metric data.\n   */\n  const dataById = {};\n  const dataByList = data?.map((metricData, index) => {\n    const updatedMetricData = {\n      ...metrics[index],\n      ...metricData\n    };\n    dataById[metrics[index].id] = updatedMetricData;\n    return updatedMetricData;\n  });\n\n  return {\n    ...response,\n    data: dataById,\n    dataSets: dataByList,\n    error,\n    fulfilled,\n    pending\n  };\n};\n\n/**\n * Get graph metrics from Tally or Capacity.\n *\n * @param {object} params\n * @param {Function} params.getGraphMetrics\n * @param {Function} params.useDispatch\n * @param {Function} params.useGraphCardContext\n * @param {Function} params.useMetricsSelector\n * @param {Function} params.useProduct\n * @param {Function} params.useProductGraphTallyQuery\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: Array, errorId: {},\n *     id: {}, list: Array}, cancelled: boolean, dataSets: Array, message: null, error: boolean}}\n */\nconst useGetMetrics = ({\n  getGraphMetrics = reduxActions.rhsm.getGraphMetrics,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector = useMetricsSelector,\n  useProduct: useAliasProduct = useProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductGraphTallyQuery();\n  const dispatch = useAliasDispatch();\n  const response = useAliasMetricsSelector();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  useShallowCompareEffect(() => {\n    const updatedMetrics = metrics.map(({ metric: metricId, isCapacity, query: metricQuery }) => ({\n      id: productId,\n      metric: metricId,\n      isCapacity,\n      query: metricQuery\n    }));\n    getGraphMetrics(updatedMetrics, query)(dispatch);\n  }, [metrics, productId, query]);\n\n  return response;\n};\n\n/**\n * FixMe: the pending condition for \"content\" will block subsequent responses from this hook, this is expected.\n * This current limitation means if we decide to apply the same action to multiple cards the \"content\" will\n * not display for all of them.\n */\n/**\n * Return a component list for a configurable graphCard action toolbar.\n * Allow the \"content\" prop to receive graph data for display via callback.\n *\n * @param {object} params\n * @param {Array} params.categoryOptions\n * @param {Function} params.useMetricsSelector\n * @param {Function} params.useGraphCardContext\n * @returns {Array}\n */\nconst useGraphCardActions = ({\n  categoryOptions = toolbarFieldOptions,\n  useMetricsSelector: useAliasMetricsSelector = useMetricsSelector,\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext\n} = {}) => {\n  const { pending, dataSets } = useAliasMetricsSelector();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { actions } = settings;\n\n  return useMemo(\n    () =>\n      actions?.map(({ id, content, ...actionProps }) => {\n        const option = categoryOptions.find(({ value: categoryOptionValue }) => id === categoryOptionValue);\n        const { component: OptionComponent } = option || {};\n\n        return (\n          (OptionComponent && (\n            <ToolbarItem key={`option-${id}`}>\n              <OptionComponent isFilter={false} {...actionProps} />\n            </ToolbarItem>\n          )) ||\n          (content && !pending && dataSets.length && (\n            <ToolbarItem key={id || helpers.generateId()}>\n              {typeof content === 'function' ? content({ data: dataSets }) : content}\n            </ToolbarItem>\n          )) ||\n          null\n        );\n      }),\n    [actions, categoryOptions, dataSets, pending]\n  );\n};\n\nconst context = {\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardActions,\n  useGraphCardContext,\n  useMetricsSelector,\n  useParseFiltersSettings\n};\n\nexport {\n  context as default,\n  context,\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardActions,\n  useGraphCardContext,\n  useMetricsSelector,\n  useParseFiltersSettings\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter, CardHeader, CardTitle, Title } from '@patternfly/react-core';\nimport _camelCase from 'lodash/camelCase';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useGraphCardContext, useMetricsSelector } from './graphCardContext';\nimport { Loader, SkeletonSize } from '../loader/loader';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldRangedMonthly';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { graphCardHelpers } from './graphCardHelpers';\nimport { helpers } from '../../common';\n\n/**\n * @memberof GraphCard\n * @module GraphCardMetricTotals\n */\n\n/**\n * Display totals for a single metric.\n *\n * @param {object} props\n * @param {React.ReactNode} props.children\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {React.ReactNode}\n */\nconst GraphCardMetricTotals = ({\n  children,\n  useGraphCardContext: useAliasGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const query = useAliasProductGraphTallyQuery();\n  const { pending, error, fulfilled, dataSets: dataByList = [] } = useAliasMetricsSelector();\n\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate } = query;\n  const { isCurrent: isSelectedMonthCurrent } =\n    toolbarFieldOptions.find(\n      option => option.title === startDate || option.value.startDate.toISOString() === startDate\n    ) || {};\n\n  if (settings?.isMetricDisplay && settings?.cards?.length) {\n    const metricDisplayPassedData = helpers.setImmutableData(\n      {\n        dataSets: dataByList.map(dataSet => {\n          const { id: chartId, metric: metricId } = dataSet || {};\n          return {\n            ...dataSet,\n            display: {\n              ...graphCardHelpers.getDailyMonthlyTotals({ dataSet, isCurrent: isSelectedMonthCurrent }),\n              ...graphCardHelpers.getRemainingCapacity({\n                ...graphCardHelpers.getPrepaidTallyCapacity({ data: dataByList }),\n                isCurrent: isSelectedMonthCurrent\n              }),\n              ...graphCardHelpers.getRemainingOverage({\n                ...graphCardHelpers.getPrepaidTallyCapacity({ data: dataByList }),\n                isCurrent: isSelectedMonthCurrent\n              }),\n              chartId,\n              metricId\n            }\n          };\n        })\n      },\n      { isClone: true }\n    );\n\n    return (\n      <div\n        data-test={`graphMetricTotals-${settings?.groupMetric?.map(metricId => _camelCase(metricId))?.join('-')}`}\n        data-test-data={JSON.stringify(metricDisplayPassedData)}\n        className=\"curiosity-usage-graph__totals\"\n      >\n        <div>\n          <div className=\"curiosity-usage-graph__totals-column\">\n            {settings?.cards?.map(({ key, header, body, footer }, index) => (\n              <Card\n                key={key || helpers.generateHash({ metricDisplayPassedData, index })}\n                isPlain\n                data-test={`graphMetricTotalsCard-${index}`}\n                className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n              >\n                <CardHeader>\n                  <CardTitle>\n                    <Title headingLevel=\"h2\" size=\"md\">\n                      {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                      {fulfilled && ((typeof header === 'function' && header(metricDisplayPassedData)) || header)}\n                    </Title>\n                  </CardTitle>\n                </CardHeader>\n                <CardBody>\n                  <div>\n                    {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg, height: '60px' }} />}\n                    {fulfilled && ((typeof body === 'function' && body(metricDisplayPassedData)) || body)}\n                  </div>\n                </CardBody>\n                <CardFooter>\n                  <div>\n                    {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                    {fulfilled && ((typeof footer === 'function' && footer(metricDisplayPassedData)) || footer)}\n                  </div>\n                </CardFooter>\n              </Card>\n            ))}\n          </div>\n        </div>\n        <div>\n          <div className=\"curiosity-usage-graph__totals-graph-column\">{children}</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div data-test=\"graphStandalone\" className=\"curiosity-usage-graph__standalone\">\n      {children}\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, children: React.ReactNode, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.propTypes = {\n  children: PropTypes.node,\n  useGraphCardContext: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, children: React.ReactNode, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.defaultProps = {\n  children: null,\n  useGraphCardContext,\n  useMetricsSelector,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardMetricTotals as default, GraphCardMetricTotals };\n"],"names":["DEFAULT_CONTEXT","settings","metrics","helpers","GraphCardContext","React","useGraphCardContext","useContext","useParseFiltersSettings","useProduct","useAliasProduct","useProductGraphConfig","useAliasProductGraphConfig","arguments","length","undefined","productId","filters","useMemo","graphCardHelpers","useMetricsSelector","useAliasGraphCardContext","useSelectorsResponse","useAliasSelectorsResponse","storeHooks","error","fulfilled","pending","data","response","map","_ref","id","metricId","isCapacity","_ref2","_graph$capacity","_graph$tally","graph","capacity","tally","dataById","dataByList","metricData","index","updatedMetricData","dataSets","useGetMetrics","getGraphMetrics","reduxActions","useDispatch","useAliasDispatch","useAliasMetricsSelector","useProductGraphTallyQuery","useAliasProductGraphTallyQuery","query","dispatch","useShallowCompareEffect","updatedMetrics","_ref3","metric","metricQuery","useGraphCardActions","categoryOptions","toolbarFieldOptions","actions","_ref4","content","actionProps","option","find","_ref5","value","categoryOptionValue","component","OptionComponent","ToolbarItem","key","concat","_extends","isFilter","context","GraphCardMetricTotals","_settings$cards","children","RHSM_API_QUERY_SET_TYPES","startDate","isCurrent","isSelectedMonthCurrent","title","toISOString","isMetricDisplay","cards","_settings$groupMetric","_settings$groupMetric2","_settings$cards2","metricDisplayPassedData","dataSet","chartId","display","isClone","groupMetric","_camelCase","join","JSON","stringify","className","header","body","footer","Card","isPlain","CardHeader","CardTitle","Title","headingLevel","size","Loader","variant","skeletonProps","SkeletonSize","CardBody","height","CardFooter","propTypes","PropTypes","defaultProps"],"sourceRoot":""}