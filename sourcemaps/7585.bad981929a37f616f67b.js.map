{"version":3,"file":"js/7585.58305667fa0ff93d1a0f.js","mappings":"qYAeMA,E,gMACJC,MAAQ,G,EAmBRC,aAAe,WAAM,MAC6B,EAAKC,MAA7CC,EADW,EACXA,kBAAmBC,EADR,EACQA,UAAWC,EADnB,EACmBA,MAC9BC,EAAoBC,EAAAA,GAAAA,eAA0BF,GAA9CC,gBAER,GAAIF,EAAW,SACkBI,EAAAA,GAAAA,kBAA8B,WAArDC,EADK,EACLA,UAAWC,EADN,EACMA,QAQnBP,EAAkBC,GAPQ,kBACrBE,GADkB,mBAEpBK,EAAAA,GAAAA,YAAmCC,EAAAA,GAAAA,QAFf,SAGpBD,EAAAA,GAAAA,WAAkCF,EAAUI,gBAHxB,SAIpBF,EAAAA,GAAAA,SAAgCD,EAAQG,eAJpB,O,kDAvB3B,WACEC,KAAKb,iB,gCAGP,SAAmBc,GAAW,MACCD,KAAKZ,MAA1BG,EADoB,EACpBA,MADoB,EACbD,YAEGW,EAAUX,WAAcY,GAAAA,CAASX,EAAOU,EAAUV,QAClES,KAAKb,iB,0BA+BT,WAAe,WACLD,EAAUc,KAAVd,MADK,EAEqBc,KAAKZ,MAA/Be,EAFK,EAELA,YAAaC,EAFR,EAEQA,SACfC,EAAkB,GAiBxB,OAfID,EAASE,QACXC,OAAOC,QAAQL,GAAaM,SAAQ,YAAkB,mBAAhBC,EAAgB,KAAXC,EAAW,KACpD,IAAmB,IAAfzB,EAAMwB,KAA2B,IAAVC,EAAgB,CACzC,IAAMC,EAAUR,EAASS,MAAK,qBAAGC,KAAgBJ,KAE7CE,GACFP,EAAgBU,MAAhB,QACEL,IAAAA,GACGE,QAONP,EAAgBW,KAAI,YAA0D,IAAvDN,EAAuD,EAAvDA,IAAKE,EAAkD,EAAlDA,QAASK,EAAyC,EAAzCA,MAAyC,IAAlCC,QAAAA,OAAkC,MAAxBC,EAAAA,aAAAA,KAAwB,EAC7EC,EAAc,kBAAC,EAAAC,uBAAD,CAAwBC,QAAS,kBAAM,EAAKC,UAAL,UAAiBb,GAAM,OAElF,OACE,kBAAC,EAAAc,MAAD,CAAOJ,YAAaA,EAAaV,IAAKA,EAAKO,MAAOA,EAAOC,QAASA,GAC/DN,Q,oBAWT,WACE,IAAMa,EAASzB,KAAK0B,eAEpB,OAAID,EAAOnB,OACF,yBAAKqB,UAAU,6BAA6BF,GAG9C,S,GArFkBG,IAAAA,WAkH7B3C,EAAe4C,aAAe,CAC5BxC,kBAAmByC,EAAAA,GAAAA,KACnBvC,MAAO,GACPa,SAAU,CACR,CACEU,GAAI,sBACJG,OAAOc,EAAAA,EAAAA,WAAU,sCACjBnB,SAASmB,EAAAA,EAAAA,WACP,uCACA,CACEC,QAA6D,KAApDF,EAAAA,GAAAA,yCAA0D,sBACnEG,QAASH,EAAAA,GAAAA,iBAEX,CACE,kBAAC,EAAAI,OAAD,CACEC,UAAQ,EACRC,UAAU,IACVlB,QAAQ,OACRmB,KAAM,kBAAC,EAAAC,oBAAD,MACNC,aAAa,QACbC,OAAO,SACPC,KAAMX,EAAAA,GAAAA,+CAclB,IASMY,EAAsBC,EAAAA,GAAAA,YAAAA,kBAEtBC,GAA0BC,EAAAA,EAAAA,IAAQH,GAXb,SAAAI,GAAQ,MAAK,CACtCzD,kBAAmB,SAACyB,EAAIvB,GAAL,OAAeuD,EAASC,EAAAA,GAAAA,KAAAA,kBAAoCjC,EAAIvB,QAUrDsD,CAAiD5D","sources":["webpack:///./src/components/bannerMessages/bannerMessages.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, AlertActionCloseButton, AlertVariant, Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport _isEqual from 'lodash/isEqual';\nimport { apiQueries, connect, reduxActions, reduxSelectors } from '../../redux';\nimport { translate } from '../i18n/i18n';\nimport { dateHelpers, helpers } from '../../common';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\n\n/**\n * Render banner messages.\n *\n * @augments React.Component\n */\nclass BannerMessages extends React.Component {\n  state = {};\n\n  componentDidMount() {\n    this.onUpdateData();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { query, productId } = this.props;\n\n    if (productId !== prevProps.productId || !_isEqual(query, prevProps.query)) {\n      this.onUpdateData();\n    }\n  }\n\n  /**\n   * Call the RHSM APIs, apply filters.\n   *\n   * @event onUpdateGraphData\n   */\n  onUpdateData = () => {\n    const { getMessageReports, productId, query } = this.props;\n    const { graphTallyQuery } = apiQueries.parseRhsmQuery(query);\n\n    if (productId) {\n      const { startDate, endDate } = dateHelpers.getRangedDateTime('CURRENT');\n      const updatedGraphQuery = {\n        ...graphTallyQuery,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString(),\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      };\n\n      getMessageReports(productId, updatedGraphQuery);\n    }\n  };\n\n  /**\n   * Apply messages' configuration to alerts.\n   *\n   * @returns {Node}\n   */\n  renderAlerts() {\n    const { state } = this;\n    const { appMessages, messages } = this.props;\n    const updatedMessages = [];\n\n    if (messages.length) {\n      Object.entries(appMessages).forEach(([key, value]) => {\n        if (state[key] !== true && value === true) {\n          const message = messages.find(({ id }) => id === key);\n\n          if (message) {\n            updatedMessages.push({\n              key,\n              ...message\n            });\n          }\n        }\n      });\n    }\n\n    return updatedMessages.map(({ key, message, title, variant = AlertVariant.info }) => {\n      const actionClose = <AlertActionCloseButton onClose={() => this.setState({ [key]: true })} />;\n\n      return (\n        <Alert actionClose={actionClose} key={key} title={title} variant={variant}>\n          {message}\n        </Alert>\n      );\n    });\n  }\n\n  /**\n   * Render a banner messages container.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const alerts = this.renderAlerts();\n\n    if (alerts.length) {\n      return <div className=\"curiosity-banner-messages\">{alerts}</div>;\n    }\n\n    return null;\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{appMessages: object, productId: string, getMessageReports: Function, query: object, messages: Array}}\n */\nBannerMessages.propTypes = {\n  appMessages: PropTypes.object.isRequired,\n  getMessageReports: PropTypes.func,\n  query: PropTypes.object,\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.node.isRequired,\n      message: PropTypes.node.isRequired,\n      variant: PropTypes.oneOf([...Object.values(AlertVariant)])\n    })\n  ),\n  productId: PropTypes.string.isRequired\n};\n\n/**\n * Default props.\n *\n * @type {{getMessageReports: Function, query: object, messages: Array}}\n */\nBannerMessages.defaultProps = {\n  getMessageReports: helpers.noop,\n  query: {},\n  messages: [\n    {\n      id: 'cloudigradeMismatch',\n      title: translate('curiosity-banner.dataMismatchTitle'),\n      message: translate(\n        'curiosity-banner.dataMismatchMessage',\n        {\n          context: helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS !== '' && 'cloudigradeMismatch',\n          appName: helpers.UI_DISPLAY_NAME\n        },\n        [\n          <Button\n            isInline\n            component=\"a\"\n            variant=\"link\"\n            icon={<ExternalLinkAltIcon />}\n            iconPosition=\"right\"\n            target=\"_blank\"\n            href={helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS}\n          />\n        ]\n      )\n    }\n  ]\n};\n\n/**\n * Apply actions to props.\n *\n * @param {Function} dispatch\n * @returns {object}\n */\nconst mapDispatchToProps = dispatch => ({\n  getMessageReports: (id, query) => dispatch(reduxActions.rhsm.getMessageReports(id, query))\n});\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.appMessages.makeAppMessages();\n\nconst ConnectedBannerMessages = connect(makeMapStateToProps, mapDispatchToProps)(BannerMessages);\n\nexport { ConnectedBannerMessages as default, ConnectedBannerMessages, BannerMessages };\n"],"names":["BannerMessages","state","onUpdateData","props","getMessageReports","productId","query","graphTallyQuery","apiQueries","dateHelpers","startDate","endDate","RHSM_API_QUERY_TYPES","GRANULARITY_TYPES","toISOString","this","prevProps","_isEqual","appMessages","messages","updatedMessages","length","Object","entries","forEach","key","value","message","find","id","push","map","title","variant","AlertVariant","actionClose","AlertActionCloseButton","onClose","setState","Alert","alerts","renderAlerts","className","React","defaultProps","helpers","translate","context","appName","Button","isInline","component","icon","ExternalLinkAltIcon","iconPosition","target","href","makeMapStateToProps","reduxSelectors","ConnectedBannerMessages","connect","dispatch","reduxActions"],"sourceRoot":""}