{"version":3,"file":"js/2902.1662733996029.af1e71672f5aea4dee96.js","mappings":"+ZAQMA,EAAkB,CACtB,CAAEC,kBAAmBC,EAAAA,GAAAA,KAAcC,cAAe,CAAC,EAAGC,gBAAiBF,EAAAA,GAAAA,KAAcG,eAAgB,IACrGH,EAAAA,GAAAA,MAGII,EAAeC,IAAAA,cAAoBP,GAOnCQ,EAAkB,kBAAMC,EAAAA,EAAAA,YAAWH,EAAjB,EAalBI,EAAgB,WAAsE,6DAAP,CAAC,EAAM,IAAnEF,gBAAiBG,OAAkD,MAA3BH,EAA2B,EAC1F,EAAuDG,IAAvD,IAAQN,eAAgBO,OAAxB,MAAgD,GAAhD,EACA,UAA4CA,EAA5C,GAAOP,EAAP,KAAuBQ,EAAvB,KAOMC,GAASC,EAAAA,EAAAA,cACb,SAAAC,GACEH,GAAkB,SAAAI,GAAS,yBAAUA,GAAV,cAAsBD,GAAK,GAA3B,GAC5B,GACD,CAACH,IASGK,GAAWH,EAAAA,EAAAA,cAAY,WAC3BF,GAAkB,iBAAO,CAAC,CAAR,GACnB,GAAE,CAACA,IAOEM,GAAWJ,EAAAA,EAAAA,cACf,SAAAC,GACE,IAAMI,IAAiBf,SAAAA,EAAiBW,IAExC,OADAH,GAAkB,SAAAI,GAAS,yBAAUA,GAAV,cAAsBD,EAAKI,GAA3B,IACpBA,CACR,GACD,CAACf,EAAgBQ,IASbQ,GAAeN,EAAAA,EAAAA,cAAY,SAAAC,GAAE,OAAIX,aAAA,EAAAA,EAAiBW,MAAO,CAA5B,GAAmC,CAACX,IAEvE,OAAO,kBACF,CAAEA,eAAAA,IADP,IAEES,OAAAA,EACAI,SAAAA,EACAC,SAAAA,EACAE,aAAAA,GAEH,EAEKC,EAAU,CACdhB,aAAAA,EACAN,gBAAAA,EACAQ,gBAAAA,EACAE,cAAAA,E,uKCrFIa,EAAc,WAClB,OAAqDb,EAAAA,EAAAA,iBAA7CW,EAAR,EAAQA,aAAcP,EAAtB,EAAsBA,OAAQI,EAA9B,EAA8BA,SAAUC,EAAxC,EAAwCA,SACxC,GAA+BX,EAAAA,EAAAA,mBAAvBL,cAAAA,OAAR,MAAwB,CAAC,EAAzB,EACQqB,EAAyDrB,EAAzDqB,YAAaC,EAA4CtB,EAA5CsB,SAArB,EAAiEtB,EAAlCuB,QAAAA,OAA/B,MAAyC,CAAC,EAA1C,IAAiEvB,EAApBwB,WAAAA,OAA7C,MAA0D,CAAC,EAA3D,EAEA,IAAKH,EACH,OAAO,KAGT,IAAMI,EAAc,CAClBC,MAAO,CAAEJ,SAAUK,IAAWL,IAC9BM,MAAO,CACLC,KAAMlB,EACNmB,OAAQf,EACRgB,OAAQf,EACRgB,UAAWd,IAIf,OACE,yBACEe,UAAS,sCAAiCT,aAAA,EAAAA,EAAYU,OAAS,qBAAyB,IACxFC,MAAO,CACLC,YAAab,aAAA,EAAAA,EAASc,OAAT,UAAoBd,EAAQc,KAA5B,OAAyC,EACtDC,aAAcf,aAAA,EAAAA,EAASgB,QAAT,UAAqBhB,EAAQgB,MAA7B,OAA2C,IAGzDnC,IAAAA,eAAqBiB,IAAgBjB,IAAAA,aAAmBiB,GAAnB,UAAqCI,KAC1EJ,GAAY,UAAKI,IAGxB,EAUDL,EAAYoB,aAAe,CAAC,C","sources":["webpack:///./src/components/chart/chartContext.js","webpack:///./src/components/chart/chartLegend.js"],"sourcesContent":["import React, { useCallback, useContext } from 'react';\nimport { helpers } from '../../common';\n\n/**\n * Chart context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [\n  { chartContainerRef: helpers.noop, chartSettings: {}, chartTooltipRef: helpers.noop, dataSetsToggle: [] },\n  helpers.noop\n];\n\nconst ChartContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated chart context.\n *\n * @returns {React.Context<{}>}\n */\nconst useChartContext = () => useContext(ChartContext);\n\n/**\n * ToDo: reevaluate this alternative pattern of passing hooks as options, helps testing\n */\n/**\n * Track, show, and hide chart data layers.\n *\n * @param {object} options\n * @param {Function} options.useChartContext\n * @returns {{onRevert: Function, onToggle: Function, getIsToggled: Function, dataSetsToggle: object,\n *     onHide: Function}}\n */\nconst useToggleData = ({ useChartContext: useAliasChartContext = useChartContext } = {}) => {\n  const { dataSetsToggle: contextDataSetsToggle = [] } = useAliasChartContext();\n  const [dataSetsToggle, setDataSetsToggle] = contextDataSetsToggle;\n\n  /**\n   * Hide a graph layer.\n   *\n   * @type {(function(*): void)|*}\n   */\n  const onHide = useCallback(\n    id => {\n      setDataSetsToggle(prevState => ({ ...prevState, [id]: true }));\n    },\n    [setDataSetsToggle]\n  );\n\n  // ToDo: re-evaluate useCallback here.\n  /**\n   * Reset graph layers.\n   *\n   * @type {(function(): void)|*}\n   */\n  const onRevert = useCallback(() => {\n    setDataSetsToggle(() => ({}));\n  }, [setDataSetsToggle]);\n\n  /**\n   * Hide/show graph layers.\n   *\n   * @type {function(*): boolean}\n   */\n  const onToggle = useCallback(\n    id => {\n      const updatedToggle = !dataSetsToggle?.[id];\n      setDataSetsToggle(prevState => ({ ...prevState, [id]: updatedToggle }));\n      return updatedToggle;\n    },\n    [dataSetsToggle, setDataSetsToggle]\n  );\n\n  // ToDo: review return undefined if doesn't exist\n  /**\n   * Graph layer status.\n   *\n   * @type {function(*): boolean}\n   */\n  const getIsToggled = useCallback(id => dataSetsToggle?.[id] || false, [dataSetsToggle]);\n\n  return {\n    ...{ dataSetsToggle },\n    onHide,\n    onRevert,\n    onToggle,\n    getIsToggled\n  };\n};\n\nconst context = {\n  ChartContext,\n  DEFAULT_CONTEXT,\n  useChartContext,\n  useToggleData\n};\n\nexport { context as default, context, ChartContext, DEFAULT_CONTEXT, useChartContext, useToggleData };\n","import React from 'react';\nimport _cloneDeep from 'lodash/cloneDeep';\nimport { useChartContext, useToggleData } from './chartContext';\n\n/**\n * Wrapper for rendering an HTML based legend.\n *\n * @returns {Node}\n */\nconst ChartLegend = () => {\n  const { getIsToggled, onHide, onRevert, onToggle } = useToggleData();\n  const { chartSettings = {} } = useChartContext();\n  const { chartLegend, dataSets, padding = {}, xAxisProps = {} } = chartSettings;\n\n  if (!chartLegend) {\n    return null;\n  }\n\n  const legendProps = {\n    datum: { dataSets: _cloneDeep(dataSets) },\n    chart: {\n      hide: onHide,\n      revert: onRevert,\n      toggle: onToggle,\n      isToggled: getIsToggled\n    }\n  };\n\n  return (\n    <div\n      className={`curiosity-chartarea__legend${(xAxisProps?.label && '-axis-label-active') || ''}`}\n      style={{\n        marginLeft: (padding?.left && `${padding.left}px`) || 0,\n        marginRight: (padding?.right && `${padding.right}px`) || 0\n      }}\n    >\n      {(React.isValidElement(chartLegend) && React.cloneElement(chartLegend, { ...legendProps })) ||\n        chartLegend({ ...legendProps })}\n    </div>\n  );\n};\n\n/**\n * Prop types.\n */\nChartLegend.propTypes = {};\n\n/**\n * Default props.\n */\nChartLegend.defaultProps = {};\n\nexport { ChartLegend as default, ChartLegend };\n"],"names":["DEFAULT_CONTEXT","chartContainerRef","helpers","chartSettings","chartTooltipRef","dataSetsToggle","ChartContext","React","useChartContext","useContext","useToggleData","useAliasChartContext","contextDataSetsToggle","setDataSetsToggle","onHide","useCallback","id","prevState","onRevert","onToggle","updatedToggle","getIsToggled","context","ChartLegend","chartLegend","dataSets","padding","xAxisProps","legendProps","datum","_cloneDeep","chart","hide","revert","toggle","isToggled","className","label","style","marginLeft","left","marginRight","right","defaultProps"],"sourceRoot":""}