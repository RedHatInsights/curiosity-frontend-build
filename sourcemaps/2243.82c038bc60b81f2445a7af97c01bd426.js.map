{"version":3,"file":"js/2243.a0268d7e51bd4d97a87e.js","mappings":"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","sources":["webpack:///./src/components/inventoryCard/inventoryCardHelpers.js"],"sourcesContent":["import React from 'react';\nimport { cellWidth as PfCellWidth, SortByDirection, wrappable } from '@patternfly/react-table';\nimport _camelCase from 'lodash/camelCase';\nimport _isPlainObject from 'lodash/isPlainObject';\nimport { Tooltip } from '../tooltip/tooltip';\nimport { translate } from '../i18n/i18n';\nimport {\n  RHSM_API_QUERY_INVENTORY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * @memberof InventoryCard\n * @module InventoryCardHelpers\n */\n\n/**\n * ToDo: review setting up a transformed cell cache for already transformed cells.\n * - review using a simple state and key memoized component\n * - review using lru cache in a inventoryCardContext custom hook\n */\n\n/**\n * Apply product inventory config properties consistently.\n *\n * @param {Function|string|number} prop\n * @param {object} options\n * @param {Array|*} options.params\n * @returns {React.ReactNode}\n */\nconst applyConfigProperty = (prop, { params = [] } = {}) => {\n  let updatedProp = prop;\n\n  if (typeof prop === 'function') {\n    updatedProp = prop(...((Array.isArray(params) && params) || [params]));\n  }\n\n  if (typeof updatedProp === 'string' || typeof updatedProp === 'number' || React.isValidElement(updatedProp)) {\n    return updatedProp;\n  }\n\n  return undefined;\n};\n\n/**\n * Generate header and row cell configuration from filters.\n *\n * @param {object} params\n * @param {Array<{id: string, isStandalone: boolean, cell:(React.ReactNode|{ title: string }), cellWidth: number,\n *     header:(React.ReactNode|{ title: string }), onSort: Function, showEmptyCell: boolean, sortId: string,\n *     sortActive: boolean, sortDirection: string, transforms: Array}>} params.filters\n * @param {object} params.cellData\n * @param {object} params.meta\n * @param {string} params.productId\n * @param {object} params.session\n * @returns {{bodyCells: Array<{ title: React.ReactNode }>, headerCells: Array<{ title: React.ReactNode }>}}\n */\nconst applyHeaderRowCellFilters = ({ filters = [], cellData = {}, meta = {}, productId, session = {} } = {}) => {\n  const headerCells = [];\n  const bodyCells = [];\n\n  filters.forEach(\n    ({\n      isStandalone,\n      id,\n      cell,\n      cellWidth,\n      header,\n      onSort,\n      showEmptyCell = true,\n      sortId,\n      sortActive,\n      sortDirection,\n      transforms\n    }) => {\n      const headerCellUpdated = {\n        title: translate('curiosity-inventory.header', { context: [id, productId] }),\n        transforms: []\n      };\n      const bodyCellUpdated = { title: '' };\n\n      // set filtered base header and body cells, or if filter doesn't exist skip\n      if (cellData[id]) {\n        headerCellUpdated.title = cellData[id]?.title ?? id;\n        bodyCellUpdated.title = cellData[id]?.value ?? '';\n      } else if (isStandalone === true) {\n        headerCellUpdated.title = '';\n        bodyCellUpdated.title = '';\n      } else {\n        if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n          console.warn(`Warning: Filter \"${id}\" not found in \"table row\" response data.`, cellData);\n        }\n        if (showEmptyCell === false) {\n          return;\n        }\n      }\n\n      // set header cell title\n      if (header) {\n        const updatedHeaderCellTitle = applyConfigProperty(header, {\n          params: [{ ...cellData }, { ...session }, { ...meta }]\n        });\n        if (updatedHeaderCellTitle) {\n          headerCellUpdated.title = updatedHeaderCellTitle;\n        } else if (_isPlainObject(header)) {\n          Object.assign(headerCellUpdated, { ...header });\n        }\n\n        // set header cell tooltip\n        if (header.tooltip && headerCellUpdated.title) {\n          const updatedHeaderCellTooltip = applyConfigProperty(header.tooltip, {\n            params: [{ ...cellData }, { ...session }, { ...meta }]\n          });\n          if (updatedHeaderCellTooltip) {\n            headerCellUpdated.title = <Tooltip content={updatedHeaderCellTooltip}>{headerCellUpdated.title}</Tooltip>;\n          }\n\n          delete headerCellUpdated.tooltip;\n        }\n      }\n\n      // set header cell transforms\n      if (Array.isArray(headerCellUpdated.transforms)) {\n        if (Array.isArray(transforms)) {\n          headerCellUpdated.transforms = headerCellUpdated.transforms.concat([...transforms]);\n        }\n\n        if (typeof cellWidth === 'number') {\n          headerCellUpdated.transforms.push(PfCellWidth(cellWidth));\n        }\n      }\n\n      // set header cell onSort\n      if (typeof onSort === 'function') {\n        headerCellUpdated.onSort = obj => onSort({ ...cellData }, { ...obj, id: sortId || id });\n        headerCellUpdated.sortActive = sortActive;\n        headerCellUpdated.sortDirection = sortDirection;\n      }\n\n      // set body cell title\n      if (cell) {\n        const updatedBodyCellTitle = applyConfigProperty(cell, {\n          params: [{ ...cellData }, { ...session }, { ...meta }]\n        });\n        if (updatedBodyCellTitle) {\n          bodyCellUpdated.title = updatedBodyCellTitle;\n        } else if (_isPlainObject(cell)) {\n          Object.assign(bodyCellUpdated, { ...cell });\n        }\n\n        // set body cell tooltip\n        if (cell.tooltip && bodyCellUpdated.title) {\n          const updatedBodyCellTooltip = applyConfigProperty(cell.tooltip, {\n            params: [{ ...cellData }, { ...session }, { ...meta }]\n          });\n          if (updatedBodyCellTooltip) {\n            bodyCellUpdated.title = <Tooltip content={updatedBodyCellTooltip}>{bodyCellUpdated.title}</Tooltip>;\n          }\n\n          delete bodyCellUpdated.tooltip;\n        }\n      }\n\n      headerCells.push(headerCellUpdated);\n      bodyCells.push(bodyCellUpdated);\n    }\n  );\n\n  return {\n    headerCells,\n    bodyCells\n  };\n};\n\n/**\n * Shallow clone filter, and apply a column sort filter.\n *\n * @param {object} params\n * @param {{onSort: Function, sortActive: boolean, sortDirection: string, isSortDefault: boolean,\n *     sortDefaultInitialDirection: string}} params.filter\n * @param {Function} params.onSort\n * @param {object} params.query\n * @returns {{}}\n */\nconst applySortFilters = ({ filter = {}, onSort, query = {} } = {}) => {\n  const { id, sortId } = filter;\n  const updatedId = sortId || id;\n  const updatedFilter = { ...filter };\n  const hasSort = updatedFilter.onSort || onSort;\n\n  if (!updatedFilter.onSort && onSort) {\n    updatedFilter.onSort = onSort;\n  }\n\n  // set fallback for the active sorted column based on query\n  if (\n    hasSort &&\n    typeof updatedFilter.sortActive !== 'boolean' &&\n    query?.[RHSM_API_QUERY_SET_TYPES.SORT] &&\n    (query?.[RHSM_API_QUERY_SET_TYPES.SORT] === updatedId ||\n      _camelCase(query?.[RHSM_API_QUERY_SET_TYPES.SORT]) === updatedId)\n  ) {\n    updatedFilter.sortActive = true;\n  }\n\n  // set sort direction\n  if (hasSort && !updatedFilter.sortDirection && query?.[RHSM_API_QUERY_SET_TYPES.DIRECTION]) {\n    switch (query?.[RHSM_API_QUERY_SET_TYPES.DIRECTION]) {\n      case SORT_DIRECTION_TYPES.DESCENDING:\n        updatedFilter.sortDirection = SortByDirection.desc;\n        break;\n      default:\n        updatedFilter.sortDirection = SortByDirection.asc;\n        break;\n    }\n  }\n\n  if (\n    hasSort &&\n    !updatedFilter.sortActive &&\n    !query?.[RHSM_API_QUERY_SET_TYPES.SORT] &&\n    updatedFilter.isSortDefault === true\n  ) {\n    updatedFilter.sortActive = true;\n\n    if (updatedFilter.sortDefaultInitialDirection) {\n      updatedFilter.sortDirection = updatedFilter.sortDefaultInitialDirection;\n    }\n  }\n\n  return updatedFilter;\n};\n\n/**\n * Shallow clone and apply a consistent PF \"wrappable\" transformation config allowing column content to wrap.\n *\n * @param {object} params\n * @param {object} params.filter\n * @returns {{}}\n */\nconst applyWrappableFilters = ({ filter = {} } = {}) => {\n  const updatedFilter = { ...filter };\n\n  if (Array.isArray(updatedFilter.transforms)) {\n    updatedFilter.transforms.push(wrappable);\n  } else {\n    updatedFilter.transforms = [wrappable];\n  }\n\n  return updatedFilter;\n};\n\n/**\n * Shallow clone and apply, sequence specific, additional properties to filters.\n *\n * @param {object} params\n * @param {Array<{id: string, cell:*, cellWidth: number, header:*, onSort: Function,\n *     showEmptyCell: boolean, sortId: string, sortActive: boolean,\n *     sortDirection: string, transforms: Array, isSortDefault: boolean,\n *     sortDefaultInitialDirection: string}>} params.filters\n * @param {Function} params.onSort\n * @param {object} params.query\n * @returns {Array}\n */\nconst parseInventoryFilters = ({ filters = [], onSort, query = {} } = {}) =>\n  [...filters].map(filter => {\n    const updatedFilter = { ...filter };\n\n    if (updatedFilter.isSortable) {\n      Object.assign(updatedFilter, applySortFilters({ filter: updatedFilter, onSort, query }));\n    }\n\n    if (updatedFilter.isWrappable) {\n      Object.assign(updatedFilter, applyWrappableFilters({ filter: updatedFilter }));\n    }\n\n    return updatedFilter;\n  });\n\n/**\n * Parse and return formatted/filtered table cells, and apply table filters.\n *\n * @param {object} params\n * @param {Array<{id: string, cell:(React.ReactNode|{ title: string }), cellWidth: number,\n *     header:(React.ReactNode|{ title: string }), onSort: Function, showEmptyCell: boolean,\n *     sortId: string, sortActive: boolean, sortDirection: string,\n *     transforms: Array}>} params.filters\n * @param {object} params.cellData\n * @param {object} params.meta\n * @param {string} params.productId\n * @param {object} params.session\n * @returns {{columnHeaders: Array<{ title: React.ReactNode }>, cells: Array<{ title: React.ReactNode }>, data: {}}}\n */\nconst parseRowCellsListData = ({ filters = [], cellData = {}, meta = {}, productId, session = {} } = {}) => {\n  const updatedColumnHeaders = [];\n  const updatedCells = [];\n  const allCells = {};\n\n  // Apply basic translation and value\n  Object.entries(cellData).forEach(([key, value = '']) => {\n    allCells[key] = {\n      title: translate('curiosity-inventory.header', { context: [key, productId] }),\n      value\n    };\n\n    updatedColumnHeaders.push(allCells[key].title);\n    updatedCells.push(value || '...');\n  });\n\n  // Apply filters to header and cell values\n  if (filters?.length && Object.keys(allCells).length) {\n    updatedColumnHeaders.length = 0;\n    updatedCells.length = 0;\n\n    const { headerCells = [], bodyCells = [] } = applyHeaderRowCellFilters({\n      filters,\n      cellData: allCells,\n      meta,\n      productId,\n      session\n    });\n\n    updatedColumnHeaders.push(...headerCells);\n    updatedCells.push(...bodyCells);\n  }\n\n  return {\n    columnHeaders: updatedColumnHeaders,\n    cells: updatedCells,\n    data: { ...allCells }\n  };\n};\n\nconst inventoryCardHelpers = {\n  applyConfigProperty,\n  applyHeaderRowCellFilters,\n  applySortFilters,\n  applyWrappableFilters,\n  parseInventoryFilters,\n  parseRowCellsListData\n};\n\nexport {\n  inventoryCardHelpers as default,\n  inventoryCardHelpers,\n  applyConfigProperty,\n  applyHeaderRowCellFilters,\n  applySortFilters,\n  applyWrappableFilters,\n  parseInventoryFilters,\n  parseRowCellsListData\n};\n"],"names":["applyConfigProperty","prop","_ref$params","arguments","length","undefined","params","updatedProp","apply","_toConsumableArray","Array","isArray","React","applyHeaderRowCellFilters","_ref2","_ref2$filters","filters","_ref2$cellData","cellData","_ref2$meta","meta","productId","_ref2$session","session","headerCells","bodyCells","forEach","_ref3","_cellData$id$title","_cellData$id","_cellData$id$value","_cellData$id2","isStandalone","id","cell","cellWidth","header","onSort","_ref3$showEmptyCell","showEmptyCell","sortId","sortActive","sortDirection","transforms","headerCellUpdated","title","translate","context","bodyCellUpdated","value","helpers","console","warn","concat","updatedHeaderCellTitle","_objectSpread","_isPlainObject","Object","assign","tooltip","updatedHeaderCellTooltip","Tooltip","content","push","PfCellWidth","obj","updatedBodyCellTitle","updatedBodyCellTooltip","applySortFilters","_ref4","_ref4$filter","filter","_ref4$query","query","updatedId","updatedFilter","hasSort","RHSM_API_QUERY_SET_TYPES","_camelCase","SORT_DIRECTION_TYPES","SortByDirection","isSortDefault","sortDefaultInitialDirection","applyWrappableFilters","_ref5$filter","wrappable","parseInventoryFilters","_ref6","_ref6$filters","_ref6$query","map","isSortable","isWrappable","parseRowCellsListData","_ref7","_ref7$filters","_ref7$cellData","_ref7$meta","_ref7$session","updatedColumnHeaders","updatedCells","allCells","entries","_ref8","_ref9","_slicedToArray","key","_ref9$","keys","_applyHeaderRowCellFi","_applyHeaderRowCellFi2","_applyHeaderRowCellFi3","columnHeaders","cells","data","inventoryCardHelpers"],"sourceRoot":""}