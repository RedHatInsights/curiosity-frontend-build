{"version":3,"file":"js/5242.1643662791925.2ffec8357d21e0fda301.js","mappings":"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","sources":["webpack:///./src/components/inventoryCard/inventoryCardHelpers.js","webpack:///./src/components/inventoryGuests/inventoryGuests.js","webpack:///./src/components/inventoryGuests/inventoryGuestsContext.js","webpack:///./src/components/productView/productViewContext.js","webpack:///./node_modules/fast-shallow-equal/index.js","webpack:///./node_modules/react-use/esm/useShallowCompareEffect.js","webpack:///./node_modules/react-use/esm/useCustomCompareEffect.js"],"sourcesContent":["import React from 'react';\nimport { cellWidth as PfCellWidth, SortByDirection, wrappable } from '@patternfly/react-table';\nimport _camelCase from 'lodash/camelCase';\nimport { translate } from '../i18n/i18n';\nimport {\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_TYPES\n} from '../../types/rhsmApiTypes';\nimport { helpers } from '../../common';\n\n/**\n * Apply sort filter to filters.\n *\n * @param {object} params\n * @param {{ onSort: Function, sortActive: boolean, sortDirection: string, isSortDefault: boolean,\n *     sortDefaultInitialDirection: string }} params.filter\n * @param {Function} params.onSort\n * @param {object} params.query\n * @returns {object}\n */\nconst applySortFilters = ({ filter = {}, onSort, query = {} }) => {\n  const { id, sortId } = filter;\n  const updatedId = sortId || id;\n  const updatedFilter = { ...filter };\n  const hasSort = updatedFilter.onSort || onSort;\n\n  if (!updatedFilter.onSort && onSort) {\n    updatedFilter.onSort = onSort;\n  }\n\n  // set fallback for the active sorted column based on query\n  if (\n    hasSort &&\n    typeof updatedFilter.sortActive !== 'boolean' &&\n    query?.[RHSM_API_QUERY_TYPES.SORT] &&\n    (query?.[RHSM_API_QUERY_TYPES.SORT] === updatedId || _camelCase(query?.[RHSM_API_QUERY_TYPES.SORT]) === updatedId)\n  ) {\n    updatedFilter.sortActive = true;\n  }\n\n  // set sort direction\n  if (hasSort && !updatedFilter.sortDirection && query?.[RHSM_API_QUERY_TYPES.DIRECTION]) {\n    switch (query?.[RHSM_API_QUERY_TYPES.DIRECTION]) {\n      case SORT_DIRECTION_TYPES.DESCENDING:\n        updatedFilter.sortDirection = SortByDirection.desc;\n        break;\n      default:\n        updatedFilter.sortDirection = SortByDirection.asc;\n        break;\n    }\n  }\n\n  if (\n    hasSort &&\n    !updatedFilter.sortActive &&\n    !query?.[RHSM_API_QUERY_TYPES.SORT] &&\n    updatedFilter.isSortDefault === true\n  ) {\n    updatedFilter.sortActive = true;\n\n    if (updatedFilter.sortDefaultInitialDirection) {\n      updatedFilter.sortDirection = updatedFilter.sortDefaultInitialDirection;\n    }\n  }\n\n  return updatedFilter;\n};\n\nconst applyWrappableFilters = ({ filter = {} }) => {\n  const updatedFilter = { ...filter };\n\n  if (Array.isArray(updatedFilter.transforms)) {\n    updatedFilter.transforms.push(wrappable);\n  } else {\n    updatedFilter.transforms = [wrappable];\n  }\n\n  return updatedFilter;\n};\n\n/**\n * Apply additional properties to filters.\n *\n * @param {object} params\n * @param {Array} params.filters\n * @param {Function} params.onSort\n * @param {object} params.query\n * @returns {Array}\n */\nconst parseInventoryFilters = ({ filters = [], onSort, query = {} }) =>\n  [...filters].map(filter => {\n    const updatedFilter = { ...filter };\n\n    if (updatedFilter.isSortable) {\n      Object.assign(updatedFilter, applySortFilters({ filter: updatedFilter, onSort, query }));\n    }\n\n    if (updatedFilter.isWrappable) {\n      Object.assign(updatedFilter, applyWrappableFilters({ filter: updatedFilter }));\n    }\n\n    return updatedFilter;\n  });\n\n/**\n * Parse and return formatted/filtered table cells, and apply table filters.\n *\n * @param {object} params\n * @param {Array} params.filters\n * @param {object} params.cellData\n * @param {object} params.session\n * @returns {{columnHeaders: Array, cells: Array, data: object}}\n */\nconst parseRowCellsListData = ({ filters = [], cellData = {}, session = {} }) => {\n  const updatedColumnHeaders = [];\n  const updatedCells = [];\n  const allCells = {};\n\n  // Apply basic translation and value\n  Object.entries(cellData).forEach(([key, value]) => {\n    allCells[key] = {\n      title: translate('curiosity-inventory.header', { context: key }),\n      value\n    };\n\n    updatedColumnHeaders.push(allCells[key].title);\n    updatedCells.push(value);\n  });\n\n  // Apply filters to header and cell values\n  if (filters?.length) {\n    updatedColumnHeaders.length = 0;\n    updatedCells.length = 0;\n\n    filters.forEach(({ id, cell, cellWidth, header, onSort, sortId, sortActive, sortDirection, transforms }) => {\n      let headerUpdated;\n      let cellUpdated;\n\n      if (allCells[id]) {\n        headerUpdated = allCells[id]?.title ?? id;\n        cellUpdated = allCells[id]?.value ?? '';\n      } else if (id) {\n        headerUpdated = translate('curiosity-inventory.header', { context: id });\n        cellUpdated = '';\n      }\n\n      // set table header cell filter params\n      if (header) {\n        headerUpdated = (typeof header === 'function' && header({ ...allCells })) || header;\n      }\n\n      if (\n        typeof headerUpdated === 'string' ||\n        typeof headerUpdated === 'number' ||\n        React.isValidElement(headerUpdated)\n      ) {\n        headerUpdated = {\n          title: headerUpdated\n        };\n      }\n\n      if (headerUpdated) {\n        headerUpdated.transforms = [];\n\n        if (Array.isArray(transforms)) {\n          headerUpdated.transforms = headerUpdated.transforms.concat([...transforms]);\n        }\n\n        if (typeof cellWidth === 'number') {\n          headerUpdated.transforms.push(PfCellWidth(cellWidth));\n        }\n      }\n\n      if (typeof onSort === 'function') {\n        headerUpdated = {\n          ...headerUpdated,\n          onSort: obj => onSort({ ...allCells }, { ...obj, id: sortId || id }),\n          sortActive,\n          sortDirection\n        };\n      }\n\n      // set table row cell filter params\n      if (cell) {\n        cellUpdated = typeof cell === 'function' ? cell({ ...allCells }, { ...session }) : cell;\n      }\n\n      if (typeof cellUpdated === 'string' || typeof cellUpdated === 'number' || React.isValidElement(cellUpdated)) {\n        cellUpdated = {\n          title: cellUpdated\n        };\n      } else if (!cellUpdated?.title) {\n        if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n          console.error(\n            `PF table throws an error when cell values don't conform to what it is expecting, or align exactly to column headers.\n            \\n\\nSee cell ID=${id} with VALUE=${cellUpdated}`\n          );\n        }\n\n        cellUpdated = {\n          title: ''\n        };\n      }\n\n      updatedColumnHeaders.push(headerUpdated);\n      updatedCells.push(cellUpdated);\n    });\n  }\n\n  return {\n    columnHeaders: updatedColumnHeaders,\n    cells: updatedCells,\n    data: { ...allCells }\n  };\n};\n\nconst inventoryCardHelpers = {\n  applySortFilters,\n  applyWrappableFilters,\n  parseInventoryFilters,\n  parseRowCellsListData\n};\n\nexport {\n  inventoryCardHelpers as default,\n  inventoryCardHelpers,\n  applySortFilters,\n  applyWrappableFilters,\n  parseInventoryFilters,\n  parseRowCellsListData\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { TableVariant } from '@patternfly/react-table';\nimport { useProductInventoryGuestsConfig, useProductInventoryGuestsQuery } from '../productView/productViewContext';\nimport { connect, reduxSelectors } from '../../redux';\nimport { Loader } from '../loader/loader';\nimport { inventoryCardHelpers } from '../inventoryCard/inventoryCardHelpers';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { Table } from '../table/table';\nimport { useGetGuestsInventory, useOnScroll } from './inventoryGuestsContext';\n\n/**\n * A system inventory guests component.\n *\n * @param {object} props\n * @param {number} props.defaultPerPage\n * @param {string} props.id\n * @param {number} props.numberOfGuests\n * @param {object} props.session\n * @param {Function} props.useGetGuestsInventory\n * @param {Function} props.useOnScroll\n * @param {Function} props.useProductInventoryGuestsQuery\n * @param {Function} props.useProductInventoryGuestsConfig\n * @fires onScroll\n * @returns {Node}\n */\nconst InventoryGuests = ({\n  defaultPerPage,\n  id,\n  numberOfGuests,\n  session,\n  useGetGuestsInventory: useAliasGetGuestsInventory,\n  useOnScroll: useAliasOnScroll,\n  useProductInventoryGuestsQuery: useAliasProductInventoryGuestsQuery,\n  useProductInventoryGuestsConfig: useAliasProductInventoryGuestsConfig\n}) => {\n  const [previousData, setPreviousData] = useState([]);\n  const { filters: filterGuestsData } = useAliasProductInventoryGuestsConfig();\n\n  const query = useAliasProductInventoryGuestsQuery({ options: { overrideId: id } });\n  const { [RHSM_API_QUERY_SET_TYPES.OFFSET]: currentPage } = query;\n\n  const { error, pending, data = {} } = useAliasGetGuestsInventory(id);\n  const { data: listData = [] } = data;\n\n  const onScroll = useAliasOnScroll(id, () => {\n    const updatedData = [...previousData, ...(listData || [])];\n    setPreviousData(updatedData);\n  });\n\n  /**\n   * Render a scroll table loader.\n   *\n   * @returns {Node}\n   */\n  const renderLoader = () => {\n    if (currentPage > 0 && pending) {\n      const scrollLoader = (\n        <Loader\n          variant=\"table\"\n          tableProps={{\n            borders: false,\n            colCount: filterGuestsData?.length || (listData?.[0] && Object.keys(listData[0]).length) || 1,\n            colWidth: (filterGuestsData?.length && filterGuestsData.map(({ cellWidth }) => cellWidth)) || [],\n            rowCount: 0,\n            variant: TableVariant.compact\n          }}\n        />\n      );\n\n      return <div className=\"curiosity-table-scroll-loader__custom\">{scrollLoader}</div>;\n    }\n\n    return null;\n  };\n\n  /**\n   * Render a guests table.\n   *\n   * @returns {Node}\n   */\n  const renderTable = () => {\n    let updatedColumnHeaders = [];\n\n    const updatedRows = [...previousData, ...(listData || [])].map(({ ...cellData }) => {\n      const { columnHeaders, cells } = inventoryCardHelpers.parseRowCellsListData({\n        filters: filterGuestsData,\n        cellData,\n        session\n      });\n\n      updatedColumnHeaders = columnHeaders;\n\n      return {\n        cells\n      };\n    });\n\n    // ToDo: Review having the height be a calc value\n    // Include the table header\n    let updatedHeight = (numberOfGuests + 1) * 42;\n    updatedHeight = (updatedHeight < 275 && updatedHeight) || 275;\n\n    return (\n      <div className=\"curiosity-table-scroll\" style={{ height: `${updatedHeight}px` }}>\n        <div\n          className={`curiosity-table-scroll-list${(updatedHeight < 275 && '__no-scroll') || ''}`}\n          onScroll={onScroll}\n        >\n          {renderLoader()}\n          {(updatedRows.length && (\n            <Table\n              borders={false}\n              variant={TableVariant.compact}\n              className=\"curiosity-guests-list\"\n              columnHeaders={updatedColumnHeaders}\n              rows={updatedRows}\n            />\n          )) ||\n            null}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className={`fadein ${(error && 'blur') || ''}`}>\n      {pending && currentPage === 0 && (\n        <Loader\n          variant=\"table\"\n          tableProps={{\n            borders: false,\n            className: 'curiosity-guests-list',\n            colCount: filterGuestsData?.length || (listData?.[0] && Object.keys(listData[0]).length) || 1,\n            colWidth: (filterGuestsData?.length && filterGuestsData.map(({ cellWidth }) => cellWidth)) || [],\n            rowCount: numberOfGuests < defaultPerPage ? numberOfGuests : defaultPerPage,\n            variant: TableVariant.compact\n          }}\n        />\n      )}\n      {((!pending && currentPage === 0) || currentPage > 0) && renderTable()}\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductInventoryGuestsConfig: Function, session: object, useOnScroll: Function, numberOfGuests: number,\n *     id: string, useGetGuestsInventory: Function, useProductInventoryGuestsQuery: Function, defaultPerPage: number}}\n */\nInventoryGuests.propTypes = {\n  defaultPerPage: PropTypes.number,\n  id: PropTypes.string.isRequired,\n  numberOfGuests: PropTypes.number.isRequired,\n  session: PropTypes.object,\n  useGetGuestsInventory: PropTypes.func,\n  useOnScroll: PropTypes.func,\n  useProductInventoryGuestsConfig: PropTypes.func,\n  useProductInventoryGuestsQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductInventoryGuestsConfig: Function, session: object, useOnScroll: Function,\n *     useGetGuestsInventory: Function, useProductInventoryGuestsQuery: Function, defaultPerPage: number}}\n */\nInventoryGuests.defaultProps = {\n  defaultPerPage: 5,\n  session: {},\n  useGetGuestsInventory,\n  useOnScroll,\n  useProductInventoryGuestsConfig,\n  useProductInventoryGuestsQuery\n};\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.user.makeUserSession();\n\nconst ConnectedInventoryGuests = connect(makeMapStateToProps)(InventoryGuests);\n\nexport { ConnectedInventoryGuests as default, ConnectedInventoryGuests, InventoryGuests };\n","import { useUnmount, useShallowCompareEffect } from 'react-use';\nimport { reduxActions, reduxTypes, storeHooks } from '../../redux';\nimport { useProductInventoryGuestsQuery } from '../productView/productViewContext';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\n\n/**\n * Guests inventory selector response.\n *\n * @param {string} id\n * @param {object} options\n * @param {Function} options.useSelectorsResponse\n * @returns {{data: (*|{}), pending: (*|boolean), fulfilled, error}}\n */\nconst useSelectorsGuestsInventory = (\n  id,\n  { useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse } = {}\n) => {\n  const { error, cancelled, fulfilled, pending, data } = useAliasSelectorsResponse(\n    ({ inventory }) => inventory?.hostsGuests?.[id]\n  );\n\n  return {\n    error,\n    fulfilled,\n    pending: pending || cancelled || false,\n    data: (data?.length === 1 && data[0]) || data || {}\n  };\n};\n\n/**\n * Combined Redux RHSM Actions, getHostsInventoryGuests, and inventory selector response.\n *\n * @param {string} id\n * @param {object} options\n * @param {Function} options.getInventory\n * @param {Function} options.useDispatch\n * @param {Function} options.useProductInventoryQuery\n * @param {Function} options.useSelectorsInventory\n * @returns {Function}\n */\nconst useGetGuestsInventory = (\n  id,\n  {\n    getInventory = reduxActions.rhsm.getHostsInventoryGuests,\n    useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n    useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventoryGuestsQuery,\n    useSelectorsInventory: useAliasSelectorsInventory = useSelectorsGuestsInventory\n  } = {}\n) => {\n  const query = useAliasProductInventoryQuery({ options: { overrideId: id } });\n  const dispatch = useAliasDispatch();\n  const response = useAliasSelectorsInventory(id);\n\n  useShallowCompareEffect(() => {\n    getInventory(id, query)(dispatch);\n  }, [dispatch, id, query]);\n\n  return {\n    ...response\n  };\n};\n\n/**\n * Use paging as onScroll event for guests inventory.\n *\n * @param {string} id\n * @param {Function} successCallback\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useSelectorsInventory\n * @param {Function} options.useProductInventoryQuery\n * @returns {Function}\n */\nconst useOnScroll = (\n  id,\n  successCallback,\n  {\n    useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n    useSelectorsInventory: useAliasSelectorsInventory = useSelectorsGuestsInventory,\n    useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventoryGuestsQuery\n  } = {}\n) => {\n  const dispatch = useAliasDispatch();\n  const { pending, data = {} } = useAliasSelectorsInventory(id);\n  const { count: numberOfGuests } = data?.meta || {};\n\n  const query = useAliasProductInventoryQuery({ options: { overrideId: id } });\n  const { [RHSM_API_QUERY_SET_TYPES.LIMIT]: limit, [RHSM_API_QUERY_SET_TYPES.OFFSET]: currentPage } = query;\n\n  /**\n   * Reset paging in scenarios where inventory is filtered, or guests is collapsed.\n   */\n  useUnmount(() => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_GUESTS_LIST,\n        viewId: id\n      }\n    ]);\n  });\n\n  /**\n   * On scroll, dispatch type.\n   *\n   * @event onScroll\n   * @param {object} event\n   * @returns {void}\n   */\n  return event => {\n    const { target } = event;\n    const bottom = target.scrollHeight - target.scrollTop === target.clientHeight;\n\n    if (numberOfGuests > (currentPage + 1) * limit && bottom && !pending) {\n      if (typeof successCallback === 'function') {\n        successCallback(event);\n      }\n\n      dispatch([\n        {\n          type: reduxTypes.query.SET_QUERY_RHSM_GUESTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.OFFSET],\n          viewId: id,\n          [RHSM_API_QUERY_SET_TYPES.OFFSET]: currentPage + 1\n        },\n        {\n          type: reduxTypes.query.SET_QUERY_RHSM_GUESTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.LIMIT],\n          viewId: id,\n          [RHSM_API_QUERY_SET_TYPES.LIMIT]: limit\n        }\n      ]);\n    }\n  };\n};\n\nconst context = {\n  useGetGuestsInventory,\n  useOnScroll,\n  useSelectorsGuestsInventory\n};\n\nexport { context as default, context, useGetGuestsInventory, useOnScroll, useSelectorsGuestsInventory };\n","import React, { useCallback, useContext } from 'react';\nimport { reduxHelpers } from '../../redux/common';\nimport { storeHooks } from '../../redux/hooks';\nimport { RHSM_API_QUERY_TYPES, rhsmApiTypes } from '../../types/rhsmApiTypes';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Route context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{}, helpers.noop];\n\nconst ProductViewContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated product view context.\n *\n * @returns {React.Context<{}>}\n */\nconst useProductViewContext = () => useContext(ProductViewContext);\n\n/**\n * Return a query object from initial product config and Redux store.\n *\n * @param {string} queryType An identifier used to pull from both config and Redux, they should named the same.\n * @param {object} options\n * @param {string} options.overrideId A custom identifier, used for scenarios like the Guest inventory IDs\n * @param {object} options.useProductViewContext\n * @returns {object}\n */\nconst useProductQueryFactory = (\n  queryType,\n  { overrideId, useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}\n) => {\n  const { [queryType]: initialQuery, productId, viewId } = useAliasProductViewContext();\n  const queryOverride = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[overrideId], undefined);\n  const queryProduct = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[productId], undefined);\n  const queryView = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[viewId], undefined);\n\n  return {\n    ...initialQuery,\n    ...queryOverride,\n    ...queryProduct,\n    ...queryView\n  };\n};\n\n/**\n * Return a base product query\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductQuery = ({ queryType = 'query', options } = {}) => useProductQueryFactory(queryType, options);\n\n/**\n * Return the graph query based off of tally and capacity.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductGraphTallyQuery = ({\n  queryType = 'graphTallyQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_REPORT_CAPACITY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return the inventory query for guests. Use fallback/defaults for guests offset, limit.\n *\n * @param {object} options\n * @param {number} options.defaultLimit\n * @param {number} options.defaultOffset\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryGuestsQuery = ({\n  defaultLimit = 100,\n  defaultOffset = 0,\n  queryType = 'inventoryGuestsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_GUESTS_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      [RHSM_API_QUERY_SET_TYPES.LIMIT]: defaultLimit,\n      [RHSM_API_QUERY_SET_TYPES.OFFSET]: defaultOffset,\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for hosts.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryHostsQuery = ({\n  queryType = 'inventoryHostsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for subscriptions.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventorySubscriptionsQuery = ({\n  queryType = 'inventorySubscriptionsQuery',\n  schemaCheck = rhsmApiTypes.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Get a filtered product configuration context.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductViewContext\n * @returns {object}\n */\nconst useProductContext = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductViewContext: useAliasProductViewContext = useProductViewContext\n} = {}) => {\n  const { [RHSM_API_QUERY_TYPES.UOM]: uomFilter } = useAliasProductQuery();\n  const {\n    initialGraphFilters = [],\n    initialInventoryFilters = [],\n    initialSubscriptionsInventoryFilters = [],\n    productContextFilterUom,\n    ...config\n  } = useAliasProductViewContext();\n\n  const applyUomFilter = useCallback(() => {\n    if (productContextFilterUom === true) {\n      const filterFilters = ({ id, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(uomFilter, 'i').test(id);\n      };\n\n      return {\n        ...config,\n        initialGraphFilters: initialGraphFilters.filter(filterFilters),\n        initialInventoryFilters: initialInventoryFilters.filter(filterFilters),\n        initialSubscriptionsInventoryFilters: initialSubscriptionsInventoryFilters.filter(filterFilters)\n      };\n    }\n\n    return {\n      ...config,\n      initialGraphFilters,\n      initialInventoryFilters,\n      initialSubscriptionsInventoryFilters\n    };\n  }, [\n    config,\n    initialGraphFilters,\n    initialInventoryFilters,\n    initialSubscriptionsInventoryFilters,\n    productContextFilterUom,\n    uomFilter\n  ]);\n\n  return applyUomFilter();\n};\n\n/**\n * Return product identifiers.\n *\n * @param {object} options\n * @param {Function} options.useProductViewContext\n * @returns {{productLabel: string, viewId: string, productId: string, productGroup: string}}\n */\nconst useProduct = ({ useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}) => {\n  const { productGroup, productId, productLabel, viewId } = useAliasProductViewContext();\n  return {\n    productGroup,\n    productId,\n    productLabel,\n    viewId\n  };\n};\n\n/**\n * Return graph configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductGraphConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialGraphFilters, initialGraphSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGraphFilters,\n    settings: initialGraphSettings\n  };\n};\n\n/**\n * Return guests inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryGuestsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { inventoryGuestsQuery = {}, initialGuestsFilters, initialGuestsSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGuestsFilters,\n    initialQuery: inventoryGuestsQuery,\n    settings: initialGuestsSettings\n  };\n};\n\n/**\n * Return hosts inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryHostsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialInventoryFilters, initialInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialInventoryFilters,\n    settings: initialInventorySettings\n  };\n};\n\n/**\n * Return subscriptions inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventorySubscriptionsConfig = ({\n  useProductContext: useAliasProductContext = useProductContext\n} = {}) => {\n  const { initialSubscriptionsInventoryFilters, initialSubscriptionsInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialSubscriptionsInventoryFilters,\n    settings: initialSubscriptionsInventorySettings\n  };\n};\n\n/**\n * Return primary toolbar configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductToolbarConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialToolbarFilters, initialToolbarSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialToolbarFilters,\n    settings: initialToolbarSettings\n  };\n};\n\nconst context = {\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useQuery: useProductQuery,\n  useQueryFactory: useProductQueryFactory,\n  useGraphTallyQuery: useProductGraphTallyQuery,\n  useInventoryGuestsQuery: useProductInventoryGuestsQuery,\n  useInventoryHostsQuery: useProductInventoryHostsQuery,\n  useInventorySubscriptionsQuery: useProductInventorySubscriptionsQuery,\n  useProduct,\n  useGraphConfig: useProductGraphConfig,\n  useInventoryGuestsConfig: useProductInventoryGuestsConfig,\n  useInventoryHostsConfig: useProductInventoryHostsConfig,\n  useInventorySubscriptionsConfig: useProductInventorySubscriptionsConfig,\n  useToolbarConfig: useProductToolbarConfig\n};\n\nexport {\n  context as default,\n  context,\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useProductQuery,\n  useProductQueryFactory,\n  useProductGraphTallyQuery,\n  useProductInventoryGuestsQuery,\n  useProductInventoryHostsQuery,\n  useProductInventorySubscriptionsQuery,\n  useProduct,\n  useProductGraphConfig,\n  useProductInventoryGuestsConfig,\n  useProductInventoryHostsConfig,\n  useProductInventorySubscriptionsConfig,\n  useProductToolbarConfig\n};\n","var keyList = Object.keys;\n\nexports.equal = function equal (a, b) {\n  if (a === b) return true;\n  if (!(a instanceof Object) || !(b instanceof Object)) return false;\n\n  var keys = keyList(a);\n  var length = keys.length;\n\n  for (var i = 0; i < length; i++)\n    if (!(keys[i] in b)) return false;\n\n  for (var i = 0; i < length; i++)\n    if (a[keys[i]] !== b[keys[i]]) return false;\n\n  return length === keyList(b).length;\n};\n","import { equal as isShallowEqual } from 'fast-shallow-equal';\nimport useCustomCompareEffect from './useCustomCompareEffect';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar shallowEqualDepsList = function (prevDeps, nextDeps) {\n    return prevDeps.every(function (dep, index) { return isShallowEqual(dep, nextDeps[index]); });\n};\nvar useShallowCompareEffect = function (effect, deps) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useShallowCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useShallowCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n    }\n    useCustomCompareEffect(effect, deps, shallowEqualDepsList);\n};\nexport default useShallowCompareEffect;\n","import { useEffect, useRef } from 'react';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar useCustomCompareEffect = function (effect, deps, depsEqual) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useCustomCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useCustomCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n        if (typeof depsEqual !== 'function') {\n            console.warn('`useCustomCompareEffect` should be used with depsEqual callback for comparing deps list');\n        }\n    }\n    var ref = useRef(undefined);\n    if (!ref.current || !depsEqual(deps, ref.current)) {\n        ref.current = deps;\n    }\n    useEffect(effect, ref.current);\n};\nexport default useCustomCompareEffect;\n"],"names":["applySortFilters","filter","onSort","query","id","updatedId","sortId","updatedFilter","hasSort","sortActive","RHSM_API_QUERY_TYPES","_camelCase","sortDirection","SORT_DIRECTION_TYPES","SortByDirection","isSortDefault","sortDefaultInitialDirection","applyWrappableFilters","Array","isArray","transforms","push","wrappable","parseInventoryFilters","filters","map","isSortable","Object","assign","isWrappable","parseRowCellsListData","cellData","session","updatedColumnHeaders","updatedCells","allCells","entries","forEach","key","value","title","translate","context","length","headerUpdated","cellUpdated","cell","cellWidth","header","React","concat","PfCellWidth","obj","helpers","console","error","columnHeaders","cells","data","inventoryCardHelpers","InventoryGuests","updatedRows","updatedHeight","defaultPerPage","numberOfGuests","useAliasGetGuestsInventory","useGetGuestsInventory","useAliasOnScroll","useOnScroll","useAliasProductInventoryGuestsQuery","useProductInventoryGuestsQuery","useAliasProductInventoryGuestsConfig","useProductInventoryGuestsConfig","useState","previousData","setPreviousData","filterGuestsData","currentPage","options","overrideId","RHSM_API_QUERY_SET_TYPES","pending","listData","onScroll","updatedData","className","Loader","variant","tableProps","borders","colCount","keys","colWidth","rowCount","TableVariant","style","height","scrollLoader","renderLoader","Table","rows","defaultProps","makeMapStateToProps","reduxSelectors","ConnectedInventoryGuests","connect","useSelectorsGuestsInventory","useSelectorsResponse","useAliasSelectorsResponse","storeHooks","inventory","hostsGuests","cancelled","fulfilled","getInventory","reduxActions","useDispatch","useAliasDispatch","useProductInventoryQuery","useAliasProductInventoryQuery","useSelectorsInventory","useAliasSelectorsInventory","dispatch","response","useShallowCompareEffect","successCallback","meta","count","limit","useUnmount","type","reduxTypes","viewId","event","target","bottom","scrollHeight","scrollTop","clientHeight","DEFAULT_CONTEXT","ProductViewContext","useProductViewContext","useContext","useProductQueryFactory","queryType","useAliasProductViewContext","initialQuery","productId","queryOverride","view","undefined","queryProduct","queryView","useProductQuery","useProductGraphTallyQuery","schemaCheck","rhsmApiTypes","reduxHelpers","defaultLimit","defaultOffset","useProductInventoryHostsQuery","useProductInventorySubscriptionsQuery","useProductContext","useAliasProductQuery","uomFilter","initialGraphFilters","initialInventoryFilters","initialSubscriptionsInventoryFilters","productContextFilterUom","config","applyUomFilter","useCallback","filterFilters","isOptional","RegExp","test","useProduct","productGroup","productLabel","useProductGraphConfig","useAliasProductContext","initialGraphSettings","settings","inventoryGuestsQuery","initialGuestsFilters","initialGuestsSettings","useProductInventoryHostsConfig","initialInventorySettings","useProductInventorySubscriptionsConfig","initialSubscriptionsInventorySettings","useProductToolbarConfig","initialToolbarFilters","initialToolbarSettings","useQuery","useQueryFactory","useGraphTallyQuery","useInventoryGuestsQuery","useInventoryHostsQuery","useInventorySubscriptionsQuery","useGraphConfig","useInventoryGuestsConfig","useInventoryHostsConfig","useInventorySubscriptionsConfig","useToolbarConfig","keyList","exports","a","b","i","shallowEqualDepsList","prevDeps","nextDeps","every","dep","index","effect","deps","depsEqual","ref","useRef","current","useEffect"],"sourceRoot":""}