{"version":3,"file":"js/1799.704542a24a2e7ca58be7.js","mappings":"iRAmBMA,EAAiB,SAAC,GAIlB,IAiBsBC,EAClBC,EArBRC,EAGI,EAHJA,UACuBC,EAEnB,EAFJC,sBAC2BC,EACvB,EADJC,0BAEQC,EAAYJ,IAAZI,QACFC,EAAQH,IAC8BI,EAAgBD,EAAnDE,EAAAA,GAAAA,aAEHC,EAAiB,CACrBC,oBAAqBC,EAAAA,iBAAAA,4BAA6CJ,GAClEK,gBAAiB,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,aAAcC,EAAvB,EAAuBA,KAAvB,OACfJ,EAAAA,iBAAAA,gBAAiC,CAC/BI,KAAAA,EACAC,KAAMH,EAAKG,KACXC,aAAcH,EAAaE,KAC3BT,YAAAA,KAEJW,gBAAiBP,EAAAA,iBAAAA,iBA6BnB,OACE,kBAAC,EAAAQ,MAAD,eACEC,IAAG,gBAAWC,KAAKC,UAAUhB,KACzBG,EAFN,CAGEc,UA9BsBzB,EA8BME,EA7BxBD,EAAW,SAAAqB,GACf,IAAMI,EAAe,CACnB1B,KAAMA,EAAKsB,GACXK,GAAIL,EACJM,YAAa,EACbC,WAAY,aAAaC,KAAKR,GAC9BS,YAAa,aAAaD,KAAKR,IASjC,MANI,aAAaQ,KAAKR,KACpBI,EAAaM,OAASC,EAAAA,sBAAAA,MACtBP,EAAaQ,gBAAkB,MAC/BR,EAAaE,YAAc,GAGtBF,IAGLnB,MAAAA,OAAJ,EAAIA,EAAS4B,QACJ5B,EAAQ6B,KAAI,SAAAC,GAAK,OAAIC,OAAOC,OAAOtC,EAASoC,EAAMV,IAAKU,MAGzDC,OAAOE,KAAKxC,GAAMoC,KAAI,SAAAd,GAAG,OAAIrB,EAASqB,OAQ3CmB,YAAa,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAV,OAAsB,kBAAC,UAAD,CAAsBD,MAAOA,EAAOC,MAAOA,KAC9EC,aAAc,gBAAGD,EAAH,EAAGA,MAAH,OAAe,kBAAC,UAAD,CAAuBA,MAAOA,SAqBjE5C,EAAe8C,aAAe,CAC5B3C,UAAW,GACXE,sBAAAA,EAAAA,sBACAE,0BAAAA,EAAAA","sources":["webpack:///./src/components/graphCard/graphCardChart.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { chart_color_green_300 as chartColorGreenDark } from '@patternfly/react-tokens';\nimport { useProductGraphConfig, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { graphCardHelpers } from './graphCardHelpers';\nimport { Chart } from '../chart/chart';\nimport GraphCardChartLegend from './graphCardChartLegend';\nimport GraphCardChartTooltip from './graphCardChartTooltip';\nimport { RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\n\n/**\n * A chart/graph.\n *\n * @param {object} props\n * @param {object} props.graphData\n * @param {Function} props.useProductGraphConfig\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardChart = ({\n  graphData,\n  useProductGraphConfig: useAliasProductGraphConfig,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { filters } = useAliasProductGraphConfig();\n  const query = useAliasProductGraphTallyQuery();\n  const { [RHSM_API_QUERY_TYPES.GRANULARITY]: granularity } = query;\n\n  const chartAreaProps = {\n    xAxisLabelIncrement: graphCardHelpers.getChartXAxisLabelIncrement(granularity),\n    xAxisTickFormat: ({ item, previousItem, tick }) =>\n      graphCardHelpers.xAxisTickFormat({\n        tick,\n        date: item.date,\n        previousDate: previousItem.date,\n        granularity\n      }),\n    yAxisTickFormat: graphCardHelpers.yAxisTickFormat\n  };\n\n  const filteredGraphData = data => {\n    const filtered = key => {\n      const tempFiltered = {\n        data: data[key],\n        id: key,\n        strokeWidth: 2,\n        isStacked: !/^threshold/.test(key),\n        isThreshold: /^threshold/.test(key)\n      };\n\n      if (/^threshold/.test(key)) {\n        tempFiltered.stroke = chartColorGreenDark.value;\n        tempFiltered.strokeDasharray = '4,3';\n        tempFiltered.strokeWidth = 3;\n      }\n\n      return tempFiltered;\n    };\n\n    if (filters?.length) {\n      return filters.map(value => Object.assign(filtered(value.id), value));\n    }\n\n    return Object.keys(data).map(key => filtered(key));\n  };\n\n  return (\n    <Chart\n      key={`chart_${JSON.stringify(query)}`}\n      {...chartAreaProps}\n      dataSets={filteredGraphData(graphData)}\n      chartLegend={({ chart, datum }) => <GraphCardChartLegend chart={chart} datum={datum} />}\n      chartTooltip={({ datum }) => <GraphCardChartTooltip datum={datum} />}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, useProductGraphConfig: Function, graphData: object}}\n */\nGraphCardChart.propTypes = {\n  graphData: PropTypes.object,\n  useProductGraphConfig: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, useProductGraphConfig: Function, graphData: object}}\n */\nGraphCardChart.defaultProps = {\n  graphData: {},\n  useProductGraphConfig,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChart as default, GraphCardChart };\n"],"names":["GraphCardChart","data","filtered","graphData","useAliasProductGraphConfig","useProductGraphConfig","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","filters","query","granularity","RHSM_API_QUERY_TYPES","chartAreaProps","xAxisLabelIncrement","graphCardHelpers","xAxisTickFormat","item","previousItem","tick","date","previousDate","yAxisTickFormat","Chart","key","JSON","stringify","dataSets","tempFiltered","id","strokeWidth","isStacked","test","isThreshold","stroke","chartColorGreenDark","strokeDasharray","length","map","value","Object","assign","keys","chartLegend","chart","datum","chartTooltip","defaultProps"],"sourceRoot":""}