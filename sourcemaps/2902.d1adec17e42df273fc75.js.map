{"version":3,"file":"js/2902.c7311bc72d3be15ceb14.js","mappings":"2OASMA,EAAc,WAAM,OAC6BC,EAAAA,EAAAA,iBAA7CC,EADgB,EAChBA,aAAcC,EADE,EACFA,OAAQC,EADN,EACMA,SAAUC,EADhB,EACgBA,SADhB,GAEOC,EAAAA,EAAAA,mBAAvBC,cAAAA,OAFgB,MAEA,GAFA,EAGhBC,EAA0BD,EAA1BC,YAAaC,EAAaF,EAAbE,SAErB,IAAKD,EACH,OAAO,KAGT,IAAME,EAAc,CAClBC,MAAO,CAAEF,SAAUG,GAAAA,CAAWH,IAC9BI,MAAO,CACLC,KAAMX,EACNY,OAAQX,EACRY,OAAQX,EACRY,UAAWf,IAIf,OACE,yBAAKgB,UAAU,+BACXC,IAAAA,eAAqBX,IAAgBW,IAAAA,aAAmBX,GAAnB,UAAqCE,KAC1EF,GAAY,UAAKE,MAazBV,EAAYoB,aAAe","sources":["webpack:///./src/components/chart/chartLegend.js"],"sourcesContent":["import React from 'react';\nimport _cloneDeep from 'lodash/cloneDeep';\nimport { useChartContext, useToggleData } from './chartContext';\n\n/**\n * Wrapper for rendering an HTML based legend.\n *\n * @returns {Node}\n */\nconst ChartLegend = () => {\n  const { getIsToggled, onHide, onRevert, onToggle } = useToggleData();\n  const { chartSettings = {} } = useChartContext();\n  const { chartLegend, dataSets } = chartSettings;\n\n  if (!chartLegend) {\n    return null;\n  }\n\n  const legendProps = {\n    datum: { dataSets: _cloneDeep(dataSets) },\n    chart: {\n      hide: onHide,\n      revert: onRevert,\n      toggle: onToggle,\n      isToggled: getIsToggled\n    }\n  };\n\n  return (\n    <div className=\"curiosity-chartarea__legend\">\n      {(React.isValidElement(chartLegend) && React.cloneElement(chartLegend, { ...legendProps })) ||\n        chartLegend({ ...legendProps })}\n    </div>\n  );\n};\n\n/**\n * Prop types.\n */\nChartLegend.propTypes = {};\n\n/**\n * Default props.\n */\nChartLegend.defaultProps = {};\n\nexport { ChartLegend as default, ChartLegend };\n"],"names":["ChartLegend","useToggleData","getIsToggled","onHide","onRevert","onToggle","useChartContext","chartSettings","chartLegend","dataSets","legendProps","datum","_cloneDeep","chart","hide","revert","toggle","isToggled","className","React","defaultProps"],"sourceRoot":""}