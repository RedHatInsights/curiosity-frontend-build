{"version":3,"file":"js/608.1675986251430.16eb2a21823557d4e9d5.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCard.js","webpack:///./src/components/graphCard/graphCardMetricTotals.js","webpack:///./src/components/minHeight/minHeight.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { helpers } from '../../common';\nimport { GraphCardMetricTotals } from './graphCardMetricTotals';\nimport { GraphCardChart } from './graphCardChart';\nimport { GraphCardContext, useParseFiltersSettings } from './graphCardContext';\n\n/**\n * Set up graph cards. Expand filters with base graph settings.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useParseFiltersSettings\n * @returns {Node}\n */\nconst GraphCard = ({ isDisabled, useParseFiltersSettings: useAliasParseFiltersSettings }) => {\n  const { groupedFiltersSettings, standaloneFiltersSettings } = useAliasParseFiltersSettings();\n\n  if (isDisabled) {\n    return null;\n  }\n\n  return (\n    <React.Fragment>\n      {(groupedFiltersSettings && (\n        <GraphCardContext.Provider value={groupedFiltersSettings}>\n          <GraphCardChart />\n        </GraphCardContext.Provider>\n      )) ||\n        null}\n      {standaloneFiltersSettings?.map(filtersSettings => (\n        <GraphCardContext.Provider key={`graphCard_${filtersSettings?.settings?.metric?.id}`} value={filtersSettings}>\n          <GraphCardMetricTotals>\n            <GraphCardChart />\n          </GraphCardMetricTotals>\n        </GraphCardContext.Provider>\n      ))}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useParseFiltersSettings: Function, isDisabled: boolean}}\n */\nGraphCard.propTypes = {\n  isDisabled: PropTypes.bool,\n  useParseFiltersSettings: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useParseFiltersSettings: Function, isDisabled: boolean}}\n */\nGraphCard.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_GRAPH,\n  useParseFiltersSettings\n};\n\nexport { GraphCard as default, GraphCard };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter, CardTitle, Flex, FlexItem } from '@patternfly/react-core';\nimport moment from 'moment';\nimport _camelCase from 'lodash/camelCase';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useMetricsSelector } from './graphCardContext';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { Loader, SkeletonSize } from '../loader/loader';\nimport { dateHelpers, helpers } from '../../common';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldRangedMonthly';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Display totals for a single metric.\n *\n * @param {object} props\n * @param {Node} props.children\n * @param {Function} props.t\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardMetricTotals = ({\n  children,\n  t,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate } = useAliasProductGraphTallyQuery();\n  const { pending, error, fulfilled, dataSets = [] } = useAliasMetricsSelector();\n  const { data = [], id, metric: metricId, meta = {} } = dataSets[0] || {};\n  const { date: lastDate, hasData: lastHasData, y: lastValue } = data[data.length - 1] || {};\n  const {\n    date: currentDate,\n    hasData: currentHasData,\n    y: currentValue\n  } = data.find(({ isCurrentDate }) => isCurrentDate === true) || {};\n\n  const { totalMonthlyDate: monthlyDate, totalMonthlyHasData: monthlyHasData, totalMonthlyValue: monthlyValue } = meta;\n\n  const { title: selectedMonth, isCurrent } =\n    toolbarFieldOptions.find(\n      option => option.title === startDate || option.value.startDate.toISOString() === startDate\n    ) || {};\n\n  const dailyDate = isCurrent ? currentDate : lastDate;\n  const dailyHasData = isCurrent ? currentHasData : lastHasData;\n  const dailyValue = isCurrent ? currentValue : lastValue;\n\n  return (\n    <Flex data-test={`graphMetricTotals-${_camelCase(metricId)}`} className=\"curiosity-usage-graph__totals\">\n      <Flex flex={{ default: 'flex_1' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-column\">\n          <Card\n            data-test=\"graphDailyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric', {\n                context: ['dailyTotal', id],\n                month: selectedMonth\n              })}\n            </CardTitle>\n            <MinHeight key=\"currentBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric',\n                      {\n                        context: ['total', dailyHasData && id],\n                        total: helpers\n                          .numberDisplay(dailyValue)\n                          ?.format({\n                            average: true,\n                            mantissa: 5,\n                            trimMantissa: true,\n                            lowPrecision: false\n                          })\n                          ?.toUpperCase()\n                      },\n                      [<strong title={dailyValue} aria-label={dailyValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"currentFooter\">\n              <CardFooter>\n                <div className={(!dailyHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    dailyDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(dailyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n          <Card\n            data-test=\"graphMonthlyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric', {\n                context: ['monthlyTotal', id],\n                month: selectedMonth\n              })}\n            </CardTitle>\n            <MinHeight key=\"totalMonthlyBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric',\n                      {\n                        context: ['total', monthlyHasData && id],\n                        total: helpers\n                          .numberDisplay(monthlyValue)\n                          ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: false })\n                          ?.toUpperCase()\n                      },\n                      [<strong title={monthlyValue} aria-label={monthlyValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"totalMonthlyFooter\">\n              <CardFooter>\n                <div className={(!monthlyHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    monthlyDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(monthlyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n        </FlexItem>\n      </Flex>\n      <Flex flex={{ default: 'flex_3' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-graph-column\">{children}</FlexItem>\n      </Flex>\n    </Flex>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.propTypes = {\n  children: PropTypes.node,\n  t: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.defaultProps = {\n  children: null,\n  t: translate,\n  useMetricsSelector,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardMetricTotals as default, GraphCardMetricTotals };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { helpers } from '../../common';\n\n/**\n * Set a min-height to prevent page jump component.\n *\n * @augments React.Component\n * @fires onResizeContainer\n */\nclass MinHeight extends React.Component {\n  containerRef = React.createRef();\n\n  innerContainerRef = React.createRef();\n\n  updatedContainerWidth = 0;\n\n  resizeObserver = helpers.noop;\n\n  componentDidMount() {\n    const { updateOnResize } = this.props;\n    window.setTimeout(() => {\n      this.setMinHeight();\n    });\n\n    if (updateOnResize) {\n      this.setResizeObserver();\n    }\n  }\n\n  componentDidUpdate() {\n    const { updateOnContent } = this.props;\n\n    if (updateOnContent) {\n      window.setTimeout(() => {\n        this.setMinHeight();\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.resizeObserver();\n  }\n\n  /**\n   * On resize adjust graph display.\n   *\n   * @event onResizeContainer\n   */\n  onResizeContainer = () => {\n    const { updatedContainerWidth } = this;\n    const { updateOnResize } = this.props;\n    const clientWidth = this.containerRef?.current?.clientWidth || 0;\n\n    if (updateOnResize && clientWidth !== updatedContainerWidth) {\n      this.updatedContainerWidth = clientWidth;\n      this.setMinHeight(true);\n    }\n  };\n\n  /**\n   * Set minHeight on mount or update.\n   *\n   * @param {boolean} reset\n   */\n  setMinHeight(reset = false) {\n    const { minHeight: overrideMinHeight } = this.props;\n    const { current: domElement = {} } = this.containerRef;\n    const { current: innerDomElement = {} } = this.innerContainerRef;\n\n    if (domElement?.style) {\n      let clientHeight;\n\n      if (reset) {\n        clientHeight = innerDomElement?.clientHeight || 0;\n      } else {\n        clientHeight = domElement?.clientHeight || 0;\n      }\n\n      if (overrideMinHeight > clientHeight) {\n        clientHeight = overrideMinHeight;\n      }\n\n      domElement.style.minHeight = `${clientHeight}px`;\n    }\n  }\n\n  /**\n   * Set ResizeObserver for scenarios when min-height needs to be updated.\n   */\n  setResizeObserver() {\n    window.addEventListener('resize', this.onResizeContainer);\n    this.resizeObserver = () => window.removeEventListener('resize', this.onResizeContainer);\n  }\n\n  /**\n   * Render a min-height div with children.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { children } = this.props;\n\n    return (\n      <div className=\"curiosity-minheight\" ref={this.containerRef}>\n        <div ref={this.innerContainerRef}>{children}</div>\n      </div>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{minHeight: number, children: Node, updateOnContent: boolean, updateOnResize: boolean}}\n */\nMinHeight.propTypes = {\n  updateOnContent: PropTypes.bool,\n  updateOnResize: PropTypes.bool,\n  children: PropTypes.node.isRequired,\n  minHeight: PropTypes.number\n};\n\n/**\n * Default props.\n *\n * @type {{minHeight: number, updateOnContent: boolean, updateOnResize: boolean}}\n */\nMinHeight.defaultProps = {\n  updateOnContent: false,\n  updateOnResize: true,\n  minHeight: 0\n};\n\nexport { MinHeight as default, MinHeight };\n"],"names":["GraphCard","isDisabled","useAliasParseFiltersSettings","useParseFiltersSettings","groupedFiltersSettings","standaloneFiltersSettings","GraphCardContext","value","GraphCardChart","map","filtersSettings","key","settings","metric","id","GraphCardMetricTotals","defaultProps","helpers","children","t","useAliasMetricsSelector","useMetricsSelector","startDate","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","RHSM_API_QUERY_SET_TYPES","pending","error","fulfilled","dataSets","data","metricId","meta","length","lastDate","date","lastHasData","hasData","lastValue","y","find","isCurrentDate","currentDate","currentHasData","currentValue","monthlyDate","totalMonthlyDate","monthlyHasData","totalMonthlyHasData","monthlyValue","totalMonthlyValue","toolbarFieldOptions","option","title","toISOString","selectedMonth","isCurrent","dailyDate","dailyHasData","dailyValue","Flex","_camelCase","className","flex","default","direction","alignSelf","FlexItem","Card","CardTitle","context","month","MinHeight","CardBody","Loader","variant","skeletonProps","size","SkeletonSize","total","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","CardFooter","moment","dateHelpers","translate","containerRef","React","innerContainerRef","updatedContainerWidth","resizeObserver","onResizeContainer","updateOnResize","props","clientWidth","current","setMinHeight","this","window","setTimeout","setResizeObserver","updateOnContent","clientHeight","reset","overrideMinHeight","minHeight","domElement","innerDomElement","style","addEventListener","removeEventListener","ref"],"sourceRoot":""}