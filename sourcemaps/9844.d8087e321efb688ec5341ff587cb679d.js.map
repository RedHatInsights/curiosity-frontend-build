{"version":3,"file":"js/9844.1670610864091.46fea5157f6f73108c72.js","mappings":"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","sources":["webpack:///./src/components/form/select.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  DropdownDirection,\n  DropdownPosition,\n  Select as PfSelect,\n  SelectOption as PfSelectOption,\n  SelectVariant\n} from '@patternfly/react-core';\nimport _cloneDeep from 'lodash/cloneDeep';\nimport _isEqual from 'lodash/isEqual';\nimport _findIndex from 'lodash/findIndex';\nimport _isPlainObject from 'lodash/isPlainObject';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Pass direction as select component variant option.\n *\n * @type {DropdownDirection}\n */\nconst SelectDirection = DropdownDirection;\n\n/**\n * Pass position as select component variant option.\n *\n * @type {DropdownPosition}\n */\nconst SelectPosition = DropdownPosition;\n\n/**\n * FixMe: PF isFlipEnabled busts left/right positioning, we now disable it by default\n * We caught this adjustment through our component code test snapshots. PF positioning for left/right has issues in general on\n * Select (Dropdown used to use the same styling, and functioned correctly, we'd need to reevaluate it now). We patched Select\n * with a minor styling adjustment for position from Dropdown, this worked until isFlipEnabled became defaulted to true.\n * Evaluate on next PF patch.\n */\n/**\n * A wrapper for Patternfly Select. Provides restructured event data for onSelect callback.\n *\n * @augments React.Component\n * @fires onSelect\n * @fires onToggle\n */\nclass Select extends React.Component {\n  state = { isExpanded: false, options: null, selected: null };\n\n  selectField = React.createRef();\n\n  componentDidMount() {\n    const { options } = this.state;\n\n    if (options === null) {\n      this.formatOptions();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { options, selectedOptions } = this.props;\n\n    if (!_isEqual(prevProps.options, options) || !_isEqual(prevProps.selectedOptions, selectedOptions)) {\n      this.formatOptions();\n    }\n  }\n\n  /**\n   * Emulate select event object, apply to provided onSelect prop.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @param {string} titleSelection\n   */\n  onSelect = (event, titleSelection) => {\n    const { options } = this.state;\n    const { id, name, onSelect, variant } = this.props;\n\n    const updatedOptions = options;\n    const optionsIndex = updatedOptions.findIndex(option => option.title === titleSelection);\n    updatedOptions[optionsIndex].selected =\n      variant === SelectVariant.single ? true : !updatedOptions[optionsIndex].selected;\n\n    if (variant === SelectVariant.single) {\n      updatedOptions.forEach((option, index) => {\n        if (optionsIndex !== index) {\n          updatedOptions[index].selected = false;\n        }\n      });\n    }\n\n    const updateSelected =\n      variant === SelectVariant.single\n        ? titleSelection\n        : updatedOptions.filter(opt => opt.selected === true).map(opt => opt.title);\n\n    this.setState(\n      {\n        options: updatedOptions,\n        selected: updateSelected\n      },\n      () => {\n        const mockUpdatedOptions = _cloneDeep(updatedOptions);\n\n        const mockTarget = {\n          id,\n          name: name || id,\n          value: mockUpdatedOptions[optionsIndex].value,\n          selected:\n            (variant === SelectVariant.single && mockUpdatedOptions[optionsIndex]) || _cloneDeep(updateSelected),\n          selectedIndex: optionsIndex,\n          type: `select-${(variant === SelectVariant.single && 'one') || 'multiple'}`,\n          options: mockUpdatedOptions\n        };\n\n        if (variant === SelectVariant.checkbox) {\n          mockTarget.checked = mockUpdatedOptions[optionsIndex].selected;\n        }\n\n        const mockEvent = {\n          ...mockTarget,\n          target: { ...mockTarget },\n          currentTarget: { ...mockTarget },\n          persist: helpers.noop\n        };\n\n        onSelect({ ...mockEvent }, optionsIndex, mockUpdatedOptions);\n\n        if (variant === SelectVariant.single) {\n          this.setState({\n            isExpanded: false\n          });\n        }\n      }\n    );\n  };\n\n  /**\n   * Patternfly Select's open/closed state.\n   *\n   * @event onToggle\n   * @param {boolean} expanded\n   */\n  onToggle = expanded => {\n    this.setState({\n      isExpanded: expanded\n    });\n  };\n\n  // FixMe: attributes filtered on PF select component. allow data- attributes\n  /**\n   * Format options into a consumable array of objects format.\n   * Note: It is understood that for line 151'ish around \"updatedOptions\" we dump all values regardless\n   * of whether they are plain objects, or not, into updatedOptions. This has been done for speed only,\n   * one less check to perform.\n   */\n  formatOptions() {\n    const { current: domElement = {} } = this.selectField;\n    const { options, selectedOptions, variant } = this.props;\n    const dataAttributes = Object.entries(this.props).filter(([key]) => /^data-/i.test(key));\n    const updatedOptions = _isPlainObject(options)\n      ? Object.entries(options).map(([key, value]) => ({ ...value, title: key, value }))\n      : _cloneDeep(options);\n\n    const activateOptions =\n      (selectedOptions && typeof selectedOptions === 'string') || typeof selectedOptions === 'number'\n        ? [selectedOptions]\n        : selectedOptions;\n\n    updatedOptions.forEach((option, index) => {\n      let convertedOption = option;\n\n      if (typeof convertedOption === 'string') {\n        convertedOption = {\n          title: option,\n          value: option\n        };\n\n        updatedOptions[index] = convertedOption;\n      }\n\n      convertedOption.text = convertedOption.text || convertedOption.title;\n      convertedOption.textContent = convertedOption.textContent || convertedOption.title;\n      convertedOption.label = convertedOption.label || convertedOption.title;\n\n      if (activateOptions) {\n        let isSelected;\n\n        if (_isPlainObject(convertedOption.value)) {\n          isSelected = _findIndex(activateOptions, convertedOption.value) > -1;\n\n          if (!isSelected) {\n            const tempSearch = activateOptions.find(activeOption =>\n              Object.values(convertedOption.value).includes(activeOption)\n            );\n            isSelected = !!tempSearch;\n          }\n        } else {\n          isSelected = activateOptions.includes(convertedOption.value);\n        }\n\n        if (!isSelected) {\n          isSelected = activateOptions.includes(convertedOption.title);\n        }\n\n        updatedOptions[index].selected = isSelected;\n      }\n    });\n\n    let updateSelected;\n\n    if (variant === SelectVariant.single) {\n      updateSelected = (updatedOptions.find(opt => opt.selected === true) || {}).title;\n    } else {\n      updateSelected = updatedOptions.filter(opt => opt.selected === true).map(opt => opt.title);\n    }\n\n    if (domElement?.parentRef?.current) {\n      dataAttributes.forEach(([key, value]) => domElement?.parentRef?.current.setAttribute(key, value));\n    }\n\n    this.setState({\n      options: updatedOptions,\n      selected: updateSelected\n    });\n  }\n\n  /**\n   * Render a select/dropdown list.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { options, selected, isExpanded } = this.state;\n    const {\n      ariaLabel,\n      className,\n      direction,\n      isDisabled,\n      isFlipEnabled,\n      isToggleText,\n      maxHeight,\n      placeholder,\n      position,\n      toggleIcon,\n      variant\n    } = this.props;\n\n    const pfSelectOptions = {\n      direction,\n      isFlipEnabled,\n      maxHeight\n    };\n\n    // FixMe: investigate \"isDisabled\", PFReact quirks?\n    if (!options || !options.length || isDisabled) {\n      pfSelectOptions.isDisabled = true;\n    }\n\n    /**\n     * FixMe: PFReact quirks around PfSelect, requires children\n     * \"Null\" is a typical fallback we use across the board on a multitude of React apps.\n     * In this case \"null\" is a fallback for scenarios where an \"undefined\" list is passed\n     * during initial mount. Converted to an empty list/array \"[]\" to compensate.\n     */\n    /**\n     * Note: PFReact missing select border on compile\n     * Related https://github.com/patternfly/patternfly-react/issues/5650 and\n     * https://github.com/cssnano/cssnano/issues/1051\n     */\n    return (\n      <div className=\"curiosity-select\">\n        <PfSelect\n          menuAppendTo=\"parent\"\n          className={`curiosity-select-pf${(!isToggleText && '__no-toggle-text') || ''} ${\n            (position === DropdownPosition.right && 'curiosity-select-pf__position-right') || ''\n          } ${className}`}\n          variant={variant}\n          aria-label={ariaLabel}\n          onToggle={this.onToggle}\n          onSelect={this.onSelect}\n          selections={selected}\n          isOpen={isExpanded}\n          toggleIcon={toggleIcon}\n          placeholderText={placeholder}\n          ref={this.selectField}\n          {...pfSelectOptions}\n        >\n          {(options &&\n            options.map(option => (\n              <PfSelectOption\n                key={window.btoa(`${option.title}-${option.value}`)}\n                id={window.btoa(`${option.title}-${option.value}`)}\n                value={option.title}\n                data-value={(_isPlainObject(option.value) && JSON.stringify([option.value])) || option.value}\n                data-title={option.title}\n              />\n            ))) ||\n            []}\n        </PfSelect>\n      </div>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{isFlipEnabled: boolean, toggleIcon: React.ReactNode|Function, className: string, ariaLabel: string,\n *     onSelect: Function, isToggleText: boolean, maxHeight: number, name: string, options: Array|object,\n *     selectedOptions: number|string|Array, variant: string, id: string, isDisabled: boolean,\n *     placeholder: string, position: string, direction: string}}\n */\nSelect.propTypes = {\n  ariaLabel: PropTypes.string,\n  className: PropTypes.string,\n  direction: PropTypes.oneOf(Object.values(SelectDirection)),\n  id: PropTypes.string,\n  isDisabled: PropTypes.bool,\n  isFlipEnabled: PropTypes.bool,\n  isToggleText: PropTypes.bool,\n  maxHeight: PropTypes.number,\n  name: PropTypes.string,\n  onSelect: PropTypes.func,\n  options: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.string),\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.any,\n        value: PropTypes.any.isRequired,\n        selected: PropTypes.bool\n      })\n    ),\n    PropTypes.shape({\n      title: PropTypes.any,\n      value: PropTypes.any.isRequired,\n      selected: PropTypes.bool\n    }),\n    PropTypes.object\n  ]),\n  placeholder: PropTypes.string,\n  position: PropTypes.oneOf(Object.values(SelectPosition)),\n  selectedOptions: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]))\n  ]),\n  toggleIcon: PropTypes.element,\n  variant: PropTypes.oneOf([...Object.values(SelectVariant)])\n};\n\n/**\n * Default props.\n *\n * @type {{isFlipEnabled: boolean, toggleIcon: React.ReactNode|Function, className: string, ariaLabel: string,\n *     onSelect: Function, isToggleText: boolean, maxHeight: null, name: null, options: *[], selectedOptions: null,\n *     variant: SelectVariant.single, id: string, isDisabled: boolean, placeholder: string,\n *     position: DropdownPosition.left, direction: DropdownDirection.down}}\n */\nSelect.defaultProps = {\n  ariaLabel: 'Select option',\n  className: '',\n  direction: SelectDirection.down,\n  id: helpers.generateId(),\n  isDisabled: false,\n  isFlipEnabled: false,\n  isToggleText: true,\n  maxHeight: null,\n  name: null,\n  onSelect: helpers.noop,\n  options: [],\n  placeholder: 'Select option',\n  position: SelectPosition.left,\n  selectedOptions: null,\n  toggleIcon: null,\n  variant: SelectVariant.single\n};\n\nexport { Select as default, Select, SelectDirection, SelectPosition };\n"],"names":["SelectDirection","DropdownDirection","SelectPosition","DropdownPosition","Select","state","isExpanded","options","selected","selectField","React","onSelect","event","titleSelection","props","id","name","variant","updatedOptions","optionsIndex","findIndex","option","title","SelectVariant","forEach","index","updateSelected","filter","opt","map","setState","mockUpdatedOptions","_cloneDeep","mockTarget","value","selectedIndex","type","checked","mockEvent","target","currentTarget","persist","helpers","onToggle","expanded","this","formatOptions","prevProps","selectedOptions","_isEqual","current","domElement","dataAttributes","Object","entries","key","test","_isPlainObject","activateOptions","isSelected","convertedOption","text","textContent","label","_findIndex","find","activeOption","values","includes","parentRef","setAttribute","ariaLabel","className","direction","isDisabled","isFlipEnabled","isToggleText","maxHeight","placeholder","position","toggleIcon","pfSelectOptions","length","menuAppendTo","selections","isOpen","placeholderText","ref","window","btoa","JSON","stringify","defaultProps","down","left"],"sourceRoot":""}