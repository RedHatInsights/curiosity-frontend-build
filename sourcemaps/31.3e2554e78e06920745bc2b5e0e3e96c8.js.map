{"version":3,"file":"js/31.1646852517796.a03b510161603cee9187.js","mappings":"8QA4BMA,EAAAA,SAAAA,I,mLACJC,MAAQ,CACNC,iBAAkB,KAClBC,YAAa,M,EAiCfC,MAAQ,YAAe,IAAZC,EAAY,EAAZA,MACDD,EAAU,EAAKE,MAAfF,MAER,EAAKG,SACH,CACEL,iBAAkBG,IAEpB,kBAAMD,EAAM,CAAEC,MAAAA,Q,kDArClB,WAGsB,OAFIG,KAAKP,MAArBE,aAGNK,KAAKC,e,gCAIT,SAAmBC,GACjB,IAAQC,EAASH,KAAKF,MAAdK,KASHC,GAAAA,CAAaF,EAAUC,KAAMA,GARf,SAACE,EAAQC,GAC1B,GAAsB,mBAAXD,GAA2C,mBAAXC,EACzC,OAAOD,EAAOE,aAAeD,EAAOC,eAOtCP,KAAKC,e,wBAyBT,WACE,MAA8CD,KAAKF,MAA3CU,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,iBAAkBN,EAArC,EAAqCA,KACjCT,EAAmBe,EAEjBd,EAAcQ,EAAKO,KAAI,WAA6Bb,GAAU,IAApCc,EAAoC,EAApCA,OAAQC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,MAG/C,OAFAnB,EAAmBiB,EAASd,EAAQH,EAGlC,kBAAC,EAAAoB,IAAD,CAAKC,IAAKF,EAAOG,SAAUnB,EAAOgB,MAAO,kBAAC,EAAAI,aAAD,KAAeJ,IACrDD,MAKkB,iBAAdJ,IACTd,EAAmBc,GAGrBR,KAAKD,SAAS,CACZL,iBAAAA,EACAC,YAAAA,M,wBASJ,WAAa,WACX,EAA0CK,KAAKP,MAAvCC,EAAR,EAAQA,iBAAkBC,EAA1B,EAA0BA,YAC1B,EAAyCK,KAAKF,MAAtCoB,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,kBAEnB,OACE,kBAAC,OAAD,CACED,UAAS,wBAAqBC,EAAuC,GAAlB,cAA1C,YAAkED,GAAa,IACxFE,UAAW1B,EACX2B,SAAU,SAACC,EAAOzB,GAAR,OAAkB,EAAKD,MAAM,CAAE0B,MAAAA,EAAOzB,MAAAA,KAChD0B,cAAY,EACZC,eAAa,EACbC,MAAO,CACLC,QAAS,YACTC,GAAI,YAGLhC,K,oBAUP,WACE,OACE,kBAAC,EAAAiC,KAAD,CAAMV,UAAU,4BACd,kBAAC,EAAAW,SAAD,CAAUC,KAAM,IAAK9B,KAAK+B,mB,EA5G5BvC,CAAawC,IAAAA,WA6InBxC,EAAKyC,aAAe,CAClBzB,UAAW,KACXU,UAAW,GACXT,iBAAkB,EAClBU,mBAAmB,EACnBvB,MAAOsC,EAAAA,GAAAA,KACP/B,KAAM","sources":["webpack:///./src/components/tabs/tabs.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tabs as PfTabs, Tab, TabTitleText, Grid, GridItem } from '@patternfly/react-core';\nimport _isEqualWith from 'lodash/isEqualWith';\nimport { helpers } from '../../common';\n\n/**\n * FixMe: PF tabs misinterprets \"isElementInView\" when tab title nodes are loaded dynamically\n * It appears the use of isElementInView within PF tabs is trying to be predicative in using\n * \"getBoundingClientRect\" but produces questionable results in scenarios where content is\n * async created. isElementInView assumes some form of the content will always be there\n * instead of scenarios where someone tries to dynamically apply components. It may be good to\n * review using a window.setTimeout(() => handleScrollButtons()) in componentDidMount.\n *\n * Our temporary solution is to simply hide the buttons with a manual set flag affecting the\n * CSS class. This will most likely cause long-term issues.\n */\n/**\n * ToDo: Insights frontend components uses a custom tabs layout, investigate related CSS classes\n * Originally we applied the CSS classes, but they appeared to provide nothing. Since Insights\n * rolled its own tabs we're hesitant to apply said classes without understanding what they provide.\n */\n/**\n * A set of tabs.\n *\n * @augments React.Component\n * @fires onTab\n */\nclass Tabs extends React.Component {\n  state = {\n    updatedActiveTab: null,\n    updatedTabs: null\n  };\n\n  componentDidMount() {\n    const { updatedTabs } = this.state;\n\n    if (updatedTabs === null) {\n      this.setTabData();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { tabs } = this.props;\n    const customizer = (valueA, valueB) => {\n      if (typeof valueA === 'function' && typeof valueB === 'function') {\n        return valueA.toString() === valueB.toString();\n      }\n\n      return undefined;\n    };\n\n    if (!_isEqualWith(prevProps.tabs, tabs, customizer)) {\n      this.setTabData();\n    }\n  }\n\n  /**\n   * On tab selected\n   *\n   * @event onTab\n   * @param {object} params\n   * @param {number} params.index\n   */\n  onTab = ({ index }) => {\n    const { onTab } = this.props;\n\n    this.setState(\n      {\n        updatedActiveTab: index\n      },\n      () => onTab({ index })\n    );\n  };\n\n  /**\n   * Convert tab objects into the required PF Tab format.\n   */\n  setTabData() {\n    const { activeTab, defaultActiveTab, tabs } = this.props;\n    let updatedActiveTab = defaultActiveTab;\n\n    const updatedTabs = tabs.map(({ active, content, title }, index) => {\n      updatedActiveTab = active ? index : updatedActiveTab;\n\n      return (\n        <Tab key={title} eventKey={index} title={<TabTitleText>{title}</TabTitleText>}>\n          {content}\n        </Tab>\n      );\n    });\n\n    if (typeof activeTab === 'number') {\n      updatedActiveTab = activeTab;\n    }\n\n    this.setState({\n      updatedActiveTab,\n      updatedTabs\n    });\n  }\n\n  /**\n   * Apply props to tabs.\n   *\n   * @returns {Node}\n   */\n  renderTabs() {\n    const { updatedActiveTab, updatedTabs } = this.state;\n    const { className, hasOverflowScroll } = this.props;\n\n    return (\n      <PfTabs\n        className={`curiosity-tabs${(!hasOverflowScroll && '__no-scroll') || ''} ${className || ''}`}\n        activeKey={updatedActiveTab}\n        onSelect={(event, index) => this.onTab({ event, index })}\n        mountOnEnter\n        unmountOnExit\n        inset={{\n          default: 'insetNone',\n          md: 'insetLg'\n        }}\n      >\n        {updatedTabs}\n      </PfTabs>\n    );\n  }\n\n  /**\n   * Render tabs.\n   *\n   * @returns {Node}\n   */\n  render() {\n    return (\n      <Grid className=\"curiosity-tabs-container\">\n        <GridItem span={12}>{this.renderTabs()}</GridItem>\n      </Grid>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{tabs: Array, hasOverflowScroll: boolean, onTab: Function, className: string,\n *     defaultActiveTab: number, activeTab: number}}\n */\nTabs.propTypes = {\n  activeTab: PropTypes.number,\n  className: PropTypes.string,\n  defaultActiveTab: PropTypes.number,\n  hasOverflowScroll: PropTypes.bool,\n  onTab: PropTypes.func,\n  tabs: PropTypes.arrayOf(\n    PropTypes.shape({\n      active: PropTypes.bool,\n      content: PropTypes.node.isRequired,\n      title: PropTypes.node.isRequired\n    })\n  )\n};\n\n/**\n * Default props.\n *\n * @type {{tabs: Array, hasOverflowScroll: boolean, onTab: Function, className: string,\n *     defaultActiveTab: number, activeTab: number}}\n */\nTabs.defaultProps = {\n  activeTab: null,\n  className: '',\n  defaultActiveTab: 0,\n  hasOverflowScroll: false,\n  onTab: helpers.noop,\n  tabs: []\n};\n\nexport { Tabs as default, Tabs };\n"],"names":["Tabs","state","updatedActiveTab","updatedTabs","onTab","index","props","setState","this","setTabData","prevProps","tabs","_isEqualWith","valueA","valueB","toString","activeTab","defaultActiveTab","map","active","content","title","Tab","key","eventKey","TabTitleText","className","hasOverflowScroll","activeKey","onSelect","event","mountOnEnter","unmountOnExit","inset","default","md","Grid","GridItem","span","renderTabs","React","defaultProps","helpers"],"sourceRoot":""}