{"version":3,"file":"js/8710.4b99c4e8c2a56726037b.js","mappings":"kSAeMA,E,gMACJC,MAAQ,CACNC,aAAc,M,EAShBC,QAAU,SAAAC,GAAS,MACkB,EAAKC,MAAhCC,EADS,EACTA,QAASH,EADA,EACAA,QAASI,EADT,EACSA,KAClBC,EAA2BJ,EAA3BI,cAAeC,EAAYL,EAAZK,QACjBC,GAAc,UAAKN,GAEzBD,GAAQQ,EAAAA,EAAAA,iBAAgBP,GAAO,IAEf,KAAZK,IACW,WAATF,GAA6C,KAAxBC,EAAcI,MACrCN,GAAQK,EAAAA,EAAAA,iBAAgBD,IAExB,EAAKG,SAAS,CAAEX,aAAc,KAAM,WAClCI,GACEK,EAAAA,EAAAA,kBAAgB,kBAAKD,GAAgB,CAAEF,eAAe,kBAAKE,EAAYF,eAAnB,IAAkCI,MAAO,c,EAavGE,UAAY,SAAAV,GAAS,MACkB,EAAKC,MAAlCC,EADW,EACXA,QAASQ,EADE,EACFA,UAAWP,EADT,EACSA,KACpBC,EAAkBJ,EAAlBI,cACFE,GAAc,UAAKN,GAEzBU,GAAUH,EAAAA,EAAAA,iBAAgBP,GAAO,IAEpB,WAATG,GAA6C,KAAxBC,EAAcI,OAIvCG,YAAW,WACmB,KAAxBP,EAAcI,OAChBN,GAAQK,EAAAA,EAAAA,iBAAgBD,Q,EAW9BM,SAAW,SAACJ,EAAOR,GAAU,IACnBY,EAAa,EAAKX,MAAlBW,SACFN,GAAc,UAAKN,GAEzB,EAAKS,SAAS,CAAEX,aAAcU,IAAS,WACrCI,GAASL,EAAAA,EAAAA,iBAAgBD,Q,uCAS7B,WAAS,MACCR,EAAiBe,KAAKhB,MAAtBC,aADD,EAeHe,KAAKZ,MAZPa,EAHK,EAGLA,UACAC,EAJK,EAILA,GACAC,EALK,EAKLA,WACAC,EANK,EAMLA,KAKAC,GAXK,EAOLN,SAPK,EAQLV,QARK,EASLH,QATK,EAULW,UAVK,EAWLQ,YACAf,EAZK,EAYLA,KACAK,EAbK,EAaLA,MACGP,GAdE,wHAgBDkB,EAAcF,GAAQG,EAAAA,GAAAA,aACtBC,EAAYN,GAAMI,EAExB,OACE,kBAAC,YAAD,eACEJ,GAAIM,EACJJ,KAAME,EACNL,UAAS,+BAA0BA,GACnCE,WAAYA,IAAc,EAC1BJ,SAAUC,KAAKD,SACfb,QAASc,KAAKd,QACdW,UAAWG,KAAKH,UAChBQ,WAAYA,IAAc,EAC1Bf,KAAMA,EACNK,MAAK,UAAEV,MAAAA,EAAAA,EAAgBU,SAAlB,QAA2B,IAC5BP,Q,GA1GYqB,IAAAA,WA4IxB1B,EAAU2B,aAAe,CACvBT,UAAW,GACXC,GAAI,KACJC,YAAY,EACZE,YAAY,EACZD,KAAM,KACNL,SAAUQ,EAAAA,GAAAA,KACVlB,QAASkB,EAAAA,GAAAA,KACTrB,QAASqB,EAAAA,GAAAA,KACTV,UAAWU,EAAAA,GAAAA,KACXjB,KAAM,OACNK,MAAO","sources":["webpack:///./src/components/form/textInput.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TextInput as PfTextInput } from '@patternfly/react-core';\nimport { createMockEvent } from './formHelpers';\nimport { helpers } from '../../common';\n\n/**\n * A wrapper for Patternfly TextInput. Provides restructured event data,\n * and an onClear event for the search type.\n *\n * @augments React.Component\n * @fires onKeyUp\n * @fires onMouseUp\n * @fires onChange\n */\nclass TextInput extends React.Component {\n  state = {\n    updatedValue: null\n  };\n\n  /**\n   * onKeyUp event, provide additional functionality for onClear event.\n   *\n   * @event onKeyUp\n   * @param {object} event\n   */\n  onKeyUp = event => {\n    const { onClear, onKeyUp, type } = this.props;\n    const { currentTarget, keyCode } = event;\n    const clonedEvent = { ...event };\n\n    onKeyUp(createMockEvent(event, true));\n\n    if (keyCode === 27) {\n      if (type === 'search' && currentTarget.value === '') {\n        onClear(createMockEvent(clonedEvent));\n      } else {\n        this.setState({ updatedValue: '' }, () => {\n          onClear(\n            createMockEvent({ ...clonedEvent, ...{ currentTarget: { ...clonedEvent.currentTarget, value: '' } } })\n          );\n        });\n      }\n    }\n  };\n\n  /**\n   * onMouseUp event, provide additional functionality for onClear event.\n   *\n   * @event onMouseUp\n   * @param {object} event\n   */\n  onMouseUp = event => {\n    const { onClear, onMouseUp, type } = this.props;\n    const { currentTarget } = event;\n    const clonedEvent = { ...event };\n\n    onMouseUp(createMockEvent(event, true));\n\n    if (type !== 'search' || currentTarget.value === '') {\n      return;\n    }\n\n    setTimeout(() => {\n      if (currentTarget.value === '') {\n        onClear(createMockEvent(clonedEvent));\n      }\n    });\n  };\n\n  /**\n   * onChange event, provide restructured event.\n   *\n   * @param {string} value\n   * @param {object} event\n   */\n  onChange = (value, event) => {\n    const { onChange } = this.props;\n    const clonedEvent = { ...event };\n\n    this.setState({ updatedValue: value }, () => {\n      onChange(createMockEvent(clonedEvent));\n    });\n  };\n\n  /**\n   * Render a text input.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { updatedValue } = this.state;\n    const {\n      className,\n      id,\n      isDisabled,\n      name,\n      onChange,\n      onClear,\n      onKeyUp,\n      onMouseUp,\n      isReadOnly,\n      type,\n      value,\n      ...props\n    } = this.props;\n    const updatedName = name || helpers.generateId();\n    const updatedId = id || updatedName;\n\n    return (\n      <PfTextInput\n        id={updatedId}\n        name={updatedName}\n        className={`curiosity-text-input ${className}`}\n        isDisabled={isDisabled || false}\n        onChange={this.onChange}\n        onKeyUp={this.onKeyUp}\n        onMouseUp={this.onMouseUp}\n        isReadOnly={isReadOnly || false}\n        type={type}\n        value={updatedValue ?? value ?? ''}\n        {...props}\n      />\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{onKeyUp: Function, isReadOnly: boolean, onChange: Function, onClear: Function,\n *     name: string, className: string, id: string, isDisabled: boolean, onMouseUp: Function,\n *     type: string, value: string}}\n */\nTextInput.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  isDisabled: PropTypes.bool,\n  isReadOnly: PropTypes.bool,\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  onClear: PropTypes.func,\n  onKeyUp: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  type: PropTypes.string,\n  value: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{onKeyUp: Function, isReadOnly: boolean, onChange: Function, onClear: Function,\n *     name: string, className: string, id: string, isDisabled: boolean, onMouseUp: Function,\n *     type: string, value: string}}\n */\nTextInput.defaultProps = {\n  className: '',\n  id: null,\n  isDisabled: false,\n  isReadOnly: false,\n  name: null,\n  onChange: helpers.noop,\n  onClear: helpers.noop,\n  onKeyUp: helpers.noop,\n  onMouseUp: helpers.noop,\n  type: 'text',\n  value: ''\n};\n\nexport { TextInput as default, TextInput };\n"],"names":["TextInput","state","updatedValue","onKeyUp","event","props","onClear","type","currentTarget","keyCode","clonedEvent","createMockEvent","value","setState","onMouseUp","setTimeout","onChange","this","className","id","isDisabled","name","isReadOnly","updatedName","helpers","updatedId","React","defaultProps"],"sourceRoot":""}