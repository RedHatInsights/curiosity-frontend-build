{"version":3,"file":"js/9175.42b9b889561164f45d58.js","mappings":"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","sources":["webpack:///./src/components/bannerMessages/bannerMessages.js","webpack:///./src/components/productView/productView.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, AlertActionCloseButton, AlertVariant, Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { useShallowCompareEffect } from 'react-use';\nimport { apiQueries, storeHooks } from '../../redux';\nimport { translate } from '../i18n/i18n';\nimport { dateHelpers, helpers } from '../../common';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { useRouteDetail } from '../../hooks/useRouter';\n\n/**\n * Render banner messages.\n *\n * @param {object} props\n * @param {Array} props.messages\n * @param {Function} props.useRouteDetail\n * @param {Function} props.useAppMessages\n * @returns {Node}\n */\nconst BannerMessages = ({ messages, useRouteDetail: useAliasRouteDetail, useAppMessages: useAliasAppMessages }) => {\n  const [hideAlerts, setHideAlerts] = useState({});\n  const [alerts, setAlerts] = useState([]);\n  const { pathParameter: productId, productConfig } = useAliasRouteDetail() || {};\n  const isProductConfig = productConfig?.length === 1 && productConfig?.[0];\n  const { query } = apiQueries.parseRhsmQuery(productConfig?.[0]?.query || {});\n  const { appMessages } = useAliasAppMessages();\n\n  useShallowCompareEffect(() => {\n    if (productId && isProductConfig) {\n      const { startDate, endDate } = dateHelpers.getRangedDateTime('CURRENT');\n      const updatedGraphQuery = {\n        ...query,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString(),\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      };\n\n      storeHooks.rhsmActions.useGetMessageReports(productId, updatedGraphQuery);\n    }\n  }, [productId, isProductConfig, query]);\n\n  useShallowCompareEffect(() => {\n    const updatedMessages = [];\n\n    if (messages.length) {\n      Object.entries(appMessages).forEach(([key, value]) => {\n        if (hideAlerts[key] !== true && value === true) {\n          const message = messages.find(({ id }) => id === key);\n\n          if (message) {\n            updatedMessages.push({\n              key,\n              ...message\n            });\n          }\n        }\n      });\n    }\n\n    setAlerts(\n      updatedMessages.map(({ key, message, title, variant = AlertVariant.info }) => {\n        const actionClose = <AlertActionCloseButton onClose={() => setHideAlerts({ ...hideAlerts, [key]: true })} />;\n\n        return (\n          <Alert actionClose={actionClose} key={key} title={title} variant={variant}>\n            {message}\n          </Alert>\n        );\n      })\n    );\n  }, [appMessages, hideAlerts, messages]);\n\n  if (alerts?.length) {\n    return <div className=\"curiosity-banner-messages\">{alerts}</div>;\n  }\n\n  return null;\n};\n\n/**\n * Prop types.\n *\n * @type {{useAppMessages: Function, messages: Array, useRouteDetail: Function}}\n */\nBannerMessages.propTypes = {\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.node.isRequired,\n      message: PropTypes.node.isRequired,\n      variant: PropTypes.oneOf([...Object.values(AlertVariant)])\n    })\n  ),\n  useAppMessages: PropTypes.func,\n  useRouteDetail: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useAppMessages: Function, messages: Array, useRouteDetail: Function}}\n */\nBannerMessages.defaultProps = {\n  messages: [\n    {\n      id: 'cloudigradeMismatch',\n      title: translate('curiosity-banner.dataMismatchTitle'),\n      message: translate(\n        'curiosity-banner.dataMismatchMessage',\n        {\n          context: helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS !== '' && 'cloudigradeMismatch',\n          appName: helpers.UI_DISPLAY_NAME\n        },\n        [\n          <Button\n            isInline\n            component=\"a\"\n            variant=\"link\"\n            icon={<ExternalLinkAltIcon />}\n            iconPosition=\"right\"\n            target=\"_blank\"\n            href={helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS}\n          />\n        ]\n      )\n    }\n  ],\n  useAppMessages: storeHooks.rhsmSelectors.useAppMessages,\n  useRouteDetail\n};\n\nexport { BannerMessages as default, BannerMessages };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport { useRouteDetail } from '../../hooks/useRouter';\nimport { ProductViewContext } from './productViewContext';\nimport { PageLayout, PageHeader, PageSection, PageToolbar, PageMessages, PageColumns } from '../pageLayout/pageLayout';\nimport { apiQueries } from '../../redux';\nimport { ConnectedGraphCard } from '../graphCard/graphCard';\nimport { Toolbar } from '../toolbar/toolbar';\nimport { ConnectedInventoryList } from '../inventoryList/inventoryList';\nimport { helpers } from '../../common';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport { ToolbarFieldGranularity } from '../toolbar/toolbarFieldGranularity';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport { ConnectedInventorySubscriptions } from '../inventorySubscriptions/inventorySubscriptions';\nimport { translate } from '../i18n/i18n';\n\n/**\n * ToDo: base for default product layouts, add additional props for various toolbars\n * Next steps include...\n * Consider being able to pass customized toolbars for GraphCard and the\n * various Inventory displays. Have to evaluate how to handle the global toolbar, one\n * consideration is creating optional widgets with self-contained state update ability\n * based off of context/props/etc.\n *\n * Moving existing products to this layout, or maintaining them \"as is\", then renaming and\n * relocating them to this directory if they've been customized beyond a basic layout.\n */\n/**\n * Display product columns.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Node|boolean} props.toolbarGraph\n * @param {boolean} props.toolbarGraphDescription\n * @param {Function} props.useRouteDetail\n * @returns {Node}\n */\nconst ProductView = ({ t, toolbarGraph, toolbarGraphDescription, useRouteDetail: useAliasRouteDetail }) => {\n  const { productParameter: routeProductLabel, productConfig } = useAliasRouteDetail();\n\n  const renderProduct = config => {\n    const {\n      graphTallyQuery,\n      inventoryHostsQuery,\n      inventorySubscriptionsQuery,\n      query,\n      initialGuestsFilters,\n      initialInventoryFilters,\n      initialInventorySettings,\n      initialSubscriptionsInventoryFilters,\n      productId,\n      viewId\n    } = config;\n\n    if (!productId || !viewId) {\n      return null;\n    }\n\n    const {\n      graphTallyQuery: initialGraphTallyQuery,\n      inventoryHostsQuery: initialInventoryHostsQuery,\n      inventorySubscriptionsQuery: initialInventorySubscriptionsQuery\n    } = apiQueries.parseRhsmQuery(query, { graphTallyQuery, inventoryHostsQuery, inventorySubscriptionsQuery });\n\n    let graphCardTooltip = null;\n\n    if (toolbarGraphDescription) {\n      graphCardTooltip = (\n        <Tooltip\n          content={<p>{t('curiosity-graph.cardHeadingDescription', { context: productId })}</p>}\n          position={TooltipPosition.top}\n          enableFlip={false}\n          distance={5}\n          entryDelay={100}\n          exitDelay={0}\n        >\n          <sup className=\"curiosity-icon__info\">\n            <InfoCircleIcon />\n          </sup>\n        </Tooltip>\n      );\n    }\n\n    const graphCardTitle = (\n      <React.Fragment>\n        {t('curiosity-graph.cardHeading', { context: productId })}\n        {graphCardTooltip}\n      </React.Fragment>\n    );\n\n    return (\n      <ProductViewContext.Provider value={config} key={`product_${productId}`}>\n        <PageToolbar>\n          <Toolbar />\n        </PageToolbar>\n        <PageSection>\n          <ConnectedGraphCard\n            key={`graph_${productId}`}\n            query={initialGraphTallyQuery}\n            productId={productId}\n            viewId={viewId}\n            cardTitle={graphCardTitle}\n          >\n            {(React.isValidElement(toolbarGraph) && toolbarGraph) ||\n              (toolbarGraph !== false && <ToolbarFieldGranularity />)}\n          </ConnectedGraphCard>\n        </PageSection>\n        <PageSection>\n          <InventoryTabs key={`inventory_${productId}`} productId={productId}>\n            <InventoryTab\n              key={`inventory_hosts_${productId}`}\n              title={t('curiosity-inventory.tabHosts', { context: ['noInstances', productId] })}\n            >\n              <ConnectedInventoryList\n                key={`inv_${productId}`}\n                filterGuestsData={initialGuestsFilters}\n                filterInventoryData={initialInventoryFilters}\n                productId={productId}\n                settings={initialInventorySettings}\n                query={initialInventoryHostsQuery}\n                viewId={viewId}\n              />\n            </InventoryTab>\n            {initialSubscriptionsInventoryFilters && (\n              <InventoryTab\n                key={`inventory_subs_${productId}`}\n                title={t('curiosity-inventory.tabSubscriptions', { context: productId })}\n              >\n                <ConnectedInventorySubscriptions\n                  key={`subs_${productId}`}\n                  filterInventoryData={initialSubscriptionsInventoryFilters}\n                  productId={productId}\n                  query={initialInventorySubscriptionsQuery}\n                  viewId={viewId}\n                />\n              </InventoryTab>\n            )}\n          </InventoryTabs>\n        </PageSection>\n      </ProductViewContext.Provider>\n    );\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader productLabel={routeProductLabel}>\n        {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: routeProductLabel })}\n      </PageHeader>\n      <PageMessages>\n        <BannerMessages />\n      </PageMessages>\n      <PageColumns>{productConfig.map(config => renderProduct(config))}</PageColumns>\n    </PageLayout>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), toolbarGraphDescription: boolean, useRouteDetail: Function}}\n */\nProductView.propTypes = {\n  t: PropTypes.func,\n  toolbarGraph: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n  toolbarGraphDescription: PropTypes.bool,\n  useRouteDetail: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), toolbarGraphDescription: boolean, useRouteDetail: Function}}\n */\nProductView.defaultProps = {\n  t: translate,\n  toolbarGraph: null,\n  toolbarGraphDescription: false,\n  useRouteDetail\n};\n\nexport { ProductView as default, ProductView };\n"],"names":["BannerMessages","messages","useAliasRouteDetail","useRouteDetail","useAliasAppMessages","useAppMessages","useState","hideAlerts","setHideAlerts","alerts","setAlerts","productId","pathParameter","productConfig","isProductConfig","length","query","apiQueries","appMessages","useShallowCompareEffect","dateHelpers","startDate","endDate","updatedGraphQuery","RHSM_API_QUERY_TYPES","GRANULARITY_TYPES","toISOString","storeHooks","updatedMessages","Object","entries","forEach","key","value","message","find","id","push","map","title","variant","AlertVariant","actionClose","AlertActionCloseButton","onClose","Alert","className","defaultProps","translate","context","helpers","appName","Button","isInline","component","icon","ExternalLinkAltIcon","iconPosition","target","href","ProductView","t","toolbarGraph","toolbarGraphDescription","routeProductLabel","productParameter","PageLayout","PageHeader","productLabel","PageMessages","PageColumns","config","graphTallyQuery","inventoryHostsQuery","inventorySubscriptionsQuery","initialGuestsFilters","initialInventoryFilters","initialInventorySettings","initialSubscriptionsInventoryFilters","viewId","initialGraphTallyQuery","initialInventoryHostsQuery","initialInventorySubscriptionsQuery","graphCardTooltip","Tooltip","content","position","TooltipPosition","enableFlip","distance","entryDelay","exitDelay","graphCardTitle","ProductViewContext","PageToolbar","Toolbar","PageSection","ConnectedGraphCard","cardTitle","React","ToolbarFieldGranularity","InventoryTab","ConnectedInventoryList","filterGuestsData","filterInventoryData","settings","ConnectedInventorySubscriptions","renderProduct"],"sourceRoot":""}