{"version":3,"file":"js/4059.b360be953281fb2b7661.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCard.js","webpack:///./src/components/inventorySubscriptions/inventorySubscriptions.js","webpack:///./src/components/inventoryTabs/inventoryTabs.js","webpack:///./src/components/productView/productViewOpenShiftContainer.js","webpack:///./src/components/toolbar/toolbar.js","webpack:///./src/components/toolbar/toolbarFieldGranularity.js","webpack:///./src/components/toolbar/toolbarFieldRangedMonthly.js","webpack:///./src/components/toolbar/toolbarFieldUom.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardTitle, CardHeader, CardActions, CardBody, Title } from '@patternfly/react-core';\nimport { useShallowCompareEffect } from 'react-use';\nimport { connect, reduxActions, reduxSelectors } from '../../redux';\nimport { useProduct, useProductGraphConfig, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { helpers } from '../../common';\nimport { RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { Loader } from '../loader/loader';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { GraphCardChart } from './graphCardChart';\n\n/**\n * A chart/graph card.\n *\n * @param {object} props\n * @param {Node} props.cardTitle\n * @param {Node} props.children\n * @param {boolean} props.error\n * @param {Function} props.getGraphReportsCapacity\n * @param {object} props.graphData\n * @param {object} props.meta\n * @param {boolean} props.isDisabled\n * @param {boolean} props.pending\n * @param {Function} props.useProduct\n * @param {Function} props.useProductGraphConfig\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCard = ({\n  cardTitle,\n  children,\n  error,\n  getGraphReportsCapacity,\n  graphData,\n  meta,\n  isDisabled,\n  pending,\n  useProduct: useAliasProduct,\n  useProductGraphConfig: useAliasProductGraphConfig,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productId } = useAliasProduct();\n  const { settings } = useAliasProductGraphConfig();\n  const query = useAliasProductGraphTallyQuery();\n\n  useShallowCompareEffect(() => {\n    const {\n      [RHSM_API_QUERY_TYPES.START_DATE]: startDate,\n      [RHSM_API_QUERY_TYPES.END_DATE]: endDate,\n      [RHSM_API_QUERY_TYPES.GRANULARITY]: granularity\n    } = query;\n\n    if (!isDisabled && granularity && startDate && endDate && productId) {\n      getGraphReportsCapacity(productId, query);\n    }\n  }, [getGraphReportsCapacity, isDisabled, productId, query]);\n\n  if (isDisabled) {\n    return null;\n  }\n\n  let actionDisplay = null;\n\n  if (typeof settings?.actionDisplay === 'function') {\n    actionDisplay = settings.actionDisplay({ data: { ...graphData }, meta: { ...meta } });\n  }\n\n  return (\n    <Card className=\"curiosity-usage-graph\">\n      <MinHeight key=\"headerMinHeight\">\n        <CardHeader>\n          <CardTitle>\n            <Title headingLevel=\"h2\" size=\"lg\">\n              {cardTitle}\n            </Title>\n          </CardTitle>\n          <CardActions className={(error && 'blur') || ''}>\n            <React.Fragment key=\"actionDisplay\">{actionDisplay}</React.Fragment>\n            {children}\n          </CardActions>\n        </CardHeader>\n      </MinHeight>\n      <MinHeight key=\"bodyMinHeight\">\n        <CardBody>\n          <div className={(error && 'blur') || (pending && 'fadein') || ''}>\n            {pending && <Loader variant=\"graph\" />}\n            {!pending && <GraphCardChart graphData={graphData} />}\n          </div>\n        </CardBody>\n      </MinHeight>\n    </Card>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{getGraphReportsCapacity: Function, useProduct: Function, useProductGraphTallyQuery: Function,\n *     useProductGraphConfig: Function, children: Node, meta: object, pending: boolean, graphData: object,\n *     isDisabled: boolean, error: boolean, cardTitle: Node}}\n */\nGraphCard.propTypes = {\n  cardTitle: PropTypes.node,\n  children: PropTypes.node,\n  error: PropTypes.bool,\n  getGraphReportsCapacity: PropTypes.func,\n  graphData: PropTypes.object,\n  isDisabled: PropTypes.bool,\n  meta: PropTypes.object,\n  pending: PropTypes.bool,\n  useProduct: PropTypes.func,\n  useProductGraphConfig: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{getGraphReportsCapacity: Function, useProduct: Function, useProductGraphTallyQuery: Function,\n *     useProductGraphConfig: Function, children: Node, meta: object, pending: boolean, graphData: object,\n *     isDisabled: boolean, error: boolean, cardTitle: Node}}\n */\nGraphCard.defaultProps = {\n  cardTitle: null,\n  children: null,\n  error: false,\n  getGraphReportsCapacity: helpers.noop,\n  graphData: {},\n  isDisabled: helpers.UI_DISABLED_GRAPH,\n  meta: {},\n  pending: false,\n  useProduct,\n  useProductGraphConfig,\n  useProductGraphTallyQuery\n};\n\n/**\n * Apply actions to props.\n *\n * @param {Function} dispatch\n * @returns {object}\n */\nconst mapDispatchToProps = dispatch => ({\n  getGraphReportsCapacity: (id, query) => dispatch(reduxActions.rhsm.getGraphReportsCapacity(id, query))\n});\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.graphCard.makeGraphCard();\n\nconst ConnectedGraphCard = connect(makeMapStateToProps, mapDispatchToProps)(GraphCard);\n\nexport { ConnectedGraphCard as default, ConnectedGraphCard, GraphCard };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _isEqual from 'lodash/isEqual';\nimport { SortByDirection, TableVariant } from '@patternfly/react-table';\nimport { Bullseye, Card, CardActions, CardBody, CardFooter, CardHeader } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport _camelCase from 'lodash/camelCase';\nimport { helpers } from '../../common';\nimport { connect, reduxActions, reduxSelectors, reduxTypes, store } from '../../redux';\nimport Table from '../table/table';\nimport { Loader } from '../loader/loader';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { inventoryListHelpers } from '../inventoryList/inventoryListHelpers';\nimport Pagination from '../pagination/pagination';\nimport { paginationHelpers } from '../pagination/paginationHelpers';\nimport {\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES as SORT_TYPES,\n  RHSM_API_QUERY_TYPES\n} from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A subscriptions system inventory component.\n *\n * @augments React.Component\n * @fires onColumnSort\n * @fires onPage\n * @fires onUpdateInventoryData\n */\nclass InventorySubscriptions extends React.Component {\n  componentDidMount() {\n    this.onUpdateInventoryData();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { productId, query } = this.props;\n\n    if (productId !== prevProps.productId || !_isEqual(query, prevProps.query)) {\n      this.onUpdateInventoryData();\n    }\n  }\n\n  /**\n   * On column sort update state.\n   *\n   * @event onColumnSort\n   * @param {object} data pass-through inventory data.\n   * @param {object} sortParams\n   * @param {string} sortParams.direction\n   * @param {string} sortParams.id column identifier\n   */\n  onColumnSort = (data, { direction, id }) => {\n    const { productId } = this.props;\n    const updatedSortColumn = Object.values(SORT_TYPES).find(value => _camelCase(value) === id);\n    let updatedDirection;\n\n    if (!updatedSortColumn) {\n      if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n        console.warn(`Sorting can only be performed on select fields, confirm field ${id} is allowed.`);\n      }\n      return;\n    }\n\n    switch (direction) {\n      case SortByDirection.desc:\n        updatedDirection = SORT_DIRECTION_TYPES.DESCENDING;\n        break;\n      default:\n        updatedDirection = SORT_DIRECTION_TYPES.ASCENDING;\n        break;\n    }\n\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.DIRECTION],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.DIRECTION]: updatedDirection\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.SORT],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.SORT]: updatedSortColumn\n      }\n    ]);\n  };\n\n  /**\n   * On paging and on perPage events.\n   *\n   * @event onPage\n   * @param {object} params\n   * @param {number} params.offset\n   * @param {number} params.perPage\n   */\n  onPage = ({ offset, perPage }) => {\n    const { productId } = this.props;\n\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.OFFSET],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.OFFSET]: offset\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.LIMIT],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.LIMIT]: perPage\n      }\n    ]);\n  };\n\n  /**\n   * Call the RHSM APIs, apply filters.\n   *\n   * @event onUpdateInventoryData\n   */\n  onUpdateInventoryData = () => {\n    const { getSubscriptionsInventory, isDisabled, productId, query } = this.props;\n\n    if (!isDisabled && productId) {\n      getSubscriptionsInventory(productId, query);\n    }\n  };\n\n  /**\n   * Render an inventory table.\n   *\n   * @returns {Node}\n   */\n  renderTable() {\n    const { filterInventoryData, listData, query, session } = this.props;\n    let updatedColumnHeaders = [];\n\n    const updatedRows = listData.map(({ ...cellData }) => {\n      const { columnHeaders, cells } = inventoryListHelpers.parseRowCellsListData({\n        filters: inventoryListHelpers.parseInventoryFilters({\n          filters: filterInventoryData,\n          onSort: this.onColumnSort,\n          query\n        }),\n        cellData,\n        session\n      });\n\n      updatedColumnHeaders = columnHeaders;\n\n      return {\n        cells\n      };\n    });\n\n    return (\n      <Table\n        borders\n        variant={TableVariant.compact}\n        className=\"curiosity-inventory-list\"\n        columnHeaders={updatedColumnHeaders}\n        rows={updatedRows}\n      />\n    );\n  }\n\n  /**\n   * Render an inventory card.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const {\n      error,\n      filterInventoryData,\n      fulfilled,\n      isDisabled,\n      itemCount,\n      listData,\n      pending,\n      perPageDefault,\n      query,\n      t\n    } = this.props;\n\n    if (isDisabled) {\n      return (\n        <Card className=\"curiosity-inventory-card__disabled\">\n          <CardBody>\n            <Bullseye>{t('curiosity-inventory.tab', { context: 'disabled' })}</Bullseye>\n          </CardBody>\n        </Card>\n      );\n    }\n\n    const updatedPerPage = query[RHSM_API_QUERY_TYPES.LIMIT] || perPageDefault;\n    const updatedOffset = query[RHSM_API_QUERY_TYPES.OFFSET];\n    const isLastPage = paginationHelpers.isLastPage(updatedOffset, updatedPerPage, itemCount);\n\n    // Set an updated key to force refresh minHeight\n    const minHeightContentRefreshKey =\n      (fulfilled === true && itemCount < updatedPerPage && `bodyMinHeight-${updatedPerPage}-resize`) ||\n      (fulfilled === true && isLastPage && `bodyMinHeight-${updatedPerPage}-resize`) ||\n      (error === true && `bodyMinHeight-${updatedPerPage}-resize`) ||\n      `bodyMinHeight-${updatedPerPage}`;\n\n    return (\n      <Card className=\"curiosity-inventory-card\">\n        <MinHeight key=\"headerMinHeight\" updateOnContent>\n          <CardHeader className={(error && 'hidden') || ''} aria-hidden={error || false}>\n            <CardActions className={(!itemCount && 'transparent') || ''} aria-hidden={!itemCount || false}>\n              <Pagination\n                isCompact\n                isDisabled={pending || error}\n                itemCount={itemCount}\n                offset={updatedOffset}\n                onPage={this.onPage}\n                onPerPage={this.onPage}\n                perPage={updatedPerPage}\n              />\n            </CardActions>\n          </CardHeader>\n        </MinHeight>\n        <MinHeight key={minHeightContentRefreshKey} updateOnContent>\n          <CardBody>\n            <div className={(error && 'blur') || (pending && 'fadein') || ''}>\n              {pending && (\n                <Loader\n                  variant=\"table\"\n                  tableProps={{\n                    className: 'curiosity-inventory-list',\n                    colCount: filterInventoryData?.length || (listData?.[0] && Object.keys(listData[0]).length) || 1,\n                    colWidth:\n                      (filterInventoryData?.length && filterInventoryData.map(({ cellWidth }) => cellWidth)) || [],\n                    rowCount: listData?.length || updatedPerPage,\n                    variant: TableVariant.compact\n                  }}\n                />\n              )}\n              {!pending && this.renderTable()}\n            </div>\n          </CardBody>\n        </MinHeight>\n        <MinHeight key=\"footerMinHeight\" updateOnContent>\n          <CardFooter\n            className={(error && 'hidden') || (!itemCount && 'transparent') || ''}\n            aria-hidden={error || !itemCount || false}\n          >\n            <TableToolbar isFooter>\n              <Pagination\n                dropDirection=\"up\"\n                isDisabled={pending || error}\n                itemCount={itemCount}\n                offset={updatedOffset}\n                onPage={this.onPage}\n                onPerPage={this.onPage}\n                perPage={updatedPerPage}\n              />\n            </TableToolbar>\n          </CardFooter>\n        </MinHeight>\n      </Card>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{productId: string, listData: Array, session: object, pending: boolean, query: object,\n *     fulfilled: boolean, error: boolean, getSubscriptionsInventory: Function, itemCount: number,\n *     t: Function, filterInventoryData: Array, perPageDefault: number, isDisabled: boolean}}\n */\nInventorySubscriptions.propTypes = {\n  error: PropTypes.bool,\n  fulfilled: PropTypes.bool,\n  filterInventoryData: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      header: PropTypes.oneOfType([\n        PropTypes.shape({\n          title: PropTypes.node.isRequired\n        }),\n        PropTypes.func,\n        PropTypes.node\n      ]),\n      cell: PropTypes.oneOfType([\n        PropTypes.shape({\n          title: PropTypes.node.isRequired\n        }),\n        PropTypes.func,\n        PropTypes.node\n      ])\n    }).isRequired\n  ),\n  getSubscriptionsInventory: PropTypes.func,\n  isDisabled: PropTypes.bool,\n  itemCount: PropTypes.number,\n  listData: PropTypes.array,\n  pending: PropTypes.bool,\n  productId: PropTypes.string.isRequired,\n  perPageDefault: PropTypes.number,\n  query: PropTypes.object.isRequired,\n  session: PropTypes.object,\n  t: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, filterInventoryData: Array, listData: Array, session: object, pending: boolean,\n *     fulfilled: boolean, perPageDefault: number, isDisabled: boolean, error: boolean,\n *     getSubscriptionsInventory: Function, itemCount: number}}\n */\nInventorySubscriptions.defaultProps = {\n  error: false,\n  fulfilled: false,\n  filterInventoryData: [],\n  getSubscriptionsInventory: helpers.noop,\n  isDisabled: helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS,\n  itemCount: 0,\n  listData: [],\n  pending: false,\n  perPageDefault: 10,\n  session: {},\n  t: translate\n};\n\n/**\n * Apply actions to props.\n *\n * @param {Function} dispatch\n * @returns {object}\n */\nconst mapDispatchToProps = dispatch => ({\n  getSubscriptionsInventory: (id, query) => dispatch(reduxActions.rhsm.getSubscriptionsInventory(id, query))\n});\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.subscriptionsList.makeSubscriptionsList();\n\nconst ConnectedInventorySubscriptions = connect(makeMapStateToProps, mapDispatchToProps)(InventorySubscriptions);\n\nexport { ConnectedInventorySubscriptions as default, ConnectedInventorySubscriptions, InventorySubscriptions };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Title } from '@patternfly/react-core';\nimport { connect, reduxTypes, store } from '../../redux';\nimport { Tabs } from '../tabs/tabs';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { InventoryTab } from './inventoryTab';\n\n/**\n * A system inventory tabs component.\n *\n * @augments React.Component\n * @fires onTab\n */\nclass InventoryTabs extends React.Component {\n  /**\n   * On tab update state.\n   *\n   * @event onTab\n   * @param {object} params\n   * @param {string} params.index tab index\n   */\n  onTab = ({ index }) => {\n    const { productId } = this.props;\n\n    store.dispatch({\n      type: reduxTypes.inventory.SET_INVENTORY_TAB,\n      tabs: {\n        [productId]: index\n      }\n    });\n  };\n\n  /**\n   * Render inventory tabs using Inventory tab passed props only. A parallel outcome can be\n   * achieved by passing an array of objects through a prop.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { activeTab, children, defaultActiveTab, isDisabled, t } = this.props;\n\n    if (isDisabled) {\n      return null;\n    }\n\n    const updatedChildren = React.Children.toArray(children).map((child, index) => {\n      const { props = {} } = child;\n\n      return {\n        active: props.active || false,\n        content: props.children || child,\n        title: props.title || t('curiosity-inventory.tabSubHeading', { count: index })\n      };\n    });\n\n    return (\n      <React.Fragment>\n        <Title headingLevel=\"h2\" className=\"sr-only\">\n          {t('curiosity-inventory.tabHeading', { count: updatedChildren.length })}\n        </Title>\n        <Tabs activeTab={activeTab} defaultActiveTab={defaultActiveTab} onTab={this.onTab} tabs={updatedChildren} />\n      </React.Fragment>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{productId: string, t: Function, children: Node, defaultActiveTab: number, isDisabled: boolean,\n *     activeTab: number}}\n */\nInventoryTabs.propTypes = {\n  activeTab: PropTypes.number,\n  children: PropTypes.node.isRequired,\n  defaultActiveTab: PropTypes.number,\n  isDisabled: PropTypes.bool,\n  productId: PropTypes.string.isRequired,\n  t: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, defaultActiveTab: number, isDisabled: boolean, activeTab: number}}\n */\nInventoryTabs.defaultProps = {\n  activeTab: 0,\n  defaultActiveTab: 0,\n  isDisabled: helpers.UI_DISABLED_TABLE,\n  t: translate\n};\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst mapStateToProps = ({ inventory }, { productId }) => ({ activeTab: inventory.tabs?.[productId] });\n\nconst ConnectedInventoryTabs = connect(mapStateToProps)(InventoryTabs);\n\nexport { ConnectedInventoryTabs as default, ConnectedInventoryTabs, InventoryTabs, InventoryTab };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport { useRouteDetail } from '../../hooks/useRouter';\nimport { ProductViewContext } from './productViewContext';\nimport { PageLayout, PageColumns, PageHeader, PageSection, PageToolbar } from '../pageLayout/pageLayout';\nimport { RHSM_API_PATH_ID_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { apiQueries, storeHooks } from '../../redux';\nimport GraphCard from '../graphCard/graphCard';\nimport { ToolbarFieldUom } from '../toolbar/toolbarFieldUom';\nimport { ToolbarFieldGranularity } from '../toolbar/toolbarFieldGranularity';\nimport { ToolbarFieldRangedMonthly } from '../toolbar/toolbarFieldRangedMonthly';\nimport Toolbar from '../toolbar/toolbar';\nimport InventoryList from '../inventoryList/inventoryList';\nimport InventorySubscriptions from '../inventorySubscriptions/inventorySubscriptions';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport { translate } from '../i18n/i18n';\nimport { helpers } from '../../common';\n\n/**\n * An OpenShift Container Platform encompassing view.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useRouteDetail\n * @returns {Node}\n */\nconst ProductViewOpenShiftContainer = ({ t, useRouteDetail: useAliasRouteDetail }) => {\n  const { productParameter: viewProductLabel, productConfig } = useAliasRouteDetail();\n  const uomValue = storeHooks.reactRedux.useSelector(\n    ({ view }) => view.query?.[productConfig[0].viewId]?.[RHSM_API_QUERY_TYPES.UOM],\n    null\n  );\n\n  const renderProduct = (config, updatedUomValue) => {\n    const {\n      productContextFilterUom,\n      query = {},\n      graphTallyQuery = {},\n      inventoryHostsQuery = {},\n      inventorySubscriptionsQuery = {},\n      initialGuestsFilters = [],\n      initialInventoryFilters = [],\n      initialInventorySettings = {},\n      initialSubscriptionsInventoryFilters,\n      initialToolbarFilters,\n      productId,\n      viewId\n    } = config;\n\n    if (!productId || !viewId) {\n      return null;\n    }\n\n    const {\n      graphTallyQuery: initialGraphTallyQuery,\n      inventoryHostsQuery: initialInventoryHostsQuery,\n      inventorySubscriptionsQuery: initialInventorySubscriptionsQuery,\n      toolbarQuery\n    } = apiQueries.parseRhsmQuery(query, { graphTallyQuery, inventoryHostsQuery, inventorySubscriptionsQuery });\n\n    let inventoryFilters = initialInventoryFilters;\n    let subscriptionsInventoryFilters = initialSubscriptionsInventoryFilters;\n    let uomFilter;\n\n    if (productContextFilterUom) {\n      uomFilter = updatedUomValue || query[RHSM_API_QUERY_TYPES.UOM];\n\n      const filter = ({ id, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(uomFilter, 'i').test(id);\n      };\n\n      inventoryFilters = initialInventoryFilters.filter(filter);\n      subscriptionsInventoryFilters = initialSubscriptionsInventoryFilters.filter(filter);\n    }\n\n    const graphCardTitle = (\n      <React.Fragment>\n        {t('curiosity-graph.cardHeading', { context: productId })}\n        <Tooltip\n          content={<p>{t('curiosity-graph.cardHeadingDescription', { context: productId })}</p>}\n          position={TooltipPosition.top}\n          enableFlip={false}\n          distance={5}\n          entryDelay={100}\n          exitDelay={0}\n        >\n          <sup className=\"curiosity-icon__info\">\n            <InfoCircleIcon />\n          </sup>\n        </Tooltip>\n      </React.Fragment>\n    );\n\n    return (\n      <ProductViewContext.Provider value={config} key={`product_${productId}_${uomFilter}`}>\n        {initialToolbarFilters && (\n          <PageToolbar>\n            <Toolbar filterOptions={initialToolbarFilters} productId={productId} query={toolbarQuery} viewId={viewId} />\n          </PageToolbar>\n        )}\n        <PageSection>\n          <GraphCard\n            key={`graph_${productId}`}\n            query={initialGraphTallyQuery}\n            productId={productId}\n            viewId={viewId}\n            cardTitle={graphCardTitle}\n          >\n            {productId === RHSM_API_PATH_ID_TYPES.OPENSHIFT && uomFilter && (\n              <ToolbarFieldUom value={uomFilter} viewId={viewId} />\n            )}\n            {productId === RHSM_API_PATH_ID_TYPES.OPENSHIFT && (\n              <ToolbarFieldGranularity value={graphTallyQuery[RHSM_API_QUERY_TYPES.GRANULARITY]} viewId={viewId} />\n            )}\n            {productId === RHSM_API_PATH_ID_TYPES.OPENSHIFT_METRICS && <ToolbarFieldRangedMonthly viewId={viewId} />}\n          </GraphCard>\n        </PageSection>\n        <PageSection>\n          <InventoryTabs key={`inventory_${productId}`} productId={productId}>\n            <InventoryTab\n              key={`inventory_hosts_${productId}`}\n              title={t('curiosity-inventory.tabHosts', { context: ['noInstances', productId] })}\n            >\n              <InventoryList\n                key={`inv_${productId}`}\n                filterGuestsData={initialGuestsFilters}\n                filterInventoryData={inventoryFilters}\n                productId={productId}\n                settings={initialInventorySettings}\n                query={initialInventoryHostsQuery}\n                viewId={viewId}\n              />\n            </InventoryTab>\n            {initialSubscriptionsInventoryFilters && (\n              <InventoryTab\n                key={`inventory_subs_${productId}`}\n                title={t('curiosity-inventory.tabSubscriptions', { context: productId })}\n              >\n                <InventorySubscriptions\n                  key={`subs_${productId}`}\n                  filterInventoryData={subscriptionsInventoryFilters}\n                  productId={productId}\n                  query={initialInventorySubscriptionsQuery}\n                  viewId={viewId}\n                />\n              </InventoryTab>\n            )}\n          </InventoryTabs>\n        </PageSection>\n      </ProductViewContext.Provider>\n    );\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader productLabel={viewProductLabel}>\n        {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: viewProductLabel })}\n      </PageHeader>\n      <PageColumns>{productConfig.map(config => renderProduct(config, uomValue))}</PageColumns>\n    </PageLayout>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: Function, useRouteDetail: Function}}\n */\nProductViewOpenShiftContainer.propTypes = {\n  t: PropTypes.func,\n  useRouteDetail: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: Function, useRouteDetail: Function}}\n */\nProductViewOpenShiftContainer.defaultProps = {\n  t: translate,\n  useRouteDetail\n};\n\nexport { ProductViewOpenShiftContainer as default, ProductViewOpenShiftContainer };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Toolbar as PfToolbar,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup\n} from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport { Select } from '../form/select';\nimport { connect, reduxTypes, store } from '../../redux';\nimport { RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { toolbarHelpers } from './toolbarHelpers';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Application filter toolbar.\n *\n * @augments React.Component\n * @fires onClear\n * @fires onClearFilter\n * @fires onCategorySelect\n * @fires onSelect\n */\nclass Toolbar extends React.Component {\n  /**\n   * Clear all filters' state.\n   *\n   * @event onClear\n   */\n  onClear = () => {\n    const { hardFilterReset } = this.props;\n    const dispatchActions = [\n      { type: reduxTypes.toolbar.SET_ACTIVE_FILTERS, data: { activeFilters: new Set() } },\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR,\n        data: {\n          clearFilters: {\n            [RHSM_API_QUERY_TYPES.SLA]: null,\n            [RHSM_API_QUERY_TYPES.USAGE]: null\n          }\n        }\n      }\n    ];\n\n    if (hardFilterReset) {\n      dispatchActions.push({ type: reduxTypes.toolbar.SET_FILTER_TYPE, data: { currentFilter: null } });\n    }\n\n    this.setDispatch(dispatchActions, true);\n  };\n\n  /**\n   * Clear individual filter state.\n   *\n   * @event onClearFilter\n   * @param {string} categoryTitle\n   */\n  onClearFilter = categoryTitle => {\n    const { activeFilters, currentFilter, hardFilterReset } = this.props;\n\n    const categoryOptions = toolbarHelpers.getOptions();\n    const { value: categoryValue } = categoryOptions.options.find(({ title }) => title === categoryTitle) || {};\n\n    if (!categoryValue) {\n      return;\n    }\n\n    const updatedActiveFilters = new Set(activeFilters);\n    updatedActiveFilters.delete(categoryValue);\n\n    const dispatchActions = [\n      { type: reduxTypes.toolbar.SET_ACTIVE_FILTERS, data: { activeFilters: updatedActiveFilters } },\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR,\n        data: {\n          clearFilters: {\n            [categoryValue]: null\n          }\n        }\n      }\n    ];\n\n    if (hardFilterReset) {\n      const updatedCurrentFilter = (updatedActiveFilters.size > 0 && currentFilter) || null;\n      dispatchActions.push({ type: reduxTypes.toolbar.SET_FILTER_TYPE, data: { currentFilter: updatedCurrentFilter } });\n    }\n\n    this.setDispatch(dispatchActions, true);\n  };\n\n  /**\n   * Set Category selection.\n   *\n   * @event onCategorySelect\n   * @param {object} event\n   */\n  onCategorySelect = event => {\n    const { value } = event;\n    this.setDispatch({ type: reduxTypes.toolbar.SET_FILTER_TYPE, data: { currentFilter: value } });\n  };\n\n  /**\n   * Set select filter selection for dispatch.\n   *\n   * @param {object} params\n   * @param {object} params.event\n   * @param {string} params.field\n   */\n  onSelect = ({ event, field }) => {\n    const { activeFilters } = this.props;\n    const { value } = event;\n    const updatedActiveFilters = new Set(activeFilters).add(field);\n\n    this.setDispatch(\n      [\n        {\n          type: reduxTypes.toolbar.SET_ACTIVE_FILTERS,\n          data: { activeFilters: updatedActiveFilters }\n        },\n        {\n          type: reduxTypes.query.SET_QUERY_RHSM_TYPES[field],\n          data: { [field]: value }\n        }\n      ],\n      true\n    );\n  };\n\n  /**\n   * Dispatch a Redux store type.\n   *\n   * @param {Array|object} actions\n   * @param {boolean} resetPage\n   */\n  setDispatch(actions, resetPage = false) {\n    const { viewId } = this.props;\n    const updatedActions = ((Array.isArray(actions) && actions) || [actions]).map(({ type, data }) => ({\n      type,\n      viewId,\n      ...data\n    }));\n\n    if (resetPage) {\n      updatedActions.push({\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      });\n    }\n\n    store.dispatch(updatedActions);\n  }\n\n  /**\n   * Available, and selected select filter options.\n   *\n   * @param {string} field\n   * @returns {{optionsSelected: Array, options: Array }}\n   */\n  setSelectFilter(field) {\n    const { query } = this.props;\n    const options = toolbarHelpers.getOptions(field);\n    const currentFilter = this.getCurrentFilter();\n    let filter;\n\n    if (field) {\n      filter = typeof query?.[field] === 'string' && options.options.find(({ value }) => value === query?.[field]);\n    } else {\n      filter = options.options.find(({ value }) => value === currentFilter);\n    }\n\n    const optionsSelected = (filter?.title && [filter.title]) || (options?.selected && [options.selected]) || [];\n\n    return { options, optionsSelected };\n  }\n\n  /**\n   * Return the currentFilter, fallback to selected\n   *\n   * @returns {string|undefined}\n   */\n  getCurrentFilter() {\n    const { currentFilter, filterOptions } = this.props;\n\n    return (\n      currentFilter ||\n      filterOptions.find(({ selected }) => selected === true)?.id ||\n      (filterOptions.length === 1 && filterOptions[0]?.id)\n    );\n  }\n\n  /**\n   * A select filter node.\n   *\n   * @param {object} params\n   * @param {string} params.id\n   * @returns {object}\n   */\n  renderSelectFilter({ id: field }) {\n    const { t } = this.props;\n    const { options, optionsSelected } = this.setSelectFilter(field);\n    const currentFilter = this.getCurrentFilter();\n\n    return (\n      <ToolbarFilter\n        key={field}\n        chips={optionsSelected}\n        deleteChip={this.onClearFilter}\n        categoryName={t('curiosity-toolbar.category', { context: field })}\n        showToolbarItem={currentFilter === field}\n      >\n        <Select\n          aria-label={t('curiosity-toolbar.category', { context: field })}\n          onSelect={event => this.onSelect({ event, field })}\n          selectedOptions={optionsSelected}\n          placeholder={t('curiosity-toolbar.placeholder', { context: field })}\n          options={options.options}\n        />\n      </ToolbarFilter>\n    );\n  }\n\n  /**\n   * Render a filter toolbar.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { filterOptions, isDisabled, t } = this.props;\n\n    if (isDisabled) {\n      return null;\n    }\n\n    const { options: categoryOptions, optionsSelected: categoryOptionsSelected } = this.setSelectFilter();\n\n    return (\n      <PfToolbar\n        id=\"curiosity-toolbar\"\n        className=\"curiosity-toolbar pf-m-toggle-group-container ins-c-primary-toolbar\"\n        collapseListedFiltersBreakpoint=\"sm\"\n        clearAllFilters={this.onClear}\n        clearFiltersButtonText={t('curiosity-toolbar.clearFilters')}\n      >\n        <ToolbarContent>\n          <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"md\">\n            <ToolbarGroup variant=\"filter-group\">\n              {filterOptions.length !== 1 && (\n                <ToolbarItem>\n                  <Select\n                    aria-label={t('curiosity-toolbar.category')}\n                    onSelect={this.onCategorySelect}\n                    selectedOptions={categoryOptionsSelected}\n                    placeholder={t('curiosity-toolbar.placeholder')}\n                    options={categoryOptions.options}\n                    toggleIcon={<FilterIcon />}\n                  />\n                </ToolbarItem>\n              )}\n              {filterOptions.map(({ id, selected }) => this.renderSelectFilter({ id, selected }))}\n            </ToolbarGroup>\n          </ToolbarToggleGroup>\n        </ToolbarContent>\n      </PfToolbar>\n    );\n  }\n}\n\n/**\n * Prop types\n *\n * @type {{viewId: string, t: Function, activeFilters: Set, hardFilterReset: boolean, query: object,\n *     currentFilter: string, isDisabled: boolean, filterOptions: Array}}\n */\nToolbar.propTypes = {\n  query: PropTypes.shape({\n    [RHSM_API_QUERY_TYPES.SLA]: PropTypes.string,\n    [RHSM_API_QUERY_TYPES.USAGE]: PropTypes.string\n  }),\n  activeFilters: PropTypes.instanceOf(Set),\n  currentFilter: PropTypes.oneOf([RHSM_API_QUERY_TYPES.SLA, RHSM_API_QUERY_TYPES.USAGE]),\n  filterOptions: PropTypes.arrayOf(\n    PropTypes.shape({\n      filterType: PropTypes.oneOf(['select']),\n      id: PropTypes.oneOf([RHSM_API_QUERY_TYPES.SLA, RHSM_API_QUERY_TYPES.USAGE]),\n      selected: PropTypes.bool\n    })\n  ),\n  hardFilterReset: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  t: PropTypes.func,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{viewId: string, t: translate, activeFilters: Set, hardFilterReset: boolean, query: object,\n *     currentFilter: string, isDisabled: boolean, filterOptions: Array}}\n */\nToolbar.defaultProps = {\n  query: {},\n  activeFilters: new Set(),\n  currentFilter: null,\n  filterOptions: [\n    {\n      id: RHSM_API_QUERY_TYPES.SLA,\n      filterType: 'select'\n    },\n    {\n      id: RHSM_API_QUERY_TYPES.USAGE,\n      filterType: 'select',\n      selected: true\n    }\n  ],\n  hardFilterReset: false,\n  isDisabled: helpers.UI_DISABLED_TOOLBAR,\n  t: translate,\n  viewId: 'toolbar'\n};\n\n/**\n * Apply state to props.\n *\n * @param {object} state\n * @param {object} state.toolbar\n * @param {object} state.view\n * @param {object} props\n * @param {string} props.query\n * @param {string} props.viewId\n * @returns {object}\n */\nconst mapStateToProps = ({ toolbar, view }, { query: initialQuery, viewId }) => ({\n  ...toolbar.filters?.[viewId],\n  query: view.query?.[viewId] || initialQuery\n});\n\nconst ConnectedToolbar = connect(mapStateToProps)(Toolbar);\n\nexport { ConnectedToolbar as default, ConnectedToolbar, Toolbar };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, store, storeHooks } from '../../redux';\nimport { Select } from '../form/select';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.granularity', { context: type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Array} props.options\n * @param {Function} props.t\n * @param {string} props.value\n * @param {string} props.viewId\n * @returns {Node}\n */\nconst ToolbarFieldGranularity = ({ options, t, value, viewId }) => {\n  const updatedValue = storeHooks.reactRedux.useSelector(\n    ({ view }) => view.graphTallyQuery?.[viewId]?.[RHSM_API_QUERY_TYPES.GRANULARITY],\n    value\n  );\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  /**\n   * On select, dispatch type.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @returns {void}\n   */\n  const onSelect = event => {\n    const { startDate, endDate } = dateHelpers.getRangedDateTime(event.value);\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: event.value\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      }\n    ]);\n  };\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      data-test={ToolbarFieldGranularity.defaultProps.viewId}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{viewId: string, t: Function, options: Array, value: string}}\n */\nToolbarFieldGranularity.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  t: PropTypes.func,\n  value: PropTypes.oneOf([...Object.values(FIELD_TYPES)]),\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{viewId: string, t: translate, options: Array, value: string}}\n */\nToolbarFieldGranularity.defaultProps = {\n  options: toolbarFieldOptions,\n  t: translate,\n  value: FIELD_TYPES.DAILY,\n  viewId: 'toolbarFieldGranularity'\n};\n\nexport { ToolbarFieldGranularity as default, ToolbarFieldGranularity, toolbarFieldOptions };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, store, storeHooks } from '../../redux';\nimport { Select, SelectPosition } from '../form/select';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = dateHelpers.getRangedMonthDateTime().listDateTimeRanges.map(dateTime => ({\n  ...dateTime,\n  selected: false\n}));\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Array} props.options\n * @param {Function} props.t\n * @param {string} props.value\n * @param {string} props.viewId\n * @returns {Node}\n */\nconst ToolbarFieldRangedMonthly = ({ options, t, value, viewId }) => {\n  const updatedValue = storeHooks.reactRedux.useSelector(\n    ({ view }) => view.query?.[viewId]?.[RHSM_API_QUERY_TYPES.START_DATE],\n    value\n  );\n\n  const updatedOptions = options.map(option => ({\n    ...option,\n    selected: option.title === updatedValue || option.value.startDate.toISOString() === updatedValue\n  }));\n\n  /**\n   * On select, dispatch type.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @returns {void}\n   */\n  const onSelect = event => {\n    const { startDate, endDate } = event.value;\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: FIELD_TYPES.DAILY\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      }\n    ]);\n  };\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      placeholder={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      position={SelectPosition.right}\n      maxHeight={250}\n      data-test={ToolbarFieldRangedMonthly.defaultProps.viewId}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{viewId: string, t: Function, options: Array, value: string}}\n */\nToolbarFieldRangedMonthly.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  t: PropTypes.func,\n  value: PropTypes.string,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{viewId: string, t: translate, options: Array, value: string}}\n */\nToolbarFieldRangedMonthly.defaultProps = {\n  options: toolbarFieldOptions,\n  t: translate,\n  value: translate('curiosity-toolbar.granularityRange', { context: 'current' }),\n  viewId: 'toolbarFieldRangeGranularity'\n};\n\nexport { ToolbarFieldRangedMonthly as default, ToolbarFieldRangedMonthly, toolbarFieldOptions };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, store, storeHooks } from '../../redux';\nimport { Select } from '../form/select';\nimport { RHSM_API_QUERY_UOM_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.uom', { context: type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * Display a unit of measure (uom) field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Array} props.options\n * @param {Function} props.t\n * @param {string} props.value\n * @param {string} props.viewId\n * @returns {Node}\n */\nconst ToolbarFieldUom = ({ options, t, value, viewId }) => {\n  const updatedValue = storeHooks.reactRedux.useSelector(\n    ({ view }) => view.query?.[viewId]?.[RHSM_API_QUERY_TYPES.UOM],\n    value\n  );\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  /**\n   * On select, dispatch type.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @returns {void}\n   */\n  const onSelect = event =>\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RESET_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.UOM],\n        viewId,\n        [RHSM_API_QUERY_TYPES.UOM]: event.value\n      }\n    ]);\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: 'uom' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder', { context: 'uom' })}\n      data-test={ToolbarFieldUom.defaultProps.viewId}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{viewId: string, t: Function, options: Array, value: string}}\n */\nToolbarFieldUom.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  t: PropTypes.func,\n  value: PropTypes.oneOf([...Object.values(FIELD_TYPES)]),\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{viewId: string, t: translate, options: Array, value: string}}\n */\nToolbarFieldUom.defaultProps = {\n  options: toolbarFieldOptions,\n  t: translate,\n  value: FIELD_TYPES.CORES,\n  viewId: 'toolbarFieldUom'\n};\n\nexport { ToolbarFieldUom as default, ToolbarFieldUom, toolbarFieldOptions };\n"],"names":["GraphCard","cardTitle","children","error","getGraphReportsCapacity","graphData","meta","isDisabled","pending","useAliasProduct","useProduct","useAliasProductGraphConfig","useProductGraphConfig","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","productId","settings","query","useShallowCompareEffect","startDate","RHSM_API_QUERY_TYPES","endDate","granularity","actionDisplay","data","Card","className","MinHeight","key","CardHeader","CardTitle","Title","headingLevel","size","CardActions","CardBody","Loader","variant","GraphCardChart","defaultProps","helpers","makeMapStateToProps","reduxSelectors","ConnectedGraphCard","connect","dispatch","id","reduxActions","InventorySubscriptions","onColumnSort","updatedDirection","direction","props","updatedSortColumn","Object","values","SORT_TYPES","find","value","_camelCase","SortByDirection","SORT_DIRECTION_TYPES","store","type","reduxTypes","viewId","console","warn","onPage","offset","perPage","onUpdateInventoryData","getSubscriptionsInventory","this","prevProps","_isEqual","filterInventoryData","listData","session","updatedColumnHeaders","updatedRows","map","cellData","inventoryListHelpers","filters","onSort","columnHeaders","cells","borders","TableVariant","rows","fulfilled","itemCount","perPageDefault","t","Bullseye","context","updatedPerPage","updatedOffset","isLastPage","paginationHelpers","minHeightContentRefreshKey","updateOnContent","isCompact","onPerPage","tableProps","colCount","length","keys","colWidth","cellWidth","rowCount","renderTable","CardFooter","isFooter","dropDirection","React","translate","ConnectedInventorySubscriptions","InventoryTabs","onTab","index","tabs","activeTab","defaultActiveTab","updatedChildren","child","active","content","title","count","Tabs","ConnectedInventoryTabs","inventory","ProductViewOpenShiftContainer","useAliasRouteDetail","useRouteDetail","viewProductLabel","productParameter","productConfig","uomValue","storeHooks","view","PageLayout","PageHeader","productLabel","appName","PageColumns","config","updatedUomValue","productContextFilterUom","graphTallyQuery","inventoryHostsQuery","inventorySubscriptionsQuery","initialGuestsFilters","initialInventoryFilters","initialInventorySettings","initialSubscriptionsInventoryFilters","initialToolbarFilters","uomFilter","apiQueries","initialGraphTallyQuery","initialInventoryHostsQuery","initialInventorySubscriptionsQuery","toolbarQuery","inventoryFilters","subscriptionsInventoryFilters","filter","isOptional","RegExp","test","graphCardTitle","Tooltip","position","TooltipPosition","enableFlip","distance","entryDelay","exitDelay","ProductViewContext","PageToolbar","filterOptions","PageSection","RHSM_API_PATH_ID_TYPES","ToolbarFieldUom","ToolbarFieldGranularity","ToolbarFieldRangedMonthly","InventoryTab","filterGuestsData","renderProduct","Toolbar","onClear","hardFilterReset","dispatchActions","activeFilters","Set","clearFilters","push","currentFilter","setDispatch","onClearFilter","categoryTitle","categoryValue","toolbarHelpers","options","updatedActiveFilters","updatedCurrentFilter","onCategorySelect","event","onSelect","field","add","actions","resetPage","updatedActions","Array","isArray","getCurrentFilter","optionsSelected","selected","setSelectFilter","ToolbarFilter","chips","deleteChip","categoryName","showToolbarItem","Select","selectedOptions","placeholder","categoryOptions","categoryOptionsSelected","collapseListedFiltersBreakpoint","clearAllFilters","clearFiltersButtonText","ToolbarContent","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarGroup","ToolbarItem","renderSelectFilter","filterType","ConnectedToolbar","toolbar","initialQuery","toolbarFieldOptions","FIELD_TYPES","updatedValue","updatedOptions","option","dateHelpers","toISOString","listDateTimeRanges","dateTime","SelectPosition","maxHeight"],"sourceRoot":""}