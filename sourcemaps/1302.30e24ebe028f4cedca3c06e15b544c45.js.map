{"version":3,"file":"js/1302.589f3b233da92452355e.js","mappings":"2YA8BMA,EAAW,SAAHC,GAYR,IAAAC,EAXJC,EAASF,EAATE,UACAC,EAAQH,EAARG,SACAC,EAAEJ,EAAFI,GACAC,EAASL,EAATK,UACAC,EAAUN,EAAVM,WACAC,EAAUP,EAAVO,WACAC,EAAKR,EAALQ,MACAC,EAAIT,EAAJS,KACAC,EAAQV,EAARU,SACAC,EAAKX,EAALW,MACGC,GAAKC,EAAAA,EAAAA,GAAAb,EAAAc,GAERC,EAA0BC,IAAAA,WAAgBC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAnCI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GAChBI,EAAmC,QAArBpB,EAAGkB,QAAAA,EAASd,SAAS,IAAAJ,GAAAA,EACnCqB,EAAcb,GAAQc,EAAAA,GAAAA,aACtBC,EAAYpB,GAAMkB,EAsBxB,OACEN,IAAAA,cAACS,EAAAA,SAAUC,OAAAC,OAAA,CACT,aAAYzB,GAAaC,GAAYK,EACrCoB,QAASP,EACTjB,GAAIoB,EACJnB,UAAWgB,EACXf,WAAYA,IAAc,EAC1BE,MAAOL,GAAYK,EACnBC,KAAMa,EACNZ,SAtBqB,SAACkB,EAASC,GACjC,IAAMC,GAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,IACVC,EAAAA,EAAAA,iBAAgBH,IAAM,IACzBzB,GAAIoB,EACJf,KAAMa,EACNX,MAAAA,EACAiB,QAAAA,IAGFR,EAASQ,GACTlB,EAASoB,EACX,EAYInB,MAAOA,EACPsB,SAAU1B,IAAc,GACpBK,GAGV,EA2BAb,EAASmC,aAAe,CACtBhC,UAAW,KACXC,SAAU,KACVC,GAAI,KACJC,WAAW,EACXC,YAAY,EACZC,YAAY,EACZC,MAAO,GACPC,KAAM,KACNC,SAAUa,EAAAA,GAAAA,KACVZ,WAAOwB,E","sources":["webpack:///./src/components/form/checkbox.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox as PfCheckbox } from '@patternfly/react-core/dist/js/components/Checkbox';\nimport { createMockEvent } from './formHelpers';\nimport { helpers } from '../../common';\n\n/**\n * A checkbox with state.\n *\n * @memberof Form\n * @module Checkbox\n */\n\n/**\n * Render a checkbox form element. Provides restructured event data.\n *\n * @fires onCheckboxChange\n * @param {object} props\n * @param {string} props.ariaLabel\n * @param {React.ReactNode} props.children\n * @param {string} props.id\n * @param {*} props.isChecked\n * @param {boolean} props.isDisabled\n * @param {boolean} props.isReadOnly\n * @param {React.ReactNode} props.label\n * @param {string} props.name\n * @param {Function} props.onChange\n * @param {*} props.value\n * @returns {React.ReactNode}\n */\nconst Checkbox = ({\n  ariaLabel,\n  children,\n  id,\n  isChecked,\n  isDisabled,\n  isReadOnly,\n  label,\n  name,\n  onChange,\n  value,\n  ...props\n}) => {\n  const [check, setCheck] = React.useState();\n  const updatedChecked = check ?? isChecked ?? false;\n  const updatedName = name || helpers.generateId();\n  const updatedId = id || updatedName;\n\n  /**\n   * onChange event, provide restructured event.\n   *\n   * @event onCheckboxChange\n   * @param {boolean} checked\n   * @param {object} event\n   */\n  const onCheckboxChange = (checked, event) => {\n    const mockEvent = {\n      ...createMockEvent(event),\n      id: updatedId,\n      name: updatedName,\n      value,\n      checked\n    };\n\n    setCheck(checked);\n    onChange(mockEvent);\n  };\n\n  return (\n    <PfCheckbox\n      aria-label={ariaLabel || children || label}\n      checked={updatedChecked}\n      id={updatedId}\n      isChecked={updatedChecked}\n      isDisabled={isDisabled || false}\n      label={children || label}\n      name={updatedName}\n      onChange={onCheckboxChange}\n      value={value}\n      readOnly={isReadOnly || false}\n      {...props}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{isReadOnly: boolean, onChange: Function, children: React.ReactNode, name: string, id: string,\n *     isDisabled: boolean, label: string, isChecked: boolean, value: *, ariaLabel: string}}\n */\nCheckbox.propTypes = {\n  ariaLabel: PropTypes.string,\n  children: PropTypes.node,\n  id: PropTypes.string,\n  isChecked: PropTypes.any,\n  isDisabled: PropTypes.bool,\n  isReadOnly: PropTypes.bool,\n  label: PropTypes.node,\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  value: PropTypes.any\n};\n\n/**\n * Default props.\n *\n * @type {{isReadOnly: boolean, onChange: Function, children: React.ReactNode, name: string, id: string,\n *     isDisabled: boolean, label: string, isChecked: boolean, value: *, ariaLabel: string}}\n */\nCheckbox.defaultProps = {\n  ariaLabel: null,\n  children: null,\n  id: null,\n  isChecked: false,\n  isDisabled: false,\n  isReadOnly: false,\n  label: '',\n  name: null,\n  onChange: helpers.noop,\n  value: undefined\n};\n\nexport { Checkbox as default, Checkbox };\n"],"names":["Checkbox","_ref","_ref2","ariaLabel","children","id","isChecked","isDisabled","isReadOnly","label","name","onChange","value","props","_objectWithoutProperties","_excluded","_React$useState","React","_React$useState2","_slicedToArray","check","setCheck","updatedChecked","updatedName","helpers","updatedId","PfCheckbox","Object","assign","checked","event","mockEvent","_objectSpread","createMockEvent","readOnly","defaultProps","undefined"],"sourceRoot":""}