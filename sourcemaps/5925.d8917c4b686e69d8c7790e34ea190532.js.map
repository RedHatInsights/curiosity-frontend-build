{"version":3,"file":"js/5925.9ec418ccade410ee8888.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCard.js","webpack:///./src/components/graphCard/graphCardMetricTotals.js","webpack:///./src/components/minHeight/minHeight.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { helpers } from '../../common';\nimport { GraphCardMetricTotals } from './graphCardMetricTotals';\nimport { GraphCardChart } from './graphCardChart';\nimport { GraphCardContext, useParseFiltersSettings } from './graphCardContext';\n\n/**\n * Configurable graph, chart, cards. Consumes Charts.\n *\n * @see Charts\n * @memberof Components\n * @module GraphCard\n * @property {module} GraphCardChart\n * @property {module} GraphCardChartLegend\n * @property {module} GraphCardChartTitleTooltip\n * @property {module} GraphCardChartTooltip\n * @property {module} GraphCardContext\n * @property {module} GraphCardHelpers\n * @property {module} GraphCardMetricTotals\n */\n\n/**\n * Set up graph cards. Expand filters with base graph settings.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useParseFiltersSettings\n * @returns {React.ReactNode}\n */\nconst GraphCard = ({ isDisabled, useParseFiltersSettings: useAliasParseFiltersSettings }) => {\n  const { filtersSettings } = useAliasParseFiltersSettings();\n\n  if (isDisabled || !filtersSettings?.length) {\n    return null;\n  }\n\n  return filtersSettings?.map(filterSetting => (\n    <GraphCardContext.Provider key={`graphCard-${filterSetting?.settings?.metrics?.[0]?.id}`} value={filterSetting}>\n      <GraphCardMetricTotals>\n        <GraphCardChart />\n      </GraphCardMetricTotals>\n    </GraphCardContext.Provider>\n  ));\n};\n\n/**\n * Prop types.\n *\n * @type {{useParseFiltersSettings: Function, isDisabled: boolean}}\n */\nGraphCard.propTypes = {\n  isDisabled: PropTypes.bool,\n  useParseFiltersSettings: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useParseFiltersSettings: Function, isDisabled: boolean}}\n */\nGraphCard.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_GRAPH,\n  useParseFiltersSettings\n};\n\nexport { GraphCard as default, GraphCard };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter, CardHeader, CardTitle, Title } from '@patternfly/react-core';\nimport _camelCase from 'lodash/camelCase';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useGraphCardContext, useMetricsSelector } from './graphCardContext';\nimport { Loader, SkeletonSize } from '../loader/loader';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldRangedMonthly';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * @memberof GraphCard\n * @module GraphCardMetricTotals\n */\n\n/**\n * Display totals for a single metric.\n *\n * @param {object} props\n * @param {React.ReactNode} props.children\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {React.ReactNode}\n */\nconst GraphCardMetricTotals = ({\n  children,\n  useGraphCardContext: useAliasGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate } = useAliasProductGraphTallyQuery();\n  const { pending, error, fulfilled, dataSets = [] } = useAliasMetricsSelector();\n  const { data = [], id: firstChartId, metric: firstMetricId, meta = {} } = dataSets[0] || {};\n  const { date: lastDate, hasData: lastHasData, y: lastValue } = data[data.length - 1] || {};\n\n  const {\n    date: currentDate,\n    hasData: currentHasData,\n    y: currentValue\n  } = data.find(({ isCurrentDate }) => isCurrentDate === true) || {};\n\n  const { totalMonthlyDate: monthlyDate, totalMonthlyHasData: monthlyHasData, totalMonthlyValue: monthlyValue } = meta;\n\n  const { title: selectedMonth, isCurrent } =\n    toolbarFieldOptions.find(\n      option => option.title === startDate || option.value.startDate.toISOString() === startDate\n    ) || {};\n\n  const dailyDate = isCurrent ? currentDate : lastDate;\n  const dailyHasData = isCurrent ? currentHasData : lastHasData;\n  const dailyValue = isCurrent ? currentValue : lastValue;\n\n  if (settings?.isMetricDisplay && settings?.cards?.length) {\n    const metricDisplayPassedData = helpers.setImmutableData({\n      chartId: firstChartId,\n      dailyDate,\n      dailyHasData,\n      dailyValue,\n      metricId: firstMetricId,\n      groupMetricId: [...settings.groupMetric],\n      monthlyDate,\n      monthlyHasData,\n      monthlyValue,\n      selectedValue: selectedMonth\n    });\n\n    return (\n      <div\n        data-test={`graphMetricTotals-${settings?.groupMetric?.map(metricId => _camelCase(metricId))?.join('-')}`}\n        data-test-data={JSON.stringify(metricDisplayPassedData)}\n        className=\"curiosity-usage-graph__totals\"\n      >\n        <div>\n          <div className=\"curiosity-usage-graph__totals-column\">\n            {settings?.cards?.map(({ key, header, body, footer }, index) => (\n              <Card\n                key={key || helpers.generateHash({ metricDisplayPassedData, index })}\n                isPlain\n                data-test={`graphMetricTotalsCard-${index}`}\n                className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n              >\n                <CardHeader>\n                  <CardTitle>\n                    <Title headingLevel=\"h2\" size=\"md\">\n                      {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                      {fulfilled && ((typeof header === 'function' && header(metricDisplayPassedData)) || header)}\n                    </Title>\n                  </CardTitle>\n                </CardHeader>\n                <CardBody>\n                  <div>\n                    {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg, height: '60px' }} />}\n                    {fulfilled && ((typeof body === 'function' && body(metricDisplayPassedData)) || body)}\n                  </div>\n                </CardBody>\n                <CardFooter>\n                  <div>\n                    {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                    {fulfilled && ((typeof footer === 'function' && footer(metricDisplayPassedData)) || footer)}\n                  </div>\n                </CardFooter>\n              </Card>\n            ))}\n          </div>\n        </div>\n        <div>\n          <div className=\"curiosity-usage-graph__totals-graph-column\">{children}</div>\n        </div>\n      </div>\n    );\n  }\n\n  return children;\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, children: React.ReactNode, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.propTypes = {\n  children: PropTypes.node,\n  useGraphCardContext: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, children: React.ReactNode, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.defaultProps = {\n  children: null,\n  useGraphCardContext,\n  useMetricsSelector,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardMetricTotals as default, GraphCardMetricTotals };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { helpers } from '../../common';\n\n/**\n * Normalize component height on page loads and updates.\n *\n * @memberof Components\n * @module MinHeight\n */\n\n/**\n * Set a min-height to prevent page jump component.\n *\n * @augments React.Component\n * @fires onResizeContainer\n */\nclass MinHeight extends React.Component {\n  containerRef = React.createRef();\n\n  innerContainerRef = React.createRef();\n\n  updatedContainerWidth = 0;\n\n  resizeObserver = helpers.noop;\n\n  componentDidMount() {\n    const { updateOnResize } = this.props;\n    window.setTimeout(() => {\n      this.setMinHeight();\n    });\n\n    if (updateOnResize) {\n      this.setResizeObserver();\n    }\n  }\n\n  componentDidUpdate() {\n    const { updateOnContent } = this.props;\n\n    if (updateOnContent) {\n      window.setTimeout(() => {\n        this.setMinHeight();\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.resizeObserver();\n  }\n\n  /**\n   * On resize adjust graph display.\n   *\n   * @event onResizeContainer\n   */\n  onResizeContainer = () => {\n    const { updatedContainerWidth } = this;\n    const { updateOnResize } = this.props;\n    const clientWidth = this.containerRef?.current?.clientWidth || 0;\n\n    if (updateOnResize && clientWidth !== updatedContainerWidth) {\n      this.updatedContainerWidth = clientWidth;\n      this.setMinHeight(true);\n    }\n  };\n\n  /**\n   * Set minHeight on mount or update.\n   *\n   * @param {boolean} reset\n   */\n  setMinHeight(reset = false) {\n    const { minHeight: overrideMinHeight } = this.props;\n    const { current: domElement = {} } = this.containerRef;\n    const { current: innerDomElement = {} } = this.innerContainerRef;\n\n    if (domElement?.style) {\n      let clientHeight;\n\n      if (reset) {\n        clientHeight = innerDomElement?.clientHeight || 0;\n      } else {\n        clientHeight = domElement?.clientHeight || 0;\n      }\n\n      if (overrideMinHeight > clientHeight) {\n        clientHeight = overrideMinHeight;\n      }\n\n      domElement.style.minHeight = `${clientHeight}px`;\n    }\n  }\n\n  /**\n   * Set ResizeObserver for scenarios when min-height needs to be updated.\n   */\n  setResizeObserver() {\n    window.addEventListener('resize', this.onResizeContainer);\n    this.resizeObserver = () => window.removeEventListener('resize', this.onResizeContainer);\n  }\n\n  /**\n   * Render a min-height div with children.\n   *\n   * @returns {React.ReactNode}\n   */\n  render() {\n    const { children } = this.props;\n\n    return (\n      <div className=\"curiosity-minheight\" ref={this.containerRef}>\n        <div ref={this.innerContainerRef}>{children}</div>\n      </div>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{minHeight: number, children: React.ReactNode, updateOnContent: boolean, updateOnResize: boolean}}\n */\nMinHeight.propTypes = {\n  updateOnContent: PropTypes.bool,\n  updateOnResize: PropTypes.bool,\n  children: PropTypes.node.isRequired,\n  minHeight: PropTypes.number\n};\n\n/**\n * Default props.\n *\n * @type {{minHeight: number, updateOnContent: boolean, updateOnResize: boolean}}\n */\nMinHeight.defaultProps = {\n  updateOnContent: false,\n  updateOnResize: true,\n  minHeight: 0\n};\n\nexport { MinHeight as default, MinHeight };\n"],"names":["GraphCard","_ref","isDisabled","filtersSettings","useAliasParseFiltersSettings","useParseFiltersSettings","length","map","filterSetting","_filterSetting$settin","_filterSetting$settin2","_filterSetting$settin3","React","GraphCardContext","key","concat","settings","metrics","id","value","GraphCardMetricTotals","GraphCardChart","defaultProps","helpers","_settings$cards","children","useAliasGraphCardContext","useGraphCardContext","useAliasMetricsSelector","useMetricsSelector","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","_useAliasGraphCardCon2","startDate","RHSM_API_QUERY_SET_TYPES","_useAliasMetricsSelec","pending","error","fulfilled","_useAliasMetricsSelec2","dataSets","_ref2","_ref2$data","data","firstChartId","firstMetricId","metric","_ref2$meta","meta","_ref3","lastDate","date","lastHasData","hasData","lastValue","y","_ref4","find","_ref5","isCurrentDate","currentDate","currentHasData","currentValue","monthlyDate","totalMonthlyDate","monthlyHasData","totalMonthlyHasData","monthlyValue","totalMonthlyValue","_ref6","toolbarFieldOptions","option","title","toISOString","selectedMonth","isCurrent","dailyDate","dailyHasData","dailyValue","isMetricDisplay","cards","_settings$groupMetric","_settings$groupMetric2","_settings$cards2","metricDisplayPassedData","chartId","metricId","groupMetricId","_toConsumableArray","groupMetric","selectedValue","_camelCase","join","JSON","stringify","className","_ref7","index","header","body","footer","Card","isPlain","CardHeader","CardTitle","Title","headingLevel","size","Loader","variant","skeletonProps","SkeletonSize","CardBody","height","CardFooter","MinHeight","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","call","apply","containerRef","innerContainerRef","updatedContainerWidth","resizeObserver","onResizeContainer","_this$containerRef","_this$containerRef$cu","_assertThisInitialized","updateOnResize","props","clientWidth","current","setMinHeight","_createClass","_this2","this","window","setTimeout","setResizeObserver","_this3","updateOnContent","clientHeight","reset","undefined","overrideMinHeight","minHeight","_this$containerRef$cu2","domElement","_this$innerContainerR","innerDomElement","style","_this4","addEventListener","removeEventListener","ref"],"sourceRoot":""}