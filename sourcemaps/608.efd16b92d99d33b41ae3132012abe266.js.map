{"version":3,"file":"js/608.1649867442661.bf38da80a08104fd83cc.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCard.js","webpack:///./src/components/graphCard/graphCardMetric.js","webpack:///./src/components/graphCard/graphCardMetricTotals.js","webpack:///./src/components/graphCard/graphCardMetrics.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProductGraphConfig } from '../productView/productViewContext';\nimport { helpers } from '../../common';\nimport { GraphCardMetrics } from './graphCardMetrics';\nimport { GraphCardMetric } from './graphCardMetric';\nimport { graphCardHelpers } from './graphCardHelpers';\n\n/**\n * Set up graph cards. Expand filters with base graph settings.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useProductGraphConfig\n * @returns {Node}\n */\nconst GraphCard = ({ isDisabled, useProductGraphConfig: useAliasProductGraphConfig }) => {\n  const { filters } = useAliasProductGraphConfig();\n  const { groupedFilters, standaloneFilters } = graphCardHelpers.generateChartSettings(filters);\n\n  if (isDisabled) {\n    return null;\n  }\n\n  return (\n    <React.Fragment>\n      {(groupedFilters?.length && <GraphCardMetrics metricFilters={groupedFilters} />) || null}\n      {standaloneFilters.map(metricFilter => (\n        <GraphCardMetric key={`graphCard_${metricFilter.id}`} metricFilter={metricFilter} />\n      ))}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphConfig: Function, isDisabled: boolean}}\n */\nGraphCard.propTypes = {\n  isDisabled: PropTypes.bool,\n  useProductGraphConfig: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphConfig: Function, isDisabled: boolean}}\n */\nGraphCard.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_GRAPH,\n  useProductGraphConfig\n};\n\nexport { GraphCard as default, GraphCard };\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { GraphCardChart } from './graphCardChart';\nimport { useProductGraphConfig } from '../productView/productViewContext';\nimport { GraphCardContext } from './graphCardContext';\nimport { rhsmConstants } from '../../services/rhsm/rhsmConstants';\nimport { GraphCardMetricTotals } from './graphCardMetricTotals';\n\n/**\n * Display a single graph metric.\n *\n * @param {object} props\n * @param {object} props.metricFilter\n * @param {Function} props.useProductGraphConfig\n * @returns {Node}\n */\nconst GraphCardMetric = ({ metricFilter, useProductGraphConfig: useAliasProductGraphConfig }) => {\n  const [context, setContext] = useState({});\n  const { settings } = useAliasProductGraphConfig();\n\n  useEffect(() => {\n    setContext({\n      settings: {\n        padding: {\n          bottom: 75,\n          left: 75,\n          right: 45,\n          top: 45\n        },\n        ...settings,\n        isStandalone: true,\n        metric: metricFilter,\n        metrics: [metricFilter]\n      }\n    });\n  }, [metricFilter, settings, setContext]);\n\n  return (\n    <GraphCardContext.Provider value={context}>\n      <GraphCardMetricTotals>\n        <GraphCardChart />\n      </GraphCardMetricTotals>\n    </GraphCardContext.Provider>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphConfig: Function, metricFilter: object}}\n */\nGraphCardMetric.propTypes = {\n  metricFilter: PropTypes.shape({\n    id: PropTypes.oneOf([...Object.values(rhsmConstants.RHSM_API_PATH_METRIC_TYPES)])\n  }),\n  useProductGraphConfig: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphConfig: Function, metricFilter: object}}\n */\nGraphCardMetric.defaultProps = {\n  metricFilter: {},\n  useProductGraphConfig\n};\n\nexport { GraphCardMetric as default, GraphCardMetric };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter, CardTitle, Flex, FlexItem } from '@patternfly/react-core';\nimport moment from 'moment';\nimport _camelCase from 'lodash/camelCase';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useMetricsSelector } from './graphCardContext';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { Loader, SkeletonSize } from '../loader/loader';\nimport { dateHelpers, helpers } from '../../common';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldRangedMonthly';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Display totals for a single metric.\n *\n * @param {object} props\n * @param {Node} props.children\n * @param {Function} props.t\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardMetricTotals = ({\n  children,\n  t,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate } = useAliasProductGraphTallyQuery();\n  const { pending, error, fulfilled, dataSets = [] } = useAliasMetricsSelector();\n  const { data = [], id: metricId, meta = {} } = dataSets[0] || {};\n  const { date: lastDate, hasData: lastHasData, y: lastValue } = data[data.length - 1] || {};\n  const {\n    date: currentDate,\n    hasData: currentHasData,\n    y: currentValue\n  } = data.find(({ isCurrentDate }) => isCurrentDate === true) || {};\n\n  const { totalMonthlyDate: monthlyDate, totalMonthlyHasData: monthlyHasData, totalMonthlyValue: monthlyValue } = meta;\n\n  const { title: selectedMonth, isCurrent } =\n    toolbarFieldOptions.find(\n      option => option.title === startDate || option.value.startDate.toISOString() === startDate\n    ) || {};\n\n  const dailyDate = isCurrent ? currentDate : lastDate;\n  const dailyHasData = isCurrent ? currentHasData : lastHasData;\n  const dailyValue = isCurrent ? currentValue : lastValue;\n\n  return (\n    <Flex data-test={`graphMetricTotals-${_camelCase(metricId)}`} className=\"curiosity-usage-graph__totals\">\n      <Flex flex={{ default: 'flex_1' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-column\">\n          <Card\n            data-test=\"graphDailyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric_dailyTotal', {\n                context: metricId,\n                month: selectedMonth\n              })}\n            </CardTitle>\n            <MinHeight key=\"currentBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric_total',\n                      {\n                        context: (dailyHasData && metricId) || '',\n                        total: helpers\n                          .numberDisplay(dailyValue)\n                          ?.format({\n                            average: true,\n                            mantissa: 5,\n                            trimMantissa: true,\n                            lowPrecision: false\n                          })\n                          ?.toUpperCase()\n                      },\n                      [<strong title={dailyValue} aria-label={dailyValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"currentFooter\">\n              <CardFooter>\n                <div className={(!dailyHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    dailyDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(dailyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n          <Card\n            data-test=\"graphMonthlyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric_monthlyTotal', {\n                context: metricId,\n                month: selectedMonth\n              })}\n            </CardTitle>\n            <MinHeight key=\"totalMonthlyBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric_total',\n                      {\n                        context: (monthlyHasData && metricId) || '',\n                        total: helpers\n                          .numberDisplay(monthlyValue)\n                          ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: false })\n                          ?.toUpperCase()\n                      },\n                      [<strong title={monthlyValue} aria-label={monthlyValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"totalMonthlyFooter\">\n              <CardFooter>\n                <div className={(!monthlyHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    monthlyDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(monthlyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n        </FlexItem>\n      </Flex>\n      <Flex flex={{ default: 'flex_3' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-graph-column\">{children}</FlexItem>\n      </Flex>\n    </Flex>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.propTypes = {\n  children: PropTypes.node,\n  t: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.defaultProps = {\n  children: null,\n  t: translate,\n  useMetricsSelector,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardMetricTotals as default, GraphCardMetricTotals };\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { GraphCardChart } from './graphCardChart';\nimport { useProductGraphConfig } from '../productView/productViewContext';\nimport { GraphCardContext } from './graphCardContext';\nimport { rhsmConstants } from '../../services/rhsm/rhsmConstants';\n\n/**\n * Display a single graph metric.\n *\n * @param {object} props\n * @param {Array} props.metricFilters\n * @param {Function} props.useProductGraphConfig\n * @returns {Node}\n */\nconst GraphCardMetrics = ({ metricFilters, useProductGraphConfig: useAliasProductGraphConfig }) => {\n  const [context, setContext] = useState({});\n  const { settings } = useAliasProductGraphConfig();\n\n  useEffect(() => {\n    setContext({\n      settings: {\n        ...settings,\n        isStandalone: false,\n        metric: undefined,\n        metrics: metricFilters\n      }\n    });\n  }, [metricFilters, settings, setContext]);\n\n  return (\n    <GraphCardContext.Provider value={context}>\n      <GraphCardChart />\n    </GraphCardContext.Provider>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphConfig: Function, metricFilters: Array}}\n */\nGraphCardMetrics.propTypes = {\n  metricFilters: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.oneOf([...Object.values(rhsmConstants.RHSM_API_PATH_METRIC_TYPES)])\n    })\n  ),\n  useProductGraphConfig: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphConfig: Function, metricFilters: Array}}\n */\nGraphCardMetrics.defaultProps = {\n  metricFilters: [],\n  useProductGraphConfig\n};\n\nexport { GraphCardMetrics as default, GraphCardMetrics };\n"],"names":["GraphCard","isDisabled","filters","useAliasProductGraphConfig","useProductGraphConfig","graphCardHelpers","groupedFilters","standaloneFilters","length","GraphCardMetrics","metricFilters","map","metricFilter","GraphCardMetric","key","id","defaultProps","helpers","useState","context","setContext","settings","useEffect","padding","bottom","left","right","top","isStandalone","metric","metrics","GraphCardContext","value","GraphCardMetricTotals","GraphCardChart","children","t","useAliasMetricsSelector","useMetricsSelector","startDate","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","RHSM_API_QUERY_SET_TYPES","pending","error","fulfilled","dataSets","data","metricId","meta","lastDate","date","lastHasData","hasData","lastValue","y","find","isCurrentDate","currentDate","currentHasData","currentValue","monthlyDate","totalMonthlyDate","monthlyHasData","totalMonthlyHasData","monthlyValue","totalMonthlyValue","toolbarFieldOptions","option","title","toISOString","selectedMonth","isCurrent","dailyDate","dailyHasData","dailyValue","Flex","_camelCase","className","flex","default","direction","alignSelf","FlexItem","Card","CardTitle","month","MinHeight","CardBody","Loader","variant","skeletonProps","size","SkeletonSize","total","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","CardFooter","moment","dateHelpers","translate","undefined"],"sourceRoot":""}