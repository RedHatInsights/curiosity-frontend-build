{"version":3,"file":"js/5473.1646771090811.6cfa310bf4a591b50874.js","mappings":"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","sources":["webpack:///./src/components/inventoryCard/inventoryCardHelpers.js","webpack:///./src/components/inventoryGuests/guestsList.deprecated.js","webpack:///./src/components/tooltip/tooltip.js"],"sourcesContent":["import React from 'react';\nimport { cellWidth as PfCellWidth, SortByDirection, wrappable } from '@patternfly/react-table';\nimport _camelCase from 'lodash/camelCase';\nimport _isPlainObject from 'lodash/isPlainObject';\nimport { Tooltip } from '../tooltip/tooltip';\nimport { translate } from '../i18n/i18n';\nimport {\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_TYPES\n} from '../../types/rhsmApiTypes';\nimport { helpers } from '../../common';\n\n/**\n * ToDo: review setting up a transformed cell cache for already transformed cells.\n * - review using a simple state and key memoized component\n * - review using lru cache in a inventoryCardContext custom hook\n */\n\n/**\n * Apply product inventory config properties consistently.\n *\n * @param {Function|string|number} prop\n * @param {object} options\n * @param {*[]|*} options.params\n * @returns {React.ReactNode}\n */\nconst applyConfigProperty = (prop, { params = [] } = {}) => {\n  let updatedProp = prop;\n\n  if (typeof prop === 'function') {\n    updatedProp = prop(...((Array.isArray(params) && params) || [params]));\n  }\n\n  if (typeof updatedProp === 'string' || typeof updatedProp === 'number' || React.isValidElement(updatedProp)) {\n    return updatedProp;\n  }\n\n  return undefined;\n};\n\n/**\n * Generate header and row cell configuration from filters.\n *\n * @param {Array<{id: string, cell:React.ReactNode|{ title: string }, cellWidth: number,\n *     header:React.ReactNode|{ title: string }, onSort: Function, showEmptyCell: boolean,\n *     sortId: string, sortActive: boolean, sortDirection: string,\n *     transforms: Array}>} filters\n * @param {object} cellData\n * @param {object} session\n * @returns {{bodyCells: { title: React.ReactNode }[], headerCells: { title: React.ReactNode }[]}}\n */\nconst applyHeaderRowCellFilters = (filters = [], cellData = {}, session = {}) => {\n  const headerCells = [];\n  const bodyCells = [];\n\n  filters.forEach(\n    ({ id, cell, cellWidth, header, onSort, showEmptyCell = true, sortId, sortActive, sortDirection, transforms }) => {\n      const headerCellUpdated = { title: translate('curiosity-inventory.header', { context: id }), transforms: [] };\n      const bodyCellUpdated = { title: '' };\n\n      // set filtered base header and body cells, or if filter doesn't exist skip\n      if (cellData[id]) {\n        headerCellUpdated.title = cellData[id]?.title ?? id;\n        bodyCellUpdated.title = cellData[id]?.value ?? '';\n      } else {\n        if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n          console.warn(`Warning: Filter \"${id}\" not found in \"table row\" response data.`, cellData);\n        }\n        if (showEmptyCell === false) {\n          return;\n        }\n      }\n\n      // set header cell title\n      if (header) {\n        const updatedHeaderCellTitle = applyConfigProperty(header, { params: [{ ...cellData }, { ...session }] });\n        if (updatedHeaderCellTitle) {\n          headerCellUpdated.title = updatedHeaderCellTitle;\n        } else if (_isPlainObject(header)) {\n          Object.assign(headerCellUpdated, { ...header });\n        }\n\n        // set header cell tooltip\n        if (header.tooltip && headerCellUpdated.title) {\n          const updatedHeaderCellTooltip = applyConfigProperty(header.tooltip, {\n            params: [{ ...cellData }, { ...session }]\n          });\n          if (updatedHeaderCellTooltip) {\n            headerCellUpdated.title = <Tooltip content={updatedHeaderCellTooltip}>{headerCellUpdated.title}</Tooltip>;\n          }\n\n          delete headerCellUpdated.tooltip;\n        }\n      }\n\n      // set header cell transforms\n      if (Array.isArray(headerCellUpdated.transforms)) {\n        if (Array.isArray(transforms)) {\n          headerCellUpdated.transforms = headerCellUpdated.transforms.concat([...transforms]);\n        }\n\n        if (typeof cellWidth === 'number') {\n          headerCellUpdated.transforms.push(PfCellWidth(cellWidth));\n        }\n      }\n\n      // set header cell onSort\n      if (typeof onSort === 'function') {\n        headerCellUpdated.onSort = obj => onSort({ ...cellData }, { ...obj, id: sortId || id });\n        headerCellUpdated.sortActive = sortActive;\n        headerCellUpdated.sortDirection = sortDirection;\n      }\n\n      // set body cell title\n      if (cell) {\n        const updatedBodyCellTitle = applyConfigProperty(cell, { params: [{ ...cellData }, { ...session }] });\n        if (updatedBodyCellTitle) {\n          bodyCellUpdated.title = updatedBodyCellTitle;\n        } else if (_isPlainObject(cell)) {\n          Object.assign(bodyCellUpdated, { ...cell });\n        }\n\n        // set body cell tooltip\n        if (cell.tooltip && bodyCellUpdated.title) {\n          const updatedBodyCellTooltip = applyConfigProperty(cell.tooltip, {\n            params: [{ ...cellData }, { ...session }]\n          });\n          if (updatedBodyCellTooltip) {\n            bodyCellUpdated.title = <Tooltip content={updatedBodyCellTooltip}>{bodyCellUpdated.title}</Tooltip>;\n          }\n\n          delete bodyCellUpdated.tooltip;\n        }\n      }\n\n      headerCells.push(headerCellUpdated);\n      bodyCells.push(bodyCellUpdated);\n    }\n  );\n\n  return {\n    headerCells,\n    bodyCells\n  };\n};\n\n/**\n * Shallow clone filter, and apply a column sort filter.\n *\n * @param {object} params\n * @param {{onSort: Function, sortActive: boolean, sortDirection: string, isSortDefault: boolean,\n *     sortDefaultInitialDirection: string}} params.filter\n * @param {Function} params.onSort\n * @param {object} params.query\n * @returns {{}}\n */\nconst applySortFilters = ({ filter = {}, onSort, query = {} } = {}) => {\n  const { id, sortId } = filter;\n  const updatedId = sortId || id;\n  const updatedFilter = { ...filter };\n  const hasSort = updatedFilter.onSort || onSort;\n\n  if (!updatedFilter.onSort && onSort) {\n    updatedFilter.onSort = onSort;\n  }\n\n  // set fallback for the active sorted column based on query\n  if (\n    hasSort &&\n    typeof updatedFilter.sortActive !== 'boolean' &&\n    query?.[RHSM_API_QUERY_TYPES.SORT] &&\n    (query?.[RHSM_API_QUERY_TYPES.SORT] === updatedId || _camelCase(query?.[RHSM_API_QUERY_TYPES.SORT]) === updatedId)\n  ) {\n    updatedFilter.sortActive = true;\n  }\n\n  // set sort direction\n  if (hasSort && !updatedFilter.sortDirection && query?.[RHSM_API_QUERY_TYPES.DIRECTION]) {\n    switch (query?.[RHSM_API_QUERY_TYPES.DIRECTION]) {\n      case SORT_DIRECTION_TYPES.DESCENDING:\n        updatedFilter.sortDirection = SortByDirection.desc;\n        break;\n      default:\n        updatedFilter.sortDirection = SortByDirection.asc;\n        break;\n    }\n  }\n\n  if (\n    hasSort &&\n    !updatedFilter.sortActive &&\n    !query?.[RHSM_API_QUERY_TYPES.SORT] &&\n    updatedFilter.isSortDefault === true\n  ) {\n    updatedFilter.sortActive = true;\n\n    if (updatedFilter.sortDefaultInitialDirection) {\n      updatedFilter.sortDirection = updatedFilter.sortDefaultInitialDirection;\n    }\n  }\n\n  return updatedFilter;\n};\n\n/**\n * Shallow clone and apply a consistent PF \"wrappable\" transformation config allowing column content to wrap.\n *\n * @param {object} params\n * @param {object} params.filter\n * @returns {{}}\n */\nconst applyWrappableFilters = ({ filter = {} } = {}) => {\n  const updatedFilter = { ...filter };\n\n  if (Array.isArray(updatedFilter.transforms)) {\n    updatedFilter.transforms.push(wrappable);\n  } else {\n    updatedFilter.transforms = [wrappable];\n  }\n\n  return updatedFilter;\n};\n\n/**\n * Shallow clone and apply, sequence specific, additional properties to filters.\n *\n * @param {object} params\n * @param {Array<{id: string, cell:*, cellWidth: number, header:*, onSort: Function,\n *     showEmptyCell: boolean, sortId: string, sortActive: boolean,\n *     sortDirection: string, transforms: Array, isSortDefault: boolean,\n *     sortDefaultInitialDirection: string}>} params.filters\n * @param {Function} params.onSort\n * @param {object} params.query\n * @returns {*[]}\n */\nconst parseInventoryFilters = ({ filters = [], onSort, query = {} } = {}) =>\n  [...filters].map(filter => {\n    const updatedFilter = { ...filter };\n\n    if (updatedFilter.isSortable) {\n      Object.assign(updatedFilter, applySortFilters({ filter: updatedFilter, onSort, query }));\n    }\n\n    if (updatedFilter.isWrappable) {\n      Object.assign(updatedFilter, applyWrappableFilters({ filter: updatedFilter }));\n    }\n\n    return updatedFilter;\n  });\n\n/**\n * Parse and return formatted/filtered table cells, and apply table filters.\n *\n * @param {object} params\n * @param {Array<{id: string, cell:React.ReactNode|{ title: string }, cellWidth: number,\n *     header:React.ReactNode|{ title: string }, onSort: Function, showEmptyCell: boolean,\n *     sortId: string, sortActive: boolean, sortDirection: string,\n *     transforms: Array}>} params.filters\n * @param {object} params.cellData\n * @param {object} params.session\n * @returns {{columnHeaders: { title: React.ReactNode }[], cells: { title: React.ReactNode }[], data: {}}}\n */\nconst parseRowCellsListData = ({ filters = [], cellData = {}, session = {} } = {}) => {\n  const updatedColumnHeaders = [];\n  const updatedCells = [];\n  const allCells = {};\n\n  // Apply basic translation and value\n  Object.entries(cellData).forEach(([key, value = '']) => {\n    allCells[key] = {\n      title: translate('curiosity-inventory.header', { context: key }),\n      value\n    };\n\n    updatedColumnHeaders.push(allCells[key].title);\n    updatedCells.push(value || '...');\n  });\n\n  // Apply filters to header and cell values\n  if (filters?.length && Object.keys(allCells).length) {\n    updatedColumnHeaders.length = 0;\n    updatedCells.length = 0;\n\n    const { headerCells = [], bodyCells = [] } = applyHeaderRowCellFilters(filters, allCells, session);\n\n    updatedColumnHeaders.push(...headerCells);\n    updatedCells.push(...bodyCells);\n  }\n\n  return {\n    columnHeaders: updatedColumnHeaders,\n    cells: updatedCells,\n    data: { ...allCells }\n  };\n};\n\nconst inventoryCardHelpers = {\n  applyConfigProperty,\n  applyHeaderRowCellFilters,\n  applySortFilters,\n  applyWrappableFilters,\n  parseInventoryFilters,\n  parseRowCellsListData\n};\n\nexport {\n  inventoryCardHelpers as default,\n  inventoryCardHelpers,\n  applyConfigProperty,\n  applyHeaderRowCellFilters,\n  applySortFilters,\n  applyWrappableFilters,\n  parseInventoryFilters,\n  parseRowCellsListData\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TableVariant } from '@patternfly/react-table';\nimport { helpers } from '../../common';\nimport { apiQueries, connect, reduxActions, reduxSelectors } from '../../redux';\nimport { Loader } from '../loader/loader';\nimport { inventoryCardHelpers } from '../inventoryCard/inventoryCardHelpers';\nimport { RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { Table } from '../table/table';\n\n/**\n * ToDo: Consider removing the query prop entirely.\n * The current API doesn't allow setting more than \"offset\" and \"limit\"\n */\n/**\n * ToDo: Review moving the \"onScroll\" layout into a standalone component.\n */\n/**\n * A system inventory guests component.\n *\n * @augments React.Component\n * @fires onUpdateGuestsData\n * @fires onScroll\n */\nclass GuestsList extends React.Component {\n  state = { currentPage: 0, limit: 100, previousData: [] };\n\n  componentDidMount() {\n    this.onUpdateGuestsData();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { currentPage } = this.state;\n\n    if (currentPage !== prevState.currentPage) {\n      this.onUpdateGuestsData();\n    }\n  }\n\n  /**\n   * Call the RHSM APIs, apply filters.\n   *\n   * @event onUpdateGuestsData\n   */\n  onUpdateGuestsData = () => {\n    const { currentPage, limit } = this.state;\n    const { getHostsInventoryGuests, query, id } = this.props;\n\n    if (id) {\n      const updatedQuery = {\n        ...query,\n        [RHSM_API_QUERY_TYPES.LIMIT]: limit,\n        [RHSM_API_QUERY_TYPES.OFFSET]: currentPage * limit || 0\n      };\n\n      const { inventoryGuestsQuery } = apiQueries.parseRhsmQuery(updatedQuery);\n      getHostsInventoryGuests(id, inventoryGuestsQuery);\n    }\n  };\n\n  /**\n   * Update page state.\n   *\n   * @event onScroll\n   * @param {object} event\n   */\n  onScroll = event => {\n    const { target } = event;\n    const { currentPage, limit, previousData } = this.state;\n    const { numberOfGuests, pending, listData } = this.props;\n\n    const bottom = target.scrollHeight - target.scrollTop === target.clientHeight;\n\n    if (numberOfGuests > (currentPage + 1) * limit && bottom && !pending) {\n      const newPage = currentPage + 1;\n      const updatedData = [...previousData, ...(listData || [])];\n\n      this.setState({\n        previousData: updatedData,\n        currentPage: newPage\n      });\n    }\n  };\n\n  renderLoader() {\n    const { currentPage } = this.state;\n    const { filterGuestsData, listData, pending } = this.props;\n\n    if (currentPage > 0 && pending) {\n      const scrollLoader = (\n        <Loader\n          variant=\"table\"\n          tableProps={{\n            borders: false,\n            colCount: filterGuestsData?.length || (listData?.[0] && Object.keys(listData[0]).length) || 1,\n            colWidth: (filterGuestsData?.length && filterGuestsData.map(({ cellWidth }) => cellWidth)) || [],\n            rowCount: 0,\n            variant: TableVariant.compact\n          }}\n        />\n      );\n\n      return <div className=\"curiosity-table-scroll-loader__custom\">{scrollLoader}</div>;\n    }\n\n    return null;\n  }\n\n  /**\n   * ToDo: Consider moving the \"meaning of life\" into the default props on iteration.\n   * For everyone else... move the 42 into default props, possibly the 275.\n   */\n  /**\n   * Render a guests table.\n   *\n   * @returns {Node}\n   */\n  renderTable() {\n    const { previousData } = this.state;\n    const { filterGuestsData, listData, numberOfGuests, session } = this.props;\n    let updatedColumnHeaders = [];\n\n    const updatedRows = [...previousData, ...(listData || [])].map(({ ...cellData }) => {\n      const { columnHeaders, cells } = inventoryCardHelpers.parseRowCellsListData({\n        filters: filterGuestsData,\n        cellData,\n        session\n      });\n\n      updatedColumnHeaders = columnHeaders;\n\n      return {\n        cells\n      };\n    });\n\n    // Include the table header\n    let updatedHeight = (numberOfGuests + 1) * 42;\n    updatedHeight = (updatedHeight < 275 && updatedHeight) || 275;\n\n    return (\n      <div className=\"curiosity-table-scroll\" style={{ height: `${updatedHeight}px` }}>\n        <div\n          className={`curiosity-table-scroll-list${(updatedHeight < 275 && '__no-scroll') || ''}`}\n          onScroll={this.onScroll}\n        >\n          {this.renderLoader()}\n          {(updatedRows.length && (\n            <Table\n              borders={false}\n              variant={TableVariant.compact}\n              className=\"curiosity-guests-list\"\n              columnHeaders={updatedColumnHeaders}\n              rows={updatedRows}\n            />\n          )) ||\n            null}\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * Render a guest list table.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { currentPage } = this.state;\n    const { error, filterGuestsData, listData, numberOfGuests, pending, perPageDefault } = this.props;\n\n    return (\n      <div className={`fadein ${(error && 'blur') || ''}`}>\n        {pending && currentPage === 0 && (\n          <Loader\n            variant=\"table\"\n            tableProps={{\n              borders: false,\n              className: 'curiosity-guests-list',\n              colCount: filterGuestsData?.length || (listData?.[0] && Object.keys(listData[0]).length) || 1,\n              colWidth: (filterGuestsData?.length && filterGuestsData.map(({ cellWidth }) => cellWidth)) || [],\n              rowCount: numberOfGuests < perPageDefault ? numberOfGuests : perPageDefault,\n              variant: TableVariant.compact\n            }}\n          />\n        )}\n        {((!pending && currentPage === 0) || currentPage > 0) && this.renderTable()}\n      </div>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{listData: Array, getHostsInventoryGuests: Function, session: object, filterGuestsData: object,\n *     pending: boolean, query: object, numberOfGuests: number, perPageDefault: number, id: string,\n *     error: boolean}}\n */\nGuestsList.propTypes = {\n  error: PropTypes.bool,\n  filterGuestsData: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      header: PropTypes.oneOfType([\n        PropTypes.shape({\n          title: PropTypes.node.isRequired\n        }),\n        PropTypes.func,\n        PropTypes.node\n      ]),\n      cell: PropTypes.oneOfType([\n        PropTypes.shape({\n          title: PropTypes.node.isRequired\n        }),\n        PropTypes.func,\n        PropTypes.node\n      ])\n    }).isRequired\n  ),\n  getHostsInventoryGuests: PropTypes.func,\n  listData: PropTypes.array,\n  id: PropTypes.string.isRequired,\n  numberOfGuests: PropTypes.number.isRequired,\n  pending: PropTypes.bool,\n  perPageDefault: PropTypes.number,\n  query: PropTypes.object,\n  session: PropTypes.object\n};\n\n/**\n * Default props.\n *\n * @type {{listData: Array, getHostsInventoryGuests: Function, session: object, filterGuestsData: Array,\n *     pending: boolean, query: object, perPageDefault: number, error: boolean}}\n */\nGuestsList.defaultProps = {\n  error: false,\n  filterGuestsData: [],\n  getHostsInventoryGuests: helpers.noop,\n  listData: [],\n  pending: false,\n  perPageDefault: 5,\n  query: {},\n  session: {}\n};\n\n/**\n * Apply actions to props.\n *\n * @param {Function} dispatch\n * @returns {object}\n */\nconst mapDispatchToProps = dispatch => ({\n  getHostsInventoryGuests: (id, query) => dispatch(reduxActions.rhsm.getHostsInventoryGuests(id, query))\n});\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.guestsList.makeGuestsList();\n\nconst ConnectedGuestsList = connect(makeMapStateToProps, mapDispatchToProps)(GuestsList);\n\nexport { ConnectedGuestsList as default, ConnectedGuestsList, GuestsList };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip as PfTooltip, TooltipProps, TooltipPosition } from '@patternfly/react-core';\n\n/**\n * PF tooltip wrapper component.\n *\n * @param {object} props\n * @param {React.ReactNode} props.children\n * @param {React.ReactNode} props.content\n * @param {boolean} props.isNoWrap\n * @param {TooltipProps} props.props\n * @returns {React.ReactNode}\n */\nconst Tooltip = ({ children, content, isNoWrap, ...props }) => (\n  <PfTooltip\n    className={`curiosity-tooltip${(isNoWrap && '__nowrap') || ''}`}\n    content={(React.isValidElement(content) && content) || <p>{content || ''}</p>}\n    {...props}\n  >\n    {(React.isValidElement(children) && children) || <span className=\"curiosity-tooltip-children\">{children}</span>}\n  </PfTooltip>\n);\n\n/**\n * Prop types.\n *\n * @type {{children: React.ReactNode, content: React.ReactNode}}\n */\nTooltip.propTypes = {\n  children: PropTypes.node.isRequired,\n  content: PropTypes.node,\n  distance: PropTypes.number,\n  enableFlip: PropTypes.bool,\n  entryDelay: PropTypes.number,\n  exitDelay: PropTypes.number,\n  isNoWrap: PropTypes.bool,\n  position: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{content: string}}\n */\nTooltip.defaultProps = {\n  content: '...',\n  distance: 5,\n  enableFlip: false,\n  entryDelay: 100,\n  exitDelay: 0,\n  isNoWrap: false,\n  position: TooltipPosition.top\n};\n\nexport { Tooltip as default, Tooltip };\n"],"names":["applyConfigProperty","prop","params","updatedProp","Array","isArray","React","applyHeaderRowCellFilters","filters","cellData","session","headerCells","bodyCells","forEach","id","cell","cellWidth","header","onSort","showEmptyCell","sortId","sortActive","sortDirection","transforms","headerCellUpdated","title","translate","context","bodyCellUpdated","value","helpers","console","warn","updatedHeaderCellTitle","_isPlainObject","Object","assign","tooltip","updatedHeaderCellTooltip","Tooltip","content","concat","push","PfCellWidth","obj","updatedBodyCellTitle","updatedBodyCellTooltip","applySortFilters","filter","query","updatedId","updatedFilter","hasSort","RHSM_API_QUERY_TYPES","_camelCase","SORT_DIRECTION_TYPES","SortByDirection","isSortDefault","sortDefaultInitialDirection","applyWrappableFilters","wrappable","parseInventoryFilters","map","isSortable","isWrappable","parseRowCellsListData","updatedColumnHeaders","updatedCells","allCells","entries","key","length","keys","columnHeaders","cells","data","inventoryCardHelpers","GuestsList","state","currentPage","limit","previousData","onUpdateGuestsData","props","getHostsInventoryGuests","updatedQuery","apiQueries","inventoryGuestsQuery","onScroll","event","target","numberOfGuests","pending","listData","bottom","scrollHeight","scrollTop","clientHeight","newPage","updatedData","setState","this","prevProps","prevState","filterGuestsData","scrollLoader","Loader","variant","tableProps","borders","colCount","colWidth","rowCount","TableVariant","className","updatedRows","updatedHeight","style","height","renderLoader","Table","rows","error","perPageDefault","renderTable","defaultProps","makeMapStateToProps","reduxSelectors","ConnectedGuestsList","connect","dispatch","reduxActions","children","isNoWrap","distance","enableFlip","entryDelay","exitDelay","position","TooltipPosition"],"sourceRoot":""}