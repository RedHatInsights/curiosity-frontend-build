{"version":3,"file":"js/8526.1668717095700.e1a3439d2bf484368a21.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/info-circle-icon.js","webpack:///./src/components/graphCard/graphCard.deprecated.js","webpack:///./src/components/graphCard/graphCardChart.deprecated.js","webpack:///./src/components/inventoryCardSubscriptions/inventoryCardSubscriptions.js","webpack:///./src/components/inventoryCardSubscriptions/inventoryCardSubscriptionsContext.js","webpack:///./src/components/inventoryTabs/inventoryTab.js","webpack:///./src/components/inventoryTabs/inventoryTabs.js","webpack:///./src/components/tabs/tabs.js","webpack:///./src/components/toolbar/toolbar.js","webpack:///./src/components/toolbar/toolbarContext.js"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.InfoCircleIconConfig = {\n  name: 'InfoCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.InfoCircleIcon = require('../createIcon').createIcon(exports.InfoCircleIconConfig);\nexports[\"default\"] = exports.InfoCircleIcon;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardTitle, CardHeader, CardActions, CardBody, Title } from '@patternfly/react-core';\nimport { useShallowCompareEffect } from 'react-use';\nimport { connect, reduxActions, reduxSelectors } from '../../redux';\nimport { useProduct, useProductGraphConfig, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { helpers } from '../../common';\nimport { RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { Loader } from '../loader/loader';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { GraphCardChart } from './graphCardChart.deprecated';\n\n/**\n * A chart/graph card.\n *\n * @param {object} props\n * @param {Node} props.cardTitle\n * @param {Node} props.children\n * @param {boolean} props.error\n * @param {Function} props.getGraphReportsCapacity\n * @param {object} props.graphData\n * @param {object} props.meta\n * @param {boolean} props.isDisabled\n * @param {boolean} props.pending\n * @param {Function} props.useProduct\n * @param {Function} props.useProductGraphConfig\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCard = ({\n  cardTitle,\n  children,\n  error,\n  getGraphReportsCapacity,\n  graphData,\n  meta,\n  isDisabled,\n  pending,\n  useProduct: useAliasProduct,\n  useProductGraphConfig: useAliasProductGraphConfig,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productId } = useAliasProduct();\n  const { settings } = useAliasProductGraphConfig();\n  const query = useAliasProductGraphTallyQuery();\n\n  useShallowCompareEffect(() => {\n    const {\n      [RHSM_API_QUERY_TYPES.START_DATE]: startDate,\n      [RHSM_API_QUERY_TYPES.END_DATE]: endDate,\n      [RHSM_API_QUERY_TYPES.GRANULARITY]: granularity\n    } = query;\n\n    if (!isDisabled && granularity && startDate && endDate && productId) {\n      getGraphReportsCapacity(productId, query);\n    }\n  }, [getGraphReportsCapacity, isDisabled, productId, query]);\n\n  if (isDisabled) {\n    return null;\n  }\n\n  let actionDisplay = null;\n\n  if (typeof settings?.actionDisplay === 'function') {\n    actionDisplay = settings.actionDisplay({ data: { ...graphData }, meta: { ...meta } });\n  }\n\n  return (\n    <Card className=\"curiosity-usage-graph\">\n      <MinHeight key=\"headerMinHeight\">\n        <CardHeader>\n          <CardTitle>\n            <Title headingLevel=\"h2\" size=\"lg\">\n              {cardTitle}\n            </Title>\n          </CardTitle>\n          <CardActions className={(error && 'blur') || ''}>\n            <React.Fragment key=\"actionDisplay\">{actionDisplay}</React.Fragment>\n            {children}\n          </CardActions>\n        </CardHeader>\n      </MinHeight>\n      <MinHeight key=\"bodyMinHeight\">\n        <CardBody>\n          <div className={(error && 'blur') || (pending && 'fadein') || ''}>\n            {pending && <Loader variant=\"graph\" />}\n            {!pending && <GraphCardChart graphData={graphData} />}\n          </div>\n        </CardBody>\n      </MinHeight>\n    </Card>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{getGraphReportsCapacity: Function, useProduct: Function, useProductGraphTallyQuery: Function,\n *     useProductGraphConfig: Function, children: Node, meta: object, pending: boolean, graphData: object,\n *     isDisabled: boolean, error: boolean, cardTitle: Node}}\n */\nGraphCard.propTypes = {\n  cardTitle: PropTypes.node,\n  children: PropTypes.node,\n  error: PropTypes.bool,\n  getGraphReportsCapacity: PropTypes.func,\n  graphData: PropTypes.object,\n  isDisabled: PropTypes.bool,\n  meta: PropTypes.object,\n  pending: PropTypes.bool,\n  useProduct: PropTypes.func,\n  useProductGraphConfig: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{getGraphReportsCapacity: Function, useProduct: Function, useProductGraphTallyQuery: Function,\n *     useProductGraphConfig: Function, children: Node, meta: object, pending: boolean, graphData: object,\n *     isDisabled: boolean, error: boolean, cardTitle: Node}}\n */\nGraphCard.defaultProps = {\n  cardTitle: null,\n  children: null,\n  error: false,\n  getGraphReportsCapacity: helpers.noop,\n  graphData: {},\n  isDisabled: helpers.UI_DISABLED_GRAPH,\n  meta: {},\n  pending: false,\n  useProduct,\n  useProductGraphConfig,\n  useProductGraphTallyQuery\n};\n\n/**\n * Apply actions to props.\n *\n * @param {Function} dispatch\n * @returns {object}\n */\nconst mapDispatchToProps = dispatch => ({\n  getGraphReportsCapacity: (id, query) => dispatch(reduxActions.rhsm.getGraphReportsCapacity(id, query))\n});\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.graphCard.makeGraphCard();\n\nconst ConnectedGraphCard = connect(makeMapStateToProps, mapDispatchToProps)(GraphCard);\n\nexport { ConnectedGraphCard as default, ConnectedGraphCard, GraphCard };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { chart_color_green_300 as chartColorGreenDark } from '@patternfly/react-tokens';\nimport { useProductGraphConfig, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { graphCardHelpers } from './graphCardHelpers';\nimport { Chart } from '../chart/chart';\nimport GraphCardChartLegend from './graphCardChartLegend';\nimport GraphCardChartTooltip from './graphCardChartTooltip';\nimport { RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\n\n/**\n * A chart/graph.\n *\n * @param {object} props\n * @param {object} props.graphData\n * @param {Function} props.useProductGraphConfig\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardChart = ({\n  graphData,\n  useProductGraphConfig: useAliasProductGraphConfig,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { filters } = useAliasProductGraphConfig();\n  const query = useAliasProductGraphTallyQuery();\n  const { [RHSM_API_QUERY_TYPES.GRANULARITY]: granularity } = query;\n\n  const chartAreaProps = {\n    xAxisLabelIncrement: graphCardHelpers.getChartXAxisLabelIncrement(granularity),\n    xAxisTickFormat: ({ item, previousItem, tick }) =>\n      graphCardHelpers.xAxisTickFormat({\n        tick,\n        date: item.date,\n        previousDate: previousItem.date,\n        granularity\n      }),\n    yAxisTickFormat: graphCardHelpers.yAxisTickFormat\n  };\n\n  const filteredGraphData = data => {\n    const filtered = key => {\n      const tempFiltered = {\n        data: data[key],\n        id: key,\n        strokeWidth: 2,\n        isStacked: !/^threshold/.test(key),\n        isThreshold: /^threshold/.test(key)\n      };\n\n      if (/^threshold/.test(key)) {\n        tempFiltered.stroke = chartColorGreenDark.value;\n        tempFiltered.strokeDasharray = '4,3';\n        tempFiltered.strokeWidth = 3;\n      }\n\n      return tempFiltered;\n    };\n\n    if (filters?.length) {\n      return filters.map(value => Object.assign(filtered(value.id), value));\n    }\n\n    return Object.keys(data).map(key => filtered(key));\n  };\n\n  return (\n    <Chart\n      key={`chart_${JSON.stringify(query)}`}\n      {...chartAreaProps}\n      dataSets={filteredGraphData(graphData)}\n      chartLegend={({ chart, datum }) => <GraphCardChartLegend chart={chart} datum={datum} />}\n      chartTooltip={({ datum }) => <GraphCardChartTooltip datum={datum} />}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, useProductGraphConfig: Function, graphData: object}}\n */\nGraphCardChart.propTypes = {\n  graphData: PropTypes.object,\n  useProductGraphConfig: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, useProductGraphConfig: Function, graphData: object}}\n */\nGraphCardChart.defaultProps = {\n  graphData: {},\n  useProductGraphConfig,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChart as default, GraphCardChart };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  useProductInventorySubscriptionsConfig,\n  useProductInventorySubscriptionsQuery\n} from '../productView/productViewContext';\nimport {\n  useGetSubscriptionsInventory,\n  useOnPageSubscriptions,\n  useOnColumnSortSubscriptions\n} from './inventoryCardSubscriptionsContext';\nimport InventoryCard from '../inventoryCard/inventoryCard';\nimport { helpers } from '../../common';\n\n/**\n * A subscriptions' system inventory component.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useGetInventory\n * @param {Function} props.useOnPage\n * @param {Function} props.useOnColumnSort\n * @param {Function} props.useProductInventoryConfig\n * @param {Function} props.useProductInventoryQuery\n * @fires onColumnSort\n * @fires onPage\n * @fires onUpdateInventoryData\n * @returns {Node}\n */\nconst InventoryCardSubscriptions = ({ ...props }) => <InventoryCard cardActions={null} {...props} />;\n\n/**\n * Prop types.\n *\n * @type {{useOnPage: Function, isDisabled: boolean, useProductInventoryConfig: Function, useGetInventory: Function,\n *     useOnColumnSort: Function, useProductInventoryQuery: Function}}\n */\nInventoryCardSubscriptions.propTypes = {\n  isDisabled: PropTypes.bool,\n  useGetInventory: PropTypes.func,\n  useOnPage: PropTypes.func,\n  useOnColumnSort: PropTypes.func,\n  useProductInventoryConfig: PropTypes.func,\n  useProductInventoryQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnPage: Function, isDisabled: boolean, useProductInventoryConfig: Function, useGetInventory: Function,\n *     useOnColumnSort: Function, useProductInventoryQuery: Function}}\n */\nInventoryCardSubscriptions.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS,\n  useGetInventory: useGetSubscriptionsInventory,\n  useOnPage: useOnPageSubscriptions,\n  useOnColumnSort: useOnColumnSortSubscriptions,\n  useProductInventoryConfig: useProductInventorySubscriptionsConfig,\n  useProductInventoryQuery: useProductInventorySubscriptionsQuery\n};\n\nexport { InventoryCardSubscriptions as default, InventoryCardSubscriptions };\n","import { useShallowCompareEffect } from 'react-use';\nimport _camelCase from 'lodash/camelCase';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { reduxActions, reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductInventorySubscriptionsQuery } from '../productView/productViewContext';\nimport {\n  RHSM_API_QUERY_INVENTORY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_INVENTORY_SUBSCRIPTIONS_SORT_TYPES as SORT_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * Combined Redux RHSM Actions, getSubscriptionsInventory, and inventory selector response.\n *\n * @param {object} options\n * @param {boolean} options.isDisabled\n * @param {Function} options.getInventory\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useProductInventoryQuery\n * @param {Function} options.useSelectorsResponse\n * @returns {Function}\n */\nconst useGetSubscriptionsInventory = ({\n  isDisabled = false,\n  getInventory = reduxActions.rhsm.getSubscriptionsInventory,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventorySubscriptionsQuery,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductInventoryQuery();\n  const dispatch = useAliasDispatch();\n  const { error, cancelled, fulfilled, pending, data } = useAliasSelectorsResponse(\n    ({ inventory }) => inventory?.subscriptionsInventory?.[productId]\n  );\n\n  useShallowCompareEffect(() => {\n    if (!isDisabled) {\n      getInventory(productId, query)(dispatch);\n    }\n  }, [dispatch, isDisabled, productId, query]);\n\n  return {\n    error,\n    fulfilled,\n    pending: pending || cancelled || false,\n    data: (data?.length === 1 && data[0]) || data || {}\n  };\n};\n\n/**\n * An onPage callback for subscriptions inventory.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnPageSubscriptions = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for subscriptions inventory.\n   *\n   * @event onPage\n   * @param {object} params\n   * @param {number} params.offset\n   * @param {number} params.perPage\n   * @returns {void}\n   */\n  return ({ offset, perPage }) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.OFFSET],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.OFFSET]: offset\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.LIMIT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.LIMIT]: perPage\n      }\n    ]);\n  };\n};\n\n/**\n * An onColumnSort callback for subscriptions inventory.\n *\n * @param {object} options\n * @param {object} options.sortColumns\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnColumnSortSubscriptions = ({\n  sortColumns = SORT_TYPES,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for subscriptions inventory.\n   *\n   * @event onColumnSort\n   * @param {*} _data\n   * @param {object} params\n   * @param {string} params.direction\n   * @param {string} params.id\n   * @returns {void}\n   */\n  return (_data, { direction, id }) => {\n    const updatedSortColumn = Object.values(sortColumns).find(value => value === id || _camelCase(value) === id);\n    let updatedDirection;\n\n    if (!updatedSortColumn) {\n      if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n        console.warn(`Sorting can only be performed on select fields, confirm field ${id} is allowed.`);\n      }\n      return;\n    }\n\n    switch (direction) {\n      case SortByDirection.desc:\n        updatedDirection = SORT_DIRECTION_TYPES.DESCENDING;\n        break;\n      default:\n        updatedDirection = SORT_DIRECTION_TYPES.ASCENDING;\n        break;\n    }\n\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.DIRECTION],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.DIRECTION]: updatedDirection\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.SORT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.SORT]: updatedSortColumn\n      }\n    ]);\n  };\n};\n\nconst context = {\n  useGetSubscriptionsInventory,\n  useOnPageSubscriptions,\n  useOnColumnSortSubscriptions\n};\n\nexport {\n  context as default,\n  context,\n  useGetSubscriptionsInventory,\n  useOnPageSubscriptions,\n  useOnColumnSortSubscriptions\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * A tab pass-through component for passing props to InventoryTabs.\n *\n * @param {object} props\n * @param {boolean} props.active\n * @param {React.ReactNode} props.children\n * @param {string} props.title\n * @returns {React.ReactNode}\n */\n// eslint-disable-next-line no-unused-vars\nconst InventoryTab = ({ active, children, title }) => children;\n\n/**\n * Prop types.\n *\n * @type {{children: React.ReactNode, className: string}}\n */\nInventoryTab.propTypes = {\n  children: PropTypes.node.isRequired,\n  active: PropTypes.bool,\n  title: PropTypes.node.isRequired\n};\n\n/**\n * Default props.\n *\n * @type {{className: string}}\n */\nInventoryTab.defaultProps = {\n  active: false\n};\n\nexport { InventoryTab as default, InventoryTab };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Title } from '@patternfly/react-core';\nimport { connect, reduxTypes, store } from '../../redux';\nimport { Tabs } from '../tabs/tabs';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { InventoryTab } from './inventoryTab';\n\n/**\n * A system inventory tabs component.\n *\n * @augments React.Component\n * @fires onTab\n */\nclass InventoryTabs extends React.Component {\n  /**\n   * On tab update state.\n   *\n   * @event onTab\n   * @param {object} params\n   * @param {string} params.index tab index\n   */\n  onTab = ({ index }) => {\n    const { productId } = this.props;\n\n    store.dispatch({\n      type: reduxTypes.inventory.SET_INVENTORY_TAB,\n      tabs: {\n        [productId]: index\n      }\n    });\n  };\n\n  /**\n   * Render inventory tabs using Inventory tab passed props only. A parallel outcome can be\n   * achieved by passing an array of objects through a prop.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { activeTab, children, defaultActiveTab, isDisabled, t } = this.props;\n\n    if (isDisabled) {\n      return null;\n    }\n\n    const updatedChildren = React.Children.toArray(children).map((child, index) => {\n      const { props = {} } = child;\n\n      return {\n        active: props.active || false,\n        content: props.children || child,\n        title: props.title || t('curiosity-inventory.tabSubHeading', { count: index })\n      };\n    });\n\n    return (\n      <React.Fragment>\n        <Title headingLevel=\"h2\" className=\"sr-only\">\n          {t('curiosity-inventory.tabHeading', { count: updatedChildren.length })}\n        </Title>\n        <Tabs activeTab={activeTab} defaultActiveTab={defaultActiveTab} onTab={this.onTab} tabs={updatedChildren} />\n      </React.Fragment>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{productId: string, t: Function, children: Node, defaultActiveTab: number, isDisabled: boolean,\n *     activeTab: number}}\n */\nInventoryTabs.propTypes = {\n  activeTab: PropTypes.number,\n  children: PropTypes.node.isRequired,\n  defaultActiveTab: PropTypes.number,\n  isDisabled: PropTypes.bool,\n  productId: PropTypes.string.isRequired,\n  t: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, defaultActiveTab: number, isDisabled: boolean, activeTab: number}}\n */\nInventoryTabs.defaultProps = {\n  activeTab: 0,\n  defaultActiveTab: 0,\n  isDisabled: helpers.UI_DISABLED_TABLE,\n  t: translate\n};\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst mapStateToProps = ({ inventory }, { productId }) => ({ activeTab: inventory.tabs?.[productId] });\n\nconst ConnectedInventoryTabs = connect(mapStateToProps)(InventoryTabs);\n\nexport { ConnectedInventoryTabs as default, ConnectedInventoryTabs, InventoryTabs, InventoryTab };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tabs as PfTabs, Tab, TabTitleText, Grid, GridItem } from '@patternfly/react-core';\nimport _isEqualWith from 'lodash/isEqualWith';\nimport { helpers } from '../../common';\n\n/**\n * FixMe: PF tabs misinterprets \"isElementInView\" when tab title nodes are loaded dynamically\n * It appears the use of isElementInView within PF tabs is trying to be predicative in using\n * \"getBoundingClientRect\" but produces questionable results in scenarios where content is\n * async created. isElementInView assumes some form of the content will always be there\n * instead of scenarios where someone tries to dynamically apply components. It may be good to\n * review using a window.setTimeout(() => handleScrollButtons()) in componentDidMount.\n *\n * Our temporary solution is to simply hide the buttons with a manual set flag affecting the\n * CSS class. This will most likely cause long-term issues.\n */\n/**\n * ToDo: Insights frontend components uses a custom tabs layout, investigate related CSS classes\n * Originally we applied the CSS classes, but they appeared to provide nothing. Since Insights\n * rolled its own tabs we're hesitant to apply said classes without understanding what they provide.\n */\n/**\n * A set of tabs.\n *\n * @augments React.Component\n * @fires onTab\n */\nclass Tabs extends React.Component {\n  state = {\n    updatedActiveTab: null,\n    updatedTabs: null\n  };\n\n  componentDidMount() {\n    const { updatedTabs } = this.state;\n\n    if (updatedTabs === null) {\n      this.setTabData();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { tabs } = this.props;\n    const customizer = (valueA, valueB) => {\n      if (typeof valueA === 'function' && typeof valueB === 'function') {\n        return valueA.toString() === valueB.toString();\n      }\n\n      return undefined;\n    };\n\n    if (!_isEqualWith(prevProps.tabs, tabs, customizer)) {\n      this.setTabData();\n    }\n  }\n\n  /**\n   * On tab selected\n   *\n   * @event onTab\n   * @param {object} params\n   * @param {number} params.index\n   */\n  onTab = ({ index }) => {\n    const { onTab } = this.props;\n\n    this.setState(\n      {\n        updatedActiveTab: index\n      },\n      () => onTab({ index })\n    );\n  };\n\n  /**\n   * Convert tab objects into the required PF Tab format.\n   */\n  setTabData() {\n    const { activeTab, defaultActiveTab, tabs } = this.props;\n    let updatedActiveTab = defaultActiveTab;\n\n    const updatedTabs = tabs.map(({ active, content, title }, index) => {\n      updatedActiveTab = active ? index : updatedActiveTab;\n\n      return (\n        <Tab key={title} eventKey={index} title={<TabTitleText>{title}</TabTitleText>}>\n          {content}\n        </Tab>\n      );\n    });\n\n    if (typeof activeTab === 'number') {\n      updatedActiveTab = activeTab;\n    }\n\n    this.setState({\n      updatedActiveTab,\n      updatedTabs\n    });\n  }\n\n  /**\n   * Apply props to tabs.\n   *\n   * @returns {Node}\n   */\n  renderTabs() {\n    const { updatedActiveTab, updatedTabs } = this.state;\n    const { className, hasOverflowScroll } = this.props;\n\n    return (\n      <PfTabs\n        className={`curiosity-tabs${(!hasOverflowScroll && '__no-scroll') || ''} ${className || ''}`}\n        activeKey={updatedActiveTab}\n        onSelect={(event, index) => this.onTab({ event, index })}\n        mountOnEnter\n        unmountOnExit\n        inset={{\n          default: 'insetNone',\n          md: 'insetLg'\n        }}\n      >\n        {updatedTabs}\n      </PfTabs>\n    );\n  }\n\n  /**\n   * Render tabs.\n   *\n   * @returns {Node}\n   */\n  render() {\n    return (\n      <Grid className=\"curiosity-tabs-container\">\n        <GridItem span={12}>{this.renderTabs()}</GridItem>\n      </Grid>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{tabs: Array, hasOverflowScroll: boolean, onTab: Function, className: string,\n *     defaultActiveTab: number, activeTab: number}}\n */\nTabs.propTypes = {\n  activeTab: PropTypes.number,\n  className: PropTypes.string,\n  defaultActiveTab: PropTypes.number,\n  hasOverflowScroll: PropTypes.bool,\n  onTab: PropTypes.func,\n  tabs: PropTypes.arrayOf(\n    PropTypes.shape({\n      active: PropTypes.bool,\n      content: PropTypes.node.isRequired,\n      title: PropTypes.node.isRequired\n    })\n  )\n};\n\n/**\n * Default props.\n *\n * @type {{tabs: Array, hasOverflowScroll: boolean, onTab: Function, className: string,\n *     defaultActiveTab: number, activeTab: number}}\n */\nTabs.defaultProps = {\n  activeTab: null,\n  className: '',\n  defaultActiveTab: 0,\n  hasOverflowScroll: false,\n  onTab: helpers.noop,\n  tabs: []\n};\n\nexport { Tabs as default, Tabs };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Toolbar as PfToolbar,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup\n} from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport {\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFieldQueries,\n  useToolbarSecondaryFields\n} from './toolbarContext';\nimport { ToolbarFieldSelectCategory, useSelectCategoryOptions } from './toolbarFieldSelectCategory';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Application filter toolbar.\n *\n * @fires onClearFilter\n * @fires onClearAll\n * @param {object} props\n * @param {boolean} props.hardFilterReset On clearing all fields allow the category to reset as well.\n * @param {boolean} props.isDisabled\n * @param {Function} props.t\n * @param {Function} props.useSelectCategoryOptions\n * @param {Function} props.useToolbarFieldClear\n * @param {Function} props.useToolbarFieldClearAll\n * @param {Function} props.useToolbarFieldQueries\n * @param {Function} props.useToolbarSecondaryFields\n * @returns {Node}\n */\nconst Toolbar = ({\n  hardFilterReset,\n  isDisabled,\n  t,\n  useSelectCategoryOptions: useAliasSelectCategoryOptions,\n  useToolbarFieldClear: useAliasToolbarFieldClear,\n  useToolbarFieldClearAll: useAliasToolbarFieldClearAll,\n  useToolbarFieldQueries: useAliasToolbarFieldQueries,\n  useToolbarSecondaryFields: useAliasToolbarSecondaryFields\n}) => {\n  const { currentCategory, options } = useAliasSelectCategoryOptions();\n  const toolbarFieldQueries = useAliasToolbarFieldQueries();\n  const clearField = useAliasToolbarFieldClear();\n  const clearAllFields = useAliasToolbarFieldClearAll();\n  const secondaryFields = useAliasToolbarSecondaryFields();\n\n  if (isDisabled || (!options?.length && !secondaryFields?.length)) {\n    return null;\n  }\n\n  /**\n   * Clear a specific value\n   *\n   * @event onClearFilter\n   * @param {object} params\n   * @param {*} params.value\n   * @returns {void}\n   */\n  const onClearFilter = ({ value }) => clearField(value);\n\n  /**\n   * Clear all active filters.\n   *\n   * @event onClearAll\n   * @returns {void}\n   */\n  const onClearAll = () => clearAllFields(hardFilterReset);\n\n  /**\n   * Set selected options for chip display.\n   *\n   * @param {object} params\n   * @param {Array} params.options\n   * @param {*} params.value\n   * @returns {Array}\n   */\n  const setSelectedOptions = ({ options: filterOptions, value }) => {\n    const query = filterOptions.find(({ value: optionValue }) => optionValue === toolbarFieldQueries?.[value]);\n    return (query?.title && [query?.title]) || [];\n  };\n\n  return (\n    <PfToolbar\n      id=\"curiosity-toolbar\"\n      className=\"curiosity-toolbar pf-m-toggle-group-container ins-c-primary-toolbar\"\n      collapseListedFiltersBreakpoint=\"sm\"\n      clearAllFilters={onClearAll}\n      clearFiltersButtonText={t('curiosity-toolbar.clearFilters')}\n    >\n      <ToolbarContent>\n        <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"md\">\n          <ToolbarGroup variant=\"filter-group\">\n            {options.length > 1 && (\n              <ToolbarItem>\n                <ToolbarFieldSelectCategory />\n              </ToolbarItem>\n            )}\n            {options.map(({ title, value, component: OptionComponent, isClearable, options: filterOptions }) => {\n              const chipProps = { categoryName: title };\n\n              if (isClearable !== false) {\n                chipProps.chips = setSelectedOptions({ options: filterOptions, value });\n                chipProps.deleteChip = () => onClearFilter({ options: filterOptions, value });\n              }\n\n              return (\n                <ToolbarFilter\n                  key={value}\n                  showToolbarItem={currentCategory === value || options.length === 1}\n                  {...chipProps}\n                >\n                  <OptionComponent isFilter />\n                </ToolbarFilter>\n              );\n            })}\n          </ToolbarGroup>\n        </ToolbarToggleGroup>\n        <ToolbarItem alignment={{ default: 'alignRight' }}>{secondaryFields}</ToolbarItem>\n      </ToolbarContent>\n    </PfToolbar>\n  );\n};\n\n/**\n * Prop types\n *\n * @type {{useToolbarFieldClear: Function, t: Function, useSelectCategoryOptions: Function, hardFilterReset: boolean,\n *     useToolbarSecondaryFields: Function, isDisabled: boolean, useToolbarFieldClearAll: Function, useToolbarFieldQueries: Function}}\n */\nToolbar.propTypes = {\n  hardFilterReset: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  t: PropTypes.func,\n  useSelectCategoryOptions: PropTypes.func,\n  useToolbarFieldClear: PropTypes.func,\n  useToolbarFieldClearAll: PropTypes.func,\n  useToolbarFieldQueries: PropTypes.func,\n  useToolbarSecondaryFields: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useToolbarFieldClear: Function, t: Function, useSelectCategoryOptions: Function, hardFilterReset: boolean,\n *     useToolbarSecondaryFields: Function, isDisabled: boolean, useToolbarFieldClearAll: Function, useToolbarFieldQueries: Function}}\n */\nToolbar.defaultProps = {\n  hardFilterReset: false,\n  isDisabled: helpers.UI_DISABLED_TOOLBAR,\n  t: translate,\n  useSelectCategoryOptions,\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFieldQueries,\n  useToolbarSecondaryFields\n};\n\nexport { Toolbar as default, Toolbar };\n","import React from 'react';\nimport { useProductQuery, useProductGraphTallyQuery, useProductToolbarConfig } from '../productView/productViewContext';\nimport { RHSM_API_QUERY_SET_TYPES as RHSM_API_QUERY_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { useOnSelect as useSelectCategoryOnSelect, toolbarFieldOptions } from './toolbarFieldSelectCategory';\nimport { useOnSelect as useBillingProviderOnSelect } from './toolbarFieldBillingProvider';\nimport { useOnSelect as useSlaOnSelect } from './toolbarFieldSla';\nimport { useOnSelect as useUsageOnSelect } from './toolbarFieldUsage';\nimport { SelectPosition } from '../form/select';\n\n/**\n * Return current values for categories/queries.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductGraphTallyQuery\n * @returns {object}\n */\nconst useToolbarFieldQueries = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery\n} = {}) => {\n  const {\n    [RHSM_API_QUERY_TYPES.BILLING_PROVIDER]: billingProvider,\n    [RHSM_API_QUERY_TYPES.SLA]: sla,\n    [RHSM_API_QUERY_TYPES.UOM]: uom,\n    [RHSM_API_QUERY_TYPES.USAGE]: usage\n  } = useAliasProductQuery();\n  const { [RHSM_API_QUERY_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n\n  return {\n    [RHSM_API_QUERY_TYPES.BILLING_PROVIDER]: billingProvider,\n    [RHSM_API_QUERY_TYPES.GRANULARITY]: granularity,\n    [RHSM_API_QUERY_TYPES.SLA]: sla,\n    [RHSM_API_QUERY_TYPES.UOM]: uom,\n    [RHSM_API_QUERY_TYPES.USAGE]: usage\n  };\n};\n\n/**\n * Clear a specific toolbar category.\n *\n * @param {object} options\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClear = ({\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect\n} = {}) => {\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n\n  return field => {\n    switch (field) {\n      case RHSM_API_QUERY_TYPES.BILLING_PROVIDER:\n        billingOnSelect();\n        break;\n      case RHSM_API_QUERY_TYPES.SLA:\n        slaOnSelect();\n        break;\n      case RHSM_API_QUERY_TYPES.USAGE:\n        usageOnSelect();\n        break;\n      default:\n        break;\n    }\n  };\n};\n\n/**\n * Clear all available toolbar categories.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useSelectCategoryOnSelect\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClearAll = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useSelectCategoryOnSelect: useAliasSelectCategoryOnSelect = useSelectCategoryOnSelect,\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect\n} = {}) => {\n  const {\n    [RHSM_API_QUERY_TYPES.BILLING_PROVIDER]: billingProvider,\n    [RHSM_API_QUERY_TYPES.SLA]: sla,\n    [RHSM_API_QUERY_TYPES.USAGE]: usage\n  } = useAliasProductQuery();\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n  const selectCategoryOnSelect = useAliasSelectCategoryOnSelect();\n\n  return hardFilterReset => {\n    if (typeof billingProvider === 'string') {\n      billingOnSelect();\n    }\n\n    if (typeof sla === 'string') {\n      slaOnSelect();\n    }\n\n    if (typeof usage === 'string') {\n      usageOnSelect();\n    }\n\n    if (hardFilterReset) {\n      selectCategoryOnSelect();\n    }\n  };\n};\n\n/**\n * Return list of secondary toolbar fields for display.\n *\n * @param {object} options\n * @param {Array} options.categoryOptions\n * @param {Function} options.useProductToolbarConfig\n * @returns {Array}\n */\nconst useToolbarSecondaryFields = ({\n  categoryOptions = toolbarFieldOptions,\n  useProductToolbarConfig: useAliasProductToolbarConfig = useProductToolbarConfig\n} = {}) => {\n  const { secondaryFilters = [] } = useAliasProductToolbarConfig();\n\n  return secondaryFilters.map(({ id }) => {\n    const { component: OptionComponent } = categoryOptions.find(\n      ({ value: categoryOptionValue }) => id === categoryOptionValue\n    );\n\n    return <OptionComponent key={`option-${id}`} isFilter={false} position={SelectPosition.right} />;\n  });\n};\n\nconst context = {\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFieldQueries,\n  useToolbarSecondaryFields\n};\n\nexport {\n  context as default,\n  context,\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFieldQueries,\n  useToolbarSecondaryFields\n};\n"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","GraphCard","cardTitle","children","error","getGraphReportsCapacity","graphData","meta","isDisabled","pending","useAliasProduct","useProduct","useAliasProductGraphConfig","useProductGraphConfig","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","productId","settings","query","useShallowCompareEffect","startDate","RHSM_API_QUERY_TYPES","endDate","granularity","actionDisplay","data","Card","className","MinHeight","key","CardHeader","CardTitle","Title","headingLevel","size","CardActions","CardBody","Loader","variant","GraphCardChart","defaultProps","helpers","makeMapStateToProps","reduxSelectors","ConnectedGraphCard","connect","dispatch","id","reduxActions","filtered","filters","chartAreaProps","xAxisLabelIncrement","graphCardHelpers","xAxisTickFormat","item","previousItem","tick","date","previousDate","yAxisTickFormat","Chart","JSON","stringify","dataSets","tempFiltered","strokeWidth","isStacked","test","isThreshold","stroke","chartColorGreenDark","strokeDasharray","length","map","value","Object","assign","keys","chartLegend","chart","datum","chartTooltip","InventoryCardSubscriptions","props","cardActions","useGetInventory","useGetSubscriptionsInventory","useOnPage","useOnPageSubscriptions","useOnColumnSort","useOnColumnSortSubscriptions","useProductInventoryConfig","useProductInventorySubscriptionsConfig","useProductInventoryQuery","useProductInventorySubscriptionsQuery","getInventory","useDispatch","useAliasDispatch","storeHooks","useAliasProductInventoryQuery","useSelectorsResponse","useAliasSelectorsResponse","inventory","subscriptionsInventory","cancelled","fulfilled","offset","perPage","type","reduxTypes","RHSM_API_QUERY_SET_TYPES","viewId","sortColumns","SORT_TYPES","_data","updatedDirection","direction","updatedSortColumn","values","find","_camelCase","SortByDirection","SORT_DIRECTION_TYPES","console","warn","context","InventoryTab","active","title","propTypes","PropTypes","InventoryTabs","onTab","index","store","tabs","this","activeTab","defaultActiveTab","t","updatedChildren","React","child","content","count","Tabs","translate","ConnectedInventoryTabs","state","updatedActiveTab","updatedTabs","setState","setTabData","prevProps","_isEqualWith","valueA","valueB","toString","Tab","eventKey","TabTitleText","hasOverflowScroll","activeKey","onSelect","event","mountOnEnter","unmountOnExit","inset","default","md","Grid","GridItem","span","renderTabs","Toolbar","hardFilterReset","useAliasSelectCategoryOptions","useSelectCategoryOptions","useAliasToolbarFieldClear","useToolbarFieldClear","useAliasToolbarFieldClearAll","useToolbarFieldClearAll","useAliasToolbarFieldQueries","useToolbarFieldQueries","useAliasToolbarSecondaryFields","useToolbarSecondaryFields","currentCategory","options","toolbarFieldQueries","clearField","clearAllFields","secondaryFields","collapseListedFiltersBreakpoint","clearAllFilters","clearFiltersButtonText","ToolbarContent","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarGroup","ToolbarItem","ToolbarFieldSelectCategory","OptionComponent","component","isClearable","filterOptions","chipProps","categoryName","chips","setSelectedOptions","deleteChip","ToolbarFilter","showToolbarItem","isFilter","alignment","useProductQuery","useAliasProductQuery","billingProvider","sla","uom","usage","useBillingProviderOnSelect","useAliasBillingProviderOnSelect","useSlaOnSelect","useAliasSlaOnSelect","useUsageOnSelect","useAliasUsageOnSelect","billingOnSelect","slaOnSelect","usageOnSelect","field","useSelectCategoryOnSelect","useAliasSelectCategoryOnSelect","selectCategoryOnSelect","categoryOptions","toolbarFieldOptions","useProductToolbarConfig","useAliasProductToolbarConfig","secondaryFilters","categoryOptionValue","position","SelectPosition"],"sourceRoot":""}