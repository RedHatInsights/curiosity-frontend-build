{"version":3,"file":"js/8139.e6310e4f6923200d6704.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardHelpers.js"],"sourcesContent":["import moment from 'moment';\nimport { chart_color_green_300 as chartColorGreenDark } from '@patternfly/react-tokens';\nimport numbro from 'numbro';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers } from '../../common';\n\n/**\n * Update chart/graph filters with base settings with styling.\n *\n * @param {Array} filters\n * @returns {{standaloneFilters: Array, groupedFilters: Array}}\n */\nconst generateChartSettings = (filters = []) => {\n  const standaloneFilters = [];\n  const groupedFilters = [];\n\n  filters.forEach(({ id, isStandalone = false, isThreshold = false, ...settings }) => {\n    if (!id) {\n      return;\n    }\n\n    const baseFilterSettings = {\n      id,\n      isStacked: !isThreshold,\n      isStandalone,\n      isThreshold,\n      strokeWidth: 2\n    };\n\n    if (isThreshold) {\n      baseFilterSettings.stroke = chartColorGreenDark.value;\n      baseFilterSettings.strokeDasharray = '4,3';\n      baseFilterSettings.strokeWidth = 3;\n    }\n\n    if (isStandalone) {\n      standaloneFilters.push({\n        ...baseFilterSettings,\n        ...settings\n      });\n    } else {\n      groupedFilters.push({\n        ...baseFilterSettings,\n        ...settings\n      });\n    }\n  });\n\n  return {\n    standaloneFilters,\n    groupedFilters\n  };\n};\n\n/**\n * Returns x axis ticks/intervals array for the xAxisTickInterval\n *\n * @param {string} granularity See enum of RHSM_API_QUERY_GRANULARITY_TYPES\n * @returns {number}\n */\nconst getChartXAxisLabelIncrement = granularity => {\n  switch (granularity) {\n    case GRANULARITY_TYPES.DAILY:\n      return 5;\n    case GRANULARITY_TYPES.WEEKLY:\n    case GRANULARITY_TYPES.MONTHLY:\n      return 2;\n    case GRANULARITY_TYPES.QUARTERLY:\n    default:\n      return 1;\n  }\n};\n\n/**\n * Return a formatted date string.\n *\n * @param {object} params\n * @param {Date} params.date\n * @param {string} params.granularity See enum of RHSM_API_QUERY_GRANULARITY_TYPES\n * @returns {string}\n */\nconst getTooltipDate = ({ date, granularity }) => {\n  const momentDate = moment.utc(date);\n\n  switch (granularity) {\n    case GRANULARITY_TYPES.QUARTERLY:\n      return `${momentDate.format(dateHelpers.timestampQuarterFormats.yearShort)} - ${momentDate\n        .add(1, 'quarter')\n        .format(dateHelpers.timestampQuarterFormats.yearShort)}`;\n\n    case GRANULARITY_TYPES.MONTHLY:\n      return momentDate.format(dateHelpers.timestampMonthFormats.yearLong);\n\n    case GRANULARITY_TYPES.WEEKLY:\n      return `${momentDate.format(dateHelpers.timestampDayFormats.short)} - ${momentDate\n        .add(1, 'week')\n        .format(dateHelpers.timestampDayFormats.yearShort)}`;\n\n    case GRANULARITY_TYPES.DAILY:\n    default:\n      return momentDate.format(dateHelpers.timestampDayFormats.long);\n  }\n};\n\n/**\n * Format x axis ticks.\n *\n * @param {object} params\n * @param {Date} params.date\n * @param {string} params.granularity See enum of RHSM_API_QUERY_GRANULARITY_TYPES\n * @param {number|string} params.tick\n * @param {Date} params.previousDate\n * @returns {string|undefined}\n */\nconst xAxisTickFormat = ({ date, granularity, tick, previousDate }) => {\n  if (!date || !granularity) {\n    return undefined;\n  }\n\n  const momentDate = moment.utc(date);\n  const isNewYear =\n    tick !== 0 && Number.parseInt(momentDate.year(), 10) !== Number.parseInt(moment.utc(previousDate).year(), 10);\n  let formattedDate;\n\n  switch (granularity) {\n    case GRANULARITY_TYPES.QUARTERLY:\n      formattedDate = isNewYear\n        ? momentDate.format(dateHelpers.timestampQuarterFormats.yearShort)\n        : momentDate.format(dateHelpers.timestampQuarterFormats.short);\n\n      formattedDate = formattedDate.replace(/\\s/, '\\n');\n      break;\n    case GRANULARITY_TYPES.MONTHLY:\n      formattedDate = isNewYear\n        ? momentDate.format(dateHelpers.timestampMonthFormats.yearShort)\n        : momentDate.format(dateHelpers.timestampMonthFormats.short);\n\n      formattedDate = formattedDate.replace(/\\s/, '\\n');\n      break;\n    case GRANULARITY_TYPES.WEEKLY:\n    case GRANULARITY_TYPES.DAILY:\n    default:\n      formattedDate = isNewYear\n        ? momentDate.format(dateHelpers.timestampDayFormats.yearShort)\n        : momentDate.format(dateHelpers.timestampDayFormats.short);\n\n      formattedDate = formattedDate.replace(/\\s(\\d{4})$/, '\\n$1');\n      break;\n  }\n\n  return formattedDate;\n};\n\n/**\n * ToDo: review adding \"locale\" for numbro\n * Original settings, numbro(tick).format({ average: true, mantissa: 1, optionalMantissa: true });\n */\n/**\n * Format y axis ticks.\n *\n * @param {object} params\n * @param {number|string} params.tick\n * @returns {string}\n */\nconst yAxisTickFormat = ({ tick }) => {\n  const options = {\n    average: true,\n    mantissa: 1,\n    trimMantissa: true,\n    lowPrecision: false\n  };\n\n  if (!Number.isInteger(tick)) {\n    options.mantissa = 5;\n    options.lowPrecision = true;\n  }\n\n  return numbro(tick)\n    .format({ ...options })\n    .toUpperCase();\n};\n\n/**\n * Generate base chart component props.\n *\n * @param {object} params\n * @param {object} params.settings\n * @param {string} params.granularity\n * @returns {object}\n */\nconst generateExtendedChartSettings = ({ settings, granularity } = {}) => ({\n  ...settings,\n  xAxisLabelIncrement: getChartXAxisLabelIncrement(granularity),\n  xAxisTickFormat: ({ item, previousItem, tick }) =>\n    xAxisTickFormat({\n      tick,\n      date: item.date,\n      previousDate: previousItem.date,\n      granularity\n    }),\n  yAxisTickFormat\n});\n\nconst graphCardHelpers = {\n  generateChartSettings,\n  generateExtendedChartSettings,\n  getChartXAxisLabelIncrement,\n  getTooltipDate,\n  xAxisTickFormat,\n  yAxisTickFormat\n};\n\nexport {\n  graphCardHelpers as default,\n  graphCardHelpers,\n  generateChartSettings,\n  generateExtendedChartSettings,\n  getChartXAxisLabelIncrement,\n  getTooltipDate,\n  xAxisTickFormat,\n  yAxisTickFormat\n};\n"],"names":["generateChartSettings","filters","standaloneFilters","groupedFilters","forEach","id","isStandalone","isThreshold","settings","baseFilterSettings","isStacked","strokeWidth","stroke","chartColorGreenDark","strokeDasharray","push","getChartXAxisLabelIncrement","granularity","GRANULARITY_TYPES","getTooltipDate","date","momentDate","moment","format","dateHelpers","add","xAxisTickFormat","tick","previousDate","formattedDate","isNewYear","Number","parseInt","year","replace","yAxisTickFormat","options","average","mantissa","trimMantissa","lowPrecision","isInteger","numbro","toUpperCase","generateExtendedChartSettings","xAxisLabelIncrement","item","previousItem","graphCardHelpers"],"sourceRoot":""}