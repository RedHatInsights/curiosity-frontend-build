{"version":3,"file":"js/2582.e2e0e01ee40332a98db0.js","mappings":"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","sources":["webpack:///./src/components/bannerMessages/bannerMessages.js","webpack:///./src/components/bannerMessages/bannerMessagesContext.js","webpack:///./src/components/graphCard/graphCard.js","webpack:///./src/components/graphCard/graphCardMetricTotals.js","webpack:///./src/components/inventoryCardInstances/inventoryCardInstances.js","webpack:///./src/components/inventoryTabs/inventoryTab.js","webpack:///./src/components/inventoryTabs/inventoryTabs.js","webpack:///./src/components/productView/productView.js","webpack:///./src/components/tabs/tabs.js","webpack:///./src/components/toolbar/toolbar.js","webpack:///./src/components/toolbar/toolbarContext.js","webpack:///./src/components/toolbar/toolbarFieldGroupVariant.js","webpack:///./src/components/toolbar/toolbarFilter.js","webpack:///./node_modules/lodash/isEqualWith.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, AlertActionCloseButton, AlertGroup, AlertVariant } from '@patternfly/react-core';\nimport { useBannerMessages, useRemoveBannerMessages } from './bannerMessagesContext';\n\n/**\n * Banner alert messages for a product view.\n *\n * @memberof Components\n * @module BannerMessages\n * @property {module} BannerMessagesContext\n */\n\n/**\n * Render banner messages.\n *\n * @param {object} props\n * @param {Function} props.useBannerMessages\n * @param {Function} props.useRemoveBannerMessages\n * @returns {React.ReactNode}\n */\nconst BannerMessages = ({\n  useBannerMessages: useAliasBannerMessages,\n  useRemoveBannerMessages: useAliasRemoveBannerMessages\n}) => {\n  const bannerMessages = useAliasBannerMessages();\n  const removeBannerMessages = useAliasRemoveBannerMessages();\n\n  if (bannerMessages?.length) {\n    return (\n      <div className=\"curiosity-banner-messages\">\n        <AlertGroup isLiveRegion>\n          {bannerMessages?.map(({ id, message, title, variant = AlertVariant.info }) => {\n            const actionClose = <AlertActionCloseButton onClose={() => removeBannerMessages(id || title)} />;\n\n            return (\n              <Alert actionClose={actionClose} key={id || title} title={title} variant={variant} isInline>\n                {message}\n              </Alert>\n            );\n          })}\n        </AlertGroup>\n      </div>\n    );\n  }\n\n  return null;\n};\n\n/**\n * Prop types.\n *\n * @type {{useBannerMessages: Function, useRemoveBannerMessages: Function}}\n */\nBannerMessages.propTypes = {\n  useBannerMessages: PropTypes.func,\n  useRemoveBannerMessages: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useBannerMessages: Function, useRemoveBannerMessages: Function}}\n */\nBannerMessages.defaultProps = {\n  useBannerMessages,\n  useRemoveBannerMessages\n};\n\nexport { BannerMessages as default, BannerMessages };\n","import { useCallback } from 'react';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct } from '../productView/productViewContext';\nimport { helpers } from '../../common/helpers';\n\n/**\n * @memberof BannerMessages\n * @module BannerMessagesContext\n */\n\n/**\n * Retrieve, set and remove application banner messages from state.\n *\n * @param {object} options\n * @param {Function} options.useProduct\n * @param {Function} options.useSelector\n * @returns {{ bannerMessages: Array, setBannerMessages: Function, removeBannerMessages: Function }}\n */\nconst useBannerMessages = ({\n  useProduct: useAliasProduct = useProduct,\n  useSelector: useAliasSelector = storeHooks.reactRedux.useSelector\n} = {}) => {\n  const { productId } = useAliasProduct();\n  return useAliasSelector(({ messages }) => messages?.bannerMessages?.[productId], []);\n};\n\n/**\n * Provide a callback for removing application banner messages from state.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useBannerMessages\n * @returns {Function}\n */\nconst useRemoveBannerMessages = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useBannerMessages: useAliasBannerMessages = useBannerMessages\n} = {}) => {\n  const dispatch = useAliasDispatch();\n  const { productId } = useAliasProduct();\n  const bannerMessages = useAliasBannerMessages();\n\n  /**\n   * Remove a banner message from state.\n   *\n   * @callback removeBannerMessages\n   * @param {string} idTitle\n   */\n  return useCallback(\n    idTitle => {\n      if (productId && Array.isArray(bannerMessages) && bannerMessages.length) {\n        const filteredMessages = bannerMessages.filter(({ id, title }) => id !== idTitle && title !== idTitle);\n\n        dispatch({\n          type: reduxTypes.message.SET_BANNER_MESSAGES,\n          viewId: productId,\n          bannerMessages: filteredMessages || []\n        });\n      }\n    },\n    [bannerMessages, dispatch, productId]\n  );\n};\n\n/**\n * Provide a callback for setting application banner messages from state.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useBannerMessages\n * @returns {Function}\n */\nconst useSetBannerMessages = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useBannerMessages: useAliasBannerMessages = useBannerMessages\n} = {}) => {\n  const dispatch = useAliasDispatch();\n  const { productId } = useAliasProduct();\n  const bannerMessages = useAliasBannerMessages();\n\n  /**\n   * Set application messages for banner display\n   *\n   * @callback setBannerMessages\n   * @param {Array<{ id: string, message: string, title: string, variant: string }>|{ id: string, message: string, title: string, variant: string }} messages\n   */\n  return useCallback(\n    messages => {\n      if (productId) {\n        const updatedMessages = (Array.isArray(messages) && messages) || [messages];\n\n        dispatch({\n          type: reduxTypes.message.SET_BANNER_MESSAGES,\n          viewId: productId,\n          bannerMessages: [\n            ...(bannerMessages || []),\n            ...updatedMessages\n              .map(value => {\n                if (value?.id || value?.title || value?.message || value?.variant) {\n                  return value;\n                }\n\n                if (typeof value === 'string' || typeof value === 'number') {\n                  return {\n                    id: value,\n                    title: value\n                  };\n                }\n\n                return undefined;\n              })\n              .filter(value => value !== undefined)\n          ]\n        });\n      } else if (helpers.DEV_MODE) {\n        console.warn(\n          'Banner messages currently require the use of \"product id\". Product context is unavailable, try moving your banner message \"set\" lower in the component order.'\n        );\n      }\n    },\n    [bannerMessages, dispatch, productId]\n  );\n};\n\nconst context = {\n  useBannerMessages,\n  useRemoveBannerMessages,\n  useSetBannerMessages\n};\n\nexport { context as default, context, useBannerMessages, useRemoveBannerMessages, useSetBannerMessages };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { helpers } from '../../common';\nimport { GraphCardMetricTotals } from './graphCardMetricTotals';\nimport { GraphCardChart } from './graphCardChart';\nimport { GraphCardContext, useParseFiltersSettings } from './graphCardContext';\n\n/**\n * Configurable graph, chart, cards. Consumes Charts.\n *\n * @see Charts\n * @memberof Components\n * @module GraphCard\n * @property {module} GraphCardChart\n * @property {module} GraphCardChartLegend\n * @property {module} GraphCardChartTitleTooltip\n * @property {module} GraphCardChartTooltip\n * @property {module} GraphCardContext\n * @property {module} GraphCardHelpers\n * @property {module} GraphCardMetricTotals\n */\n\n/**\n * Set up graph cards. Expand filters with base graph settings.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useParseFiltersSettings\n * @returns {React.ReactNode}\n */\nconst GraphCard = ({ isDisabled, useParseFiltersSettings: useAliasParseFiltersSettings }) => {\n  const { filtersSettings } = useAliasParseFiltersSettings();\n\n  if (isDisabled || !filtersSettings?.length) {\n    return null;\n  }\n\n  return filtersSettings?.map(filterSetting => (\n    <GraphCardContext.Provider key={`graphCard-${filterSetting?.settings?.metrics?.[0]?.id}`} value={filterSetting}>\n      <GraphCardMetricTotals>\n        <GraphCardChart />\n      </GraphCardMetricTotals>\n    </GraphCardContext.Provider>\n  ));\n};\n\n/**\n * Prop types.\n *\n * @type {{useParseFiltersSettings: Function, isDisabled: boolean}}\n */\nGraphCard.propTypes = {\n  isDisabled: PropTypes.bool,\n  useParseFiltersSettings: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useParseFiltersSettings: Function, isDisabled: boolean}}\n */\nGraphCard.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_GRAPH,\n  useParseFiltersSettings\n};\n\nexport { GraphCard as default, GraphCard };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter, CardHeader, CardTitle, Title } from '@patternfly/react-core';\nimport _camelCase from 'lodash/camelCase';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useGraphCardContext, useMetricsSelector } from './graphCardContext';\nimport { Loader, SkeletonSize } from '../loader/loader';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldRangedMonthly';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { graphCardHelpers } from './graphCardHelpers';\nimport { helpers } from '../../common';\n\n/**\n * @memberof GraphCard\n * @module GraphCardMetricTotals\n */\n\n/**\n * Display totals for a single metric.\n *\n * @param {object} props\n * @param {React.ReactNode} props.children\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {React.ReactNode}\n */\nconst GraphCardMetricTotals = ({\n  children,\n  useGraphCardContext: useAliasGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const query = useAliasProductGraphTallyQuery();\n  const { pending, error, fulfilled, dataSets: dataByList = [] } = useAliasMetricsSelector();\n\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate } = query;\n  const { isCurrent: isSelectedMonthCurrent } =\n    toolbarFieldOptions.find(\n      option => option.title === startDate || option.value.startDate.toISOString() === startDate\n    ) || {};\n\n  if (settings?.isMetricDisplay && settings?.cards?.length) {\n    const metricDisplayPassedData = helpers.setImmutableData(\n      {\n        dataSets: dataByList.map(dataSet => {\n          const { id: chartId, metric: metricId } = dataSet || {};\n          return {\n            ...dataSet,\n            display: {\n              ...graphCardHelpers.getDailyMonthlyTotals({ dataSet, isCurrent: isSelectedMonthCurrent }),\n              ...graphCardHelpers.getRemainingCapacity({\n                ...graphCardHelpers.getPrepaidTallyCapacity({ data: dataByList }),\n                isCurrent: isSelectedMonthCurrent\n              }),\n              ...graphCardHelpers.getRemainingOverage({\n                ...graphCardHelpers.getPrepaidTallyCapacity({ data: dataByList }),\n                isCurrent: isSelectedMonthCurrent\n              }),\n              chartId,\n              metricId\n            }\n          };\n        })\n      },\n      { isClone: true }\n    );\n\n    return (\n      <div\n        data-test={`graphMetricTotals-${settings?.groupMetric?.map(metricId => _camelCase(metricId))?.join('-')}`}\n        data-test-data={JSON.stringify(metricDisplayPassedData)}\n        className=\"curiosity-usage-graph__totals\"\n      >\n        <div>\n          <div className=\"curiosity-usage-graph__totals-column\">\n            {settings?.cards?.map(({ key, header, body, footer }, index) => (\n              <Card\n                key={key || helpers.generateHash({ metricDisplayPassedData, index })}\n                isPlain\n                data-test={`graphMetricTotalsCard-${index}`}\n                className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n              >\n                <CardHeader>\n                  <CardTitle>\n                    <Title headingLevel=\"h2\" size=\"md\">\n                      {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                      {fulfilled && ((typeof header === 'function' && header(metricDisplayPassedData)) || header)}\n                    </Title>\n                  </CardTitle>\n                </CardHeader>\n                <CardBody>\n                  <div>\n                    {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg, height: '60px' }} />}\n                    {fulfilled && ((typeof body === 'function' && body(metricDisplayPassedData)) || body)}\n                  </div>\n                </CardBody>\n                <CardFooter>\n                  <div>\n                    {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                    {fulfilled && ((typeof footer === 'function' && footer(metricDisplayPassedData)) || footer)}\n                  </div>\n                </CardFooter>\n              </Card>\n            ))}\n          </div>\n        </div>\n        <div>\n          <div className=\"curiosity-usage-graph__totals-graph-column\">{children}</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div data-test=\"graphStandalone\" className=\"curiosity-usage-graph__standalone\">\n      {children}\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, children: React.ReactNode, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.propTypes = {\n  children: PropTypes.node,\n  useGraphCardContext: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, children: React.ReactNode, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.defaultProps = {\n  children: null,\n  useGraphCardContext,\n  useMetricsSelector,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardMetricTotals as default, GraphCardMetricTotals };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  useGetInstancesInventory,\n  useInventoryCardActionsInstances,\n  useOnPageInstances,\n  useOnColumnSortInstances,\n  useParseInstancesFiltersSettings\n} from './inventoryCardInstancesContext';\nimport { InventoryCard } from '../inventoryCard/inventoryCard';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18nHelpers';\n\n/**\n * @memberof Components\n * @module InventoryCardInstances\n * @property {module} InventoryCardInstancesContext\n */\n\n/**\n * An instances' system inventory component.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useGetInventory\n * @param {Function} props.useOnPage\n * @param {Function} props.useOnColumnSort\n * @param {Function} props.useProductInventoryConfig\n * @param {Function} props.useProductInventoryQuery\n * @fires onColumnSort\n * @fires onPage\n * @returns {React.ReactNode}\n */\nconst InventoryCardInstances = ({ ...props }) => <InventoryCard {...props} />;\n\n/**\n * Prop types.\n *\n * @type {{useOnPage: Function, useParseFiltersSettings: Function, t: Function, useInventoryCardActions: Function,\n *     isDisabled: boolean, useGetInventory: Function, useOnColumnSort: Function}}\n */\nInventoryCardInstances.propTypes = {\n  isDisabled: PropTypes.bool,\n  t: PropTypes.func,\n  useGetInventory: PropTypes.func,\n  useInventoryCardActions: PropTypes.func,\n  useOnPage: PropTypes.func,\n  useOnColumnSort: PropTypes.func,\n  useParseFiltersSettings: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnPage: Function, useParseFiltersSettings: Function, t: translate, useInventoryCardActions: Function,\n *     isDisabled: boolean, useGetInventory: Function, useOnColumnSort: Function}}\n */\nInventoryCardInstances.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_TABLE_INSTANCES,\n  t: translate,\n  useGetInventory: useGetInstancesInventory,\n  useInventoryCardActions: useInventoryCardActionsInstances,\n  useOnPage: useOnPageInstances,\n  useOnColumnSort: useOnColumnSortInstances,\n  useParseFiltersSettings: useParseInstancesFiltersSettings\n};\n\nexport { InventoryCardInstances as default, InventoryCardInstances };\n","import PropTypes from 'prop-types';\n\n/**\n * @memberof InventoryTabs\n * @module InventoryTab\n */\n\n/**\n * A tab pass-through component for passing props to InventoryTabs.\n *\n * @param {object} props\n * @param {boolean} props.active\n * @param {React.ReactNode} props.children\n * @param {string} props.title\n * @returns {React.ReactNode}\n */\n// eslint-disable-next-line no-unused-vars\nconst InventoryTab = ({ active, children, title }) => children;\n\n/**\n * Prop types.\n *\n * @type {{children: React.ReactNode, className: string}}\n */\nInventoryTab.propTypes = {\n  children: PropTypes.node.isRequired,\n  active: PropTypes.bool,\n  title: PropTypes.node.isRequired\n};\n\n/**\n * Default props.\n *\n * @type {{className: string}}\n */\nInventoryTab.defaultProps = {\n  active: false\n};\n\nexport { InventoryTab as default, InventoryTab };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Title } from '@patternfly/react-core';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct } from '../productView/productViewContext';\nimport { Tabs } from '../tabs/tabs';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { InventoryTab } from './inventoryTab';\n\n/**\n * An inventory tabs display with state. Consume Tabs.\n *\n * @see Tabs\n * @memberof Components\n * @module InventoryTabs\n * @property {module} InventoryTab\n */\n\n/**\n * Update tab state.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnTab = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ index } = {}) => {\n    dispatch({\n      type: reduxTypes.inventory.SET_INVENTORY_TAB,\n      tabs: {\n        [productId]: index\n      }\n    });\n  };\n};\n\n/**\n * An inventory tabs component.\n * Render inventory tabs using Inventory tab passed props only.\n *\n * @fires onTab\n * @param {object} props\n * @param {number} props.activeTab\n * @param {React.ReactNode} props.children\n * @param {number} props.defaultActiveTab\n * @param {boolean} props.isDisabled\n * @param {Function} props.t\n * @param {Function} props.useOnTab\n * @param {Function} props.useProduct\n * @param {Function} props.useSelector\n * @returns {React.ReactNode|null}\n */\nconst InventoryTabs = ({\n  activeTab,\n  children,\n  defaultActiveTab,\n  isDisabled,\n  t,\n  useOnTab: useAliasOnTab,\n  useProduct: useAliasProduct,\n  useSelector: useAliasSelector\n}) => {\n  const { productId } = useAliasProduct();\n  const updatedActiveTab = useAliasSelector(({ inventory }) => inventory.tabs?.[productId], activeTab);\n  const onTab = useAliasOnTab();\n\n  if (isDisabled) {\n    return null;\n  }\n\n  const updatedChildren = React.Children.toArray(children).map((child, index) => {\n    const { props: childProps = {} } = child;\n\n    return {\n      active: childProps.active || false,\n      content: childProps.children || child,\n      title: childProps.title || t('curiosity-inventory.tabSubHeading', { count: index })\n    };\n  });\n\n  return (\n    <React.Fragment>\n      <Title headingLevel=\"h2\" className=\"sr-only\">\n        {t('curiosity-inventory.tabHeading', { count: updatedChildren.length })}\n      </Title>\n      <Tabs activeTab={updatedActiveTab} defaultActiveTab={defaultActiveTab} onTab={onTab} tabs={updatedChildren} />\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnTab: Function, useProduct: Function, t: Function, children: React.ReactNode,\n *     useSelector: Function, defaultActiveTab: number, isDisabled: boolean, activeTab: number}}\n */\nInventoryTabs.propTypes = {\n  activeTab: PropTypes.number,\n  children: PropTypes.node.isRequired,\n  defaultActiveTab: PropTypes.number,\n  isDisabled: PropTypes.bool,\n  t: PropTypes.func,\n  useOnTab: PropTypes.func,\n  useProduct: PropTypes.func,\n  useSelector: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnTab: Function, useProduct: Function, t: translate, useSelector: Function,\n *     defaultActiveTab: number, isDisabled: boolean, activeTab: number}}\n */\nInventoryTabs.defaultProps = {\n  activeTab: 0,\n  defaultActiveTab: 0,\n  isDisabled: helpers.UI_DISABLED_TABLE,\n  t: translate,\n  useOnTab,\n  useProduct,\n  useSelector: storeHooks.reactRedux.useSelector\n};\n\nexport { InventoryTabs as default, InventoryTabs, InventoryTab, useOnTab };\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { routerContext } from '../router';\nimport { ProductViewContext } from './productViewContext';\nimport { PageLayout, PageHeader, PageSection, PageToolbar, PageMessages, PageColumns } from '../pageLayout/pageLayout';\nimport { GraphCard } from '../graphCard/graphCard';\nimport { Toolbar } from '../toolbar/toolbar';\nimport { helpers } from '../../common';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport { InventoryCardInstances } from '../inventoryCardInstances/inventoryCardInstances';\nimport { InventoryCardSubscriptions } from '../inventoryCardSubscriptions/inventoryCardSubscriptions';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Primary product display component, and config context provider.\n *\n * @memberof Components\n * @module ProductView\n * @property {module} ProductViewContext\n * @property {module} ProductViewMissing\n */\n\n/**\n * ToDo: review removing the \"useCallback\" once the routing updates are in place\n */\n/**\n * Display products.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useRouteDetail\n * @returns {React.ReactNode}\n */\nconst ProductView = ({ t, useRouteDetail: useAliasRouteDetail }) => {\n  const { firstMatch, productGroup } = useAliasRouteDetail();\n\n  const renderProduct = useCallback(() => {\n    const updated = config => {\n      const { initialInventoryFilters, initialSubscriptionsInventoryFilters, productId, viewId } = config;\n\n      if (!productId || !viewId) {\n        return null;\n      }\n\n      return (\n        <ProductViewContext.Provider value={config} key={`product_${productId}`}>\n          <PageMessages>\n            <BannerMessages />\n          </PageMessages>\n          <PageToolbar>\n            <Toolbar />\n          </PageToolbar>\n          <PageSection>\n            <GraphCard />\n          </PageSection>\n          <PageSection className=\"curiosity-page-section__tabs\">\n            <InventoryTabs\n              isDisabled={\n                (!initialInventoryFilters && !initialSubscriptionsInventoryFilters) || helpers.UI_DISABLED_TABLE\n              }\n            >\n              {!helpers.UI_DISABLED_TABLE_INSTANCES && initialInventoryFilters && (\n                <InventoryTab\n                  key={`inventory_instances_${productId}`}\n                  title={t('curiosity-inventory.tabInstances', { context: [productId] })}\n                >\n                  <InventoryCardInstances />\n                </InventoryTab>\n              )}\n              {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && initialSubscriptionsInventoryFilters && (\n                <InventoryTab\n                  key={`inventory_subs_${productId}`}\n                  title={t('curiosity-inventory.tabSubscriptions', { context: [productId] })}\n                >\n                  <InventoryCardSubscriptions />\n                </InventoryTab>\n              )}\n            </InventoryTabs>\n          </PageSection>\n        </ProductViewContext.Provider>\n      );\n    };\n\n    return updated(firstMatch);\n  }, [firstMatch, t]);\n\n  return (\n    (productGroup && (\n      <PageLayout>\n        <PageHeader productLabel={productGroup}>\n          {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: productGroup })}\n        </PageHeader>\n        <PageColumns>{renderProduct()}</PageColumns>\n      </PageLayout>\n    )) ||\n    null\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: translate, useRouteDetail: Function}}\n */\nProductView.propTypes = {\n  t: PropTypes.func,\n  useRouteDetail: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, useRouteDetail: Function}}\n */\nProductView.defaultProps = {\n  t: translate,\n  useRouteDetail: routerContext.useRouteDetail\n};\n\nexport { ProductView as default, ProductView };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tabs as PfTabs, Tab, TabTitleText, Grid, GridItem } from '@patternfly/react-core';\nimport _isEqualWith from 'lodash/isEqualWith';\nimport { helpers } from '../../common';\n\n/**\n * PF tabs with state.\n *\n * @memberof Components\n * @module Tabs\n */\n\n/**\n * FixMe: PF tabs misinterprets \"isElementInView\" when tab title nodes are loaded dynamically\n * It appears the use of isElementInView within PF tabs is trying to be predicative in using\n * \"getBoundingClientRect\" but produces questionable results in scenarios where content is\n * async created. isElementInView assumes some form of the content will always be there\n * instead of scenarios where someone tries to dynamically apply components. It may be good to\n * review using a window.setTimeout(() => handleScrollButtons()) in componentDidMount.\n *\n * Our temporary solution is to simply hide the buttons with a manual set flag affecting the\n * CSS class. This will most likely cause long-term issues.\n */\n/**\n * ToDo: Insights frontend components uses a custom tabs layout, investigate related CSS classes\n * Originally we applied the CSS classes, but they appeared to provide nothing. Since Insights\n * rolled its own tabs we're hesitant to apply said classes without understanding what they provide.\n */\n/**\n * A set of tabs.\n *\n * @augments React.Component\n * @fires onTab\n */\nclass Tabs extends React.Component {\n  state = {\n    updatedActiveTab: null,\n    updatedTabs: null\n  };\n\n  componentDidMount() {\n    const { updatedTabs } = this.state;\n\n    if (updatedTabs === null) {\n      this.setTabData();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { tabs } = this.props;\n    const customizer = (valueA, valueB) => {\n      if (typeof valueA === 'function' && typeof valueB === 'function') {\n        return valueA.toString() === valueB.toString();\n      }\n\n      return undefined;\n    };\n\n    if (!_isEqualWith(prevProps.tabs, tabs, customizer)) {\n      this.setTabData();\n    }\n  }\n\n  /**\n   * On tab selected\n   *\n   * @event onTab\n   * @param {object} params\n   * @param {number} params.index\n   */\n  onTab = ({ index }) => {\n    const { onTab } = this.props;\n\n    this.setState(\n      {\n        updatedActiveTab: index\n      },\n      () => onTab({ index })\n    );\n  };\n\n  /**\n   * Convert tab objects into the required PF Tab format.\n   */\n  setTabData() {\n    const { activeTab, defaultActiveTab, tabs } = this.props;\n    let updatedActiveTab = defaultActiveTab;\n\n    const updatedTabs = tabs.map(({ active, content, title }, index) => {\n      updatedActiveTab = active ? index : updatedActiveTab;\n\n      return (\n        <Tab key={title} eventKey={index} title={<TabTitleText>{title}</TabTitleText>}>\n          {content}\n        </Tab>\n      );\n    });\n\n    if (typeof activeTab === 'number') {\n      updatedActiveTab = activeTab;\n    }\n\n    this.setState({\n      updatedActiveTab,\n      updatedTabs\n    });\n  }\n\n  /**\n   * Apply props to tabs.\n   *\n   * @returns {React.ReactNode}\n   */\n  renderTabs() {\n    const { updatedActiveTab, updatedTabs } = this.state;\n    const { className, hasOverflowScroll } = this.props;\n\n    return (\n      <PfTabs\n        className={`curiosity-tabs${(!hasOverflowScroll && '__no-scroll') || ''} ${className || ''}`}\n        activeKey={updatedActiveTab}\n        onSelect={(event, index) => this.onTab({ event, index })}\n        mountOnEnter\n        unmountOnExit\n        id={helpers.generateId()}\n        inset={{\n          default: 'insetNone',\n          md: 'insetLg'\n        }}\n      >\n        {updatedTabs}\n      </PfTabs>\n    );\n  }\n\n  /**\n   * Render tabs.\n   *\n   * @returns {React.ReactNode}\n   */\n  render() {\n    return (\n      <Grid className=\"curiosity-tabs-container\">\n        <GridItem span={12}>{this.renderTabs()}</GridItem>\n      </Grid>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{tabs: Array, hasOverflowScroll: boolean, onTab: Function, className: string,\n *     defaultActiveTab: number, activeTab: number}}\n */\nTabs.propTypes = {\n  activeTab: PropTypes.number,\n  className: PropTypes.string,\n  defaultActiveTab: PropTypes.number,\n  hasOverflowScroll: PropTypes.bool,\n  onTab: PropTypes.func,\n  tabs: PropTypes.arrayOf(\n    PropTypes.shape({\n      active: PropTypes.bool,\n      content: PropTypes.node.isRequired,\n      title: PropTypes.node.isRequired\n    })\n  )\n};\n\n/**\n * Default props.\n *\n * @type {{tabs: Array, hasOverflowScroll: boolean, onTab: Function, className: string,\n *     defaultActiveTab: number, activeTab: number}}\n */\nTabs.defaultProps = {\n  activeTab: null,\n  className: '',\n  defaultActiveTab: 0,\n  hasOverflowScroll: false,\n  onTab: helpers.noop,\n  tabs: []\n};\n\nexport { Tabs as default, Tabs };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Toolbar as PfToolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup\n} from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport { useProductToolbarQuery } from '../productView/productViewContext';\nimport { useToolbarFieldClear, useToolbarFieldClearAll, useToolbarFields } from './toolbarContext';\nimport { ToolbarFilter } from './toolbarFilter';\nimport { ToolbarFieldGroupVariant } from './toolbarFieldGroupVariant';\nimport { ToolbarFieldSelectCategory, useSelectCategoryOptions } from './toolbarFieldSelectCategory';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Primary view toolbar.\n *\n * @memberof Components\n * @module Toolbar\n * @property {module} ToolbarContext\n * @property {module} ToolbarFieldBillingProvider\n * @property {module} ToolbarFieldCategory\n * @property {module} ToolbarFieldDisplayName\n * @property {module} ToolbarFieldGranularity\n * @property {module} ToolbarFieldRangedMonthly\n * @property {module} ToolbarFieldSelectCategory\n * @property {module} ToolbarFieldSla\n * @property {module} ToolbarFieldUom\n * @property {module} ToolbarFieldUsage\n * @property {module} ToolbarFieldVariant\n */\n\n/**\n * Application filter toolbar.\n *\n * @fires onClearFilter\n * @fires onClearAll\n * @param {object} props\n * @param {boolean} props.hardFilterReset On clearing all fields allow the category to reset as well.\n * @param {boolean} props.isDisabled\n * @param {boolean} props.isGroupVariantDisabled\n * @param {Function} props.t\n * @param {Function} props.useProductToolbarQuery\n * @param {Function} props.useSelectCategoryOptions\n * @param {Function} props.useToolbarFieldClear\n * @param {Function} props.useToolbarFieldClearAll\n * @param {Function} props.useToolbarFields\n * @returns {React.ReactNode}\n */\nconst Toolbar = ({\n  hardFilterReset,\n  isDisabled,\n  isGroupVariantDisabled,\n  t,\n  useProductToolbarQuery: useAliasProductToolbarQuery,\n  useSelectCategoryOptions: useAliasSelectCategoryOptions,\n  useToolbarFieldClear: useAliasToolbarFieldClear,\n  useToolbarFieldClearAll: useAliasToolbarFieldClearAll,\n  useToolbarFields: useAliasToolbarFields\n}) => {\n  const toolbarFieldQueries = useAliasProductToolbarQuery();\n  const { currentCategory, options } = useAliasSelectCategoryOptions();\n  const clearField = useAliasToolbarFieldClear();\n  const clearAllFields = useAliasToolbarFieldClearAll();\n  const { itemFields, secondaryFields } = useAliasToolbarFields();\n\n  if (isDisabled || (isGroupVariantDisabled && !options?.length && !secondaryFields?.length)) {\n    return null;\n  }\n\n  if (!isGroupVariantDisabled && !options?.length && !secondaryFields?.length) {\n    return <ToolbarFieldGroupVariant isStandalone />;\n  }\n\n  /**\n   * Clear a specific value\n   *\n   * @event onClearFilter\n   * @param {object} params\n   * @param {*} params.value\n   * @returns {void}\n   */\n  const onClearFilter = ({ value }) => clearField(value);\n\n  /**\n   * Clear all active filters.\n   *\n   * @event onClearAll\n   * @returns {void}\n   */\n  const onClearAll = () => clearAllFields(hardFilterReset);\n\n  /**\n   * Set selected options for chip display.\n   *\n   * @param {object} params\n   * @param {*} params.value\n   * @returns {Array}\n   */\n  const setSelectedOptions = ({ value: filterName } = {}) => {\n    const filterValue = toolbarFieldQueries?.[filterName];\n    return (\n      (typeof filterValue === 'string' && [\n        t('curiosity-toolbar.label', { context: [filterName, (filterValue === '' && 'none') || filterValue] })\n      ]) ||\n      []\n    );\n  };\n\n  return (\n    <PfToolbar\n      id=\"curiosity-toolbar\"\n      className=\"curiosity-toolbar pf-m-toggle-group-container ins-c-primary-toolbar\"\n      collapseListedFiltersBreakpoint=\"sm\"\n      clearAllFilters={onClearAll}\n      clearFiltersButtonText={t('curiosity-toolbar.clearFilters')}\n    >\n      {!isGroupVariantDisabled && <ToolbarFieldGroupVariant />}\n      <ToolbarContent>\n        <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"md\">\n          <ToolbarGroup variant=\"filter-group\">\n            {options.length > 1 && (\n              <ToolbarItem>\n                <ToolbarFieldSelectCategory />\n              </ToolbarItem>\n            )}\n            {options.map(({ title, value: filterName, component: OptionComponent, isClearable }) => {\n              const chipProps = { categoryName: title };\n\n              if (isClearable !== false) {\n                chipProps.chips = setSelectedOptions({ value: filterName });\n                chipProps.deleteChip = () => onClearFilter({ value: filterName });\n              }\n\n              return (\n                <ToolbarFilter\n                  key={filterName}\n                  showToolbarItem={currentCategory === filterName || options.length === 1}\n                  {...chipProps}\n                >\n                  <OptionComponent isFilter />\n                </ToolbarFilter>\n              );\n            })}\n          </ToolbarGroup>\n        </ToolbarToggleGroup>\n        <ToolbarGroup key=\"itemFields\">{itemFields}</ToolbarGroup>\n        <ToolbarGroup key=\"secondaryFields\" alignment={{ default: 'alignRight' }}>\n          {secondaryFields}\n        </ToolbarGroup>\n      </ToolbarContent>\n    </PfToolbar>\n  );\n};\n\n/**\n * Prop types\n *\n * @type {{useToolbarFieldClear: Function, t: Function, useSelectCategoryOptions: Function, hardFilterReset: boolean,\n *     useToolbarFields: Function, isGroupVariantDisabled: boolean, useProductToolbarQuery: Function, isDisabled: boolean,\n *     useToolbarFieldClearAll: Function}}\n */\nToolbar.propTypes = {\n  hardFilterReset: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  isGroupVariantDisabled: PropTypes.bool,\n  t: PropTypes.func,\n  useProductToolbarQuery: PropTypes.func,\n  useSelectCategoryOptions: PropTypes.func,\n  useToolbarFieldClear: PropTypes.func,\n  useToolbarFieldClearAll: PropTypes.func,\n  useToolbarFields: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useToolbarFieldClear: Function, t: translate, useSelectCategoryOptions: Function, hardFilterReset: boolean,\n *     useToolbarFields: Function, isGroupVariantDisabled: boolean, useProductToolbarQuery: Function, isDisabled: boolean,\n *     useToolbarFieldClearAll: Function}}\n */\nToolbar.defaultProps = {\n  hardFilterReset: false,\n  isDisabled: helpers.UI_DISABLED_TOOLBAR,\n  isGroupVariantDisabled: helpers.UI_DISABLED_TOOLBAR_GROUP_VARIANT,\n  t: translate,\n  useProductToolbarQuery,\n  useSelectCategoryOptions,\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFields\n};\n\nexport { Toolbar as default, Toolbar };\n","import React, { useMemo } from 'react';\nimport { ToolbarItem } from '@patternfly/react-core';\nimport { useProductQuery, useProductToolbarConfig } from '../productView/productViewContext';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { useOnSelect as useSelectCategoryOnSelect, toolbarFieldOptions } from './toolbarFieldSelectCategory';\nimport { useOnSelect as useBillingProviderOnSelect } from './toolbarFieldBillingProvider';\nimport { useOnSelect as useCategoryOnSelect } from './toolbarFieldCategory';\nimport { useOnSelect as useSlaOnSelect } from './toolbarFieldSla';\nimport { useOnSelect as useUsageOnSelect } from './toolbarFieldUsage';\nimport { useOnSelect as useVariantOnSelect } from './toolbarFieldVariant';\nimport { helpers } from '../../common/helpers';\n\n/**\n * @memberof Toolbar\n * @module ToolbarContext\n */\n\n/**\n * Clear a specific toolbar category using a select component's OnSelect hook.\n *\n * @param {object} options\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useCategoryOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @param {Function} options.useVariantOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClear = ({\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useCategoryOnSelect: useAliasCategoryOnSelect = useCategoryOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect,\n  useVariantOnSelect: useAliasVariantOnSelect = useVariantOnSelect\n} = {}) => {\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const categoryOnSelect = useAliasCategoryOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n  const variantOnSelect = useAliasVariantOnSelect();\n\n  return field => {\n    switch (field) {\n      case RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER:\n        billingOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.CATEGORY:\n        categoryOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.SLA:\n        slaOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.USAGE:\n        usageOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.VARIANT:\n        variantOnSelect();\n        break;\n      default:\n        break;\n    }\n  };\n};\n\n/**\n * Clear all available toolbar categories.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useSelectCategoryOnSelect\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useCategoryOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @param {Function} options.useVariantOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClearAll = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useSelectCategoryOnSelect: useAliasSelectCategoryOnSelect = useSelectCategoryOnSelect,\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useCategoryOnSelect: useAliasCategoryOnSelect = useCategoryOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect,\n  useVariantOnSelect: useAliasVariantOnSelect = useVariantOnSelect\n} = {}) => {\n  const {\n    [RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER]: billingProvider,\n    [RHSM_API_QUERY_SET_TYPES.CATEGORY]: category,\n    [RHSM_API_QUERY_SET_TYPES.SLA]: sla,\n    [RHSM_API_QUERY_SET_TYPES.USAGE]: usage,\n    [RHSM_API_QUERY_SET_TYPES.VARIANT]: variant\n  } = useAliasProductQuery();\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const categoryOnSelect = useAliasCategoryOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n  const selectCategoryOnSelect = useAliasSelectCategoryOnSelect();\n  const variantOnSelect = useAliasVariantOnSelect();\n\n  return hardFilterReset => {\n    if (typeof billingProvider === 'string') {\n      billingOnSelect();\n    }\n\n    if (typeof category === 'string') {\n      categoryOnSelect();\n    }\n\n    if (typeof sla === 'string') {\n      slaOnSelect();\n    }\n\n    if (typeof usage === 'string') {\n      usageOnSelect();\n    }\n\n    if (typeof variant === 'string') {\n      variantOnSelect();\n    }\n\n    if (hardFilterReset) {\n      selectCategoryOnSelect();\n    }\n  };\n};\n\n/**\n * Return lists of item and secondary toolbar fields for display.\n *\n * @param {object} options\n * @param {Array} options.categoryOptions\n * @param {Function} options.useProductToolbarConfig\n * @returns {Array}\n */\nconst useToolbarFields = ({\n  categoryOptions = toolbarFieldOptions,\n  useProductToolbarConfig: useAliasProductToolbarConfig = useProductToolbarConfig\n} = {}) => {\n  const { filters = [] } = useAliasProductToolbarConfig();\n\n  return useMemo(() => {\n    const setFilter = ({ id, content, ...filterProps }) => {\n      const option = categoryOptions.find(({ value: categoryOptionValue }) => id === categoryOptionValue);\n      const { component: OptionComponent } = option || {};\n\n      return (\n        (OptionComponent && (\n          <ToolbarItem key={`option-${id}`}>\n            <OptionComponent isFilter={false} {...filterProps} />\n          </ToolbarItem>\n        )) || (\n          <ToolbarItem key={id || helpers.generateId()}>\n            {typeof content === 'function' ? content() : content}\n          </ToolbarItem>\n        ) ||\n        null\n      );\n    };\n\n    return {\n      itemFields: filters.filter(({ isItem }) => isItem === true).map(setFilter),\n      secondaryFields: filters.filter(({ isSecondary }) => isSecondary === true).map(setFilter)\n    };\n  }, [categoryOptions, filters]);\n};\n\nconst context = {\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFields\n};\n\nexport { context as default, context, useToolbarFieldClear, useToolbarFieldClearAll, useToolbarFields };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Toolbar as PfToolbar, ToolbarContent, ToolbarItem, ToolbarItemVariant } from '@patternfly/react-core';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct } from '../productView/productViewContext';\nimport { Select, SelectPosition } from '../form/select';\nimport { translate } from '../i18n/i18n';\nimport { routerContext } from '../router';\n\n/**\n * A toolbar product configuration select filter requiring a toolbar component parent.\n *\n * @memberof Toolbar\n * @module ToolbarFieldGroupVariant\n */\n\n/**\n * Generate select field options from config. Sorted by title string.\n *\n * @param {object} options\n * @param {Function} options.t\n * @param {Function} options.useRouteDetail\n * @returns {Function}\n */\nconst useToolbarFieldOptions = ({\n  t = translate,\n  useRouteDetail: useAliasRouteDetail = routerContext.useRouteDetail\n} = {}) => {\n  const { availableVariants, firstMatch } = useAliasRouteDetail();\n  const options = [];\n\n  availableVariants?.forEach(variant => {\n    options.push({\n      title: t('curiosity-toolbar.label', { context: ['groupVariant', variant] }),\n      value: variant,\n      selected: variant === firstMatch?.productId\n    });\n  });\n\n  return options.sort(({ title: titleA }, { title: titleB }) => titleA.localeCompare(titleB));\n};\n\n/**\n * On select update.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnSelect = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productGroup } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  return ({ value = null } = {}) => {\n    dispatch([\n      {\n        type: reduxTypes.app.SET_PRODUCT_VARIANT_QUERY_RESET_ALL,\n        productGroup\n      },\n      {\n        type: reduxTypes.app.SET_PRODUCT_VARIANT,\n        variant: value,\n        productGroup\n      }\n    ]);\n  };\n};\n\n/**\n * Display a product configuration field with generated options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {boolean} props.isFilter\n * @param {boolean} props.isStandalone\n * @param {string} props.position\n * @param {Function} props.t\n * @param {Function} props.useOnSelect\n * @param {Function} props.useProduct\n * @param {Function} props.useSelector\n * @param {Function} props.useToolbarFieldOptions\n * @returns {React.ReactNode}\n */\nconst ToolbarFieldGroupVariant = ({\n  isFilter,\n  isStandalone,\n  position,\n  t,\n  useOnSelect: useAliasOnSelect,\n  useProduct: useAliasProduct,\n  useSelector: useAliasSelector,\n  useToolbarFieldOptions: useAliasToolbarFieldOptions\n}) => {\n  const { productGroup } = useAliasProduct();\n  const updatedValue = useAliasSelector(({ view }) => view?.product?.variant?.[productGroup], null);\n  const onSelect = useAliasOnSelect();\n  const options = useAliasToolbarFieldOptions();\n  const updatedOptions = options.map(option => ({\n    ...option,\n    selected: (updatedValue && option.value === updatedValue) || option?.selected\n  }));\n\n  if (options?.length <= 1) {\n    return null;\n  }\n\n  const element = (\n    <ToolbarContent>\n      <ToolbarItem variant={ToolbarItemVariant.label}>\n        {t('curiosity-toolbar.label', { context: ['groupVariant'] })}{' '}\n      </ToolbarItem>\n      <Select\n        aria-label={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'groupVariant'] })}\n        onSelect={onSelect}\n        options={updatedOptions}\n        selectedOptions={updatedValue}\n        placeholder={t('curiosity-toolbar.placeholder', { context: [isFilter && 'filter', 'groupVariant'] })}\n        position={position}\n        data-test=\"toolbarFieldGroupVariant\"\n      />\n    </ToolbarContent>\n  );\n\n  return (\n    (isStandalone && (\n      <PfToolbar\n        id=\"curiosity-toolbar\"\n        className=\"curiosity-toolbar pf-m-toggle-group-container ins-c-primary-toolbar\"\n        collapseListedFiltersBreakpoint=\"sm\"\n      >\n        {element}\n      </PfToolbar>\n    )) ||\n    element\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useOnSelect: Function, useProduct: Function, t: Function, useSelector: Function, isFilter: boolean,\n *     isStandalone: boolean, position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldGroupVariant.propTypes = {\n  isFilter: PropTypes.bool,\n  isStandalone: PropTypes.bool,\n  position: PropTypes.string,\n  t: PropTypes.func,\n  useOnSelect: PropTypes.func,\n  useProduct: PropTypes.func,\n  useSelector: PropTypes.func,\n  useToolbarFieldOptions: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnSelect: Function, useProduct: Function, t: translate, useSelector: Function, isFilter: boolean,\n *     isStandalone: boolean, position: string, useToolbarFieldOptions: Function}}\n */\nToolbarFieldGroupVariant.defaultProps = {\n  isFilter: false,\n  isStandalone: false,\n  position: SelectPosition.left,\n  t: translate,\n  useOnSelect,\n  useProduct,\n  useSelector: storeHooks.reactRedux.useSelector,\n  useToolbarFieldOptions\n};\n\nexport { ToolbarFieldGroupVariant as default, ToolbarFieldGroupVariant, useOnSelect, useToolbarFieldOptions };\n","import React, { useContext, useEffect, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { useMount } from 'react-use';\nimport { ToolbarItem, Chip, ChipGroup, ToolbarContentContext, ToolbarContext } from '@patternfly/react-core';\nimport { helpers } from '../../common/helpers';\n\n/**\n * ToolbarFilter, wrapper component for Patternfly ToolbarFilter.\n *\n * @memberof Toolbar\n * @module ToolbarFilter\n */\n\n/**\n * Hook for ToolbarContentContext\n *\n * @returns {{ chipContainerRef: any }}\n */\nconst useToolbarContentContext = () => useContext(ToolbarContentContext);\n\n/**\n * Hook for ToolbarContext\n *\n * @returns {{ isExpanded: boolean, chipGroupContentRef: any, updateNumberFilters: Function }}\n */\nconst useToolbarContext = () => useContext(ToolbarContext);\n\n/**\n * FixMe: PF-React-Core v4 & v5 ToolbarFilter should conditional check \"firstElementChild\".\n * This line inside of ToolbarFilter, https://github.com/patternfly/patternfly-react/blob/v4/packages/react-core/src/components/Toolbar/ToolbarFilter.tsx#L130\n * creates an application error, adding optional chaining and a conditional check for \"firstElementChild\"\n * removes the application error. It is beyond our current scope to determine if there are additional\n * PF Toolbar issues.\n */\n/**\n * Converted PF ToolbarFilter replacement with conditional \"firstElementChild\".\n *\n * @param {object} props\n * @param {string|object} props.categoryName\n * @param {string} props.chipGroupCollapsedText\n * @param {string} props.chipGroupExpandedText\n * @param {Array} props.chips\n * @param {React.ReactNode} props.children\n * @param {Function} props.deleteChip\n * @param {Function} props.deleteChipGroup\n * @param {boolean} props.showToolbarItem\n * @param {Function} props.useToolbarContentContext\n * @param {Function} props.useToolbarContext\n * @returns {React.ReactNode}\n */\nconst ToolbarFilter = ({\n  categoryName,\n  chipGroupCollapsedText,\n  chipGroupExpandedText,\n  chips,\n  children,\n  deleteChip,\n  deleteChipGroup,\n  showToolbarItem,\n  useToolbarContentContext: useAliasToolbarContentContext,\n  useToolbarContext: useAliasToolbarContext,\n  ...props\n}) => {\n  const [isMounted, setIsMounted] = useState(false);\n  const { isExpanded, chipGroupContentRef, updateNumberFilters = helpers.noop } = useAliasToolbarContext();\n  const { chipContainerRef } = useAliasToolbarContentContext();\n  const { key: normalizedCategoryKey, name: normalizedCategoryName } =\n    (typeof categoryName === 'string' && { key: categoryName, name: categoryName }) || categoryName;\n\n  useMount(() => {\n    setIsMounted(true);\n  });\n\n  useEffect(() => {\n    updateNumberFilters(normalizedCategoryKey, chips.length);\n  }, [normalizedCategoryKey, chips, updateNumberFilters]);\n\n  let chipGroup;\n\n  if (chips.length) {\n    const chipGroupProps = { isClosable: false };\n\n    if (deleteChipGroup) {\n      chipGroupProps.onClick = () => deleteChipGroup(categoryName);\n      chipGroupProps.isClosable = true;\n    }\n\n    if (chipGroupCollapsedText) {\n      chipGroupProps.collapsedText = chipGroupCollapsedText;\n    }\n\n    if (chipGroupExpandedText) {\n      chipGroupProps.expandedText = chipGroupExpandedText;\n    }\n\n    chipGroup = (\n      <ToolbarItem variant=\"chip-group\">\n        <ChipGroup key={normalizedCategoryKey} categoryName={normalizedCategoryName} {...chipGroupProps}>\n          {chips.map(chip => {\n            const normalizedChip = (typeof chip === 'string' && { key: chip, node: chip }) || chip;\n            return (\n              <Chip key={normalizedChip.key} onClick={() => deleteChip(normalizedCategoryKey, normalizedChip)}>\n                {normalizedChip.node}\n              </Chip>\n            );\n          })}\n        </ChipGroup>\n      </ToolbarItem>\n    );\n  }\n\n  const portalRef =\n    (!isExpanded && isMounted && chipGroupContentRef?.current?.firstElementChild) || chipContainerRef?.current;\n\n  return (\n    <React.Fragment>\n      {showToolbarItem && <ToolbarItem {...props}>{children}</ToolbarItem>}\n      {portalRef && createPortal(chipGroup, portalRef)}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{deleteChip: Function, chips: Array, deleteChipGroup: Function, children: React.ReactNode,\n *     chipGroupCollapsedText: string, useToolbarContext: Function, categoryName: string|object,\n *     chipGroupExpandedText: string, showToolbarItem: boolean, useToolbarContentContext: Function}}\n */\nToolbarFilter.propTypes = {\n  categoryName: PropTypes.string.isRequired,\n  children: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,\n  chipGroupCollapsedText: PropTypes.string,\n  chipGroupExpandedText: PropTypes.string,\n  chips: PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.string, PropTypes.shape({ key: PropTypes.string, node: PropTypes.string })])\n  ),\n  deleteChip: PropTypes.func,\n  deleteChipGroup: PropTypes.func,\n  showToolbarItem: PropTypes.bool,\n  useToolbarContentContext: PropTypes.func,\n  useToolbarContext: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{deleteChip: Function, chips: Array, deleteChipGroup: Function, chipGroupCollapsedText: null,\n *     useToolbarContext: Function, chipGroupExpandedText: null, showToolbarItem: boolean,\n *     useToolbarContentContext: Function}}\n */\nToolbarFilter.defaultProps = {\n  chipGroupCollapsedText: null,\n  chipGroupExpandedText: null,\n  chips: [],\n  deleteChip: helpers.noop,\n  deleteChipGroup: null,\n  showToolbarItem: true,\n  useToolbarContentContext,\n  useToolbarContext\n};\n\nexport { ToolbarFilter as default, ToolbarFilter, useToolbarContentContext, useToolbarContext };\n","var baseIsEqual = require('./_baseIsEqual');\n\n/**\n * This method is like `_.isEqual` except that it accepts `customizer` which\n * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n * are handled by the method instead. The `customizer` is invoked with up to\n * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * function isGreeting(value) {\n *   return /^h(?:i|ello)$/.test(value);\n * }\n *\n * function customizer(objValue, othValue) {\n *   if (isGreeting(objValue) && isGreeting(othValue)) {\n *     return true;\n *   }\n * }\n *\n * var array = ['hello', 'goodbye'];\n * var other = ['hi', 'goodbye'];\n *\n * _.isEqualWith(array, other, customizer);\n * // => true\n */\nfunction isEqualWith(value, other, customizer) {\n  customizer = typeof customizer == 'function' ? customizer : undefined;\n  var result = customizer ? customizer(value, other) : undefined;\n  return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;\n}\n\nmodule.exports = isEqualWith;\n"],"names":["BannerMessages","_ref","useBannerMessages","useAliasBannerMessages","useRemoveBannerMessages","useAliasRemoveBannerMessages","bannerMessages","removeBannerMessages","length","React","className","AlertGroup","isLiveRegion","map","_ref2","id","message","title","variant","AlertVariant","actionClose","AlertActionCloseButton","onClose","Alert","key","isInline","propTypes","PropTypes","defaultProps","useProduct","useAliasProduct","useSelector","useAliasSelector","storeHooks","arguments","undefined","productId","_messages$bannerMessa","messages","useDispatch","useAliasDispatch","dispatch","useCallback","idTitle","Array","isArray","filteredMessages","filter","type","reduxTypes","viewId","useSetBannerMessages","updatedMessages","value","helpers","console","warn","context","GraphCard","isDisabled","useParseFiltersSettings","useAliasParseFiltersSettings","filtersSettings","filterSetting","_filterSetting$settin","_filterSetting$settin2","_filterSetting$settin3","GraphCardContext","concat","settings","metrics","GraphCardMetricTotals","GraphCardChart","_settings$cards","children","useGraphCardContext","useAliasGraphCardContext","useMetricsSelector","useAliasMetricsSelector","useProductGraphTallyQuery","useAliasProductGraphTallyQuery","query","pending","error","fulfilled","dataSets","dataByList","RHSM_API_QUERY_SET_TYPES","startDate","isCurrent","isSelectedMonthCurrent","toolbarFieldOptions","option","toISOString","isMetricDisplay","cards","_settings$groupMetric","_settings$groupMetric2","_settings$cards2","metricDisplayPassedData","dataSet","chartId","metric","metricId","display","graphCardHelpers","data","isClone","groupMetric","_camelCase","join","JSON","stringify","index","header","body","footer","Card","isPlain","CardHeader","CardTitle","Title","headingLevel","size","Loader","skeletonProps","SkeletonSize","CardBody","height","CardFooter","InventoryCardInstances","props","InventoryCard","t","useGetInventory","useInventoryCardActions","useOnPage","useOnColumnSort","translate","useGetInstancesInventory","useInventoryCardActionsInstances","useOnPageInstances","useOnColumnSortInstances","useParseInstancesFiltersSettings","InventoryTab","active","useOnTab","tabs","InventoryTabs","activeTab","defaultActiveTab","useAliasOnTab","updatedActiveTab","_inventory$tabs","inventory","onTab","updatedChildren","child","childProps","content","count","Tabs","ProductView","useRouteDetail","useAliasRouteDetail","firstMatch","productGroup","renderProduct","config","initialInventoryFilters","initialSubscriptionsInventoryFilters","ProductViewContext","PageMessages","PageToolbar","Toolbar","PageSection","InventoryCardSubscriptions","updated","PageLayout","PageHeader","productLabel","appName","PageColumns","routerContext","constructor","_defineProperty","updatedTabs","this","setState","componentDidMount","state","setTabData","componentDidUpdate","prevProps","_isEqualWith","customizer","valueA","valueB","toString","Tab","eventKey","TabTitleText","renderTabs","hasOverflowScroll","PfTabs","activeKey","onSelect","event","mountOnEnter","unmountOnExit","inset","default","md","render","Grid","GridItem","span","hardFilterReset","isGroupVariantDisabled","useProductToolbarQuery","useAliasProductToolbarQuery","useSelectCategoryOptions","useAliasSelectCategoryOptions","useToolbarFieldClear","useAliasToolbarFieldClear","useToolbarFieldClearAll","useAliasToolbarFieldClearAll","useToolbarFields","useAliasToolbarFields","toolbarFieldQueries","currentCategory","options","clearField","clearAllFields","itemFields","secondaryFields","PfToolbar","collapseListedFiltersBreakpoint","clearAllFilters","onClearAll","clearFiltersButtonText","ToolbarFieldGroupVariant","ToolbarContent","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarGroup","ToolbarItem","ToolbarFieldSelectCategory","_ref3","filterName","component","OptionComponent","isClearable","chipProps","categoryName","chips","filterValue","setSelectedOptions","deleteChip","onClearFilter","ToolbarFilter","_extends","showToolbarItem","isFilter","alignment","isStandalone","useBillingProviderOnSelect","useAliasBillingProviderOnSelect","useCategoryOnSelect","useAliasCategoryOnSelect","useSlaOnSelect","useAliasSlaOnSelect","useUsageOnSelect","useAliasUsageOnSelect","useVariantOnSelect","useAliasVariantOnSelect","billingOnSelect","categoryOnSelect","slaOnSelect","usageOnSelect","variantOnSelect","field","useProductQuery","useAliasProductQuery","useSelectCategoryOnSelect","useAliasSelectCategoryOnSelect","billingProvider","category","sla","usage","selectCategoryOnSelect","categoryOptions","useProductToolbarConfig","useAliasProductToolbarConfig","filters","useMemo","setFilter","filterProps","find","categoryOptionValue","isItem","_ref4","isSecondary","useToolbarFieldOptions","availableVariants","forEach","push","selected","sort","titleA","titleB","localeCompare","useOnSelect","position","useAliasOnSelect","useAliasToolbarFieldOptions","updatedValue","_view$product","_view$product$variant","view","product","updatedOptions","element","ToolbarItemVariant","Select","selectedOptions","placeholder","SelectPosition","useToolbarContentContext","useContext","ToolbarContentContext","useToolbarContext","ToolbarContext","_chipGroupContentRef$","chipGroupCollapsedText","chipGroupExpandedText","deleteChipGroup","useAliasToolbarContentContext","useAliasToolbarContext","isMounted","setIsMounted","useState","isExpanded","chipGroupContentRef","updateNumberFilters","chipContainerRef","normalizedCategoryKey","name","normalizedCategoryName","chipGroup","useMount","useEffect","chipGroupProps","isClosable","onClick","collapsedText","expandedText","ChipGroup","chip","normalizedChip","node","Chip","portalRef","current","firstElementChild","createPortal","isRequired","baseIsEqual","module","exports","other","result"],"sourceRoot":""}