{"version":3,"file":"js/4418.48fb536749743b30f375.js","mappings":"+VAmCA,MAAMA,EAAuBC,IAQvB,IARwB,MAC5BC,EAAK,MACLC,EAAK,EACLC,EACAC,YAAaC,EACbC,oBAAqBC,EACrBC,aAAcC,EACdC,WAAYC,GACbX,EACC,MAAM,SAAEY,EAAW,CAAC,GAAML,KACpB,aAAEM,EAAY,OAAEC,GAAWH,KAC3B,sBAAEI,GAA0BH,EAE5BI,EAAWX,KACVY,KAAuBC,GAAeT,EAAkB,CAC7DU,IAAA,IAAAC,EAAA,IAAC,MAAEC,GAAOF,EAAA,OAAiB,QAAjBC,EAAKC,EAAMC,cAAM,IAAAF,OAAA,EAAZA,EAAA,GAAAG,OAAkBT,EAAM,aAAY,KAChDZ,EAAMsB,SAASC,KAChBC,IAAA,IAAC,GAAEC,GAAID,EAAA,OACLE,IAAA,IAAAC,EAAA,IAAC,MAAER,GAAOO,EAAA,OACI,QADJC,EACRR,EAAMC,cAAM,IAAAO,OAAA,EAAZA,EAAA,GAAAN,OAAkBT,EAAM,KAAAS,OAAII,GAAK,QAIzCG,EAAAA,EAAAA,IAAS,KACP5B,EAAMsB,SAASO,SAAQ,CAAAC,EAA0BC,KAAU,IAAnC,GAAEN,EAAE,gBAAEO,GAAiBF,EACzCf,GAAsBiB,EACnB,IAAIC,OAAOlB,GAAoBmB,KAAKT,IACvC1B,EAAMoC,KAAKV,KAGUT,aAAW,EAAXA,EAAce,KAAUhC,EAAMqC,UAAUX,KAG7D1B,EAAMoC,KAAKV,EAEf,GACA,IASJ,MAAMY,EAAUZ,IACd,MAAMa,EAAgBvC,EAAMwC,OAAOd,GAEnCX,EAAS,CACP0B,KAAMC,EAAAA,GAAAA,MAAAA,iBACNhB,GAAI,GAAFJ,OAAKT,EAAM,KAAAS,OAAII,GACjBiB,MAAOJ,GACP,EAGJ,OACEK,IAAAA,cAACA,IAAAA,SAAc,KACZ3C,EAAMsB,SAASC,KAAI,CAAAqB,EAAgDb,KAAU,IAAzD,GAAEN,EAAE,YAAEoB,EAAaC,OAAQC,EAAK,KAAEC,EAAO,IAAIJ,EAChE,MAAMK,GACHD,EAAKE,MAAKC,IAAA,IAAC,EAAEC,EAAC,QAAEC,GAASF,EAAA,OAAMC,GAAK,IAAiB,IAAZC,GAAsBD,GAAK,IAAqB,IAAhBP,CAAqB,MAAK,EAEhGS,EAAerD,EAAE,CAAC,wBAAyB,4BAA6B,CAC5EsD,QAAS5C,EACT6C,QAAS/B,IAGLgC,EAAiBxD,EAAE,gCAEvB,CACEsD,QAAS5C,EACT6C,QAAS/B,GAEX,CAACkB,IAAAA,cAAA,QAAMe,MAAO,CAAEC,WAAY,cAGxBC,GAAiB5C,aAAW,EAAXA,EAAce,KAAUhC,EAAMqC,UAAUX,GACzDoC,EAAoB,CAAC,EAEtBhD,IACHgD,EAAkBxB,QAAU,IAAMA,EAAQZ,GAC1CoC,EAAkBC,WAAa,IAAMzB,EAAQZ,IAG/C,MAAMsC,EACJpB,IAAAA,cAACqB,EAAAA,QAAMC,EAAAA,EAAAA,GAAA,GACDJ,EAAiB,CACrBK,UAAU,kEACVC,SAAU,EACVC,IAAG,oBAAA/C,OAAsBI,GACzB4C,QAAQ,OACRC,UAAU,IACVrB,WAAYpC,QAAAA,EAAyBoC,EACrCsB,MACItB,GAAcW,IAAmBjB,IAAAA,cAAC6B,EAAAA,UAAS,CAACC,OAAO,cACnD9B,IAAAA,cAAC6B,EAAAA,UAAS,CACRC,OAAS5B,EAAe,OAAW,SACnCa,MAAO,CAAEgB,WAAazB,GAA4BW,EAAd,SAA6C,WACjFe,KAAM5B,MAKXO,GAIL,OAAIG,EAEAd,IAAAA,cAACiC,EAAAA,QAAO,CACNR,IAAG,qBAAA/C,OAAuBI,GAC1BoD,QAASlC,IAAAA,cAAA,SAAIc,GACbqB,SAAUC,EAAAA,gBAAAA,IACVC,YAAU,GAEVrC,IAAAA,cAAA,QAAMuB,UAAU,yGACbH,IAMFA,CAAM,IAEA,EAUrBlE,EAAqBoF,UAAY,CAC/BlF,MAAOmF,IAAAA,MAAgB,CACrB/C,KAAM+C,IAAAA,KACN3C,OAAQ2C,IAAAA,KACR9C,UAAW8C,IAAAA,OAEblF,MAAOkF,IAAAA,MAAgB,CACrB5D,SAAU4D,IAAAA,QACRA,IAAAA,MAAgB,CACdlC,KAAMkC,IAAAA,MACNzD,GAAIyD,IAAAA,OAAAA,WACJrC,YAAaqC,IAAAA,KACbpC,OAAQoC,IAAAA,OAAAA,gBAIdjF,EAAGiF,IAAAA,KACHhF,YAAagF,IAAAA,KACb9E,oBAAqB8E,IAAAA,KACrB1E,WAAY0E,IAAAA,KACZ5E,aAAc4E,IAAAA,MAShBrF,EAAqBsF,aAAe,CAClCpF,MAAO,CACLoC,KAAMiD,EAAAA,QAAAA,KACN7C,OAAQ6C,EAAAA,QAAAA,KACRhD,UAAWgD,EAAAA,QAAAA,MAEbpF,MAAO,CACLsB,SAAU,IAEZrB,EAAGoF,EAAAA,UACHnF,YAAaoF,EAAAA,GAAAA,WAAAA,YACblF,oBAAmB,sBACnBI,WAAU,aACVF,aAAcgF,EAAAA,GAAAA,WAAAA,a,ueC/LhB,MAAMC,EAAkB,CAAC,CAAE7E,SAAU,CAAE8E,QAAS,KAAQJ,EAAAA,EAAAA,MAElDK,EAAmB9C,IAAAA,cAAoB4C,GAOvCnF,EAAsBA,KAAMsF,EAAAA,EAAAA,YAAWD,GAUvCE,EAA0B,WAGrB,IAFTnF,WAAYC,EAAkBD,EAAAA,WAC9BoF,sBAAuBC,EAA6BD,EAAAA,uBACrDE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACH,MAAM,UAAEG,GAAcxF,KAChB,QAAEyF,EAAU,GAAE,SAAExF,EAAW,CAAC,GAAMmF,IAExC,OAAOM,EAAAA,EAAAA,UACL,IACEC,EAAAA,iBAAAA,sBAAuC,CACrCF,UACAxF,WACAuF,eAEJ,CAACC,EAASxF,EAAUuF,GAExB,EAWMI,EAAqB,WAGhB,IAFTjG,oBAAqBC,EAA2BD,EAChDkG,qBAAsBC,EAA4BjB,EAAAA,GAAAA,WAAAA,sBACnDQ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACH,MAAM,SAAEpF,EAAW,CAAC,GAAML,KACpB,QAAEmF,EAAU,IAAO9E,GAEnB,MACJ8F,EAAK,UACLC,EAAS,QACTC,EAAO,KACP1D,EAAO,MACJ2D,GACDJ,EACFf,EAAQjE,KACNzB,IAAA,IAAG2B,GAAImF,EAAQ,WAAEC,GAAY/G,EAAA,OAC3BmB,IAAA,IAAA6F,EAAAC,EAAA,IAAC,MAAE5F,GAAOF,EAAA,OACR4F,EAA2B,QAAjBC,EAAG3F,EAAM6F,gBAAQ,IAAAF,OAAA,EAAdA,EAAiBF,GAAuB,QAAdG,EAAG5F,EAAM8F,aAAK,IAAAF,OAAA,EAAXA,EAAcH,EAAS,MAOnEM,EAAW,CAAC,EACZC,EAAanE,aAAI,EAAJA,EAAMzB,KAAI,CAAC6F,EAAYrF,KACxC,MAAMsF,EAAoB,IACrB7B,EAAQzD,MACRqF,GAGL,OADAF,EAAS1B,EAAQzD,GAAON,IAAM4F,EACvBA,CAAiB,IAG1B,MAAO,IACFV,EACH3D,KAAMkE,EACN5F,SAAU6F,EACVX,QACAC,YACAC,UAEJ,EAeMY,EAAgB,WAOX,IAPY,gBACrBC,EAAkBC,EAAAA,GAAAA,KAAAA,gBAClBtH,YAAaC,EAAmBmF,EAAAA,GAAAA,WAAAA,YAChClF,oBAAqBC,EAA2BD,EAChDiG,mBAAoBoB,EAA0BpB,EAC9C7F,WAAYC,EAAkBD,EAAAA,WAC9BkH,0BAA2BC,EAAiCD,EAAAA,2BAC7D5B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACH,MAAM,UAAEG,GAAcxF,IAChBmH,EAAQD,IACR7G,EAAWX,IACXwG,EAAWc,KACX,SAAE/G,EAAW,CAAC,GAAML,KACpB,QAAEmF,EAAU,IAAO9E,EAYzB,OAVAmH,EAAAA,EAAAA,IAAwB,KACtB,MAAMC,EAAiBtC,EAAQjE,KAAIC,IAAA,IAAGuG,OAAQnB,EAAQ,WAAEC,EAAYe,MAAOI,GAAaxG,EAAA,MAAM,CAC5FC,GAAIwE,EACJ8B,OAAQnB,EACRC,aACAe,MAAOI,EACR,IACDT,EAAgBO,EAAgBF,EAAhCL,CAAuCzG,EAAS,GAC/C,CAAC0E,EAASS,EAAW2B,IAEjBjB,CACT,EAiBMsB,EAAsB,WAIjB,IAJkB,gBAC3BC,EAAkBC,EAAAA,oBAClB9B,mBAAoBoB,EAA0BpB,EAC9CjG,oBAAqBC,EAA2BD,GACjD0F,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACH,MAAM,QAAEY,EAAO,SAAEpF,GAAamG,KACxB,SAAE/G,EAAW,CAAC,GAAML,KACpB,QAAE+H,GAAY1H,EAEpB,OAAOyF,EAAAA,EAAAA,UACL,IACEiC,aAAO,EAAPA,EAAS7G,KAAIG,IAAqC,IAApC,GAAED,EAAE,QAAEoD,KAAYwD,GAAa3G,EAC3C,MAAM4G,EAASJ,EAAgBhF,MAAKpB,IAAA,IAAGY,MAAO6F,GAAqBzG,EAAA,OAAKL,IAAO8G,CAAmB,KAC1FjE,UAAWkE,GAAoBF,GAAU,CAAC,EAElD,OACGE,GACC7F,IAAAA,cAAC8F,EAAAA,YAAW,CAACrE,IAAG,UAAA/C,OAAYI,IAC1BkB,IAAAA,cAAC6F,GAAevE,EAAAA,EAAAA,GAAA,CAACyE,UAAU,GAAWL,MAGzCxD,IAAY6B,GAAWpF,EAASyE,QAC/BpD,IAAAA,cAAC8F,EAAAA,YAAW,CAACrE,IAAK3C,GAAM2D,EAAAA,EAAAA,cACF,mBAAZP,EAAyBA,EAAQ,CAAE7B,KAAM1B,IAAcuD,IAGnE,IAAI,KAGV,CAACuD,EAASF,EAAiB5G,EAAUoF,GAEzC,EAEMlD,EAAU,CACdiC,mBACAF,kBACA+B,gBACAW,sBACA7H,sBACAiG,qBACAV,0B","sources":["webpack:///./src/components/graphCard/graphCardChartLegend.js","webpack:///./src/components/graphCard/graphCardContext.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { useMount } from 'react-use';\nimport { useProduct } from '../productView/productViewContext';\nimport { useGraphCardContext } from './graphCardContext';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { ChartIcon } from '../chart/chartIcon';\n\n/**\n * @memberof GraphCard\n * @module GraphCardChartLegend\n */\n\n/**\n * FixMe: PF button disabled borks events on immediate parent nodes, such as tooltip wrappers\n * PF is using \"pointer-events: none\" styling when disabled is activated. This\n * currently affects events on immediate parent nodes.\n */\n/**\n * A custom chart legend.\n *\n * @fires onClick\n * @param {object} props\n * @param {object} props.chart\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useDispatch\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useProduct\n * @param {Function} props.useSelectors\n * @returns {React.ReactNode}\n */\nconst GraphCardChartLegend = ({\n  chart,\n  datum,\n  t,\n  useDispatch: useAliasDispatch,\n  useGraphCardContext: useAliasGraphCardContext,\n  useSelectors: useAliasSelectors,\n  useProduct: useAliasProduct\n}) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const { productLabel, viewId } = useAliasProduct();\n  const { isDisabledLegendClick } = settings;\n\n  const dispatch = useAliasDispatch();\n  const [invertedLegendItem, ...legendItems] = useAliasSelectors([\n    ({ graph }) => graph.legend?.[`${viewId}-inverted`],\n    ...datum.dataSets.map(\n      ({ id }) =>\n        ({ graph }) =>\n          graph.legend?.[`${viewId}-${id}`]\n    )\n  ]);\n\n  useMount(() => {\n    datum.dataSets.forEach(({ id, isToolbarFilter }, index) => {\n      if (invertedLegendItem && isToolbarFilter) {\n        if (!new RegExp(invertedLegendItem).test(id)) {\n          chart.hide(id);\n        }\n      } else {\n        const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n\n        if (checkIsToggled) {\n          chart.hide(id);\n        }\n      }\n    });\n  });\n\n  /**\n   * Toggle legend item and chart.\n   *\n   * @event onClick\n   * @param {string} id\n   */\n  const onClick = id => {\n    const updatedToggle = chart.toggle(id);\n\n    dispatch({\n      type: reduxTypes.graph.SET_GRAPH_LEGEND,\n      id: `${viewId}-${id}`,\n      value: updatedToggle\n    });\n  };\n\n  return (\n    <React.Fragment>\n      {datum.dataSets.map(({ id, isThreshold, stroke: color, data = [] }, index) => {\n        const isDisabled =\n          !data.find(({ y, hasData }) => (y >= 0 && hasData === true) || (y >= 0 && isThreshold === true)) || false;\n\n        const labelContent = t([`curiosity-graph.label`, 'curiosity-graph.label_no'], {\n          product: productLabel,\n          context: id\n        });\n\n        const tooltipContent = t(\n          `curiosity-graph.legendTooltip`,\n          {\n            product: productLabel,\n            context: id\n          },\n          [<span style={{ whiteSpace: 'nowrap' }} />]\n        );\n\n        const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n        const buttonActionProps = {};\n\n        if (!isDisabledLegendClick) {\n          buttonActionProps.onClick = () => onClick(id);\n          buttonActionProps.onKeyPress = () => onClick(id);\n        }\n\n        const button = (\n          <Button\n            {...buttonActionProps}\n            className=\"curiosity-graph__legend-item curiosity-usage-graph__legend-item\"\n            tabIndex={0}\n            key={`curiosity-button-${id}`}\n            variant=\"link\"\n            component=\"a\"\n            isDisabled={isDisabledLegendClick ?? isDisabled}\n            icon={\n              ((isDisabled || checkIsToggled) && <ChartIcon symbol=\"eyeSlash\" />) || (\n                <ChartIcon\n                  symbol={(isThreshold && 'dash') || 'square'}\n                  style={{ visibility: (isDisabled && 'hidden') || (checkIsToggled && 'hidden') || 'visible' }}\n                  fill={color}\n                />\n              )\n            }\n          >\n            {labelContent}\n          </Button>\n        );\n\n        if (tooltipContent) {\n          return (\n            <Tooltip\n              key={`curiosity-tooltip-${id}`}\n              content={<p>{tooltipContent}</p>}\n              position={TooltipPosition.top}\n              enableFlip\n            >\n              <span className=\"pf-c-button pf-m-link curiosity-graph__legend-item-wrapper curiosity-usage-graph__legend-item-wrapper\">\n                {button}\n              </span>\n            </Tooltip>\n          );\n        }\n\n        return button;\n      })}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, t: Function, useGraphCardContext: Function, useDispatch: Function,\n *     useSelectors: Function, chart: object}}\n */\nGraphCardChartLegend.propTypes = {\n  chart: PropTypes.shape({\n    hide: PropTypes.func,\n    toggle: PropTypes.func,\n    isToggled: PropTypes.func\n  }),\n  datum: PropTypes.shape({\n    dataSets: PropTypes.arrayOf(\n      PropTypes.shape({\n        data: PropTypes.array,\n        id: PropTypes.string.isRequired,\n        isThreshold: PropTypes.bool,\n        stroke: PropTypes.string.isRequired\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useDispatch: PropTypes.func,\n  useGraphCardContext: PropTypes.func,\n  useProduct: PropTypes.func,\n  useSelectors: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: {dataSets: Array}, useProduct: Function, t: Function, useGraphCardContext: Function, useDispatch: Function,\n *     useSelectors: Function, chart: {hide: Function, toggle: Function, isToggled: Function}}}\n */\nGraphCardChartLegend.defaultProps = {\n  chart: {\n    hide: helpers.noop,\n    toggle: helpers.noop,\n    isToggled: helpers.noop\n  },\n  datum: {\n    dataSets: []\n  },\n  t: translate,\n  useDispatch: storeHooks.reactRedux.useDispatch,\n  useGraphCardContext,\n  useProduct,\n  useSelectors: storeHooks.reactRedux.useSelectors\n};\n\nexport { GraphCardChartLegend as default, GraphCardChartLegend };\n","import React, { useContext, useMemo } from 'react';\nimport { useShallowCompareEffect } from 'react-use';\nimport { ToolbarItem } from '@patternfly/react-core';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphConfig, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldSelectCategory';\nimport { helpers } from '../../common/helpers';\nimport { graphCardHelpers } from './graphCardHelpers';\n\n/**\n * @memberof GraphCard\n * @module GraphCardContext\n */\n\n/**\n * Chart context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{ settings: { metrics: [] } }, helpers.noop];\n\nconst GraphCardContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated graph card context.\n *\n * @returns {React.Context<{}>}\n */\nconst useGraphCardContext = () => useContext(GraphCardContext);\n\n/**\n * Parse filters settings for context.\n *\n * @param {object} options\n * @param {Function} options.useProduct\n * @param {Function} options.useProductGraphConfig\n * @returns {{standaloneFiltersSettings: Array<{ settings: object }>, groupedFiltersSettings: { settings: object }}}\n */\nconst useParseFiltersSettings = ({\n  useProduct: useAliasProduct = useProduct,\n  useProductGraphConfig: useAliasProductGraphConfig = useProductGraphConfig\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const { filters = [], settings = {} } = useAliasProductGraphConfig();\n\n  return useMemo(\n    () =>\n      graphCardHelpers.generateChartSettings({\n        filters,\n        settings,\n        productId\n      }),\n    [filters, settings, productId]\n  );\n};\n\n/**\n * Transform multiple metrics from store for chart/graph consumption.\n *\n * @param {object} options\n * @param {Function} options.useGraphCardContext\n * @param {Function} options.useSelectorsResponse\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: Array, errorId: {},\n *     id: {}, list: Array}, cancelled: boolean, dataSets: Array, message: null, error: boolean}}\n */\nconst useMetricsSelector = ({\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  const {\n    error,\n    fulfilled,\n    pending,\n    data = [],\n    ...response\n  } = useAliasSelectorsResponse(\n    metrics.map(\n      ({ id: metricId, isCapacity }) =>\n        ({ graph }) =>\n          isCapacity ? graph.capacity?.[metricId] : graph.tally?.[metricId]\n    )\n  );\n\n  /**\n   * Apply graph config settings to metric data.\n   */\n  const dataById = {};\n  const dataByList = data?.map((metricData, index) => {\n    const updatedMetricData = {\n      ...metrics[index],\n      ...metricData\n    };\n    dataById[metrics[index].id] = updatedMetricData;\n    return updatedMetricData;\n  });\n\n  return {\n    ...response,\n    data: dataById,\n    dataSets: dataByList,\n    error,\n    fulfilled,\n    pending\n  };\n};\n\n/**\n * Get graph metrics from Tally or Capacity.\n *\n * @param {object} params\n * @param {Function} params.getGraphMetrics\n * @param {Function} params.useDispatch\n * @param {Function} params.useGraphCardContext\n * @param {Function} params.useMetricsSelector\n * @param {Function} params.useProduct\n * @param {Function} params.useProductGraphTallyQuery\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: Array, errorId: {},\n *     id: {}, list: Array}, cancelled: boolean, dataSets: Array, message: null, error: boolean}}\n */\nconst useGetMetrics = ({\n  getGraphMetrics = reduxActions.rhsm.getGraphMetrics,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector = useMetricsSelector,\n  useProduct: useAliasProduct = useProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductGraphTallyQuery();\n  const dispatch = useAliasDispatch();\n  const response = useAliasMetricsSelector();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  useShallowCompareEffect(() => {\n    const updatedMetrics = metrics.map(({ metric: metricId, isCapacity, query: metricQuery }) => ({\n      id: productId,\n      metric: metricId,\n      isCapacity,\n      query: metricQuery\n    }));\n    getGraphMetrics(updatedMetrics, query)(dispatch);\n  }, [metrics, productId, query]);\n\n  return response;\n};\n\n/**\n * FixMe: the pending condition for \"content\" will block subsequent responses from this hook, this is expected.\n * This current limitation means if we decide to apply the same action to multiple cards the \"content\" will\n * not display for all of them.\n */\n/**\n * Return a component list for a configurable graphCard action toolbar.\n * Allow the \"content\" prop to receive graph data for display via callback.\n *\n * @param {object} params\n * @param {Array} params.categoryOptions\n * @param {Function} params.useMetricsSelector\n * @param {Function} params.useGraphCardContext\n * @returns {Array}\n */\nconst useGraphCardActions = ({\n  categoryOptions = toolbarFieldOptions,\n  useMetricsSelector: useAliasMetricsSelector = useMetricsSelector,\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext\n} = {}) => {\n  const { pending, dataSets } = useAliasMetricsSelector();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { actions } = settings;\n\n  return useMemo(\n    () =>\n      actions?.map(({ id, content, ...actionProps }) => {\n        const option = categoryOptions.find(({ value: categoryOptionValue }) => id === categoryOptionValue);\n        const { component: OptionComponent } = option || {};\n\n        return (\n          (OptionComponent && (\n            <ToolbarItem key={`option-${id}`}>\n              <OptionComponent isFilter={false} {...actionProps} />\n            </ToolbarItem>\n          )) ||\n          (content && !pending && dataSets.length && (\n            <ToolbarItem key={id || helpers.generateId()}>\n              {typeof content === 'function' ? content({ data: dataSets }) : content}\n            </ToolbarItem>\n          )) ||\n          null\n        );\n      }),\n    [actions, categoryOptions, dataSets, pending]\n  );\n};\n\nconst context = {\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardActions,\n  useGraphCardContext,\n  useMetricsSelector,\n  useParseFiltersSettings\n};\n\nexport {\n  context as default,\n  context,\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardActions,\n  useGraphCardContext,\n  useMetricsSelector,\n  useParseFiltersSettings\n};\n"],"names":["GraphCardChartLegend","_ref","chart","datum","t","useDispatch","useAliasDispatch","useGraphCardContext","useAliasGraphCardContext","useSelectors","useAliasSelectors","useProduct","useAliasProduct","settings","productLabel","viewId","isDisabledLegendClick","dispatch","invertedLegendItem","legendItems","_ref2","_graph$legend","graph","legend","concat","dataSets","map","_ref3","id","_ref4","_graph$legend2","useMount","forEach","_ref5","index","isToolbarFilter","RegExp","test","hide","isToggled","onClick","updatedToggle","toggle","type","reduxTypes","value","React","_ref6","isThreshold","stroke","color","data","isDisabled","find","_ref7","y","hasData","labelContent","product","context","tooltipContent","style","whiteSpace","checkIsToggled","buttonActionProps","onKeyPress","button","Button","_extends","className","tabIndex","key","variant","component","icon","ChartIcon","symbol","visibility","fill","Tooltip","content","position","TooltipPosition","enableFlip","propTypes","PropTypes","defaultProps","helpers","translate","storeHooks","DEFAULT_CONTEXT","metrics","GraphCardContext","useContext","useParseFiltersSettings","useProductGraphConfig","useAliasProductGraphConfig","arguments","length","undefined","productId","filters","useMemo","graphCardHelpers","useMetricsSelector","useSelectorsResponse","useAliasSelectorsResponse","error","fulfilled","pending","response","metricId","isCapacity","_graph$capacity","_graph$tally","capacity","tally","dataById","dataByList","metricData","updatedMetricData","useGetMetrics","getGraphMetrics","reduxActions","useAliasMetricsSelector","useProductGraphTallyQuery","useAliasProductGraphTallyQuery","query","useShallowCompareEffect","updatedMetrics","metric","metricQuery","useGraphCardActions","categoryOptions","toolbarFieldOptions","actions","actionProps","option","categoryOptionValue","OptionComponent","ToolbarItem","isFilter"],"sourceRoot":""}