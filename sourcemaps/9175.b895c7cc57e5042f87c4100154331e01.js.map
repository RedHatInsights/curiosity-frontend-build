{"version":3,"file":"js/9175.28341c4c5dca958dd4f1.js","mappings":"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","sources":["webpack:///./src/components/bannerMessages/bannerMessages.js","webpack:///./src/components/graphCard/graphCard.js","webpack:///./src/components/inventorySubscriptions/inventorySubscriptions.js","webpack:///./src/components/inventoryTabs/inventoryTabs.js","webpack:///./src/components/productView/productView.js","webpack:///./src/components/toolbar/toolbarFieldGranularity.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, AlertActionCloseButton, AlertVariant, Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { useShallowCompareEffect } from 'react-use';\nimport { apiQueries, storeHooks } from '../../redux';\nimport { translate } from '../i18n/i18n';\nimport { dateHelpers, helpers } from '../../common';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { useRouteDetail } from '../../hooks/useRouter';\n\n/**\n * Render banner messages.\n *\n * @param {object} props\n * @param {Array} props.messages\n * @param {Function} props.useRouteDetail\n * @param {Function} props.useAppMessages\n * @returns {Node}\n */\nconst BannerMessages = ({ messages, useRouteDetail: useAliasRouteDetail, useAppMessages: useAliasAppMessages }) => {\n  const [hideAlerts, setHideAlerts] = useState({});\n  const [alerts, setAlerts] = useState([]);\n  const { pathParameter: productId, productConfig } = useAliasRouteDetail() || {};\n  const isProductConfig = productConfig?.length === 1 && productConfig?.[0];\n  const { query } = apiQueries.parseRhsmQuery(productConfig?.[0]?.query || {});\n  const { appMessages } = useAliasAppMessages();\n\n  useShallowCompareEffect(() => {\n    if (productId && isProductConfig) {\n      const { startDate, endDate } = dateHelpers.getRangedDateTime('CURRENT');\n      const updatedGraphQuery = {\n        ...query,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString(),\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      };\n\n      storeHooks.rhsmActions.useGetMessageReports(productId, updatedGraphQuery);\n    }\n  }, [productId, isProductConfig, query]);\n\n  useShallowCompareEffect(() => {\n    const updatedMessages = [];\n\n    if (messages.length) {\n      Object.entries(appMessages).forEach(([key, value]) => {\n        if (hideAlerts[key] !== true && value === true) {\n          const message = messages.find(({ id }) => id === key);\n\n          if (message) {\n            updatedMessages.push({\n              key,\n              ...message\n            });\n          }\n        }\n      });\n    }\n\n    setAlerts(\n      updatedMessages.map(({ key, message, title, variant = AlertVariant.info }) => {\n        const actionClose = <AlertActionCloseButton onClose={() => setHideAlerts({ ...hideAlerts, [key]: true })} />;\n\n        return (\n          <Alert actionClose={actionClose} key={key} title={title} variant={variant}>\n            {message}\n          </Alert>\n        );\n      })\n    );\n  }, [appMessages, hideAlerts, messages]);\n\n  if (alerts?.length) {\n    return <div className=\"curiosity-banner-messages\">{alerts}</div>;\n  }\n\n  return null;\n};\n\n/**\n * Prop types.\n *\n * @type {{useAppMessages: Function, messages: Array, useRouteDetail: Function}}\n */\nBannerMessages.propTypes = {\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.node.isRequired,\n      message: PropTypes.node.isRequired,\n      variant: PropTypes.oneOf([...Object.values(AlertVariant)])\n    })\n  ),\n  useAppMessages: PropTypes.func,\n  useRouteDetail: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useAppMessages: Function, messages: Array, useRouteDetail: Function}}\n */\nBannerMessages.defaultProps = {\n  messages: [\n    {\n      id: 'cloudigradeMismatch',\n      title: translate('curiosity-banner.dataMismatchTitle'),\n      message: translate(\n        'curiosity-banner.dataMismatchMessage',\n        {\n          context: helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS !== '' && 'cloudigradeMismatch',\n          appName: helpers.UI_DISPLAY_NAME\n        },\n        [\n          <Button\n            isInline\n            component=\"a\"\n            variant=\"link\"\n            icon={<ExternalLinkAltIcon />}\n            iconPosition=\"right\"\n            target=\"_blank\"\n            href={helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS}\n          />\n        ]\n      )\n    }\n  ],\n  useAppMessages: storeHooks.rhsmSelectors.useAppMessages,\n  useRouteDetail\n};\n\nexport { BannerMessages as default, BannerMessages };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardTitle, CardHeader, CardActions, CardBody, Title } from '@patternfly/react-core';\nimport { chart_color_green_300 as chartColorGreenDark } from '@patternfly/react-tokens';\nimport _isEqual from 'lodash/isEqual';\nimport { connect, reduxActions, reduxSelectors } from '../../redux';\nimport { helpers } from '../../common';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { graphCardHelpers } from './graphCardHelpers';\nimport GraphCardChartTooltip from './graphCardChartTooltip';\nimport GraphCardChartLegend from './graphCardChartLegend';\nimport { Chart } from '../chart/chart';\nimport { Loader } from '../loader/loader';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A chart/graph card.\n *\n * @augments React.Component\n * @fires onUpdateGraphData\n */\nclass GraphCard extends React.Component {\n  componentDidMount() {\n    this.onUpdateGraphData();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { productId, query } = this.props;\n\n    if (productId !== prevProps.productId || !_isEqual(query, prevProps.query)) {\n      this.onUpdateGraphData();\n    }\n  }\n\n  /**\n   * Call the RHSM APIs, apply filters.\n   *\n   * @event onUpdateGraphData\n   */\n  onUpdateGraphData = () => {\n    const { getGraphReportsCapacity, isDisabled, productId, query } = this.props;\n    const graphGranularity = this.getQueryGranularity();\n    const { [RHSM_API_QUERY_TYPES.START_DATE]: startDate, [RHSM_API_QUERY_TYPES.END_DATE]: endDate } = query;\n\n    if (!isDisabled && graphGranularity && startDate && endDate && productId) {\n      getGraphReportsCapacity(productId, query);\n    }\n  };\n\n  getQueryGranularity() {\n    const { query } = this.props;\n    return query?.[RHSM_API_QUERY_TYPES.GRANULARITY];\n  }\n\n  /**\n   * Apply props to chart/graph.\n   *\n   * @returns {Node}\n   */\n  renderChart() {\n    const { filterGraphData, graphData, productLabel, query, viewId } = this.props;\n    const graphGranularity = this.getQueryGranularity();\n\n    const chartAreaProps = {\n      xAxisLabelIncrement: graphCardHelpers.getChartXAxisLabelIncrement(graphGranularity),\n      xAxisTickFormat: ({ item, previousItem, tick }) =>\n        graphCardHelpers.xAxisTickFormat({\n          tick,\n          date: item.date,\n          previousDate: previousItem.date,\n          granularity: graphGranularity\n        }),\n      yAxisTickFormat: graphCardHelpers.yAxisTickFormat\n    };\n\n    const filteredGraphData = data => {\n      const filtered = key => {\n        const tempFiltered = {\n          data: data[key],\n          id: key,\n          strokeWidth: 2,\n          isStacked: !/^threshold/.test(key),\n          isThreshold: /^threshold/.test(key)\n        };\n\n        if (/^threshold/.test(key)) {\n          tempFiltered.stroke = chartColorGreenDark.value;\n          tempFiltered.strokeDasharray = '4,3';\n          tempFiltered.strokeWidth = 3;\n        }\n\n        return tempFiltered;\n      };\n\n      if (filterGraphData.length) {\n        return filterGraphData.map(value => Object.assign(filtered(value.id), value));\n      }\n\n      return Object.keys(data).map(key => filtered(key));\n    };\n\n    return (\n      <Chart\n        key={`chart_${JSON.stringify(query)}`}\n        {...chartAreaProps}\n        dataSets={filteredGraphData(graphData)}\n        chartLegend={({ chart, datum }) => (\n          <GraphCardChartLegend chart={chart} datum={datum} productLabel={productLabel} viewId={viewId} />\n        )}\n        chartTooltip={({ datum }) => (\n          <GraphCardChartTooltip datum={datum} granularity={graphGranularity} productLabel={productLabel} />\n        )}\n      />\n    );\n  }\n\n  /**\n   * ToDo: Evaluate applying a minHeight attr to the MinHeight component graphCard setup\n   * Appears there may be a minor page shift when compared to the prior hard-set min-height\n   * of 410px\n   */\n  /**\n   * Render a chart/graph card with chart/graph.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { cardTitle, children, error, graphData, meta, isDisabled, pending, settings } = this.props;\n\n    if (isDisabled) {\n      return null;\n    }\n\n    let actionDisplay = null;\n\n    // Apply actionDisplay callback, return node\n    if (typeof settings?.actionDisplay === 'function') {\n      actionDisplay = settings.actionDisplay({ data: { ...graphData }, meta: { ...meta } });\n    }\n\n    return (\n      <Card className=\"curiosity-usage-graph\">\n        <MinHeight key=\"headerMinHeight\">\n          <CardHeader>\n            <CardTitle>\n              <Title headingLevel=\"h2\" size=\"lg\">\n                {cardTitle}\n              </Title>\n            </CardTitle>\n            <CardActions className={(error && 'blur') || ''}>\n              <React.Fragment key=\"actionDisplay\">{actionDisplay}</React.Fragment>\n              {children}\n            </CardActions>\n          </CardHeader>\n        </MinHeight>\n        <MinHeight key=\"bodyMinHeight\">\n          <CardBody>\n            <div className={(error && 'blur') || (pending && 'fadein') || ''}>\n              {pending && <Loader variant=\"graph\" />}\n              {!pending && this.renderChart()}\n            </div>\n          </CardBody>\n        </MinHeight>\n      </Card>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{productLabel: string, settings: object, productId: string, query: object, pending: boolean,\n *     error: boolean, cardTitle: Node, filterGraphData: Array, getGraphReportsCapacity: Function,\n *     viewId: string, t: Function, children: Node, graphData: object, isDisabled: boolean,\n *     meta: object}}\n */\nGraphCard.propTypes = {\n  cardTitle: PropTypes.node,\n  children: PropTypes.node,\n  error: PropTypes.bool,\n  filterGraphData: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      fill: PropTypes.string,\n      stroke: PropTypes.string\n    })\n  ),\n  getGraphReportsCapacity: PropTypes.func,\n  graphData: PropTypes.object,\n  meta: PropTypes.object,\n  query: PropTypes.shape({\n    [RHSM_API_QUERY_TYPES.GRANULARITY]: PropTypes.oneOf([...Object.values(GRANULARITY_TYPES)]).isRequired,\n    [RHSM_API_QUERY_TYPES.START_DATE]: PropTypes.string.isRequired,\n    [RHSM_API_QUERY_TYPES.END_DATE]: PropTypes.string.isRequired\n  }).isRequired,\n  isDisabled: PropTypes.bool,\n  pending: PropTypes.bool,\n  productId: PropTypes.string.isRequired,\n  productLabel: PropTypes.string,\n  settings: PropTypes.shape({\n    actionDisplay: PropTypes.func\n  }),\n  t: PropTypes.func,\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{productLabel: string, settings: object, pending: boolean, error: boolean, cardTitle: Node,\n *     filterGraphData: Array, getGraphReportsCapacity: Function, viewId: string, t: translate,\n *     children: Node, graphData: object, isDisabled: boolean, meta: object}}\n */\nGraphCard.defaultProps = {\n  cardTitle: null,\n  children: null,\n  error: false,\n  filterGraphData: [],\n  getGraphReportsCapacity: helpers.noop,\n  graphData: {},\n  meta: {},\n  isDisabled: helpers.UI_DISABLED_GRAPH,\n  pending: false,\n  productLabel: '',\n  settings: {},\n  t: translate,\n  viewId: 'graphCard'\n};\n\n/**\n * Apply actions to props.\n *\n * @param {Function} dispatch\n * @returns {object}\n */\nconst mapDispatchToProps = dispatch => ({\n  getGraphReportsCapacity: (id, query) => dispatch(reduxActions.rhsm.getGraphReportsCapacity(id, query))\n});\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.graphCard.makeGraphCard();\n\nconst ConnectedGraphCard = connect(makeMapStateToProps, mapDispatchToProps)(GraphCard);\n\nexport { ConnectedGraphCard as default, ConnectedGraphCard, GraphCard };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _isEqual from 'lodash/isEqual';\nimport { SortByDirection, TableVariant } from '@patternfly/react-table';\nimport { Bullseye, Card, CardActions, CardBody, CardFooter, CardHeader } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport _camelCase from 'lodash/camelCase';\nimport { helpers } from '../../common';\nimport { connect, reduxActions, reduxSelectors, reduxTypes, store } from '../../redux';\nimport Table from '../table/table';\nimport { Loader } from '../loader/loader';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { inventoryListHelpers } from '../inventoryList/inventoryListHelpers';\nimport Pagination from '../pagination/pagination';\nimport { paginationHelpers } from '../pagination/paginationHelpers';\nimport {\n  RHSM_API_QUERY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_SUBSCRIPTIONS_SORT_TYPES as SORT_TYPES,\n  RHSM_API_QUERY_TYPES\n} from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A subscriptions system inventory component.\n *\n * @augments React.Component\n * @fires onColumnSort\n * @fires onPage\n * @fires onUpdateInventoryData\n */\nclass InventorySubscriptions extends React.Component {\n  componentDidMount() {\n    this.onUpdateInventoryData();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { productId, query } = this.props;\n\n    if (productId !== prevProps.productId || !_isEqual(query, prevProps.query)) {\n      this.onUpdateInventoryData();\n    }\n  }\n\n  /**\n   * On column sort update state.\n   *\n   * @event onColumnSort\n   * @param {object} data pass-through inventory data.\n   * @param {object} sortParams\n   * @param {string} sortParams.direction\n   * @param {string} sortParams.id column identifier\n   */\n  onColumnSort = (data, { direction, id }) => {\n    const { productId } = this.props;\n    const updatedSortColumn = Object.values(SORT_TYPES).find(value => _camelCase(value) === id);\n    let updatedDirection;\n\n    if (!updatedSortColumn) {\n      if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n        console.warn(`Sorting can only be performed on select fields, confirm field ${id} is allowed.`);\n      }\n      return;\n    }\n\n    switch (direction) {\n      case SortByDirection.desc:\n        updatedDirection = SORT_DIRECTION_TYPES.DESCENDING;\n        break;\n      default:\n        updatedDirection = SORT_DIRECTION_TYPES.ASCENDING;\n        break;\n    }\n\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.DIRECTION],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.DIRECTION]: updatedDirection\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.SORT],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.SORT]: updatedSortColumn\n      }\n    ]);\n  };\n\n  /**\n   * On paging and on perPage events.\n   *\n   * @event onPage\n   * @param {object} params\n   * @param {number} params.offset\n   * @param {number} params.perPage\n   */\n  onPage = ({ offset, perPage }) => {\n    const { productId } = this.props;\n\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.OFFSET],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.OFFSET]: offset\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_TYPES.LIMIT],\n        viewId: productId,\n        [RHSM_API_QUERY_TYPES.LIMIT]: perPage\n      }\n    ]);\n  };\n\n  /**\n   * Call the RHSM APIs, apply filters.\n   *\n   * @event onUpdateInventoryData\n   */\n  onUpdateInventoryData = () => {\n    const { getSubscriptionsInventory, isDisabled, productId, query } = this.props;\n\n    if (!isDisabled && productId) {\n      getSubscriptionsInventory(productId, query);\n    }\n  };\n\n  /**\n   * Render an inventory table.\n   *\n   * @returns {Node}\n   */\n  renderTable() {\n    const { filterInventoryData, listData, query, session } = this.props;\n    let updatedColumnHeaders = [];\n\n    const updatedRows = listData.map(({ ...cellData }) => {\n      const { columnHeaders, cells } = inventoryListHelpers.parseRowCellsListData({\n        filters: inventoryListHelpers.parseInventoryFilters({\n          filters: filterInventoryData,\n          onSort: this.onColumnSort,\n          query\n        }),\n        cellData,\n        session\n      });\n\n      updatedColumnHeaders = columnHeaders;\n\n      return {\n        cells\n      };\n    });\n\n    return (\n      <Table\n        borders\n        variant={TableVariant.compact}\n        className=\"curiosity-inventory-list\"\n        columnHeaders={updatedColumnHeaders}\n        rows={updatedRows}\n      />\n    );\n  }\n\n  /**\n   * Render an inventory card.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const {\n      error,\n      filterInventoryData,\n      fulfilled,\n      isDisabled,\n      itemCount,\n      listData,\n      pending,\n      perPageDefault,\n      query,\n      t\n    } = this.props;\n\n    if (isDisabled) {\n      return (\n        <Card className=\"curiosity-inventory-card__disabled\">\n          <CardBody>\n            <Bullseye>{t('curiosity-inventory.tab', { context: 'disabled' })}</Bullseye>\n          </CardBody>\n        </Card>\n      );\n    }\n\n    const updatedPerPage = query[RHSM_API_QUERY_TYPES.LIMIT] || perPageDefault;\n    const updatedOffset = query[RHSM_API_QUERY_TYPES.OFFSET];\n    const isLastPage = paginationHelpers.isLastPage(updatedOffset, updatedPerPage, itemCount);\n\n    // Set an updated key to force refresh minHeight\n    const minHeightContentRefreshKey =\n      (fulfilled === true && itemCount < updatedPerPage && `bodyMinHeight-${updatedPerPage}-resize`) ||\n      (fulfilled === true && isLastPage && `bodyMinHeight-${updatedPerPage}-resize`) ||\n      (error === true && `bodyMinHeight-${updatedPerPage}-resize`) ||\n      `bodyMinHeight-${updatedPerPage}`;\n\n    return (\n      <Card className=\"curiosity-inventory-card\">\n        <MinHeight key=\"headerMinHeight\" updateOnContent>\n          <CardHeader className={(error && 'hidden') || ''} aria-hidden={error || false}>\n            <CardActions className={(!itemCount && 'transparent') || ''} aria-hidden={!itemCount || false}>\n              <Pagination\n                isCompact\n                isDisabled={pending || error}\n                itemCount={itemCount}\n                offset={updatedOffset}\n                onPage={this.onPage}\n                onPerPage={this.onPage}\n                perPage={updatedPerPage}\n              />\n            </CardActions>\n          </CardHeader>\n        </MinHeight>\n        <MinHeight key={minHeightContentRefreshKey} updateOnContent>\n          <CardBody>\n            <div className={(error && 'blur') || (pending && 'fadein') || ''}>\n              {pending && (\n                <Loader\n                  variant=\"table\"\n                  tableProps={{\n                    className: 'curiosity-inventory-list',\n                    colCount: filterInventoryData?.length || (listData?.[0] && Object.keys(listData[0]).length) || 1,\n                    colWidth:\n                      (filterInventoryData?.length && filterInventoryData.map(({ cellWidth }) => cellWidth)) || [],\n                    rowCount: listData?.length || updatedPerPage,\n                    variant: TableVariant.compact\n                  }}\n                />\n              )}\n              {!pending && this.renderTable()}\n            </div>\n          </CardBody>\n        </MinHeight>\n        <MinHeight key=\"footerMinHeight\" updateOnContent>\n          <CardFooter\n            className={(error && 'hidden') || (!itemCount && 'transparent') || ''}\n            aria-hidden={error || !itemCount || false}\n          >\n            <TableToolbar isFooter>\n              <Pagination\n                dropDirection=\"up\"\n                isDisabled={pending || error}\n                itemCount={itemCount}\n                offset={updatedOffset}\n                onPage={this.onPage}\n                onPerPage={this.onPage}\n                perPage={updatedPerPage}\n              />\n            </TableToolbar>\n          </CardFooter>\n        </MinHeight>\n      </Card>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{productId: string, listData: Array, session: object, pending: boolean, query: object,\n *     fulfilled: boolean, error: boolean, getSubscriptionsInventory: Function, itemCount: number,\n *     t: Function, filterInventoryData: Array, perPageDefault: number, isDisabled: boolean}}\n */\nInventorySubscriptions.propTypes = {\n  error: PropTypes.bool,\n  fulfilled: PropTypes.bool,\n  filterInventoryData: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      header: PropTypes.oneOfType([\n        PropTypes.shape({\n          title: PropTypes.node.isRequired\n        }),\n        PropTypes.func,\n        PropTypes.node\n      ]),\n      cell: PropTypes.oneOfType([\n        PropTypes.shape({\n          title: PropTypes.node.isRequired\n        }),\n        PropTypes.func,\n        PropTypes.node\n      ])\n    }).isRequired\n  ),\n  getSubscriptionsInventory: PropTypes.func,\n  isDisabled: PropTypes.bool,\n  itemCount: PropTypes.number,\n  listData: PropTypes.array,\n  pending: PropTypes.bool,\n  productId: PropTypes.string.isRequired,\n  perPageDefault: PropTypes.number,\n  query: PropTypes.object.isRequired,\n  session: PropTypes.object,\n  t: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, filterInventoryData: Array, listData: Array, session: object, pending: boolean,\n *     fulfilled: boolean, perPageDefault: number, isDisabled: boolean, error: boolean,\n *     getSubscriptionsInventory: Function, itemCount: number}}\n */\nInventorySubscriptions.defaultProps = {\n  error: false,\n  fulfilled: false,\n  filterInventoryData: [],\n  getSubscriptionsInventory: helpers.noop,\n  isDisabled: helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS,\n  itemCount: 0,\n  listData: [],\n  pending: false,\n  perPageDefault: 10,\n  session: {},\n  t: translate\n};\n\n/**\n * Apply actions to props.\n *\n * @param {Function} dispatch\n * @returns {object}\n */\nconst mapDispatchToProps = dispatch => ({\n  getSubscriptionsInventory: (id, query) => dispatch(reduxActions.rhsm.getSubscriptionsInventory(id, query))\n});\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst makeMapStateToProps = reduxSelectors.subscriptionsList.makeSubscriptionsList();\n\nconst ConnectedInventorySubscriptions = connect(makeMapStateToProps, mapDispatchToProps)(InventorySubscriptions);\n\nexport { ConnectedInventorySubscriptions as default, ConnectedInventorySubscriptions, InventorySubscriptions };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Title } from '@patternfly/react-core';\nimport { connect, reduxTypes, store } from '../../redux';\nimport { Tabs } from '../tabs/tabs';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { InventoryTab } from './inventoryTab';\n\n/**\n * A system inventory tabs component.\n *\n * @augments React.Component\n * @fires onTab\n */\nclass InventoryTabs extends React.Component {\n  /**\n   * On tab update state.\n   *\n   * @event onTab\n   * @param {object} params\n   * @param {string} params.index tab index\n   */\n  onTab = ({ index }) => {\n    const { productId } = this.props;\n\n    store.dispatch({\n      type: reduxTypes.inventory.SET_INVENTORY_TAB,\n      tabs: {\n        [productId]: index\n      }\n    });\n  };\n\n  /**\n   * Render inventory tabs using Inventory tab passed props only. A parallel outcome can be\n   * achieved by passing an array of objects through a prop.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { activeTab, children, defaultActiveTab, isDisabled, t } = this.props;\n\n    if (isDisabled) {\n      return null;\n    }\n\n    const updatedChildren = React.Children.toArray(children).map((child, index) => {\n      const { props = {} } = child;\n\n      return {\n        active: props.active || false,\n        content: props.children || child,\n        title: props.title || t('curiosity-inventory.tabSubHeading', { count: index })\n      };\n    });\n\n    return (\n      <React.Fragment>\n        <Title headingLevel=\"h2\" className=\"sr-only\">\n          {t('curiosity-inventory.tabHeading', { count: updatedChildren.length })}\n        </Title>\n        <Tabs activeTab={activeTab} defaultActiveTab={defaultActiveTab} onTab={this.onTab} tabs={updatedChildren} />\n      </React.Fragment>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{productId: string, t: Function, children: Node, defaultActiveTab: number, isDisabled: boolean,\n *     activeTab: number}}\n */\nInventoryTabs.propTypes = {\n  activeTab: PropTypes.number,\n  children: PropTypes.node.isRequired,\n  defaultActiveTab: PropTypes.number,\n  isDisabled: PropTypes.bool,\n  productId: PropTypes.string.isRequired,\n  t: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, defaultActiveTab: number, isDisabled: boolean, activeTab: number}}\n */\nInventoryTabs.defaultProps = {\n  activeTab: 0,\n  defaultActiveTab: 0,\n  isDisabled: helpers.UI_DISABLED_TABLE,\n  t: translate\n};\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst mapStateToProps = ({ inventory }, { productId }) => ({ activeTab: inventory.tabs?.[productId] });\n\nconst ConnectedInventoryTabs = connect(mapStateToProps)(InventoryTabs);\n\nexport { ConnectedInventoryTabs as default, ConnectedInventoryTabs, InventoryTabs, InventoryTab };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport { useRouteDetail } from '../../hooks/useRouter';\nimport { ProductViewContext } from './productViewContext';\nimport { PageLayout, PageHeader, PageSection, PageToolbar, PageMessages, PageColumns } from '../pageLayout/pageLayout';\nimport { apiQueries } from '../../redux';\nimport { ConnectedGraphCard } from '../graphCard/graphCard';\nimport { ConnectedToolbar } from '../toolbar/toolbar';\nimport { ConnectedInventoryList } from '../inventoryList/inventoryList';\nimport { helpers } from '../../common';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport { ToolbarFieldGranularity } from '../toolbar/toolbarFieldGranularity';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport { ConnectedInventorySubscriptions } from '../inventorySubscriptions/inventorySubscriptions';\nimport { RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { translate } from '../i18n/i18n';\n\n/**\n * ToDo: base for default product layouts, add additional props for various toolbars\n * Next steps include...\n * Consider being able to pass customized toolbars for GraphCard and the\n * various Inventory displays. Have to evaluate how to handle the global toolbar, one\n * consideration is creating optional widgets with self-contained state update ability\n * based off of context/props/etc.\n *\n * Moving existing products to this layout, or maintaining them \"as is\", then renaming and\n * relocating them to this directory if they've been customized beyond a basic layout.\n */\n/**\n * Display product columns.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Node|boolean} props.toolbarGraph\n * @param {boolean} props.toolbarGraphDescription\n * @param {Node|boolean} props.toolbarProduct\n * @param {Function} props.useRouteDetail\n * @returns {Node}\n */\nconst ProductView = ({\n  t,\n  toolbarGraph,\n  toolbarGraphDescription,\n  toolbarProduct,\n  useRouteDetail: useAliasRouteDetail\n}) => {\n  const { productParameter: routeProductLabel, productConfig } = useAliasRouteDetail();\n\n  const renderProduct = config => {\n    const {\n      graphTallyQuery,\n      inventoryHostsQuery,\n      inventorySubscriptionsQuery,\n      query,\n      initialToolbarFilters,\n      initialGraphFilters,\n      initialGraphSettings,\n      initialGuestsFilters,\n      initialInventoryFilters,\n      initialInventorySettings,\n      initialSubscriptionsInventoryFilters,\n      productLabel,\n      productId,\n      viewId\n    } = config;\n\n    if (!productId || !viewId) {\n      return null;\n    }\n\n    const {\n      graphTallyQuery: initialGraphTallyQuery,\n      inventoryHostsQuery: initialInventoryHostsQuery,\n      inventorySubscriptionsQuery: initialInventorySubscriptionsQuery,\n      toolbarQuery: initialToolbarQuery\n    } = apiQueries.parseRhsmQuery(query, { graphTallyQuery, inventoryHostsQuery, inventorySubscriptionsQuery });\n\n    let graphCardTooltip = null;\n\n    if (toolbarGraphDescription) {\n      graphCardTooltip = (\n        <Tooltip\n          content={<p>{t('curiosity-graph.cardHeadingDescription', { context: productId })}</p>}\n          position={TooltipPosition.top}\n          enableFlip={false}\n          distance={5}\n          entryDelay={100}\n          exitDelay={0}\n        >\n          <sup className=\"curiosity-icon__info\">\n            <InfoCircleIcon />\n          </sup>\n        </Tooltip>\n      );\n    }\n\n    const graphCardTitle = (\n      <React.Fragment>\n        {t('curiosity-graph.cardHeading', { context: productId })}\n        {graphCardTooltip}\n      </React.Fragment>\n    );\n\n    return (\n      <ProductViewContext.Provider value={config} key={`product_${productId}`}>\n        <PageToolbar>\n          {(React.isValidElement(toolbarProduct) && toolbarProduct) ||\n            (toolbarProduct !== false && (\n              <ConnectedToolbar\n                filterOptions={initialToolbarFilters}\n                productId={productId}\n                query={initialToolbarQuery}\n                viewId={viewId}\n              />\n            ))}\n        </PageToolbar>\n        <PageSection>\n          <ConnectedGraphCard\n            key={`graph_${productId}`}\n            filterGraphData={initialGraphFilters}\n            settings={initialGraphSettings}\n            query={initialGraphTallyQuery}\n            productId={productId}\n            viewId={viewId}\n            cardTitle={graphCardTitle}\n            productLabel={productLabel}\n          >\n            {(React.isValidElement(toolbarGraph) && toolbarGraph) ||\n              (toolbarGraph !== false && (\n                <ToolbarFieldGranularity\n                  viewId={viewId}\n                  value={initialGraphTallyQuery[RHSM_API_QUERY_TYPES.GRANULARITY]}\n                />\n              ))}\n          </ConnectedGraphCard>\n        </PageSection>\n        <PageSection>\n          <InventoryTabs key={`inventory_${productId}`} productId={productId}>\n            <InventoryTab\n              key={`inventory_hosts_${productId}`}\n              title={t('curiosity-inventory.tabHosts', { context: ['noInstances', productId] })}\n            >\n              <ConnectedInventoryList\n                key={`inv_${productId}`}\n                filterGuestsData={initialGuestsFilters}\n                filterInventoryData={initialInventoryFilters}\n                productId={productId}\n                settings={initialInventorySettings}\n                query={initialInventoryHostsQuery}\n                viewId={viewId}\n              />\n            </InventoryTab>\n            {initialSubscriptionsInventoryFilters && (\n              <InventoryTab\n                key={`inventory_subs_${productId}`}\n                title={t('curiosity-inventory.tabSubscriptions', { context: productId })}\n              >\n                <ConnectedInventorySubscriptions\n                  key={`subs_${productId}`}\n                  filterInventoryData={initialSubscriptionsInventoryFilters}\n                  productId={productId}\n                  query={initialInventorySubscriptionsQuery}\n                  viewId={viewId}\n                />\n              </InventoryTab>\n            )}\n          </InventoryTabs>\n        </PageSection>\n      </ProductViewContext.Provider>\n    );\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader productLabel={routeProductLabel}>\n        {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: routeProductLabel })}\n      </PageHeader>\n      <PageMessages>\n        <BannerMessages />\n      </PageMessages>\n      <PageColumns>{productConfig.map(config => renderProduct(config))}</PageColumns>\n    </PageLayout>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), toolbarGraphDescription: boolean, toolbarProduct: (Node|boolean),\n *    useRouteDetail: Function}}\n */\nProductView.propTypes = {\n  t: PropTypes.func,\n  toolbarGraph: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n  toolbarGraphDescription: PropTypes.bool,\n  toolbarProduct: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n  useRouteDetail: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, toolbarGraph: (Node|boolean), toolbarGraphDescription: boolean, toolbarProduct: (Node|boolean),\n *    useRouteDetail: Function}}\n */\nProductView.defaultProps = {\n  t: translate,\n  toolbarGraph: null,\n  toolbarGraphDescription: false,\n  toolbarProduct: null,\n  useRouteDetail\n};\n\nexport { ProductView as default, ProductView };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxTypes, store, storeHooks } from '../../redux';\nimport { Select } from '../form/select';\nimport { RHSM_API_QUERY_GRANULARITY_TYPES as FIELD_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { dateHelpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Select field options.\n *\n * @type {{title: (string|Node), value: string, selected: boolean}[]}\n */\nconst toolbarFieldOptions = Object.values(FIELD_TYPES).map(type => ({\n  title: translate('curiosity-toolbar.granularity', { context: type }),\n  value: type,\n  selected: false\n}));\n\n/**\n * Display a granularity field with options.\n *\n * @fires onSelect\n * @param {object} props\n * @param {Array} props.options\n * @param {Function} props.t\n * @param {string} props.value\n * @param {string} props.viewId\n * @returns {Node}\n */\nconst ToolbarFieldGranularity = ({ options, t, value, viewId }) => {\n  const updatedValue = storeHooks.reactRedux.useSelector(\n    ({ view }) => view.graphTallyQuery?.[viewId]?.[RHSM_API_QUERY_TYPES.GRANULARITY],\n    value\n  );\n\n  const updatedOptions = options.map(option => ({ ...option, selected: option.value === updatedValue }));\n\n  /**\n   * On select, dispatch type.\n   *\n   * @event onSelect\n   * @param {object} event\n   * @returns {void}\n   */\n  const onSelect = event => {\n    const { startDate, endDate } = dateHelpers.getRangedDateTime(event.value);\n    store.dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_LIST,\n        viewId\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.GRANULARITY],\n        viewId,\n        [RHSM_API_QUERY_TYPES.GRANULARITY]: event.value\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.START_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.START_DATE]: startDate.toISOString()\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_TYPES[RHSM_API_QUERY_TYPES.END_DATE],\n        viewId,\n        [RHSM_API_QUERY_TYPES.END_DATE]: endDate.toISOString()\n      }\n    ]);\n  };\n\n  return (\n    <Select\n      aria-label={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      onSelect={onSelect}\n      options={updatedOptions}\n      selectedOptions={updatedValue}\n      placeholder={t('curiosity-toolbar.placeholder', { context: 'granularity' })}\n      data-test={ToolbarFieldGranularity.defaultProps.viewId}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{viewId: string, t: Function, options: Array, value: string}}\n */\nToolbarFieldGranularity.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.node,\n      value: PropTypes.any,\n      selected: PropTypes.bool\n    })\n  ),\n  t: PropTypes.func,\n  value: PropTypes.oneOf([...Object.values(FIELD_TYPES)]),\n  viewId: PropTypes.string\n};\n\n/**\n * Default props.\n *\n * @type {{viewId: string, t: translate, options: Array, value: string}}\n */\nToolbarFieldGranularity.defaultProps = {\n  options: toolbarFieldOptions,\n  t: translate,\n  value: FIELD_TYPES.DAILY,\n  viewId: 'toolbarFieldGranularity'\n};\n\nexport { ToolbarFieldGranularity as default, ToolbarFieldGranularity, toolbarFieldOptions };\n"],"names":["BannerMessages","messages","useAliasRouteDetail","useRouteDetail","useAliasAppMessages","useAppMessages","useState","hideAlerts","setHideAlerts","alerts","setAlerts","productId","pathParameter","productConfig","isProductConfig","length","query","apiQueries","appMessages","useShallowCompareEffect","dateHelpers","startDate","endDate","updatedGraphQuery","RHSM_API_QUERY_TYPES","GRANULARITY_TYPES","toISOString","storeHooks","updatedMessages","Object","entries","forEach","key","value","message","find","id","push","map","title","variant","AlertVariant","actionClose","AlertActionCloseButton","onClose","Alert","className","defaultProps","translate","context","helpers","appName","Button","isInline","component","icon","ExternalLinkAltIcon","iconPosition","target","href","GraphCard","onUpdateGraphData","props","getGraphReportsCapacity","isDisabled","graphGranularity","getQueryGranularity","this","prevProps","_isEqual","data","filtered","filterGraphData","graphData","productLabel","viewId","chartAreaProps","xAxisLabelIncrement","graphCardHelpers","xAxisTickFormat","item","previousItem","tick","date","previousDate","granularity","yAxisTickFormat","Chart","JSON","stringify","dataSets","tempFiltered","strokeWidth","isStacked","test","isThreshold","stroke","chartColorGreenDark","strokeDasharray","assign","keys","chartLegend","chart","datum","chartTooltip","cardTitle","children","error","meta","pending","settings","actionDisplay","Card","MinHeight","CardHeader","CardTitle","Title","headingLevel","size","CardActions","CardBody","Loader","renderChart","React","t","makeMapStateToProps","reduxSelectors","ConnectedGraphCard","connect","dispatch","reduxActions","InventorySubscriptions","onColumnSort","updatedDirection","direction","updatedSortColumn","values","SORT_TYPES","_camelCase","SortByDirection","SORT_DIRECTION_TYPES","store","type","reduxTypes","console","warn","onPage","offset","perPage","onUpdateInventoryData","getSubscriptionsInventory","filterInventoryData","listData","session","updatedColumnHeaders","updatedRows","cellData","inventoryListHelpers","filters","onSort","columnHeaders","cells","borders","TableVariant","rows","fulfilled","itemCount","perPageDefault","Bullseye","updatedPerPage","updatedOffset","isLastPage","paginationHelpers","minHeightContentRefreshKey","updateOnContent","isCompact","onPerPage","tableProps","colCount","colWidth","cellWidth","rowCount","renderTable","CardFooter","isFooter","dropDirection","ConnectedInventorySubscriptions","InventoryTabs","onTab","index","tabs","activeTab","defaultActiveTab","updatedChildren","child","active","content","count","Tabs","ConnectedInventoryTabs","inventory","ProductView","toolbarGraph","toolbarGraphDescription","toolbarProduct","routeProductLabel","productParameter","PageLayout","PageHeader","PageMessages","PageColumns","config","graphTallyQuery","inventoryHostsQuery","inventorySubscriptionsQuery","initialToolbarFilters","initialGraphFilters","initialGraphSettings","initialGuestsFilters","initialInventoryFilters","initialInventorySettings","initialSubscriptionsInventoryFilters","initialGraphTallyQuery","initialInventoryHostsQuery","initialInventorySubscriptionsQuery","initialToolbarQuery","toolbarQuery","graphCardTooltip","Tooltip","position","TooltipPosition","enableFlip","distance","entryDelay","exitDelay","graphCardTitle","ProductViewContext","PageToolbar","ConnectedToolbar","filterOptions","PageSection","ToolbarFieldGranularity","InventoryTab","ConnectedInventoryList","filterGuestsData","renderProduct","toolbarFieldOptions","FIELD_TYPES","selected","options","updatedValue","view","updatedOptions","option","Select","onSelect","event","selectedOptions","placeholder"],"sourceRoot":""}