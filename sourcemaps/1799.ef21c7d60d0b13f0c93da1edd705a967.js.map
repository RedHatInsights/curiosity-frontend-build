{"version":3,"file":"js/1799.1676911795103.9c877f7627949f9f4191.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardChart.js","webpack:///./src/components/graphCard/graphCardChartLegend.js","webpack:///./src/components/graphCard/graphCardChartTitleTooltip.js","webpack:///./src/components/graphCard/graphCardChartTooltip.js","webpack:///./src/components/graphCard/graphCardContext.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Card,\n  CardActions,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  Title,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup\n} from '@patternfly/react-core';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useGraphCardActions, useGraphCardContext, useGetMetrics } from './graphCardContext';\nimport { graphCardHelpers } from './graphCardHelpers';\nimport { Chart } from '../chart/chart';\nimport { GraphCardChartLegend } from './graphCardChartLegend';\nimport { GraphCardChartTooltip } from './graphCardChartTooltip';\nimport { GraphCardChartTitleTooltip } from './graphCardChartTitleTooltip';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { Loader } from '../loader/loader';\nimport { translate } from '../i18n/i18n';\n\n/**\n * A chart/graph card.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useGetMetrics\n * @param {Function} props.useGraphCardActions\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useProduct\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardChart = ({\n  t,\n  useGetMetrics: useAliasGetMetrics,\n  useGraphCardActions: useAliasGraphCardActions,\n  useGraphCardContext: useAliasGraphCardContext,\n  useProduct: useAliasProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productId } = useAliasProduct();\n  const updatedActionDisplay = useAliasGraphCardActions();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { isStandalone, metric } = settings;\n\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n  const { pending, error, dataSets = [] } = useAliasGetMetrics();\n\n  return (\n    <Card className=\"curiosity-usage-graph\">\n      <MinHeight key=\"headerMinHeight\">\n        <CardHeader>\n          <CardTitle>\n            <Title headingLevel=\"h2\" size=\"lg\">\n              {t('curiosity-graph.cardHeading', { context: (isStandalone && metric?.id) || productId })}\n              <GraphCardChartTitleTooltip />\n            </Title>\n          </CardTitle>\n          {updatedActionDisplay && (\n            <CardActions className={(error && 'blur') || ''}>\n              <Toolbar collapseListedFiltersBreakpoint=\"sm\">\n                <ToolbarContent>\n                  <ToolbarGroup alignment={{ default: 'alignRight' }}>{updatedActionDisplay}</ToolbarGroup>\n                </ToolbarContent>\n              </Toolbar>\n            </CardActions>\n          )}\n        </CardHeader>\n      </MinHeight>\n      <MinHeight key=\"bodyMinHeight\">\n        <CardBody>\n          <div className={(error && 'blur') || (pending && 'fadein') || ''}>\n            {pending && <Loader variant=\"graph\" />}\n            {!pending && (\n              <Chart\n                {...graphCardHelpers.generateExtendedChartSettings({ settings, granularity })}\n                dataSets={dataSets}\n                chartLegend={({ chart, datum }) => <GraphCardChartLegend chart={chart} datum={datum} />}\n                chartTooltip={({ datum }) => <GraphCardChartTooltip datum={datum} />}\n              />\n            )}\n          </div>\n        </CardBody>\n      </MinHeight>\n    </Card>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, useProductGraphTallyQuery: Function, t: Function,\n *     useGetMetrics: Function, useGraphCardActions: Function}}\n */\nGraphCardChart.propTypes = {\n  t: PropTypes.func,\n  useGetMetrics: PropTypes.func,\n  useGraphCardActions: PropTypes.func,\n  useGraphCardContext: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, useProductGraphTallyQuery: Function, t: translate,\n *     useGetMetrics: Function, useGraphCardActions: Function}}\n */\nGraphCardChart.defaultProps = {\n  t: translate,\n  useGetMetrics,\n  useGraphCardActions,\n  useGraphCardContext,\n  useProduct,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChart as default, GraphCardChart };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { useMount } from 'react-use';\nimport { useProduct } from '../productView/productViewContext';\nimport { useGraphCardContext } from './graphCardContext';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { ChartIcon } from '../chart/chartIcon';\n\n/**\n * FixMe: PF button disabled borks events on immediate parent nodes, such as tooltip wrappers\n * PF is using \"pointer-events: none\" styling when disabled is activated. This\n * currently affects events on immediate parent nodes.\n */\n/**\n * A custom chart legend.\n *\n * @fires onClick\n * @param {object} props\n * @param {object} props.chart\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useDispatch\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useProduct\n * @param {Function} props.useSelectors\n * @returns {Node}\n */\nconst GraphCardChartLegend = ({\n  chart,\n  datum,\n  t,\n  useDispatch: useAliasDispatch,\n  useGraphCardContext: useAliasGraphCardContext,\n  useSelectors: useAliasSelectors,\n  useProduct: useAliasProduct\n}) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const { productLabel, viewId } = useAliasProduct();\n  const { isDisabledLegendClick } = settings;\n\n  const dispatch = useAliasDispatch();\n  const [invertedLegendItem, ...legendItems] = useAliasSelectors([\n    ({ graph }) => graph.legend?.[`${viewId}-inverted`],\n    ...datum.dataSets.map(\n      ({ id }) =>\n        ({ graph }) =>\n          graph.legend?.[`${viewId}-${id}`]\n    )\n  ]);\n\n  useMount(() => {\n    datum.dataSets.forEach(({ id, isToolbarFilter }, index) => {\n      if (invertedLegendItem && isToolbarFilter) {\n        if (!new RegExp(invertedLegendItem).test(id)) {\n          chart.hide(id);\n        }\n      } else {\n        const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n\n        if (checkIsToggled) {\n          chart.hide(id);\n        }\n      }\n    });\n  });\n\n  /**\n   * Toggle legend item and chart.\n   *\n   * @event onClick\n   * @param {string} id\n   */\n  const onClick = id => {\n    const updatedToggle = chart.toggle(id);\n\n    dispatch({\n      type: reduxTypes.graph.SET_GRAPH_LEGEND,\n      id: `${viewId}-${id}`,\n      value: updatedToggle\n    });\n  };\n\n  return (\n    <React.Fragment>\n      {datum.dataSets.map(({ id, isThreshold, stroke: color, data = [] }, index) => {\n        const isDisabled =\n          !data.find(({ y, hasData }) => (y >= 0 && hasData === true) || (y >= 0 && isThreshold === true)) || false;\n\n        const labelContent = t([`curiosity-graph.label`, 'curiosity-graph.label_no'], {\n          product: productLabel,\n          context: id\n        });\n\n        const tooltipContent = t(\n          `curiosity-graph.legendTooltip`,\n          {\n            product: productLabel,\n            context: id\n          },\n          [<span style={{ whiteSpace: 'nowrap' }} />]\n        );\n\n        const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n        const buttonActionProps = {};\n\n        if (!isDisabledLegendClick) {\n          buttonActionProps.onClick = () => onClick(id);\n          buttonActionProps.onKeyPress = () => onClick(id);\n        }\n\n        const button = (\n          <Button\n            {...buttonActionProps}\n            className=\"curiosity-usage-graph__legend-item\"\n            tabIndex={0}\n            key={`curiosity-button-${id}`}\n            variant=\"link\"\n            component=\"a\"\n            isDisabled={isDisabledLegendClick ?? isDisabled}\n            icon={\n              ((isDisabled || checkIsToggled) && <ChartIcon symbol=\"eyeSlash\" />) || (\n                <ChartIcon\n                  symbol={(isThreshold && 'dash') || 'square'}\n                  style={{ visibility: (isDisabled && 'hidden') || (checkIsToggled && 'hidden') || 'visible' }}\n                  fill={color}\n                />\n              )\n            }\n          >\n            {labelContent}\n          </Button>\n        );\n\n        if (tooltipContent) {\n          return (\n            <Tooltip\n              key={`curiosity-tooltip-${id}`}\n              content={<p>{tooltipContent}</p>}\n              position={TooltipPosition.top}\n              enableFlip\n              distance={5}\n            >\n              <span className=\"pf-c-button pf-m-link curiosity-usage-graph__legend-item-wrapper\">{button}</span>\n            </Tooltip>\n          );\n        }\n\n        return button;\n      })}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, t: Function, useGraphCardContext: Function, useDispatch: Function,\n *     useSelectors: Function, chart: object}}\n */\nGraphCardChartLegend.propTypes = {\n  chart: PropTypes.shape({\n    hide: PropTypes.func,\n    toggle: PropTypes.func,\n    isToggled: PropTypes.func\n  }),\n  datum: PropTypes.shape({\n    dataSets: PropTypes.arrayOf(\n      PropTypes.shape({\n        data: PropTypes.array,\n        id: PropTypes.string.isRequired,\n        isThreshold: PropTypes.bool,\n        stroke: PropTypes.string.isRequired\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useDispatch: PropTypes.func,\n  useGraphCardContext: PropTypes.func,\n  useProduct: PropTypes.func,\n  useSelectors: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: {dataSets: *[]}, useProduct: Function, t: Function, useGraphCardContext: Function, useDispatch: Function,\n *     useSelectors: Function, chart: {hide: Function, toggle: Function, isToggled: Function}}}\n */\nGraphCardChartLegend.defaultProps = {\n  chart: {\n    hide: helpers.noop,\n    toggle: helpers.noop,\n    isToggled: helpers.noop\n  },\n  datum: {\n    dataSets: []\n  },\n  t: translate,\n  useDispatch: storeHooks.reactRedux.useDispatch,\n  useGraphCardContext,\n  useProduct,\n  useSelectors: storeHooks.reactRedux.useSelectors\n};\n\nexport { GraphCardChartLegend as default, GraphCardChartLegend };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { useProduct } from '../productView/productViewContext';\nimport { useGraphCardContext } from './graphCardContext';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Graph card title tooltip.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useGraphCardContext\n * @param {Function} props.useProduct\n * @returns {Node}\n */\nconst GraphCardChartTitleTooltip = ({\n  t,\n  useGraphCardContext: useAliasGraphCardContext,\n  useProduct: useAliasProduct\n}) => {\n  const { productId } = useAliasProduct();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { isCardTitleDescription, isStandalone, metric } = settings;\n\n  if (!isCardTitleDescription && !metric?.isCardTitleDescription) {\n    return null;\n  }\n\n  return (\n    <Tooltip\n      content={\n        <p>{t(`curiosity-graph.cardHeadingDescription`, { context: (isStandalone && metric?.id) || productId })}</p>\n      }\n      position={TooltipPosition.top}\n      enableFlip={false}\n      distance={5}\n      entryDelay={100}\n      exitDelay={0}\n    >\n      <span className=\"curiosity-icon__question\">\n        <OutlinedQuestionCircleIcon />\n      </span>\n    </Tooltip>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, t: Function}}\n */\nGraphCardChartTitleTooltip.propTypes = {\n  t: PropTypes.func,\n  useProduct: PropTypes.func,\n  useGraphCardContext: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGraphCardContext: Function, useProduct: Function, t: Function}}\n */\nGraphCardChartTitleTooltip.defaultProps = {\n  t: translate,\n  useProduct,\n  useGraphCardContext\n};\n\nexport { GraphCardChartTitleTooltip as default, GraphCardChartTitleTooltip };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { getTooltipDate } from './graphCardHelpers';\nimport { translate } from '../i18n/i18n';\nimport { ChartTypeVariant } from '../chart/chart';\nimport { ChartIcon } from '../chart/chartIcon';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * A custom chart tooltip.\n *\n * @param {object} props\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useProduct\n * @returns {Node}\n */\nconst GraphCardChartTooltip = ({\n  datum,\n  t,\n  useProduct: useAliasProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productLabel } = useAliasProduct();\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n\n  let header = null;\n  const data = [];\n  const { itemsByKey = {} } = datum || {};\n\n  Object.keys(itemsByKey)\n    .reverse()\n    .forEach((key, index) => {\n      if (index === 0) {\n        header = getTooltipDate({\n          date: itemsByKey[key]?.data.date,\n          granularity\n        });\n      }\n\n      const tempDataFacet = {\n        color: itemsByKey[key]?.color\n      };\n\n      if (itemsByKey[key]?.chartType === ChartTypeVariant.threshold) {\n        let thresholdStringValue = itemsByKey[key]?.data.y ?? t('curiosity-graph.label', { context: 'noData' });\n\n        // ToDo: Remove hasInfinite check once deprecated graphCard components are removed\n        if (itemsByKey[key]?.data.hasInfinite || itemsByKey[key]?.data.hasInfiniteQuantity) {\n          thresholdStringValue = t('curiosity-graph.label', { context: ['threshold', 'infinite'] }, [\n            tempDataFacet.color && (\n              <ChartIcon\n                symbol=\"infinity\"\n                fill=\"#ffffff\"\n                title={t('curiosity-graph.label', { context: ['threshold', 'infinite'] })}\n              />\n            )\n          ]);\n        }\n\n        tempDataFacet.label = t('curiosity-graph.label', { context: ['threshold'] });\n        tempDataFacet.value = thresholdStringValue;\n      } else {\n        const dataFactsValue =\n          (itemsByKey[key]?.data.hasData === false && t('curiosity-graph.label', { context: 'noData' })) ||\n          itemsByKey[key]?.data.y ||\n          0;\n\n        tempDataFacet.label = t(`curiosity-graph.label`, { context: key, product: productLabel });\n        tempDataFacet.value = dataFactsValue;\n      }\n\n      tempDataFacet.chartType = itemsByKey[key]?.chartType;\n      data.push(tempDataFacet);\n    });\n\n  return (\n    <div className=\"curiosity-usage-graph__tooltip\">\n      <table summary={t('curiosity-graph.tooltipSummary')}>\n        {(data.length && header && (\n          <thead>\n            <tr>\n              <th colSpan={2}>{header}</th>\n            </tr>\n          </thead>\n        )) ||\n          null}\n        {(data.length && (\n          <tbody>\n            {data.map(dataFacet => {\n              const updatedDataFacetValue =\n                (typeof dataFacet.value === 'number' &&\n                  !Number.isInteger(dataFacet.value) &&\n                  helpers\n                    .numberDisplay(dataFacet.value)\n                    ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: true })\n                    ?.toUpperCase()) ||\n                dataFacet.value;\n\n              return (\n                <tr key={`tooltip-${dataFacet.label}`}>\n                  <th>\n                    {dataFacet.chartType === ChartTypeVariant.threshold && (\n                      <ChartIcon size=\"sm\" symbol=\"dash\" fill={dataFacet.color || 'transparent'} />\n                    )}\n                    {dataFacet.chartType !== ChartTypeVariant.threshold && (\n                      <ChartIcon size=\"sm\" fill={dataFacet.color || 'transparent'} />\n                    )}{' '}\n                    {dataFacet.label}\n                  </th>\n                  <td>{updatedDataFacetValue}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        )) ||\n          null}\n      </table>\n      {(!data.length && t('curiosity-graph.label', { context: ['noData', 'error'] })) || null}\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.propTypes = {\n  datum: PropTypes.shape({\n    itemsByKey: PropTypes.objectOf(\n      PropTypes.shape({\n        chartType: PropTypes.string,\n        color: PropTypes.string,\n        data: PropTypes.shape({\n          date: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),\n          hasData: PropTypes.bool,\n          hasInfinite: PropTypes.bool,\n          hasInfiniteQuantity: PropTypes.bool,\n          y: PropTypes.number\n        })\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.defaultProps = {\n  datum: {},\n  t: translate,\n  useProduct,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChartTooltip as default, GraphCardChartTooltip };\n","import React, { useContext, useMemo } from 'react';\nimport { useShallowCompareEffect } from 'react-use';\nimport { ToolbarItem } from '@patternfly/react-core';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductGraphConfig, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldSelectCategory';\nimport { helpers } from '../../common/helpers';\nimport { graphCardHelpers } from './graphCardHelpers';\n\n/**\n * Chart context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{ settings: { isStandalone: false, metrics: [], metric: undefined } }, helpers.noop];\n\nconst GraphCardContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated graph card context.\n *\n * @returns {React.Context<{}>}\n */\nconst useGraphCardContext = () => useContext(GraphCardContext);\n\n/**\n * Parse filters settings for context.\n *\n * @param {object} options\n * @param {Function} options.useProduct\n * @param {Function} options.useProductGraphConfig\n * @returns {{standaloneFiltersSettings: { settings: {} }[], groupedFiltersSettings: { settings: {} }}}\n */\nconst useParseFiltersSettings = ({\n  useProduct: useAliasProduct = useProduct,\n  useProductGraphConfig: useAliasProductGraphConfig = useProductGraphConfig\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const { filters = [], settings = {} } = useAliasProductGraphConfig();\n  const { groupedFiltersSettings, standaloneFiltersSettings = [] } = useMemo(\n    () =>\n      graphCardHelpers.generateChartSettings({\n        filters,\n        settings,\n        productId\n      }),\n    [filters, settings, productId]\n  );\n\n  return {\n    groupedFiltersSettings,\n    standaloneFiltersSettings\n  };\n};\n\n/**\n * Transform multiple metrics from store for chart/graph consumption.\n *\n * @param {object} options\n * @param {Function} options.useGraphCardContext\n * @param {Function} options.useSelectorsResponse\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: *[], errorId: {},\n *     id: {}, list: *[]}, cancelled: boolean, dataSets: unknown[], message: null, error: boolean}}\n */\nconst useMetricsSelector = ({\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  const {\n    error,\n    fulfilled,\n    pending,\n    data = [],\n    ...response\n  } = useAliasSelectorsResponse(\n    metrics.map(\n      ({ id: metricId, isCapacity }) =>\n        ({ graph }) =>\n          isCapacity ? graph.capacity?.[metricId] : graph.tally?.[metricId]\n    )\n  );\n\n  /**\n   * Apply graph config settings to metric data.\n   */\n  const dataById = {};\n  const dataByList = data?.map((metricData, index) => {\n    const updatedMetricData = {\n      ...metrics[index],\n      ...metricData\n    };\n    dataById[metrics[index].id] = updatedMetricData;\n    return updatedMetricData;\n  });\n\n  return {\n    ...response,\n    data: dataById,\n    dataSets: dataByList,\n    error,\n    fulfilled,\n    pending\n  };\n};\n\n/**\n * Get graph metrics from Tally or Capacity.\n *\n * @param {object} params\n * @param {Function} params.getGraphMetrics\n * @param {Function} params.useDispatch\n * @param {Function} params.useGraphCardContext\n * @param {Function} params.useMetricsSelector\n * @param {Function} params.useProduct\n * @param {Function} params.useProductGraphTallyQuery\n * @returns {{data: {}, pending: boolean, fulfilled: boolean, responses: {errorList: *[], errorId: {},\n *     id: {}, list: *[]}, cancelled: boolean, dataSets: *[], message: null, error: boolean}}\n */\nconst useGetMetrics = ({\n  getGraphMetrics = reduxActions.rhsm.getGraphMetrics,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext,\n  useMetricsSelector: useAliasMetricsSelector = useMetricsSelector,\n  useProduct: useAliasProduct = useProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductGraphTallyQuery();\n  const dispatch = useAliasDispatch();\n  const response = useAliasMetricsSelector();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { metrics = [] } = settings;\n\n  useShallowCompareEffect(() => {\n    const updatedMetrics = metrics.map(({ metric: metricId, isCapacity, query: metricQuery }) => ({\n      id: productId,\n      metric: metricId,\n      isCapacity,\n      query: metricQuery\n    }));\n    getGraphMetrics(updatedMetrics, query)(dispatch);\n  }, [metrics, productId, query]);\n\n  return response;\n};\n\n/**\n * Return a component list for a configurable graphCard action toolbar.\n * Allow the \"content\" prop to receive graph data for display via callback.\n *\n * @param {object} params\n * @param {Array} params.categoryOptions\n * @param {Function} params.useMetricsSelector\n * @param {Function} params.useGraphCardContext\n * @returns {*[]}\n */\nconst useGraphCardActions = ({\n  categoryOptions = toolbarFieldOptions,\n  useMetricsSelector: useAliasMetricsSelector = useMetricsSelector,\n  useGraphCardContext: useAliasGraphCardContext = useGraphCardContext\n} = {}) => {\n  const { pending, dataSets } = useAliasMetricsSelector();\n  const { settings = {} } = useAliasGraphCardContext();\n  const { actions } = settings;\n\n  return useMemo(\n    () =>\n      actions?.map(({ id, content, ...actionProps }) => {\n        const option = categoryOptions.find(({ value: categoryOptionValue }) => id === categoryOptionValue);\n        const { component: OptionComponent } = option || {};\n\n        return (\n          (OptionComponent && (\n            <ToolbarItem key={`option-${id}`}>\n              <OptionComponent isFilter={false} {...actionProps} />\n            </ToolbarItem>\n          )) ||\n          (content && !pending && dataSets.length && (\n            <ToolbarItem key={id || helpers.generateId()}>\n              {typeof content === 'function' ? content({ data: dataSets }) : content}\n            </ToolbarItem>\n          )) ||\n          null\n        );\n      }),\n    [actions, categoryOptions, dataSets, pending]\n  );\n};\n\nconst context = {\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardActions,\n  useGraphCardContext,\n  useMetricsSelector,\n  useParseFiltersSettings\n};\n\nexport {\n  context as default,\n  context,\n  GraphCardContext,\n  DEFAULT_CONTEXT,\n  useGetMetrics,\n  useGraphCardActions,\n  useGraphCardContext,\n  useMetricsSelector,\n  useParseFiltersSettings\n};\n"],"names":["GraphCardChart","t","useAliasGetMetrics","useGetMetrics","useAliasGraphCardActions","useGraphCardActions","useAliasGraphCardContext","useGraphCardContext","useAliasProduct","useProduct","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","productId","updatedActionDisplay","settings","isStandalone","metric","granularity","RHSM_API_QUERY_SET_TYPES","pending","error","dataSets","Card","className","MinHeight","key","CardHeader","CardTitle","Title","headingLevel","size","context","id","GraphCardChartTitleTooltip","CardActions","Toolbar","collapseListedFiltersBreakpoint","ToolbarContent","ToolbarGroup","alignment","default","CardBody","Loader","variant","Chart","graphCardHelpers","chartLegend","chart","datum","GraphCardChartLegend","chartTooltip","GraphCardChartTooltip","defaultProps","translate","useAliasDispatch","useDispatch","useAliasSelectors","useSelectors","productLabel","viewId","isDisabledLegendClick","dispatch","graph","legend","map","invertedLegendItem","legendItems","useMount","forEach","index","isToolbarFilter","RegExp","test","hide","isToggled","onClick","updatedToggle","toggle","type","reduxTypes","value","isThreshold","color","stroke","data","isDisabled","find","y","hasData","labelContent","product","tooltipContent","style","whiteSpace","checkIsToggled","buttonActionProps","onKeyPress","button","Button","tabIndex","component","icon","ChartIcon","symbol","visibility","fill","Tooltip","content","position","TooltipPosition","enableFlip","distance","helpers","storeHooks","isCardTitleDescription","entryDelay","exitDelay","OutlinedQuestionCircleIcon","header","itemsByKey","Object","keys","reverse","getTooltipDate","date","tempDataFacet","chartType","ChartTypeVariant","thresholdStringValue","hasInfinite","hasInfiniteQuantity","title","label","dataFactsValue","push","summary","length","colSpan","dataFacet","updatedDataFacetValue","Number","isInteger","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","DEFAULT_CONTEXT","metrics","undefined","GraphCardContext","React","useContext","useParseFiltersSettings","useProductGraphConfig","useAliasProductGraphConfig","filters","useMemo","groupedFiltersSettings","standaloneFiltersSettings","useMetricsSelector","useSelectorsResponse","useAliasSelectorsResponse","metricId","isCapacity","capacity","tally","fulfilled","response","dataById","dataByList","metricData","updatedMetricData","getGraphMetrics","reduxActions","useAliasMetricsSelector","query","useShallowCompareEffect","updatedMetrics","metricQuery","categoryOptions","toolbarFieldOptions","actions","actionProps","OptionComponent","categoryOptionValue","ToolbarItem","isFilter"],"sourceRoot":""}