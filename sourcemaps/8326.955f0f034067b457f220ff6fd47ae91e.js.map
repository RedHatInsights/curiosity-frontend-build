{"version":3,"file":"js/8326.ef57d513d1378e423c34.js","mappings":"4TAQMA,EAAkB,CACtB,CAAEC,kBAAmBC,EAAAA,GAAAA,KAAcC,cAAe,GAAIC,gBAAiBF,EAAAA,GAAAA,KAAcG,eAAgB,IACrGH,EAAAA,GAAAA,MAGII,EAAeC,IAAAA,cAAoBP,GAOnCQ,EAAkB,kBAAMC,EAAAA,EAAAA,YAAWH,IAanCI,EAAgB,WAAsE,6DAAP,GAAO,IAAnEF,gBAAiBG,OAAkD,MAA3BH,EAA2B,IACnCG,IADmC,IAClFN,eAAgBO,OADkE,MAC1C,GAD0C,YAE9CA,EAF8C,GAEnFP,EAFmF,KAEnEQ,EAFmE,KASpFC,GAASC,EAAAA,EAAAA,cACb,SAAAC,GACEH,GAAkB,SAAAI,GAAS,yBAAUA,GAAV,cAAsBD,GAAK,SAExD,CAACH,IASGK,GAAWH,EAAAA,EAAAA,cAAY,WAC3BF,GAAkB,iBAAO,QACxB,CAACA,IAOEM,GAAWJ,EAAAA,EAAAA,cACf,SAAAC,GACE,IAAMI,IAAiBf,MAAAA,OAAD,EAACA,EAAiBW,IAExC,OADAH,GAAkB,SAAAI,GAAS,yBAAUA,GAAV,cAAsBD,EAAKI,OAC/CA,IAET,CAACf,EAAgBQ,IASbQ,GAAeN,EAAAA,EAAAA,cAAY,SAAAC,GAAE,OAAIX,MAAAA,OAAA,EAAAA,EAAiBW,MAAO,IAAO,CAACX,IAEvE,yBACK,CAAEA,eAAAA,IADP,IAEES,OAAAA,EACAI,SAAAA,EACAC,SAAAA,EACAE,aAAAA,KAIEC,EAAU,CACdhB,aAAAA,EACAN,gBAAAA,EACAQ,gBAAAA,EACAE,cAAAA","sources":["webpack:///./src/components/chart/chartContext.js"],"sourcesContent":["import React, { useCallback, useContext } from 'react';\nimport { helpers } from '../../common';\n\n/**\n * Chart context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [\n  { chartContainerRef: helpers.noop, chartSettings: {}, chartTooltipRef: helpers.noop, dataSetsToggle: [] },\n  helpers.noop\n];\n\nconst ChartContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated chart context.\n *\n * @returns {React.Context<{}>}\n */\nconst useChartContext = () => useContext(ChartContext);\n\n/**\n * ToDo: reevaluate this alternative pattern of passing hooks as options, helps testing\n */\n/**\n * Track, show, and hide chart data layers.\n *\n * @param {object} hooks\n * @param {Function} hooks.useChartContext\n * @returns {{onRevert: Function, onToggle: Function, getIsToggled: Function, dataSetsToggle: object,\n *     onHide: Function}}\n */\nconst useToggleData = ({ useChartContext: useAliasChartContext = useChartContext } = {}) => {\n  const { dataSetsToggle: contextDataSetsToggle = [] } = useAliasChartContext();\n  const [dataSetsToggle, setDataSetsToggle] = contextDataSetsToggle;\n\n  /**\n   * Hide a graph layer.\n   *\n   * @type {(function(*): void)|*}\n   */\n  const onHide = useCallback(\n    id => {\n      setDataSetsToggle(prevState => ({ ...prevState, [id]: true }));\n    },\n    [setDataSetsToggle]\n  );\n\n  // ToDo: re-evaluate useCallback here.\n  /**\n   * Reset graph layers.\n   *\n   * @type {(function(): void)|*}\n   */\n  const onRevert = useCallback(() => {\n    setDataSetsToggle(() => ({}));\n  }, [setDataSetsToggle]);\n\n  /**\n   * Hide/show graph layers.\n   *\n   * @type {function(*): boolean}\n   */\n  const onToggle = useCallback(\n    id => {\n      const updatedToggle = !dataSetsToggle?.[id];\n      setDataSetsToggle(prevState => ({ ...prevState, [id]: updatedToggle }));\n      return updatedToggle;\n    },\n    [dataSetsToggle, setDataSetsToggle]\n  );\n\n  // ToDo: review return undefined if doesn't exist\n  /**\n   * Graph layer status.\n   *\n   * @type {function(*): boolean}\n   */\n  const getIsToggled = useCallback(id => dataSetsToggle?.[id] || false, [dataSetsToggle]);\n\n  return {\n    ...{ dataSetsToggle },\n    onHide,\n    onRevert,\n    onToggle,\n    getIsToggled\n  };\n};\n\nconst context = {\n  ChartContext,\n  DEFAULT_CONTEXT,\n  useChartContext,\n  useToggleData\n};\n\nexport { context as default, context, ChartContext, DEFAULT_CONTEXT, useChartContext, useToggleData };\n"],"names":["DEFAULT_CONTEXT","chartContainerRef","helpers","chartSettings","chartTooltipRef","dataSetsToggle","ChartContext","React","useChartContext","useContext","useToggleData","useAliasChartContext","contextDataSetsToggle","setDataSetsToggle","onHide","useCallback","id","prevState","onRevert","onToggle","updatedToggle","getIsToggled","context"],"sourceRoot":""}