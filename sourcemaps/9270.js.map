{"version":3,"file":"js/9270.1669670579179.11b1bbfe0e6f5132d371.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardChart.deprecated.js","webpack:///./src/components/graphCard/graphCardChartLegend.js","webpack:///./src/components/graphCard/graphCardChartTooltip.js","webpack:///./src/components/productView/productViewContext.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { chart_color_green_300 as chartColorGreenDark } from '@patternfly/react-tokens';\nimport { useProductGraphConfig, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { graphCardHelpers } from './graphCardHelpers';\nimport { Chart } from '../chart/chart';\nimport GraphCardChartLegend from './graphCardChartLegend';\nimport GraphCardChartTooltip from './graphCardChartTooltip';\nimport { RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\n\n/**\n * A chart/graph.\n *\n * @param {object} props\n * @param {object} props.graphData\n * @param {Function} props.useProductGraphConfig\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardChart = ({\n  graphData,\n  useProductGraphConfig: useAliasProductGraphConfig,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { filters } = useAliasProductGraphConfig();\n  const query = useAliasProductGraphTallyQuery();\n  const { [RHSM_API_QUERY_TYPES.GRANULARITY]: granularity } = query;\n\n  const chartAreaProps = {\n    xAxisLabelIncrement: graphCardHelpers.getChartXAxisLabelIncrement(granularity),\n    xAxisTickFormat: ({ item, previousItem, tick }) =>\n      graphCardHelpers.xAxisTickFormat({\n        tick,\n        date: item.date,\n        previousDate: previousItem.date,\n        granularity\n      }),\n    yAxisTickFormat: graphCardHelpers.yAxisTickFormat\n  };\n\n  const filteredGraphData = data => {\n    const filtered = key => {\n      const tempFiltered = {\n        data: data[key],\n        id: key,\n        strokeWidth: 2,\n        isStacked: !/^threshold/.test(key),\n        isThreshold: /^threshold/.test(key)\n      };\n\n      if (/^threshold/.test(key)) {\n        tempFiltered.stroke = chartColorGreenDark.value;\n        tempFiltered.strokeDasharray = '4,3';\n        tempFiltered.strokeWidth = 3;\n      }\n\n      return tempFiltered;\n    };\n\n    if (filters?.length) {\n      return filters.map(value => Object.assign(filtered(value.id), value));\n    }\n\n    return Object.keys(data).map(key => filtered(key));\n  };\n\n  return (\n    <Chart\n      key={`chart_${JSON.stringify(query)}`}\n      {...chartAreaProps}\n      dataSets={filteredGraphData(graphData)}\n      chartLegend={({ chart, datum }) => <GraphCardChartLegend chart={chart} datum={datum} />}\n      chartTooltip={({ datum }) => <GraphCardChartTooltip datum={datum} />}\n    />\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, useProductGraphConfig: Function, graphData: object}}\n */\nGraphCardChart.propTypes = {\n  graphData: PropTypes.object,\n  useProductGraphConfig: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, useProductGraphConfig: Function, graphData: object}}\n */\nGraphCardChart.defaultProps = {\n  graphData: {},\n  useProductGraphConfig,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChart as default, GraphCardChart };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { useMount } from 'react-use';\nimport { useProduct } from '../productView/productViewContext';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { ChartIcon } from '../chart/chartIcon';\n\n/**\n * A custom chart legend.\n *\n * @fires onClick\n * @param {object} props\n * @param {object} props.chart\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useDispatch\n * @param {Function} props.useProduct\n * @param {Function} props.useSelectors\n * @returns {Node}\n */\nconst GraphCardChartLegend = ({\n  chart,\n  datum,\n  t,\n  useDispatch: useAliasDispatch,\n  useSelectors: useAliasSelectors,\n  useProduct: useAliasProduct\n}) => {\n  const { productLabel, viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n  const legendItems = useAliasSelectors(\n    datum.dataSets.map(\n      ({ id }) =>\n        ({ graph }) =>\n          graph.legend?.[`${viewId}-${id}`]\n    )\n  );\n\n  useMount(() => {\n    datum.dataSets.forEach(({ id }, index) => {\n      const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n\n      if (checkIsToggled) {\n        chart.hide(id);\n      }\n    });\n  });\n\n  /**\n   * Toggle legend item and chart.\n   *\n   * @event onClick\n   * @param {string} id\n   */\n  const onClick = id => {\n    const updatedToggle = chart.toggle(id);\n\n    dispatch({\n      type: reduxTypes.graph.SET_GRAPH_LEGEND,\n      id: `${viewId}-${id}`,\n      value: updatedToggle\n    });\n  };\n\n  return (\n    <React.Fragment>\n      {datum.dataSets.map(({ id, isThreshold, stroke: color, data = [] }, index) => {\n        const isDisabled =\n          !data.find(({ y, hasData }) => (y >= 0 && hasData === true) || (y >= 0 && isThreshold === true)) || false;\n\n        const labelContent = t([`curiosity-graph.label`, 'curiosity-graph.label_no'], {\n          product: productLabel,\n          context: id\n        });\n\n        const tooltipContent = t(\n          `curiosity-graph.legendTooltip`,\n          {\n            product: productLabel,\n            context: id\n          },\n          [<span style={{ whiteSpace: 'nowrap' }} />]\n        );\n\n        const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n\n        const button = (\n          <Button\n            onClick={() => onClick(id)}\n            onKeyPress={() => onClick(id)}\n            className=\"curiosity-usage-graph__legend-item\"\n            tabIndex={0}\n            key={`curiosity-button-${id}`}\n            variant=\"link\"\n            component=\"a\"\n            isDisabled={isDisabled}\n            icon={\n              ((isDisabled || checkIsToggled) && <ChartIcon symbol=\"eyeSlash\" />) || (\n                <ChartIcon\n                  symbol={(isThreshold && 'dash') || 'square'}\n                  style={{ visibility: (isDisabled && 'hidden') || (checkIsToggled && 'hidden') || 'visible' }}\n                  fill={color}\n                />\n              )\n            }\n          >\n            {labelContent}\n          </Button>\n        );\n\n        if (tooltipContent) {\n          return (\n            <Tooltip\n              key={`curiosity-tooltip-${id}`}\n              content={<p>{tooltipContent}</p>}\n              position={TooltipPosition.top}\n              enableFlip\n              distance={5}\n            >\n              {button}\n            </Tooltip>\n          );\n        }\n\n        return button;\n      })}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, t: Function, useDispatch: Function, useSelectors: Function, chart: object}}\n */\nGraphCardChartLegend.propTypes = {\n  chart: PropTypes.shape({\n    hide: PropTypes.func,\n    toggle: PropTypes.func,\n    isToggled: PropTypes.func\n  }),\n  datum: PropTypes.shape({\n    dataSets: PropTypes.arrayOf(\n      PropTypes.shape({\n        data: PropTypes.array,\n        id: PropTypes.string.isRequired,\n        isThreshold: PropTypes.bool,\n        stroke: PropTypes.string.isRequired\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useDispatch: PropTypes.func,\n  useSelectors: PropTypes.func,\n  useProduct: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: object, useProduct: Function, t: Function, useDispatch: Function, useSelectors: Function, chart: object}}\n */\nGraphCardChartLegend.defaultProps = {\n  chart: {\n    hide: helpers.noop,\n    toggle: helpers.noop,\n    isToggled: helpers.noop\n  },\n  datum: {\n    dataSets: []\n  },\n  t: translate,\n  useDispatch: storeHooks.reactRedux.useDispatch,\n  useSelectors: storeHooks.reactRedux.useSelectors,\n  useProduct\n};\n\nexport { GraphCardChartLegend as default, GraphCardChartLegend };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { getTooltipDate } from './graphCardHelpers';\nimport { translate } from '../i18n/i18n';\nimport { ChartTypeVariant } from '../chart/chart';\nimport { ChartIcon } from '../chart/chartIcon';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * A custom chart tooltip.\n *\n * @param {object} props\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useProduct\n * @returns {Node}\n */\nconst GraphCardChartTooltip = ({\n  datum,\n  t,\n  useProduct: useAliasProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productLabel } = useAliasProduct();\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n\n  let header = null;\n  const data = [];\n  const { itemsByKey = {} } = datum || {};\n\n  Object.keys(itemsByKey)\n    .reverse()\n    .forEach((key, index) => {\n      if (index === 0) {\n        header = getTooltipDate({\n          date: itemsByKey[key]?.data.date,\n          granularity\n        });\n      }\n\n      const tempDataFacet = {\n        color: itemsByKey[key]?.color\n      };\n\n      if (itemsByKey[key]?.chartType === ChartTypeVariant.threshold) {\n        let thresholdStringValue = itemsByKey[key]?.data.y ?? t('curiosity-graph.label', { context: 'noData' });\n\n        // ToDo: Remove hasInfinite check once deprecated graphCard components are removed\n        if (itemsByKey[key]?.data.hasInfinite || itemsByKey[key]?.data.hasInfiniteQuantity) {\n          thresholdStringValue = t('curiosity-graph.label', { context: ['threshold', 'infinite'] }, [\n            tempDataFacet.color && (\n              <ChartIcon\n                symbol=\"infinity\"\n                fill=\"#ffffff\"\n                title={t('curiosity-graph.label', { context: ['threshold', 'infinite'] })}\n              />\n            )\n          ]);\n        }\n\n        tempDataFacet.label = t('curiosity-graph.label', { context: ['threshold'] });\n        tempDataFacet.value = thresholdStringValue;\n      } else {\n        const dataFactsValue =\n          (itemsByKey[key]?.data.hasData === false && t('curiosity-graph.label', { context: 'noData' })) ||\n          itemsByKey[key]?.data.y ||\n          0;\n\n        tempDataFacet.label = t(`curiosity-graph.label`, { context: key, product: productLabel });\n        tempDataFacet.value = dataFactsValue;\n      }\n\n      tempDataFacet.chartType = itemsByKey[key]?.chartType;\n      data.push(tempDataFacet);\n    });\n\n  return (\n    <div className=\"curiosity-usage-graph__tooltip\">\n      <table summary={t('curiosity-graph.tooltipSummary')}>\n        {(data.length && header && (\n          <thead>\n            <tr>\n              <th colSpan={2}>{header}</th>\n            </tr>\n          </thead>\n        )) ||\n          null}\n        {(data.length && (\n          <tbody>\n            {data.map(dataFacet => {\n              const updatedDataFacetValue =\n                (typeof dataFacet.value === 'number' &&\n                  !Number.isInteger(dataFacet.value) &&\n                  helpers\n                    .numberDisplay(dataFacet.value)\n                    ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: true })\n                    ?.toUpperCase()) ||\n                dataFacet.value;\n\n              return (\n                <tr key={`tooltip-${dataFacet.label}`}>\n                  <th>\n                    {dataFacet.chartType === ChartTypeVariant.threshold && (\n                      <ChartIcon size=\"sm\" symbol=\"dash\" fill={dataFacet.color || 'transparent'} />\n                    )}\n                    {dataFacet.chartType !== ChartTypeVariant.threshold && (\n                      <ChartIcon size=\"sm\" fill={dataFacet.color || 'transparent'} />\n                    )}{' '}\n                    {dataFacet.label}\n                  </th>\n                  <td>{updatedDataFacetValue}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        )) ||\n          null}\n      </table>\n      {(!data.length && t('curiosity-graph.label', { context: ['noData', 'error'] })) || null}\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.propTypes = {\n  datum: PropTypes.shape({\n    itemsByKey: PropTypes.objectOf(\n      PropTypes.shape({\n        chartType: PropTypes.string,\n        color: PropTypes.string,\n        data: PropTypes.shape({\n          date: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),\n          hasData: PropTypes.bool,\n          hasInfinite: PropTypes.bool,\n          hasInfiniteQuantity: PropTypes.bool,\n          y: PropTypes.number\n        })\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.defaultProps = {\n  datum: {},\n  t: translate,\n  useProduct,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChartTooltip as default, GraphCardChartTooltip };\n","import React, { useCallback, useContext } from 'react';\nimport { reduxHelpers } from '../../redux/common';\nimport { storeHooks } from '../../redux/hooks';\nimport { rhsmConstants, RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Route context.\n *\n * @type {React.Context<{}>}\n */\nconst DEFAULT_CONTEXT = [{}, helpers.noop];\n\nconst ProductViewContext = React.createContext(DEFAULT_CONTEXT);\n\n/**\n * Get an updated product view context.\n *\n * @returns {React.Context<{}>}\n */\nconst useProductViewContext = () => useContext(ProductViewContext);\n\n/**\n * Return a query object from initial product config and Redux store.\n *\n * @param {string} queryType An identifier used to pull from both config and Redux, they should named the same.\n * @param {object} options\n * @param {string} options.overrideId A custom identifier, used for scenarios like the Guest inventory IDs\n * @param {object} options.useProductViewContext\n * @returns {object}\n */\nconst useProductQueryFactory = (\n  queryType,\n  { overrideId, useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}\n) => {\n  const { [queryType]: initialQuery, productId, viewId } = useAliasProductViewContext();\n  const queryOverride = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[overrideId], undefined);\n  const queryProduct = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[productId], undefined);\n  const queryView = storeHooks.reactRedux.useSelector(({ view }) => view?.[queryType]?.[viewId], undefined);\n\n  return {\n    ...initialQuery,\n    ...queryOverride,\n    ...queryProduct,\n    ...queryView\n  };\n};\n\n/**\n * Return a base product query\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductQuery = ({ queryType = 'query', options } = {}) => useProductQueryFactory(queryType, options);\n\n/**\n * Return the graph query based off of tally and capacity.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductGraphTallyQuery = ({\n  queryType = 'graphTallyQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_TALLY_CAPACITY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return the inventory query for guests. Use fallback/defaults for guests offset, limit.\n *\n * @param {object} options\n * @param {number} options.defaultLimit\n * @param {number} options.defaultOffset\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryGuestsQuery = ({\n  defaultLimit = 100,\n  defaultOffset = 0,\n  queryType = 'inventoryGuestsQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      [RHSM_API_QUERY_SET_TYPES.LIMIT]: defaultLimit,\n      [RHSM_API_QUERY_SET_TYPES.OFFSET]: defaultOffset,\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for hosts.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventoryHostsQuery = ({\n  queryType = 'inventoryHostsQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Return an inventory query for subscriptions.\n *\n * @param {object} options\n * @param {string} options.queryType\n * @param {object} options.schemaCheck\n * @param {object} options.options\n * @returns {object}\n */\nconst useProductInventorySubscriptionsQuery = ({\n  queryType = 'inventorySubscriptionsQuery',\n  schemaCheck = rhsmConstants.RHSM_API_QUERY_SET_INVENTORY_TYPES,\n  options\n} = {}) =>\n  reduxHelpers.setApiQuery(\n    {\n      ...useProductQuery(),\n      ...useProductQueryFactory(queryType, options)\n    },\n    schemaCheck\n  );\n\n/**\n * Get a filtered product configuration context.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductViewContext\n * @returns {object}\n */\nconst useProductContext = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductViewContext: useAliasProductViewContext = useProductViewContext\n} = {}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.UOM]: uomFilter } = useAliasProductQuery();\n  const {\n    initialGraphFilters = [],\n    initialInventoryFilters = [],\n    initialSubscriptionsInventoryFilters = [],\n    productContextFilterUom,\n    ...config\n  } = useAliasProductViewContext();\n\n  const applyUomFilter = useCallback(() => {\n    if (productContextFilterUom === true) {\n      const filterFilters = ({ id, metric, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(uomFilter, 'i').test(metric) || new RegExp(uomFilter, 'i').test(id);\n      };\n\n      return {\n        ...config,\n        initialGraphFilters: initialGraphFilters.filter(filterFilters),\n        initialInventoryFilters: initialInventoryFilters.filter(filterFilters),\n        initialSubscriptionsInventoryFilters: initialSubscriptionsInventoryFilters.filter(filterFilters)\n      };\n    }\n\n    return {\n      ...config,\n      initialGraphFilters,\n      initialInventoryFilters,\n      initialSubscriptionsInventoryFilters\n    };\n  }, [\n    config,\n    initialGraphFilters,\n    initialInventoryFilters,\n    initialSubscriptionsInventoryFilters,\n    productContextFilterUom,\n    uomFilter\n  ]);\n\n  return applyUomFilter();\n};\n\n/**\n * Return product identifiers.\n *\n * @param {object} options\n * @param {Function} options.useProductViewContext\n * @returns {{productLabel: string, viewId: string, productId: string, productGroup: string}}\n */\nconst useProduct = ({ useProductViewContext: useAliasProductViewContext = useProductViewContext } = {}) => {\n  const { productGroup, productId, productLabel, viewId } = useAliasProductViewContext();\n  return {\n    productGroup,\n    productId,\n    productLabel,\n    viewId\n  };\n};\n\n/**\n * Return graph configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductGraphConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialGraphFilters, initialGraphSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGraphFilters,\n    settings: initialGraphSettings\n  };\n};\n\n/**\n * Return guests inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryGuestsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { inventoryGuestsQuery = {}, initialGuestsFilters, initialGuestsSettings = {} } = useAliasProductContext();\n  return {\n    filters: initialGuestsFilters,\n    initialQuery: inventoryGuestsQuery,\n    settings: initialGuestsSettings\n  };\n};\n\n/**\n * Return hosts inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventoryHostsConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const { initialInventoryFilters, initialInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialInventoryFilters,\n    settings: initialInventorySettings\n  };\n};\n\n/**\n * Return subscriptions inventory configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductInventorySubscriptionsConfig = ({\n  useProductContext: useAliasProductContext = useProductContext\n} = {}) => {\n  const { initialSubscriptionsInventoryFilters, initialSubscriptionsInventorySettings = {} } = useAliasProductContext();\n  return {\n    filters: initialSubscriptionsInventoryFilters,\n    settings: initialSubscriptionsInventorySettings\n  };\n};\n\n/**\n * Return primary toolbar configuration.\n *\n * @param {object} options\n * @param {Function} options.useProductContext\n * @returns {{settings: object, filters: Array}}\n */\nconst useProductToolbarConfig = ({ useProductContext: useAliasProductContext = useProductContext } = {}) => {\n  const {\n    initialToolbarFilters,\n    initialToolbarSettings = {},\n    initialSecondaryToolbarFilters\n  } = useAliasProductContext();\n  return {\n    filters: initialToolbarFilters,\n    secondaryFilters: initialSecondaryToolbarFilters,\n    settings: initialToolbarSettings\n  };\n};\n\nconst context = {\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useQuery: useProductQuery,\n  useQueryFactory: useProductQueryFactory,\n  useGraphTallyQuery: useProductGraphTallyQuery,\n  useInventoryGuestsQuery: useProductInventoryGuestsQuery,\n  useInventoryHostsQuery: useProductInventoryHostsQuery,\n  useInventorySubscriptionsQuery: useProductInventorySubscriptionsQuery,\n  useProduct,\n  useGraphConfig: useProductGraphConfig,\n  useInventoryGuestsConfig: useProductInventoryGuestsConfig,\n  useInventoryHostsConfig: useProductInventoryHostsConfig,\n  useInventorySubscriptionsConfig: useProductInventorySubscriptionsConfig,\n  useToolbarConfig: useProductToolbarConfig\n};\n\nexport {\n  context as default,\n  context,\n  ProductViewContext,\n  DEFAULT_CONTEXT,\n  useProductContext,\n  useProductQuery,\n  useProductQueryFactory,\n  useProductGraphTallyQuery,\n  useProductInventoryGuestsQuery,\n  useProductInventoryHostsQuery,\n  useProductInventorySubscriptionsQuery,\n  useProduct,\n  useProductGraphConfig,\n  useProductInventoryGuestsConfig,\n  useProductInventoryHostsConfig,\n  useProductInventorySubscriptionsConfig,\n  useProductToolbarConfig\n};\n"],"names":["GraphCardChart","data","filtered","graphData","useAliasProductGraphConfig","useProductGraphConfig","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","filters","query","granularity","RHSM_API_QUERY_TYPES","chartAreaProps","xAxisLabelIncrement","graphCardHelpers","xAxisTickFormat","item","previousItem","tick","date","previousDate","yAxisTickFormat","Chart","key","JSON","stringify","dataSets","tempFiltered","id","strokeWidth","isStacked","test","isThreshold","stroke","chartColorGreenDark","strokeDasharray","length","map","value","Object","assign","keys","chartLegend","chart","datum","chartTooltip","defaultProps","GraphCardChartLegend","t","useAliasDispatch","useDispatch","useAliasSelectors","useSelectors","useAliasProduct","useProduct","productLabel","viewId","dispatch","legendItems","graph","legend","useMount","forEach","index","isToggled","hide","onClick","updatedToggle","toggle","type","reduxTypes","color","isDisabled","find","y","hasData","labelContent","product","context","tooltipContent","style","whiteSpace","checkIsToggled","button","Button","onKeyPress","className","tabIndex","variant","component","icon","ChartIcon","symbol","visibility","fill","Tooltip","content","position","TooltipPosition","enableFlip","distance","helpers","translate","storeHooks","GraphCardChartTooltip","RHSM_API_QUERY_SET_TYPES","header","itemsByKey","reverse","getTooltipDate","tempDataFacet","chartType","ChartTypeVariant","thresholdStringValue","hasInfinite","hasInfiniteQuantity","title","label","dataFactsValue","push","summary","colSpan","dataFacet","updatedDataFacetValue","Number","isInteger","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","size","DEFAULT_CONTEXT","ProductViewContext","React","useProductViewContext","useContext","useProductQueryFactory","queryType","overrideId","useAliasProductViewContext","initialQuery","productId","queryOverride","view","undefined","queryProduct","queryView","useProductQuery","options","schemaCheck","rhsmConstants","reduxHelpers","useProductInventoryGuestsQuery","defaultLimit","defaultOffset","useProductInventoryHostsQuery","useProductInventorySubscriptionsQuery","useProductContext","useAliasProductQuery","uomFilter","initialGraphFilters","initialInventoryFilters","initialSubscriptionsInventoryFilters","productContextFilterUom","config","applyUomFilter","useCallback","filterFilters","metric","isOptional","RegExp","filter","productGroup","useAliasProductContext","initialGraphSettings","settings","useProductInventoryGuestsConfig","inventoryGuestsQuery","initialGuestsFilters","initialGuestsSettings","useProductInventoryHostsConfig","initialInventorySettings","useProductInventorySubscriptionsConfig","initialSubscriptionsInventorySettings","useProductToolbarConfig","initialToolbarFilters","initialToolbarSettings","initialSecondaryToolbarFilters","secondaryFilters","useQuery","useQueryFactory","useGraphTallyQuery","useInventoryGuestsQuery","useInventoryHostsQuery","useInventorySubscriptionsQuery","useGraphConfig","useInventoryGuestsConfig","useInventoryHostsConfig","useInventorySubscriptionsConfig","useToolbarConfig"],"sourceRoot":""}