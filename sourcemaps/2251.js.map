{"version":3,"file":"js/2251.1668012320183.3055cd403684971ee96e.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCardChartLegend.js","webpack:///./src/components/graphCard/graphCardChartTooltip.js","webpack:///./src/components/productView/productViewOpenShiftContainer.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { useMount } from 'react-use';\nimport { useProduct } from '../productView/productViewContext';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { ChartIcon } from '../chart/chartIcon';\n\n/**\n * A custom chart legend.\n *\n * @fires onClick\n * @param {object} props\n * @param {object} props.chart\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useDispatch\n * @param {Function} props.useProduct\n * @param {Function} props.useSelectors\n * @returns {Node}\n */\nconst GraphCardChartLegend = ({\n  chart,\n  datum,\n  t,\n  useDispatch: useAliasDispatch,\n  useSelectors: useAliasSelectors,\n  useProduct: useAliasProduct\n}) => {\n  const { productLabel, viewId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n  const legendItems = useAliasSelectors(\n    datum.dataSets.map(\n      ({ id }) =>\n        ({ graph }) =>\n          graph.legend?.[`${viewId}-${id}`]\n    )\n  );\n\n  useMount(() => {\n    datum.dataSets.forEach(({ id }, index) => {\n      const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n\n      if (checkIsToggled) {\n        chart.hide(id);\n      }\n    });\n  });\n\n  /**\n   * Toggle legend item and chart.\n   *\n   * @event onClick\n   * @param {string} id\n   */\n  const onClick = id => {\n    const updatedToggle = chart.toggle(id);\n\n    dispatch({\n      type: reduxTypes.graph.SET_GRAPH_LEGEND,\n      id: `${viewId}-${id}`,\n      value: updatedToggle\n    });\n  };\n\n  return (\n    <React.Fragment>\n      {datum.dataSets.map(({ id, isThreshold, stroke: color, data = [] }, index) => {\n        const isDisabled =\n          !data.find(({ y, hasData }) => (y >= 0 && hasData === true) || (y >= 0 && isThreshold === true)) || false;\n\n        const labelContent = t(\n          [`curiosity-graph.label_${(isThreshold && 'threshold') || id}`, 'curiosity-graph.label_no'],\n          {\n            product: productLabel,\n            context: productLabel\n          }\n        );\n\n        const tooltipContent = t(\n          `curiosity-graph.legendTooltip${(isThreshold && '_threshold') || ''}_${id}`,\n          {\n            product: productLabel,\n            context: productLabel\n          },\n          [<span style={{ whiteSpace: 'nowrap' }} />]\n        );\n\n        const checkIsToggled = legendItems?.[index] || chart.isToggled(id);\n\n        const button = (\n          <Button\n            onClick={() => onClick(id)}\n            onKeyPress={() => onClick(id)}\n            className=\"curiosity-usage-graph__legend-item\"\n            tabIndex={0}\n            key={`curiosity-button-${id}`}\n            variant=\"link\"\n            component=\"a\"\n            isDisabled={isDisabled}\n            icon={\n              ((isDisabled || checkIsToggled) && <ChartIcon symbol=\"eyeSlash\" />) || (\n                <ChartIcon\n                  symbol={(isThreshold && 'dash') || 'square'}\n                  style={{ visibility: (isDisabled && 'hidden') || (checkIsToggled && 'hidden') || 'visible' }}\n                  fill={color}\n                />\n              )\n            }\n          >\n            {labelContent}\n          </Button>\n        );\n\n        if (tooltipContent) {\n          return (\n            <Tooltip\n              key={`curiosity-tooltip-${id}`}\n              content={<p>{tooltipContent}</p>}\n              position={TooltipPosition.top}\n              enableFlip\n              distance={5}\n            >\n              {button}\n            </Tooltip>\n          );\n        }\n\n        return button;\n      })}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, t: Function, useDispatch: Function, useSelectors: Function, chart: object}}\n */\nGraphCardChartLegend.propTypes = {\n  chart: PropTypes.shape({\n    hide: PropTypes.func,\n    toggle: PropTypes.func,\n    isToggled: PropTypes.func\n  }),\n  datum: PropTypes.shape({\n    dataSets: PropTypes.arrayOf(\n      PropTypes.shape({\n        stroke: PropTypes.string.isRequired,\n        id: PropTypes.string.isRequired,\n        isThreshold: PropTypes.bool\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useDispatch: PropTypes.func,\n  useSelectors: PropTypes.func,\n  useProduct: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: object, useProduct: Function, t: Function, useDispatch: Function, useSelectors: Function, chart: object}}\n */\nGraphCardChartLegend.defaultProps = {\n  chart: {\n    hide: helpers.noop,\n    toggle: helpers.noop,\n    isToggled: helpers.noop\n  },\n  datum: {\n    dataSets: []\n  },\n  t: translate,\n  useDispatch: storeHooks.reactRedux.useDispatch,\n  useSelectors: storeHooks.reactRedux.useSelectors,\n  useProduct\n};\n\nexport { GraphCardChartLegend as default, GraphCardChartLegend };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { getTooltipDate } from './graphCardHelpers';\nimport { translate } from '../i18n/i18n';\nimport { ChartTypeVariant } from '../chart/chart';\nimport { ChartIcon } from '../chart/chartIcon';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * A custom chart tooltip.\n *\n * @param {object} props\n * @param {object} props.datum\n * @param {Function} props.t\n * @param {Function} props.useProduct\n * @returns {Node}\n */\nconst GraphCardChartTooltip = ({\n  datum,\n  t,\n  useProduct: useAliasProduct,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { productId, productLabel } = useAliasProduct();\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n\n  let header = null;\n  const data = [];\n  const { itemsByKey = {} } = datum || {};\n\n  Object.keys(itemsByKey)\n    .reverse()\n    .forEach((key, index) => {\n      if (index === 0) {\n        header = getTooltipDate({\n          date: itemsByKey[key]?.data.date,\n          granularity\n        });\n      }\n\n      const tempDataFacet = {\n        color: itemsByKey[key]?.color\n      };\n\n      if (itemsByKey[key]?.chartType === ChartTypeVariant.threshold) {\n        let thresholdStringValue = itemsByKey[key]?.data.y ?? t('curiosity-graph.label_noData');\n\n        if (itemsByKey[key]?.data.hasInfinite) {\n          if (tempDataFacet.color) {\n            thresholdStringValue = (\n              <ChartIcon\n                symbol=\"infinity\"\n                fill=\"#ffffff\"\n                title={t('curiosity-graph.label_threshold', { context: 'infinite' })}\n              />\n            );\n          } else {\n            thresholdStringValue = t('curiosity-graph.label_threshold', { context: 'infinite' });\n          }\n        }\n\n        tempDataFacet.label = t('curiosity-graph.label_threshold');\n        tempDataFacet.value = thresholdStringValue;\n      } else {\n        const dataFactsValue =\n          (itemsByKey[key]?.data.hasData === false && t('curiosity-graph.label_noData')) ||\n          itemsByKey[key]?.data.y ||\n          0;\n\n        tempDataFacet.label = t(`curiosity-graph.label_${key}`, { context: productId, product: productLabel });\n        tempDataFacet.value = dataFactsValue;\n      }\n\n      tempDataFacet.chartType = itemsByKey[key]?.chartType;\n      data.push(tempDataFacet);\n    });\n\n  return (\n    <div className=\"curiosity-usage-graph__tooltip\">\n      <table summary={t('curiosity-graph.tooltipSummary')}>\n        {(data.length && header && (\n          <thead>\n            <tr>\n              <th colSpan={2}>{header}</th>\n            </tr>\n          </thead>\n        )) ||\n          null}\n        {(data.length && (\n          <tbody>\n            {data.map(dataFacet => {\n              const updatedDataFacetValue =\n                (typeof dataFacet.value === 'number' &&\n                  !Number.isInteger(dataFacet.value) &&\n                  helpers\n                    .numberDisplay(dataFacet.value)\n                    ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: true })\n                    ?.toUpperCase()) ||\n                dataFacet.value;\n\n              return (\n                <tr key={`tooltip-${dataFacet.label}`}>\n                  <th>\n                    {dataFacet.chartType === ChartTypeVariant.threshold && (\n                      <ChartIcon size=\"sm\" symbol=\"dash\" fill={dataFacet.color || 'transparent'} />\n                    )}\n                    {dataFacet.chartType !== ChartTypeVariant.threshold && (\n                      <ChartIcon size=\"sm\" fill={dataFacet.color || 'transparent'} />\n                    )}{' '}\n                    {dataFacet.label}\n                  </th>\n                  <td>{updatedDataFacetValue}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        )) ||\n          null}\n      </table>\n      {(!data.length && t('curiosity-graph.label_noData', { context: 'error' })) || null}\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.propTypes = {\n  datum: PropTypes.shape({\n    itemsByKey: PropTypes.objectOf(\n      PropTypes.shape({\n        chartType: PropTypes.string,\n        color: PropTypes.string,\n        data: PropTypes.shape({\n          date: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),\n          hasData: PropTypes.bool,\n          hasInfinite: PropTypes.bool,\n          y: PropTypes.number\n        })\n      })\n    )\n  }),\n  t: PropTypes.func,\n  useProduct: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{datum: object, useProduct: Function, useProductGraphTallyQuery: Function, t: Function}}\n */\nGraphCardChartTooltip.defaultProps = {\n  datum: {},\n  t: translate,\n  useProduct,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardChartTooltip as default, GraphCardChartTooltip };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport { useRouteDetail } from '../../hooks/useRouter';\nimport { ProductViewContext } from './productViewContext';\nimport { PageLayout, PageColumns, PageHeader, PageSection, PageToolbar } from '../pageLayout/pageLayout';\nimport { RHSM_API_PATH_ID_TYPES, RHSM_API_QUERY_TYPES } from '../../types/rhsmApiTypes';\nimport { apiQueries, storeHooks } from '../../redux';\nimport GraphCard from '../graphCard/graphCard.deprecated';\nimport { SelectPosition } from '../form/select';\nimport { ToolbarFieldUom } from '../toolbar/toolbarFieldUom';\nimport { ToolbarFieldGranularity } from '../toolbar/toolbarFieldGranularity';\nimport { ToolbarFieldRangedMonthly } from '../toolbar/toolbarFieldRangedMonthly';\nimport { Toolbar } from '../toolbar/toolbar';\nimport InventoryList from '../inventoryCard/inventoryList.deprecated';\nimport InventoryCardSubscriptions from '../inventoryCardSubscriptions/inventoryCardSubscriptions';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport { translate } from '../i18n/i18n';\nimport { helpers } from '../../common';\n\n/**\n * An OpenShift Container Platform encompassing view.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useRouteDetail\n * @returns {Node}\n */\nconst ProductViewOpenShiftContainer = ({ t, useRouteDetail: useAliasRouteDetail }) => {\n  const { productParameter: viewProductLabel, productConfig } = useAliasRouteDetail();\n  const uomValue = storeHooks.reactRedux.useSelector(\n    ({ view }) => view.query?.[productConfig[0].viewId]?.[RHSM_API_QUERY_TYPES.UOM],\n    null\n  );\n\n  const renderProduct = (config, updatedUomValue) => {\n    const {\n      productContextFilterUom,\n      query = {},\n      graphTallyQuery = {},\n      inventoryHostsQuery = {},\n      inventorySubscriptionsQuery = {},\n      initialGuestsFilters = [],\n      initialInventoryFilters = [],\n      initialInventorySettings = {},\n      initialSubscriptionsInventoryFilters,\n      productId,\n      viewId\n    } = config;\n\n    if (!productId || !viewId) {\n      return null;\n    }\n\n    const { graphTallyQuery: initialGraphTallyQuery, inventoryHostsQuery: initialInventoryHostsQuery } =\n      apiQueries.parseRhsmQuery(query, { graphTallyQuery, inventoryHostsQuery, inventorySubscriptionsQuery });\n\n    let inventoryFilters = initialInventoryFilters;\n    let uomFilter;\n\n    if (productContextFilterUom) {\n      uomFilter = updatedUomValue || query[RHSM_API_QUERY_TYPES.UOM];\n\n      const filter = ({ id, isOptional }) => {\n        if (!isOptional) {\n          return true;\n        }\n        return new RegExp(uomFilter, 'i').test(id);\n      };\n\n      inventoryFilters = initialInventoryFilters.filter(filter);\n    }\n\n    const graphCardTitle = (\n      <React.Fragment>\n        {t('curiosity-graph.cardHeading', { context: productId })}\n        <Tooltip\n          content={<p>{t('curiosity-graph.cardHeadingDescription', { context: productId })}</p>}\n          position={TooltipPosition.top}\n          enableFlip={false}\n          distance={5}\n          entryDelay={100}\n          exitDelay={0}\n        >\n          <sup className=\"curiosity-icon__info\">\n            <InfoCircleIcon />\n          </sup>\n        </Tooltip>\n      </React.Fragment>\n    );\n\n    return (\n      <ProductViewContext.Provider value={config} key={`product_${productId}_${uomFilter}`}>\n        <PageToolbar>\n          <Toolbar />\n        </PageToolbar>\n        <PageSection>\n          <GraphCard\n            key={`graph_${productId}`}\n            query={initialGraphTallyQuery}\n            productId={productId}\n            viewId={viewId}\n            cardTitle={graphCardTitle}\n          >\n            {productId === RHSM_API_PATH_ID_TYPES.OPENSHIFT && uomFilter && (\n              <ToolbarFieldUom position={SelectPosition.right} />\n            )}\n            {productId === RHSM_API_PATH_ID_TYPES.OPENSHIFT && (\n              <ToolbarFieldGranularity position={SelectPosition.right} />\n            )}\n            {productId === RHSM_API_PATH_ID_TYPES.OPENSHIFT_METRICS && (\n              <ToolbarFieldRangedMonthly position={SelectPosition.right} />\n            )}\n          </GraphCard>\n        </PageSection>\n        <PageSection>\n          <InventoryTabs key={`inventory_${productId}`} productId={productId}>\n            <InventoryTab\n              key={`inventory_hosts_${productId}`}\n              title={t('curiosity-inventory.tabHosts', { context: [productId] })}\n            >\n              <InventoryList\n                key={`inv_${productId}`}\n                filterGuestsData={initialGuestsFilters}\n                filterInventoryData={inventoryFilters}\n                productId={productId}\n                settings={initialInventorySettings}\n                query={initialInventoryHostsQuery}\n                viewId={viewId}\n              />\n            </InventoryTab>\n            {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && initialSubscriptionsInventoryFilters && (\n              <InventoryTab\n                key={`inventory_subs_${productId}`}\n                title={t('curiosity-inventory.tabSubscriptions', { context: productId })}\n              >\n                <InventoryCardSubscriptions />\n              </InventoryTab>\n            )}\n          </InventoryTabs>\n        </PageSection>\n      </ProductViewContext.Provider>\n    );\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader productLabel={viewProductLabel}>\n        {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: viewProductLabel })}\n      </PageHeader>\n      <PageColumns>{productConfig.map(config => renderProduct(config, uomValue))}</PageColumns>\n    </PageLayout>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: Function, useRouteDetail: Function}}\n */\nProductViewOpenShiftContainer.propTypes = {\n  t: PropTypes.func,\n  useRouteDetail: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: Function, useRouteDetail: Function}}\n */\nProductViewOpenShiftContainer.defaultProps = {\n  t: translate,\n  useRouteDetail\n};\n\nexport { ProductViewOpenShiftContainer as default, ProductViewOpenShiftContainer };\n"],"names":["GraphCardChartLegend","chart","datum","t","useAliasDispatch","useDispatch","useAliasSelectors","useSelectors","useAliasProduct","useProduct","productLabel","viewId","dispatch","legendItems","dataSets","map","id","graph","legend","useMount","forEach","index","isToggled","hide","onClick","updatedToggle","toggle","type","reduxTypes","value","isThreshold","color","stroke","data","isDisabled","find","y","hasData","labelContent","product","context","tooltipContent","style","whiteSpace","checkIsToggled","button","Button","onKeyPress","className","tabIndex","key","variant","component","icon","ChartIcon","symbol","visibility","fill","Tooltip","content","position","TooltipPosition","enableFlip","distance","defaultProps","helpers","translate","storeHooks","GraphCardChartTooltip","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","productId","granularity","RHSM_API_QUERY_SET_TYPES","header","itemsByKey","Object","keys","reverse","getTooltipDate","date","tempDataFacet","chartType","ChartTypeVariant","thresholdStringValue","hasInfinite","title","label","dataFactsValue","push","summary","length","colSpan","dataFacet","updatedDataFacetValue","Number","isInteger","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","size","ProductViewOpenShiftContainer","useAliasRouteDetail","useRouteDetail","viewProductLabel","productParameter","productConfig","uomValue","view","query","RHSM_API_QUERY_TYPES","PageLayout","PageHeader","appName","PageColumns","config","updatedUomValue","productContextFilterUom","graphTallyQuery","inventoryHostsQuery","inventorySubscriptionsQuery","initialGuestsFilters","initialInventoryFilters","initialInventorySettings","initialSubscriptionsInventoryFilters","uomFilter","apiQueries","initialGraphTallyQuery","initialInventoryHostsQuery","inventoryFilters","filter","isOptional","RegExp","test","graphCardTitle","entryDelay","exitDelay","ProductViewContext","PageToolbar","Toolbar","PageSection","cardTitle","RHSM_API_PATH_ID_TYPES","ToolbarFieldUom","SelectPosition","ToolbarFieldGranularity","ToolbarFieldRangedMonthly","InventoryTab","filterGuestsData","filterInventoryData","settings","renderProduct"],"sourceRoot":""}