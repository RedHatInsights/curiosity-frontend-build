{"version":3,"file":"js/7614.590f93c8d65e0496a034.js","mappings":"+TA8BMA,GCYJC,EAAAA,YACAC,EAAAA,UACAC,EAAAA,cDdyB,SAAC,GAAqC,IAd3B,EAC5BC,EAASC,EAaWC,EAAmC,EAAnCA,0BAA2BC,EAAQ,EAARA,EACjDC,ECdW,WAGR,6DAAP,GAAO,IAFTC,WAAYC,OAEH,MAFqBC,EAAAA,WAErB,MADTC,YAAaC,OACJ,MADuBD,EAAAA,GACvB,EACHJ,EAAUE,IACVI,EAAWD,IAEjB,yBACKL,GADL,IAEEO,KAAM,SAACC,EAAcC,GACnB,IAAMC,EAAoC,iBAAjBF,GAA6BA,IAAiBA,MAAAA,OAAtD,EAAsDA,EAAcG,UADjD,EAEQC,EAAc,cAAdA,eAA6B,CAAEF,SAAAA,EAAUG,GAAIH,IAAjFI,EAF4B,EAE5BA,iBAAkBD,EAFU,EAEVA,GAAIE,EAFM,EAENA,UAFM,EAGXC,OAAOC,SAAxBC,EAH4B,EAG5BA,KAAMC,EAHsB,EAGtBA,OAEd,OAAIL,EACKR,EAASc,EAAAA,GAAAA,SAAAA,UAAgCP,IAG3Cb,EAAQO,KAAKQ,GAAcL,GAAY,GAAJ,OAAOA,GAAP,OAAkBS,GAAlB,OAA2BD,IAAWV,EAAcC,MDJlFR,GACVoB,GAfEzB,GAD4B,EACJgB,EAAAA,cAAAA,wBAAxBhB,QAASC,EADmB,EACnBA,WACTD,EAAQ0B,QAAU1B,GAAYC,EAAW0B,QAAO,mBAAuC,IAAvC,EAAGC,kBAgB3DC,EAAAA,EAAAA,IAAS,WACHJ,EAAkBC,QAAUxB,GAC9BE,EAAQO,KAAKc,EAAkB,GAAGK,SAWtC,IAAMC,EAAa,SAAAd,GAAE,OAAIb,EAAQO,KAAKM,IAEtC,OACE,kBAAC,EAAAe,WAAD,CAAYC,UAAU,0BACpB,kBAAC,EAAAC,WAAD,CAAYC,aAAa,UAAUC,aAAW,GAC3CjC,EAAE,uBAAwB,CAAEkC,QAASC,EAAAA,GAAAA,mBAExC,kBAAC,EAAAC,YAAD,CAAaC,UAAQ,GACnB,kBAAC,EAAAC,QAAD,CAASC,WAAS,GACfjB,EAAkBkB,KAAI,SAAAC,GAAO,eAC5B,kBAAC,EAAAC,KAAD,CAAMC,IAAG,0BAAqBF,EAAQ3B,IAAM8B,aAAW,EAACC,QAAS,kBAAMjB,EAAWa,EAAQ3B,MACxF,kBAAC,EAAAgC,UAAD,KACE,kBAAC,EAAAC,MAAD,CAAOC,aAAa,KAAKC,KAAK,MAC3BjD,EAAE,uBAAwB,CACzBkC,QAASC,EAAAA,GAAAA,gBACTe,QACGC,MAAMC,QAAQX,EAAQY,iBAAtB,UAAwCZ,EAAQY,qBAAhD,aAAwC,EAAwB,KAAOZ,EAAQY,kBAIxF,kBAAC,EAAAC,SAAD,CAAUxB,UAAU,4CACjB9B,EAAE,6BAA8B,CAC/BkC,QAASC,EAAAA,GAAAA,gBACTe,QACGC,MAAMC,QAAQX,EAAQ1B,oBAAtB,UAA2C0B,EAAQ1B,wBAAnD,aAA2C,EAA2B,KACvE0B,EAAQ1B,oBAGd,kBAAC,EAAAwC,WAAD,KACE,kBAAC,EAAAC,OAAD,CACEC,QAAQ,OACRC,UAAQ,EACRb,QAAS,kBAAMjB,EAAWa,EAAQ3B,KAClC6C,KAAM,kBAAC,EAAAC,eAAD,MACNC,aAAa,SALf,kBAiChBpE,EAAmBqE,aAAe,CAChC/D,0BAA2B,EAC3BC,EAAG+D,EAAAA","sources":["webpack:///./src/components/productView/productViewMissing.js","webpack:///./src/hooks/useRouter.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Card, CardBody, CardFooter, CardTitle, Gallery, Title, PageSection } from '@patternfly/react-core';\nimport { ArrowRightIcon } from '@patternfly/react-icons';\nimport { useMount } from 'react-use';\nimport { PageLayout, PageHeader } from '../pageLayout/pageLayout';\nimport { routerHelpers } from '../router';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { useHistory } from '../../hooks/useRouter';\n\n/**\n * Return a list of available products.\n *\n * @returns {Array}\n */\nconst filterAvailableProducts = () => {\n  const { configs, allConfigs } = routerHelpers.getRouteConfigByPath();\n  return (configs.length && configs) || allConfigs.filter(({ isSearchable }) => isSearchable === true);\n};\n\n/**\n * Render a missing product view.\n *\n * @fires onNavigate\n * @param {object} props\n * @param {number} props.availableProductsRedirect\n * @param {Function} props.t\n * @returns {Node}\n */\nconst ProductViewMissing = ({ availableProductsRedirect, t }) => {\n  const history = useHistory();\n  const availableProducts = filterAvailableProducts();\n\n  useMount(() => {\n    if (availableProducts.length <= availableProductsRedirect) {\n      history.push(availableProducts[0].path);\n    }\n  });\n\n  /**\n   * On click, update history.\n   *\n   * @event onNavigate\n   * @param {string} id\n   * @returns {void}\n   */\n  const onNavigate = id => history.push(id);\n\n  return (\n    <PageLayout className=\"curiosity-missing-view\">\n      <PageHeader productLabel=\"missing\" includeTour>\n        {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME })}\n      </PageHeader>\n      <PageSection isFilled>\n        <Gallery hasGutter>\n          {availableProducts.map(product => (\n            <Card key={`missingViewCard-${product.id}`} isHoverable onClick={() => onNavigate(product.id)}>\n              <CardTitle>\n                <Title headingLevel=\"h2\" size=\"lg\">\n                  {t('curiosity-view.title', {\n                    appName: helpers.UI_DISPLAY_NAME,\n                    context:\n                      (Array.isArray(product.pathParameter) && product.pathParameter?.[0]) || product.pathParameter\n                  })}\n                </Title>\n              </CardTitle>\n              <CardBody className=\"curiosity-missing-view__card-description\">\n                {t('curiosity-view.description', {\n                  appName: helpers.UI_DISPLAY_NAME,\n                  context:\n                    (Array.isArray(product.productParameter) && product.productParameter?.[0]) ||\n                    product.productParameter\n                })}\n              </CardBody>\n              <CardFooter>\n                <Button\n                  variant=\"link\"\n                  isInline\n                  onClick={() => onNavigate(product.id)}\n                  icon={<ArrowRightIcon />}\n                  iconPosition=\"right\"\n                >\n                  Open\n                </Button>\n              </CardFooter>\n            </Card>\n          ))}\n        </Gallery>\n      </PageSection>\n    </PageLayout>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{availableProductsRedirect: number, t: Function}}\n */\nProductViewMissing.propTypes = {\n  availableProductsRedirect: PropTypes.number,\n  t: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{availableProductsRedirect: number, t: translate}}\n */\nProductViewMissing.defaultProps = {\n  availableProductsRedirect: 3,\n  t: translate\n};\n\nexport { ProductViewMissing as default, ProductViewMissing };\n","import { useHistory as useHistoryRRD, useLocation, useParams, useRouteMatch } from 'react-router-dom';\nimport { routerHelpers } from '../components/router/routerHelpers';\nimport { reduxActions, useDispatch } from '../redux';\n\n/**\n * ToDo: reevaluate this alternative pattern of passing library hooks as options\n * We did this as a test to see if its more convenient for unit testing instead of\n * having to spy or mock entire resources.\n */\n/**\n * Pass useHistory methods. Proxy useHistory push with Platform specific navigation update.\n *\n * @param {object} hooks\n * @param {Function} hooks.useHistory\n * @param {Function} hooks.useDispatch\n * @returns {object<history>}\n */\nconst useHistory = ({\n  useHistory: useAliasHistory = useHistoryRRD,\n  useDispatch: useAliasDispatch = useDispatch\n} = {}) => {\n  const history = useAliasHistory();\n  const dispatch = useAliasDispatch();\n\n  return {\n    ...history,\n    push: (pathLocation, historyState) => {\n      const pathName = (typeof pathLocation === 'string' && pathLocation) || pathLocation?.pathname;\n      const { productParameter, id, routeHref } = routerHelpers.getRouteConfig({ pathName, id: pathName });\n      const { hash, search } = window.location;\n\n      if (productParameter) {\n        return dispatch(reduxActions.platform.setAppNav(id));\n      }\n\n      return history.push(routeHref || (pathName && `${pathName}${search}${hash}`) || pathLocation, historyState);\n    }\n  };\n};\n\nconst routerHooks = {\n  useHistory,\n  useLocation,\n  useParams,\n  useRouteMatch\n};\n\nexport { routerHooks as default, routerHooks, useHistory, useLocation, useParams, useRouteMatch };\n"],"names":["ProductViewMissing","useLocation","useParams","useRouteMatch","configs","allConfigs","availableProductsRedirect","t","history","useHistory","useAliasHistory","useHistoryRRD","useDispatch","useAliasDispatch","dispatch","push","pathLocation","historyState","pathName","pathname","routerHelpers","id","productParameter","routeHref","window","location","hash","search","reduxActions","availableProducts","length","filter","isSearchable","useMount","path","onNavigate","PageLayout","className","PageHeader","productLabel","includeTour","appName","helpers","PageSection","isFilled","Gallery","hasGutter","map","product","Card","key","isHoverable","onClick","CardTitle","Title","headingLevel","size","context","Array","isArray","pathParameter","CardBody","CardFooter","Button","variant","isInline","icon","ArrowRightIcon","iconPosition","defaultProps","translate"],"sourceRoot":""}