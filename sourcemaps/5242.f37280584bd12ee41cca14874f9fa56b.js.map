{"version":3,"file":"js/5242.1674506015439.2c428282f5fdb1bbee5c.js","mappings":"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","sources":["webpack:///./src/components/inventoryCard/inventoryCardHelpers.js","webpack:///./src/components/inventoryGuests/inventoryGuests.js","webpack:///./src/components/inventoryGuests/inventoryGuestsContext.js","webpack:///./node_modules/fast-deep-equal/react.js","webpack:///./node_modules/react-use/esm/misc/isDeepEqual.js","webpack:///./node_modules/react-use/esm/useDeepCompareEffect.js"],"sourcesContent":["import React from 'react';\nimport { cellWidth as PfCellWidth, SortByDirection, wrappable } from '@patternfly/react-table';\nimport _camelCase from 'lodash/camelCase';\nimport _isPlainObject from 'lodash/isPlainObject';\nimport { Tooltip } from '../tooltip/tooltip';\nimport { translate } from '../i18n/i18n';\nimport {\n  RHSM_API_QUERY_INVENTORY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * ToDo: review setting up a transformed cell cache for already transformed cells.\n * - review using a simple state and key memoized component\n * - review using lru cache in a inventoryCardContext custom hook\n */\n\n/**\n * Apply product inventory config properties consistently.\n *\n * @param {Function|string|number} prop\n * @param {object} options\n * @param {*[]|*} options.params\n * @returns {React.ReactNode}\n */\nconst applyConfigProperty = (prop, { params = [] } = {}) => {\n  let updatedProp = prop;\n\n  if (typeof prop === 'function') {\n    updatedProp = prop(...((Array.isArray(params) && params) || [params]));\n  }\n\n  if (typeof updatedProp === 'string' || typeof updatedProp === 'number' || React.isValidElement(updatedProp)) {\n    return updatedProp;\n  }\n\n  return undefined;\n};\n\n/**\n * Generate header and row cell configuration from filters.\n *\n * @param {object} params\n * @param {Array<{id: string, isStandalone: boolean, cell:React.ReactNode|{ title: string }, cellWidth: number,\n *     header:React.ReactNode|{ title: string }, onSort: Function, showEmptyCell: boolean, sortId: string,\n *     sortActive: boolean, sortDirection: string, transforms: Array}>} params.filters\n * @param {object} params.cellData\n * @param {object} params.meta\n * @param {string} params.productId\n * @param {object} params.session\n * @returns {{bodyCells: { title: React.ReactNode }[], headerCells: { title: React.ReactNode }[]}}\n */\nconst applyHeaderRowCellFilters = ({ filters = [], cellData = {}, meta = {}, productId, session = {} } = {}) => {\n  const headerCells = [];\n  const bodyCells = [];\n\n  filters.forEach(\n    ({\n      isStandalone,\n      id,\n      cell,\n      cellWidth,\n      header,\n      onSort,\n      showEmptyCell = true,\n      sortId,\n      sortActive,\n      sortDirection,\n      transforms\n    }) => {\n      const headerCellUpdated = {\n        title: translate('curiosity-inventory.header', { context: [id, productId] }),\n        transforms: []\n      };\n      const bodyCellUpdated = { title: '' };\n\n      // set filtered base header and body cells, or if filter doesn't exist skip\n      if (cellData[id]) {\n        headerCellUpdated.title = cellData[id]?.title ?? id;\n        bodyCellUpdated.title = cellData[id]?.value ?? '';\n      } else if (isStandalone === true) {\n        headerCellUpdated.title = '';\n        bodyCellUpdated.title = '';\n      } else {\n        if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n          console.warn(`Warning: Filter \"${id}\" not found in \"table row\" response data.`, cellData);\n        }\n        if (showEmptyCell === false) {\n          return;\n        }\n      }\n\n      // set header cell title\n      if (header) {\n        const updatedHeaderCellTitle = applyConfigProperty(header, {\n          params: [{ ...cellData }, { ...session }, { ...meta }]\n        });\n        if (updatedHeaderCellTitle) {\n          headerCellUpdated.title = updatedHeaderCellTitle;\n        } else if (_isPlainObject(header)) {\n          Object.assign(headerCellUpdated, { ...header });\n        }\n\n        // set header cell tooltip\n        if (header.tooltip && headerCellUpdated.title) {\n          const updatedHeaderCellTooltip = applyConfigProperty(header.tooltip, {\n            params: [{ ...cellData }, { ...session }, { ...meta }]\n          });\n          if (updatedHeaderCellTooltip) {\n            headerCellUpdated.title = <Tooltip content={updatedHeaderCellTooltip}>{headerCellUpdated.title}</Tooltip>;\n          }\n\n          delete headerCellUpdated.tooltip;\n        }\n      }\n\n      // set header cell transforms\n      if (Array.isArray(headerCellUpdated.transforms)) {\n        if (Array.isArray(transforms)) {\n          headerCellUpdated.transforms = headerCellUpdated.transforms.concat([...transforms]);\n        }\n\n        if (typeof cellWidth === 'number') {\n          headerCellUpdated.transforms.push(PfCellWidth(cellWidth));\n        }\n      }\n\n      // set header cell onSort\n      if (typeof onSort === 'function') {\n        headerCellUpdated.onSort = obj => onSort({ ...cellData }, { ...obj, id: sortId || id });\n        headerCellUpdated.sortActive = sortActive;\n        headerCellUpdated.sortDirection = sortDirection;\n      }\n\n      // set body cell title\n      if (cell) {\n        const updatedBodyCellTitle = applyConfigProperty(cell, {\n          params: [{ ...cellData }, { ...session }, { ...meta }]\n        });\n        if (updatedBodyCellTitle) {\n          bodyCellUpdated.title = updatedBodyCellTitle;\n        } else if (_isPlainObject(cell)) {\n          Object.assign(bodyCellUpdated, { ...cell });\n        }\n\n        // set body cell tooltip\n        if (cell.tooltip && bodyCellUpdated.title) {\n          const updatedBodyCellTooltip = applyConfigProperty(cell.tooltip, {\n            params: [{ ...cellData }, { ...session }, { ...meta }]\n          });\n          if (updatedBodyCellTooltip) {\n            bodyCellUpdated.title = <Tooltip content={updatedBodyCellTooltip}>{bodyCellUpdated.title}</Tooltip>;\n          }\n\n          delete bodyCellUpdated.tooltip;\n        }\n      }\n\n      headerCells.push(headerCellUpdated);\n      bodyCells.push(bodyCellUpdated);\n    }\n  );\n\n  return {\n    headerCells,\n    bodyCells\n  };\n};\n\n/**\n * Shallow clone filter, and apply a column sort filter.\n *\n * @param {object} params\n * @param {{onSort: Function, sortActive: boolean, sortDirection: string, isSortDefault: boolean,\n *     sortDefaultInitialDirection: string}} params.filter\n * @param {Function} params.onSort\n * @param {object} params.query\n * @returns {{}}\n */\nconst applySortFilters = ({ filter = {}, onSort, query = {} } = {}) => {\n  const { id, sortId } = filter;\n  const updatedId = sortId || id;\n  const updatedFilter = { ...filter };\n  const hasSort = updatedFilter.onSort || onSort;\n\n  if (!updatedFilter.onSort && onSort) {\n    updatedFilter.onSort = onSort;\n  }\n\n  // set fallback for the active sorted column based on query\n  if (\n    hasSort &&\n    typeof updatedFilter.sortActive !== 'boolean' &&\n    query?.[RHSM_API_QUERY_SET_TYPES.SORT] &&\n    (query?.[RHSM_API_QUERY_SET_TYPES.SORT] === updatedId ||\n      _camelCase(query?.[RHSM_API_QUERY_SET_TYPES.SORT]) === updatedId)\n  ) {\n    updatedFilter.sortActive = true;\n  }\n\n  // set sort direction\n  if (hasSort && !updatedFilter.sortDirection && query?.[RHSM_API_QUERY_SET_TYPES.DIRECTION]) {\n    switch (query?.[RHSM_API_QUERY_SET_TYPES.DIRECTION]) {\n      case SORT_DIRECTION_TYPES.DESCENDING:\n        updatedFilter.sortDirection = SortByDirection.desc;\n        break;\n      default:\n        updatedFilter.sortDirection = SortByDirection.asc;\n        break;\n    }\n  }\n\n  if (\n    hasSort &&\n    !updatedFilter.sortActive &&\n    !query?.[RHSM_API_QUERY_SET_TYPES.SORT] &&\n    updatedFilter.isSortDefault === true\n  ) {\n    updatedFilter.sortActive = true;\n\n    if (updatedFilter.sortDefaultInitialDirection) {\n      updatedFilter.sortDirection = updatedFilter.sortDefaultInitialDirection;\n    }\n  }\n\n  return updatedFilter;\n};\n\n/**\n * Shallow clone and apply a consistent PF \"wrappable\" transformation config allowing column content to wrap.\n *\n * @param {object} params\n * @param {object} params.filter\n * @returns {{}}\n */\nconst applyWrappableFilters = ({ filter = {} } = {}) => {\n  const updatedFilter = { ...filter };\n\n  if (Array.isArray(updatedFilter.transforms)) {\n    updatedFilter.transforms.push(wrappable);\n  } else {\n    updatedFilter.transforms = [wrappable];\n  }\n\n  return updatedFilter;\n};\n\n/**\n * Shallow clone and apply, sequence specific, additional properties to filters.\n *\n * @param {object} params\n * @param {Array<{id: string, cell:*, cellWidth: number, header:*, onSort: Function,\n *     showEmptyCell: boolean, sortId: string, sortActive: boolean,\n *     sortDirection: string, transforms: Array, isSortDefault: boolean,\n *     sortDefaultInitialDirection: string}>} params.filters\n * @param {Function} params.onSort\n * @param {object} params.query\n * @returns {*[]}\n */\nconst parseInventoryFilters = ({ filters = [], onSort, query = {} } = {}) =>\n  [...filters].map(filter => {\n    const updatedFilter = { ...filter };\n\n    if (updatedFilter.isSortable) {\n      Object.assign(updatedFilter, applySortFilters({ filter: updatedFilter, onSort, query }));\n    }\n\n    if (updatedFilter.isWrappable) {\n      Object.assign(updatedFilter, applyWrappableFilters({ filter: updatedFilter }));\n    }\n\n    return updatedFilter;\n  });\n\n/**\n * Parse and return formatted/filtered table cells, and apply table filters.\n *\n * @param {object} params\n * @param {Array<{id: string, cell:React.ReactNode|{ title: string }, cellWidth: number,\n *     header:React.ReactNode|{ title: string }, onSort: Function, showEmptyCell: boolean,\n *     sortId: string, sortActive: boolean, sortDirection: string,\n *     transforms: Array}>} params.filters\n * @param {object} params.cellData\n * @param {object} params.meta\n * @param {string} params.productId\n * @param {object} params.session\n * @returns {{columnHeaders: { title: React.ReactNode }[], cells: { title: React.ReactNode }[], data: {}}}\n */\nconst parseRowCellsListData = ({ filters = [], cellData = {}, meta = {}, productId, session = {} } = {}) => {\n  const updatedColumnHeaders = [];\n  const updatedCells = [];\n  const allCells = {};\n\n  // Apply basic translation and value\n  Object.entries(cellData).forEach(([key, value = '']) => {\n    allCells[key] = {\n      title: translate('curiosity-inventory.header', { context: [key, productId] }),\n      value\n    };\n\n    updatedColumnHeaders.push(allCells[key].title);\n    updatedCells.push(value || '...');\n  });\n\n  // Apply filters to header and cell values\n  if (filters?.length && Object.keys(allCells).length) {\n    updatedColumnHeaders.length = 0;\n    updatedCells.length = 0;\n\n    const { headerCells = [], bodyCells = [] } = applyHeaderRowCellFilters({\n      filters,\n      cellData: allCells,\n      meta,\n      productId,\n      session\n    });\n\n    updatedColumnHeaders.push(...headerCells);\n    updatedCells.push(...bodyCells);\n  }\n\n  return {\n    columnHeaders: updatedColumnHeaders,\n    cells: updatedCells,\n    data: { ...allCells }\n  };\n};\n\nconst inventoryCardHelpers = {\n  applyConfigProperty,\n  applyHeaderRowCellFilters,\n  applySortFilters,\n  applyWrappableFilters,\n  parseInventoryFilters,\n  parseRowCellsListData\n};\n\nexport {\n  inventoryCardHelpers as default,\n  inventoryCardHelpers,\n  applyConfigProperty,\n  applyHeaderRowCellFilters,\n  applySortFilters,\n  applyWrappableFilters,\n  parseInventoryFilters,\n  parseRowCellsListData\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TableVariant } from '@patternfly/react-table';\nimport { useSession } from '../authentication/authenticationContext';\nimport { useProductInventoryGuestsConfig, useProductInventoryGuestsQuery } from '../productView/productViewContext';\nimport { Loader } from '../loader/loader';\nimport { inventoryCardHelpers } from '../inventoryCard/inventoryCardHelpers';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { Table } from '../table/table';\nimport { useGetGuestsInventory, useOnScroll } from './inventoryGuestsContext';\n\n/**\n * A system inventory guests component.\n *\n * @param {object} props\n * @param {number} props.defaultPerPage\n * @param {string} props.id\n * @param {number} props.numberOfGuests\n * @param {Function} props.useGetGuestsInventory\n * @param {Function} props.useOnScroll\n * @param {Function} props.useProductInventoryGuestsQuery\n * @param {Function} props.useProductInventoryGuestsConfig\n * @param {Function} props.useSession\n * @fires onScroll\n * @returns {Node}\n */\nconst InventoryGuests = ({\n  defaultPerPage,\n  id,\n  numberOfGuests,\n  useGetGuestsInventory: useAliasGetGuestsInventory,\n  useOnScroll: useAliasOnScroll,\n  useProductInventoryGuestsQuery: useAliasProductInventoryGuestsQuery,\n  useProductInventoryGuestsConfig: useAliasProductInventoryGuestsConfig,\n  useSession: useAliasSession\n}) => {\n  const sessionData = useAliasSession();\n  const { filters: filterGuestsData } = useAliasProductInventoryGuestsConfig();\n  const { pending, data: listData = [] } = useAliasGetGuestsInventory(id);\n  const onScroll = useAliasOnScroll(id);\n  const query = useAliasProductInventoryGuestsQuery({ options: { overrideId: id } });\n  const { [RHSM_API_QUERY_SET_TYPES.OFFSET]: currentPage } = query;\n\n  /**\n   * Render a scroll table loader.\n   *\n   * @param {boolean} isFirstPage\n   * @returns {Node}\n   */\n  const renderLoader = isFirstPage => {\n    if (pending) {\n      let updatedRowCount = 0;\n\n      if (isFirstPage) {\n        if (numberOfGuests < defaultPerPage) {\n          updatedRowCount = numberOfGuests;\n        } else {\n          updatedRowCount = defaultPerPage;\n        }\n      }\n\n      const scrollLoader = (\n        <Loader\n          variant=\"table\"\n          tableProps={{\n            borders: false,\n            className: (isFirstPage && 'curiosity-guests-list') || undefined,\n            colCount: filterGuestsData?.length || (listData?.[0] && Object.keys(listData[0]).length) || 1,\n            colWidth: (filterGuestsData?.length && filterGuestsData.map(({ cellWidth }) => cellWidth)) || [],\n            rowCount: updatedRowCount,\n            variant: TableVariant.compact\n          }}\n        />\n      );\n\n      return <div className=\"curiosity-table-scroll-loader__custom\">{scrollLoader}</div>;\n    }\n\n    return null;\n  };\n\n  let updatedColumnHeaders = [];\n  const updatedRows = listData.map(({ ...cellData }) => {\n    const { columnHeaders, cells } = inventoryCardHelpers.parseRowCellsListData({\n      filters: filterGuestsData,\n      cellData,\n      session: sessionData\n    });\n\n    updatedColumnHeaders = columnHeaders;\n\n    return {\n      cells\n    };\n  });\n\n  // ToDo: Review having the height be a calc value\n  // Include the table header\n  let updatedHeight = (numberOfGuests + 1) * 42;\n  updatedHeight = (updatedHeight < 275 && updatedHeight) || 275;\n\n  return (\n    <div className=\"fadein\">\n      <div className=\"curiosity-table-scroll\" style={{ height: `${updatedHeight}px` }}>\n        <div\n          className={`curiosity-table-scroll-list${(updatedHeight < 275 && '__no-scroll') || ''}`}\n          onScroll={onScroll}\n        >\n          {renderLoader(currentPage === 0)}\n          {(updatedRows.length && (\n            <Table\n              borders={false}\n              variant={TableVariant.compact}\n              className=\"curiosity-guests-list\"\n              columnHeaders={updatedColumnHeaders}\n              rows={updatedRows}\n            />\n          )) ||\n            null}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductInventoryGuestsConfig: Function, useSession: Function, numberOfGuests: number, id: string,\n *     useOnScroll: Function, useGetGuestsInventory: Function, useProductInventoryGuestsQuery: Function,\n *     defaultPerPage: number}}\n */\nInventoryGuests.propTypes = {\n  defaultPerPage: PropTypes.number,\n  id: PropTypes.string.isRequired,\n  numberOfGuests: PropTypes.number.isRequired,\n  useGetGuestsInventory: PropTypes.func,\n  useOnScroll: PropTypes.func,\n  useProductInventoryGuestsConfig: PropTypes.func,\n  useProductInventoryGuestsQuery: PropTypes.func,\n  useSession: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductInventoryGuestsConfig: Function, useSession: Function, useOnScroll: Function,\n *     useGetGuestsInventory: Function, useProductInventoryGuestsQuery: Function, defaultPerPage: number}}\n */\nInventoryGuests.defaultProps = {\n  defaultPerPage: 5,\n  useGetGuestsInventory,\n  useOnScroll,\n  useProductInventoryGuestsConfig,\n  useProductInventoryGuestsQuery,\n  useSession\n};\n\nexport { InventoryGuests as default, InventoryGuests };\n","import { useState } from 'react';\nimport { useDeepCompareEffect, useUnmount, useShallowCompareEffect } from 'react-use';\nimport { reduxActions, reduxTypes, storeHooks } from '../../redux';\nimport { useProductInventoryGuestsQuery } from '../productView/productViewContext';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\n\n/**\n * Guests inventory selector response.\n *\n * @param {string} id\n * @param {object} options\n * @param {Function} options.useSelectorsResponse\n * @returns {{data: (*|{}), pending: (*|boolean), fulfilled, error}}\n */\nconst useSelectorsGuestsInventory = (\n  id,\n  { useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse } = {}\n) => {\n  const { error, cancelled, fulfilled, pending, data } = useAliasSelectorsResponse(\n    ({ inventory }) => inventory?.hostsGuests?.[id]\n  );\n\n  return {\n    error,\n    fulfilled,\n    pending: pending || cancelled || false,\n    data: (data?.length === 1 && data[0]) || data || {}\n  };\n};\n\n/**\n * Combined Redux RHSM Actions, getHostsInventoryGuests, and inventory selector response.\n *\n * @param {string} id\n * @param {object} options\n * @param {Function} options.getInventory\n * @param {Function} options.useDispatch\n * @param {Function} options.useProductInventoryQuery\n * @param {Function} options.useSelectorsInventory\n * @returns {Function}\n */\nconst useGetGuestsInventory = (\n  id,\n  {\n    getInventory = reduxActions.rhsm.getHostsInventoryGuests,\n    useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n    useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventoryGuestsQuery,\n    useSelectorsInventory: useAliasSelectorsInventory = useSelectorsGuestsInventory\n  } = {}\n) => {\n  const [updatedData, setUpdatedData] = useState([]);\n  const query = useAliasProductInventoryQuery({ options: { overrideId: id } });\n  const dispatch = useAliasDispatch();\n  const { data = {}, fulfilled = false, ...response } = useAliasSelectorsInventory(id);\n  const { data: listData = [] } = data;\n\n  useShallowCompareEffect(() => {\n    getInventory(id, query)(dispatch);\n  }, [dispatch, id, query]);\n\n  useDeepCompareEffect(() => {\n    if (fulfilled) {\n      setUpdatedData(prevState => [...prevState, ...listData]);\n    }\n  }, [fulfilled, listData]);\n\n  return {\n    data: updatedData,\n    fulfilled,\n    ...response\n  };\n};\n\n/**\n * Use paging as onScroll event for guests inventory.\n *\n * @param {string} id\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useSelectorsInventory\n * @param {Function} options.useProductInventoryQuery\n * @returns {Function}\n */\nconst useOnScroll = (\n  id,\n  {\n    useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n    useSelectorsInventory: useAliasSelectorsInventory = useSelectorsGuestsInventory,\n    useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventoryGuestsQuery\n  } = {}\n) => {\n  const dispatch = useAliasDispatch();\n  const { pending, data = {} } = useAliasSelectorsInventory(id);\n  const { count: numberOfGuests } = data?.meta || {};\n\n  const query = useAliasProductInventoryQuery({ options: { overrideId: id } });\n  const { [RHSM_API_QUERY_SET_TYPES.LIMIT]: limit, [RHSM_API_QUERY_SET_TYPES.OFFSET]: currentPage } = query;\n\n  /**\n   * Reset paging in scenarios where inventory is filtered, or guests is collapsed.\n   */\n  useUnmount(() => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_CLEAR_INVENTORY_GUESTS_LIST,\n        viewId: id\n      },\n      {\n        type: reduxTypes.inventory.CLEAR_INVENTORY_GUESTS,\n        id\n      }\n    ]);\n  });\n\n  /**\n   * On scroll, dispatch type.\n   *\n   * @event onScroll\n   * @param {object} event\n   * @returns {void}\n   */\n  return event => {\n    const { target } = event;\n    const bottom = target.scrollHeight - target.scrollTop === target.clientHeight;\n\n    if (numberOfGuests > currentPage + limit && bottom && !pending) {\n      dispatch([\n        {\n          type: reduxTypes.query.SET_QUERY_RHSM_GUESTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.OFFSET],\n          viewId: id,\n          [RHSM_API_QUERY_SET_TYPES.OFFSET]: currentPage + limit\n        },\n        {\n          type: reduxTypes.query.SET_QUERY_RHSM_GUESTS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.LIMIT],\n          viewId: id,\n          [RHSM_API_QUERY_SET_TYPES.LIMIT]: limit\n        }\n      ]);\n    }\n  };\n};\n\nconst context = {\n  useGetGuestsInventory,\n  useOnScroll,\n  useSelectorsGuestsInventory\n};\n\nexport { context as default, context, useGetGuestsInventory, useOnScroll, useSelectorsGuestsInventory };\n","'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (key === '_owner' && a.$$typeof) {\n        // React-specific: avoid traversing React elements' _owner.\n        //  _owner contains circular references\n        // and is not needed when comparing the actual elements (and not their owners)\n        continue;\n      }\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n","import isDeepEqualReact from 'fast-deep-equal/react';\nexport default isDeepEqualReact;\n","import useCustomCompareEffect from './useCustomCompareEffect';\nimport isDeepEqual from './misc/isDeepEqual';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar useDeepCompareEffect = function (effect, deps) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useDeepCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useDeepCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n    }\n    useCustomCompareEffect(effect, deps, isDeepEqual);\n};\nexport default useDeepCompareEffect;\n"],"names":["applyConfigProperty","prop","params","updatedProp","Array","isArray","React","applyHeaderRowCellFilters","filters","cellData","meta","productId","session","headerCells","bodyCells","forEach","isStandalone","id","cell","cellWidth","header","onSort","showEmptyCell","sortId","sortActive","sortDirection","transforms","headerCellUpdated","title","translate","context","bodyCellUpdated","value","helpers","console","warn","updatedHeaderCellTitle","_isPlainObject","Object","assign","tooltip","updatedHeaderCellTooltip","Tooltip","content","concat","push","PfCellWidth","obj","updatedBodyCellTitle","updatedBodyCellTooltip","applySortFilters","filter","query","updatedId","updatedFilter","hasSort","RHSM_API_QUERY_SET_TYPES","_camelCase","SORT_DIRECTION_TYPES","SortByDirection","isSortDefault","sortDefaultInitialDirection","applyWrappableFilters","wrappable","parseInventoryFilters","map","isSortable","isWrappable","parseRowCellsListData","updatedColumnHeaders","updatedCells","allCells","entries","key","length","keys","columnHeaders","cells","data","inventoryCardHelpers","InventoryGuests","defaultPerPage","numberOfGuests","useAliasGetGuestsInventory","useGetGuestsInventory","useAliasOnScroll","useOnScroll","useAliasProductInventoryGuestsQuery","useProductInventoryGuestsQuery","useAliasProductInventoryGuestsConfig","useProductInventoryGuestsConfig","sessionData","useAliasSession","useSession","filterGuestsData","pending","listData","onScroll","currentPage","options","overrideId","updatedRows","updatedHeight","className","style","height","isFirstPage","updatedRowCount","scrollLoader","Loader","variant","tableProps","borders","undefined","colCount","colWidth","rowCount","TableVariant","renderLoader","Table","rows","defaultProps","useSelectorsGuestsInventory","useSelectorsResponse","useAliasSelectorsResponse","storeHooks","inventory","hostsGuests","error","cancelled","fulfilled","getInventory","reduxActions","useDispatch","useAliasDispatch","useProductInventoryQuery","useAliasProductInventoryQuery","useSelectorsInventory","useAliasSelectorsInventory","useState","updatedData","setUpdatedData","dispatch","response","useShallowCompareEffect","useDeepCompareEffect","prevState","count","limit","useUnmount","type","reduxTypes","viewId","event","target","bottom","scrollHeight","scrollTop","clientHeight","module","exports","equal","a","b","constructor","i","RegExp","source","flags","valueOf","prototype","toString","hasOwnProperty","call","$$typeof","effect","deps","useCustomCompareEffect","isDeepEqual"],"sourceRoot":""}