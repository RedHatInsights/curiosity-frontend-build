{"version":3,"file":"js/5925.1679402734031.730e6abb3c81d24ac4f4.js","mappings":"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","sources":["webpack:///./src/components/graphCard/graphCard.js","webpack:///./src/components/graphCard/graphCardMetricTotals.js","webpack:///./src/components/minHeight/minHeight.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { helpers } from '../../common';\nimport { GraphCardMetricTotals } from './graphCardMetricTotals';\nimport { GraphCardChart } from './graphCardChart';\nimport { GraphCardContext, useParseFiltersSettings } from './graphCardContext';\n\n/**\n * Configurable graph, chart, cards. Consumes Charts.\n *\n * @see Charts\n * @memberof Components\n * @module GraphCard\n * @property {module} GraphCardChart\n * @property {module} GraphCardChartLegend\n * @property {module} GraphCardChartTitleTooltip\n * @property {module} GraphCardChartTooltip\n * @property {module} GraphCardContext\n * @property {module} GraphCardHelpers\n * @property {module} GraphCardMetricTotals\n */\n\n/**\n * Set up graph cards. Expand filters with base graph settings.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useParseFiltersSettings\n * @returns {React.ReactNode}\n */\nconst GraphCard = ({ isDisabled, useParseFiltersSettings: useAliasParseFiltersSettings }) => {\n  const { groupedFiltersSettings, standaloneFiltersSettings } = useAliasParseFiltersSettings();\n\n  if (isDisabled) {\n    return null;\n  }\n\n  return (\n    <React.Fragment>\n      {(groupedFiltersSettings?.settings?.metrics?.length && (\n        <GraphCardContext.Provider\n          key={`graphCard_grouped-${groupedFiltersSettings?.settings?.metrics?.[0]?.id}`}\n          value={groupedFiltersSettings}\n        >\n          <GraphCardChart />\n        </GraphCardContext.Provider>\n      )) ||\n        null}\n      {standaloneFiltersSettings?.map(filtersSettings => (\n        <GraphCardContext.Provider\n          key={`graphCard_standalone-${filtersSettings?.settings?.metric?.id}`}\n          value={filtersSettings}\n        >\n          <GraphCardMetricTotals>\n            <GraphCardChart />\n          </GraphCardMetricTotals>\n        </GraphCardContext.Provider>\n      ))}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useParseFiltersSettings: Function, isDisabled: boolean}}\n */\nGraphCard.propTypes = {\n  isDisabled: PropTypes.bool,\n  useParseFiltersSettings: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useParseFiltersSettings: Function, isDisabled: boolean}}\n */\nGraphCard.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_GRAPH,\n  useParseFiltersSettings\n};\n\nexport { GraphCard as default, GraphCard };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter, CardHeader, CardTitle, Title } from '@patternfly/react-core';\nimport moment from 'moment';\nimport _camelCase from 'lodash/camelCase';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useMetricsSelector } from './graphCardContext';\nimport { Loader, SkeletonSize } from '../loader/loader';\nimport { dateHelpers, helpers } from '../../common';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldRangedMonthly';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * @memberof GraphCard\n * @module GraphCardMetricTotals\n */\n\n/**\n * Display totals for a single metric.\n *\n * @param {object} props\n * @param {React.ReactNode} props.children\n * @param {Function} props.t\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {React.ReactNode}\n */\nconst GraphCardMetricTotals = ({\n  children,\n  t,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate } = useAliasProductGraphTallyQuery();\n  const { pending, error, fulfilled, dataSets = [] } = useAliasMetricsSelector();\n  const { data = [], id, metric: metricId, meta = {} } = dataSets[0] || {};\n  const { date: lastDate, hasData: lastHasData, y: lastValue } = data[data.length - 1] || {};\n  const {\n    date: currentDate,\n    hasData: currentHasData,\n    y: currentValue\n  } = data.find(({ isCurrentDate }) => isCurrentDate === true) || {};\n\n  const { totalMonthlyDate: monthlyDate, totalMonthlyHasData: monthlyHasData, totalMonthlyValue: monthlyValue } = meta;\n\n  const { title: selectedMonth, isCurrent } =\n    toolbarFieldOptions.find(\n      option => option.title === startDate || option.value.startDate.toISOString() === startDate\n    ) || {};\n\n  const dailyDate = isCurrent ? currentDate : lastDate;\n  const dailyHasData = isCurrent ? currentHasData : lastHasData;\n  const dailyValue = isCurrent ? currentValue : lastValue;\n\n  return (\n    <div data-test={`graphMetricTotals-${_camelCase(metricId)}`} className=\"curiosity-usage-graph__totals\">\n      <div>\n        <div className=\"curiosity-usage-graph__totals-column\">\n          <Card\n            isPlain\n            data-test=\"graphDailyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardHeader>\n              <CardTitle>\n                <Title headingLevel=\"h2\" size=\"md\">\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t('curiosity-graph.cardHeadingMetric', {\n                      context: ['dailyTotal', id],\n                      month: selectedMonth\n                    })}\n                </Title>\n              </CardTitle>\n            </CardHeader>\n            <CardBody>\n              <div>\n                {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg, height: '60px' }} />}\n                {fulfilled &&\n                  t(\n                    'curiosity-graph.cardBodyMetric',\n                    {\n                      context: ['total', dailyHasData && id],\n                      total: helpers\n                        .numberDisplay(dailyValue)\n                        ?.format({\n                          average: true,\n                          mantissa: 5,\n                          trimMantissa: true,\n                          lowPrecision: false\n                        })\n                        ?.toUpperCase()\n                    },\n                    [<strong title={dailyValue} aria-label={dailyValue} />]\n                  )}\n              </div>\n            </CardBody>\n            <CardFooter>\n              <div>\n                {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                {fulfilled &&\n                  dailyDate &&\n                  t('curiosity-graph.cardFooterMetric', {\n                    date: moment.utc(dailyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                  })}\n              </div>\n            </CardFooter>\n          </Card>\n          <Card\n            isPlain\n            data-test=\"graphMonthlyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardHeader>\n              <CardTitle>\n                <Title headingLevel=\"h2\" size=\"md\">\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t('curiosity-graph.cardHeadingMetric', {\n                      context: ['monthlyTotal', id],\n                      month: selectedMonth\n                    })}\n                </Title>\n              </CardTitle>\n            </CardHeader>\n            <CardBody>\n              <div>\n                {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg, height: '60px' }} />}\n                {fulfilled &&\n                  t(\n                    'curiosity-graph.cardBodyMetric',\n                    {\n                      context: ['total', monthlyHasData && id],\n                      total: helpers\n                        .numberDisplay(monthlyValue)\n                        ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: false })\n                        ?.toUpperCase()\n                    },\n                    [<strong title={monthlyValue} aria-label={monthlyValue} />]\n                  )}\n              </div>\n            </CardBody>\n            <CardFooter>\n              <div>\n                {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                {fulfilled &&\n                  monthlyDate &&\n                  t('curiosity-graph.cardFooterMetric', {\n                    date: moment.utc(monthlyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                  })}\n              </div>\n            </CardFooter>\n          </Card>\n        </div>\n      </div>\n      <div>\n        <div className=\"curiosity-usage-graph__totals-graph-column\">{children}</div>\n      </div>\n    </div>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: React.ReactNode, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.propTypes = {\n  children: PropTypes.node,\n  t: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: React.ReactNode, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.defaultProps = {\n  children: null,\n  t: translate,\n  useMetricsSelector,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardMetricTotals as default, GraphCardMetricTotals };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { helpers } from '../../common';\n\n/**\n * Normalize component height on page loads and updates.\n *\n * @memberof Components\n * @module MinHeight\n */\n\n/**\n * Set a min-height to prevent page jump component.\n *\n * @augments React.Component\n * @fires onResizeContainer\n */\nclass MinHeight extends React.Component {\n  containerRef = React.createRef();\n\n  innerContainerRef = React.createRef();\n\n  updatedContainerWidth = 0;\n\n  resizeObserver = helpers.noop;\n\n  componentDidMount() {\n    const { updateOnResize } = this.props;\n    window.setTimeout(() => {\n      this.setMinHeight();\n    });\n\n    if (updateOnResize) {\n      this.setResizeObserver();\n    }\n  }\n\n  componentDidUpdate() {\n    const { updateOnContent } = this.props;\n\n    if (updateOnContent) {\n      window.setTimeout(() => {\n        this.setMinHeight();\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.resizeObserver();\n  }\n\n  /**\n   * On resize adjust graph display.\n   *\n   * @event onResizeContainer\n   */\n  onResizeContainer = () => {\n    const { updatedContainerWidth } = this;\n    const { updateOnResize } = this.props;\n    const clientWidth = this.containerRef?.current?.clientWidth || 0;\n\n    if (updateOnResize && clientWidth !== updatedContainerWidth) {\n      this.updatedContainerWidth = clientWidth;\n      this.setMinHeight(true);\n    }\n  };\n\n  /**\n   * Set minHeight on mount or update.\n   *\n   * @param {boolean} reset\n   */\n  setMinHeight(reset = false) {\n    const { minHeight: overrideMinHeight } = this.props;\n    const { current: domElement = {} } = this.containerRef;\n    const { current: innerDomElement = {} } = this.innerContainerRef;\n\n    if (domElement?.style) {\n      let clientHeight;\n\n      if (reset) {\n        clientHeight = innerDomElement?.clientHeight || 0;\n      } else {\n        clientHeight = domElement?.clientHeight || 0;\n      }\n\n      if (overrideMinHeight > clientHeight) {\n        clientHeight = overrideMinHeight;\n      }\n\n      domElement.style.minHeight = `${clientHeight}px`;\n    }\n  }\n\n  /**\n   * Set ResizeObserver for scenarios when min-height needs to be updated.\n   */\n  setResizeObserver() {\n    window.addEventListener('resize', this.onResizeContainer);\n    this.resizeObserver = () => window.removeEventListener('resize', this.onResizeContainer);\n  }\n\n  /**\n   * Render a min-height div with children.\n   *\n   * @returns {React.ReactNode}\n   */\n  render() {\n    const { children } = this.props;\n\n    return (\n      <div className=\"curiosity-minheight\" ref={this.containerRef}>\n        <div ref={this.innerContainerRef}>{children}</div>\n      </div>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{minHeight: number, children: React.ReactNode, updateOnContent: boolean, updateOnResize: boolean}}\n */\nMinHeight.propTypes = {\n  updateOnContent: PropTypes.bool,\n  updateOnResize: PropTypes.bool,\n  children: PropTypes.node.isRequired,\n  minHeight: PropTypes.number\n};\n\n/**\n * Default props.\n *\n * @type {{minHeight: number, updateOnContent: boolean, updateOnResize: boolean}}\n */\nMinHeight.defaultProps = {\n  updateOnContent: false,\n  updateOnResize: true,\n  minHeight: 0\n};\n\nexport { MinHeight as default, MinHeight };\n"],"names":["GraphCard","_ref","_groupedFiltersSettin","_groupedFiltersSettin2","_groupedFiltersSettin3","_groupedFiltersSettin4","_groupedFiltersSettin5","isDisabled","_useAliasParseFilters","useAliasParseFiltersSettings","useParseFiltersSettings","groupedFiltersSettings","standaloneFiltersSettings","React","settings","metrics","length","GraphCardContext","key","concat","id","value","GraphCardChart","map","filtersSettings","_filtersSettings$sett","_filtersSettings$sett2","metric","GraphCardMetricTotals","defaultProps","helpers","_helpers$numberDispla","_helpers$numberDispla2","_helpers$numberDispla3","_helpers$numberDispla4","children","t","useAliasMetricsSelector","useMetricsSelector","startDate","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","RHSM_API_QUERY_SET_TYPES","_useAliasMetricsSelec","pending","error","fulfilled","_useAliasMetricsSelec2","dataSets","_ref2","_ref2$data","data","metricId","_ref2$meta","meta","_ref3","lastDate","date","lastHasData","hasData","lastValue","y","_ref4","find","_ref5","isCurrentDate","currentDate","currentHasData","currentValue","monthlyDate","totalMonthlyDate","monthlyHasData","totalMonthlyHasData","monthlyValue","totalMonthlyValue","_ref6","toolbarFieldOptions","option","title","toISOString","selectedMonth","isCurrent","dailyDate","dailyHasData","dailyValue","_camelCase","className","Card","isPlain","CardHeader","CardTitle","Title","headingLevel","size","Loader","variant","skeletonProps","SkeletonSize","context","month","CardBody","height","total","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","CardFooter","moment","dateHelpers","translate","MinHeight","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","call","apply","containerRef","innerContainerRef","updatedContainerWidth","resizeObserver","onResizeContainer","_this$containerRef","_this$containerRef$cu","_assertThisInitialized","updateOnResize","props","clientWidth","current","setMinHeight","_createClass","_this2","this","window","setTimeout","setResizeObserver","_this3","updateOnContent","clientHeight","reset","undefined","overrideMinHeight","minHeight","_this$containerRef$cu2","domElement","_this$innerContainerR","innerDomElement","style","_this4","addEventListener","removeEventListener","ref"],"sourceRoot":""}