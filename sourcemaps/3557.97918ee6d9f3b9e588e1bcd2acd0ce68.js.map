{"version":3,"file":"js/3557.1669838718151.1f50fb24378df3068c2d.js","mappings":"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","sources":["webpack:///./src/components/bannerMessages/bannerMessages.js","webpack:///./src/components/bannerMessages/bannerMessagesContext.js","webpack:///./src/components/graphCard/graphCard.js","webpack:///./src/components/graphCard/graphCardMetricTotals.js","webpack:///./src/components/inventoryCard/inventoryCardHosts.js","webpack:///./src/components/inventoryCardSubscriptions/inventoryCardSubscriptions.js","webpack:///./src/components/inventoryCardSubscriptions/inventoryCardSubscriptionsContext.js","webpack:///./src/components/inventoryTabs/inventoryTab.js","webpack:///./src/components/inventoryTabs/inventoryTabs.js","webpack:///./src/components/productView/productView.js","webpack:///./src/components/tabs/tabs.js","webpack:///./src/components/toolbar/toolbar.js","webpack:///./src/components/toolbar/toolbarContext.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, AlertActionCloseButton, AlertVariant, Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { useShallowCompareEffect } from 'react-use';\nimport { useGetAppMessages } from './bannerMessagesContext';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Render banner messages.\n *\n * @param {object} props\n * @param {Array} props.messages\n * @param {Function} props.useGetAppMessages\n * @returns {React.ReactNode}\n */\nconst BannerMessages = ({ messages, useGetAppMessages: useAliasGetAppMessages }) => {\n  const [hideAlerts, setHideAlerts] = useState({});\n  const [alerts, setAlerts] = useState([]);\n  const { data: appMessages } = useAliasGetAppMessages();\n\n  useShallowCompareEffect(() => {\n    const updatedMessages = [];\n\n    if (messages.length) {\n      Object.entries(appMessages).forEach(([key, value]) => {\n        if (hideAlerts[key] !== true && value === true) {\n          const message = messages.find(({ id }) => id === key);\n\n          if (message) {\n            updatedMessages.push({\n              key,\n              ...message\n            });\n          }\n        }\n      });\n    }\n\n    setAlerts(\n      updatedMessages.map(({ key, message, title, variant = AlertVariant.info }) => {\n        const actionClose = <AlertActionCloseButton onClose={() => setHideAlerts({ ...hideAlerts, [key]: true })} />;\n\n        return (\n          <Alert actionClose={actionClose} key={key} title={title} variant={variant}>\n            {message}\n          </Alert>\n        );\n      })\n    );\n  }, [appMessages, hideAlerts, messages]);\n\n  if (alerts?.length) {\n    return <div className=\"curiosity-banner-messages\">{alerts}</div>;\n  }\n\n  return null;\n};\n\n/**\n * Prop types.\n *\n * @type {{useGetAppMessages: Function, messages: Array}}\n */\nBannerMessages.propTypes = {\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.node.isRequired,\n      message: PropTypes.node.isRequired,\n      variant: PropTypes.oneOf([...Object.values(AlertVariant)])\n    })\n  ),\n  useGetAppMessages: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useGetAppMessages: Function, messages: Array}}\n */\nBannerMessages.defaultProps = {\n  messages: [\n    {\n      id: 'cloudigradeMismatch',\n      title: translate('curiosity-banner.dataMismatchTitle'),\n      message: translate(\n        'curiosity-banner.dataMismatchMessage',\n        {\n          context: helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS !== '' && 'cloudigradeMismatch',\n          appName: helpers.UI_DISPLAY_NAME\n        },\n        [\n          <Button\n            isInline\n            component=\"a\"\n            variant=\"link\"\n            icon={<ExternalLinkAltIcon />}\n            iconPosition=\"right\"\n            target=\"_blank\"\n            href={helpers.UI_LINK_REPORT_ACCURACY_RECOMMENDATIONS}\n          />\n        ]\n      )\n    }\n  ],\n  useGetAppMessages\n};\n\nexport { BannerMessages as default, BannerMessages };\n","import { useShallowCompareEffect } from 'react-use';\nimport { reduxActions, storeHooks } from '../../redux';\nimport { useProduct, useProductQuery } from '../productView/productViewContext';\nimport { dateHelpers } from '../../common';\nimport {\n  rhsmConstants,\n  RHSM_API_QUERY_GRANULARITY_TYPES as GRANULARITY_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\n\n/**\n * ToDo: useGetAppMessages is setup to work with existing Tally response, pre-metrics\n * Banner messages scans the returned Tally listing for the HAS_CLOUDIGRADE_MISMATCH. In the future\n * this may need to be updated to pull from the \"meta\" object part of the Tally response.\n */\n/**\n * Get app messages.\n *\n * @param {object} options\n * @param {Function} options.getMessageReports\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useProductQuery\n * @param {Function} options.useSelectorsResponse\n * @returns {object}\n */\nconst useGetAppMessages = ({\n  getMessageReports = reduxActions.rhsm.getMessageReports,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductQuery();\n  const dispatch = useAliasDispatch();\n  const { error, fulfilled, pending, data } = useAliasSelectorsResponse({\n    id: 'messages',\n    selector: ({ messages }) => messages?.report?.[productId]\n  });\n\n  useShallowCompareEffect(() => {\n    if (productId) {\n      const { startDate, endDate } = dateHelpers.getRangedDateTime('CURRENT');\n      const updatedQuery = {\n        ...query,\n        [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: GRANULARITY_TYPES.DAILY,\n        [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate.toISOString(),\n        [RHSM_API_QUERY_SET_TYPES.END_DATE]: endDate.toISOString()\n      };\n\n      getMessageReports(productId, updatedQuery)(dispatch);\n    }\n  }, [productId, query]);\n\n  const updatedData = {\n    cloudigradeMismatch: false\n  };\n\n  if (fulfilled) {\n    const { messages = {} } = data || {};\n\n    updatedData.cloudigradeMismatch =\n      messages?.data\n        ?.reverse()\n        ?.find(\n          ({ [rhsmConstants.RHSM_API_RESPONSE_TALLY_META_TYPES.HAS_CLOUDIGRADE_MISMATCH]: mismatch }) =>\n            mismatch === true\n        ) !== undefined;\n  }\n\n  return {\n    error,\n    fulfilled,\n    pending,\n    data: {\n      ...updatedData\n    }\n  };\n};\n\nconst context = {\n  useGetAppMessages\n};\n\nexport { context as default, context, useGetAppMessages };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProduct, useProductGraphConfig } from '../productView/productViewContext';\nimport { helpers } from '../../common';\nimport { GraphCardMetricTotals } from './graphCardMetricTotals';\nimport { GraphCardChart } from './graphCardChart';\nimport { GraphCardContext } from './graphCardContext';\nimport { graphCardHelpers } from './graphCardHelpers';\n\n/**\n * Set up graph cards. Expand filters with base graph settings.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useProduct\n * @param {Function} props.useProductGraphConfig\n * @returns {Node}\n */\nconst GraphCard = ({ isDisabled, useProduct: useAliasProduct, useProductGraphConfig: useAliasProductGraphConfig }) => {\n  const { productId } = useAliasProduct();\n  const { filters, settings } = useAliasProductGraphConfig();\n  const { groupedFiltersSettings, standaloneFiltersSettings } = graphCardHelpers.generateChartSettings({\n    filters,\n    settings,\n    productId\n  });\n\n  if (isDisabled) {\n    return null;\n  }\n\n  return (\n    <React.Fragment>\n      {(groupedFiltersSettings && (\n        <GraphCardContext.Provider value={groupedFiltersSettings}>\n          <GraphCardChart />\n        </GraphCardContext.Provider>\n      )) ||\n        null}\n      {standaloneFiltersSettings?.map(filtersSettings => (\n        <GraphCardContext.Provider key={`graphCard_${filtersSettings?.settings?.metric?.id}`} value={filtersSettings}>\n          <GraphCardMetricTotals>\n            <GraphCardChart />\n          </GraphCardMetricTotals>\n        </GraphCardContext.Provider>\n      ))}\n    </React.Fragment>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProduct: Function, useProductGraphConfig: Function, isDisabled: boolean}}\n */\nGraphCard.propTypes = {\n  isDisabled: PropTypes.bool,\n  useProduct: PropTypes.func,\n  useProductGraphConfig: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProduct: Function, useProductGraphConfig: Function, isDisabled: boolean}}\n */\nGraphCard.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_GRAPH,\n  useProduct,\n  useProductGraphConfig\n};\n\nexport { GraphCard as default, GraphCard };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, CardFooter, CardTitle, Flex, FlexItem } from '@patternfly/react-core';\nimport moment from 'moment';\nimport _camelCase from 'lodash/camelCase';\nimport { useProductGraphTallyQuery } from '../productView/productViewContext';\nimport { useMetricsSelector } from './graphCardContext';\nimport { MinHeight } from '../minHeight/minHeight';\nimport { Loader, SkeletonSize } from '../loader/loader';\nimport { dateHelpers, helpers } from '../../common';\nimport { toolbarFieldOptions } from '../toolbar/toolbarFieldRangedMonthly';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Display totals for a single metric.\n *\n * @param {object} props\n * @param {Node} props.children\n * @param {Function} props.t\n * @param {Function} props.useMetricsSelector\n * @param {Function} props.useProductGraphTallyQuery\n * @returns {Node}\n */\nconst GraphCardMetricTotals = ({\n  children,\n  t,\n  useMetricsSelector: useAliasMetricsSelector,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery\n}) => {\n  const { [RHSM_API_QUERY_SET_TYPES.START_DATE]: startDate } = useAliasProductGraphTallyQuery();\n  const { pending, error, fulfilled, dataSets = [] } = useAliasMetricsSelector();\n  const { data = [], id, metric: metricId, meta = {} } = dataSets[0] || {};\n  const { date: lastDate, hasData: lastHasData, y: lastValue } = data[data.length - 1] || {};\n  const {\n    date: currentDate,\n    hasData: currentHasData,\n    y: currentValue\n  } = data.find(({ isCurrentDate }) => isCurrentDate === true) || {};\n\n  const { totalMonthlyDate: monthlyDate, totalMonthlyHasData: monthlyHasData, totalMonthlyValue: monthlyValue } = meta;\n\n  const { title: selectedMonth, isCurrent } =\n    toolbarFieldOptions.find(\n      option => option.title === startDate || option.value.startDate.toISOString() === startDate\n    ) || {};\n\n  const dailyDate = isCurrent ? currentDate : lastDate;\n  const dailyHasData = isCurrent ? currentHasData : lastHasData;\n  const dailyValue = isCurrent ? currentValue : lastValue;\n\n  return (\n    <Flex data-test={`graphMetricTotals-${_camelCase(metricId)}`} className=\"curiosity-usage-graph__totals\">\n      <Flex flex={{ default: 'flex_1' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-column\">\n          <Card\n            data-test=\"graphDailyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric', {\n                context: ['dailyTotal', id],\n                month: selectedMonth\n              })}\n            </CardTitle>\n            <MinHeight key=\"currentBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric',\n                      {\n                        context: ['total', dailyHasData && id],\n                        total: helpers\n                          .numberDisplay(dailyValue)\n                          ?.format({\n                            average: true,\n                            mantissa: 5,\n                            trimMantissa: true,\n                            lowPrecision: false\n                          })\n                          ?.toUpperCase()\n                      },\n                      [<strong title={dailyValue} aria-label={dailyValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"currentFooter\">\n              <CardFooter>\n                <div className={(!dailyHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    dailyDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(dailyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n          <Card\n            data-test=\"graphMonthlyTotalCard\"\n            className={`curiosity-usage-graph__totals-column-card ${(error && 'blur') || ''}`}\n          >\n            <CardTitle>\n              {t('curiosity-graph.cardHeadingMetric', {\n                context: ['monthlyTotal', id],\n                month: selectedMonth\n              })}\n            </CardTitle>\n            <MinHeight key=\"totalMonthlyBody\">\n              <CardBody>\n                <div>\n                  {pending && <Loader variant=\"skeleton\" skeletonProps={{ size: SkeletonSize.lg }} />}\n                  {fulfilled &&\n                    t(\n                      'curiosity-graph.cardBodyMetric',\n                      {\n                        context: ['total', monthlyHasData && id],\n                        total: helpers\n                          .numberDisplay(monthlyValue)\n                          ?.format({ average: true, mantissa: 5, trimMantissa: true, lowPrecision: false })\n                          ?.toUpperCase()\n                      },\n                      [<strong title={monthlyValue} aria-label={monthlyValue} />]\n                    )}\n                </div>\n              </CardBody>\n            </MinHeight>\n            <MinHeight key=\"totalMonthlyFooter\">\n              <CardFooter>\n                <div className={(!monthlyHasData && 'hidden') || ''}>\n                  {fulfilled &&\n                    monthlyDate &&\n                    t('curiosity-graph.cardFooterMetric', {\n                      date: moment.utc(monthlyDate).format(dateHelpers.timestampUTCTimeFormats.yearTimeShort)\n                    })}\n                </div>\n              </CardFooter>\n            </MinHeight>\n          </Card>\n        </FlexItem>\n      </Flex>\n      <Flex flex={{ default: 'flex_3' }} direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfStretch' }}>\n        <FlexItem className=\"curiosity-usage-graph__totals-graph-column\">{children}</FlexItem>\n      </Flex>\n    </Flex>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.propTypes = {\n  children: PropTypes.node,\n  t: PropTypes.func,\n  useMetricsSelector: PropTypes.func,\n  useProductGraphTallyQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useProductGraphTallyQuery: Function, t: Function, children: Node, useMetricsSelector: Function}}\n */\nGraphCardMetricTotals.defaultProps = {\n  children: null,\n  t: translate,\n  useMetricsSelector,\n  useProductGraphTallyQuery\n};\n\nexport { GraphCardMetricTotals as default, GraphCardMetricTotals };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useGetHostsInventory, useOnColumnSortHosts } from './inventoryCardContext';\nimport InventoryCard from './inventoryCard';\nimport { helpers } from '../../common';\n\n/**\n * A hosts' system inventory component.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useGetInventory\n * @param {Function} props.useOnColumnSort\n * @returns {React.ReactNode}\n */\nconst InventoryCardHosts = ({ ...props }) => <InventoryCard {...props} />;\n\n/**\n * Prop types.\n *\n * @type {{isDisabled: boolean, useGetInventory: Function, useOnColumnSort: Function}}\n */\nInventoryCardHosts.propTypes = {\n  isDisabled: PropTypes.bool,\n  useGetInventory: PropTypes.func,\n  useOnColumnSort: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{isDisabled: boolean, useGetInventory: Function, useOnColumnSort: Function}}\n */\nInventoryCardHosts.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_TABLE_HOSTS,\n  useGetInventory: useGetHostsInventory,\n  useOnColumnSort: useOnColumnSortHosts\n};\n\nexport { InventoryCardHosts as default, InventoryCardHosts };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  useProductInventorySubscriptionsConfig,\n  useProductInventorySubscriptionsQuery\n} from '../productView/productViewContext';\nimport {\n  useGetSubscriptionsInventory,\n  useOnPageSubscriptions,\n  useOnColumnSortSubscriptions\n} from './inventoryCardSubscriptionsContext';\nimport InventoryCard from '../inventoryCard/inventoryCard';\nimport { helpers } from '../../common';\n\n/**\n * A subscriptions' system inventory component.\n *\n * @param {object} props\n * @param {boolean} props.isDisabled\n * @param {Function} props.useGetInventory\n * @param {Function} props.useOnPage\n * @param {Function} props.useOnColumnSort\n * @param {Function} props.useProductInventoryConfig\n * @param {Function} props.useProductInventoryQuery\n * @fires onColumnSort\n * @fires onPage\n * @fires onUpdateInventoryData\n * @returns {Node}\n */\nconst InventoryCardSubscriptions = ({ ...props }) => <InventoryCard cardActions={null} {...props} />;\n\n/**\n * Prop types.\n *\n * @type {{useOnPage: Function, isDisabled: boolean, useProductInventoryConfig: Function, useGetInventory: Function,\n *     useOnColumnSort: Function, useProductInventoryQuery: Function}}\n */\nInventoryCardSubscriptions.propTypes = {\n  isDisabled: PropTypes.bool,\n  useGetInventory: PropTypes.func,\n  useOnPage: PropTypes.func,\n  useOnColumnSort: PropTypes.func,\n  useProductInventoryConfig: PropTypes.func,\n  useProductInventoryQuery: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useOnPage: Function, isDisabled: boolean, useProductInventoryConfig: Function, useGetInventory: Function,\n *     useOnColumnSort: Function, useProductInventoryQuery: Function}}\n */\nInventoryCardSubscriptions.defaultProps = {\n  isDisabled: helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS,\n  useGetInventory: useGetSubscriptionsInventory,\n  useOnPage: useOnPageSubscriptions,\n  useOnColumnSort: useOnColumnSortSubscriptions,\n  useProductInventoryConfig: useProductInventorySubscriptionsConfig,\n  useProductInventoryQuery: useProductInventorySubscriptionsQuery\n};\n\nexport { InventoryCardSubscriptions as default, InventoryCardSubscriptions };\n","import { useShallowCompareEffect } from 'react-use';\nimport _camelCase from 'lodash/camelCase';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { reduxActions, reduxTypes, storeHooks } from '../../redux';\nimport { useProduct, useProductInventorySubscriptionsQuery } from '../productView/productViewContext';\nimport {\n  RHSM_API_QUERY_INVENTORY_SORT_DIRECTION_TYPES as SORT_DIRECTION_TYPES,\n  RHSM_API_QUERY_INVENTORY_SUBSCRIPTIONS_SORT_TYPES as SORT_TYPES,\n  RHSM_API_QUERY_SET_TYPES\n} from '../../services/rhsm/rhsmConstants';\nimport { helpers } from '../../common';\n\n/**\n * Combined Redux RHSM Actions, getSubscriptionsInventory, and inventory selector response.\n *\n * @param {object} options\n * @param {boolean} options.isDisabled\n * @param {Function} options.getInventory\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useProductInventoryQuery\n * @param {Function} options.useSelectorsResponse\n * @returns {Function}\n */\nconst useGetSubscriptionsInventory = ({\n  isDisabled = false,\n  getInventory = reduxActions.rhsm.getSubscriptionsInventory,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useProductInventoryQuery: useAliasProductInventoryQuery = useProductInventorySubscriptionsQuery,\n  useSelectorsResponse: useAliasSelectorsResponse = storeHooks.reactRedux.useSelectorsResponse\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const query = useAliasProductInventoryQuery();\n  const dispatch = useAliasDispatch();\n  const { cancelled, pending, data, ...response } = useAliasSelectorsResponse(\n    ({ inventory }) => inventory?.subscriptionsInventory?.[productId]\n  );\n\n  useShallowCompareEffect(() => {\n    if (!isDisabled) {\n      getInventory(productId, query)(dispatch);\n    }\n  }, [dispatch, isDisabled, productId, query]);\n\n  return {\n    ...response,\n    pending: pending || cancelled || false,\n    data: (data?.length === 1 && data[0]) || data || {}\n  };\n};\n\n/**\n * An onPage callback for subscriptions inventory.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnPageSubscriptions = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for subscriptions inventory.\n   *\n   * @event onPage\n   * @param {object} params\n   * @param {number} params.offset\n   * @param {number} params.perPage\n   * @returns {void}\n   */\n  return ({ offset, perPage }) => {\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.OFFSET],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.OFFSET]: offset\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.LIMIT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.LIMIT]: perPage\n      }\n    ]);\n  };\n};\n\n/**\n * An onColumnSort callback for subscriptions inventory.\n *\n * @param {object} options\n * @param {object} options.sortColumns\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @returns {Function}\n */\nconst useOnColumnSortSubscriptions = ({\n  sortColumns = SORT_TYPES,\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct\n} = {}) => {\n  const { productId } = useAliasProduct();\n  const dispatch = useAliasDispatch();\n\n  /**\n   * On event update state for subscriptions inventory.\n   *\n   * @event onColumnSort\n   * @param {*} _data\n   * @param {object} params\n   * @param {string} params.direction\n   * @param {string} params.id\n   * @returns {void}\n   */\n  return (_data, { direction, id }) => {\n    const updatedSortColumn = Object.values(sortColumns).find(value => value === id || _camelCase(value) === id);\n    let updatedDirection;\n\n    if (!updatedSortColumn) {\n      if (helpers.DEV_MODE || helpers.REVIEW_MODE) {\n        console.warn(`Sorting can only be performed on select fields, confirm field ${id} is allowed.`);\n      }\n      return;\n    }\n\n    switch (direction) {\n      case SortByDirection.desc:\n        updatedDirection = SORT_DIRECTION_TYPES.DESCENDING;\n        break;\n      default:\n        updatedDirection = SORT_DIRECTION_TYPES.ASCENDING;\n        break;\n    }\n\n    dispatch([\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.DIRECTION],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.DIRECTION]: updatedDirection\n      },\n      {\n        type: reduxTypes.query.SET_QUERY_RHSM_SUBSCRIPTIONS_INVENTORY_TYPES[RHSM_API_QUERY_SET_TYPES.SORT],\n        viewId: productId,\n        [RHSM_API_QUERY_SET_TYPES.SORT]: updatedSortColumn\n      }\n    ]);\n  };\n};\n\nconst context = {\n  useGetSubscriptionsInventory,\n  useOnPageSubscriptions,\n  useOnColumnSortSubscriptions\n};\n\nexport {\n  context as default,\n  context,\n  useGetSubscriptionsInventory,\n  useOnPageSubscriptions,\n  useOnColumnSortSubscriptions\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * A tab pass-through component for passing props to InventoryTabs.\n *\n * @param {object} props\n * @param {boolean} props.active\n * @param {React.ReactNode} props.children\n * @param {string} props.title\n * @returns {React.ReactNode}\n */\n// eslint-disable-next-line no-unused-vars\nconst InventoryTab = ({ active, children, title }) => children;\n\n/**\n * Prop types.\n *\n * @type {{children: React.ReactNode, className: string}}\n */\nInventoryTab.propTypes = {\n  children: PropTypes.node.isRequired,\n  active: PropTypes.bool,\n  title: PropTypes.node.isRequired\n};\n\n/**\n * Default props.\n *\n * @type {{className: string}}\n */\nInventoryTab.defaultProps = {\n  active: false\n};\n\nexport { InventoryTab as default, InventoryTab };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Title } from '@patternfly/react-core';\nimport { connect, reduxTypes, store } from '../../redux';\nimport { Tabs } from '../tabs/tabs';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\nimport { InventoryTab } from './inventoryTab';\n\n/**\n * A system inventory tabs component.\n *\n * @augments React.Component\n * @fires onTab\n */\nclass InventoryTabs extends React.Component {\n  /**\n   * On tab update state.\n   *\n   * @event onTab\n   * @param {object} params\n   * @param {string} params.index tab index\n   */\n  onTab = ({ index }) => {\n    const { productId } = this.props;\n\n    store.dispatch({\n      type: reduxTypes.inventory.SET_INVENTORY_TAB,\n      tabs: {\n        [productId]: index\n      }\n    });\n  };\n\n  /**\n   * Render inventory tabs using Inventory tab passed props only. A parallel outcome can be\n   * achieved by passing an array of objects through a prop.\n   *\n   * @returns {Node}\n   */\n  render() {\n    const { activeTab, children, defaultActiveTab, isDisabled, t } = this.props;\n\n    if (isDisabled) {\n      return null;\n    }\n\n    const updatedChildren = React.Children.toArray(children).map((child, index) => {\n      const { props = {} } = child;\n\n      return {\n        active: props.active || false,\n        content: props.children || child,\n        title: props.title || t('curiosity-inventory.tabSubHeading', { count: index })\n      };\n    });\n\n    return (\n      <React.Fragment>\n        <Title headingLevel=\"h2\" className=\"sr-only\">\n          {t('curiosity-inventory.tabHeading', { count: updatedChildren.length })}\n        </Title>\n        <Tabs activeTab={activeTab} defaultActiveTab={defaultActiveTab} onTab={this.onTab} tabs={updatedChildren} />\n      </React.Fragment>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{productId: string, t: Function, children: Node, defaultActiveTab: number, isDisabled: boolean,\n *     activeTab: number}}\n */\nInventoryTabs.propTypes = {\n  activeTab: PropTypes.number,\n  children: PropTypes.node.isRequired,\n  defaultActiveTab: PropTypes.number,\n  isDisabled: PropTypes.bool,\n  productId: PropTypes.string.isRequired,\n  t: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, defaultActiveTab: number, isDisabled: boolean, activeTab: number}}\n */\nInventoryTabs.defaultProps = {\n  activeTab: 0,\n  defaultActiveTab: 0,\n  isDisabled: helpers.UI_DISABLED_TABLE,\n  t: translate\n};\n\n/**\n * Create a selector from applied state, props.\n *\n * @type {Function}\n */\nconst mapStateToProps = ({ inventory }, { productId }) => ({ activeTab: inventory.tabs?.[productId] });\n\nconst ConnectedInventoryTabs = connect(mapStateToProps)(InventoryTabs);\n\nexport { ConnectedInventoryTabs as default, ConnectedInventoryTabs, InventoryTabs, InventoryTab };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useRouteDetail } from '../../hooks/useRouter';\nimport { ProductViewContext } from './productViewContext';\nimport { PageLayout, PageHeader, PageSection, PageToolbar, PageMessages, PageColumns } from '../pageLayout/pageLayout';\nimport { GraphCard } from '../graphCard/graphCard';\nimport { Toolbar } from '../toolbar/toolbar';\nimport { InventoryCard } from '../inventoryCard/inventoryCard';\nimport { InventoryCardHosts } from '../inventoryCard/inventoryCardHosts';\nimport { helpers } from '../../common';\nimport BannerMessages from '../bannerMessages/bannerMessages';\nimport InventoryTabs, { InventoryTab } from '../inventoryTabs/inventoryTabs';\nimport { InventoryCardSubscriptions } from '../inventoryCardSubscriptions/inventoryCardSubscriptions';\nimport { RHSM_INTERNAL_PRODUCT_DISPLAY_TYPES as DISPLAY_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Display product columns.\n *\n * @param {object} props\n * @param {Function} props.t\n * @param {Function} props.useRouteDetail\n * @returns {Node}\n */\nconst ProductView = ({ t, useRouteDetail: useAliasRouteDetail }) => {\n  const { productParameter: routeProductLabel, productConfig } = useAliasRouteDetail();\n\n  const renderProduct = config => {\n    const { initialInventoryFilters, initialSubscriptionsInventoryFilters, productDisplay, productId, viewId } = config;\n\n    if (!productId || !viewId) {\n      return null;\n    }\n\n    return (\n      <ProductViewContext.Provider value={config} key={`product_${productId}`}>\n        <PageMessages>{productDisplay !== DISPLAY_TYPES.HOURLY && <BannerMessages />}</PageMessages>\n        <PageToolbar>\n          <Toolbar />\n        </PageToolbar>\n        <PageSection>\n          <GraphCard />\n        </PageSection>\n        <PageSection className={(productDisplay === DISPLAY_TYPES.HOURLY && 'curiosity-page-section__tabs') || ''}>\n          <InventoryTabs\n            key={`inventory_${productId}`}\n            productId={productId}\n            isDisabled={\n              (!initialInventoryFilters && !initialSubscriptionsInventoryFilters) || helpers.UI_DISABLED_TABLE\n            }\n          >\n            {!helpers.UI_DISABLED_TABLE_HOSTS && productDisplay !== DISPLAY_TYPES.HOURLY && initialInventoryFilters && (\n              <InventoryTab\n                key={`inventory_hosts_${productId}`}\n                title={t('curiosity-inventory.tabHosts', { context: [productId] })}\n              >\n                <InventoryCardHosts />\n              </InventoryTab>\n            )}\n            {!helpers.UI_DISABLED_TABLE_INSTANCES &&\n              productDisplay === DISPLAY_TYPES.HOURLY &&\n              initialInventoryFilters && (\n                <InventoryTab\n                  key={`inventory_instances_${productId}`}\n                  title={t('curiosity-inventory.tabInstances', { context: [productId] })}\n                >\n                  <InventoryCard />\n                </InventoryTab>\n              )}\n            {!helpers.UI_DISABLED_TABLE_SUBSCRIPTIONS && initialSubscriptionsInventoryFilters && (\n              <InventoryTab\n                key={`inventory_subs_${productId}`}\n                title={t('curiosity-inventory.tabSubscriptions', { context: [productId] })}\n              >\n                <InventoryCardSubscriptions />\n              </InventoryTab>\n            )}\n          </InventoryTabs>\n        </PageSection>\n      </ProductViewContext.Provider>\n    );\n  };\n\n  return (\n    <PageLayout>\n      <PageHeader productLabel={routeProductLabel}>\n        {t(`curiosity-view.title`, { appName: helpers.UI_DISPLAY_NAME, context: routeProductLabel })}\n      </PageHeader>\n      <PageColumns>{productConfig.map(config => renderProduct(config))}</PageColumns>\n    </PageLayout>\n  );\n};\n\n/**\n * Prop types.\n *\n * @type {{t: translate, useRouteDetail: Function}}\n */\nProductView.propTypes = {\n  t: PropTypes.func,\n  useRouteDetail: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{t: translate, useRouteDetail: Function}}\n */\nProductView.defaultProps = {\n  t: translate,\n  useRouteDetail\n};\n\nexport { ProductView as default, ProductView };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tabs as PfTabs, Tab, TabTitleText, Grid, GridItem } from '@patternfly/react-core';\nimport _isEqualWith from 'lodash/isEqualWith';\nimport { helpers } from '../../common';\n\n/**\n * FixMe: PF tabs misinterprets \"isElementInView\" when tab title nodes are loaded dynamically\n * It appears the use of isElementInView within PF tabs is trying to be predicative in using\n * \"getBoundingClientRect\" but produces questionable results in scenarios where content is\n * async created. isElementInView assumes some form of the content will always be there\n * instead of scenarios where someone tries to dynamically apply components. It may be good to\n * review using a window.setTimeout(() => handleScrollButtons()) in componentDidMount.\n *\n * Our temporary solution is to simply hide the buttons with a manual set flag affecting the\n * CSS class. This will most likely cause long-term issues.\n */\n/**\n * ToDo: Insights frontend components uses a custom tabs layout, investigate related CSS classes\n * Originally we applied the CSS classes, but they appeared to provide nothing. Since Insights\n * rolled its own tabs we're hesitant to apply said classes without understanding what they provide.\n */\n/**\n * A set of tabs.\n *\n * @augments React.Component\n * @fires onTab\n */\nclass Tabs extends React.Component {\n  state = {\n    updatedActiveTab: null,\n    updatedTabs: null\n  };\n\n  componentDidMount() {\n    const { updatedTabs } = this.state;\n\n    if (updatedTabs === null) {\n      this.setTabData();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { tabs } = this.props;\n    const customizer = (valueA, valueB) => {\n      if (typeof valueA === 'function' && typeof valueB === 'function') {\n        return valueA.toString() === valueB.toString();\n      }\n\n      return undefined;\n    };\n\n    if (!_isEqualWith(prevProps.tabs, tabs, customizer)) {\n      this.setTabData();\n    }\n  }\n\n  /**\n   * On tab selected\n   *\n   * @event onTab\n   * @param {object} params\n   * @param {number} params.index\n   */\n  onTab = ({ index }) => {\n    const { onTab } = this.props;\n\n    this.setState(\n      {\n        updatedActiveTab: index\n      },\n      () => onTab({ index })\n    );\n  };\n\n  /**\n   * Convert tab objects into the required PF Tab format.\n   */\n  setTabData() {\n    const { activeTab, defaultActiveTab, tabs } = this.props;\n    let updatedActiveTab = defaultActiveTab;\n\n    const updatedTabs = tabs.map(({ active, content, title }, index) => {\n      updatedActiveTab = active ? index : updatedActiveTab;\n\n      return (\n        <Tab key={title} eventKey={index} title={<TabTitleText>{title}</TabTitleText>}>\n          {content}\n        </Tab>\n      );\n    });\n\n    if (typeof activeTab === 'number') {\n      updatedActiveTab = activeTab;\n    }\n\n    this.setState({\n      updatedActiveTab,\n      updatedTabs\n    });\n  }\n\n  /**\n   * Apply props to tabs.\n   *\n   * @returns {Node}\n   */\n  renderTabs() {\n    const { updatedActiveTab, updatedTabs } = this.state;\n    const { className, hasOverflowScroll } = this.props;\n\n    return (\n      <PfTabs\n        className={`curiosity-tabs${(!hasOverflowScroll && '__no-scroll') || ''} ${className || ''}`}\n        activeKey={updatedActiveTab}\n        onSelect={(event, index) => this.onTab({ event, index })}\n        mountOnEnter\n        unmountOnExit\n        inset={{\n          default: 'insetNone',\n          md: 'insetLg'\n        }}\n      >\n        {updatedTabs}\n      </PfTabs>\n    );\n  }\n\n  /**\n   * Render tabs.\n   *\n   * @returns {Node}\n   */\n  render() {\n    return (\n      <Grid className=\"curiosity-tabs-container\">\n        <GridItem span={12}>{this.renderTabs()}</GridItem>\n      </Grid>\n    );\n  }\n}\n\n/**\n * Prop types.\n *\n * @type {{tabs: Array, hasOverflowScroll: boolean, onTab: Function, className: string,\n *     defaultActiveTab: number, activeTab: number}}\n */\nTabs.propTypes = {\n  activeTab: PropTypes.number,\n  className: PropTypes.string,\n  defaultActiveTab: PropTypes.number,\n  hasOverflowScroll: PropTypes.bool,\n  onTab: PropTypes.func,\n  tabs: PropTypes.arrayOf(\n    PropTypes.shape({\n      active: PropTypes.bool,\n      content: PropTypes.node.isRequired,\n      title: PropTypes.node.isRequired\n    })\n  )\n};\n\n/**\n * Default props.\n *\n * @type {{tabs: Array, hasOverflowScroll: boolean, onTab: Function, className: string,\n *     defaultActiveTab: number, activeTab: number}}\n */\nTabs.defaultProps = {\n  activeTab: null,\n  className: '',\n  defaultActiveTab: 0,\n  hasOverflowScroll: false,\n  onTab: helpers.noop,\n  tabs: []\n};\n\nexport { Tabs as default, Tabs };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Toolbar as PfToolbar,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup\n} from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport {\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFieldQueries,\n  useToolbarSecondaryFields\n} from './toolbarContext';\nimport { ToolbarFieldSelectCategory, useSelectCategoryOptions } from './toolbarFieldSelectCategory';\nimport { helpers } from '../../common';\nimport { translate } from '../i18n/i18n';\n\n/**\n * Application filter toolbar.\n *\n * @fires onClearFilter\n * @fires onClearAll\n * @param {object} props\n * @param {boolean} props.hardFilterReset On clearing all fields allow the category to reset as well.\n * @param {boolean} props.isDisabled\n * @param {Function} props.t\n * @param {Function} props.useSelectCategoryOptions\n * @param {Function} props.useToolbarFieldClear\n * @param {Function} props.useToolbarFieldClearAll\n * @param {Function} props.useToolbarFieldQueries\n * @param {Function} props.useToolbarSecondaryFields\n * @returns {Node}\n */\nconst Toolbar = ({\n  hardFilterReset,\n  isDisabled,\n  t,\n  useSelectCategoryOptions: useAliasSelectCategoryOptions,\n  useToolbarFieldClear: useAliasToolbarFieldClear,\n  useToolbarFieldClearAll: useAliasToolbarFieldClearAll,\n  useToolbarFieldQueries: useAliasToolbarFieldQueries,\n  useToolbarSecondaryFields: useAliasToolbarSecondaryFields\n}) => {\n  const { currentCategory, options } = useAliasSelectCategoryOptions();\n  const toolbarFieldQueries = useAliasToolbarFieldQueries();\n  const clearField = useAliasToolbarFieldClear();\n  const clearAllFields = useAliasToolbarFieldClearAll();\n  const secondaryFields = useAliasToolbarSecondaryFields();\n\n  if (isDisabled || (!options?.length && !secondaryFields?.length)) {\n    return null;\n  }\n\n  /**\n   * Clear a specific value\n   *\n   * @event onClearFilter\n   * @param {object} params\n   * @param {*} params.value\n   * @returns {void}\n   */\n  const onClearFilter = ({ value }) => clearField(value);\n\n  /**\n   * Clear all active filters.\n   *\n   * @event onClearAll\n   * @returns {void}\n   */\n  const onClearAll = () => clearAllFields(hardFilterReset);\n\n  /**\n   * Set selected options for chip display.\n   *\n   * @param {object} params\n   * @param {Array} params.options\n   * @param {*} params.value\n   * @returns {Array}\n   */\n  const setSelectedOptions = ({ options: filterOptions, value }) => {\n    const query = filterOptions.find(({ value: optionValue }) => optionValue === toolbarFieldQueries?.[value]);\n    return (query?.title && [query?.title]) || [];\n  };\n\n  return (\n    <PfToolbar\n      id=\"curiosity-toolbar\"\n      className=\"curiosity-toolbar pf-m-toggle-group-container ins-c-primary-toolbar\"\n      collapseListedFiltersBreakpoint=\"sm\"\n      clearAllFilters={onClearAll}\n      clearFiltersButtonText={t('curiosity-toolbar.clearFilters')}\n    >\n      <ToolbarContent>\n        <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"md\">\n          <ToolbarGroup variant=\"filter-group\">\n            {options.length > 1 && (\n              <ToolbarItem>\n                <ToolbarFieldSelectCategory />\n              </ToolbarItem>\n            )}\n            {options.map(({ title, value, component: OptionComponent, isClearable, options: filterOptions }) => {\n              const chipProps = { categoryName: title };\n\n              if (isClearable !== false) {\n                chipProps.chips = setSelectedOptions({ options: filterOptions, value });\n                chipProps.deleteChip = () => onClearFilter({ options: filterOptions, value });\n              }\n\n              return (\n                <ToolbarFilter\n                  key={value}\n                  showToolbarItem={currentCategory === value || options.length === 1}\n                  {...chipProps}\n                >\n                  <OptionComponent isFilter />\n                </ToolbarFilter>\n              );\n            })}\n          </ToolbarGroup>\n        </ToolbarToggleGroup>\n        <ToolbarGroup alignment={{ default: 'alignRight' }}>{secondaryFields}</ToolbarGroup>\n      </ToolbarContent>\n    </PfToolbar>\n  );\n};\n\n/**\n * Prop types\n *\n * @type {{useToolbarFieldClear: Function, t: Function, useSelectCategoryOptions: Function, hardFilterReset: boolean,\n *     useToolbarSecondaryFields: Function, isDisabled: boolean, useToolbarFieldClearAll: Function, useToolbarFieldQueries: Function}}\n */\nToolbar.propTypes = {\n  hardFilterReset: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  t: PropTypes.func,\n  useSelectCategoryOptions: PropTypes.func,\n  useToolbarFieldClear: PropTypes.func,\n  useToolbarFieldClearAll: PropTypes.func,\n  useToolbarFieldQueries: PropTypes.func,\n  useToolbarSecondaryFields: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useToolbarFieldClear: Function, t: Function, useSelectCategoryOptions: Function, hardFilterReset: boolean,\n *     useToolbarSecondaryFields: Function, isDisabled: boolean, useToolbarFieldClearAll: Function, useToolbarFieldQueries: Function}}\n */\nToolbar.defaultProps = {\n  hardFilterReset: false,\n  isDisabled: helpers.UI_DISABLED_TOOLBAR,\n  t: translate,\n  useSelectCategoryOptions,\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFieldQueries,\n  useToolbarSecondaryFields\n};\n\nexport { Toolbar as default, Toolbar };\n","import React from 'react';\nimport { ToolbarItem } from '@patternfly/react-core';\nimport { useProductQuery, useProductGraphTallyQuery, useProductToolbarConfig } from '../productView/productViewContext';\nimport { RHSM_API_QUERY_SET_TYPES } from '../../services/rhsm/rhsmConstants';\nimport { useOnSelect as useSelectCategoryOnSelect, toolbarFieldOptions } from './toolbarFieldSelectCategory';\nimport { useOnSelect as useBillingProviderOnSelect } from './toolbarFieldBillingProvider';\nimport { useOnSelect as useSlaOnSelect } from './toolbarFieldSla';\nimport { useOnSelect as useUsageOnSelect } from './toolbarFieldUsage';\nimport { SelectPosition } from '../form/select';\nimport { helpers } from '../../common/helpers';\n\n/**\n * Return current values for categories/queries.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useProductGraphTallyQuery\n * @returns {object}\n */\nconst useToolbarFieldQueries = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useProductGraphTallyQuery: useAliasProductGraphTallyQuery = useProductGraphTallyQuery\n} = {}) => {\n  const {\n    [RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER]: billingProvider,\n    [RHSM_API_QUERY_SET_TYPES.SLA]: sla,\n    [RHSM_API_QUERY_SET_TYPES.UOM]: uom,\n    [RHSM_API_QUERY_SET_TYPES.USAGE]: usage\n  } = useAliasProductQuery();\n  const { [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity } = useAliasProductGraphTallyQuery();\n\n  return {\n    [RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER]: billingProvider,\n    [RHSM_API_QUERY_SET_TYPES.GRANULARITY]: granularity,\n    [RHSM_API_QUERY_SET_TYPES.SLA]: sla,\n    [RHSM_API_QUERY_SET_TYPES.UOM]: uom,\n    [RHSM_API_QUERY_SET_TYPES.USAGE]: usage\n  };\n};\n\n/**\n * Clear a specific toolbar category.\n *\n * @param {object} options\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClear = ({\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect\n} = {}) => {\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n\n  return field => {\n    switch (field) {\n      case RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER:\n        billingOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.SLA:\n        slaOnSelect();\n        break;\n      case RHSM_API_QUERY_SET_TYPES.USAGE:\n        usageOnSelect();\n        break;\n      default:\n        break;\n    }\n  };\n};\n\n/**\n * Clear all available toolbar categories.\n *\n * @param {object} options\n * @param {Function} options.useProductQuery\n * @param {Function} options.useSelectCategoryOnSelect\n * @param {Function} options.useBillingProviderOnSelect\n * @param {Function} options.useSlaOnSelect\n * @param {Function} options.useUsageOnSelect\n * @returns {Function}\n */\nconst useToolbarFieldClearAll = ({\n  useProductQuery: useAliasProductQuery = useProductQuery,\n  useSelectCategoryOnSelect: useAliasSelectCategoryOnSelect = useSelectCategoryOnSelect,\n  useBillingProviderOnSelect: useAliasBillingProviderOnSelect = useBillingProviderOnSelect,\n  useSlaOnSelect: useAliasSlaOnSelect = useSlaOnSelect,\n  useUsageOnSelect: useAliasUsageOnSelect = useUsageOnSelect\n} = {}) => {\n  const {\n    [RHSM_API_QUERY_SET_TYPES.BILLING_PROVIDER]: billingProvider,\n    [RHSM_API_QUERY_SET_TYPES.SLA]: sla,\n    [RHSM_API_QUERY_SET_TYPES.USAGE]: usage\n  } = useAliasProductQuery();\n  const billingOnSelect = useAliasBillingProviderOnSelect();\n  const slaOnSelect = useAliasSlaOnSelect();\n  const usageOnSelect = useAliasUsageOnSelect();\n  const selectCategoryOnSelect = useAliasSelectCategoryOnSelect();\n\n  return hardFilterReset => {\n    if (typeof billingProvider === 'string') {\n      billingOnSelect();\n    }\n\n    if (typeof sla === 'string') {\n      slaOnSelect();\n    }\n\n    if (typeof usage === 'string') {\n      usageOnSelect();\n    }\n\n    if (hardFilterReset) {\n      selectCategoryOnSelect();\n    }\n  };\n};\n\n/**\n * Return list of secondary toolbar fields for display.\n *\n * @param {object} options\n * @param {Array} options.categoryOptions\n * @param {Function} options.useProductToolbarConfig\n * @returns {Array}\n */\nconst useToolbarSecondaryFields = ({\n  categoryOptions = toolbarFieldOptions,\n  useProductToolbarConfig: useAliasProductToolbarConfig = useProductToolbarConfig\n} = {}) => {\n  const { secondaryFilters = [] } = useAliasProductToolbarConfig();\n\n  return secondaryFilters.map(({ id, content }) => {\n    const option = categoryOptions.find(({ value: categoryOptionValue }) => id === categoryOptionValue);\n    const { component: OptionComponent } = option || {};\n\n    return (\n      (OptionComponent && (\n        <ToolbarItem key={`option-${id}`}>\n          <OptionComponent isFilter={false} position={SelectPosition.right} />\n        </ToolbarItem>\n      )) || <ToolbarItem key={helpers.generateId()}>{content}</ToolbarItem> ||\n      null\n    );\n  });\n};\n\nconst context = {\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFieldQueries,\n  useToolbarSecondaryFields\n};\n\nexport {\n  context as default,\n  context,\n  useToolbarFieldClear,\n  useToolbarFieldClearAll,\n  useToolbarFieldQueries,\n  useToolbarSecondaryFields\n};\n"],"names":["BannerMessages","messages","useAliasGetAppMessages","useGetAppMessages","useState","hideAlerts","setHideAlerts","alerts","setAlerts","appMessages","data","useShallowCompareEffect","updatedMessages","length","Object","entries","forEach","key","value","message","find","id","push","map","title","variant","AlertVariant","actionClose","AlertActionCloseButton","onClose","Alert","className","defaultProps","translate","context","helpers","appName","Button","isInline","component","icon","ExternalLinkAltIcon","iconPosition","target","href","getMessageReports","reduxActions","useDispatch","useAliasDispatch","storeHooks","useProduct","useAliasProduct","useProductQuery","useAliasProductQuery","useSelectorsResponse","useAliasSelectorsResponse","productId","query","dispatch","selector","report","error","fulfilled","pending","dateHelpers","startDate","endDate","updatedQuery","RHSM_API_QUERY_SET_TYPES","GRANULARITY_TYPES","toISOString","updatedData","cloudigradeMismatch","undefined","reverse","rhsmConstants","GraphCard","isDisabled","useAliasProductGraphConfig","useProductGraphConfig","filters","settings","graphCardHelpers","groupedFiltersSettings","standaloneFiltersSettings","GraphCardContext","GraphCardChart","filtersSettings","metric","GraphCardMetricTotals","children","t","useAliasMetricsSelector","useMetricsSelector","useAliasProductGraphTallyQuery","useProductGraphTallyQuery","dataSets","metricId","meta","lastDate","date","lastHasData","hasData","lastValue","y","isCurrentDate","currentDate","currentHasData","currentValue","monthlyDate","totalMonthlyDate","monthlyHasData","totalMonthlyHasData","monthlyValue","totalMonthlyValue","toolbarFieldOptions","option","selectedMonth","isCurrent","dailyDate","dailyHasData","dailyValue","Flex","_camelCase","flex","default","direction","alignSelf","FlexItem","Card","CardTitle","month","MinHeight","CardBody","Loader","skeletonProps","size","SkeletonSize","total","format","average","mantissa","trimMantissa","lowPrecision","toUpperCase","CardFooter","moment","InventoryCardHosts","props","useGetInventory","useGetHostsInventory","useOnColumnSort","useOnColumnSortHosts","InventoryCardSubscriptions","cardActions","useGetSubscriptionsInventory","useOnPage","useOnPageSubscriptions","useOnColumnSortSubscriptions","useProductInventoryConfig","useProductInventorySubscriptionsConfig","useProductInventoryQuery","useProductInventorySubscriptionsQuery","getInventory","useAliasProductInventoryQuery","inventory","subscriptionsInventory","cancelled","response","offset","perPage","type","reduxTypes","viewId","sortColumns","SORT_TYPES","_data","updatedDirection","updatedSortColumn","values","SortByDirection","SORT_DIRECTION_TYPES","console","warn","InventoryTab","active","propTypes","PropTypes","InventoryTabs","onTab","index","store","tabs","this","activeTab","defaultActiveTab","updatedChildren","React","child","content","count","Title","headingLevel","Tabs","ConnectedInventoryTabs","connect","ProductView","useAliasRouteDetail","useRouteDetail","routeProductLabel","productParameter","productConfig","PageLayout","PageHeader","productLabel","PageColumns","config","initialInventoryFilters","initialSubscriptionsInventoryFilters","productDisplay","ProductViewContext","PageMessages","DISPLAY_TYPES","PageToolbar","Toolbar","PageSection","InventoryCard","renderProduct","state","updatedActiveTab","updatedTabs","setState","setTabData","prevProps","_isEqualWith","valueA","valueB","toString","Tab","eventKey","TabTitleText","hasOverflowScroll","activeKey","onSelect","event","mountOnEnter","unmountOnExit","inset","md","Grid","GridItem","span","renderTabs","hardFilterReset","useAliasSelectCategoryOptions","useSelectCategoryOptions","useAliasToolbarFieldClear","useToolbarFieldClear","useAliasToolbarFieldClearAll","useToolbarFieldClearAll","useAliasToolbarFieldQueries","useToolbarFieldQueries","useAliasToolbarSecondaryFields","useToolbarSecondaryFields","currentCategory","options","toolbarFieldQueries","clearField","clearAllFields","secondaryFields","collapseListedFiltersBreakpoint","clearAllFilters","clearFiltersButtonText","ToolbarContent","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarGroup","ToolbarItem","ToolbarFieldSelectCategory","OptionComponent","isClearable","filterOptions","chipProps","categoryName","chips","setSelectedOptions","deleteChip","ToolbarFilter","showToolbarItem","isFilter","alignment","billingProvider","sla","uom","usage","granularity","useBillingProviderOnSelect","useAliasBillingProviderOnSelect","useSlaOnSelect","useAliasSlaOnSelect","useUsageOnSelect","useAliasUsageOnSelect","billingOnSelect","slaOnSelect","usageOnSelect","field","useSelectCategoryOnSelect","useAliasSelectCategoryOnSelect","selectCategoryOnSelect","categoryOptions","useProductToolbarConfig","useAliasProductToolbarConfig","secondaryFilters","categoryOptionValue","position","SelectPosition"],"sourceRoot":""}