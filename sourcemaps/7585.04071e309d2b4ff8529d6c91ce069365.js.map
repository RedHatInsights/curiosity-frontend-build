{"version":3,"file":"js/7585.fff57b8b5b17250139c7.js","mappings":"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","sources":["webpack:///./src/components/bannerMessages/bannerMessages.js","webpack:///./src/components/bannerMessages/bannerMessagesContext.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, AlertActionCloseButton, AlertGroup, AlertVariant } from '@patternfly/react-core';\nimport { useBannerMessages, useRemoveBannerMessages } from './bannerMessagesContext';\n\n/**\n * Banner alert messages for a product view.\n *\n * @memberof Components\n * @module BannerMessages\n * @property {module} BannerMessagesContext\n */\n\n/**\n * Render banner messages.\n *\n * @param {object} props\n * @param {Function} props.useBannerMessages\n * @param {Function} props.useRemoveBannerMessages\n * @returns {React.ReactNode}\n */\nconst BannerMessages = ({\n  useBannerMessages: useAliasBannerMessages,\n  useRemoveBannerMessages: useAliasRemoveBannerMessages\n}) => {\n  const bannerMessages = useAliasBannerMessages();\n  const removeBannerMessages = useAliasRemoveBannerMessages();\n\n  if (bannerMessages?.length) {\n    return (\n      <div className=\"curiosity-banner-messages\">\n        <AlertGroup isLiveRegion>\n          {bannerMessages?.map(({ id, message, title, variant = AlertVariant.info }) => {\n            const actionClose = <AlertActionCloseButton onClose={() => removeBannerMessages(id || title)} />;\n\n            return (\n              <Alert actionClose={actionClose} key={id || title} title={title} variant={variant} isInline>\n                {message}\n              </Alert>\n            );\n          })}\n        </AlertGroup>\n      </div>\n    );\n  }\n\n  return null;\n};\n\n/**\n * Prop types.\n *\n * @type {{useBannerMessages: Function, useRemoveBannerMessages: Function}}\n */\nBannerMessages.propTypes = {\n  useBannerMessages: PropTypes.func,\n  useRemoveBannerMessages: PropTypes.func\n};\n\n/**\n * Default props.\n *\n * @type {{useBannerMessages: Function, useRemoveBannerMessages: Function}}\n */\nBannerMessages.defaultProps = {\n  useBannerMessages,\n  useRemoveBannerMessages\n};\n\nexport { BannerMessages as default, BannerMessages };\n","import { useCallback } from 'react';\nimport { reduxTypes, storeHooks } from '../../redux';\nimport { useProduct } from '../productView/productViewContext';\nimport { helpers } from '../../common/helpers';\n\n/**\n * @memberof BannerMessages\n * @module BannerMessagesContext\n */\n\n/**\n * Retrieve, set and remove application banner messages from state.\n *\n * @param {object} options\n * @param {Function} options.useProduct\n * @param {Function} options.useSelector\n * @returns {{ bannerMessages: Array, setBannerMessages: Function, removeBannerMessages: Function }}\n */\nconst useBannerMessages = ({\n  useProduct: useAliasProduct = useProduct,\n  useSelector: useAliasSelector = storeHooks.reactRedux.useSelector\n} = {}) => {\n  const { productId } = useAliasProduct();\n  return useAliasSelector(({ messages }) => messages?.bannerMessages?.[productId], []);\n};\n\n/**\n * Provide a callback for removing application banner messages from state.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useBannerMessages\n * @returns {Function}\n */\nconst useRemoveBannerMessages = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useBannerMessages: useAliasBannerMessages = useBannerMessages\n} = {}) => {\n  const dispatch = useAliasDispatch();\n  const { productId } = useAliasProduct();\n  const bannerMessages = useAliasBannerMessages();\n\n  /**\n   * Remove a banner message from state.\n   *\n   * @callback removeBannerMessages\n   * @param {string} idTitle\n   */\n  return useCallback(\n    idTitle => {\n      if (productId && Array.isArray(bannerMessages) && bannerMessages.length) {\n        const filteredMessages = bannerMessages.filter(({ id, title }) => id !== idTitle && title !== idTitle);\n\n        dispatch({\n          type: reduxTypes.message.SET_BANNER_MESSAGES,\n          viewId: productId,\n          bannerMessages: filteredMessages || []\n        });\n      }\n    },\n    [bannerMessages, dispatch, productId]\n  );\n};\n\n/**\n * Provide a callback for setting application banner messages from state.\n *\n * @param {object} options\n * @param {Function} options.useDispatch\n * @param {Function} options.useProduct\n * @param {Function} options.useBannerMessages\n * @returns {Function}\n */\nconst useSetBannerMessages = ({\n  useDispatch: useAliasDispatch = storeHooks.reactRedux.useDispatch,\n  useProduct: useAliasProduct = useProduct,\n  useBannerMessages: useAliasBannerMessages = useBannerMessages\n} = {}) => {\n  const dispatch = useAliasDispatch();\n  const { productId } = useAliasProduct();\n  const bannerMessages = useAliasBannerMessages();\n\n  /**\n   * Set application messages for banner display\n   *\n   * @callback setBannerMessages\n   * @param {Array<{ id: string, message: string, title: string, variant: string }>|{ id: string, message: string, title: string, variant: string }} messages\n   */\n  return useCallback(\n    messages => {\n      if (productId) {\n        const updatedMessages = (Array.isArray(messages) && messages) || [messages];\n\n        dispatch({\n          type: reduxTypes.message.SET_BANNER_MESSAGES,\n          viewId: productId,\n          bannerMessages: [\n            ...(bannerMessages || []),\n            ...updatedMessages\n              .map(value => {\n                if (value?.id || value?.title || value?.message || value?.variant) {\n                  return value;\n                }\n\n                if (typeof value === 'string' || typeof value === 'number') {\n                  return {\n                    id: value,\n                    title: value\n                  };\n                }\n\n                return undefined;\n              })\n              .filter(value => value !== undefined)\n          ]\n        });\n      } else if (helpers.DEV_MODE) {\n        console.warn(\n          'Banner messages currently require the use of \"product id\". Product context is unavailable, try moving your banner message \"set\" lower in the component order.'\n        );\n      }\n    },\n    [bannerMessages, dispatch, productId]\n  );\n};\n\nconst context = {\n  useBannerMessages,\n  useRemoveBannerMessages,\n  useSetBannerMessages\n};\n\nexport { context as default, context, useBannerMessages, useRemoveBannerMessages, useSetBannerMessages };\n"],"names":["BannerMessages","_ref","useAliasBannerMessages","useBannerMessages","useAliasRemoveBannerMessages","useRemoveBannerMessages","bannerMessages","removeBannerMessages","length","React","className","AlertGroup","isLiveRegion","map","_ref2","id","message","title","_ref2$variant","variant","AlertVariant","actionClose","AlertActionCloseButton","onClose","Alert","key","isInline","defaultProps","arguments","undefined","_ref$useProduct","useProduct","useAliasProduct","_ref$useSelector","useSelector","useAliasSelector","storeHooks","_useAliasProduct","productId","_messages$bannerMessa","messages","_ref3","_ref3$useDispatch","useDispatch","useAliasDispatch","_ref3$useProduct","_ref3$useBannerMessag","dispatch","_useAliasProduct2","useCallback","idTitle","Array","isArray","filteredMessages","filter","_ref4","type","reduxTypes","viewId","useSetBannerMessages","_ref5","_ref5$useDispatch","_ref5$useProduct","_ref5$useBannerMessag","_useAliasProduct3","updatedMessages","concat","_toConsumableArray","value","helpers","console","warn","context"],"sourceRoot":""}